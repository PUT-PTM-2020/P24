
serwer_plikow.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08005ef8  08005ef8  00015ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006054  08006054  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006054  08006054  00016054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800605c  0800605c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800605c  0800605c  0001605c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006060  08006060  00016060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006064  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000640  20000070  080060d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b0  080060d4  000206b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c63  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001924  00000000  00000000  00029d03  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000908  00000000  00000000  0002b628  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000830  00000000  00000000  0002bf30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000212a3  00000000  00000000  0002c760  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000078f2  00000000  00000000  0004da03  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6626  00000000  00000000  000552f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011b91b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b3c  00000000  00000000  0011b998  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ee0 	.word	0x08005ee0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005ee0 	.word	0x08005ee0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000574:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <HAL_Init+0x40>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <HAL_Init+0x40>)
 800057a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800057e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <HAL_Init+0x40>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <HAL_Init+0x40>)
 8000586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800058a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <HAL_Init+0x40>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a07      	ldr	r2, [pc, #28]	; (80005b0 <HAL_Init+0x40>)
 8000592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000598:	2003      	movs	r0, #3
 800059a:	f000 f90d 	bl	80007b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 f808 	bl	80005b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005a4:	f004 fb9c 	bl	8004ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a8:	2300      	movs	r3, #0
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40023c00 	.word	0x40023c00

080005b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <HAL_InitTick+0x54>)
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_InitTick+0x58>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	4619      	mov	r1, r3
 80005c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f917 	bl	8000806 <HAL_SYSTICK_Config>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005de:	2301      	movs	r3, #1
 80005e0:	e00e      	b.n	8000600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b0f      	cmp	r3, #15
 80005e6:	d80a      	bhi.n	80005fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e8:	2200      	movs	r2, #0
 80005ea:	6879      	ldr	r1, [r7, #4]
 80005ec:	f04f 30ff 	mov.w	r0, #4294967295
 80005f0:	f000 f8ed 	bl	80007ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f4:	4a06      	ldr	r2, [pc, #24]	; (8000610 <HAL_InitTick+0x5c>)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005fa:	2300      	movs	r3, #0
 80005fc:	e000      	b.n	8000600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20000008 	.word	0x20000008
 800060c:	20000004 	.word	0x20000004
 8000610:	20000000 	.word	0x20000000

08000614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_IncTick+0x20>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <HAL_IncTick+0x24>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4413      	add	r3, r2
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <HAL_IncTick+0x24>)
 8000626:	6013      	str	r3, [r2, #0]
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000004 	.word	0x20000004
 8000638:	200002d4 	.word	0x200002d4

0800063c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return uwTick;
 8000640:	4b03      	ldr	r3, [pc, #12]	; (8000650 <HAL_GetTick+0x14>)
 8000642:	681b      	ldr	r3, [r3, #0]
}
 8000644:	4618      	mov	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	200002d4 	.word	0x200002d4

08000654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f003 0307 	and.w	r3, r3, #7
 8000662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <__NVIC_SetPriorityGrouping+0x44>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000670:	4013      	ands	r3, r2
 8000672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800067c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000686:	4a04      	ldr	r2, [pc, #16]	; (8000698 <__NVIC_SetPriorityGrouping+0x44>)
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	60d3      	str	r3, [r2, #12]
}
 800068c:	bf00      	nop
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <__NVIC_GetPriorityGrouping+0x18>)
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	0a1b      	lsrs	r3, r3, #8
 80006a6:	f003 0307 	and.w	r3, r3, #7
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	db0a      	blt.n	80006e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	490c      	ldr	r1, [pc, #48]	; (8000704 <__NVIC_SetPriority+0x4c>)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	0112      	lsls	r2, r2, #4
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	440b      	add	r3, r1
 80006dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006e0:	e00a      	b.n	80006f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4908      	ldr	r1, [pc, #32]	; (8000708 <__NVIC_SetPriority+0x50>)
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	f003 030f 	and.w	r3, r3, #15
 80006ee:	3b04      	subs	r3, #4
 80006f0:	0112      	lsls	r2, r2, #4
 80006f2:	b2d2      	uxtb	r2, r2
 80006f4:	440b      	add	r3, r1
 80006f6:	761a      	strb	r2, [r3, #24]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	e000e100 	.word	0xe000e100
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800070c:	b480      	push	{r7}
 800070e:	b089      	sub	sp, #36	; 0x24
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000720:	69fb      	ldr	r3, [r7, #28]
 8000722:	f1c3 0307 	rsb	r3, r3, #7
 8000726:	2b04      	cmp	r3, #4
 8000728:	bf28      	it	cs
 800072a:	2304      	movcs	r3, #4
 800072c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	3304      	adds	r3, #4
 8000732:	2b06      	cmp	r3, #6
 8000734:	d902      	bls.n	800073c <NVIC_EncodePriority+0x30>
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	3b03      	subs	r3, #3
 800073a:	e000      	b.n	800073e <NVIC_EncodePriority+0x32>
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	f04f 32ff 	mov.w	r2, #4294967295
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	43da      	mvns	r2, r3
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	401a      	ands	r2, r3
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000754:	f04f 31ff 	mov.w	r1, #4294967295
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	fa01 f303 	lsl.w	r3, r1, r3
 800075e:	43d9      	mvns	r1, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	4313      	orrs	r3, r2
         );
}
 8000766:	4618      	mov	r0, r3
 8000768:	3724      	adds	r7, #36	; 0x24
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3b01      	subs	r3, #1
 8000780:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000784:	d301      	bcc.n	800078a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000786:	2301      	movs	r3, #1
 8000788:	e00f      	b.n	80007aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800078a:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <SysTick_Config+0x40>)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	3b01      	subs	r3, #1
 8000790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000792:	210f      	movs	r1, #15
 8000794:	f04f 30ff 	mov.w	r0, #4294967295
 8000798:	f7ff ff8e 	bl	80006b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <SysTick_Config+0x40>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007a2:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <SysTick_Config+0x40>)
 80007a4:	2207      	movs	r2, #7
 80007a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	e000e010 	.word	0xe000e010

080007b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff ff47 	bl	8000654 <__NVIC_SetPriorityGrouping>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b086      	sub	sp, #24
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	4603      	mov	r3, r0
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607a      	str	r2, [r7, #4]
 80007da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007e0:	f7ff ff5c 	bl	800069c <__NVIC_GetPriorityGrouping>
 80007e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	68b9      	ldr	r1, [r7, #8]
 80007ea:	6978      	ldr	r0, [r7, #20]
 80007ec:	f7ff ff8e 	bl	800070c <NVIC_EncodePriority>
 80007f0:	4602      	mov	r2, r0
 80007f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f6:	4611      	mov	r1, r2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff5d 	bl	80006b8 <__NVIC_SetPriority>
}
 80007fe:	bf00      	nop
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ffb0 	bl	8000774 <SysTick_Config>
 8000814:	4603      	mov	r3, r0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000820:	b480      	push	{r7}
 8000822:	b089      	sub	sp, #36	; 0x24
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
 800083a:	e16b      	b.n	8000b14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800083c:	2201      	movs	r2, #1
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	fa02 f303 	lsl.w	r3, r2, r3
 8000844:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	697a      	ldr	r2, [r7, #20]
 800084c:	4013      	ands	r3, r2
 800084e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000850:	693a      	ldr	r2, [r7, #16]
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	429a      	cmp	r2, r3
 8000856:	f040 815a 	bne.w	8000b0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d00b      	beq.n	800087a <HAL_GPIO_Init+0x5a>
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	2b02      	cmp	r3, #2
 8000868:	d007      	beq.n	800087a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800086e:	2b11      	cmp	r3, #17
 8000870:	d003      	beq.n	800087a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	2b12      	cmp	r3, #18
 8000878:	d130      	bne.n	80008dc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	2203      	movs	r2, #3
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	43db      	mvns	r3, r3
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	4013      	ands	r3, r2
 8000890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	68da      	ldr	r2, [r3, #12]
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	69ba      	ldr	r2, [r7, #24]
 80008a0:	4313      	orrs	r3, r2
 80008a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	69ba      	ldr	r2, [r7, #24]
 80008a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008b0:	2201      	movs	r2, #1
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	43db      	mvns	r3, r3
 80008ba:	69ba      	ldr	r2, [r7, #24]
 80008bc:	4013      	ands	r3, r2
 80008be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	091b      	lsrs	r3, r3, #4
 80008c6:	f003 0201 	and.w	r2, r3, #1
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	69ba      	ldr	r2, [r7, #24]
 80008d2:	4313      	orrs	r3, r2
 80008d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	69ba      	ldr	r2, [r7, #24]
 80008da:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	2203      	movs	r2, #3
 80008e8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ec:	43db      	mvns	r3, r3
 80008ee:	69ba      	ldr	r2, [r7, #24]
 80008f0:	4013      	ands	r3, r2
 80008f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	689a      	ldr	r2, [r3, #8]
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	4313      	orrs	r3, r2
 8000904:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	69ba      	ldr	r2, [r7, #24]
 800090a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	2b02      	cmp	r3, #2
 8000912:	d003      	beq.n	800091c <HAL_GPIO_Init+0xfc>
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	2b12      	cmp	r3, #18
 800091a:	d123      	bne.n	8000964 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	08da      	lsrs	r2, r3, #3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3208      	adds	r2, #8
 8000924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000928:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	f003 0307 	and.w	r3, r3, #7
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	220f      	movs	r2, #15
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	43db      	mvns	r3, r3
 800093a:	69ba      	ldr	r2, [r7, #24]
 800093c:	4013      	ands	r3, r2
 800093e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	691a      	ldr	r2, [r3, #16]
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	fa02 f303 	lsl.w	r3, r2, r3
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	4313      	orrs	r3, r2
 8000954:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	08da      	lsrs	r2, r3, #3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	3208      	adds	r2, #8
 800095e:	69b9      	ldr	r1, [r7, #24]
 8000960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	2203      	movs	r2, #3
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	43db      	mvns	r3, r3
 8000976:	69ba      	ldr	r2, [r7, #24]
 8000978:	4013      	ands	r3, r2
 800097a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	f003 0203 	and.w	r2, r3, #3
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	fa02 f303 	lsl.w	r3, r2, r3
 800098c:	69ba      	ldr	r2, [r7, #24]
 800098e:	4313      	orrs	r3, r2
 8000990:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	69ba      	ldr	r2, [r7, #24]
 8000996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	f000 80b4 	beq.w	8000b0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b5f      	ldr	r3, [pc, #380]	; (8000b28 <HAL_GPIO_Init+0x308>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	4a5e      	ldr	r2, [pc, #376]	; (8000b28 <HAL_GPIO_Init+0x308>)
 80009b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b4:	6453      	str	r3, [r2, #68]	; 0x44
 80009b6:	4b5c      	ldr	r3, [pc, #368]	; (8000b28 <HAL_GPIO_Init+0x308>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009c2:	4a5a      	ldr	r2, [pc, #360]	; (8000b2c <HAL_GPIO_Init+0x30c>)
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	089b      	lsrs	r3, r3, #2
 80009c8:	3302      	adds	r3, #2
 80009ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	f003 0303 	and.w	r3, r3, #3
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	220f      	movs	r2, #15
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43db      	mvns	r3, r3
 80009e0:	69ba      	ldr	r2, [r7, #24]
 80009e2:	4013      	ands	r3, r2
 80009e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a51      	ldr	r2, [pc, #324]	; (8000b30 <HAL_GPIO_Init+0x310>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d02b      	beq.n	8000a46 <HAL_GPIO_Init+0x226>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a50      	ldr	r2, [pc, #320]	; (8000b34 <HAL_GPIO_Init+0x314>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d025      	beq.n	8000a42 <HAL_GPIO_Init+0x222>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a4f      	ldr	r2, [pc, #316]	; (8000b38 <HAL_GPIO_Init+0x318>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d01f      	beq.n	8000a3e <HAL_GPIO_Init+0x21e>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a4e      	ldr	r2, [pc, #312]	; (8000b3c <HAL_GPIO_Init+0x31c>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d019      	beq.n	8000a3a <HAL_GPIO_Init+0x21a>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a4d      	ldr	r2, [pc, #308]	; (8000b40 <HAL_GPIO_Init+0x320>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d013      	beq.n	8000a36 <HAL_GPIO_Init+0x216>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a4c      	ldr	r2, [pc, #304]	; (8000b44 <HAL_GPIO_Init+0x324>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d00d      	beq.n	8000a32 <HAL_GPIO_Init+0x212>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a4b      	ldr	r2, [pc, #300]	; (8000b48 <HAL_GPIO_Init+0x328>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d007      	beq.n	8000a2e <HAL_GPIO_Init+0x20e>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a4a      	ldr	r2, [pc, #296]	; (8000b4c <HAL_GPIO_Init+0x32c>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d101      	bne.n	8000a2a <HAL_GPIO_Init+0x20a>
 8000a26:	2307      	movs	r3, #7
 8000a28:	e00e      	b.n	8000a48 <HAL_GPIO_Init+0x228>
 8000a2a:	2308      	movs	r3, #8
 8000a2c:	e00c      	b.n	8000a48 <HAL_GPIO_Init+0x228>
 8000a2e:	2306      	movs	r3, #6
 8000a30:	e00a      	b.n	8000a48 <HAL_GPIO_Init+0x228>
 8000a32:	2305      	movs	r3, #5
 8000a34:	e008      	b.n	8000a48 <HAL_GPIO_Init+0x228>
 8000a36:	2304      	movs	r3, #4
 8000a38:	e006      	b.n	8000a48 <HAL_GPIO_Init+0x228>
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	e004      	b.n	8000a48 <HAL_GPIO_Init+0x228>
 8000a3e:	2302      	movs	r3, #2
 8000a40:	e002      	b.n	8000a48 <HAL_GPIO_Init+0x228>
 8000a42:	2301      	movs	r3, #1
 8000a44:	e000      	b.n	8000a48 <HAL_GPIO_Init+0x228>
 8000a46:	2300      	movs	r3, #0
 8000a48:	69fa      	ldr	r2, [r7, #28]
 8000a4a:	f002 0203 	and.w	r2, r2, #3
 8000a4e:	0092      	lsls	r2, r2, #2
 8000a50:	4093      	lsls	r3, r2
 8000a52:	69ba      	ldr	r2, [r7, #24]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a58:	4934      	ldr	r1, [pc, #208]	; (8000b2c <HAL_GPIO_Init+0x30c>)
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	089b      	lsrs	r3, r3, #2
 8000a5e:	3302      	adds	r3, #2
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a66:	4b3a      	ldr	r3, [pc, #232]	; (8000b50 <HAL_GPIO_Init+0x330>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	69ba      	ldr	r2, [r7, #24]
 8000a72:	4013      	ands	r3, r2
 8000a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d003      	beq.n	8000a8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a82:	69ba      	ldr	r2, [r7, #24]
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a8a:	4a31      	ldr	r2, [pc, #196]	; (8000b50 <HAL_GPIO_Init+0x330>)
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a90:	4b2f      	ldr	r3, [pc, #188]	; (8000b50 <HAL_GPIO_Init+0x330>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	69ba      	ldr	r2, [r7, #24]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d003      	beq.n	8000ab4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000aac:	69ba      	ldr	r2, [r7, #24]
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ab4:	4a26      	ldr	r2, [pc, #152]	; (8000b50 <HAL_GPIO_Init+0x330>)
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000aba:	4b25      	ldr	r3, [pc, #148]	; (8000b50 <HAL_GPIO_Init+0x330>)
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d003      	beq.n	8000ade <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ad6:	69ba      	ldr	r2, [r7, #24]
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ade:	4a1c      	ldr	r2, [pc, #112]	; (8000b50 <HAL_GPIO_Init+0x330>)
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <HAL_GPIO_Init+0x330>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	43db      	mvns	r3, r3
 8000aee:	69ba      	ldr	r2, [r7, #24]
 8000af0:	4013      	ands	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d003      	beq.n	8000b08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b08:	4a11      	ldr	r2, [pc, #68]	; (8000b50 <HAL_GPIO_Init+0x330>)
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3301      	adds	r3, #1
 8000b12:	61fb      	str	r3, [r7, #28]
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	2b0f      	cmp	r3, #15
 8000b18:	f67f ae90 	bls.w	800083c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	3724      	adds	r7, #36	; 0x24
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40013800 	.word	0x40013800
 8000b30:	40020000 	.word	0x40020000
 8000b34:	40020400 	.word	0x40020400
 8000b38:	40020800 	.word	0x40020800
 8000b3c:	40020c00 	.word	0x40020c00
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40021400 	.word	0x40021400
 8000b48:	40021800 	.word	0x40021800
 8000b4c:	40021c00 	.word	0x40021c00
 8000b50:	40013c00 	.word	0x40013c00

08000b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	807b      	strh	r3, [r7, #2]
 8000b60:	4613      	mov	r3, r2
 8000b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b64:	787b      	ldrb	r3, [r7, #1]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d003      	beq.n	8000b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b6a:	887a      	ldrh	r2, [r7, #2]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b70:	e003      	b.n	8000b7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b72:	887b      	ldrh	r3, [r7, #2]
 8000b74:	041a      	lsls	r2, r3, #16
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	619a      	str	r2, [r3, #24]
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
	...

08000b88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d101      	bne.n	8000b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e25b      	b.n	8001052 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d075      	beq.n	8000c92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ba6:	4ba3      	ldr	r3, [pc, #652]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	f003 030c 	and.w	r3, r3, #12
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	d00c      	beq.n	8000bcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bb2:	4ba0      	ldr	r3, [pc, #640]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bba:	2b08      	cmp	r3, #8
 8000bbc:	d112      	bne.n	8000be4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bbe:	4b9d      	ldr	r3, [pc, #628]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000bca:	d10b      	bne.n	8000be4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bcc:	4b99      	ldr	r3, [pc, #612]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d05b      	beq.n	8000c90 <HAL_RCC_OscConfig+0x108>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d157      	bne.n	8000c90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	e236      	b.n	8001052 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bec:	d106      	bne.n	8000bfc <HAL_RCC_OscConfig+0x74>
 8000bee:	4b91      	ldr	r3, [pc, #580]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a90      	ldr	r2, [pc, #576]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bf8:	6013      	str	r3, [r2, #0]
 8000bfa:	e01d      	b.n	8000c38 <HAL_RCC_OscConfig+0xb0>
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c04:	d10c      	bne.n	8000c20 <HAL_RCC_OscConfig+0x98>
 8000c06:	4b8b      	ldr	r3, [pc, #556]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a8a      	ldr	r2, [pc, #552]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	4b88      	ldr	r3, [pc, #544]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a87      	ldr	r2, [pc, #540]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c1c:	6013      	str	r3, [r2, #0]
 8000c1e:	e00b      	b.n	8000c38 <HAL_RCC_OscConfig+0xb0>
 8000c20:	4b84      	ldr	r3, [pc, #528]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a83      	ldr	r2, [pc, #524]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	4b81      	ldr	r3, [pc, #516]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a80      	ldr	r2, [pc, #512]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d013      	beq.n	8000c68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c40:	f7ff fcfc 	bl	800063c <HAL_GetTick>
 8000c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c46:	e008      	b.n	8000c5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c48:	f7ff fcf8 	bl	800063c <HAL_GetTick>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	2b64      	cmp	r3, #100	; 0x64
 8000c54:	d901      	bls.n	8000c5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c56:	2303      	movs	r3, #3
 8000c58:	e1fb      	b.n	8001052 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c5a:	4b76      	ldr	r3, [pc, #472]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d0f0      	beq.n	8000c48 <HAL_RCC_OscConfig+0xc0>
 8000c66:	e014      	b.n	8000c92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c68:	f7ff fce8 	bl	800063c <HAL_GetTick>
 8000c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c6e:	e008      	b.n	8000c82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c70:	f7ff fce4 	bl	800063c <HAL_GetTick>
 8000c74:	4602      	mov	r2, r0
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	2b64      	cmp	r3, #100	; 0x64
 8000c7c:	d901      	bls.n	8000c82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	e1e7      	b.n	8001052 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c82:	4b6c      	ldr	r3, [pc, #432]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d1f0      	bne.n	8000c70 <HAL_RCC_OscConfig+0xe8>
 8000c8e:	e000      	b.n	8000c92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 0302 	and.w	r3, r3, #2
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d063      	beq.n	8000d66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c9e:	4b65      	ldr	r3, [pc, #404]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	f003 030c 	and.w	r3, r3, #12
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d00b      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000caa:	4b62      	ldr	r3, [pc, #392]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cb2:	2b08      	cmp	r3, #8
 8000cb4:	d11c      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cb6:	4b5f      	ldr	r3, [pc, #380]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d116      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cc2:	4b5c      	ldr	r3, [pc, #368]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f003 0302 	and.w	r3, r3, #2
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d005      	beq.n	8000cda <HAL_RCC_OscConfig+0x152>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	68db      	ldr	r3, [r3, #12]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d001      	beq.n	8000cda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e1bb      	b.n	8001052 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cda:	4b56      	ldr	r3, [pc, #344]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	691b      	ldr	r3, [r3, #16]
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	4952      	ldr	r1, [pc, #328]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000cea:	4313      	orrs	r3, r2
 8000cec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cee:	e03a      	b.n	8000d66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d020      	beq.n	8000d3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cf8:	4b4f      	ldr	r3, [pc, #316]	; (8000e38 <HAL_RCC_OscConfig+0x2b0>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cfe:	f7ff fc9d 	bl	800063c <HAL_GetTick>
 8000d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d04:	e008      	b.n	8000d18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d06:	f7ff fc99 	bl	800063c <HAL_GetTick>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d901      	bls.n	8000d18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d14:	2303      	movs	r3, #3
 8000d16:	e19c      	b.n	8001052 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d18:	4b46      	ldr	r3, [pc, #280]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f003 0302 	and.w	r3, r3, #2
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d0f0      	beq.n	8000d06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d24:	4b43      	ldr	r3, [pc, #268]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	691b      	ldr	r3, [r3, #16]
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	4940      	ldr	r1, [pc, #256]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000d34:	4313      	orrs	r3, r2
 8000d36:	600b      	str	r3, [r1, #0]
 8000d38:	e015      	b.n	8000d66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d3a:	4b3f      	ldr	r3, [pc, #252]	; (8000e38 <HAL_RCC_OscConfig+0x2b0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d40:	f7ff fc7c 	bl	800063c <HAL_GetTick>
 8000d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d46:	e008      	b.n	8000d5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d48:	f7ff fc78 	bl	800063c <HAL_GetTick>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d901      	bls.n	8000d5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d56:	2303      	movs	r3, #3
 8000d58:	e17b      	b.n	8001052 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d5a:	4b36      	ldr	r3, [pc, #216]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d1f0      	bne.n	8000d48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0308 	and.w	r3, r3, #8
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d030      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d016      	beq.n	8000da8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d7a:	4b30      	ldr	r3, [pc, #192]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d80:	f7ff fc5c 	bl	800063c <HAL_GetTick>
 8000d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d86:	e008      	b.n	8000d9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d88:	f7ff fc58 	bl	800063c <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d901      	bls.n	8000d9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d96:	2303      	movs	r3, #3
 8000d98:	e15b      	b.n	8001052 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d9a:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d0f0      	beq.n	8000d88 <HAL_RCC_OscConfig+0x200>
 8000da6:	e015      	b.n	8000dd4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000da8:	4b24      	ldr	r3, [pc, #144]	; (8000e3c <HAL_RCC_OscConfig+0x2b4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dae:	f7ff fc45 	bl	800063c <HAL_GetTick>
 8000db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db4:	e008      	b.n	8000dc8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000db6:	f7ff fc41 	bl	800063c <HAL_GetTick>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	1ad3      	subs	r3, r2, r3
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d901      	bls.n	8000dc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	e144      	b.n	8001052 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dcc:	f003 0302 	and.w	r3, r3, #2
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d1f0      	bne.n	8000db6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	f000 80a0 	beq.w	8000f22 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000de2:	2300      	movs	r3, #0
 8000de4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d10f      	bne.n	8000e12 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e00:	6413      	str	r3, [r2, #64]	; 0x40
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <HAL_RCC_OscConfig+0x2ac>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <HAL_RCC_OscConfig+0x2b8>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d121      	bne.n	8000e62 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e1e:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_RCC_OscConfig+0x2b8>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <HAL_RCC_OscConfig+0x2b8>)
 8000e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e2a:	f7ff fc07 	bl	800063c <HAL_GetTick>
 8000e2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e30:	e011      	b.n	8000e56 <HAL_RCC_OscConfig+0x2ce>
 8000e32:	bf00      	nop
 8000e34:	40023800 	.word	0x40023800
 8000e38:	42470000 	.word	0x42470000
 8000e3c:	42470e80 	.word	0x42470e80
 8000e40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e44:	f7ff fbfa 	bl	800063c <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d901      	bls.n	8000e56 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e0fd      	b.n	8001052 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e56:	4b81      	ldr	r3, [pc, #516]	; (800105c <HAL_RCC_OscConfig+0x4d4>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d0f0      	beq.n	8000e44 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d106      	bne.n	8000e78 <HAL_RCC_OscConfig+0x2f0>
 8000e6a:	4b7d      	ldr	r3, [pc, #500]	; (8001060 <HAL_RCC_OscConfig+0x4d8>)
 8000e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e6e:	4a7c      	ldr	r2, [pc, #496]	; (8001060 <HAL_RCC_OscConfig+0x4d8>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6713      	str	r3, [r2, #112]	; 0x70
 8000e76:	e01c      	b.n	8000eb2 <HAL_RCC_OscConfig+0x32a>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	2b05      	cmp	r3, #5
 8000e7e:	d10c      	bne.n	8000e9a <HAL_RCC_OscConfig+0x312>
 8000e80:	4b77      	ldr	r3, [pc, #476]	; (8001060 <HAL_RCC_OscConfig+0x4d8>)
 8000e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e84:	4a76      	ldr	r2, [pc, #472]	; (8001060 <HAL_RCC_OscConfig+0x4d8>)
 8000e86:	f043 0304 	orr.w	r3, r3, #4
 8000e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8000e8c:	4b74      	ldr	r3, [pc, #464]	; (8001060 <HAL_RCC_OscConfig+0x4d8>)
 8000e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e90:	4a73      	ldr	r2, [pc, #460]	; (8001060 <HAL_RCC_OscConfig+0x4d8>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6713      	str	r3, [r2, #112]	; 0x70
 8000e98:	e00b      	b.n	8000eb2 <HAL_RCC_OscConfig+0x32a>
 8000e9a:	4b71      	ldr	r3, [pc, #452]	; (8001060 <HAL_RCC_OscConfig+0x4d8>)
 8000e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e9e:	4a70      	ldr	r2, [pc, #448]	; (8001060 <HAL_RCC_OscConfig+0x4d8>)
 8000ea0:	f023 0301 	bic.w	r3, r3, #1
 8000ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8000ea6:	4b6e      	ldr	r3, [pc, #440]	; (8001060 <HAL_RCC_OscConfig+0x4d8>)
 8000ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eaa:	4a6d      	ldr	r2, [pc, #436]	; (8001060 <HAL_RCC_OscConfig+0x4d8>)
 8000eac:	f023 0304 	bic.w	r3, r3, #4
 8000eb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d015      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000eba:	f7ff fbbf 	bl	800063c <HAL_GetTick>
 8000ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec0:	e00a      	b.n	8000ed8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ec2:	f7ff fbbb 	bl	800063c <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d901      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e0bc      	b.n	8001052 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed8:	4b61      	ldr	r3, [pc, #388]	; (8001060 <HAL_RCC_OscConfig+0x4d8>)
 8000eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d0ee      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x33a>
 8000ee4:	e014      	b.n	8000f10 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ee6:	f7ff fba9 	bl	800063c <HAL_GetTick>
 8000eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eec:	e00a      	b.n	8000f04 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eee:	f7ff fba5 	bl	800063c <HAL_GetTick>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d901      	bls.n	8000f04 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e0a6      	b.n	8001052 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f04:	4b56      	ldr	r3, [pc, #344]	; (8001060 <HAL_RCC_OscConfig+0x4d8>)
 8000f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1ee      	bne.n	8000eee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f10:	7dfb      	ldrb	r3, [r7, #23]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d105      	bne.n	8000f22 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f16:	4b52      	ldr	r3, [pc, #328]	; (8001060 <HAL_RCC_OscConfig+0x4d8>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	4a51      	ldr	r2, [pc, #324]	; (8001060 <HAL_RCC_OscConfig+0x4d8>)
 8000f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 8092 	beq.w	8001050 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f2c:	4b4c      	ldr	r3, [pc, #304]	; (8001060 <HAL_RCC_OscConfig+0x4d8>)
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f003 030c 	and.w	r3, r3, #12
 8000f34:	2b08      	cmp	r3, #8
 8000f36:	d05c      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d141      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f40:	4b48      	ldr	r3, [pc, #288]	; (8001064 <HAL_RCC_OscConfig+0x4dc>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f46:	f7ff fb79 	bl	800063c <HAL_GetTick>
 8000f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f4c:	e008      	b.n	8000f60 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f4e:	f7ff fb75 	bl	800063c <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d901      	bls.n	8000f60 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e078      	b.n	8001052 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f60:	4b3f      	ldr	r3, [pc, #252]	; (8001060 <HAL_RCC_OscConfig+0x4d8>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1f0      	bne.n	8000f4e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69da      	ldr	r2, [r3, #28]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	431a      	orrs	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7a:	019b      	lsls	r3, r3, #6
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f82:	085b      	lsrs	r3, r3, #1
 8000f84:	3b01      	subs	r3, #1
 8000f86:	041b      	lsls	r3, r3, #16
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8e:	061b      	lsls	r3, r3, #24
 8000f90:	4933      	ldr	r1, [pc, #204]	; (8001060 <HAL_RCC_OscConfig+0x4d8>)
 8000f92:	4313      	orrs	r3, r2
 8000f94:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f96:	4b33      	ldr	r3, [pc, #204]	; (8001064 <HAL_RCC_OscConfig+0x4dc>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fb4e 	bl	800063c <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fa4:	f7ff fb4a 	bl	800063c <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e04d      	b.n	8001052 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fb6:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <HAL_RCC_OscConfig+0x4d8>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0f0      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x41c>
 8000fc2:	e045      	b.n	8001050 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fc4:	4b27      	ldr	r3, [pc, #156]	; (8001064 <HAL_RCC_OscConfig+0x4dc>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fca:	f7ff fb37 	bl	800063c <HAL_GetTick>
 8000fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fd0:	e008      	b.n	8000fe4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fd2:	f7ff fb33 	bl	800063c <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d901      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e036      	b.n	8001052 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fe4:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <HAL_RCC_OscConfig+0x4d8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1f0      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x44a>
 8000ff0:	e02e      	b.n	8001050 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d101      	bne.n	8000ffe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e029      	b.n	8001052 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <HAL_RCC_OscConfig+0x4d8>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	429a      	cmp	r2, r3
 8001010:	d11c      	bne.n	800104c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800101c:	429a      	cmp	r2, r3
 800101e:	d115      	bne.n	800104c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001020:	68fa      	ldr	r2, [r7, #12]
 8001022:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001026:	4013      	ands	r3, r2
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800102c:	4293      	cmp	r3, r2
 800102e:	d10d      	bne.n	800104c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800103a:	429a      	cmp	r2, r3
 800103c:	d106      	bne.n	800104c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001048:	429a      	cmp	r2, r3
 800104a:	d001      	beq.n	8001050 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40007000 	.word	0x40007000
 8001060:	40023800 	.word	0x40023800
 8001064:	42470060 	.word	0x42470060

08001068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e0cc      	b.n	8001216 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800107c:	4b68      	ldr	r3, [pc, #416]	; (8001220 <HAL_RCC_ClockConfig+0x1b8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 030f 	and.w	r3, r3, #15
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	429a      	cmp	r2, r3
 8001088:	d90c      	bls.n	80010a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800108a:	4b65      	ldr	r3, [pc, #404]	; (8001220 <HAL_RCC_ClockConfig+0x1b8>)
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001092:	4b63      	ldr	r3, [pc, #396]	; (8001220 <HAL_RCC_ClockConfig+0x1b8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	429a      	cmp	r2, r3
 800109e:	d001      	beq.n	80010a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e0b8      	b.n	8001216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d020      	beq.n	80010f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d005      	beq.n	80010c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010bc:	4b59      	ldr	r3, [pc, #356]	; (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	4a58      	ldr	r2, [pc, #352]	; (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 80010c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d005      	beq.n	80010e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010d4:	4b53      	ldr	r3, [pc, #332]	; (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	4a52      	ldr	r2, [pc, #328]	; (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 80010da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010e0:	4b50      	ldr	r3, [pc, #320]	; (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	494d      	ldr	r1, [pc, #308]	; (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 80010ee:	4313      	orrs	r3, r2
 80010f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d044      	beq.n	8001188 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d107      	bne.n	8001116 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001106:	4b47      	ldr	r3, [pc, #284]	; (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d119      	bne.n	8001146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e07f      	b.n	8001216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d003      	beq.n	8001126 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001122:	2b03      	cmp	r3, #3
 8001124:	d107      	bne.n	8001136 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001126:	4b3f      	ldr	r3, [pc, #252]	; (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d109      	bne.n	8001146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e06f      	b.n	8001216 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001136:	4b3b      	ldr	r3, [pc, #236]	; (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e067      	b.n	8001216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001146:	4b37      	ldr	r3, [pc, #220]	; (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f023 0203 	bic.w	r2, r3, #3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	4934      	ldr	r1, [pc, #208]	; (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 8001154:	4313      	orrs	r3, r2
 8001156:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001158:	f7ff fa70 	bl	800063c <HAL_GetTick>
 800115c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800115e:	e00a      	b.n	8001176 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001160:	f7ff fa6c 	bl	800063c <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	f241 3288 	movw	r2, #5000	; 0x1388
 800116e:	4293      	cmp	r3, r2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e04f      	b.n	8001216 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001176:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 020c 	and.w	r2, r3, #12
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	429a      	cmp	r2, r3
 8001186:	d1eb      	bne.n	8001160 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001188:	4b25      	ldr	r3, [pc, #148]	; (8001220 <HAL_RCC_ClockConfig+0x1b8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 030f 	and.w	r3, r3, #15
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	429a      	cmp	r2, r3
 8001194:	d20c      	bcs.n	80011b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001196:	4b22      	ldr	r3, [pc, #136]	; (8001220 <HAL_RCC_ClockConfig+0x1b8>)
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800119e:	4b20      	ldr	r3, [pc, #128]	; (8001220 <HAL_RCC_ClockConfig+0x1b8>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d001      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e032      	b.n	8001216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d008      	beq.n	80011ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	4916      	ldr	r1, [pc, #88]	; (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 80011ca:	4313      	orrs	r3, r2
 80011cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d009      	beq.n	80011ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	490e      	ldr	r1, [pc, #56]	; (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011ee:	f000 f821 	bl	8001234 <HAL_RCC_GetSysClockFreq>
 80011f2:	4601      	mov	r1, r0
 80011f4:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	091b      	lsrs	r3, r3, #4
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <HAL_RCC_ClockConfig+0x1c0>)
 8001200:	5cd3      	ldrb	r3, [r2, r3]
 8001202:	fa21 f303 	lsr.w	r3, r1, r3
 8001206:	4a09      	ldr	r2, [pc, #36]	; (800122c <HAL_RCC_ClockConfig+0x1c4>)
 8001208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <HAL_RCC_ClockConfig+0x1c8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f9d0 	bl	80005b4 <HAL_InitTick>

  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023c00 	.word	0x40023c00
 8001224:	40023800 	.word	0x40023800
 8001228:	08005fac 	.word	0x08005fac
 800122c:	20000008 	.word	0x20000008
 8001230:	20000000 	.word	0x20000000

08001234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	2300      	movs	r3, #0
 8001244:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800124a:	4b63      	ldr	r3, [pc, #396]	; (80013d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 030c 	and.w	r3, r3, #12
 8001252:	2b04      	cmp	r3, #4
 8001254:	d007      	beq.n	8001266 <HAL_RCC_GetSysClockFreq+0x32>
 8001256:	2b08      	cmp	r3, #8
 8001258:	d008      	beq.n	800126c <HAL_RCC_GetSysClockFreq+0x38>
 800125a:	2b00      	cmp	r3, #0
 800125c:	f040 80b4 	bne.w	80013c8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001260:	4b5e      	ldr	r3, [pc, #376]	; (80013dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001262:	60bb      	str	r3, [r7, #8]
       break;
 8001264:	e0b3      	b.n	80013ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001266:	4b5e      	ldr	r3, [pc, #376]	; (80013e0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001268:	60bb      	str	r3, [r7, #8]
      break;
 800126a:	e0b0      	b.n	80013ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800126c:	4b5a      	ldr	r3, [pc, #360]	; (80013d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001274:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001276:	4b58      	ldr	r3, [pc, #352]	; (80013d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d04a      	beq.n	8001318 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001282:	4b55      	ldr	r3, [pc, #340]	; (80013d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	099b      	lsrs	r3, r3, #6
 8001288:	f04f 0400 	mov.w	r4, #0
 800128c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	ea03 0501 	and.w	r5, r3, r1
 8001298:	ea04 0602 	and.w	r6, r4, r2
 800129c:	4629      	mov	r1, r5
 800129e:	4632      	mov	r2, r6
 80012a0:	f04f 0300 	mov.w	r3, #0
 80012a4:	f04f 0400 	mov.w	r4, #0
 80012a8:	0154      	lsls	r4, r2, #5
 80012aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012ae:	014b      	lsls	r3, r1, #5
 80012b0:	4619      	mov	r1, r3
 80012b2:	4622      	mov	r2, r4
 80012b4:	1b49      	subs	r1, r1, r5
 80012b6:	eb62 0206 	sbc.w	r2, r2, r6
 80012ba:	f04f 0300 	mov.w	r3, #0
 80012be:	f04f 0400 	mov.w	r4, #0
 80012c2:	0194      	lsls	r4, r2, #6
 80012c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80012c8:	018b      	lsls	r3, r1, #6
 80012ca:	1a5b      	subs	r3, r3, r1
 80012cc:	eb64 0402 	sbc.w	r4, r4, r2
 80012d0:	f04f 0100 	mov.w	r1, #0
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	00e2      	lsls	r2, r4, #3
 80012da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80012de:	00d9      	lsls	r1, r3, #3
 80012e0:	460b      	mov	r3, r1
 80012e2:	4614      	mov	r4, r2
 80012e4:	195b      	adds	r3, r3, r5
 80012e6:	eb44 0406 	adc.w	r4, r4, r6
 80012ea:	f04f 0100 	mov.w	r1, #0
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	0262      	lsls	r2, r4, #9
 80012f4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80012f8:	0259      	lsls	r1, r3, #9
 80012fa:	460b      	mov	r3, r1
 80012fc:	4614      	mov	r4, r2
 80012fe:	4618      	mov	r0, r3
 8001300:	4621      	mov	r1, r4
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f04f 0400 	mov.w	r4, #0
 8001308:	461a      	mov	r2, r3
 800130a:	4623      	mov	r3, r4
 800130c:	f7fe ffb0 	bl	8000270 <__aeabi_uldivmod>
 8001310:	4603      	mov	r3, r0
 8001312:	460c      	mov	r4, r1
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	e049      	b.n	80013ac <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001318:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	099b      	lsrs	r3, r3, #6
 800131e:	f04f 0400 	mov.w	r4, #0
 8001322:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	ea03 0501 	and.w	r5, r3, r1
 800132e:	ea04 0602 	and.w	r6, r4, r2
 8001332:	4629      	mov	r1, r5
 8001334:	4632      	mov	r2, r6
 8001336:	f04f 0300 	mov.w	r3, #0
 800133a:	f04f 0400 	mov.w	r4, #0
 800133e:	0154      	lsls	r4, r2, #5
 8001340:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001344:	014b      	lsls	r3, r1, #5
 8001346:	4619      	mov	r1, r3
 8001348:	4622      	mov	r2, r4
 800134a:	1b49      	subs	r1, r1, r5
 800134c:	eb62 0206 	sbc.w	r2, r2, r6
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	f04f 0400 	mov.w	r4, #0
 8001358:	0194      	lsls	r4, r2, #6
 800135a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800135e:	018b      	lsls	r3, r1, #6
 8001360:	1a5b      	subs	r3, r3, r1
 8001362:	eb64 0402 	sbc.w	r4, r4, r2
 8001366:	f04f 0100 	mov.w	r1, #0
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	00e2      	lsls	r2, r4, #3
 8001370:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001374:	00d9      	lsls	r1, r3, #3
 8001376:	460b      	mov	r3, r1
 8001378:	4614      	mov	r4, r2
 800137a:	195b      	adds	r3, r3, r5
 800137c:	eb44 0406 	adc.w	r4, r4, r6
 8001380:	f04f 0100 	mov.w	r1, #0
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	02a2      	lsls	r2, r4, #10
 800138a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800138e:	0299      	lsls	r1, r3, #10
 8001390:	460b      	mov	r3, r1
 8001392:	4614      	mov	r4, r2
 8001394:	4618      	mov	r0, r3
 8001396:	4621      	mov	r1, r4
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f04f 0400 	mov.w	r4, #0
 800139e:	461a      	mov	r2, r3
 80013a0:	4623      	mov	r3, r4
 80013a2:	f7fe ff65 	bl	8000270 <__aeabi_uldivmod>
 80013a6:	4603      	mov	r3, r0
 80013a8:	460c      	mov	r4, r1
 80013aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	0c1b      	lsrs	r3, r3, #16
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	3301      	adds	r3, #1
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c4:	60bb      	str	r3, [r7, #8]
      break;
 80013c6:	e002      	b.n	80013ce <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80013ca:	60bb      	str	r3, [r7, #8]
      break;
 80013cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013ce:	68bb      	ldr	r3, [r7, #8]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	00f42400 	.word	0x00f42400
 80013e0:	007a1200 	.word	0x007a1200

080013e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e056      	b.n	80014a4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b00      	cmp	r3, #0
 8001406:	d106      	bne.n	8001416 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f003 fc8d 	bl	8004d30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2202      	movs	r2, #2
 800141a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800142c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	431a      	orrs	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	431a      	orrs	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	431a      	orrs	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001452:	431a      	orrs	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69db      	ldr	r3, [r3, #28]
 8001458:	431a      	orrs	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a1b      	ldr	r3, [r3, #32]
 800145e:	ea42 0103 	orr.w	r1, r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	430a      	orrs	r2, r1
 800146c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	0c1b      	lsrs	r3, r3, #16
 8001474:	f003 0104 	and.w	r1, r3, #4
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	430a      	orrs	r2, r1
 8001482:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	69da      	ldr	r2, [r3, #28]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001492:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2201      	movs	r2, #1
 800149e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	4613      	mov	r3, r2
 80014ba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d101      	bne.n	80014ce <HAL_SPI_Transmit+0x22>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e11e      	b.n	800170c <HAL_SPI_Transmit+0x260>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80014d6:	f7ff f8b1 	bl	800063c <HAL_GetTick>
 80014da:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d002      	beq.n	80014f2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80014ec:	2302      	movs	r3, #2
 80014ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80014f0:	e103      	b.n	80016fa <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d002      	beq.n	80014fe <HAL_SPI_Transmit+0x52>
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d102      	bne.n	8001504 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001502:	e0fa      	b.n	80016fa <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2203      	movs	r2, #3
 8001508:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2200      	movs	r2, #0
 8001510:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	68ba      	ldr	r2, [r7, #8]
 8001516:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	88fa      	ldrh	r2, [r7, #6]
 800151c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	88fa      	ldrh	r2, [r7, #6]
 8001522:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2200      	movs	r2, #0
 8001528:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2200      	movs	r2, #0
 800152e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2200      	movs	r2, #0
 8001534:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800154a:	d107      	bne.n	800155c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800155a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001566:	2b40      	cmp	r3, #64	; 0x40
 8001568:	d007      	beq.n	800157a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001578:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001582:	d14b      	bne.n	800161c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d002      	beq.n	8001592 <HAL_SPI_Transmit+0xe6>
 800158c:	8afb      	ldrh	r3, [r7, #22]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d13e      	bne.n	8001610 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	881a      	ldrh	r2, [r3, #0]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	1c9a      	adds	r2, r3, #2
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	3b01      	subs	r3, #1
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80015b6:	e02b      	b.n	8001610 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d112      	bne.n	80015ec <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	881a      	ldrh	r2, [r3, #0]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	1c9a      	adds	r2, r3, #2
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	3b01      	subs	r3, #1
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80015ea:	e011      	b.n	8001610 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80015ec:	f7ff f826 	bl	800063c <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d803      	bhi.n	8001604 <HAL_SPI_Transmit+0x158>
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001602:	d102      	bne.n	800160a <HAL_SPI_Transmit+0x15e>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d102      	bne.n	8001610 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800160e:	e074      	b.n	80016fa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001614:	b29b      	uxth	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1ce      	bne.n	80015b8 <HAL_SPI_Transmit+0x10c>
 800161a:	e04c      	b.n	80016b6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d002      	beq.n	800162a <HAL_SPI_Transmit+0x17e>
 8001624:	8afb      	ldrh	r3, [r7, #22]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d140      	bne.n	80016ac <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	330c      	adds	r3, #12
 8001634:	7812      	ldrb	r2, [r2, #0]
 8001636:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	1c5a      	adds	r2, r3, #1
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001646:	b29b      	uxth	r3, r3
 8001648:	3b01      	subs	r3, #1
 800164a:	b29a      	uxth	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001650:	e02c      	b.n	80016ac <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b02      	cmp	r3, #2
 800165e:	d113      	bne.n	8001688 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	330c      	adds	r3, #12
 800166a:	7812      	ldrb	r2, [r2, #0]
 800166c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800167c:	b29b      	uxth	r3, r3
 800167e:	3b01      	subs	r3, #1
 8001680:	b29a      	uxth	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	86da      	strh	r2, [r3, #54]	; 0x36
 8001686:	e011      	b.n	80016ac <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001688:	f7fe ffd8 	bl	800063c <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d803      	bhi.n	80016a0 <HAL_SPI_Transmit+0x1f4>
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169e:	d102      	bne.n	80016a6 <HAL_SPI_Transmit+0x1fa>
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d102      	bne.n	80016ac <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80016aa:	e026      	b.n	80016fa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1cd      	bne.n	8001652 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	6839      	ldr	r1, [r7, #0]
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f000 fa44 	bl	8001b48 <SPI_EndRxTxTransaction>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d002      	beq.n	80016cc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2220      	movs	r2, #32
 80016ca:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d10a      	bne.n	80016ea <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80016d4:	2300      	movs	r3, #0
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d002      	beq.n	80016f8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	77fb      	strb	r3, [r7, #31]
 80016f6:	e000      	b.n	80016fa <HAL_SPI_Transmit+0x24e>
  }

error:
 80016f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800170a:	7ffb      	ldrb	r3, [r7, #31]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3720      	adds	r7, #32
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08c      	sub	sp, #48	; 0x30
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
 8001720:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001722:	2301      	movs	r3, #1
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_SPI_TransmitReceive+0x26>
 8001736:	2302      	movs	r3, #2
 8001738:	e18a      	b.n	8001a50 <HAL_SPI_TransmitReceive+0x33c>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001742:	f7fe ff7b 	bl	800063c <HAL_GetTick>
 8001746:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800174e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001758:	887b      	ldrh	r3, [r7, #2]
 800175a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800175c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001760:	2b01      	cmp	r3, #1
 8001762:	d00f      	beq.n	8001784 <HAL_SPI_TransmitReceive+0x70>
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800176a:	d107      	bne.n	800177c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d103      	bne.n	800177c <HAL_SPI_TransmitReceive+0x68>
 8001774:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001778:	2b04      	cmp	r3, #4
 800177a:	d003      	beq.n	8001784 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800177c:	2302      	movs	r3, #2
 800177e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001782:	e15b      	b.n	8001a3c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d005      	beq.n	8001796 <HAL_SPI_TransmitReceive+0x82>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d002      	beq.n	8001796 <HAL_SPI_TransmitReceive+0x82>
 8001790:	887b      	ldrh	r3, [r7, #2]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d103      	bne.n	800179e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800179c:	e14e      	b.n	8001a3c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d003      	beq.n	80017b2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2205      	movs	r2, #5
 80017ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	887a      	ldrh	r2, [r7, #2]
 80017c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	887a      	ldrh	r2, [r7, #2]
 80017c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	887a      	ldrh	r2, [r7, #2]
 80017d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	887a      	ldrh	r2, [r7, #2]
 80017da:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	2200      	movs	r2, #0
 80017e6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f2:	2b40      	cmp	r3, #64	; 0x40
 80017f4:	d007      	beq.n	8001806 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001804:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800180e:	d178      	bne.n	8001902 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d002      	beq.n	800181e <HAL_SPI_TransmitReceive+0x10a>
 8001818:	8b7b      	ldrh	r3, [r7, #26]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d166      	bne.n	80018ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	881a      	ldrh	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	1c9a      	adds	r2, r3, #2
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001838:	b29b      	uxth	r3, r3
 800183a:	3b01      	subs	r3, #1
 800183c:	b29a      	uxth	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001842:	e053      	b.n	80018ec <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b02      	cmp	r3, #2
 8001850:	d11b      	bne.n	800188a <HAL_SPI_TransmitReceive+0x176>
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001856:	b29b      	uxth	r3, r3
 8001858:	2b00      	cmp	r3, #0
 800185a:	d016      	beq.n	800188a <HAL_SPI_TransmitReceive+0x176>
 800185c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185e:	2b01      	cmp	r3, #1
 8001860:	d113      	bne.n	800188a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	881a      	ldrh	r2, [r3, #0]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	1c9a      	adds	r2, r3, #2
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800187c:	b29b      	uxth	r3, r3
 800187e:	3b01      	subs	r3, #1
 8001880:	b29a      	uxth	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001886:	2300      	movs	r3, #0
 8001888:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b01      	cmp	r3, #1
 8001896:	d119      	bne.n	80018cc <HAL_SPI_TransmitReceive+0x1b8>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800189c:	b29b      	uxth	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d014      	beq.n	80018cc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ac:	b292      	uxth	r2, r2
 80018ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b4:	1c9a      	adds	r2, r3, #2
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018be:	b29b      	uxth	r3, r3
 80018c0:	3b01      	subs	r3, #1
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80018c8:	2301      	movs	r3, #1
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80018cc:	f7fe feb6 	bl	800063c <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018d8:	429a      	cmp	r2, r3
 80018da:	d807      	bhi.n	80018ec <HAL_SPI_TransmitReceive+0x1d8>
 80018dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e2:	d003      	beq.n	80018ec <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80018ea:	e0a7      	b.n	8001a3c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1a6      	bne.n	8001844 <HAL_SPI_TransmitReceive+0x130>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1a1      	bne.n	8001844 <HAL_SPI_TransmitReceive+0x130>
 8001900:	e07c      	b.n	80019fc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d002      	beq.n	8001910 <HAL_SPI_TransmitReceive+0x1fc>
 800190a:	8b7b      	ldrh	r3, [r7, #26]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d16b      	bne.n	80019e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	330c      	adds	r3, #12
 800191a:	7812      	ldrb	r2, [r2, #0]
 800191c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800192c:	b29b      	uxth	r3, r3
 800192e:	3b01      	subs	r3, #1
 8001930:	b29a      	uxth	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001936:	e057      	b.n	80019e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	2b02      	cmp	r3, #2
 8001944:	d11c      	bne.n	8001980 <HAL_SPI_TransmitReceive+0x26c>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800194a:	b29b      	uxth	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	d017      	beq.n	8001980 <HAL_SPI_TransmitReceive+0x26c>
 8001950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001952:	2b01      	cmp	r3, #1
 8001954:	d114      	bne.n	8001980 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	330c      	adds	r3, #12
 8001960:	7812      	ldrb	r2, [r2, #0]
 8001962:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001972:	b29b      	uxth	r3, r3
 8001974:	3b01      	subs	r3, #1
 8001976:	b29a      	uxth	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b01      	cmp	r3, #1
 800198c:	d119      	bne.n	80019c2 <HAL_SPI_TransmitReceive+0x2ae>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001992:	b29b      	uxth	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	d014      	beq.n	80019c2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	3b01      	subs	r3, #1
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80019be:	2301      	movs	r3, #1
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80019c2:	f7fe fe3b 	bl	800063c <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d803      	bhi.n	80019da <HAL_SPI_TransmitReceive+0x2c6>
 80019d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d8:	d102      	bne.n	80019e0 <HAL_SPI_TransmitReceive+0x2cc>
 80019da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d103      	bne.n	80019e8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80019e6:	e029      	b.n	8001a3c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1a2      	bne.n	8001938 <HAL_SPI_TransmitReceive+0x224>
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d19d      	bne.n	8001938 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80019fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f000 f8a1 	bl	8001b48 <SPI_EndRxTxTransaction>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d006      	beq.n	8001a1a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2220      	movs	r2, #32
 8001a16:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001a18:	e010      	b.n	8001a3c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10b      	bne.n	8001a3a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	e000      	b.n	8001a3c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001a3a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001a4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3730      	adds	r7, #48	; 0x30
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a66:	b2db      	uxtb	r3, r3
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	4613      	mov	r3, r2
 8001a82:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001a84:	e04c      	b.n	8001b20 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8c:	d048      	beq.n	8001b20 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001a8e:	f7fe fdd5 	bl	800063c <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d902      	bls.n	8001aa4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d13d      	bne.n	8001b20 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001ab2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001abc:	d111      	bne.n	8001ae2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ac6:	d004      	beq.n	8001ad2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad0:	d107      	bne.n	8001ae2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ae0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aea:	d10f      	bne.n	8001b0c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e00f      	b.n	8001b40 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	68ba      	ldr	r2, [r7, #8]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	bf0c      	ite	eq
 8001b30:	2301      	moveq	r3, #1
 8001b32:	2300      	movne	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	461a      	mov	r2, r3
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d1a3      	bne.n	8001a86 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001b54:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <SPI_EndRxTxTransaction+0x7c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a1b      	ldr	r2, [pc, #108]	; (8001bc8 <SPI_EndRxTxTransaction+0x80>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	0d5b      	lsrs	r3, r3, #21
 8001b60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b64:	fb02 f303 	mul.w	r3, r2, r3
 8001b68:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b72:	d112      	bne.n	8001b9a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2180      	movs	r1, #128	; 0x80
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f7ff ff78 	bl	8001a74 <SPI_WaitFlagStateUntilTimeout>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d016      	beq.n	8001bb8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8e:	f043 0220 	orr.w	r2, r3, #32
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e00f      	b.n	8001bba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00a      	beq.n	8001bb6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bb0:	2b80      	cmp	r3, #128	; 0x80
 8001bb2:	d0f2      	beq.n	8001b9a <SPI_EndRxTxTransaction+0x52>
 8001bb4:	e000      	b.n	8001bb8 <SPI_EndRxTxTransaction+0x70>
        break;
 8001bb6:	bf00      	nop
  }

  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3718      	adds	r7, #24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000008 	.word	0x20000008
 8001bc8:	165e9f81 	.word	0x165e9f81

08001bcc <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0

}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <DESELECT>:

static
inline void DESELECT(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0

}
 8001bde:	bf00      	nop
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <xmit_spi>:

extern SPI_HandleTypeDef hspi1;

static
void xmit_spi(BYTE Data)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001bf2:	bf00      	nop
 8001bf4:	4808      	ldr	r0, [pc, #32]	; (8001c18 <xmit_spi+0x30>)
 8001bf6:	f7ff ff2f 	bl	8001a58 <HAL_SPI_GetState>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d1f9      	bne.n	8001bf4 <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 5000);
 8001c00:	1df9      	adds	r1, r7, #7
 8001c02:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c06:	2201      	movs	r2, #1
 8001c08:	4803      	ldr	r0, [pc, #12]	; (8001c18 <xmit_spi+0x30>)
 8001c0a:	f7ff fc4f 	bl	80014ac <HAL_SPI_Transmit>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000650 	.word	0x20000650

08001c1c <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 8001c22:	23ff      	movs	r3, #255	; 0xff
 8001c24:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8001c2a:	bf00      	nop
 8001c2c:	4809      	ldr	r0, [pc, #36]	; (8001c54 <rcvr_spi+0x38>)
 8001c2e:	f7ff ff13 	bl	8001a58 <HAL_SPI_GetState>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d1f9      	bne.n	8001c2c <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &Dummy, &Data, 1, 5000);
 8001c38:	1dba      	adds	r2, r7, #6
 8001c3a:	1df9      	adds	r1, r7, #7
 8001c3c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	2301      	movs	r3, #1
 8001c44:	4803      	ldr	r0, [pc, #12]	; (8001c54 <rcvr_spi+0x38>)
 8001c46:	f7ff fd65 	bl	8001714 <HAL_SPI_TransmitReceive>

	return Data;
 8001c4a:	79bb      	ldrb	r3, [r7, #6]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	20000650 	.word	0x20000650

08001c58 <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 8001c60:	f7ff ffdc 	bl	8001c1c <rcvr_spi>
 8001c64:	4603      	mov	r3, r0
 8001c66:	461a      	mov	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	701a      	strb	r2, [r3, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <wait_ready+0x34>)
 8001c7c:	2232      	movs	r2, #50	; 0x32
 8001c7e:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 8001c80:	f7ff ffcc 	bl	8001c1c <rcvr_spi>
	do
		res = rcvr_spi();
 8001c84:	f7ff ffca 	bl	8001c1c <rcvr_spi>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	2bff      	cmp	r3, #255	; 0xff
 8001c90:	d004      	beq.n	8001c9c <wait_ready+0x28>
 8001c92:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <wait_ready+0x34>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f3      	bne.n	8001c84 <wait_ready+0x10>

	return res;
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	2000008d 	.word	0x2000008d

08001cac <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 8001cb2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8001cb6:	60bb      	str	r3, [r7, #8]

	DESELECT();
 8001cb8:	f7ff ff8f 	bl	8001bda <DESELECT>

	for (i = 0; i < 10; i++)
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	73fb      	strb	r3, [r7, #15]
 8001cc0:	e005      	b.n	8001cce <power_on+0x22>
		xmit_spi(0xFF);
 8001cc2:	20ff      	movs	r0, #255	; 0xff
 8001cc4:	f7ff ff90 	bl	8001be8 <xmit_spi>
	for (i = 0; i < 10; i++)
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	73fb      	strb	r3, [r7, #15]
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
 8001cd0:	2b09      	cmp	r3, #9
 8001cd2:	d9f6      	bls.n	8001cc2 <power_on+0x16>

	SELECT();
 8001cd4:	f7ff ff7a 	bl	8001bcc <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 8001cd8:	2340      	movs	r3, #64	; 0x40
 8001cda:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 8001cec:	2395      	movs	r3, #149	; 0x95
 8001cee:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	73fb      	strb	r3, [r7, #15]
 8001cf4:	e00b      	b.n	8001d0e <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
 8001cf8:	f107 0210 	add.w	r2, r7, #16
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff ff70 	bl	8001be8 <xmit_spi>
	for (i = 0; i < 6; i++)
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	73fb      	strb	r3, [r7, #15]
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
 8001d10:	2b05      	cmp	r3, #5
 8001d12:	d9f0      	bls.n	8001cf6 <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 8001d14:	e002      	b.n	8001d1c <power_on+0x70>
		Count--;
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 8001d1c:	f7ff ff7e 	bl	8001c1c <rcvr_spi>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d002      	beq.n	8001d2c <power_on+0x80>
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1f4      	bne.n	8001d16 <power_on+0x6a>

	DESELECT();
 8001d2c:	f7ff ff55 	bl	8001bda <DESELECT>
	xmit_spi(0XFF);
 8001d30:	20ff      	movs	r0, #255	; 0xff
 8001d32:	f7ff ff59 	bl	8001be8 <xmit_spi>

	PowerFlag = 1;
 8001d36:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <power_on+0x98>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	2000008f 	.word	0x2000008f

08001d48 <power_off>:

static
void power_off(void) {
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <power_off+0x14>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]
}
 8001d52:	bf00      	nop
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	2000008f 	.word	0x2000008f

08001d60 <chk_power>:

static
int chk_power(void) /* Socket power state: 0=off, 1=on */
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <chk_power+0x14>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	2000008f 	.word	0x2000008f

08001d78 <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 8001d82:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <rcvr_datablock+0x68>)
 8001d84:	220a      	movs	r2, #10
 8001d86:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 8001d88:	f7ff ff48 	bl	8001c1c <rcvr_spi>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	2bff      	cmp	r3, #255	; 0xff
 8001d94:	d104      	bne.n	8001da0 <rcvr_datablock+0x28>
 8001d96:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <rcvr_datablock+0x68>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f3      	bne.n	8001d88 <rcvr_datablock+0x10>
	if (token != 0xFE)
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	2bfe      	cmp	r3, #254	; 0xfe
 8001da4:	d001      	beq.n	8001daa <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 8001da6:	2300      	movs	r3, #0
 8001da8:	e016      	b.n	8001dd8 <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ff51 	bl	8001c58 <rcvr_spi_m>
		rcvr_spi_m(buff++);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff4b 	bl	8001c58 <rcvr_spi_m>
	} while (btr -= 2);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	3b02      	subs	r3, #2
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1ed      	bne.n	8001daa <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 8001dce:	f7ff ff25 	bl	8001c1c <rcvr_spi>
	rcvr_spi();
 8001dd2:	f7ff ff23 	bl	8001c1c <rcvr_spi>

	return TRUE; /* Return with success */
 8001dd6:	2301      	movs	r3, #1
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	2000008c 	.word	0x2000008c

08001de4 <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 8001df4:	f7ff ff3e 	bl	8001c74 <wait_ready>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2bff      	cmp	r3, #255	; 0xff
 8001dfc:	d001      	beq.n	8001e02 <xmit_datablock+0x1e>
		return FALSE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e040      	b.n	8001e84 <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff feef 	bl	8001be8 <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 8001e0a:	78fb      	ldrb	r3, [r7, #3]
 8001e0c:	2bfd      	cmp	r3, #253	; 0xfd
 8001e0e:	d031      	beq.n	8001e74 <xmit_datablock+0x90>
		wc = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fee3 	bl	8001be8 <xmit_spi>
			xmit_spi(*buff++);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	1c5a      	adds	r2, r3, #1
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fedc 	bl	8001be8 <xmit_spi>
		} while (--wc);
 8001e30:	7bbb      	ldrb	r3, [r7, #14]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	73bb      	strb	r3, [r7, #14]
 8001e36:	7bbb      	ldrb	r3, [r7, #14]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1eb      	bne.n	8001e14 <xmit_datablock+0x30>

		rcvr_spi();
 8001e3c:	f7ff feee 	bl	8001c1c <rcvr_spi>
		rcvr_spi();
 8001e40:	f7ff feec 	bl	8001c1c <rcvr_spi>

		while (i <= 64) {
 8001e44:	e00b      	b.n	8001e5e <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 8001e46:	f7ff fee9 	bl	8001c1c <rcvr_spi>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	2b05      	cmp	r3, #5
 8001e56:	d006      	beq.n	8001e66 <xmit_datablock+0x82>
				break;
			i++;
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b40      	cmp	r3, #64	; 0x40
 8001e62:	d9f0      	bls.n	8001e46 <xmit_datablock+0x62>
 8001e64:	e000      	b.n	8001e68 <xmit_datablock+0x84>
				break;
 8001e66:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 8001e68:	bf00      	nop
 8001e6a:	f7ff fed7 	bl	8001c1c <rcvr_spi>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0fa      	beq.n	8001e6a <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	f003 031f 	and.w	r3, r3, #31
 8001e7a:	2b05      	cmp	r3, #5
 8001e7c:	d101      	bne.n	8001e82 <xmit_datablock+0x9e>
		return TRUE;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <xmit_datablock+0xa0>
	else
		return FALSE;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	6039      	str	r1, [r7, #0]
 8001e96:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 8001e98:	f7ff feec 	bl	8001c74 <wait_ready>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2bff      	cmp	r3, #255	; 0xff
 8001ea0:	d001      	beq.n	8001ea6 <send_cmd+0x1a>
		return 0xFF;
 8001ea2:	23ff      	movs	r3, #255	; 0xff
 8001ea4:	e040      	b.n	8001f28 <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fe9d 	bl	8001be8 <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	0e1b      	lsrs	r3, r3, #24
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff fe97 	bl	8001be8 <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	0c1b      	lsrs	r3, r3, #16
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fe91 	bl	8001be8 <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fe8b 	bl	8001be8 <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fe86 	bl	8001be8 <xmit_spi>
	n = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	2b40      	cmp	r3, #64	; 0x40
 8001ee4:	d101      	bne.n	8001eea <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 8001ee6:	2395      	movs	r3, #149	; 0x95
 8001ee8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	2b48      	cmp	r3, #72	; 0x48
 8001eee:	d101      	bne.n	8001ef4 <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 8001ef0:	2387      	movs	r3, #135	; 0x87
 8001ef2:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fe76 	bl	8001be8 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	2b4c      	cmp	r3, #76	; 0x4c
 8001f00:	d101      	bne.n	8001f06 <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 8001f02:	f7ff fe8b 	bl	8001c1c <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 8001f06:	230a      	movs	r3, #10
 8001f08:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 8001f0a:	f7ff fe87 	bl	8001c1c <rcvr_spi>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 8001f12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	da05      	bge.n	8001f26 <send_cmd+0x9a>
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f1      	bne.n	8001f0a <send_cmd+0x7e>

	return res; /* Return with the response value */
 8001f26:	7bbb      	ldrb	r3, [r7, #14]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 8001f30:	b590      	push	{r4, r7, lr}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8001f40:	2301      	movs	r3, #1
 8001f42:	e0d5      	b.n	80020f0 <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 8001f44:	4b6c      	ldr	r3, [pc, #432]	; (80020f8 <disk_initialize+0x1c8>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 8001f52:	4b69      	ldr	r3, [pc, #420]	; (80020f8 <disk_initialize+0x1c8>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	e0ca      	b.n	80020f0 <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 8001f5a:	f7ff fea7 	bl	8001cac <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 8001f5e:	f7ff fe35 	bl	8001bcc <SELECT>
	ty = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 8001f66:	2100      	movs	r1, #0
 8001f68:	2040      	movs	r0, #64	; 0x40
 8001f6a:	f7ff ff8f 	bl	8001e8c <send_cmd>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	f040 80a5 	bne.w	80020c0 <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 8001f76:	4b61      	ldr	r3, [pc, #388]	; (80020fc <disk_initialize+0x1cc>)
 8001f78:	2264      	movs	r2, #100	; 0x64
 8001f7a:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 8001f7c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001f80:	2048      	movs	r0, #72	; 0x48
 8001f82:	f7ff ff83 	bl	8001e8c <send_cmd>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d158      	bne.n	800203e <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]
 8001f90:	e00c      	b.n	8001fac <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 8001f92:	7bfc      	ldrb	r4, [r7, #15]
 8001f94:	f7ff fe42 	bl	8001c1c <rcvr_spi>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	f107 0310 	add.w	r3, r7, #16
 8001fa0:	4423      	add	r3, r4
 8001fa2:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
 8001fac:	7bfb      	ldrb	r3, [r7, #15]
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	d9ef      	bls.n	8001f92 <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 8001fb2:	7abb      	ldrb	r3, [r7, #10]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	f040 8083 	bne.w	80020c0 <disk_initialize+0x190>
 8001fba:	7afb      	ldrb	r3, [r7, #11]
 8001fbc:	2baa      	cmp	r3, #170	; 0xaa
 8001fbe:	d17f      	bne.n	80020c0 <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	2077      	movs	r0, #119	; 0x77
 8001fc4:	f7ff ff62 	bl	8001e8c <send_cmd>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d807      	bhi.n	8001fde <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 8001fce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001fd2:	2069      	movs	r0, #105	; 0x69
 8001fd4:	f7ff ff5a 	bl	8001e8c <send_cmd>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 8001fde:	4b47      	ldr	r3, [pc, #284]	; (80020fc <disk_initialize+0x1cc>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1eb      	bne.n	8001fc0 <disk_initialize+0x90>
 8001fe8:	e000      	b.n	8001fec <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 8001fea:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 8001fec:	4b43      	ldr	r3, [pc, #268]	; (80020fc <disk_initialize+0x1cc>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d064      	beq.n	80020c0 <disk_initialize+0x190>
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	207a      	movs	r0, #122	; 0x7a
 8001ffa:	f7ff ff47 	bl	8001e8c <send_cmd>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d15d      	bne.n	80020c0 <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 8002004:	2300      	movs	r3, #0
 8002006:	73fb      	strb	r3, [r7, #15]
 8002008:	e00c      	b.n	8002024 <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 800200a:	7bfc      	ldrb	r4, [r7, #15]
 800200c:	f7ff fe06 	bl	8001c1c <rcvr_spi>
 8002010:	4603      	mov	r3, r0
 8002012:	461a      	mov	r2, r3
 8002014:	f107 0310 	add.w	r3, r7, #16
 8002018:	4423      	add	r3, r4
 800201a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	3301      	adds	r3, #1
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	2b03      	cmp	r3, #3
 8002028:	d9ef      	bls.n	800200a <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 800202a:	7a3b      	ldrb	r3, [r7, #8]
 800202c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <disk_initialize+0x108>
 8002034:	2306      	movs	r3, #6
 8002036:	e000      	b.n	800203a <disk_initialize+0x10a>
 8002038:	2302      	movs	r3, #2
 800203a:	73bb      	strb	r3, [r7, #14]
 800203c:	e040      	b.n	80020c0 <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 800203e:	2100      	movs	r1, #0
 8002040:	2077      	movs	r0, #119	; 0x77
 8002042:	f7ff ff23 	bl	8001e8c <send_cmd>
 8002046:	4603      	mov	r3, r0
 8002048:	2b01      	cmp	r3, #1
 800204a:	d808      	bhi.n	800205e <disk_initialize+0x12e>
 800204c:	2100      	movs	r1, #0
 800204e:	2069      	movs	r0, #105	; 0x69
 8002050:	f7ff ff1c 	bl	8001e8c <send_cmd>
 8002054:	4603      	mov	r3, r0
 8002056:	2b01      	cmp	r3, #1
 8002058:	d801      	bhi.n	800205e <disk_initialize+0x12e>
 800205a:	2302      	movs	r3, #2
 800205c:	e000      	b.n	8002060 <disk_initialize+0x130>
 800205e:	2301      	movs	r3, #1
 8002060:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 8002062:	7bbb      	ldrb	r3, [r7, #14]
 8002064:	2b02      	cmp	r3, #2
 8002066:	d10e      	bne.n	8002086 <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 8002068:	2100      	movs	r1, #0
 800206a:	2077      	movs	r0, #119	; 0x77
 800206c:	f7ff ff0e 	bl	8001e8c <send_cmd>
 8002070:	4603      	mov	r3, r0
 8002072:	2b01      	cmp	r3, #1
 8002074:	d80e      	bhi.n	8002094 <disk_initialize+0x164>
 8002076:	2100      	movs	r1, #0
 8002078:	2069      	movs	r0, #105	; 0x69
 800207a:	f7ff ff07 	bl	8001e8c <send_cmd>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d107      	bne.n	8002094 <disk_initialize+0x164>
						break; /* ACMD41 */
 8002084:	e00d      	b.n	80020a2 <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 8002086:	2100      	movs	r1, #0
 8002088:	2041      	movs	r0, #65	; 0x41
 800208a:	f7ff feff 	bl	8001e8c <send_cmd>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 8002094:	4b19      	ldr	r3, [pc, #100]	; (80020fc <disk_initialize+0x1cc>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1e1      	bne.n	8002062 <disk_initialize+0x132>
 800209e:	e000      	b.n	80020a2 <disk_initialize+0x172>
						break; /* CMD1 */
 80020a0:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 80020a2:	4b16      	ldr	r3, [pc, #88]	; (80020fc <disk_initialize+0x1cc>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d007      	beq.n	80020bc <disk_initialize+0x18c>
 80020ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020b0:	2050      	movs	r0, #80	; 0x50
 80020b2:	f7ff feeb 	bl	8001e8c <send_cmd>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <disk_initialize+0x190>
				ty = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 80020c0:	4a0f      	ldr	r2, [pc, #60]	; (8002100 <disk_initialize+0x1d0>)
 80020c2:	7bbb      	ldrb	r3, [r7, #14]
 80020c4:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 80020c6:	f7ff fd88 	bl	8001bda <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80020ca:	f7ff fda7 	bl	8001c1c <rcvr_spi>

	if (ty) /* Initialization succeded */
 80020ce:	7bbb      	ldrb	r3, [r7, #14]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 80020d4:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <disk_initialize+0x1c8>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	f023 0301 	bic.w	r3, r3, #1
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <disk_initialize+0x1c8>)
 80020e2:	701a      	strb	r2, [r3, #0]
 80020e4:	e001      	b.n	80020ea <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 80020e6:	f7ff fe2f 	bl	8001d48 <power_off>

	return Stat;
 80020ea:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <disk_initialize+0x1c8>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	b2db      	uxtb	r3, r3
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd90      	pop	{r4, r7, pc}
 80020f8:	20000005 	.word	0x20000005
 80020fc:	2000008c 	.word	0x2000008c
 8002100:	2000008e 	.word	0x2000008e

08002104 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
	if (drv)
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8002114:	2301      	movs	r3, #1
 8002116:	e002      	b.n	800211e <disk_status+0x1a>
	return Stat;
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <disk_status+0x28>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b2db      	uxtb	r3, r3
}
 800211e:	4618      	mov	r0, r3
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	20000005 	.word	0x20000005

08002130 <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	4603      	mov	r3, r0
 800213e:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d102      	bne.n	800214c <disk_read+0x1c>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <disk_read+0x20>
		return RES_PARERR;
 800214c:	2304      	movs	r3, #4
 800214e:	e051      	b.n	80021f4 <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 8002150:	4b2a      	ldr	r3, [pc, #168]	; (80021fc <disk_read+0xcc>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <disk_read+0x32>
		return RES_NOTRDY;
 800215e:	2303      	movs	r3, #3
 8002160:	e048      	b.n	80021f4 <disk_read+0xc4>

	if (!(CardType & 4))
 8002162:	4b27      	ldr	r3, [pc, #156]	; (8002200 <disk_read+0xd0>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	f003 0304 	and.w	r3, r3, #4
 800216a:	2b00      	cmp	r3, #0
 800216c:	d102      	bne.n	8002174 <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	025b      	lsls	r3, r3, #9
 8002172:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8002174:	f7ff fd2a 	bl	8001bcc <SELECT>

	if (count == 1) { /* Single block read */
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d111      	bne.n	80021a2 <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 800217e:	6879      	ldr	r1, [r7, #4]
 8002180:	2051      	movs	r0, #81	; 0x51
 8002182:	f7ff fe83 	bl	8001e8c <send_cmd>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d129      	bne.n	80021e0 <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 800218c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002190:	68b8      	ldr	r0, [r7, #8]
 8002192:	f7ff fdf1 	bl	8001d78 <rcvr_datablock>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d021      	beq.n	80021e0 <disk_read+0xb0>
			count = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	603b      	str	r3, [r7, #0]
 80021a0:	e01e      	b.n	80021e0 <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	2052      	movs	r0, #82	; 0x52
 80021a6:	f7ff fe71 	bl	8001e8c <send_cmd>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d117      	bne.n	80021e0 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 80021b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021b4:	68b8      	ldr	r0, [r7, #8]
 80021b6:	f7ff fddf 	bl	8001d78 <rcvr_datablock>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00a      	beq.n	80021d6 <disk_read+0xa6>
					break;
				buff += 512;
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80021c6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1ed      	bne.n	80021b0 <disk_read+0x80>
 80021d4:	e000      	b.n	80021d8 <disk_read+0xa8>
					break;
 80021d6:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 80021d8:	2100      	movs	r1, #0
 80021da:	204c      	movs	r0, #76	; 0x4c
 80021dc:	f7ff fe56 	bl	8001e8c <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 80021e0:	f7ff fcfb 	bl	8001bda <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80021e4:	f7ff fd1a 	bl	8001c1c <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	bf14      	ite	ne
 80021ee:	2301      	movne	r3, #1
 80021f0:	2300      	moveq	r3, #0
 80021f2:	b2db      	uxtb	r3, r3
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000005 	.word	0x20000005
 8002200:	2000008e 	.word	0x2000008e

08002204 <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	60b9      	str	r1, [r7, #8]
 800220c:	607a      	str	r2, [r7, #4]
 800220e:	603b      	str	r3, [r7, #0]
 8002210:	4603      	mov	r3, r0
 8002212:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d102      	bne.n	8002220 <disk_write+0x1c>
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <disk_write+0x20>
		return RES_PARERR;
 8002220:	2304      	movs	r3, #4
 8002222:	e06b      	b.n	80022fc <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 8002224:	4b37      	ldr	r3, [pc, #220]	; (8002304 <disk_write+0x100>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b2db      	uxtb	r3, r3
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <disk_write+0x32>
		return RES_NOTRDY;
 8002232:	2303      	movs	r3, #3
 8002234:	e062      	b.n	80022fc <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 8002236:	4b33      	ldr	r3, [pc, #204]	; (8002304 <disk_write+0x100>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <disk_write+0x44>
		return RES_WRPRT;
 8002244:	2302      	movs	r3, #2
 8002246:	e059      	b.n	80022fc <disk_write+0xf8>

	if (!(CardType & 4))
 8002248:	4b2f      	ldr	r3, [pc, #188]	; (8002308 <disk_write+0x104>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d102      	bne.n	800225a <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	025b      	lsls	r3, r3, #9
 8002258:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 800225a:	f7ff fcb7 	bl	8001bcc <SELECT>

	if (count == 1) { /* Single block write */
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d110      	bne.n	8002286 <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	2058      	movs	r0, #88	; 0x58
 8002268:	f7ff fe10 	bl	8001e8c <send_cmd>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d13a      	bne.n	80022e8 <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 8002272:	21fe      	movs	r1, #254	; 0xfe
 8002274:	68b8      	ldr	r0, [r7, #8]
 8002276:	f7ff fdb5 	bl	8001de4 <xmit_datablock>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d033      	beq.n	80022e8 <disk_write+0xe4>
			count = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	603b      	str	r3, [r7, #0]
 8002284:	e030      	b.n	80022e8 <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 8002286:	4b20      	ldr	r3, [pc, #128]	; (8002308 <disk_write+0x104>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d007      	beq.n	80022a2 <disk_write+0x9e>
			send_cmd(CMD55, 0);
 8002292:	2100      	movs	r1, #0
 8002294:	2077      	movs	r0, #119	; 0x77
 8002296:	f7ff fdf9 	bl	8001e8c <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 800229a:	6839      	ldr	r1, [r7, #0]
 800229c:	2057      	movs	r0, #87	; 0x57
 800229e:	f7ff fdf5 	bl	8001e8c <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	2059      	movs	r0, #89	; 0x59
 80022a6:	f7ff fdf1 	bl	8001e8c <send_cmd>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d11b      	bne.n	80022e8 <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 80022b0:	21fc      	movs	r1, #252	; 0xfc
 80022b2:	68b8      	ldr	r0, [r7, #8]
 80022b4:	f7ff fd96 	bl	8001de4 <xmit_datablock>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <disk_write+0xd0>
					break;
				buff += 512;
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80022c4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	3b01      	subs	r3, #1
 80022ca:	603b      	str	r3, [r7, #0]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1ee      	bne.n	80022b0 <disk_write+0xac>
 80022d2:	e000      	b.n	80022d6 <disk_write+0xd2>
					break;
 80022d4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 80022d6:	21fd      	movs	r1, #253	; 0xfd
 80022d8:	2000      	movs	r0, #0
 80022da:	f7ff fd83 	bl	8001de4 <xmit_datablock>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <disk_write+0xe4>
				count = 1;
 80022e4:	2301      	movs	r3, #1
 80022e6:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 80022e8:	f7ff fc77 	bl	8001bda <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 80022ec:	f7ff fc96 	bl	8001c1c <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	bf14      	ite	ne
 80022f6:	2301      	movne	r3, #1
 80022f8:	2300      	moveq	r3, #0
 80022fa:	b2db      	uxtb	r3, r3
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000005 	.word	0x20000005
 8002308:	2000008e 	.word	0x2000008e

0800230c <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 800230c:	b590      	push	{r4, r7, lr}
 800230e:	b08b      	sub	sp, #44	; 0x2c
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	603a      	str	r2, [r7, #0]
 8002316:	71fb      	strb	r3, [r7, #7]
 8002318:	460b      	mov	r3, r1
 800231a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 8002320:	79fb      	ldrb	r3, [r7, #7]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <disk_ioctl+0x1e>
		return RES_PARERR;
 8002326:	2304      	movs	r3, #4
 8002328:	e16a      	b.n	8002600 <disk_ioctl+0x2f4>

	res = RES_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER_OFF) {
 8002330:	79bb      	ldrb	r3, [r7, #6]
 8002332:	2b07      	cmp	r3, #7
 8002334:	d127      	bne.n	8002386 <disk_ioctl+0x7a>
		switch (*ptr) {
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d00e      	beq.n	800235c <disk_ioctl+0x50>
 800233e:	2b02      	cmp	r3, #2
 8002340:	d012      	beq.n	8002368 <disk_ioctl+0x5c>
 8002342:	2b00      	cmp	r3, #0
 8002344:	d11b      	bne.n	800237e <disk_ioctl+0x72>
		case 0: /* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
 8002346:	f7ff fd0b 	bl	8001d60 <chk_power>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <disk_ioctl+0x48>
				power_off(); /* Power off */
 8002350:	f7ff fcfa 	bl	8001d48 <power_off>
			res = RES_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800235a:	e14f      	b.n	80025fc <disk_ioctl+0x2f0>
		case 1: /* Sub control code == 1 (POWER_ON) */
			power_on(); /* Power on */
 800235c:	f7ff fca6 	bl	8001cac <power_on>
			res = RES_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002366:	e149      	b.n	80025fc <disk_ioctl+0x2f0>
		case 2: /* Sub control code == 2 (POWER_GET) */
			*(ptr + 1) = (BYTE) chk_power();
 8002368:	f7ff fcfa 	bl	8001d60 <chk_power>
 800236c:	4602      	mov	r2, r0
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	3301      	adds	r3, #1
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800237c:	e13e      	b.n	80025fc <disk_ioctl+0x2f0>
		default:
			res = RES_PARERR;
 800237e:	2304      	movs	r3, #4
 8002380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002384:	e13a      	b.n	80025fc <disk_ioctl+0x2f0>
		}
	} else {
		if (Stat & STA_NOINIT)
 8002386:	4ba0      	ldr	r3, [pc, #640]	; (8002608 <disk_ioctl+0x2fc>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	b2db      	uxtb	r3, r3
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <disk_ioctl+0x8c>
			return RES_NOTRDY;
 8002394:	2303      	movs	r3, #3
 8002396:	e133      	b.n	8002600 <disk_ioctl+0x2f4>

		SELECT(); /* CS = L */
 8002398:	f7ff fc18 	bl	8001bcc <SELECT>

		switch (ctrl) {
 800239c:	79bb      	ldrb	r3, [r7, #6]
 800239e:	2b35      	cmp	r3, #53	; 0x35
 80023a0:	f200 811d 	bhi.w	80025de <disk_ioctl+0x2d2>
 80023a4:	a201      	add	r2, pc, #4	; (adr r2, 80023ac <disk_ioctl+0xa0>)
 80023a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023aa:	bf00      	nop
 80023ac:	08002547 	.word	0x08002547
 80023b0:	08002485 	.word	0x08002485
 80023b4:	08002537 	.word	0x08002537
 80023b8:	080025df 	.word	0x080025df
 80023bc:	080025df 	.word	0x080025df
 80023c0:	080025df 	.word	0x080025df
 80023c4:	080025df 	.word	0x080025df
 80023c8:	080025df 	.word	0x080025df
 80023cc:	080025df 	.word	0x080025df
 80023d0:	080025df 	.word	0x080025df
 80023d4:	080025df 	.word	0x080025df
 80023d8:	080025df 	.word	0x080025df
 80023dc:	080025df 	.word	0x080025df
 80023e0:	080025df 	.word	0x080025df
 80023e4:	080025df 	.word	0x080025df
 80023e8:	080025df 	.word	0x080025df
 80023ec:	080025df 	.word	0x080025df
 80023f0:	080025df 	.word	0x080025df
 80023f4:	080025df 	.word	0x080025df
 80023f8:	080025df 	.word	0x080025df
 80023fc:	080025df 	.word	0x080025df
 8002400:	080025df 	.word	0x080025df
 8002404:	080025df 	.word	0x080025df
 8002408:	080025df 	.word	0x080025df
 800240c:	080025df 	.word	0x080025df
 8002410:	080025df 	.word	0x080025df
 8002414:	080025df 	.word	0x080025df
 8002418:	080025df 	.word	0x080025df
 800241c:	080025df 	.word	0x080025df
 8002420:	080025df 	.word	0x080025df
 8002424:	080025df 	.word	0x080025df
 8002428:	080025df 	.word	0x080025df
 800242c:	080025df 	.word	0x080025df
 8002430:	080025df 	.word	0x080025df
 8002434:	080025df 	.word	0x080025df
 8002438:	080025df 	.word	0x080025df
 800243c:	080025df 	.word	0x080025df
 8002440:	080025df 	.word	0x080025df
 8002444:	080025df 	.word	0x080025df
 8002448:	080025df 	.word	0x080025df
 800244c:	080025df 	.word	0x080025df
 8002450:	080025df 	.word	0x080025df
 8002454:	080025df 	.word	0x080025df
 8002458:	080025df 	.word	0x080025df
 800245c:	080025df 	.word	0x080025df
 8002460:	080025df 	.word	0x080025df
 8002464:	080025df 	.word	0x080025df
 8002468:	080025df 	.word	0x080025df
 800246c:	080025df 	.word	0x080025df
 8002470:	080025df 	.word	0x080025df
 8002474:	080025df 	.word	0x080025df
 8002478:	08002559 	.word	0x08002559
 800247c:	0800257d 	.word	0x0800257d
 8002480:	080025a1 	.word	0x080025a1
		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8002484:	2100      	movs	r1, #0
 8002486:	2049      	movs	r0, #73	; 0x49
 8002488:	f7ff fd00 	bl	8001e8c <send_cmd>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	f040 80a9 	bne.w	80025e6 <disk_ioctl+0x2da>
 8002494:	f107 030c 	add.w	r3, r7, #12
 8002498:	2110      	movs	r1, #16
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fc6c 	bl	8001d78 <rcvr_datablock>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 809f 	beq.w	80025e6 <disk_ioctl+0x2da>
				if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 80024a8:	7b3b      	ldrb	r3, [r7, #12]
 80024aa:	099b      	lsrs	r3, r3, #6
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d10e      	bne.n	80024d0 <disk_ioctl+0x1c4>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80024b2:	7d7b      	ldrb	r3, [r7, #21]
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	7d3b      	ldrb	r3, [r7, #20]
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	b29b      	uxth	r3, r3
 80024be:	4413      	add	r3, r2
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	3301      	adds	r3, #1
 80024c4:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 80024c6:	8bfb      	ldrh	r3, [r7, #30]
 80024c8:	029a      	lsls	r2, r3, #10
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	e02e      	b.n	800252e <disk_ioctl+0x222>
				} else { /* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 80024d0:	7c7b      	ldrb	r3, [r7, #17]
 80024d2:	f003 030f 	and.w	r3, r3, #15
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	7dbb      	ldrb	r3, [r7, #22]
 80024da:	09db      	lsrs	r3, r3, #7
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	4413      	add	r3, r2
 80024e0:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 80024e2:	7d7b      	ldrb	r3, [r7, #21]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	f003 0306 	and.w	r3, r3, #6
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	4413      	add	r3, r2
 80024f0:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 80024f2:	3302      	adds	r3, #2
 80024f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 80024f8:	7d3b      	ldrb	r3, [r7, #20]
 80024fa:	099b      	lsrs	r3, r3, #6
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	b29a      	uxth	r2, r3
 8002500:	7cfb      	ldrb	r3, [r7, #19]
 8002502:	b29b      	uxth	r3, r3
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	b29b      	uxth	r3, r3
 8002508:	4413      	add	r3, r2
 800250a:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 800250c:	7cbb      	ldrb	r3, [r7, #18]
 800250e:	029b      	lsls	r3, r3, #10
 8002510:	b29b      	uxth	r3, r3
 8002512:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002516:	b29b      	uxth	r3, r3
 8002518:	4413      	add	r3, r2
 800251a:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 800251c:	3301      	adds	r3, #1
 800251e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8002520:	8bfa      	ldrh	r2, [r7, #30]
 8002522:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002526:	3b09      	subs	r3, #9
 8002528:	409a      	lsls	r2, r3
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8002534:	e057      	b.n	80025e6 <disk_ioctl+0x2da>

		case GET_SECTOR_SIZE: /* Get sectors on the disk (WORD) */
			*(WORD*) buff = 512;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	f44f 7200 	mov.w	r2, #512	; 0x200
 800253c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002544:	e056      	b.n	80025f4 <disk_ioctl+0x2e8>

		case CTRL_SYNC: /* Make sure that data has been written */
			if (wait_ready() == 0xFF)
 8002546:	f7ff fb95 	bl	8001c74 <wait_ready>
 800254a:	4603      	mov	r3, r0
 800254c:	2bff      	cmp	r3, #255	; 0xff
 800254e:	d14c      	bne.n	80025ea <disk_ioctl+0x2de>
				res = RES_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8002556:	e048      	b.n	80025ea <disk_ioctl+0x2de>

		case MMC_GET_CSD: /* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0 /* READ_CSD */
 8002558:	2100      	movs	r1, #0
 800255a:	2049      	movs	r0, #73	; 0x49
 800255c:	f7ff fc96 	bl	8001e8c <send_cmd>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d143      	bne.n	80025ee <disk_ioctl+0x2e2>
			&& rcvr_datablock(ptr, 16))
 8002566:	2110      	movs	r1, #16
 8002568:	6a38      	ldr	r0, [r7, #32]
 800256a:	f7ff fc05 	bl	8001d78 <rcvr_datablock>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d03c      	beq.n	80025ee <disk_ioctl+0x2e2>
				res = RES_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800257a:	e038      	b.n	80025ee <disk_ioctl+0x2e2>

		case MMC_GET_CID: /* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0 /* READ_CID */
 800257c:	2100      	movs	r1, #0
 800257e:	204a      	movs	r0, #74	; 0x4a
 8002580:	f7ff fc84 	bl	8001e8c <send_cmd>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d133      	bne.n	80025f2 <disk_ioctl+0x2e6>
			&& rcvr_datablock(ptr, 16))
 800258a:	2110      	movs	r1, #16
 800258c:	6a38      	ldr	r0, [r7, #32]
 800258e:	f7ff fbf3 	bl	8001d78 <rcvr_datablock>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d02c      	beq.n	80025f2 <disk_ioctl+0x2e6>
				res = RES_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800259e:	e028      	b.n	80025f2 <disk_ioctl+0x2e6>

		case MMC_GET_OCR: /* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 80025a0:	2100      	movs	r1, #0
 80025a2:	207a      	movs	r0, #122	; 0x7a
 80025a4:	f7ff fc72 	bl	8001e8c <send_cmd>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d117      	bne.n	80025de <disk_ioctl+0x2d2>
				for (n = 0; n < 4; n++)
 80025ae:	2300      	movs	r3, #0
 80025b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80025b4:	e00b      	b.n	80025ce <disk_ioctl+0x2c2>
					*ptr++ = rcvr_spi();
 80025b6:	6a3c      	ldr	r4, [r7, #32]
 80025b8:	1c63      	adds	r3, r4, #1
 80025ba:	623b      	str	r3, [r7, #32]
 80025bc:	f7ff fb2e 	bl	8001c1c <rcvr_spi>
 80025c0:	4603      	mov	r3, r0
 80025c2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 80025c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80025c8:	3301      	adds	r3, #1
 80025ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80025ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d9ef      	bls.n	80025b6 <disk_ioctl+0x2aa>
				res = RES_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 80025dc:	e00a      	b.n	80025f4 <disk_ioctl+0x2e8>
//            *ptr = CardType;
//            res = RES_OK;
//            break;

		default:
			res = RES_PARERR;
 80025de:	2304      	movs	r3, #4
 80025e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80025e4:	e006      	b.n	80025f4 <disk_ioctl+0x2e8>
			break;
 80025e6:	bf00      	nop
 80025e8:	e004      	b.n	80025f4 <disk_ioctl+0x2e8>
			break;
 80025ea:	bf00      	nop
 80025ec:	e002      	b.n	80025f4 <disk_ioctl+0x2e8>
			break;
 80025ee:	bf00      	nop
 80025f0:	e000      	b.n	80025f4 <disk_ioctl+0x2e8>
			break;
 80025f2:	bf00      	nop
		}

		DESELECT(); /* CS = H */
 80025f4:	f7ff faf1 	bl	8001bda <DESELECT>
		rcvr_spi(); /* Idle (Release DO) */
 80025f8:	f7ff fb10 	bl	8001c1c <rcvr_spi>
	}

	return res;
 80025fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002600:	4618      	mov	r0, r3
 8002602:	372c      	adds	r7, #44	; 0x2c
 8002604:	46bd      	mov	sp, r7
 8002606:	bd90      	pop	{r4, r7, pc}
 8002608:	20000005 	.word	0x20000005

0800260c <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 8002612:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <disk_timerproc+0x44>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	71fb      	strb	r3, [r7, #7]
	if (n)
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d005      	beq.n	800262a <disk_timerproc+0x1e>
		Timer1 = --n;
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	3b01      	subs	r3, #1
 8002622:	71fb      	strb	r3, [r7, #7]
 8002624:	4a0a      	ldr	r2, [pc, #40]	; (8002650 <disk_timerproc+0x44>)
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 800262a:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <disk_timerproc+0x48>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	71fb      	strb	r3, [r7, #7]
	if (n)
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d005      	beq.n	8002642 <disk_timerproc+0x36>
		Timer2 = --n;
 8002636:	79fb      	ldrb	r3, [r7, #7]
 8002638:	3b01      	subs	r3, #1
 800263a:	71fb      	strb	r3, [r7, #7]
 800263c:	4a05      	ldr	r2, [pc, #20]	; (8002654 <disk_timerproc+0x48>)
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	7013      	strb	r3, [r2, #0]

}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	2000008c 	.word	0x2000008c
 8002654:	2000008d 	.word	0x2000008d

08002658 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
	++sdcard_timer;
 800265c:	4b09      	ldr	r3, [pc, #36]	; (8002684 <sdcard_systick_timerproc+0x2c>)
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	b29b      	uxth	r3, r3
 8002662:	3301      	adds	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	4b07      	ldr	r3, [pc, #28]	; (8002684 <sdcard_systick_timerproc+0x2c>)
 8002668:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 800266a:	4b06      	ldr	r3, [pc, #24]	; (8002684 <sdcard_systick_timerproc+0x2c>)
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b09      	cmp	r3, #9
 8002672:	d904      	bls.n	800267e <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 8002674:	4b03      	ldr	r3, [pc, #12]	; (8002684 <sdcard_systick_timerproc+0x2c>)
 8002676:	2200      	movs	r2, #0
 8002678:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 800267a:	f7ff ffc7 	bl	800260c <disk_timerproc>
	}
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200002d8 	.word	0x200002d8

08002688 <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 8002688:	b480      	push	{r7}
 800268a:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 800268c:	4b02      	ldr	r3, [pc, #8]	; (8002698 <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 800268e:	4618      	mov	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	36c55cc0 	.word	0x36c55cc0

0800269c <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3301      	adds	r3, #1
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80026ac:	89fb      	ldrh	r3, [r7, #14]
 80026ae:	021b      	lsls	r3, r3, #8
 80026b0:	b21a      	sxth	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	b21b      	sxth	r3, r3
 80026b8:	4313      	orrs	r3, r2
 80026ba:	b21b      	sxth	r3, r3
 80026bc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80026be:	89fb      	ldrh	r3, [r7, #14]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3303      	adds	r3, #3
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	3202      	adds	r2, #2
 80026e4:	7812      	ldrb	r2, [r2, #0]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	021b      	lsls	r3, r3, #8
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	3201      	adds	r2, #1
 80026f2:	7812      	ldrb	r2, [r2, #0]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	7812      	ldrb	r2, [r2, #0]
 8002700:	4313      	orrs	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]
	return rv;
 8002704:	68fb      	ldr	r3, [r7, #12]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	460b      	mov	r3, r1
 800271c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	607a      	str	r2, [r7, #4]
 8002724:	887a      	ldrh	r2, [r7, #2]
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	701a      	strb	r2, [r3, #0]
 800272a:	887b      	ldrh	r3, [r7, #2]
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	607a      	str	r2, [r7, #4]
 8002736:	887a      	ldrh	r2, [r7, #2]
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	701a      	strb	r2, [r3, #0]
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	607a      	str	r2, [r7, #4]
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	701a      	strb	r2, [r3, #0]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	0a1b      	lsrs	r3, r3, #8
 8002762:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	607a      	str	r2, [r7, #4]
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	701a      	strb	r2, [r3, #0]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	0a1b      	lsrs	r3, r3, #8
 8002774:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	701a      	strb	r2, [r3, #0]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	0a1b      	lsrs	r3, r3, #8
 8002786:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	701a      	strb	r2, [r3, #0]
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	613b      	str	r3, [r7, #16]

	if (cnt != 0) {
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00d      	beq.n	80027d6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	1c53      	adds	r3, r2, #1
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	1c59      	adds	r1, r3, #1
 80027c4:	6179      	str	r1, [r7, #20]
 80027c6:	7812      	ldrb	r2, [r2, #0]
 80027c8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3b01      	subs	r3, #1
 80027ce:	607b      	str	r3, [r7, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f1      	bne.n	80027ba <mem_cpy+0x1a>
	}
}
 80027d6:	bf00      	nop
 80027d8:	371c      	adds	r7, #28
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b087      	sub	sp, #28
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	617a      	str	r2, [r7, #20]
 80027f8:	68ba      	ldr	r2, [r7, #8]
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3b01      	subs	r3, #1
 8002802:	607b      	str	r3, [r7, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f3      	bne.n	80027f2 <mem_set+0x10>
}
 800280a:	bf00      	nop
 800280c:	371c      	adds	r7, #28
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 8002816:	b480      	push	{r7}
 8002818:	b089      	sub	sp, #36	; 0x24
 800281a:	af00      	add	r7, sp, #0
 800281c:	60f8      	str	r0, [r7, #12]
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	61fb      	str	r3, [r7, #28]
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	1c5a      	adds	r2, r3, #1
 8002832:	61fa      	str	r2, [r7, #28]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	4619      	mov	r1, r3
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	61ba      	str	r2, [r7, #24]
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	1acb      	subs	r3, r1, r3
 8002842:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3b01      	subs	r3, #1
 8002848:	607b      	str	r3, [r7, #4]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <mem_cmp+0x40>
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0eb      	beq.n	800282e <mem_cmp+0x18>

	return r;
 8002856:	697b      	ldr	r3, [r7, #20]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3724      	adds	r7, #36	; 0x24
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800286e:	e002      	b.n	8002876 <chk_chr+0x12>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3301      	adds	r3, #1
 8002874:	607b      	str	r3, [r7, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d005      	beq.n	800288a <chk_chr+0x26>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	461a      	mov	r2, r3
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	4293      	cmp	r3, r2
 8002888:	d1f2      	bne.n	8002870 <chk_chr+0xc>
	return *str;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	781b      	ldrb	r3, [r3, #0]
}
 800288e:	4618      	mov	r0, r3
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <dbc_1st>:


/* Test if the character is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	4603      	mov	r3, r0
 80028a2:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 80028a4:	2281      	movs	r2, #129	; 0x81
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d30f      	bcc.n	80028cc <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 80028ac:	229f      	movs	r2, #159	; 0x9f
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d801      	bhi.n	80028b8 <dbc_1st+0x1e>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e00a      	b.n	80028ce <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 80028b8:	22e0      	movs	r2, #224	; 0xe0
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	4293      	cmp	r3, r2
 80028be:	d305      	bcc.n	80028cc <dbc_1st+0x32>
 80028c0:	22fc      	movs	r2, #252	; 0xfc
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d801      	bhi.n	80028cc <dbc_1st+0x32>
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <dbc_2nd>:


/* Test if the character is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
 80028e4:	2240      	movs	r2, #64	; 0x40
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d319      	bcc.n	8002920 <dbc_2nd+0x46>
		if (c <= DbcTbl[5]) return 1;
 80028ec:	227e      	movs	r2, #126	; 0x7e
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d801      	bhi.n	80028f8 <dbc_2nd+0x1e>
 80028f4:	2301      	movs	r3, #1
 80028f6:	e014      	b.n	8002922 <dbc_2nd+0x48>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 80028f8:	2280      	movs	r2, #128	; 0x80
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d305      	bcc.n	800290c <dbc_2nd+0x32>
 8002900:	22fc      	movs	r2, #252	; 0xfc
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	4293      	cmp	r3, r2
 8002906:	d801      	bhi.n	800290c <dbc_2nd+0x32>
 8002908:	2301      	movs	r3, #1
 800290a:	e00a      	b.n	8002922 <dbc_2nd+0x48>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 800290c:	2200      	movs	r2, #0
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	4293      	cmp	r3, r2
 8002912:	d305      	bcc.n	8002920 <dbc_2nd+0x46>
 8002914:	2200      	movs	r2, #0
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	4293      	cmp	r3, r2
 800291a:	d801      	bhi.n	8002920 <dbc_2nd+0x46>
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <dbc_2nd+0x48>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b084      	sub	sp, #16
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty */
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	78db      	ldrb	r3, [r3, #3]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d02c      	beq.n	800299c <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	7858      	ldrb	r0, [r3, #1]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002950:	2301      	movs	r3, #1
 8002952:	f7ff fc57 	bl	8002204 <disk_write>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d11d      	bne.n	8002998 <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	1ad2      	subs	r2, r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	429a      	cmp	r2, r3
 8002972:	d213      	bcs.n	800299c <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	789b      	ldrb	r3, [r3, #2]
 8002978:	2b02      	cmp	r3, #2
 800297a:	d10f      	bne.n	800299c <sync_window+0x6e>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	7858      	ldrb	r0, [r3, #1]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	441a      	add	r2, r3
 8002990:	2301      	movs	r3, #1
 8002992:	f7ff fc37 	bl	8002204 <disk_write>
 8002996:	e001      	b.n	800299c <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 8002998:	2301      	movs	r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 800299c:	7bfb      	ldrb	r3, [r7, #15]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80029b0:	2300      	movs	r3, #0
 80029b2:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d01b      	beq.n	80029f6 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7ff ffb5 	bl	800292e <sync_window>
 80029c4:	4603      	mov	r3, r0
 80029c6:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d113      	bne.n	80029f6 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	7858      	ldrb	r0, [r3, #1]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80029d8:	2301      	movs	r3, #1
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	f7ff fba8 	bl	8002130 <disk_read>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d004      	beq.n	80029f0 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 80029e6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ea:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ff90 	bl	800292e <sync_window>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d158      	bne.n	8002aca <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d148      	bne.n	8002ab2 <sync_fs+0xb2>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	791b      	ldrb	r3, [r3, #4]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d144      	bne.n	8002ab2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, sizeof fs->win);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3330      	adds	r3, #48	; 0x30
 8002a2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a30:	2100      	movs	r1, #0
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fed5 	bl	80027e2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3330      	adds	r3, #48	; 0x30
 8002a3c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002a40:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff fe64 	bl	8002712 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3330      	adds	r3, #48	; 0x30
 8002a4e:	4921      	ldr	r1, [pc, #132]	; (8002ad4 <sync_fs+0xd4>)
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fe79 	bl	8002748 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3330      	adds	r3, #48	; 0x30
 8002a5a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002a5e:	491e      	ldr	r1, [pc, #120]	; (8002ad8 <sync_fs+0xd8>)
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff fe71 	bl	8002748 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3330      	adds	r3, #48	; 0x30
 8002a6a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	4619      	mov	r1, r3
 8002a74:	4610      	mov	r0, r2
 8002a76:	f7ff fe67 	bl	8002748 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3330      	adds	r3, #48	; 0x30
 8002a7e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	4619      	mov	r1, r3
 8002a88:	4610      	mov	r0, r2
 8002a8a:	f7ff fe5d 	bl	8002748 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	7858      	ldrb	r0, [r3, #1]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	f7ff fbac 	bl	8002204 <disk_write>
			fs->fsi_flag = 0;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	785b      	ldrb	r3, [r3, #1]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2100      	movs	r1, #0
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fc26 	bl	800230c <disk_ioctl>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <sync_fs+0xca>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8002aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	41615252 	.word	0x41615252
 8002ad8:	61417272 	.word	0x61417272

08002adc <clst2sect>:

static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	3b02      	subs	r3, #2
 8002aea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	3b02      	subs	r3, #2
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d301      	bcc.n	8002afc <clst2sect+0x20>
 8002af8:	2300      	movs	r3, #0
 8002afa:	e008      	b.n	8002b0e <clst2sect+0x32>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	895b      	ldrh	r3, [r3, #10]
 8002b04:	4619      	mov	r1, r3
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	fb03 f301 	mul.w	r3, r3, r1
 8002b0c:	4413      	add	r3, r2
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b086      	sub	sp, #24
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
 8002b22:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d904      	bls.n	8002b3a <get_fat+0x20>
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d302      	bcc.n	8002b40 <get_fat+0x26>
		val = 1;	/* Internal error */
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	e08c      	b.n	8002c5a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002b40:	f04f 33ff 	mov.w	r3, #4294967295
 8002b44:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d045      	beq.n	8002bda <get_fat+0xc0>
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d05d      	beq.n	8002c0e <get_fat+0xf4>
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d177      	bne.n	8002c46 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	085b      	lsrs	r3, r3, #1
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4413      	add	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	6a1a      	ldr	r2, [r3, #32]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	0a5b      	lsrs	r3, r3, #9
 8002b6c:	4413      	add	r3, r2
 8002b6e:	4619      	mov	r1, r3
 8002b70:	6938      	ldr	r0, [r7, #16]
 8002b72:	f7ff ff18 	bl	80029a6 <move_window>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d167      	bne.n	8002c4c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	60fa      	str	r2, [r7, #12]
 8002b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b8e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	6a1a      	ldr	r2, [r3, #32]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	0a5b      	lsrs	r3, r3, #9
 8002b98:	4413      	add	r3, r2
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	6938      	ldr	r0, [r7, #16]
 8002b9e:	f7ff ff02 	bl	80029a6 <move_window>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d153      	bne.n	8002c50 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bb6:	021b      	lsls	r3, r3, #8
 8002bb8:	461a      	mov	r2, r3
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <get_fat+0xb6>
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	091b      	lsrs	r3, r3, #4
 8002bce:	e002      	b.n	8002bd6 <get_fat+0xbc>
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd6:	617b      	str	r3, [r7, #20]
			break;
 8002bd8:	e03f      	b.n	8002c5a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	6a1a      	ldr	r2, [r3, #32]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	0a1b      	lsrs	r3, r3, #8
 8002be2:	4413      	add	r3, r2
 8002be4:	4619      	mov	r1, r3
 8002be6:	6938      	ldr	r0, [r7, #16]
 8002be8:	f7ff fedd 	bl	80029a6 <move_window>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d130      	bne.n	8002c54 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8002c00:	4413      	add	r3, r2
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fd4a 	bl	800269c <ld_word>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	617b      	str	r3, [r7, #20]
			break;
 8002c0c:	e025      	b.n	8002c5a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	6a1a      	ldr	r2, [r3, #32]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	09db      	lsrs	r3, r3, #7
 8002c16:	4413      	add	r3, r2
 8002c18:	4619      	mov	r1, r3
 8002c1a:	6938      	ldr	r0, [r7, #16]
 8002c1c:	f7ff fec3 	bl	80029a6 <move_window>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d118      	bne.n	8002c58 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002c34:	4413      	add	r3, r2
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff fd48 	bl	80026cc <ld_dword>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002c42:	617b      	str	r3, [r7, #20]
			break;
 8002c44:	e009      	b.n	8002c5a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8002c46:	2301      	movs	r3, #1
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	e006      	b.n	8002c5a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002c4c:	bf00      	nop
 8002c4e:	e004      	b.n	8002c5a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002c50:	bf00      	nop
 8002c52:	e002      	b.n	8002c5a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002c54:	bf00      	nop
 8002c56:	e000      	b.n	8002c5a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002c58:	bf00      	nop
		}
	}

	return val;
 8002c5a:	697b      	ldr	r3, [r7, #20]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8002c64:	b590      	push	{r4, r7, lr}
 8002c66:	b089      	sub	sp, #36	; 0x24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8002c70:	2302      	movs	r3, #2
 8002c72:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	f240 80d6 	bls.w	8002e28 <put_fat+0x1c4>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	f080 80d0 	bcs.w	8002e28 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d073      	beq.n	8002d78 <put_fat+0x114>
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	f000 8091 	beq.w	8002db8 <put_fat+0x154>
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	f040 80c6 	bne.w	8002e28 <put_fat+0x1c4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	61bb      	str	r3, [r7, #24]
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	085b      	lsrs	r3, r3, #1
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a1a      	ldr	r2, [r3, #32]
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	0a5b      	lsrs	r3, r3, #9
 8002cb2:	4413      	add	r3, r2
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f7ff fe75 	bl	80029a6 <move_window>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002cc0:	7ffb      	ldrb	r3, [r7, #31]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f040 80a9 	bne.w	8002e1a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	1c59      	adds	r1, r3, #1
 8002cd2:	61b9      	str	r1, [r7, #24]
 8002cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cd8:	4413      	add	r3, r2
 8002cda:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00d      	beq.n	8002d02 <put_fat+0x9e>
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	b25b      	sxtb	r3, r3
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	b25a      	sxtb	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	b25b      	sxtb	r3, r3
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	b25b      	sxtb	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	e001      	b.n	8002d06 <put_fat+0xa2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a1a      	ldr	r2, [r3, #32]
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	0a5b      	lsrs	r3, r3, #9
 8002d18:	4413      	add	r3, r2
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f7ff fe42 	bl	80029a6 <move_window>
 8002d22:	4603      	mov	r3, r0
 8002d24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002d26:	7ffb      	ldrb	r3, [r7, #31]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d178      	bne.n	8002e1e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d38:	4413      	add	r3, r2
 8002d3a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <put_fat+0xea>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	091b      	lsrs	r3, r3, #4
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	e00e      	b.n	8002d6c <put_fat+0x108>
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	b25b      	sxtb	r3, r3
 8002d54:	f023 030f 	bic.w	r3, r3, #15
 8002d58:	b25a      	sxtb	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	0a1b      	lsrs	r3, r3, #8
 8002d5e:	b25b      	sxtb	r3, r3
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	b25b      	sxtb	r3, r3
 8002d66:	4313      	orrs	r3, r2
 8002d68:	b25b      	sxtb	r3, r3
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	70da      	strb	r2, [r3, #3]
			break;
 8002d76:	e057      	b.n	8002e28 <put_fat+0x1c4>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a1a      	ldr	r2, [r3, #32]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	0a1b      	lsrs	r3, r3, #8
 8002d80:	4413      	add	r3, r2
 8002d82:	4619      	mov	r1, r3
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f7ff fe0e 	bl	80029a6 <move_window>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002d8e:	7ffb      	ldrb	r3, [r7, #31]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d146      	bne.n	8002e22 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8002da2:	4413      	add	r3, r2
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	b292      	uxth	r2, r2
 8002da8:	4611      	mov	r1, r2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fcb1 	bl	8002712 <st_word>
			fs->wflag = 1;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2201      	movs	r2, #1
 8002db4:	70da      	strb	r2, [r3, #3]
			break;
 8002db6:	e037      	b.n	8002e28 <put_fat+0x1c4>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a1a      	ldr	r2, [r3, #32]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	09db      	lsrs	r3, r3, #7
 8002dc0:	4413      	add	r3, r2
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f7ff fdee 	bl	80029a6 <move_window>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002dce:	7ffb      	ldrb	r3, [r7, #31]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d128      	bne.n	8002e26 <put_fat+0x1c2>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002de8:	4413      	add	r3, r2
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff fc6e 	bl	80026cc <ld_dword>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002df6:	4323      	orrs	r3, r4
 8002df8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002e08:	4413      	add	r3, r2
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff fc9b 	bl	8002748 <st_dword>
			fs->wflag = 1;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	70da      	strb	r2, [r3, #3]
			break;
 8002e18:	e006      	b.n	8002e28 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8002e1a:	bf00      	nop
 8002e1c:	e004      	b.n	8002e28 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8002e1e:	bf00      	nop
 8002e20:	e002      	b.n	8002e28 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8002e22:	bf00      	nop
 8002e24:	e000      	b.n	8002e28 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8002e26:	bf00      	nop
		}
	}
	return res;
 8002e28:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3724      	adds	r7, #36	; 0x24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd90      	pop	{r4, r7, pc}

08002e32 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b088      	sub	sp, #32
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	60f8      	str	r0, [r7, #12]
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	61bb      	str	r3, [r7, #24]
#endif
#if FF_USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d904      	bls.n	8002e58 <remove_chain+0x26>
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d301      	bcc.n	8002e5c <remove_chain+0x2a>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e04b      	b.n	8002ef4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00c      	beq.n	8002e7c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8002e62:	f04f 32ff 	mov.w	r2, #4294967295
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	69b8      	ldr	r0, [r7, #24]
 8002e6a:	f7ff fefb 	bl	8002c64 <put_fat>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8002e72:	7ffb      	ldrb	r3, [r7, #31]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <remove_chain+0x4a>
 8002e78:	7ffb      	ldrb	r3, [r7, #31]
 8002e7a:	e03b      	b.n	8002ef4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8002e7c:	68b9      	ldr	r1, [r7, #8]
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f7ff fe4b 	bl	8002b1a <get_fat>
 8002e84:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d031      	beq.n	8002ef0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d101      	bne.n	8002e96 <remove_chain+0x64>
 8002e92:	2302      	movs	r3, #2
 8002e94:	e02e      	b.n	8002ef4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9c:	d101      	bne.n	8002ea2 <remove_chain+0x70>
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e028      	b.n	8002ef4 <remove_chain+0xc2>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	68b9      	ldr	r1, [r7, #8]
 8002ea6:	69b8      	ldr	r0, [r7, #24]
 8002ea8:	f7ff fedc 	bl	8002c64 <put_fat>
 8002eac:	4603      	mov	r3, r0
 8002eae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8002eb0:	7ffb      	ldrb	r3, [r7, #31]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <remove_chain+0x88>
 8002eb6:	7ffb      	ldrb	r3, [r7, #31]
 8002eb8:	e01c      	b.n	8002ef4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	691a      	ldr	r2, [r3, #16]
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	3b02      	subs	r3, #2
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d20b      	bcs.n	8002ee0 <remove_chain+0xae>
			fs->free_clst++;
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	791b      	ldrb	r3, [r3, #4]
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform device the data in the block is no longer needed */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d3c6      	bcc.n	8002e7c <remove_chain+0x4a>
 8002eee:	e000      	b.n	8002ef2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8002ef0:	bf00      	nop
				}
			}
		}
	}
#endif
	return FR_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3720      	adds	r7, #32
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10d      	bne.n	8002f2e <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8002f18:	69bb      	ldr	r3, [r7, #24]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d004      	beq.n	8002f28 <create_chain+0x2c>
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d31b      	bcc.n	8002f60 <create_chain+0x64>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	61bb      	str	r3, [r7, #24]
 8002f2c:	e018      	b.n	8002f60 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002f2e:	6839      	ldr	r1, [r7, #0]
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7ff fdf2 	bl	8002b1a <get_fat>
 8002f36:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d801      	bhi.n	8002f42 <create_chain+0x46>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e0a9      	b.n	8003096 <create_chain+0x19a>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f48:	d101      	bne.n	8002f4e <create_chain+0x52>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	e0a3      	b.n	8003096 <create_chain+0x19a>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d201      	bcs.n	8002f5c <create_chain+0x60>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	e09c      	b.n	8003096 <create_chain+0x19a>
		scl = clst;							/* Cluster to start to find */
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <create_chain+0x70>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	e094      	b.n	8003096 <create_chain+0x19a>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d129      	bne.n	8002fcc <create_chain+0xd0>
			ncl = scl + 1;						/* Test if next cluster is free */
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	69fa      	ldr	r2, [r7, #28]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d301      	bcc.n	8002f8c <create_chain+0x90>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8002f8c:	69f9      	ldr	r1, [r7, #28]
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff fdc3 	bl	8002b1a <get_fat>
 8002f94:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d003      	beq.n	8002fa4 <create_chain+0xa8>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa2:	d101      	bne.n	8002fa8 <create_chain+0xac>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	e076      	b.n	8003096 <create_chain+0x19a>
			if (cs != 0) {						/* Not free? */
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00e      	beq.n	8002fcc <create_chain+0xd0>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d906      	bls.n	8002fc8 <create_chain+0xcc>
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d201      	bcs.n	8002fc8 <create_chain+0xcc>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d129      	bne.n	8003026 <create_chain+0x12a>
			ncl = scl;	/* Start cluster */
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	69fa      	ldr	r2, [r7, #28]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d307      	bcc.n	8002ff6 <create_chain+0xfa>
					ncl = 2;
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8002fea:	69fa      	ldr	r2, [r7, #28]
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d901      	bls.n	8002ff6 <create_chain+0xfa>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	e04f      	b.n	8003096 <create_chain+0x19a>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8002ff6:	69f9      	ldr	r1, [r7, #28]
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff fd8e 	bl	8002b1a <get_fat>
 8002ffe:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00e      	beq.n	8003024 <create_chain+0x128>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d003      	beq.n	8003014 <create_chain+0x118>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003012:	d101      	bne.n	8003018 <create_chain+0x11c>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	e03e      	b.n	8003096 <create_chain+0x19a>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	429a      	cmp	r2, r3
 800301e:	d1da      	bne.n	8002fd6 <create_chain+0xda>
 8003020:	2300      	movs	r3, #0
 8003022:	e038      	b.n	8003096 <create_chain+0x19a>
				if (cs == 0) break;				/* Found a free cluster? */
 8003024:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8003026:	f04f 32ff 	mov.w	r2, #4294967295
 800302a:	69f9      	ldr	r1, [r7, #28]
 800302c:	6938      	ldr	r0, [r7, #16]
 800302e:	f7ff fe19 	bl	8002c64 <put_fat>
 8003032:	4603      	mov	r3, r0
 8003034:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8003036:	7dfb      	ldrb	r3, [r7, #23]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d109      	bne.n	8003050 <create_chain+0x154>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d006      	beq.n	8003050 <create_chain+0x154>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8003042:	69fa      	ldr	r2, [r7, #28]
 8003044:	6839      	ldr	r1, [r7, #0]
 8003046:	6938      	ldr	r0, [r7, #16]
 8003048:	f7ff fe0c 	bl	8002c64 <put_fat>
 800304c:	4603      	mov	r3, r0
 800304e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8003050:	7dfb      	ldrb	r3, [r7, #23]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d116      	bne.n	8003084 <create_chain+0x188>
		fs->last_clst = ncl;
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	69fa      	ldr	r2, [r7, #28]
 800305a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	3b02      	subs	r3, #2
 8003066:	429a      	cmp	r2, r3
 8003068:	d804      	bhi.n	8003074 <create_chain+0x178>
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	1e5a      	subs	r2, r3, #1
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	791b      	ldrb	r3, [r3, #4]
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	b2da      	uxtb	r2, r3
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	711a      	strb	r2, [r3, #4]
 8003082:	e007      	b.n	8003094 <create_chain+0x198>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003084:	7dfb      	ldrb	r3, [r7, #23]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d102      	bne.n	8003090 <create_chain+0x194>
 800308a:	f04f 33ff 	mov.w	r3, #4294967295
 800308e:	e000      	b.n	8003092 <create_chain+0x196>
 8003090:	2301      	movs	r3, #1
 8003092:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8003094:	69fb      	ldr	r3, [r7, #28]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3720      	adds	r7, #32
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b086      	sub	sp, #24
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	6039      	str	r1, [r7, #0]
	DWORD sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7ff fc40 	bl	800292e <sync_window>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <dir_clear+0x1a>
 80030b4:	2301      	movs	r3, #1
 80030b6:	e036      	b.n	8003126 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80030b8:	6839      	ldr	r1, [r7, #0]
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7ff fd0e 	bl	8002adc <clst2sect>
 80030c0:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	62da      	str	r2, [r3, #44]	; 0x2c
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3330      	adds	r3, #48	; 0x30
 80030cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030d0:	2100      	movs	r1, #0
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff fb85 	bl	80027e2 <mem_set>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3330      	adds	r3, #48	; 0x30
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	2301      	movs	r3, #1
 80030e0:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	e003      	b.n	80030f0 <dir_clear+0x52>
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	4413      	add	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	895b      	ldrh	r3, [r3, #10]
 80030f4:	461a      	mov	r2, r3
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d20b      	bcs.n	8003114 <dir_clear+0x76>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	7858      	ldrb	r0, [r3, #1]
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	441a      	add	r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	68f9      	ldr	r1, [r7, #12]
 800310a:	f7ff f87b 	bl	8002204 <disk_write>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0e9      	beq.n	80030e8 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	895b      	ldrh	r3, [r3, #10]
 8003118:	461a      	mov	r2, r3
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	4293      	cmp	r3, r2
 800311e:	bf14      	ite	ne
 8003120:	2301      	movne	r3, #1
 8003122:	2300      	moveq	r3, #0
 8003124:	b2db      	uxtb	r3, r3
}
 8003126:	4618      	mov	r0, r3
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b086      	sub	sp, #24
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003144:	d204      	bcs.n	8003150 <dir_sdi+0x22>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <dir_sdi+0x26>
		return FR_INT_ERR;
 8003150:	2302      	movs	r3, #2
 8003152:	e063      	b.n	800321c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <dir_sdi+0x46>
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d902      	bls.n	8003174 <dir_sdi+0x46>
		clst = fs->dirbase;
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10c      	bne.n	8003194 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	095b      	lsrs	r3, r3, #5
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	8912      	ldrh	r2, [r2, #8]
 8003182:	4293      	cmp	r3, r2
 8003184:	d301      	bcc.n	800318a <dir_sdi+0x5c>
 8003186:	2302      	movs	r3, #2
 8003188:	e048      	b.n	800321c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	619a      	str	r2, [r3, #24]
 8003192:	e029      	b.n	80031e8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	895b      	ldrh	r3, [r3, #10]
 8003198:	025b      	lsls	r3, r3, #9
 800319a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800319c:	e019      	b.n	80031d2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6979      	ldr	r1, [r7, #20]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff fcb9 	bl	8002b1a <get_fat>
 80031a8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b0:	d101      	bne.n	80031b6 <dir_sdi+0x88>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e032      	b.n	800321c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d904      	bls.n	80031c6 <dir_sdi+0x98>
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d301      	bcc.n	80031ca <dir_sdi+0x9c>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e028      	b.n	800321c <dir_sdi+0xee>
			ofs -= csz;
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d2e1      	bcs.n	800319e <dir_sdi+0x70>
		}
		dp->sect = clst2sect(fs, clst);
 80031da:	6979      	ldr	r1, [r7, #20]
 80031dc:	6938      	ldr	r0, [r7, #16]
 80031de:	f7ff fc7d 	bl	8002adc <clst2sect>
 80031e2:	4602      	mov	r2, r0
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	615a      	str	r2, [r3, #20]
	if (dp->sect == 0) return FR_INT_ERR;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <dir_sdi+0xcc>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e010      	b.n	800321c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699a      	ldr	r2, [r3, #24]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	0a5b      	lsrs	r3, r3, #9
 8003202:	441a      	add	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003214:	441a      	add	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	61da      	str	r2, [r3, #28]

	return FR_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	3320      	adds	r3, #32
 800323a:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003242:	d302      	bcc.n	800324a <dir_next+0x26>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	619a      	str	r2, [r3, #24]
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <dir_next+0x32>
 8003252:	2304      	movs	r3, #4
 8003254:	e078      	b.n	8003348 <dir_next+0x124>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800325c:	2b00      	cmp	r3, #0
 800325e:	d166      	bne.n	800332e <dir_next+0x10a>
		dp->sect++;				/* Next sector */
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	619a      	str	r2, [r3, #24]

		if (dp->clust == 0) {	/* Static table */
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10a      	bne.n	8003288 <dir_next+0x64>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	095b      	lsrs	r3, r3, #5
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	8912      	ldrh	r2, [r2, #8]
 800327a:	4293      	cmp	r3, r2
 800327c:	d357      	bcc.n	800332e <dir_next+0x10a>
				dp->sect = 0; return FR_NO_FILE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	619a      	str	r2, [r3, #24]
 8003284:	2304      	movs	r3, #4
 8003286:	e05f      	b.n	8003348 <dir_next+0x124>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	0a5b      	lsrs	r3, r3, #9
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	8952      	ldrh	r2, [r2, #10]
 8003290:	3a01      	subs	r2, #1
 8003292:	4013      	ands	r3, r2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d14a      	bne.n	800332e <dir_next+0x10a>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	4619      	mov	r1, r3
 80032a0:	4610      	mov	r0, r2
 80032a2:	f7ff fc3a 	bl	8002b1a <get_fat>
 80032a6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d801      	bhi.n	80032b2 <dir_next+0x8e>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e04a      	b.n	8003348 <dir_next+0x124>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b8:	d101      	bne.n	80032be <dir_next+0x9a>
 80032ba:	2301      	movs	r3, #1
 80032bc:	e044      	b.n	8003348 <dir_next+0x124>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d328      	bcc.n	800331a <dir_next+0xf6>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d104      	bne.n	80032d8 <dir_next+0xb4>
						dp->sect = 0; return FR_NO_FILE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	619a      	str	r2, [r3, #24]
 80032d4:	2304      	movs	r3, #4
 80032d6:	e037      	b.n	8003348 <dir_next+0x124>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	4619      	mov	r1, r3
 80032e0:	4610      	mov	r0, r2
 80032e2:	f7ff fe0b 	bl	8002efc <create_chain>
 80032e6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <dir_next+0xce>
 80032ee:	2307      	movs	r3, #7
 80032f0:	e02a      	b.n	8003348 <dir_next+0x124>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <dir_next+0xd8>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e025      	b.n	8003348 <dir_next+0x124>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003302:	d101      	bne.n	8003308 <dir_next+0xe4>
 8003304:	2301      	movs	r3, #1
 8003306:	e01f      	b.n	8003348 <dir_next+0x124>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8003308:	6979      	ldr	r1, [r7, #20]
 800330a:	6938      	ldr	r0, [r7, #16]
 800330c:	f7ff fec7 	bl	800309e <dir_clear>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <dir_next+0xf6>
 8003316:	2301      	movs	r3, #1
 8003318:	e016      	b.n	8003348 <dir_next+0x124>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	615a      	str	r2, [r3, #20]
				dp->sect = clst2sect(fs, clst);
 8003320:	6979      	ldr	r1, [r7, #20]
 8003322:	6938      	ldr	r0, [r7, #16]
 8003324:	f7ff fbda 	bl	8002adc <clst2sect>
 8003328:	4602      	mov	r2, r0
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003340:	441a      	add	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT nent				/* Number of contiguous entries to allocate */
)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8003360:	2100      	movs	r1, #0
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7ff fee3 	bl	800312e <dir_sdi>
 8003368:	4603      	mov	r3, r0
 800336a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800336c:	7dfb      	ldrb	r3, [r7, #23]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d12b      	bne.n	80033ca <dir_alloc+0x7a>
		n = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	4619      	mov	r1, r3
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f7ff fb12 	bl	80029a6 <move_window>
 8003382:	4603      	mov	r3, r0
 8003384:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8003386:	7dfb      	ldrb	r3, [r7, #23]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d11d      	bne.n	80033c8 <dir_alloc+0x78>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2be5      	cmp	r3, #229	; 0xe5
 8003394:	d004      	beq.n	80033a0 <dir_alloc+0x50>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d107      	bne.n	80033b0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	3301      	adds	r3, #1
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d102      	bne.n	80033b4 <dir_alloc+0x64>
 80033ae:	e00c      	b.n	80033ca <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80033b0:	2300      	movs	r3, #0
 80033b2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80033b4:	2101      	movs	r1, #1
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7ff ff34 	bl	8003224 <dir_next>
 80033bc:	4603      	mov	r3, r0
 80033be:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0d7      	beq.n	8003376 <dir_alloc+0x26>
 80033c6:	e000      	b.n	80033ca <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80033c8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80033ca:	7dfb      	ldrb	r3, [r7, #23]
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d101      	bne.n	80033d4 <dir_alloc+0x84>
 80033d0:	2307      	movs	r3, #7
 80033d2:	75fb      	strb	r3, [r7, #23]
	return res;
 80033d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b084      	sub	sp, #16
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	331a      	adds	r3, #26
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff f955 	bl	800269c <ld_word>
 80033f2:	4603      	mov	r3, r0
 80033f4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d109      	bne.n	8003412 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	3314      	adds	r3, #20
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff f94a 	bl	800269c <ld_word>
 8003408:	4603      	mov	r3, r0
 800340a:	041b      	lsls	r3, r3, #16
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8003412:	68fb      	ldr	r3, [r7, #12]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	331a      	adds	r3, #26
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	b292      	uxth	r2, r2
 8003430:	4611      	mov	r1, r2
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff f96d 	bl	8002712 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b03      	cmp	r3, #3
 800343e:	d109      	bne.n	8003454 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f103 0214 	add.w	r2, r3, #20
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	0c1b      	lsrs	r3, r3, #16
 800344a:	b29b      	uxth	r3, r3
 800344c:	4619      	mov	r1, r3
 800344e:	4610      	mov	r0, r2
 8003450:	f7ff f95f 	bl	8002712 <st_word>
	}
}
 8003454:	bf00      	nop
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	613b      	str	r3, [r7, #16]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800346a:	2100      	movs	r1, #0
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff fe5e 	bl	800312e <dir_sdi>
 8003472:	4603      	mov	r3, r0
 8003474:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8003476:	7dfb      	ldrb	r3, [r7, #23]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <dir_find+0x24>
 800347c:	7dfb      	ldrb	r3, [r7, #23]
 800347e:	e03e      	b.n	80034fe <dir_find+0xa2>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	4619      	mov	r1, r3
 8003486:	6938      	ldr	r0, [r7, #16]
 8003488:	f7ff fa8d 	bl	80029a6 <move_window>
 800348c:	4603      	mov	r3, r0
 800348e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003490:	7dfb      	ldrb	r3, [r7, #23]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d12f      	bne.n	80034f6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d102      	bne.n	80034aa <dir_find+0x4e>
 80034a4:	2304      	movs	r3, #4
 80034a6:	75fb      	strb	r3, [r7, #23]
 80034a8:	e028      	b.n	80034fc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	330b      	adds	r3, #11
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	330b      	adds	r3, #11
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10a      	bne.n	80034e2 <dir_find+0x86>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69d8      	ldr	r0, [r3, #28]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3320      	adds	r3, #32
 80034d4:	220b      	movs	r2, #11
 80034d6:	4619      	mov	r1, r3
 80034d8:	f7ff f99d 	bl	8002816 <mem_cmp>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00b      	beq.n	80034fa <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80034e2:	2100      	movs	r1, #0
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff fe9d 	bl	8003224 <dir_next>
 80034ea:	4603      	mov	r3, r0
 80034ec:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80034ee:	7dfb      	ldrb	r3, [r7, #23]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0c5      	beq.n	8003480 <dir_find+0x24>
 80034f4:	e002      	b.n	80034fc <dir_find+0xa0>
		if (res != FR_OK) break;
 80034f6:	bf00      	nop
 80034f8:	e000      	b.n	80034fc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80034fa:	bf00      	nop

	return res;
 80034fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3718      	adds	r7, #24
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b084      	sub	sp, #16
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8003514:	2101      	movs	r1, #1
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff ff1a 	bl	8003350 <dir_alloc>
 800351c:	4603      	mov	r3, r0
 800351e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d11c      	bne.n	8003560 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	4619      	mov	r1, r3
 800352c:	68b8      	ldr	r0, [r7, #8]
 800352e:	f7ff fa3a 	bl	80029a6 <move_window>
 8003532:	4603      	mov	r3, r0
 8003534:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d111      	bne.n	8003560 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	69db      	ldr	r3, [r3, #28]
 8003540:	2220      	movs	r2, #32
 8003542:	2100      	movs	r1, #0
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff f94c 	bl	80027e2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69d8      	ldr	r0, [r3, #28]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3320      	adds	r3, #32
 8003552:	220b      	movs	r2, #11
 8003554:	4619      	mov	r1, r3
 8003556:	f7ff f923 	bl	80027a0 <mem_cpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2201      	movs	r2, #1
 800355e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8003560:	7bfb      	ldrb	r3, [r7, #15]
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <get_fileinfo>:

static void get_fileinfo (
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno		/* Pointer to the file information to be filled */
)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b086      	sub	sp, #24
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	6039      	str	r1, [r7, #0]
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2200      	movs	r2, #0
 8003578:	725a      	strb	r2, [r3, #9]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d052      	beq.n	8003628 <get_fileinfo+0xbe>
		fno->fname[di] = 0;	/* Terminate the LFN */
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
	}

#else	/* Non-LFN configuration */
	si = di = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	613b      	str	r3, [r7, #16]
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	617b      	str	r3, [r7, #20]
	while (si < 11) {		/* Copy name body and extension */
 800358a:	e021      	b.n	80035d0 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[si++];
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69da      	ldr	r2, [r3, #28]
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	1c59      	adds	r1, r3, #1
 8003594:	6179      	str	r1, [r7, #20]
 8003596:	4413      	add	r3, r2
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;		/* Skip padding spaces */
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	2b20      	cmp	r3, #32
 80035a0:	d100      	bne.n	80035a4 <get_fileinfo+0x3a>
 80035a2:	e015      	b.n	80035d0 <get_fileinfo+0x66>
		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
 80035a6:	2b05      	cmp	r3, #5
 80035a8:	d101      	bne.n	80035ae <get_fileinfo+0x44>
 80035aa:	23e5      	movs	r3, #229	; 0xe5
 80035ac:	73fb      	strb	r3, [r7, #15]
		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2b09      	cmp	r3, #9
 80035b2:	d106      	bne.n	80035c2 <get_fileinfo+0x58>
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	613a      	str	r2, [r7, #16]
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	4413      	add	r3, r2
 80035be:	222e      	movs	r2, #46	; 0x2e
 80035c0:	725a      	strb	r2, [r3, #9]
		fno->fname[di++] = c;
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	613a      	str	r2, [r7, #16]
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	4413      	add	r3, r2
 80035cc:	7bfa      	ldrb	r2, [r7, #15]
 80035ce:	725a      	strb	r2, [r3, #9]
	while (si < 11) {		/* Copy name body and extension */
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2b0a      	cmp	r3, #10
 80035d4:	d9da      	bls.n	800358c <get_fileinfo+0x22>
	}
	fno->fname[di] = 0;
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4413      	add	r3, r2
 80035dc:	3309      	adds	r3, #9
 80035de:	2200      	movs	r2, #0
 80035e0:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	7ada      	ldrb	r2, [r3, #11]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	331c      	adds	r3, #28
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff f86a 	bl	80026cc <ld_dword>
 80035f8:	4602      	mov	r2, r0
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	601a      	str	r2, [r3, #0]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	3316      	adds	r3, #22
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff f849 	bl	800269c <ld_word>
 800360a:	4603      	mov	r3, r0
 800360c:	461a      	mov	r2, r3
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	80da      	strh	r2, [r3, #6]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	3318      	adds	r3, #24
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff f83f 	bl	800269c <ld_word>
 800361e:	4603      	mov	r3, r0
 8003620:	461a      	mov	r2, r3
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	809a      	strh	r2, [r3, #4]
 8003626:	e000      	b.n	800362a <get_fileinfo+0xc0>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8003628:	bf00      	nop
}
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b08a      	sub	sp, #40	; 0x28
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3320      	adds	r3, #32
 8003644:	613b      	str	r3, [r7, #16]
	mem_set(sfn, ' ', 11);
 8003646:	220b      	movs	r2, #11
 8003648:	2120      	movs	r1, #32
 800364a:	6938      	ldr	r0, [r7, #16]
 800364c:	f7ff f8c9 	bl	80027e2 <mem_set>
	si = i = 0; ni = 8;
 8003650:	2300      	movs	r3, #0
 8003652:	61bb      	str	r3, [r7, #24]
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	61fb      	str	r3, [r7, #28]
 8003658:	2308      	movs	r3, #8
 800365a:	623b      	str	r3, [r7, #32]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	61fa      	str	r2, [r7, #28]
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	4413      	add	r3, r2
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (c <= ' ') break; 			/* Break if end of the path name */
 800366c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003670:	2b20      	cmp	r3, #32
 8003672:	d97c      	bls.n	800376e <create_name+0x13e>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8003674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003678:	2b2f      	cmp	r3, #47	; 0x2f
 800367a:	d007      	beq.n	800368c <create_name+0x5c>
 800367c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003680:	2b5c      	cmp	r3, #92	; 0x5c
 8003682:	d110      	bne.n	80036a6 <create_name+0x76>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003684:	e002      	b.n	800368c <create_name+0x5c>
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	3301      	adds	r3, #1
 800368a:	61fb      	str	r3, [r7, #28]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	4413      	add	r3, r2
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b2f      	cmp	r3, #47	; 0x2f
 8003696:	d0f6      	beq.n	8003686 <create_name+0x56>
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	4413      	add	r3, r2
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	2b5c      	cmp	r3, #92	; 0x5c
 80036a2:	d0f0      	beq.n	8003686 <create_name+0x56>
			break;
 80036a4:	e064      	b.n	8003770 <create_name+0x140>
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 80036a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036aa:	2b2e      	cmp	r3, #46	; 0x2e
 80036ac:	d003      	beq.n	80036b6 <create_name+0x86>
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	6a3b      	ldr	r3, [r7, #32]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d30d      	bcc.n	80036d2 <create_name+0xa2>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	2b0b      	cmp	r3, #11
 80036ba:	d003      	beq.n	80036c4 <create_name+0x94>
 80036bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036c0:	2b2e      	cmp	r3, #46	; 0x2e
 80036c2:	d001      	beq.n	80036c8 <create_name+0x98>
 80036c4:	2306      	movs	r3, #6
 80036c6:	e06f      	b.n	80037a8 <create_name+0x178>
			i = 8; ni = 11;				/* Enter file extension field */
 80036c8:	2308      	movs	r3, #8
 80036ca:	61bb      	str	r3, [r7, #24]
 80036cc:	230b      	movs	r3, #11
 80036ce:	623b      	str	r3, [r7, #32]
			continue;
 80036d0:	e04c      	b.n	800376c <create_name+0x13c>
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#endif
		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 80036d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff f8df 	bl	800289a <dbc_1st>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d024      	beq.n	800372c <create_name+0xfc>
			d = (BYTE)p[si++];			/* Get 2nd byte */
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	61fa      	str	r2, [r7, #28]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	4413      	add	r3, r2
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	73fb      	strb	r3, [r7, #15]
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 80036f0:	7bfb      	ldrb	r3, [r7, #15]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff f8f1 	bl	80028da <dbc_2nd>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d004      	beq.n	8003708 <create_name+0xd8>
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	3b01      	subs	r3, #1
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	429a      	cmp	r2, r3
 8003706:	d301      	bcc.n	800370c <create_name+0xdc>
 8003708:	2306      	movs	r3, #6
 800370a:	e04d      	b.n	80037a8 <create_name+0x178>
			sfn[i++] = c;
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	1c5a      	adds	r2, r3, #1
 8003710:	61ba      	str	r2, [r7, #24]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4413      	add	r3, r2
 8003716:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800371a:	701a      	strb	r2, [r3, #0]
			sfn[i++] = d;
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	61ba      	str	r2, [r7, #24]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4413      	add	r3, r2
 8003726:	7bfa      	ldrb	r2, [r7, #15]
 8003728:	701a      	strb	r2, [r3, #0]
 800372a:	e797      	b.n	800365c <create_name+0x2c>
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800372c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003730:	4619      	mov	r1, r3
 8003732:	481f      	ldr	r0, [pc, #124]	; (80037b0 <create_name+0x180>)
 8003734:	f7ff f896 	bl	8002864 <chk_chr>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <create_name+0x112>
 800373e:	2306      	movs	r3, #6
 8003740:	e032      	b.n	80037a8 <create_name+0x178>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8003742:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003746:	2b60      	cmp	r3, #96	; 0x60
 8003748:	d908      	bls.n	800375c <create_name+0x12c>
 800374a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800374e:	2b7a      	cmp	r3, #122	; 0x7a
 8003750:	d804      	bhi.n	800375c <create_name+0x12c>
 8003752:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003756:	3b20      	subs	r3, #32
 8003758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			sfn[i++] = c;
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	61ba      	str	r2, [r7, #24]
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	4413      	add	r3, r2
 8003766:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800376a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];				/* Get a byte */
 800376c:	e776      	b.n	800365c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800376e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	441a      	add	r2, r3
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <create_name+0x154>
 8003780:	2306      	movs	r3, #6
 8003782:	e011      	b.n	80037a8 <create_name+0x178>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2be5      	cmp	r3, #229	; 0xe5
 800378a:	d102      	bne.n	8003792 <create_name+0x162>
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	2205      	movs	r2, #5
 8003790:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8003792:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003796:	2b20      	cmp	r3, #32
 8003798:	d801      	bhi.n	800379e <create_name+0x16e>
 800379a:	2204      	movs	r2, #4
 800379c:	e000      	b.n	80037a0 <create_name+0x170>
 800379e:	2200      	movs	r2, #0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	330b      	adds	r3, #11
 80037a4:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80037a6:	2300      	movs	r3, #0
#endif /* FF_USE_LFN */
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3728      	adds	r7, #40	; 0x28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	08005ef8 	.word	0x08005ef8

080037b4 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	613b      	str	r3, [r7, #16]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80037c4:	e002      	b.n	80037cc <follow_path+0x18>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	3301      	adds	r3, #1
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	2b2f      	cmp	r3, #47	; 0x2f
 80037d2:	d0f8      	beq.n	80037c6 <follow_path+0x12>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b5c      	cmp	r3, #92	; 0x5c
 80037da:	d0f4      	beq.n	80037c6 <follow_path+0x12>
		dp->obj.sclust = 0;					/* Start from root directory */
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	609a      	str	r2, [r3, #8]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b1f      	cmp	r3, #31
 80037e8:	d80a      	bhi.n	8003800 <follow_path+0x4c>
		dp->fn[NSFLAG] = NS_NONAME;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2280      	movs	r2, #128	; 0x80
 80037ee:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 80037f2:	2100      	movs	r1, #0
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff fc9a 	bl	800312e <dir_sdi>
 80037fa:	4603      	mov	r3, r0
 80037fc:	75fb      	strb	r3, [r7, #23]
 80037fe:	e043      	b.n	8003888 <follow_path+0xd4>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003800:	463b      	mov	r3, r7
 8003802:	4619      	mov	r1, r3
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7ff ff13 	bl	8003630 <create_name>
 800380a:	4603      	mov	r3, r0
 800380c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800380e:	7dfb      	ldrb	r3, [r7, #23]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d134      	bne.n	800387e <follow_path+0xca>
			res = dir_find(dp);				/* Find an object with the segment name */
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f7ff fe21 	bl	800345c <dir_find>
 800381a:	4603      	mov	r3, r0
 800381c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003824:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) {				/* Failed to find the object */
 8003826:	7dfb      	ldrb	r3, [r7, #23]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00a      	beq.n	8003842 <follow_path+0x8e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800382c:	7dfb      	ldrb	r3, [r7, #23]
 800382e:	2b04      	cmp	r3, #4
 8003830:	d127      	bne.n	8003882 <follow_path+0xce>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003832:	7bfb      	ldrb	r3, [r7, #15]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	d122      	bne.n	8003882 <follow_path+0xce>
 800383c:	2305      	movs	r3, #5
 800383e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8003840:	e01f      	b.n	8003882 <follow_path+0xce>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003842:	7bfb      	ldrb	r3, [r7, #15]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d11c      	bne.n	8003886 <follow_path+0xd2>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	799b      	ldrb	r3, [r3, #6]
 8003850:	f003 0310 	and.w	r3, r3, #16
 8003854:	2b00      	cmp	r3, #0
 8003856:	d102      	bne.n	800385e <follow_path+0xaa>
				res = FR_NO_PATH; break;
 8003858:	2305      	movs	r3, #5
 800385a:	75fb      	strb	r3, [r7, #23]
 800385c:	e014      	b.n	8003888 <follow_path+0xd4>
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800386c:	4413      	add	r3, r2
 800386e:	4619      	mov	r1, r3
 8003870:	6938      	ldr	r0, [r7, #16]
 8003872:	f7ff fdb4 	bl	80033de <ld_clust>
 8003876:	4602      	mov	r2, r0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800387c:	e7c0      	b.n	8003800 <follow_path+0x4c>
			if (res != FR_OK) break;
 800387e:	bf00      	nop
 8003880:	e002      	b.n	8003888 <follow_path+0xd4>
				break;
 8003882:	bf00      	nop
 8003884:	e000      	b.n	8003888 <follow_path+0xd4>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003886:	bf00      	nop
			}
		}
	}

	return res;
 8003888:	7dfb      	ldrb	r3, [r7, #23]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8003892:	b480      	push	{r7}
 8003894:	b089      	sub	sp, #36	; 0x24
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 800389a:	f04f 33ff 	mov.w	r3, #4294967295
 800389e:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <get_ldnumber+0x22>
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	e02d      	b.n	8003910 <get_ldnumber+0x7e>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	61fa      	str	r2, [r7, #28]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	73fb      	strb	r3, [r7, #15]
 80038be:	7bfb      	ldrb	r3, [r7, #15]
 80038c0:	2b20      	cmp	r3, #32
 80038c2:	d902      	bls.n	80038ca <get_ldnumber+0x38>
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	2b3a      	cmp	r3, #58	; 0x3a
 80038c8:	d1f4      	bne.n	80038b4 <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
 80038cc:	2b3a      	cmp	r3, #58	; 0x3a
 80038ce:	d11c      	bne.n	800390a <get_ldnumber+0x78>
		i = FF_VOLUMES;
 80038d0:	2301      	movs	r3, #1
 80038d2:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b2f      	cmp	r3, #47	; 0x2f
 80038da:	d90c      	bls.n	80038f6 <get_ldnumber+0x64>
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	2b39      	cmp	r3, #57	; 0x39
 80038e2:	d808      	bhi.n	80038f6 <get_ldnumber+0x64>
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	3302      	adds	r3, #2
 80038e8:	69fa      	ldr	r2, [r7, #28]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d103      	bne.n	80038f6 <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	3b30      	subs	r3, #48	; 0x30
 80038f4:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	dc04      	bgt.n	8003906 <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	69fa      	ldr	r2, [r7, #28]
 8003904:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	e002      	b.n	8003910 <get_ldnumber+0x7e>
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
#endif
	return vol;		/* Return the default drive */
 800390e:	697b      	ldr	r3, [r7, #20]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3724      	adds	r7, #36	; 0x24
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	70da      	strb	r2, [r3, #3]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f04f 32ff 	mov.w	r2, #4294967295
 8003932:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8003934:	6839      	ldr	r1, [r7, #0]
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff f835 	bl	80029a6 <move_window>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <check_fs+0x2a>
 8003942:	2304      	movs	r3, #4
 8003944:	e038      	b.n	80039b8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3330      	adds	r3, #48	; 0x30
 800394a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800394e:	4618      	mov	r0, r3
 8003950:	f7fe fea4 	bl	800269c <ld_word>
 8003954:	4603      	mov	r3, r0
 8003956:	461a      	mov	r2, r3
 8003958:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800395c:	429a      	cmp	r2, r3
 800395e:	d001      	beq.n	8003964 <check_fs+0x48>
 8003960:	2303      	movs	r3, #3
 8003962:	e029      	b.n	80039b8 <check_fs+0x9c>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800396a:	2be9      	cmp	r3, #233	; 0xe9
 800396c:	d009      	beq.n	8003982 <check_fs+0x66>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003974:	2beb      	cmp	r3, #235	; 0xeb
 8003976:	d004      	beq.n	8003982 <check_fs+0x66>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800397e:	2be8      	cmp	r3, #232	; 0xe8
 8003980:	d119      	bne.n	80039b6 <check_fs+0x9a>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3330      	adds	r3, #48	; 0x30
 8003986:	3336      	adds	r3, #54	; 0x36
 8003988:	2203      	movs	r2, #3
 800398a:	490d      	ldr	r1, [pc, #52]	; (80039c0 <check_fs+0xa4>)
 800398c:	4618      	mov	r0, r3
 800398e:	f7fe ff42 	bl	8002816 <mem_cmp>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <check_fs+0x80>
 8003998:	2300      	movs	r3, #0
 800399a:	e00d      	b.n	80039b8 <check_fs+0x9c>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3330      	adds	r3, #48	; 0x30
 80039a0:	3352      	adds	r3, #82	; 0x52
 80039a2:	2205      	movs	r2, #5
 80039a4:	4907      	ldr	r1, [pc, #28]	; (80039c4 <check_fs+0xa8>)
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fe ff35 	bl	8002816 <mem_cmp>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <check_fs+0x9a>
 80039b2:	2300      	movs	r3, #0
 80039b4:	e000      	b.n	80039b8 <check_fs+0x9c>
	}
	return 2;	/* Valid BS but not FAT */
 80039b6:	2302      	movs	r3, #2
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	08005f08 	.word	0x08005f08
 80039c4:	08005f0c 	.word	0x08005f0c

080039c8 <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b096      	sub	sp, #88	; 0x58
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	4613      	mov	r3, r2
 80039d4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f7ff ff58 	bl	8003892 <get_ldnumber>
 80039e2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80039e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	da01      	bge.n	80039ee <find_volume+0x26>
 80039ea:	230b      	movs	r3, #11
 80039ec:	e238      	b.n	8003e60 <find_volume+0x498>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 80039ee:	4aa8      	ldr	r2, [pc, #672]	; (8003c90 <find_volume+0x2c8>)
 80039f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 80039f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <find_volume+0x3a>
 80039fe:	230c      	movs	r3, #12
 8003a00:	e22e      	b.n	8003e60 <find_volume+0x498>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a06:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8003a08:	79fb      	ldrb	r3, [r7, #7]
 8003a0a:	f023 0301 	bic.w	r3, r3, #1
 8003a0e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8003a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d01a      	beq.n	8003a4e <find_volume+0x86>
		stat = disk_status(fs->pdrv);
 8003a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1a:	785b      	ldrb	r3, [r3, #1]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fe fb71 	bl	8002104 <disk_status>
 8003a22:	4603      	mov	r3, r0
 8003a24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003a28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10c      	bne.n	8003a4e <find_volume+0x86>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8003a34:	79fb      	ldrb	r3, [r7, #7]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d007      	beq.n	8003a4a <find_volume+0x82>
 8003a3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8003a46:	230a      	movs	r3, #10
 8003a48:	e20a      	b.n	8003e60 <find_volume+0x498>
			}
			return FR_OK;				/* The filesystem object is valid */
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e208      	b.n	8003e60 <find_volume+0x498>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 8003a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a50:	2200      	movs	r2, #0
 8003a52:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8003a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a5e:	785b      	ldrb	r3, [r3, #1]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fe fa65 	bl	8001f30 <disk_initialize>
 8003a66:	4603      	mov	r3, r0
 8003a68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8003a6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e1f1      	b.n	8003e60 <find_volume+0x498>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8003a7c:	79fb      	ldrb	r3, [r7, #7]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d007      	beq.n	8003a92 <find_volume+0xca>
 8003a82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003a86:	f003 0304 	and.w	r3, r3, #4
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8003a8e:	230a      	movs	r3, #10
 8003a90:	e1e6      	b.n	8003e60 <find_volume+0x498>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK (MBR) and SFD (w/o partition). */
	bsect = 0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8003a96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003a98:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a9a:	f7ff ff3f 	bl	800391c <check_fs>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8003aa4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d14b      	bne.n	8003b44 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003aac:	2300      	movs	r3, #0
 8003aae:	643b      	str	r3, [r7, #64]	; 0x40
 8003ab0:	e01f      	b.n	8003af2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8003ac0:	4413      	add	r3, r2
 8003ac2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d006      	beq.n	8003adc <find_volume+0x114>
 8003ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad0:	3308      	adds	r3, #8
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7fe fdfa 	bl	80026cc <ld_dword>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	e000      	b.n	8003ade <find_volume+0x116>
 8003adc:	2200      	movs	r2, #0
 8003ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003ae6:	440b      	add	r3, r1
 8003ae8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aee:	3301      	adds	r3, #1
 8003af0:	643b      	str	r3, [r7, #64]	; 0x40
 8003af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d9dc      	bls.n	8003ab2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8003af8:	2300      	movs	r3, #0
 8003afa:	643b      	str	r3, [r7, #64]	; 0x40
		if (i != 0) i--;
 8003afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d002      	beq.n	8003b08 <find_volume+0x140>
 8003b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b04:	3b01      	subs	r3, #1
 8003b06:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8003b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003b10:	4413      	add	r3, r2
 8003b12:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8003b16:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8003b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <find_volume+0x162>
 8003b1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003b20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003b22:	f7ff fefb 	bl	800391c <check_fs>
 8003b26:	4603      	mov	r3, r0
 8003b28:	e000      	b.n	8003b2c <find_volume+0x164>
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8003b30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d905      	bls.n	8003b44 <find_volume+0x17c>
 8003b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	643b      	str	r3, [r7, #64]	; 0x40
 8003b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b40:	2b03      	cmp	r3, #3
 8003b42:	d9e1      	bls.n	8003b08 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8003b44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d101      	bne.n	8003b50 <find_volume+0x188>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e187      	b.n	8003e60 <find_volume+0x498>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8003b50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d901      	bls.n	8003b5c <find_volume+0x194>
 8003b58:	230d      	movs	r3, #13
 8003b5a:	e181      	b.n	8003e60 <find_volume+0x498>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8003b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5e:	3330      	adds	r3, #48	; 0x30
 8003b60:	330b      	adds	r3, #11
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fe fd9a 	bl	800269c <ld_word>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b6e:	d001      	beq.n	8003b74 <find_volume+0x1ac>
 8003b70:	230d      	movs	r3, #13
 8003b72:	e175      	b.n	8003e60 <find_volume+0x498>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8003b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b76:	3330      	adds	r3, #48	; 0x30
 8003b78:	3316      	adds	r3, #22
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe fd8e 	bl	800269c <ld_word>
 8003b80:	4603      	mov	r3, r0
 8003b82:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8003b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d106      	bne.n	8003b98 <find_volume+0x1d0>
 8003b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8c:	3330      	adds	r3, #48	; 0x30
 8003b8e:	3324      	adds	r3, #36	; 0x24
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fe fd9b 	bl	80026cc <ld_dword>
 8003b96:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8003b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b9c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8003ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003baa:	789b      	ldrb	r3, [r3, #2]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d005      	beq.n	8003bbc <find_volume+0x1f4>
 8003bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb2:	789b      	ldrb	r3, [r3, #2]
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d001      	beq.n	8003bbc <find_volume+0x1f4>
 8003bb8:	230d      	movs	r3, #13
 8003bba:	e151      	b.n	8003e60 <find_volume+0x498>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8003bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bbe:	789b      	ldrb	r3, [r3, #2]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bc4:	fb02 f303 	mul.w	r3, r2, r3
 8003bc8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8003bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8003bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd8:	895b      	ldrh	r3, [r3, #10]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d008      	beq.n	8003bf0 <find_volume+0x228>
 8003bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be0:	895b      	ldrh	r3, [r3, #10]
 8003be2:	461a      	mov	r2, r3
 8003be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be6:	895b      	ldrh	r3, [r3, #10]
 8003be8:	3b01      	subs	r3, #1
 8003bea:	4013      	ands	r3, r2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <find_volume+0x22c>
 8003bf0:	230d      	movs	r3, #13
 8003bf2:	e135      	b.n	8003e60 <find_volume+0x498>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8003bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf6:	3330      	adds	r3, #48	; 0x30
 8003bf8:	3311      	adds	r3, #17
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe fd4e 	bl	800269c <ld_word>
 8003c00:	4603      	mov	r3, r0
 8003c02:	461a      	mov	r2, r3
 8003c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c06:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8003c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0a:	891b      	ldrh	r3, [r3, #8]
 8003c0c:	f003 030f 	and.w	r3, r3, #15
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <find_volume+0x252>
 8003c16:	230d      	movs	r3, #13
 8003c18:	e122      	b.n	8003e60 <find_volume+0x498>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8003c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1c:	3330      	adds	r3, #48	; 0x30
 8003c1e:	3313      	adds	r3, #19
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fe fd3b 	bl	800269c <ld_word>
 8003c26:	4603      	mov	r3, r0
 8003c28:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8003c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d106      	bne.n	8003c3e <find_volume+0x276>
 8003c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c32:	3330      	adds	r3, #48	; 0x30
 8003c34:	3320      	adds	r3, #32
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fe fd48 	bl	80026cc <ld_dword>
 8003c3c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8003c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c40:	3330      	adds	r3, #48	; 0x30
 8003c42:	330e      	adds	r3, #14
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7fe fd29 	bl	800269c <ld_word>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8003c4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <find_volume+0x290>
 8003c54:	230d      	movs	r3, #13
 8003c56:	e103      	b.n	8003e60 <find_volume+0x498>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8003c58:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c5c:	4413      	add	r3, r2
 8003c5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c60:	8912      	ldrh	r2, [r2, #8]
 8003c62:	0912      	lsrs	r2, r2, #4
 8003c64:	b292      	uxth	r2, r2
 8003c66:	4413      	add	r3, r2
 8003c68:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8003c6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d201      	bcs.n	8003c76 <find_volume+0x2ae>
 8003c72:	230d      	movs	r3, #13
 8003c74:	e0f4      	b.n	8003e60 <find_volume+0x498>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8003c76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c7e:	8952      	ldrh	r2, [r2, #10]
 8003c80:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d103      	bne.n	8003c94 <find_volume+0x2cc>
 8003c8c:	230d      	movs	r3, #13
 8003c8e:	e0e7      	b.n	8003e60 <find_volume+0x498>
 8003c90:	20000090 	.word	0x20000090
		fmt = 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	4a72      	ldr	r2, [pc, #456]	; (8003e68 <find_volume+0x4a0>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d802      	bhi.n	8003ca8 <find_volume+0x2e0>
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d802      	bhi.n	8003cb8 <find_volume+0x2f0>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	f640 72f5 	movw	r2, #4085	; 0xff5
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d802      	bhi.n	8003cc8 <find_volume+0x300>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8003cc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <find_volume+0x30c>
 8003cd0:	230d      	movs	r3, #13
 8003cd2:	e0c5      	b.n	8003e60 <find_volume+0x498>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	1c9a      	adds	r2, r3, #2
 8003cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cda:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8003cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ce0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003ce2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ce6:	441a      	add	r2, r3
 8003ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cea:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8003cec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf0:	441a      	add	r2, r3
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf4:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8003cf6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d11e      	bne.n	8003d3c <find_volume+0x374>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8003cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d00:	3330      	adds	r3, #48	; 0x30
 8003d02:	332a      	adds	r3, #42	; 0x2a
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fe fcc9 	bl	800269c <ld_word>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <find_volume+0x34c>
 8003d10:	230d      	movs	r3, #13
 8003d12:	e0a5      	b.n	8003e60 <find_volume+0x498>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8003d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d16:	891b      	ldrh	r3, [r3, #8]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <find_volume+0x358>
 8003d1c:	230d      	movs	r3, #13
 8003d1e:	e09f      	b.n	8003e60 <find_volume+0x498>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8003d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d22:	3330      	adds	r3, #48	; 0x30
 8003d24:	332c      	adds	r3, #44	; 0x2c
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fe fcd0 	bl	80026cc <ld_dword>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d30:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8003d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	647b      	str	r3, [r7, #68]	; 0x44
 8003d3a:	e01f      	b.n	8003d7c <find_volume+0x3b4>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8003d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3e:	891b      	ldrh	r3, [r3, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <find_volume+0x380>
 8003d44:	230d      	movs	r3, #13
 8003d46:	e08b      	b.n	8003e60 <find_volume+0x498>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8003d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4a:	6a1a      	ldr	r2, [r3, #32]
 8003d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d4e:	441a      	add	r2, r3
 8003d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d52:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003d54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d103      	bne.n	8003d64 <find_volume+0x39c>
 8003d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	e00a      	b.n	8003d7a <find_volume+0x3b2>
 8003d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d66:	695a      	ldr	r2, [r3, #20]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	4413      	add	r3, r2
 8003d6e:	085a      	lsrs	r2, r3, #1
 8003d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8003d7a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d7e:	699a      	ldr	r2, [r3, #24]
 8003d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d82:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003d86:	0a5b      	lsrs	r3, r3, #9
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d201      	bcs.n	8003d90 <find_volume+0x3c8>
 8003d8c:	230d      	movs	r3, #13
 8003d8e:	e067      	b.n	8003e60 <find_volume+0x498>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8003d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d92:	f04f 32ff 	mov.w	r2, #4294967295
 8003d96:	611a      	str	r2, [r3, #16]
 8003d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9a:	691a      	ldr	r2, [r3, #16]
 8003d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8003da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da2:	2280      	movs	r2, #128	; 0x80
 8003da4:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8003da6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d149      	bne.n	8003e42 <find_volume+0x47a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8003dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db0:	3330      	adds	r3, #48	; 0x30
 8003db2:	3330      	adds	r3, #48	; 0x30
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fe fc71 	bl	800269c <ld_word>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d140      	bne.n	8003e42 <find_volume+0x47a>
			&& move_window(fs, bsect + 1) == FR_OK)
 8003dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003dc8:	f7fe fded 	bl	80029a6 <move_window>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d137      	bne.n	8003e42 <find_volume+0x47a>
		{
			fs->fsi_flag = 0;
 8003dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8003dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dda:	3330      	adds	r3, #48	; 0x30
 8003ddc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7fe fc5b 	bl	800269c <ld_word>
 8003de6:	4603      	mov	r3, r0
 8003de8:	461a      	mov	r2, r3
 8003dea:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d127      	bne.n	8003e42 <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8003df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df4:	3330      	adds	r3, #48	; 0x30
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fe fc68 	bl	80026cc <ld_dword>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	4b1b      	ldr	r3, [pc, #108]	; (8003e6c <find_volume+0x4a4>)
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d11e      	bne.n	8003e42 <find_volume+0x47a>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8003e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e06:	3330      	adds	r3, #48	; 0x30
 8003e08:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fe fc5d 	bl	80026cc <ld_dword>
 8003e12:	4602      	mov	r2, r0
 8003e14:	4b16      	ldr	r3, [pc, #88]	; (8003e70 <find_volume+0x4a8>)
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d113      	bne.n	8003e42 <find_volume+0x47a>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8003e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1c:	3330      	adds	r3, #48	; 0x30
 8003e1e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fe fc52 	bl	80026cc <ld_dword>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2c:	611a      	str	r2, [r3, #16]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8003e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e30:	3330      	adds	r3, #48	; 0x30
 8003e32:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fe fc48 	bl	80026cc <ld_dword>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e40:	60da      	str	r2, [r3, #12]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8003e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e44:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003e48:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8003e4a:	4b0a      	ldr	r3, [pc, #40]	; (8003e74 <find_volume+0x4ac>)
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <find_volume+0x4ac>)
 8003e54:	801a      	strh	r2, [r3, #0]
 8003e56:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <find_volume+0x4ac>)
 8003e58:	881a      	ldrh	r2, [r3, #0]
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3758      	adds	r7, #88	; 0x58
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	0ffffff5 	.word	0x0ffffff5
 8003e6c:	41615252 	.word	0x41615252
 8003e70:	61417272 	.word	0x61417272
 8003e74:	20000094 	.word	0x20000094

08003e78 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8003e82:	2309      	movs	r3, #9
 8003e84:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01c      	beq.n	8003ec6 <validate+0x4e>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d018      	beq.n	8003ec6 <validate+0x4e>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d013      	beq.n	8003ec6 <validate+0x4e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	889a      	ldrh	r2, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	88db      	ldrh	r3, [r3, #6]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d10c      	bne.n	8003ec6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	785b      	ldrb	r3, [r3, #1]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fe f926 	bl	8002104 <disk_status>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <validate+0x4e>
			res = FR_OK;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d102      	bne.n	8003ed2 <validate+0x5a>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	e000      	b.n	8003ed4 <validate+0x5c>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	6013      	str	r3, [r2, #0]
	return res;
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8003ef6:	f107 0310 	add.w	r3, r7, #16
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7ff fcc9 	bl	8003892 <get_ldnumber>
 8003f00:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	da01      	bge.n	8003f0c <f_mount+0x28>
 8003f08:	230b      	movs	r3, #11
 8003f0a:	e025      	b.n	8003f58 <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8003f0c:	4a14      	ldr	r2, [pc, #80]	; (8003f60 <f_mount+0x7c>)
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f14:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d002      	beq.n	8003f2e <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	490b      	ldr	r1, [pc, #44]	; (8003f60 <f_mount+0x7c>)
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8003f38:	79fb      	ldrb	r3, [r7, #7]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <f_mount+0x5e>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	e00a      	b.n	8003f58 <f_mount+0x74>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8003f42:	f107 010c 	add.w	r1, r7, #12
 8003f46:	f107 0308 	add.w	r3, r7, #8
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff fd3b 	bl	80039c8 <find_volume>
 8003f52:	4603      	mov	r3, r0
 8003f54:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8003f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3720      	adds	r7, #32
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	20000090 	.word	0x20000090

08003f64 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8003f64:	b590      	push	{r4, r7, lr}
 8003f66:	b099      	sub	sp, #100	; 0x64
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <f_open+0x18>
 8003f78:	2309      	movs	r3, #9
 8003f7a:	e172      	b.n	8004262 <f_open+0x2fe>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f82:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8003f84:	79fa      	ldrb	r2, [r7, #7]
 8003f86:	f107 0114 	add.w	r1, r7, #20
 8003f8a:	f107 0308 	add.w	r3, r7, #8
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff fd1a 	bl	80039c8 <find_volume>
 8003f94:	4603      	mov	r3, r0
 8003f96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8003f9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f040 8156 	bne.w	8004250 <f_open+0x2ec>
		dj.obj.fs = fs;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	f107 0318 	add.w	r3, r7, #24
 8003fae:	4611      	mov	r1, r2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff fbff 	bl	80037b4 <follow_path>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8003fbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d107      	bne.n	8003fd4 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8003fc4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003fc8:	b25b      	sxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	da02      	bge.n	8003fd4 <f_open+0x70>
				res = FR_INVALID_NAME;
 8003fce:	2306      	movs	r3, #6
 8003fd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003fd4:	79fb      	ldrb	r3, [r7, #7]
 8003fd6:	f003 031c 	and.w	r3, r3, #28
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d073      	beq.n	80040c6 <f_open+0x162>
			if (res != FR_OK) {					/* No file, create new */
 8003fde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d010      	beq.n	8004008 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8003fe6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d107      	bne.n	8003ffe <f_open+0x9a>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8003fee:	f107 0318 	add.w	r3, r7, #24
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff fa87 	bl	8003506 <dir_register>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8003ffe:	79fb      	ldrb	r3, [r7, #7]
 8004000:	f043 0308 	orr.w	r3, r3, #8
 8004004:	71fb      	strb	r3, [r7, #7]
 8004006:	e010      	b.n	800402a <f_open+0xc6>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004008:	7fbb      	ldrb	r3, [r7, #30]
 800400a:	f003 0311 	and.w	r3, r3, #17
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <f_open+0xb6>
					res = FR_DENIED;
 8004012:	2307      	movs	r3, #7
 8004014:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004018:	e007      	b.n	800402a <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	d002      	beq.n	800402a <f_open+0xc6>
 8004024:	2308      	movs	r3, #8
 8004026:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 800402a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800402e:	2b00      	cmp	r3, #0
 8004030:	d163      	bne.n	80040fa <f_open+0x196>
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	f003 0308 	and.w	r3, r3, #8
 8004038:	2b00      	cmp	r3, #0
 800403a:	d05e      	beq.n	80040fa <f_open+0x196>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004040:	4611      	mov	r1, r2
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff f9cb 	bl	80033de <ld_clust>
 8004048:	6538      	str	r0, [r7, #80]	; 0x50
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 800404a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800404c:	f103 040e 	add.w	r4, r3, #14
 8004050:	f7fe fb1a 	bl	8002688 <get_fattime>
 8004054:	4603      	mov	r3, r0
 8004056:	4619      	mov	r1, r3
 8004058:	4620      	mov	r0, r4
 800405a:	f7fe fb75 	bl	8002748 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800405e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004060:	330b      	adds	r3, #11
 8004062:	2220      	movs	r2, #32
 8004064:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800406a:	2200      	movs	r2, #0
 800406c:	4618      	mov	r0, r3
 800406e:	f7ff f9d5 	bl	800341c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004074:	331c      	adds	r3, #28
 8004076:	2100      	movs	r1, #0
 8004078:	4618      	mov	r0, r3
 800407a:	f7fe fb65 	bl	8002748 <st_dword>
					fs->wflag = 1;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2201      	movs	r2, #1
 8004082:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8004084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004086:	2b00      	cmp	r3, #0
 8004088:	d037      	beq.n	80040fa <f_open+0x196>
						dw = fs->winsect;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408e:	64fb      	str	r3, [r7, #76]	; 0x4c
						res = remove_chain(&dj.obj, cl, 0);
 8004090:	f107 0318 	add.w	r3, r7, #24
 8004094:	2200      	movs	r2, #0
 8004096:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004098:	4618      	mov	r0, r3
 800409a:	f7fe feca 	bl	8002e32 <remove_chain>
 800409e:	4603      	mov	r3, r0
 80040a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80040a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d126      	bne.n	80040fa <f_open+0x196>
							res = move_window(fs, dw);
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7fe fc78 	bl	80029a6 <move_window>
 80040b6:	4603      	mov	r3, r0
 80040b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80040c0:	3a01      	subs	r2, #1
 80040c2:	60da      	str	r2, [r3, #12]
 80040c4:	e019      	b.n	80040fa <f_open+0x196>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 80040c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d115      	bne.n	80040fa <f_open+0x196>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 80040ce:	7fbb      	ldrb	r3, [r7, #30]
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <f_open+0x17c>
					res = FR_NO_FILE;
 80040d8:	2304      	movs	r3, #4
 80040da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80040de:	e00c      	b.n	80040fa <f_open+0x196>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 80040e0:	79fb      	ldrb	r3, [r7, #7]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d007      	beq.n	80040fa <f_open+0x196>
 80040ea:	7fbb      	ldrb	r3, [r7, #30]
 80040ec:	f003 0301 	and.w	r3, r3, #1
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <f_open+0x196>
						res = FR_DENIED;
 80040f4:	2307      	movs	r3, #7
 80040f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80040fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10f      	bne.n	8004122 <f_open+0x1be>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8004102:	79fb      	ldrb	r3, [r7, #7]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <f_open+0x1b0>
 800410c:	79fb      	ldrb	r3, [r7, #7]
 800410e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004112:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 800411c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8004122:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004126:	2b00      	cmp	r3, #0
 8004128:	f040 8092 	bne.w	8004250 <f_open+0x2ec>
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004130:	4611      	mov	r1, r2
 8004132:	4618      	mov	r0, r3
 8004134:	f7ff f953 	bl	80033de <ld_clust>
 8004138:	4602      	mov	r2, r0
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800413e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004140:	331c      	adds	r3, #28
 8004142:	4618      	mov	r0, r3
 8004144:	f7fe fac2 	bl	80026cc <ld_dword>
 8004148:	4602      	mov	r2, r0
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	60da      	str	r2, [r3, #12]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	88da      	ldrh	r2, [r3, #6]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	79fa      	ldrb	r2, [r7, #7]
 8004160:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	615a      	str	r2, [r3, #20]
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	3328      	adds	r3, #40	; 0x28
 8004178:	f44f 7200 	mov.w	r2, #512	; 0x200
 800417c:	2100      	movs	r1, #0
 800417e:	4618      	mov	r0, r3
 8004180:	f7fe fb2f 	bl	80027e2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	f003 0320 	and.w	r3, r3, #32
 800418a:	2b00      	cmp	r3, #0
 800418c:	d060      	beq.n	8004250 <f_open+0x2ec>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d05c      	beq.n	8004250 <f_open+0x2ec>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	895b      	ldrh	r3, [r3, #10]
 80041a2:	025b      	lsls	r3, r3, #9
 80041a4:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	657b      	str	r3, [r7, #84]	; 0x54
 80041b2:	e016      	b.n	80041e2 <f_open+0x27e>
					clst = get_fat(&fp->obj, clst);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fe fcae 	bl	8002b1a <get_fat>
 80041be:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80041c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d802      	bhi.n	80041cc <f_open+0x268>
 80041c6:	2302      	movs	r3, #2
 80041c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80041cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d2:	d102      	bne.n	80041da <f_open+0x276>
 80041d4:	2301      	movs	r3, #1
 80041d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80041da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	657b      	str	r3, [r7, #84]	; 0x54
 80041e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d103      	bne.n	80041f2 <f_open+0x28e>
 80041ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d8e0      	bhi.n	80041b4 <f_open+0x250>
				}
				fp->clust = clst;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041f6:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80041f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d127      	bne.n	8004250 <f_open+0x2ec>
 8004200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004206:	2b00      	cmp	r3, #0
 8004208:	d022      	beq.n	8004250 <f_open+0x2ec>
					if ((sc = clst2sect(fs, clst)) == 0) {
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800420e:	4618      	mov	r0, r3
 8004210:	f7fe fc64 	bl	8002adc <clst2sect>
 8004214:	6478      	str	r0, [r7, #68]	; 0x44
 8004216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004218:	2b00      	cmp	r3, #0
 800421a:	d103      	bne.n	8004224 <f_open+0x2c0>
						res = FR_INT_ERR;
 800421c:	2302      	movs	r3, #2
 800421e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004222:	e015      	b.n	8004250 <f_open+0x2ec>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004226:	0a5a      	lsrs	r2, r3, #9
 8004228:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800422a:	441a      	add	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	61da      	str	r2, [r3, #28]
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	7858      	ldrb	r0, [r3, #1]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	69da      	ldr	r2, [r3, #28]
 800423e:	2301      	movs	r3, #1
 8004240:	f7fd ff76 	bl	8002130 <disk_read>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <f_open+0x2ec>
 800424a:	2301      	movs	r3, #1
 800424c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004250:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <f_open+0x2fa>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800425e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8004262:	4618      	mov	r0, r3
 8004264:	3764      	adds	r7, #100	; 0x64
 8004266:	46bd      	mov	sp, r7
 8004268:	bd90      	pop	{r4, r7, pc}

0800426a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b08c      	sub	sp, #48	; 0x30
 800426e:	af00      	add	r7, sp, #0
 8004270:	60f8      	str	r0, [r7, #12]
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	607a      	str	r2, [r7, #4]
 8004276:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f107 0210 	add.w	r2, r7, #16
 8004288:	4611      	mov	r1, r2
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff fdf4 	bl	8003e78 <validate>
 8004290:	4603      	mov	r3, r0
 8004292:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8004296:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800429a:	2b00      	cmp	r3, #0
 800429c:	d107      	bne.n	80042ae <f_write+0x44>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	7c5b      	ldrb	r3, [r3, #17]
 80042a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80042a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <f_write+0x4a>
 80042ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80042b2:	e13f      	b.n	8004534 <f_write+0x2ca>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	7c1b      	ldrb	r3, [r3, #16]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <f_write+0x5a>
 80042c0:	2307      	movs	r3, #7
 80042c2:	e137      	b.n	8004534 <f_write+0x2ca>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	695a      	ldr	r2, [r3, #20]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	441a      	add	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	f080 8121 	bcs.w	8004518 <f_write+0x2ae>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	43db      	mvns	r3, r3
 80042dc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80042de:	e11b      	b.n	8004518 <f_write+0x2ae>
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f040 80d7 	bne.w	800449c <f_write+0x232>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	0a5b      	lsrs	r3, r3, #9
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	8952      	ldrh	r2, [r2, #10]
 80042f8:	3a01      	subs	r2, #1
 80042fa:	4013      	ands	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d137      	bne.n	8004374 <f_write+0x10a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10c      	bne.n	8004326 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10e      	bne.n	8004336 <f_write+0xcc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2100      	movs	r1, #0
 800431c:	4618      	mov	r0, r3
 800431e:	f7fe fded 	bl	8002efc <create_chain>
 8004322:	62b8      	str	r0, [r7, #40]	; 0x28
 8004324:	e007      	b.n	8004336 <f_write+0xcc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	4619      	mov	r1, r3
 800432e:	4610      	mov	r0, r2
 8004330:	f7fe fde4 	bl	8002efc <create_chain>
 8004334:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 80f2 	beq.w	8004522 <f_write+0x2b8>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800433e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004340:	2b01      	cmp	r3, #1
 8004342:	d104      	bne.n	800434e <f_write+0xe4>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2202      	movs	r2, #2
 8004348:	745a      	strb	r2, [r3, #17]
 800434a:	2302      	movs	r3, #2
 800434c:	e0f2      	b.n	8004534 <f_write+0x2ca>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800434e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004354:	d104      	bne.n	8004360 <f_write+0xf6>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2201      	movs	r2, #1
 800435a:	745a      	strb	r2, [r3, #17]
 800435c:	2301      	movs	r3, #1
 800435e:	e0e9      	b.n	8004534 <f_write+0x2ca>
				fp->clust = clst;			/* Update current cluster */
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004364:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d102      	bne.n	8004374 <f_write+0x10a>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004372:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	7c1b      	ldrb	r3, [r3, #16]
 8004378:	b25b      	sxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	da18      	bge.n	80043b0 <f_write+0x146>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	7858      	ldrb	r0, [r3, #1]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	69da      	ldr	r2, [r3, #28]
 800438c:	2301      	movs	r3, #1
 800438e:	f7fd ff39 	bl	8002204 <disk_write>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d004      	beq.n	80043a2 <f_write+0x138>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2201      	movs	r2, #1
 800439c:	745a      	strb	r2, [r3, #17]
 800439e:	2301      	movs	r3, #1
 80043a0:	e0c8      	b.n	8004534 <f_write+0x2ca>
				fp->flag &= (BYTE)~FA_DIRTY;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	7c1b      	ldrb	r3, [r3, #16]
 80043a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	4619      	mov	r1, r3
 80043b8:	4610      	mov	r0, r2
 80043ba:	f7fe fb8f 	bl	8002adc <clst2sect>
 80043be:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d104      	bne.n	80043d0 <f_write+0x166>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2202      	movs	r2, #2
 80043ca:	745a      	strb	r2, [r3, #17]
 80043cc:	2302      	movs	r3, #2
 80043ce:	e0b1      	b.n	8004534 <f_write+0x2ca>
			sect += csect;
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	4413      	add	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	0a5b      	lsrs	r3, r3, #9
 80043dc:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d03c      	beq.n	800445e <f_write+0x1f4>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	4413      	add	r3, r2
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	8952      	ldrh	r2, [r2, #10]
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d905      	bls.n	80043fe <f_write+0x194>
					cc = fs->csize - csect;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	895b      	ldrh	r3, [r3, #10]
 80043f6:	461a      	mov	r2, r3
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	7858      	ldrb	r0, [r3, #1]
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	69f9      	ldr	r1, [r7, #28]
 8004408:	f7fd fefc 	bl	8002204 <disk_write>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d004      	beq.n	800441c <f_write+0x1b2>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2201      	movs	r2, #1
 8004416:	745a      	strb	r2, [r3, #17]
 8004418:	2301      	movs	r3, #1
 800441a:	e08b      	b.n	8004534 <f_write+0x2ca>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	69da      	ldr	r2, [r3, #28]
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	6a3a      	ldr	r2, [r7, #32]
 8004426:	429a      	cmp	r2, r3
 8004428:	d915      	bls.n	8004456 <f_write+0x1ec>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	69da      	ldr	r2, [r3, #28]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	025b      	lsls	r3, r3, #9
 800443a:	69fa      	ldr	r2, [r7, #28]
 800443c:	4413      	add	r3, r2
 800443e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004442:	4619      	mov	r1, r3
 8004444:	f7fe f9ac 	bl	80027a0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	7c1b      	ldrb	r3, [r3, #16]
 800444c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004450:	b2da      	uxtb	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	025b      	lsls	r3, r3, #9
 800445a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800445c:	e03f      	b.n	80044de <f_write+0x274>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	429a      	cmp	r2, r3
 8004466:	d016      	beq.n	8004496 <f_write+0x22c>
				fp->fptr < fp->obj.objsize &&
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	695a      	ldr	r2, [r3, #20]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004470:	429a      	cmp	r2, r3
 8004472:	d210      	bcs.n	8004496 <f_write+0x22c>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	7858      	ldrb	r0, [r3, #1]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800447e:	2301      	movs	r3, #1
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	f7fd fe55 	bl	8002130 <disk_read>
 8004486:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8004488:	2b00      	cmp	r3, #0
 800448a:	d004      	beq.n	8004496 <f_write+0x22c>
					ABORT(fs, FR_DISK_ERR);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2201      	movs	r2, #1
 8004490:	745a      	strb	r2, [r3, #17]
 8004492:	2301      	movs	r3, #1
 8004494:	e04e      	b.n	8004534 <f_write+0x2ca>
			}
#endif
			fp->sect = sect;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044a4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80044aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d901      	bls.n	80044b6 <f_write+0x24c>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044c4:	4413      	add	r3, r2
 80044c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c8:	69f9      	ldr	r1, [r7, #28]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fe f968 	bl	80027a0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	7c1b      	ldrb	r3, [r3, #16]
 80044d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	741a      	strb	r2, [r3, #16]
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	607b      	str	r3, [r7, #4]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	441a      	add	r2, r3
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	4413      	add	r3, r2
 80044f8:	61fb      	str	r3, [r7, #28]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	695a      	ldr	r2, [r3, #20]
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	441a      	add	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	615a      	str	r2, [r3, #20]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	429a      	cmp	r2, r3
 8004510:	bf38      	it	cc
 8004512:	461a      	movcc	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	60da      	str	r2, [r3, #12]
	for ( ;  btw;							/* Repeat until all data written */
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	f47f aee0 	bne.w	80042e0 <f_write+0x76>
 8004520:	e000      	b.n	8004524 <f_write+0x2ba>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004522:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	7c1b      	ldrb	r3, [r3, #16]
 8004528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800452c:	b2da      	uxtb	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3730      	adds	r7, #48	; 0x30
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f107 0208 	add.w	r2, r7, #8
 800454a:	4611      	mov	r1, r2
 800454c:	4618      	mov	r0, r3
 800454e:	f7ff fc93 	bl	8003e78 <validate>
 8004552:	4603      	mov	r3, r0
 8004554:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004556:	7dfb      	ldrb	r3, [r7, #23]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d168      	bne.n	800462e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	7c1b      	ldrb	r3, [r3, #16]
 8004560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004564:	2b00      	cmp	r3, #0
 8004566:	d062      	beq.n	800462e <f_sync+0xf2>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	7c1b      	ldrb	r3, [r3, #16]
 800456c:	b25b      	sxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	da15      	bge.n	800459e <f_sync+0x62>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	7858      	ldrb	r0, [r3, #1]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	69da      	ldr	r2, [r3, #28]
 8004580:	2301      	movs	r3, #1
 8004582:	f7fd fe3f 	bl	8002204 <disk_write>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <f_sync+0x54>
 800458c:	2301      	movs	r3, #1
 800458e:	e04f      	b.n	8004630 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	7c1b      	ldrb	r3, [r3, #16]
 8004594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004598:	b2da      	uxtb	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800459e:	f7fe f873 	bl	8002688 <get_fattime>
 80045a2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	4619      	mov	r1, r3
 80045ac:	4610      	mov	r0, r2
 80045ae:	f7fe f9fa 	bl	80029a6 <move_window>
 80045b2:	4603      	mov	r3, r0
 80045b4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80045b6:	7dfb      	ldrb	r3, [r7, #23]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d138      	bne.n	800462e <f_sync+0xf2>
					dir = fp->dir_ptr;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	330b      	adds	r3, #11
 80045c6:	781a      	ldrb	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	330b      	adds	r3, #11
 80045cc:	f042 0220 	orr.w	r2, r2, #32
 80045d0:	b2d2      	uxtb	r2, r2
 80045d2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	461a      	mov	r2, r3
 80045de:	68f9      	ldr	r1, [r7, #12]
 80045e0:	f7fe ff1c 	bl	800341c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f103 021c 	add.w	r2, r3, #28
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	4619      	mov	r1, r3
 80045f0:	4610      	mov	r0, r2
 80045f2:	f7fe f8a9 	bl	8002748 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3316      	adds	r3, #22
 80045fa:	6939      	ldr	r1, [r7, #16]
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fe f8a3 	bl	8002748 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3312      	adds	r3, #18
 8004606:	2100      	movs	r1, #0
 8004608:	4618      	mov	r0, r3
 800460a:	f7fe f882 	bl	8002712 <st_word>
					fs->wflag = 1;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	2201      	movs	r2, #1
 8004612:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	4618      	mov	r0, r3
 8004618:	f7fe f9f2 	bl	8002a00 <sync_fs>
 800461c:	4603      	mov	r3, r0
 800461e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	7c1b      	ldrb	r3, [r3, #16]
 8004624:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004628:	b2da      	uxtb	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800462e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7ff ff7b 	bl	800453c <f_sync>
 8004646:	4603      	mov	r3, r0
 8004648:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800464a:	7bfb      	ldrb	r3, [r7, #15]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10e      	bne.n	800466e <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f107 0208 	add.w	r2, r7, #8
 8004656:	4611      	mov	r1, r2
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff fc0d 	bl	8003e78 <validate>
 800465e:	4603      	mov	r3, r0
 8004660:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004662:	7bfb      	ldrb	r3, [r7, #15]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d102      	bne.n	800466e <f_close+0x36>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800466e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <f_opendir+0x14>
 8004688:	2309      	movs	r3, #9
 800468a:	e04a      	b.n	8004722 <f_opendir+0xaa>

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800468c:	f107 0108 	add.w	r1, r7, #8
 8004690:	463b      	mov	r3, r7
 8004692:	2200      	movs	r2, #0
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff f997 	bl	80039c8 <find_volume>
 800469a:	4603      	mov	r3, r0
 800469c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d137      	bne.n	8004714 <f_opendir+0x9c>
		dp->obj.fs = fs;
 80046a4:	68ba      	ldr	r2, [r7, #8]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	4619      	mov	r1, r3
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff f880 	bl	80037b4 <follow_path>
 80046b4:	4603      	mov	r3, r0
 80046b6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {						/* Follow completed */
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d125      	bne.n	800470a <f_opendir+0x92>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80046c4:	b25b      	sxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	db12      	blt.n	80046f0 <f_opendir+0x78>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	799b      	ldrb	r3, [r3, #6]
 80046ce:	f003 0310 	and.w	r3, r3, #16
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <f_opendir+0x74>
						dp->obj.c_ofs = dp->blk_ofs;
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
					} else
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	4619      	mov	r1, r3
 80046de:	4610      	mov	r0, r2
 80046e0:	f7fe fe7d 	bl	80033de <ld_clust>
 80046e4:	4602      	mov	r2, r0
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	609a      	str	r2, [r3, #8]
 80046ea:	e001      	b.n	80046f0 <f_opendir+0x78>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80046ec:	2305      	movs	r3, #5
 80046ee:	73fb      	strb	r3, [r7, #15]
				}
			}
			if (res == FR_OK) {
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d109      	bne.n	800470a <f_opendir+0x92>
				dp->obj.id = fs->id;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	88da      	ldrh	r2, [r3, #6]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80046fe:	2100      	movs	r1, #0
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7fe fd14 	bl	800312e <dir_sdi>
 8004706:	4603      	mov	r3, r0
 8004708:	73fb      	strb	r3, [r7, #15]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800470a:	7bfb      	ldrb	r3, [r7, #15]
 800470c:	2b04      	cmp	r3, #4
 800470e:	d101      	bne.n	8004714 <f_opendir+0x9c>
 8004710:	2305      	movs	r3, #5
 8004712:	73fb      	strb	r3, [r7, #15]
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 8004714:	7bfb      	ldrb	r3, [r7, #15]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <f_opendir+0xa8>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8004720:	7bfb      	ldrb	r3, [r7, #15]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b08e      	sub	sp, #56	; 0x38
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8004734:	f107 0108 	add.w	r1, r7, #8
 8004738:	1d3b      	adds	r3, r7, #4
 800473a:	2200      	movs	r2, #0
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff f943 	bl	80039c8 <find_volume>
 8004742:	4603      	mov	r3, r0
 8004744:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res == FR_OK) {
 8004748:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800474c:	2b00      	cmp	r3, #0
 800474e:	d11f      	bne.n	8004790 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	f107 0308 	add.w	r3, r7, #8
 8004756:	4611      	mov	r1, r2
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff f82b 	bl	80037b4 <follow_path>
 800475e:	4603      	mov	r3, r0
 8004760:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (res == FR_OK) {				/* Follow completed */
 8004764:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004768:	2b00      	cmp	r3, #0
 800476a:	d111      	bne.n	8004790 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800476c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004770:	b25b      	sxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	da03      	bge.n	800477e <f_stat+0x54>
				res = FR_INVALID_NAME;
 8004776:	2306      	movs	r3, #6
 8004778:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800477c:	e008      	b.n	8004790 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d005      	beq.n	8004790 <f_stat+0x66>
 8004784:	f107 0308 	add.w	r3, r7, #8
 8004788:	6839      	ldr	r1, [r7, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f7fe feed 	bl	800356a <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8004790:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8004794:	4618      	mov	r0, r3
 8004796:	3738      	adds	r7, #56	; 0x38
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b096      	sub	sp, #88	; 0x58
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
 80047a4:	f107 0108 	add.w	r1, r7, #8
 80047a8:	1d3b      	adds	r3, r7, #4
 80047aa:	2202      	movs	r2, #2
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7ff f90b 	bl	80039c8 <find_volume>
 80047b2:	4603      	mov	r3, r0
 80047b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (res == FR_OK) {
 80047b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f040 80b4 	bne.w	800492a <f_mkdir+0x18e>
		dj.obj.fs = fs;
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	61fb      	str	r3, [r7, #28]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	f107 031c 	add.w	r3, r7, #28
 80047cc:	4611      	mov	r1, r2
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fe fff0 	bl	80037b4 <follow_path>
 80047d4:	4603      	mov	r3, r0
 80047d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
 80047da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d102      	bne.n	80047e8 <f_mkdir+0x4c>
 80047e2:	2308      	movs	r3, #8
 80047e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
 80047e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	f040 809c 	bne.w	800492a <f_mkdir+0x18e>
			sobj.fs = fs;						/* New object id to create a new chain */
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	60fb      	str	r3, [r7, #12]
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
 80047f6:	f107 030c 	add.w	r3, r7, #12
 80047fa:	2100      	movs	r1, #0
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fe fb7d 	bl	8002efc <create_chain>
 8004802:	6538      	str	r0, [r7, #80]	; 0x50
			res = FR_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
 800480a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800480c:	2b00      	cmp	r3, #0
 800480e:	d102      	bne.n	8004816 <f_mkdir+0x7a>
 8004810:	2307      	movs	r3, #7
 8004812:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
 8004816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004818:	2b01      	cmp	r3, #1
 800481a:	d102      	bne.n	8004822 <f_mkdir+0x86>
 800481c:	2302      	movs	r3, #2
 800481e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
 8004822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004828:	d102      	bne.n	8004830 <f_mkdir+0x94>
 800482a:	2301      	movs	r3, #1
 800482c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8004830:	f7fd ff2a 	bl	8002688 <get_fattime>
 8004834:	64f8      	str	r0, [r7, #76]	; 0x4c
			if (res == FR_OK) {
 8004836:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800483a:	2b00      	cmp	r3, #0
 800483c:	d14b      	bne.n	80048d6 <f_mkdir+0x13a>
				res = dir_clear(fs, dcl);		/* Clean up the new table */
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004842:	4618      	mov	r0, r3
 8004844:	f7fe fc2b 	bl	800309e <dir_clear>
 8004848:	4603      	mov	r3, r0
 800484a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				if (res == FR_OK) {
 800484e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004852:	2b00      	cmp	r3, #0
 8004854:	d13f      	bne.n	80048d6 <f_mkdir+0x13a>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	3330      	adds	r3, #48	; 0x30
 800485a:	220b      	movs	r2, #11
 800485c:	2120      	movs	r1, #32
 800485e:	4618      	mov	r0, r3
 8004860:	f7fd ffbf 	bl	80027e2 <mem_set>
						fs->win[DIR_Name] = '.';
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	222e      	movs	r2, #46	; 0x2e
 8004868:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						fs->win[DIR_Attr] = AM_DIR;
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2210      	movs	r2, #16
 8004870:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
						st_dword(fs->win + DIR_ModTime, tm);
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	3330      	adds	r3, #48	; 0x30
 8004878:	3316      	adds	r3, #22
 800487a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800487c:	4618      	mov	r0, r3
 800487e:	f7fd ff63 	bl	8002748 <st_dword>
						st_clust(fs, fs->win, dcl);
 8004882:	68b8      	ldr	r0, [r7, #8]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	3330      	adds	r3, #48	; 0x30
 8004888:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800488a:	4619      	mov	r1, r3
 800488c:	f7fe fdc6 	bl	800341c <st_clust>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	3330      	adds	r3, #48	; 0x30
 8004894:	f103 0020 	add.w	r0, r3, #32
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	3330      	adds	r3, #48	; 0x30
 800489c:	2220      	movs	r2, #32
 800489e:	4619      	mov	r1, r3
 80048a0:	f7fd ff7e 	bl	80027a0 <mem_cpy>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	222e      	movs	r2, #46	; 0x2e
 80048a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	64bb      	str	r3, [r7, #72]	; 0x48
						st_clust(fs, fs->win + SZDIRE, pcl);
 80048b0:	68b8      	ldr	r0, [r7, #8]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	3330      	adds	r3, #48	; 0x30
 80048b6:	3320      	adds	r3, #32
 80048b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048ba:	4619      	mov	r1, r3
 80048bc:	f7fe fdae 	bl	800341c <st_clust>
						fs->wflag = 1;
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2201      	movs	r2, #1
 80048c4:	70da      	strb	r2, [r3, #3]
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
 80048c6:	f107 031c 	add.w	r3, r7, #28
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fe fe1b 	bl	8003506 <dir_register>
 80048d0:	4603      	mov	r3, r0
 80048d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				}
			}
			if (res == FR_OK) {
 80048d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d11e      	bne.n	800491c <f_mkdir+0x180>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
 80048de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e0:	3316      	adds	r3, #22
 80048e2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7fd ff2f 	bl	8002748 <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80048ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fe fd93 	bl	800341c <st_clust>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
 80048f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f8:	330b      	adds	r3, #11
 80048fa:	2210      	movs	r2, #16
 80048fc:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2201      	movs	r2, #1
 8004902:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8004904:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10e      	bne.n	800492a <f_mkdir+0x18e>
					res = sync_fs(fs);
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	4618      	mov	r0, r3
 8004910:	f7fe f876 	bl	8002a00 <sync_fs>
 8004914:	4603      	mov	r3, r0
 8004916:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800491a:	e006      	b.n	800492a <f_mkdir+0x18e>
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
 800491c:	f107 030c 	add.w	r3, r7, #12
 8004920:	2200      	movs	r2, #0
 8004922:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004924:	4618      	mov	r0, r3
 8004926:	f7fe fa84 	bl	8002e32 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800492a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800492e:	4618      	mov	r0, r3
 8004930:	3758      	adds	r7, #88	; 0x58
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004938:	b590      	push	{r4, r7, lr}
 800493a:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 800493e:	af88      	add	r7, sp, #544	; 0x220
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004940:	f7fb fe16 	bl	8000570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004944:	f000 f8d2 	bl	8004aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004948:	f000 f970 	bl	8004c2c <MX_GPIO_Init>
  MX_SPI1_Init();
 800494c:	f000 f938 	bl	8004bc0 <MX_SPI1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  	fresult = f_mount(&FatFs, "", 0);
 8004950:	2200      	movs	r2, #0
 8004952:	4957      	ldr	r1, [pc, #348]	; (8004ab0 <main+0x178>)
 8004954:	4857      	ldr	r0, [pc, #348]	; (8004ab4 <main+0x17c>)
 8004956:	f7ff fac5 	bl	8003ee4 <f_mount>
 800495a:	4603      	mov	r3, r0
 800495c:	461a      	mov	r2, r3
 800495e:	4b56      	ldr	r3, [pc, #344]	; (8004ab8 <main+0x180>)
 8004960:	701a      	strb	r2, [r3, #0]
	  	fresult = f_open(&file, "test.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8004962:	2212      	movs	r2, #18
 8004964:	4955      	ldr	r1, [pc, #340]	; (8004abc <main+0x184>)
 8004966:	4856      	ldr	r0, [pc, #344]	; (8004ac0 <main+0x188>)
 8004968:	f7ff fafc 	bl	8003f64 <f_open>
 800496c:	4603      	mov	r3, r0
 800496e:	461a      	mov	r2, r3
 8004970:	4b51      	ldr	r3, [pc, #324]	; (8004ab8 <main+0x180>)
 8004972:	701a      	strb	r2, [r3, #0]
	  	fresult = f_write(&file, "test", 16, &bytes_written);
 8004974:	4b53      	ldr	r3, [pc, #332]	; (8004ac4 <main+0x18c>)
 8004976:	2210      	movs	r2, #16
 8004978:	4953      	ldr	r1, [pc, #332]	; (8004ac8 <main+0x190>)
 800497a:	4851      	ldr	r0, [pc, #324]	; (8004ac0 <main+0x188>)
 800497c:	f7ff fc75 	bl	800426a <f_write>
 8004980:	4603      	mov	r3, r0
 8004982:	461a      	mov	r2, r3
 8004984:	4b4c      	ldr	r3, [pc, #304]	; (8004ab8 <main+0x180>)
 8004986:	701a      	strb	r2, [r3, #0]
	  	fresult = f_close (&file);
 8004988:	484d      	ldr	r0, [pc, #308]	; (8004ac0 <main+0x188>)
 800498a:	f7ff fe55 	bl	8004638 <f_close>
 800498e:	4603      	mov	r3, r0
 8004990:	461a      	mov	r2, r3
 8004992:	4b49      	ldr	r3, [pc, #292]	; (8004ab8 <main+0x180>)
 8004994:	701a      	strb	r2, [r3, #0]

	  	fresult = f_mkdir("katalog1");
 8004996:	484d      	ldr	r0, [pc, #308]	; (8004acc <main+0x194>)
 8004998:	f7ff ff00 	bl	800479c <f_mkdir>
 800499c:	4603      	mov	r3, r0
 800499e:	461a      	mov	r2, r3
 80049a0:	4b45      	ldr	r3, [pc, #276]	; (8004ab8 <main+0x180>)
 80049a2:	701a      	strb	r2, [r3, #0]
	  	fresult = f_opendir(&dir,"katalog1");
 80049a4:	4949      	ldr	r1, [pc, #292]	; (8004acc <main+0x194>)
 80049a6:	484a      	ldr	r0, [pc, #296]	; (8004ad0 <main+0x198>)
 80049a8:	f7ff fe66 	bl	8004678 <f_opendir>
 80049ac:	4603      	mov	r3, r0
 80049ae:	461a      	mov	r2, r3
 80049b0:	4b41      	ldr	r3, [pc, #260]	; (8004ab8 <main+0x180>)
 80049b2:	701a      	strb	r2, [r3, #0]
	  	fresult = f_stat("test.txt", &fileInfo);
 80049b4:	4947      	ldr	r1, [pc, #284]	; (8004ad4 <main+0x19c>)
 80049b6:	4841      	ldr	r0, [pc, #260]	; (8004abc <main+0x184>)
 80049b8:	f7ff feb7 	bl	800472a <f_stat>
 80049bc:	4603      	mov	r3, r0
 80049be:	461a      	mov	r2, r3
 80049c0:	4b3d      	ldr	r3, [pc, #244]	; (8004ab8 <main+0x180>)
 80049c2:	701a      	strb	r2, [r3, #0]
	  	switch (fresult) {
 80049c4:	4b3c      	ldr	r3, [pc, #240]	; (8004ab8 <main+0x180>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <main+0x9a>
 80049cc:	2b04      	cmp	r3, #4
 80049ce:	d05c      	beq.n	8004a8a <main+0x152>
 80049d0:	e05f      	b.n	8004a92 <main+0x15a>

	  	    case FR_OK:
	  	        printf("Size: %lu\n", fileInfo.fsize);
 80049d2:	4b40      	ldr	r3, [pc, #256]	; (8004ad4 <main+0x19c>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4619      	mov	r1, r3
 80049d8:	483f      	ldr	r0, [pc, #252]	; (8004ad8 <main+0x1a0>)
 80049da:	f000 fb39 	bl	8005050 <iprintf>
	  	        printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
	  	               (fileInfo.fdate >> 9) + 1980, fileInfo.fdate >> 5 & 15, fileInfo.fdate & 31,
 80049de:	4b3d      	ldr	r3, [pc, #244]	; (8004ad4 <main+0x19c>)
 80049e0:	889b      	ldrh	r3, [r3, #4]
 80049e2:	0a5b      	lsrs	r3, r3, #9
 80049e4:	b29b      	uxth	r3, r3
	  	        printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 80049e6:	f203 71bc 	addw	r1, r3, #1980	; 0x7bc
	  	               (fileInfo.fdate >> 9) + 1980, fileInfo.fdate >> 5 & 15, fileInfo.fdate & 31,
 80049ea:	4b3a      	ldr	r3, [pc, #232]	; (8004ad4 <main+0x19c>)
 80049ec:	889b      	ldrh	r3, [r3, #4]
	  	        printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 80049ee:	095b      	lsrs	r3, r3, #5
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	f003 020f 	and.w	r2, r3, #15
	  	               (fileInfo.fdate >> 9) + 1980, fileInfo.fdate >> 5 & 15, fileInfo.fdate & 31,
 80049f6:	4b37      	ldr	r3, [pc, #220]	; (8004ad4 <main+0x19c>)
 80049f8:	889b      	ldrh	r3, [r3, #4]
	  	        printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 80049fa:	f003 001f 	and.w	r0, r3, #31
					   fileInfo.ftime >> 11, fileInfo.ftime >> 5 & 63);
 80049fe:	4b35      	ldr	r3, [pc, #212]	; (8004ad4 <main+0x19c>)
 8004a00:	88db      	ldrh	r3, [r3, #6]
	  	        printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 8004a02:	0adb      	lsrs	r3, r3, #11
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	461c      	mov	r4, r3
					   fileInfo.ftime >> 11, fileInfo.ftime >> 5 & 63);
 8004a08:	4b32      	ldr	r3, [pc, #200]	; (8004ad4 <main+0x19c>)
 8004a0a:	88db      	ldrh	r3, [r3, #6]
	  	        printf("Timestamp: %u/%02u/%02u, %02u:%02u\n",
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a14:	9301      	str	r3, [sp, #4]
 8004a16:	9400      	str	r4, [sp, #0]
 8004a18:	4603      	mov	r3, r0
 8004a1a:	4830      	ldr	r0, [pc, #192]	; (8004adc <main+0x1a4>)
 8004a1c:	f000 fb18 	bl	8005050 <iprintf>
	  	        printf("Attributes: %c%c%c%c%c\n",
	  	               (fileInfo.fattrib & AM_DIR) ? 'D' : '-',
 8004a20:	4b2c      	ldr	r3, [pc, #176]	; (8004ad4 <main+0x19c>)
 8004a22:	7a1b      	ldrb	r3, [r3, #8]
 8004a24:	f003 0310 	and.w	r3, r3, #16
	  	        printf("Attributes: %c%c%c%c%c\n",
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <main+0xf8>
 8004a2c:	2144      	movs	r1, #68	; 0x44
 8004a2e:	e000      	b.n	8004a32 <main+0xfa>
 8004a30:	212d      	movs	r1, #45	; 0x2d
	  	               (fileInfo.fattrib & AM_RDO) ? 'R' : '-',
 8004a32:	4b28      	ldr	r3, [pc, #160]	; (8004ad4 <main+0x19c>)
 8004a34:	7a1b      	ldrb	r3, [r3, #8]
 8004a36:	f003 0301 	and.w	r3, r3, #1
	  	        printf("Attributes: %c%c%c%c%c\n",
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <main+0x10a>
 8004a3e:	2052      	movs	r0, #82	; 0x52
 8004a40:	e000      	b.n	8004a44 <main+0x10c>
 8004a42:	202d      	movs	r0, #45	; 0x2d
	  	               (fileInfo.fattrib & AM_HID) ? 'H' : '-',
 8004a44:	4b23      	ldr	r3, [pc, #140]	; (8004ad4 <main+0x19c>)
 8004a46:	7a1b      	ldrb	r3, [r3, #8]
 8004a48:	f003 0302 	and.w	r3, r3, #2
	  	        printf("Attributes: %c%c%c%c%c\n",
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <main+0x11c>
 8004a50:	2448      	movs	r4, #72	; 0x48
 8004a52:	e000      	b.n	8004a56 <main+0x11e>
 8004a54:	242d      	movs	r4, #45	; 0x2d
	  	               (fileInfo.fattrib & AM_SYS) ? 'S' : '-',
 8004a56:	4b1f      	ldr	r3, [pc, #124]	; (8004ad4 <main+0x19c>)
 8004a58:	7a1b      	ldrb	r3, [r3, #8]
 8004a5a:	f003 0304 	and.w	r3, r3, #4
	  	        printf("Attributes: %c%c%c%c%c\n",
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <main+0x12e>
 8004a62:	2353      	movs	r3, #83	; 0x53
 8004a64:	e000      	b.n	8004a68 <main+0x130>
 8004a66:	232d      	movs	r3, #45	; 0x2d
	  	               (fileInfo.fattrib & AM_ARC) ? 'A' : '-');
 8004a68:	4a1a      	ldr	r2, [pc, #104]	; (8004ad4 <main+0x19c>)
 8004a6a:	7a12      	ldrb	r2, [r2, #8]
 8004a6c:	f002 0220 	and.w	r2, r2, #32
	  	        printf("Attributes: %c%c%c%c%c\n",
 8004a70:	2a00      	cmp	r2, #0
 8004a72:	d001      	beq.n	8004a78 <main+0x140>
 8004a74:	2241      	movs	r2, #65	; 0x41
 8004a76:	e000      	b.n	8004a7a <main+0x142>
 8004a78:	222d      	movs	r2, #45	; 0x2d
 8004a7a:	9201      	str	r2, [sp, #4]
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	4623      	mov	r3, r4
 8004a80:	4602      	mov	r2, r0
 8004a82:	4817      	ldr	r0, [pc, #92]	; (8004ae0 <main+0x1a8>)
 8004a84:	f000 fae4 	bl	8005050 <iprintf>
	  	        break;
 8004a88:	e011      	b.n	8004aae <main+0x176>

	  	    case FR_NO_FILE:
	  	        printf("It is not exist.\n");
 8004a8a:	4816      	ldr	r0, [pc, #88]	; (8004ae4 <main+0x1ac>)
 8004a8c:	f000 fb54 	bl	8005138 <puts>
	  	        break;
 8004a90:	e00d      	b.n	8004aae <main+0x176>

	  	    default:
	  	        printf("An error occured. (%d)\n", file);
 8004a92:	4c0b      	ldr	r4, [pc, #44]	; (8004ac0 <main+0x188>)
 8004a94:	4668      	mov	r0, sp
 8004a96:	f104 030c 	add.w	r3, r4, #12
 8004a9a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	f000 fac2 	bl	8005028 <memcpy>
 8004aa4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004aa8:	480f      	ldr	r0, [pc, #60]	; (8004ae8 <main+0x1b0>)
 8004aaa:	f000 fad1 	bl	8005050 <iprintf>
	  	fresult = f_mount(&FatFs, "", 0);
 8004aae:	e74f      	b.n	8004950 <main+0x18>
 8004ab0:	08005f14 	.word	0x08005f14
 8004ab4:	20000098 	.word	0x20000098
 8004ab8:	2000064c 	.word	0x2000064c
 8004abc:	08005f18 	.word	0x08005f18
 8004ac0:	200002f4 	.word	0x200002f4
 8004ac4:	200006a8 	.word	0x200006a8
 8004ac8:	08005f24 	.word	0x08005f24
 8004acc:	08005f2c 	.word	0x08005f2c
 8004ad0:	20000620 	.word	0x20000620
 8004ad4:	200002dc 	.word	0x200002dc
 8004ad8:	08005f38 	.word	0x08005f38
 8004adc:	08005f44 	.word	0x08005f44
 8004ae0:	08005f68 	.word	0x08005f68
 8004ae4:	08005f80 	.word	0x08005f80
 8004ae8:	08005f94 	.word	0x08005f94

08004aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b094      	sub	sp, #80	; 0x50
 8004af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004af2:	f107 0320 	add.w	r3, r7, #32
 8004af6:	2230      	movs	r2, #48	; 0x30
 8004af8:	2100      	movs	r1, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 fa9f 	bl	800503e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b00:	f107 030c 	add.w	r3, r7, #12
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	605a      	str	r2, [r3, #4]
 8004b0a:	609a      	str	r2, [r3, #8]
 8004b0c:	60da      	str	r2, [r3, #12]
 8004b0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b10:	2300      	movs	r3, #0
 8004b12:	60bb      	str	r3, [r7, #8]
 8004b14:	4b28      	ldr	r3, [pc, #160]	; (8004bb8 <SystemClock_Config+0xcc>)
 8004b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b18:	4a27      	ldr	r2, [pc, #156]	; (8004bb8 <SystemClock_Config+0xcc>)
 8004b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8004b20:	4b25      	ldr	r3, [pc, #148]	; (8004bb8 <SystemClock_Config+0xcc>)
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b28:	60bb      	str	r3, [r7, #8]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	607b      	str	r3, [r7, #4]
 8004b30:	4b22      	ldr	r3, [pc, #136]	; (8004bbc <SystemClock_Config+0xd0>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a21      	ldr	r2, [pc, #132]	; (8004bbc <SystemClock_Config+0xd0>)
 8004b36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	4b1f      	ldr	r3, [pc, #124]	; (8004bbc <SystemClock_Config+0xd0>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b44:	607b      	str	r3, [r7, #4]
 8004b46:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004b4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b52:	2302      	movs	r3, #2
 8004b54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004b56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004b5c:	2304      	movs	r3, #4
 8004b5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004b60:	23a8      	movs	r3, #168	; 0xa8
 8004b62:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004b64:	2302      	movs	r3, #2
 8004b66:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004b68:	2304      	movs	r3, #4
 8004b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b6c:	f107 0320 	add.w	r3, r7, #32
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fc f809 	bl	8000b88 <HAL_RCC_OscConfig>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004b7c:	f000 f8a8 	bl	8004cd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b80:	230f      	movs	r3, #15
 8004b82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b84:	2302      	movs	r3, #2
 8004b86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004b8c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004b90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b96:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004b98:	f107 030c 	add.w	r3, r7, #12
 8004b9c:	2105      	movs	r1, #5
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fc fa62 	bl	8001068 <HAL_RCC_ClockConfig>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004baa:	f000 f891 	bl	8004cd0 <Error_Handler>
  }
}
 8004bae:	bf00      	nop
 8004bb0:	3750      	adds	r7, #80	; 0x50
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	40007000 	.word	0x40007000

08004bc0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004bc4:	4b17      	ldr	r3, [pc, #92]	; (8004c24 <MX_SPI1_Init+0x64>)
 8004bc6:	4a18      	ldr	r2, [pc, #96]	; (8004c28 <MX_SPI1_Init+0x68>)
 8004bc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004bca:	4b16      	ldr	r3, [pc, #88]	; (8004c24 <MX_SPI1_Init+0x64>)
 8004bcc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004bd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004bd2:	4b14      	ldr	r3, [pc, #80]	; (8004c24 <MX_SPI1_Init+0x64>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004bd8:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <MX_SPI1_Init+0x64>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bde:	4b11      	ldr	r3, [pc, #68]	; (8004c24 <MX_SPI1_Init+0x64>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004be4:	4b0f      	ldr	r3, [pc, #60]	; (8004c24 <MX_SPI1_Init+0x64>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004bea:	4b0e      	ldr	r3, [pc, #56]	; (8004c24 <MX_SPI1_Init+0x64>)
 8004bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bf0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004bf2:	4b0c      	ldr	r3, [pc, #48]	; (8004c24 <MX_SPI1_Init+0x64>)
 8004bf4:	2218      	movs	r2, #24
 8004bf6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004bf8:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <MX_SPI1_Init+0x64>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004bfe:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <MX_SPI1_Init+0x64>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c04:	4b07      	ldr	r3, [pc, #28]	; (8004c24 <MX_SPI1_Init+0x64>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004c0a:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <MX_SPI1_Init+0x64>)
 8004c0c:	220a      	movs	r2, #10
 8004c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004c10:	4804      	ldr	r0, [pc, #16]	; (8004c24 <MX_SPI1_Init+0x64>)
 8004c12:	f7fc fbe7 	bl	80013e4 <HAL_SPI_Init>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004c1c:	f000 f858 	bl	8004cd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004c20:	bf00      	nop
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	20000650 	.word	0x20000650
 8004c28:	40013000 	.word	0x40013000

08004c2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c32:	f107 030c 	add.w	r3, r7, #12
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	605a      	str	r2, [r3, #4]
 8004c3c:	609a      	str	r2, [r3, #8]
 8004c3e:	60da      	str	r2, [r3, #12]
 8004c40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c42:	2300      	movs	r3, #0
 8004c44:	60bb      	str	r3, [r7, #8]
 8004c46:	4b20      	ldr	r3, [pc, #128]	; (8004cc8 <MX_GPIO_Init+0x9c>)
 8004c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4a:	4a1f      	ldr	r2, [pc, #124]	; (8004cc8 <MX_GPIO_Init+0x9c>)
 8004c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c50:	6313      	str	r3, [r2, #48]	; 0x30
 8004c52:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <MX_GPIO_Init+0x9c>)
 8004c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5a:	60bb      	str	r3, [r7, #8]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c5e:	2300      	movs	r3, #0
 8004c60:	607b      	str	r3, [r7, #4]
 8004c62:	4b19      	ldr	r3, [pc, #100]	; (8004cc8 <MX_GPIO_Init+0x9c>)
 8004c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c66:	4a18      	ldr	r2, [pc, #96]	; (8004cc8 <MX_GPIO_Init+0x9c>)
 8004c68:	f043 0308 	orr.w	r3, r3, #8
 8004c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c6e:	4b16      	ldr	r3, [pc, #88]	; (8004cc8 <MX_GPIO_Init+0x9c>)
 8004c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c72:	f003 0308 	and.w	r3, r3, #8
 8004c76:	607b      	str	r3, [r7, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	603b      	str	r3, [r7, #0]
 8004c7e:	4b12      	ldr	r3, [pc, #72]	; (8004cc8 <MX_GPIO_Init+0x9c>)
 8004c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c82:	4a11      	ldr	r2, [pc, #68]	; (8004cc8 <MX_GPIO_Init+0x9c>)
 8004c84:	f043 0302 	orr.w	r3, r3, #2
 8004c88:	6313      	str	r3, [r2, #48]	; 0x30
 8004c8a:	4b0f      	ldr	r3, [pc, #60]	; (8004cc8 <MX_GPIO_Init+0x9c>)
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8004c96:	2200      	movs	r2, #0
 8004c98:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8004c9c:	480b      	ldr	r0, [pc, #44]	; (8004ccc <MX_GPIO_Init+0xa0>)
 8004c9e:	f7fb ff59 	bl	8000b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004ca2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004ca6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cac:	2300      	movs	r3, #0
 8004cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004cb4:	f107 030c 	add.w	r3, r7, #12
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4804      	ldr	r0, [pc, #16]	; (8004ccc <MX_GPIO_Init+0xa0>)
 8004cbc:	f7fb fdb0 	bl	8000820 <HAL_GPIO_Init>

}
 8004cc0:	bf00      	nop
 8004cc2:	3720      	adds	r7, #32
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	40020c00 	.word	0x40020c00

08004cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004cd4:	bf00      	nop
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
	...

08004ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	607b      	str	r3, [r7, #4]
 8004cea:	4b10      	ldr	r3, [pc, #64]	; (8004d2c <HAL_MspInit+0x4c>)
 8004cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cee:	4a0f      	ldr	r2, [pc, #60]	; (8004d2c <HAL_MspInit+0x4c>)
 8004cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8004cf6:	4b0d      	ldr	r3, [pc, #52]	; (8004d2c <HAL_MspInit+0x4c>)
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cfe:	607b      	str	r3, [r7, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d02:	2300      	movs	r3, #0
 8004d04:	603b      	str	r3, [r7, #0]
 8004d06:	4b09      	ldr	r3, [pc, #36]	; (8004d2c <HAL_MspInit+0x4c>)
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	4a08      	ldr	r2, [pc, #32]	; (8004d2c <HAL_MspInit+0x4c>)
 8004d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d10:	6413      	str	r3, [r2, #64]	; 0x40
 8004d12:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <HAL_MspInit+0x4c>)
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d1a:	603b      	str	r3, [r7, #0]
 8004d1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40023800 	.word	0x40023800

08004d30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b08a      	sub	sp, #40	; 0x28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d38:	f107 0314 	add.w	r3, r7, #20
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	605a      	str	r2, [r3, #4]
 8004d42:	609a      	str	r2, [r3, #8]
 8004d44:	60da      	str	r2, [r3, #12]
 8004d46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a19      	ldr	r2, [pc, #100]	; (8004db4 <HAL_SPI_MspInit+0x84>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d12b      	bne.n	8004daa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004d52:	2300      	movs	r3, #0
 8004d54:	613b      	str	r3, [r7, #16]
 8004d56:	4b18      	ldr	r3, [pc, #96]	; (8004db8 <HAL_SPI_MspInit+0x88>)
 8004d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5a:	4a17      	ldr	r2, [pc, #92]	; (8004db8 <HAL_SPI_MspInit+0x88>)
 8004d5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d60:	6453      	str	r3, [r2, #68]	; 0x44
 8004d62:	4b15      	ldr	r3, [pc, #84]	; (8004db8 <HAL_SPI_MspInit+0x88>)
 8004d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d6a:	613b      	str	r3, [r7, #16]
 8004d6c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60fb      	str	r3, [r7, #12]
 8004d72:	4b11      	ldr	r3, [pc, #68]	; (8004db8 <HAL_SPI_MspInit+0x88>)
 8004d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d76:	4a10      	ldr	r2, [pc, #64]	; (8004db8 <HAL_SPI_MspInit+0x88>)
 8004d78:	f043 0302 	orr.w	r3, r3, #2
 8004d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d7e:	4b0e      	ldr	r3, [pc, #56]	; (8004db8 <HAL_SPI_MspInit+0x88>)
 8004d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	60fb      	str	r3, [r7, #12]
 8004d88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004d8a:	2338      	movs	r3, #56	; 0x38
 8004d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d8e:	2302      	movs	r3, #2
 8004d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d92:	2300      	movs	r3, #0
 8004d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d96:	2303      	movs	r3, #3
 8004d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004d9a:	2305      	movs	r3, #5
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d9e:	f107 0314 	add.w	r3, r7, #20
 8004da2:	4619      	mov	r1, r3
 8004da4:	4805      	ldr	r0, [pc, #20]	; (8004dbc <HAL_SPI_MspInit+0x8c>)
 8004da6:	f7fb fd3b 	bl	8000820 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004daa:	bf00      	nop
 8004dac:	3728      	adds	r7, #40	; 0x28
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	40013000 	.word	0x40013000
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	40020400 	.word	0x40020400

08004dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004dc4:	bf00      	nop
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004dd2:	e7fe      	b.n	8004dd2 <HardFault_Handler+0x4>

08004dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004dd8:	e7fe      	b.n	8004dd8 <MemManage_Handler+0x4>

08004dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004dde:	e7fe      	b.n	8004dde <BusFault_Handler+0x4>

08004de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004de4:	e7fe      	b.n	8004de4 <UsageFault_Handler+0x4>

08004de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004de6:	b480      	push	{r7}
 8004de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004dea:	bf00      	nop
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004df8:	bf00      	nop
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e02:	b480      	push	{r7}
 8004e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e06:	bf00      	nop
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
 sdcard_systick_timerproc();
 8004e14:	f7fd fc20 	bl	8002658 <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e18:	f7fb fbfc 	bl	8000614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 8004e1c:	bf00      	nop
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	e00a      	b.n	8004e48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004e32:	f3af 8000 	nop.w
 8004e36:	4601      	mov	r1, r0
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	60ba      	str	r2, [r7, #8]
 8004e3e:	b2ca      	uxtb	r2, r1
 8004e40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	3301      	adds	r3, #1
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	dbf0      	blt.n	8004e32 <_read+0x12>
	}

return len;
 8004e50:	687b      	ldr	r3, [r7, #4]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b086      	sub	sp, #24
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	60f8      	str	r0, [r7, #12]
 8004e62:	60b9      	str	r1, [r7, #8]
 8004e64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e66:	2300      	movs	r3, #0
 8004e68:	617b      	str	r3, [r7, #20]
 8004e6a:	e009      	b.n	8004e80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	60ba      	str	r2, [r7, #8]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	617b      	str	r3, [r7, #20]
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	dbf1      	blt.n	8004e6c <_write+0x12>
	}
	return len;
 8004e88:	687b      	ldr	r3, [r7, #4]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3718      	adds	r7, #24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <_close>:

int _close(int file)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
	return -1;
 8004e9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b083      	sub	sp, #12
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004eba:	605a      	str	r2, [r3, #4]
	return 0;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	370c      	adds	r7, #12
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <_isatty>:

int _isatty(int file)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
	return 1;
 8004ed2:	2301      	movs	r3, #1
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
	return 0;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
	...

08004efc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004f04:	4b11      	ldr	r3, [pc, #68]	; (8004f4c <_sbrk+0x50>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d102      	bne.n	8004f12 <_sbrk+0x16>
		heap_end = &end;
 8004f0c:	4b0f      	ldr	r3, [pc, #60]	; (8004f4c <_sbrk+0x50>)
 8004f0e:	4a10      	ldr	r2, [pc, #64]	; (8004f50 <_sbrk+0x54>)
 8004f10:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004f12:	4b0e      	ldr	r3, [pc, #56]	; (8004f4c <_sbrk+0x50>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004f18:	4b0c      	ldr	r3, [pc, #48]	; (8004f4c <_sbrk+0x50>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4413      	add	r3, r2
 8004f20:	466a      	mov	r2, sp
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d907      	bls.n	8004f36 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004f26:	f000 f855 	bl	8004fd4 <__errno>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	230c      	movs	r3, #12
 8004f2e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004f30:	f04f 33ff 	mov.w	r3, #4294967295
 8004f34:	e006      	b.n	8004f44 <_sbrk+0x48>
	}

	heap_end += incr;
 8004f36:	4b05      	ldr	r3, [pc, #20]	; (8004f4c <_sbrk+0x50>)
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	4a03      	ldr	r2, [pc, #12]	; (8004f4c <_sbrk+0x50>)
 8004f40:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004f42:	68fb      	ldr	r3, [r7, #12]
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	200002c8 	.word	0x200002c8
 8004f50:	200006b0 	.word	0x200006b0

08004f54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f58:	4b08      	ldr	r3, [pc, #32]	; (8004f7c <SystemInit+0x28>)
 8004f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5e:	4a07      	ldr	r2, [pc, #28]	; (8004f7c <SystemInit+0x28>)
 8004f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004f68:	4b04      	ldr	r3, [pc, #16]	; (8004f7c <SystemInit+0x28>)
 8004f6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f6e:	609a      	str	r2, [r3, #8]
#endif
}
 8004f70:	bf00      	nop
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	e000ed00 	.word	0xe000ed00

08004f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004f80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004fb8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004f84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004f86:	e003      	b.n	8004f90 <LoopCopyDataInit>

08004f88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004f88:	4b0c      	ldr	r3, [pc, #48]	; (8004fbc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004f8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004f8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004f8e:	3104      	adds	r1, #4

08004f90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004f90:	480b      	ldr	r0, [pc, #44]	; (8004fc0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004f92:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004f94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004f96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004f98:	d3f6      	bcc.n	8004f88 <CopyDataInit>
  ldr  r2, =_sbss
 8004f9a:	4a0b      	ldr	r2, [pc, #44]	; (8004fc8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004f9c:	e002      	b.n	8004fa4 <LoopFillZerobss>

08004f9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004f9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004fa0:	f842 3b04 	str.w	r3, [r2], #4

08004fa4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004fa4:	4b09      	ldr	r3, [pc, #36]	; (8004fcc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004fa6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004fa8:	d3f9      	bcc.n	8004f9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004faa:	f7ff ffd3 	bl	8004f54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004fae:	f000 f817 	bl	8004fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004fb2:	f7ff fcc1 	bl	8004938 <main>
  bx  lr    
 8004fb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004fb8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004fbc:	08006064 	.word	0x08006064
  ldr  r0, =_sdata
 8004fc0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004fc4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8004fc8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8004fcc:	200006b0 	.word	0x200006b0

08004fd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004fd0:	e7fe      	b.n	8004fd0 <ADC_IRQHandler>
	...

08004fd4 <__errno>:
 8004fd4:	4b01      	ldr	r3, [pc, #4]	; (8004fdc <__errno+0x8>)
 8004fd6:	6818      	ldr	r0, [r3, #0]
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	2000000c 	.word	0x2000000c

08004fe0 <__libc_init_array>:
 8004fe0:	b570      	push	{r4, r5, r6, lr}
 8004fe2:	4e0d      	ldr	r6, [pc, #52]	; (8005018 <__libc_init_array+0x38>)
 8004fe4:	4c0d      	ldr	r4, [pc, #52]	; (800501c <__libc_init_array+0x3c>)
 8004fe6:	1ba4      	subs	r4, r4, r6
 8004fe8:	10a4      	asrs	r4, r4, #2
 8004fea:	2500      	movs	r5, #0
 8004fec:	42a5      	cmp	r5, r4
 8004fee:	d109      	bne.n	8005004 <__libc_init_array+0x24>
 8004ff0:	4e0b      	ldr	r6, [pc, #44]	; (8005020 <__libc_init_array+0x40>)
 8004ff2:	4c0c      	ldr	r4, [pc, #48]	; (8005024 <__libc_init_array+0x44>)
 8004ff4:	f000 ff74 	bl	8005ee0 <_init>
 8004ff8:	1ba4      	subs	r4, r4, r6
 8004ffa:	10a4      	asrs	r4, r4, #2
 8004ffc:	2500      	movs	r5, #0
 8004ffe:	42a5      	cmp	r5, r4
 8005000:	d105      	bne.n	800500e <__libc_init_array+0x2e>
 8005002:	bd70      	pop	{r4, r5, r6, pc}
 8005004:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005008:	4798      	blx	r3
 800500a:	3501      	adds	r5, #1
 800500c:	e7ee      	b.n	8004fec <__libc_init_array+0xc>
 800500e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005012:	4798      	blx	r3
 8005014:	3501      	adds	r5, #1
 8005016:	e7f2      	b.n	8004ffe <__libc_init_array+0x1e>
 8005018:	0800605c 	.word	0x0800605c
 800501c:	0800605c 	.word	0x0800605c
 8005020:	0800605c 	.word	0x0800605c
 8005024:	08006060 	.word	0x08006060

08005028 <memcpy>:
 8005028:	b510      	push	{r4, lr}
 800502a:	1e43      	subs	r3, r0, #1
 800502c:	440a      	add	r2, r1
 800502e:	4291      	cmp	r1, r2
 8005030:	d100      	bne.n	8005034 <memcpy+0xc>
 8005032:	bd10      	pop	{r4, pc}
 8005034:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005038:	f803 4f01 	strb.w	r4, [r3, #1]!
 800503c:	e7f7      	b.n	800502e <memcpy+0x6>

0800503e <memset>:
 800503e:	4402      	add	r2, r0
 8005040:	4603      	mov	r3, r0
 8005042:	4293      	cmp	r3, r2
 8005044:	d100      	bne.n	8005048 <memset+0xa>
 8005046:	4770      	bx	lr
 8005048:	f803 1b01 	strb.w	r1, [r3], #1
 800504c:	e7f9      	b.n	8005042 <memset+0x4>
	...

08005050 <iprintf>:
 8005050:	b40f      	push	{r0, r1, r2, r3}
 8005052:	4b0a      	ldr	r3, [pc, #40]	; (800507c <iprintf+0x2c>)
 8005054:	b513      	push	{r0, r1, r4, lr}
 8005056:	681c      	ldr	r4, [r3, #0]
 8005058:	b124      	cbz	r4, 8005064 <iprintf+0x14>
 800505a:	69a3      	ldr	r3, [r4, #24]
 800505c:	b913      	cbnz	r3, 8005064 <iprintf+0x14>
 800505e:	4620      	mov	r0, r4
 8005060:	f000 fa22 	bl	80054a8 <__sinit>
 8005064:	ab05      	add	r3, sp, #20
 8005066:	9a04      	ldr	r2, [sp, #16]
 8005068:	68a1      	ldr	r1, [r4, #8]
 800506a:	9301      	str	r3, [sp, #4]
 800506c:	4620      	mov	r0, r4
 800506e:	f000 fbdb 	bl	8005828 <_vfiprintf_r>
 8005072:	b002      	add	sp, #8
 8005074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005078:	b004      	add	sp, #16
 800507a:	4770      	bx	lr
 800507c:	2000000c 	.word	0x2000000c

08005080 <_puts_r>:
 8005080:	b570      	push	{r4, r5, r6, lr}
 8005082:	460e      	mov	r6, r1
 8005084:	4605      	mov	r5, r0
 8005086:	b118      	cbz	r0, 8005090 <_puts_r+0x10>
 8005088:	6983      	ldr	r3, [r0, #24]
 800508a:	b90b      	cbnz	r3, 8005090 <_puts_r+0x10>
 800508c:	f000 fa0c 	bl	80054a8 <__sinit>
 8005090:	69ab      	ldr	r3, [r5, #24]
 8005092:	68ac      	ldr	r4, [r5, #8]
 8005094:	b913      	cbnz	r3, 800509c <_puts_r+0x1c>
 8005096:	4628      	mov	r0, r5
 8005098:	f000 fa06 	bl	80054a8 <__sinit>
 800509c:	4b23      	ldr	r3, [pc, #140]	; (800512c <_puts_r+0xac>)
 800509e:	429c      	cmp	r4, r3
 80050a0:	d117      	bne.n	80050d2 <_puts_r+0x52>
 80050a2:	686c      	ldr	r4, [r5, #4]
 80050a4:	89a3      	ldrh	r3, [r4, #12]
 80050a6:	071b      	lsls	r3, r3, #28
 80050a8:	d51d      	bpl.n	80050e6 <_puts_r+0x66>
 80050aa:	6923      	ldr	r3, [r4, #16]
 80050ac:	b1db      	cbz	r3, 80050e6 <_puts_r+0x66>
 80050ae:	3e01      	subs	r6, #1
 80050b0:	68a3      	ldr	r3, [r4, #8]
 80050b2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80050b6:	3b01      	subs	r3, #1
 80050b8:	60a3      	str	r3, [r4, #8]
 80050ba:	b9e9      	cbnz	r1, 80050f8 <_puts_r+0x78>
 80050bc:	2b00      	cmp	r3, #0
 80050be:	da2e      	bge.n	800511e <_puts_r+0x9e>
 80050c0:	4622      	mov	r2, r4
 80050c2:	210a      	movs	r1, #10
 80050c4:	4628      	mov	r0, r5
 80050c6:	f000 f83f 	bl	8005148 <__swbuf_r>
 80050ca:	3001      	adds	r0, #1
 80050cc:	d011      	beq.n	80050f2 <_puts_r+0x72>
 80050ce:	200a      	movs	r0, #10
 80050d0:	e011      	b.n	80050f6 <_puts_r+0x76>
 80050d2:	4b17      	ldr	r3, [pc, #92]	; (8005130 <_puts_r+0xb0>)
 80050d4:	429c      	cmp	r4, r3
 80050d6:	d101      	bne.n	80050dc <_puts_r+0x5c>
 80050d8:	68ac      	ldr	r4, [r5, #8]
 80050da:	e7e3      	b.n	80050a4 <_puts_r+0x24>
 80050dc:	4b15      	ldr	r3, [pc, #84]	; (8005134 <_puts_r+0xb4>)
 80050de:	429c      	cmp	r4, r3
 80050e0:	bf08      	it	eq
 80050e2:	68ec      	ldreq	r4, [r5, #12]
 80050e4:	e7de      	b.n	80050a4 <_puts_r+0x24>
 80050e6:	4621      	mov	r1, r4
 80050e8:	4628      	mov	r0, r5
 80050ea:	f000 f87f 	bl	80051ec <__swsetup_r>
 80050ee:	2800      	cmp	r0, #0
 80050f0:	d0dd      	beq.n	80050ae <_puts_r+0x2e>
 80050f2:	f04f 30ff 	mov.w	r0, #4294967295
 80050f6:	bd70      	pop	{r4, r5, r6, pc}
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	da04      	bge.n	8005106 <_puts_r+0x86>
 80050fc:	69a2      	ldr	r2, [r4, #24]
 80050fe:	429a      	cmp	r2, r3
 8005100:	dc06      	bgt.n	8005110 <_puts_r+0x90>
 8005102:	290a      	cmp	r1, #10
 8005104:	d004      	beq.n	8005110 <_puts_r+0x90>
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	6022      	str	r2, [r4, #0]
 800510c:	7019      	strb	r1, [r3, #0]
 800510e:	e7cf      	b.n	80050b0 <_puts_r+0x30>
 8005110:	4622      	mov	r2, r4
 8005112:	4628      	mov	r0, r5
 8005114:	f000 f818 	bl	8005148 <__swbuf_r>
 8005118:	3001      	adds	r0, #1
 800511a:	d1c9      	bne.n	80050b0 <_puts_r+0x30>
 800511c:	e7e9      	b.n	80050f2 <_puts_r+0x72>
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	200a      	movs	r0, #10
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	6022      	str	r2, [r4, #0]
 8005126:	7018      	strb	r0, [r3, #0]
 8005128:	e7e5      	b.n	80050f6 <_puts_r+0x76>
 800512a:	bf00      	nop
 800512c:	08005fe0 	.word	0x08005fe0
 8005130:	08006000 	.word	0x08006000
 8005134:	08005fc0 	.word	0x08005fc0

08005138 <puts>:
 8005138:	4b02      	ldr	r3, [pc, #8]	; (8005144 <puts+0xc>)
 800513a:	4601      	mov	r1, r0
 800513c:	6818      	ldr	r0, [r3, #0]
 800513e:	f7ff bf9f 	b.w	8005080 <_puts_r>
 8005142:	bf00      	nop
 8005144:	2000000c 	.word	0x2000000c

08005148 <__swbuf_r>:
 8005148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514a:	460e      	mov	r6, r1
 800514c:	4614      	mov	r4, r2
 800514e:	4605      	mov	r5, r0
 8005150:	b118      	cbz	r0, 800515a <__swbuf_r+0x12>
 8005152:	6983      	ldr	r3, [r0, #24]
 8005154:	b90b      	cbnz	r3, 800515a <__swbuf_r+0x12>
 8005156:	f000 f9a7 	bl	80054a8 <__sinit>
 800515a:	4b21      	ldr	r3, [pc, #132]	; (80051e0 <__swbuf_r+0x98>)
 800515c:	429c      	cmp	r4, r3
 800515e:	d12a      	bne.n	80051b6 <__swbuf_r+0x6e>
 8005160:	686c      	ldr	r4, [r5, #4]
 8005162:	69a3      	ldr	r3, [r4, #24]
 8005164:	60a3      	str	r3, [r4, #8]
 8005166:	89a3      	ldrh	r3, [r4, #12]
 8005168:	071a      	lsls	r2, r3, #28
 800516a:	d52e      	bpl.n	80051ca <__swbuf_r+0x82>
 800516c:	6923      	ldr	r3, [r4, #16]
 800516e:	b363      	cbz	r3, 80051ca <__swbuf_r+0x82>
 8005170:	6923      	ldr	r3, [r4, #16]
 8005172:	6820      	ldr	r0, [r4, #0]
 8005174:	1ac0      	subs	r0, r0, r3
 8005176:	6963      	ldr	r3, [r4, #20]
 8005178:	b2f6      	uxtb	r6, r6
 800517a:	4283      	cmp	r3, r0
 800517c:	4637      	mov	r7, r6
 800517e:	dc04      	bgt.n	800518a <__swbuf_r+0x42>
 8005180:	4621      	mov	r1, r4
 8005182:	4628      	mov	r0, r5
 8005184:	f000 f926 	bl	80053d4 <_fflush_r>
 8005188:	bb28      	cbnz	r0, 80051d6 <__swbuf_r+0x8e>
 800518a:	68a3      	ldr	r3, [r4, #8]
 800518c:	3b01      	subs	r3, #1
 800518e:	60a3      	str	r3, [r4, #8]
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	6022      	str	r2, [r4, #0]
 8005196:	701e      	strb	r6, [r3, #0]
 8005198:	6963      	ldr	r3, [r4, #20]
 800519a:	3001      	adds	r0, #1
 800519c:	4283      	cmp	r3, r0
 800519e:	d004      	beq.n	80051aa <__swbuf_r+0x62>
 80051a0:	89a3      	ldrh	r3, [r4, #12]
 80051a2:	07db      	lsls	r3, r3, #31
 80051a4:	d519      	bpl.n	80051da <__swbuf_r+0x92>
 80051a6:	2e0a      	cmp	r6, #10
 80051a8:	d117      	bne.n	80051da <__swbuf_r+0x92>
 80051aa:	4621      	mov	r1, r4
 80051ac:	4628      	mov	r0, r5
 80051ae:	f000 f911 	bl	80053d4 <_fflush_r>
 80051b2:	b190      	cbz	r0, 80051da <__swbuf_r+0x92>
 80051b4:	e00f      	b.n	80051d6 <__swbuf_r+0x8e>
 80051b6:	4b0b      	ldr	r3, [pc, #44]	; (80051e4 <__swbuf_r+0x9c>)
 80051b8:	429c      	cmp	r4, r3
 80051ba:	d101      	bne.n	80051c0 <__swbuf_r+0x78>
 80051bc:	68ac      	ldr	r4, [r5, #8]
 80051be:	e7d0      	b.n	8005162 <__swbuf_r+0x1a>
 80051c0:	4b09      	ldr	r3, [pc, #36]	; (80051e8 <__swbuf_r+0xa0>)
 80051c2:	429c      	cmp	r4, r3
 80051c4:	bf08      	it	eq
 80051c6:	68ec      	ldreq	r4, [r5, #12]
 80051c8:	e7cb      	b.n	8005162 <__swbuf_r+0x1a>
 80051ca:	4621      	mov	r1, r4
 80051cc:	4628      	mov	r0, r5
 80051ce:	f000 f80d 	bl	80051ec <__swsetup_r>
 80051d2:	2800      	cmp	r0, #0
 80051d4:	d0cc      	beq.n	8005170 <__swbuf_r+0x28>
 80051d6:	f04f 37ff 	mov.w	r7, #4294967295
 80051da:	4638      	mov	r0, r7
 80051dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051de:	bf00      	nop
 80051e0:	08005fe0 	.word	0x08005fe0
 80051e4:	08006000 	.word	0x08006000
 80051e8:	08005fc0 	.word	0x08005fc0

080051ec <__swsetup_r>:
 80051ec:	4b32      	ldr	r3, [pc, #200]	; (80052b8 <__swsetup_r+0xcc>)
 80051ee:	b570      	push	{r4, r5, r6, lr}
 80051f0:	681d      	ldr	r5, [r3, #0]
 80051f2:	4606      	mov	r6, r0
 80051f4:	460c      	mov	r4, r1
 80051f6:	b125      	cbz	r5, 8005202 <__swsetup_r+0x16>
 80051f8:	69ab      	ldr	r3, [r5, #24]
 80051fa:	b913      	cbnz	r3, 8005202 <__swsetup_r+0x16>
 80051fc:	4628      	mov	r0, r5
 80051fe:	f000 f953 	bl	80054a8 <__sinit>
 8005202:	4b2e      	ldr	r3, [pc, #184]	; (80052bc <__swsetup_r+0xd0>)
 8005204:	429c      	cmp	r4, r3
 8005206:	d10f      	bne.n	8005228 <__swsetup_r+0x3c>
 8005208:	686c      	ldr	r4, [r5, #4]
 800520a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800520e:	b29a      	uxth	r2, r3
 8005210:	0715      	lsls	r5, r2, #28
 8005212:	d42c      	bmi.n	800526e <__swsetup_r+0x82>
 8005214:	06d0      	lsls	r0, r2, #27
 8005216:	d411      	bmi.n	800523c <__swsetup_r+0x50>
 8005218:	2209      	movs	r2, #9
 800521a:	6032      	str	r2, [r6, #0]
 800521c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005220:	81a3      	strh	r3, [r4, #12]
 8005222:	f04f 30ff 	mov.w	r0, #4294967295
 8005226:	e03e      	b.n	80052a6 <__swsetup_r+0xba>
 8005228:	4b25      	ldr	r3, [pc, #148]	; (80052c0 <__swsetup_r+0xd4>)
 800522a:	429c      	cmp	r4, r3
 800522c:	d101      	bne.n	8005232 <__swsetup_r+0x46>
 800522e:	68ac      	ldr	r4, [r5, #8]
 8005230:	e7eb      	b.n	800520a <__swsetup_r+0x1e>
 8005232:	4b24      	ldr	r3, [pc, #144]	; (80052c4 <__swsetup_r+0xd8>)
 8005234:	429c      	cmp	r4, r3
 8005236:	bf08      	it	eq
 8005238:	68ec      	ldreq	r4, [r5, #12]
 800523a:	e7e6      	b.n	800520a <__swsetup_r+0x1e>
 800523c:	0751      	lsls	r1, r2, #29
 800523e:	d512      	bpl.n	8005266 <__swsetup_r+0x7a>
 8005240:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005242:	b141      	cbz	r1, 8005256 <__swsetup_r+0x6a>
 8005244:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005248:	4299      	cmp	r1, r3
 800524a:	d002      	beq.n	8005252 <__swsetup_r+0x66>
 800524c:	4630      	mov	r0, r6
 800524e:	f000 fa19 	bl	8005684 <_free_r>
 8005252:	2300      	movs	r3, #0
 8005254:	6363      	str	r3, [r4, #52]	; 0x34
 8005256:	89a3      	ldrh	r3, [r4, #12]
 8005258:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800525c:	81a3      	strh	r3, [r4, #12]
 800525e:	2300      	movs	r3, #0
 8005260:	6063      	str	r3, [r4, #4]
 8005262:	6923      	ldr	r3, [r4, #16]
 8005264:	6023      	str	r3, [r4, #0]
 8005266:	89a3      	ldrh	r3, [r4, #12]
 8005268:	f043 0308 	orr.w	r3, r3, #8
 800526c:	81a3      	strh	r3, [r4, #12]
 800526e:	6923      	ldr	r3, [r4, #16]
 8005270:	b94b      	cbnz	r3, 8005286 <__swsetup_r+0x9a>
 8005272:	89a3      	ldrh	r3, [r4, #12]
 8005274:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005278:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800527c:	d003      	beq.n	8005286 <__swsetup_r+0x9a>
 800527e:	4621      	mov	r1, r4
 8005280:	4630      	mov	r0, r6
 8005282:	f000 f9bf 	bl	8005604 <__smakebuf_r>
 8005286:	89a2      	ldrh	r2, [r4, #12]
 8005288:	f012 0301 	ands.w	r3, r2, #1
 800528c:	d00c      	beq.n	80052a8 <__swsetup_r+0xbc>
 800528e:	2300      	movs	r3, #0
 8005290:	60a3      	str	r3, [r4, #8]
 8005292:	6963      	ldr	r3, [r4, #20]
 8005294:	425b      	negs	r3, r3
 8005296:	61a3      	str	r3, [r4, #24]
 8005298:	6923      	ldr	r3, [r4, #16]
 800529a:	b953      	cbnz	r3, 80052b2 <__swsetup_r+0xc6>
 800529c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052a0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80052a4:	d1ba      	bne.n	800521c <__swsetup_r+0x30>
 80052a6:	bd70      	pop	{r4, r5, r6, pc}
 80052a8:	0792      	lsls	r2, r2, #30
 80052aa:	bf58      	it	pl
 80052ac:	6963      	ldrpl	r3, [r4, #20]
 80052ae:	60a3      	str	r3, [r4, #8]
 80052b0:	e7f2      	b.n	8005298 <__swsetup_r+0xac>
 80052b2:	2000      	movs	r0, #0
 80052b4:	e7f7      	b.n	80052a6 <__swsetup_r+0xba>
 80052b6:	bf00      	nop
 80052b8:	2000000c 	.word	0x2000000c
 80052bc:	08005fe0 	.word	0x08005fe0
 80052c0:	08006000 	.word	0x08006000
 80052c4:	08005fc0 	.word	0x08005fc0

080052c8 <__sflush_r>:
 80052c8:	898a      	ldrh	r2, [r1, #12]
 80052ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052ce:	4605      	mov	r5, r0
 80052d0:	0710      	lsls	r0, r2, #28
 80052d2:	460c      	mov	r4, r1
 80052d4:	d458      	bmi.n	8005388 <__sflush_r+0xc0>
 80052d6:	684b      	ldr	r3, [r1, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	dc05      	bgt.n	80052e8 <__sflush_r+0x20>
 80052dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80052de:	2b00      	cmp	r3, #0
 80052e0:	dc02      	bgt.n	80052e8 <__sflush_r+0x20>
 80052e2:	2000      	movs	r0, #0
 80052e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052ea:	2e00      	cmp	r6, #0
 80052ec:	d0f9      	beq.n	80052e2 <__sflush_r+0x1a>
 80052ee:	2300      	movs	r3, #0
 80052f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80052f4:	682f      	ldr	r7, [r5, #0]
 80052f6:	6a21      	ldr	r1, [r4, #32]
 80052f8:	602b      	str	r3, [r5, #0]
 80052fa:	d032      	beq.n	8005362 <__sflush_r+0x9a>
 80052fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052fe:	89a3      	ldrh	r3, [r4, #12]
 8005300:	075a      	lsls	r2, r3, #29
 8005302:	d505      	bpl.n	8005310 <__sflush_r+0x48>
 8005304:	6863      	ldr	r3, [r4, #4]
 8005306:	1ac0      	subs	r0, r0, r3
 8005308:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800530a:	b10b      	cbz	r3, 8005310 <__sflush_r+0x48>
 800530c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800530e:	1ac0      	subs	r0, r0, r3
 8005310:	2300      	movs	r3, #0
 8005312:	4602      	mov	r2, r0
 8005314:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005316:	6a21      	ldr	r1, [r4, #32]
 8005318:	4628      	mov	r0, r5
 800531a:	47b0      	blx	r6
 800531c:	1c43      	adds	r3, r0, #1
 800531e:	89a3      	ldrh	r3, [r4, #12]
 8005320:	d106      	bne.n	8005330 <__sflush_r+0x68>
 8005322:	6829      	ldr	r1, [r5, #0]
 8005324:	291d      	cmp	r1, #29
 8005326:	d848      	bhi.n	80053ba <__sflush_r+0xf2>
 8005328:	4a29      	ldr	r2, [pc, #164]	; (80053d0 <__sflush_r+0x108>)
 800532a:	40ca      	lsrs	r2, r1
 800532c:	07d6      	lsls	r6, r2, #31
 800532e:	d544      	bpl.n	80053ba <__sflush_r+0xf2>
 8005330:	2200      	movs	r2, #0
 8005332:	6062      	str	r2, [r4, #4]
 8005334:	04d9      	lsls	r1, r3, #19
 8005336:	6922      	ldr	r2, [r4, #16]
 8005338:	6022      	str	r2, [r4, #0]
 800533a:	d504      	bpl.n	8005346 <__sflush_r+0x7e>
 800533c:	1c42      	adds	r2, r0, #1
 800533e:	d101      	bne.n	8005344 <__sflush_r+0x7c>
 8005340:	682b      	ldr	r3, [r5, #0]
 8005342:	b903      	cbnz	r3, 8005346 <__sflush_r+0x7e>
 8005344:	6560      	str	r0, [r4, #84]	; 0x54
 8005346:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005348:	602f      	str	r7, [r5, #0]
 800534a:	2900      	cmp	r1, #0
 800534c:	d0c9      	beq.n	80052e2 <__sflush_r+0x1a>
 800534e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005352:	4299      	cmp	r1, r3
 8005354:	d002      	beq.n	800535c <__sflush_r+0x94>
 8005356:	4628      	mov	r0, r5
 8005358:	f000 f994 	bl	8005684 <_free_r>
 800535c:	2000      	movs	r0, #0
 800535e:	6360      	str	r0, [r4, #52]	; 0x34
 8005360:	e7c0      	b.n	80052e4 <__sflush_r+0x1c>
 8005362:	2301      	movs	r3, #1
 8005364:	4628      	mov	r0, r5
 8005366:	47b0      	blx	r6
 8005368:	1c41      	adds	r1, r0, #1
 800536a:	d1c8      	bne.n	80052fe <__sflush_r+0x36>
 800536c:	682b      	ldr	r3, [r5, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d0c5      	beq.n	80052fe <__sflush_r+0x36>
 8005372:	2b1d      	cmp	r3, #29
 8005374:	d001      	beq.n	800537a <__sflush_r+0xb2>
 8005376:	2b16      	cmp	r3, #22
 8005378:	d101      	bne.n	800537e <__sflush_r+0xb6>
 800537a:	602f      	str	r7, [r5, #0]
 800537c:	e7b1      	b.n	80052e2 <__sflush_r+0x1a>
 800537e:	89a3      	ldrh	r3, [r4, #12]
 8005380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005384:	81a3      	strh	r3, [r4, #12]
 8005386:	e7ad      	b.n	80052e4 <__sflush_r+0x1c>
 8005388:	690f      	ldr	r7, [r1, #16]
 800538a:	2f00      	cmp	r7, #0
 800538c:	d0a9      	beq.n	80052e2 <__sflush_r+0x1a>
 800538e:	0793      	lsls	r3, r2, #30
 8005390:	680e      	ldr	r6, [r1, #0]
 8005392:	bf08      	it	eq
 8005394:	694b      	ldreq	r3, [r1, #20]
 8005396:	600f      	str	r7, [r1, #0]
 8005398:	bf18      	it	ne
 800539a:	2300      	movne	r3, #0
 800539c:	eba6 0807 	sub.w	r8, r6, r7
 80053a0:	608b      	str	r3, [r1, #8]
 80053a2:	f1b8 0f00 	cmp.w	r8, #0
 80053a6:	dd9c      	ble.n	80052e2 <__sflush_r+0x1a>
 80053a8:	4643      	mov	r3, r8
 80053aa:	463a      	mov	r2, r7
 80053ac:	6a21      	ldr	r1, [r4, #32]
 80053ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80053b0:	4628      	mov	r0, r5
 80053b2:	47b0      	blx	r6
 80053b4:	2800      	cmp	r0, #0
 80053b6:	dc06      	bgt.n	80053c6 <__sflush_r+0xfe>
 80053b8:	89a3      	ldrh	r3, [r4, #12]
 80053ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053be:	81a3      	strh	r3, [r4, #12]
 80053c0:	f04f 30ff 	mov.w	r0, #4294967295
 80053c4:	e78e      	b.n	80052e4 <__sflush_r+0x1c>
 80053c6:	4407      	add	r7, r0
 80053c8:	eba8 0800 	sub.w	r8, r8, r0
 80053cc:	e7e9      	b.n	80053a2 <__sflush_r+0xda>
 80053ce:	bf00      	nop
 80053d0:	20400001 	.word	0x20400001

080053d4 <_fflush_r>:
 80053d4:	b538      	push	{r3, r4, r5, lr}
 80053d6:	690b      	ldr	r3, [r1, #16]
 80053d8:	4605      	mov	r5, r0
 80053da:	460c      	mov	r4, r1
 80053dc:	b1db      	cbz	r3, 8005416 <_fflush_r+0x42>
 80053de:	b118      	cbz	r0, 80053e8 <_fflush_r+0x14>
 80053e0:	6983      	ldr	r3, [r0, #24]
 80053e2:	b90b      	cbnz	r3, 80053e8 <_fflush_r+0x14>
 80053e4:	f000 f860 	bl	80054a8 <__sinit>
 80053e8:	4b0c      	ldr	r3, [pc, #48]	; (800541c <_fflush_r+0x48>)
 80053ea:	429c      	cmp	r4, r3
 80053ec:	d109      	bne.n	8005402 <_fflush_r+0x2e>
 80053ee:	686c      	ldr	r4, [r5, #4]
 80053f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053f4:	b17b      	cbz	r3, 8005416 <_fflush_r+0x42>
 80053f6:	4621      	mov	r1, r4
 80053f8:	4628      	mov	r0, r5
 80053fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053fe:	f7ff bf63 	b.w	80052c8 <__sflush_r>
 8005402:	4b07      	ldr	r3, [pc, #28]	; (8005420 <_fflush_r+0x4c>)
 8005404:	429c      	cmp	r4, r3
 8005406:	d101      	bne.n	800540c <_fflush_r+0x38>
 8005408:	68ac      	ldr	r4, [r5, #8]
 800540a:	e7f1      	b.n	80053f0 <_fflush_r+0x1c>
 800540c:	4b05      	ldr	r3, [pc, #20]	; (8005424 <_fflush_r+0x50>)
 800540e:	429c      	cmp	r4, r3
 8005410:	bf08      	it	eq
 8005412:	68ec      	ldreq	r4, [r5, #12]
 8005414:	e7ec      	b.n	80053f0 <_fflush_r+0x1c>
 8005416:	2000      	movs	r0, #0
 8005418:	bd38      	pop	{r3, r4, r5, pc}
 800541a:	bf00      	nop
 800541c:	08005fe0 	.word	0x08005fe0
 8005420:	08006000 	.word	0x08006000
 8005424:	08005fc0 	.word	0x08005fc0

08005428 <std>:
 8005428:	2300      	movs	r3, #0
 800542a:	b510      	push	{r4, lr}
 800542c:	4604      	mov	r4, r0
 800542e:	e9c0 3300 	strd	r3, r3, [r0]
 8005432:	6083      	str	r3, [r0, #8]
 8005434:	8181      	strh	r1, [r0, #12]
 8005436:	6643      	str	r3, [r0, #100]	; 0x64
 8005438:	81c2      	strh	r2, [r0, #14]
 800543a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800543e:	6183      	str	r3, [r0, #24]
 8005440:	4619      	mov	r1, r3
 8005442:	2208      	movs	r2, #8
 8005444:	305c      	adds	r0, #92	; 0x5c
 8005446:	f7ff fdfa 	bl	800503e <memset>
 800544a:	4b05      	ldr	r3, [pc, #20]	; (8005460 <std+0x38>)
 800544c:	6263      	str	r3, [r4, #36]	; 0x24
 800544e:	4b05      	ldr	r3, [pc, #20]	; (8005464 <std+0x3c>)
 8005450:	62a3      	str	r3, [r4, #40]	; 0x28
 8005452:	4b05      	ldr	r3, [pc, #20]	; (8005468 <std+0x40>)
 8005454:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005456:	4b05      	ldr	r3, [pc, #20]	; (800546c <std+0x44>)
 8005458:	6224      	str	r4, [r4, #32]
 800545a:	6323      	str	r3, [r4, #48]	; 0x30
 800545c:	bd10      	pop	{r4, pc}
 800545e:	bf00      	nop
 8005460:	08005d85 	.word	0x08005d85
 8005464:	08005da7 	.word	0x08005da7
 8005468:	08005ddf 	.word	0x08005ddf
 800546c:	08005e03 	.word	0x08005e03

08005470 <_cleanup_r>:
 8005470:	4901      	ldr	r1, [pc, #4]	; (8005478 <_cleanup_r+0x8>)
 8005472:	f000 b885 	b.w	8005580 <_fwalk_reent>
 8005476:	bf00      	nop
 8005478:	080053d5 	.word	0x080053d5

0800547c <__sfmoreglue>:
 800547c:	b570      	push	{r4, r5, r6, lr}
 800547e:	1e4a      	subs	r2, r1, #1
 8005480:	2568      	movs	r5, #104	; 0x68
 8005482:	4355      	muls	r5, r2
 8005484:	460e      	mov	r6, r1
 8005486:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800548a:	f000 f949 	bl	8005720 <_malloc_r>
 800548e:	4604      	mov	r4, r0
 8005490:	b140      	cbz	r0, 80054a4 <__sfmoreglue+0x28>
 8005492:	2100      	movs	r1, #0
 8005494:	e9c0 1600 	strd	r1, r6, [r0]
 8005498:	300c      	adds	r0, #12
 800549a:	60a0      	str	r0, [r4, #8]
 800549c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80054a0:	f7ff fdcd 	bl	800503e <memset>
 80054a4:	4620      	mov	r0, r4
 80054a6:	bd70      	pop	{r4, r5, r6, pc}

080054a8 <__sinit>:
 80054a8:	6983      	ldr	r3, [r0, #24]
 80054aa:	b510      	push	{r4, lr}
 80054ac:	4604      	mov	r4, r0
 80054ae:	bb33      	cbnz	r3, 80054fe <__sinit+0x56>
 80054b0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80054b4:	6503      	str	r3, [r0, #80]	; 0x50
 80054b6:	4b12      	ldr	r3, [pc, #72]	; (8005500 <__sinit+0x58>)
 80054b8:	4a12      	ldr	r2, [pc, #72]	; (8005504 <__sinit+0x5c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6282      	str	r2, [r0, #40]	; 0x28
 80054be:	4298      	cmp	r0, r3
 80054c0:	bf04      	itt	eq
 80054c2:	2301      	moveq	r3, #1
 80054c4:	6183      	streq	r3, [r0, #24]
 80054c6:	f000 f81f 	bl	8005508 <__sfp>
 80054ca:	6060      	str	r0, [r4, #4]
 80054cc:	4620      	mov	r0, r4
 80054ce:	f000 f81b 	bl	8005508 <__sfp>
 80054d2:	60a0      	str	r0, [r4, #8]
 80054d4:	4620      	mov	r0, r4
 80054d6:	f000 f817 	bl	8005508 <__sfp>
 80054da:	2200      	movs	r2, #0
 80054dc:	60e0      	str	r0, [r4, #12]
 80054de:	2104      	movs	r1, #4
 80054e0:	6860      	ldr	r0, [r4, #4]
 80054e2:	f7ff ffa1 	bl	8005428 <std>
 80054e6:	2201      	movs	r2, #1
 80054e8:	2109      	movs	r1, #9
 80054ea:	68a0      	ldr	r0, [r4, #8]
 80054ec:	f7ff ff9c 	bl	8005428 <std>
 80054f0:	2202      	movs	r2, #2
 80054f2:	2112      	movs	r1, #18
 80054f4:	68e0      	ldr	r0, [r4, #12]
 80054f6:	f7ff ff97 	bl	8005428 <std>
 80054fa:	2301      	movs	r3, #1
 80054fc:	61a3      	str	r3, [r4, #24]
 80054fe:	bd10      	pop	{r4, pc}
 8005500:	08005fbc 	.word	0x08005fbc
 8005504:	08005471 	.word	0x08005471

08005508 <__sfp>:
 8005508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550a:	4b1b      	ldr	r3, [pc, #108]	; (8005578 <__sfp+0x70>)
 800550c:	681e      	ldr	r6, [r3, #0]
 800550e:	69b3      	ldr	r3, [r6, #24]
 8005510:	4607      	mov	r7, r0
 8005512:	b913      	cbnz	r3, 800551a <__sfp+0x12>
 8005514:	4630      	mov	r0, r6
 8005516:	f7ff ffc7 	bl	80054a8 <__sinit>
 800551a:	3648      	adds	r6, #72	; 0x48
 800551c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005520:	3b01      	subs	r3, #1
 8005522:	d503      	bpl.n	800552c <__sfp+0x24>
 8005524:	6833      	ldr	r3, [r6, #0]
 8005526:	b133      	cbz	r3, 8005536 <__sfp+0x2e>
 8005528:	6836      	ldr	r6, [r6, #0]
 800552a:	e7f7      	b.n	800551c <__sfp+0x14>
 800552c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005530:	b16d      	cbz	r5, 800554e <__sfp+0x46>
 8005532:	3468      	adds	r4, #104	; 0x68
 8005534:	e7f4      	b.n	8005520 <__sfp+0x18>
 8005536:	2104      	movs	r1, #4
 8005538:	4638      	mov	r0, r7
 800553a:	f7ff ff9f 	bl	800547c <__sfmoreglue>
 800553e:	6030      	str	r0, [r6, #0]
 8005540:	2800      	cmp	r0, #0
 8005542:	d1f1      	bne.n	8005528 <__sfp+0x20>
 8005544:	230c      	movs	r3, #12
 8005546:	603b      	str	r3, [r7, #0]
 8005548:	4604      	mov	r4, r0
 800554a:	4620      	mov	r0, r4
 800554c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800554e:	4b0b      	ldr	r3, [pc, #44]	; (800557c <__sfp+0x74>)
 8005550:	6665      	str	r5, [r4, #100]	; 0x64
 8005552:	e9c4 5500 	strd	r5, r5, [r4]
 8005556:	60a5      	str	r5, [r4, #8]
 8005558:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800555c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005560:	2208      	movs	r2, #8
 8005562:	4629      	mov	r1, r5
 8005564:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005568:	f7ff fd69 	bl	800503e <memset>
 800556c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005570:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005574:	e7e9      	b.n	800554a <__sfp+0x42>
 8005576:	bf00      	nop
 8005578:	08005fbc 	.word	0x08005fbc
 800557c:	ffff0001 	.word	0xffff0001

08005580 <_fwalk_reent>:
 8005580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005584:	4680      	mov	r8, r0
 8005586:	4689      	mov	r9, r1
 8005588:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800558c:	2600      	movs	r6, #0
 800558e:	b914      	cbnz	r4, 8005596 <_fwalk_reent+0x16>
 8005590:	4630      	mov	r0, r6
 8005592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005596:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800559a:	3f01      	subs	r7, #1
 800559c:	d501      	bpl.n	80055a2 <_fwalk_reent+0x22>
 800559e:	6824      	ldr	r4, [r4, #0]
 80055a0:	e7f5      	b.n	800558e <_fwalk_reent+0xe>
 80055a2:	89ab      	ldrh	r3, [r5, #12]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d907      	bls.n	80055b8 <_fwalk_reent+0x38>
 80055a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055ac:	3301      	adds	r3, #1
 80055ae:	d003      	beq.n	80055b8 <_fwalk_reent+0x38>
 80055b0:	4629      	mov	r1, r5
 80055b2:	4640      	mov	r0, r8
 80055b4:	47c8      	blx	r9
 80055b6:	4306      	orrs	r6, r0
 80055b8:	3568      	adds	r5, #104	; 0x68
 80055ba:	e7ee      	b.n	800559a <_fwalk_reent+0x1a>

080055bc <__swhatbuf_r>:
 80055bc:	b570      	push	{r4, r5, r6, lr}
 80055be:	460e      	mov	r6, r1
 80055c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055c4:	2900      	cmp	r1, #0
 80055c6:	b096      	sub	sp, #88	; 0x58
 80055c8:	4614      	mov	r4, r2
 80055ca:	461d      	mov	r5, r3
 80055cc:	da07      	bge.n	80055de <__swhatbuf_r+0x22>
 80055ce:	2300      	movs	r3, #0
 80055d0:	602b      	str	r3, [r5, #0]
 80055d2:	89b3      	ldrh	r3, [r6, #12]
 80055d4:	061a      	lsls	r2, r3, #24
 80055d6:	d410      	bmi.n	80055fa <__swhatbuf_r+0x3e>
 80055d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055dc:	e00e      	b.n	80055fc <__swhatbuf_r+0x40>
 80055de:	466a      	mov	r2, sp
 80055e0:	f000 fc36 	bl	8005e50 <_fstat_r>
 80055e4:	2800      	cmp	r0, #0
 80055e6:	dbf2      	blt.n	80055ce <__swhatbuf_r+0x12>
 80055e8:	9a01      	ldr	r2, [sp, #4]
 80055ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80055ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80055f2:	425a      	negs	r2, r3
 80055f4:	415a      	adcs	r2, r3
 80055f6:	602a      	str	r2, [r5, #0]
 80055f8:	e7ee      	b.n	80055d8 <__swhatbuf_r+0x1c>
 80055fa:	2340      	movs	r3, #64	; 0x40
 80055fc:	2000      	movs	r0, #0
 80055fe:	6023      	str	r3, [r4, #0]
 8005600:	b016      	add	sp, #88	; 0x58
 8005602:	bd70      	pop	{r4, r5, r6, pc}

08005604 <__smakebuf_r>:
 8005604:	898b      	ldrh	r3, [r1, #12]
 8005606:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005608:	079d      	lsls	r5, r3, #30
 800560a:	4606      	mov	r6, r0
 800560c:	460c      	mov	r4, r1
 800560e:	d507      	bpl.n	8005620 <__smakebuf_r+0x1c>
 8005610:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005614:	6023      	str	r3, [r4, #0]
 8005616:	6123      	str	r3, [r4, #16]
 8005618:	2301      	movs	r3, #1
 800561a:	6163      	str	r3, [r4, #20]
 800561c:	b002      	add	sp, #8
 800561e:	bd70      	pop	{r4, r5, r6, pc}
 8005620:	ab01      	add	r3, sp, #4
 8005622:	466a      	mov	r2, sp
 8005624:	f7ff ffca 	bl	80055bc <__swhatbuf_r>
 8005628:	9900      	ldr	r1, [sp, #0]
 800562a:	4605      	mov	r5, r0
 800562c:	4630      	mov	r0, r6
 800562e:	f000 f877 	bl	8005720 <_malloc_r>
 8005632:	b948      	cbnz	r0, 8005648 <__smakebuf_r+0x44>
 8005634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005638:	059a      	lsls	r2, r3, #22
 800563a:	d4ef      	bmi.n	800561c <__smakebuf_r+0x18>
 800563c:	f023 0303 	bic.w	r3, r3, #3
 8005640:	f043 0302 	orr.w	r3, r3, #2
 8005644:	81a3      	strh	r3, [r4, #12]
 8005646:	e7e3      	b.n	8005610 <__smakebuf_r+0xc>
 8005648:	4b0d      	ldr	r3, [pc, #52]	; (8005680 <__smakebuf_r+0x7c>)
 800564a:	62b3      	str	r3, [r6, #40]	; 0x28
 800564c:	89a3      	ldrh	r3, [r4, #12]
 800564e:	6020      	str	r0, [r4, #0]
 8005650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005654:	81a3      	strh	r3, [r4, #12]
 8005656:	9b00      	ldr	r3, [sp, #0]
 8005658:	6163      	str	r3, [r4, #20]
 800565a:	9b01      	ldr	r3, [sp, #4]
 800565c:	6120      	str	r0, [r4, #16]
 800565e:	b15b      	cbz	r3, 8005678 <__smakebuf_r+0x74>
 8005660:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005664:	4630      	mov	r0, r6
 8005666:	f000 fc05 	bl	8005e74 <_isatty_r>
 800566a:	b128      	cbz	r0, 8005678 <__smakebuf_r+0x74>
 800566c:	89a3      	ldrh	r3, [r4, #12]
 800566e:	f023 0303 	bic.w	r3, r3, #3
 8005672:	f043 0301 	orr.w	r3, r3, #1
 8005676:	81a3      	strh	r3, [r4, #12]
 8005678:	89a3      	ldrh	r3, [r4, #12]
 800567a:	431d      	orrs	r5, r3
 800567c:	81a5      	strh	r5, [r4, #12]
 800567e:	e7cd      	b.n	800561c <__smakebuf_r+0x18>
 8005680:	08005471 	.word	0x08005471

08005684 <_free_r>:
 8005684:	b538      	push	{r3, r4, r5, lr}
 8005686:	4605      	mov	r5, r0
 8005688:	2900      	cmp	r1, #0
 800568a:	d045      	beq.n	8005718 <_free_r+0x94>
 800568c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005690:	1f0c      	subs	r4, r1, #4
 8005692:	2b00      	cmp	r3, #0
 8005694:	bfb8      	it	lt
 8005696:	18e4      	addlt	r4, r4, r3
 8005698:	f000 fc0e 	bl	8005eb8 <__malloc_lock>
 800569c:	4a1f      	ldr	r2, [pc, #124]	; (800571c <_free_r+0x98>)
 800569e:	6813      	ldr	r3, [r2, #0]
 80056a0:	4610      	mov	r0, r2
 80056a2:	b933      	cbnz	r3, 80056b2 <_free_r+0x2e>
 80056a4:	6063      	str	r3, [r4, #4]
 80056a6:	6014      	str	r4, [r2, #0]
 80056a8:	4628      	mov	r0, r5
 80056aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056ae:	f000 bc04 	b.w	8005eba <__malloc_unlock>
 80056b2:	42a3      	cmp	r3, r4
 80056b4:	d90c      	bls.n	80056d0 <_free_r+0x4c>
 80056b6:	6821      	ldr	r1, [r4, #0]
 80056b8:	1862      	adds	r2, r4, r1
 80056ba:	4293      	cmp	r3, r2
 80056bc:	bf04      	itt	eq
 80056be:	681a      	ldreq	r2, [r3, #0]
 80056c0:	685b      	ldreq	r3, [r3, #4]
 80056c2:	6063      	str	r3, [r4, #4]
 80056c4:	bf04      	itt	eq
 80056c6:	1852      	addeq	r2, r2, r1
 80056c8:	6022      	streq	r2, [r4, #0]
 80056ca:	6004      	str	r4, [r0, #0]
 80056cc:	e7ec      	b.n	80056a8 <_free_r+0x24>
 80056ce:	4613      	mov	r3, r2
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	b10a      	cbz	r2, 80056d8 <_free_r+0x54>
 80056d4:	42a2      	cmp	r2, r4
 80056d6:	d9fa      	bls.n	80056ce <_free_r+0x4a>
 80056d8:	6819      	ldr	r1, [r3, #0]
 80056da:	1858      	adds	r0, r3, r1
 80056dc:	42a0      	cmp	r0, r4
 80056de:	d10b      	bne.n	80056f8 <_free_r+0x74>
 80056e0:	6820      	ldr	r0, [r4, #0]
 80056e2:	4401      	add	r1, r0
 80056e4:	1858      	adds	r0, r3, r1
 80056e6:	4282      	cmp	r2, r0
 80056e8:	6019      	str	r1, [r3, #0]
 80056ea:	d1dd      	bne.n	80056a8 <_free_r+0x24>
 80056ec:	6810      	ldr	r0, [r2, #0]
 80056ee:	6852      	ldr	r2, [r2, #4]
 80056f0:	605a      	str	r2, [r3, #4]
 80056f2:	4401      	add	r1, r0
 80056f4:	6019      	str	r1, [r3, #0]
 80056f6:	e7d7      	b.n	80056a8 <_free_r+0x24>
 80056f8:	d902      	bls.n	8005700 <_free_r+0x7c>
 80056fa:	230c      	movs	r3, #12
 80056fc:	602b      	str	r3, [r5, #0]
 80056fe:	e7d3      	b.n	80056a8 <_free_r+0x24>
 8005700:	6820      	ldr	r0, [r4, #0]
 8005702:	1821      	adds	r1, r4, r0
 8005704:	428a      	cmp	r2, r1
 8005706:	bf04      	itt	eq
 8005708:	6811      	ldreq	r1, [r2, #0]
 800570a:	6852      	ldreq	r2, [r2, #4]
 800570c:	6062      	str	r2, [r4, #4]
 800570e:	bf04      	itt	eq
 8005710:	1809      	addeq	r1, r1, r0
 8005712:	6021      	streq	r1, [r4, #0]
 8005714:	605c      	str	r4, [r3, #4]
 8005716:	e7c7      	b.n	80056a8 <_free_r+0x24>
 8005718:	bd38      	pop	{r3, r4, r5, pc}
 800571a:	bf00      	nop
 800571c:	200002cc 	.word	0x200002cc

08005720 <_malloc_r>:
 8005720:	b570      	push	{r4, r5, r6, lr}
 8005722:	1ccd      	adds	r5, r1, #3
 8005724:	f025 0503 	bic.w	r5, r5, #3
 8005728:	3508      	adds	r5, #8
 800572a:	2d0c      	cmp	r5, #12
 800572c:	bf38      	it	cc
 800572e:	250c      	movcc	r5, #12
 8005730:	2d00      	cmp	r5, #0
 8005732:	4606      	mov	r6, r0
 8005734:	db01      	blt.n	800573a <_malloc_r+0x1a>
 8005736:	42a9      	cmp	r1, r5
 8005738:	d903      	bls.n	8005742 <_malloc_r+0x22>
 800573a:	230c      	movs	r3, #12
 800573c:	6033      	str	r3, [r6, #0]
 800573e:	2000      	movs	r0, #0
 8005740:	bd70      	pop	{r4, r5, r6, pc}
 8005742:	f000 fbb9 	bl	8005eb8 <__malloc_lock>
 8005746:	4a21      	ldr	r2, [pc, #132]	; (80057cc <_malloc_r+0xac>)
 8005748:	6814      	ldr	r4, [r2, #0]
 800574a:	4621      	mov	r1, r4
 800574c:	b991      	cbnz	r1, 8005774 <_malloc_r+0x54>
 800574e:	4c20      	ldr	r4, [pc, #128]	; (80057d0 <_malloc_r+0xb0>)
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	b91b      	cbnz	r3, 800575c <_malloc_r+0x3c>
 8005754:	4630      	mov	r0, r6
 8005756:	f000 fb05 	bl	8005d64 <_sbrk_r>
 800575a:	6020      	str	r0, [r4, #0]
 800575c:	4629      	mov	r1, r5
 800575e:	4630      	mov	r0, r6
 8005760:	f000 fb00 	bl	8005d64 <_sbrk_r>
 8005764:	1c43      	adds	r3, r0, #1
 8005766:	d124      	bne.n	80057b2 <_malloc_r+0x92>
 8005768:	230c      	movs	r3, #12
 800576a:	6033      	str	r3, [r6, #0]
 800576c:	4630      	mov	r0, r6
 800576e:	f000 fba4 	bl	8005eba <__malloc_unlock>
 8005772:	e7e4      	b.n	800573e <_malloc_r+0x1e>
 8005774:	680b      	ldr	r3, [r1, #0]
 8005776:	1b5b      	subs	r3, r3, r5
 8005778:	d418      	bmi.n	80057ac <_malloc_r+0x8c>
 800577a:	2b0b      	cmp	r3, #11
 800577c:	d90f      	bls.n	800579e <_malloc_r+0x7e>
 800577e:	600b      	str	r3, [r1, #0]
 8005780:	50cd      	str	r5, [r1, r3]
 8005782:	18cc      	adds	r4, r1, r3
 8005784:	4630      	mov	r0, r6
 8005786:	f000 fb98 	bl	8005eba <__malloc_unlock>
 800578a:	f104 000b 	add.w	r0, r4, #11
 800578e:	1d23      	adds	r3, r4, #4
 8005790:	f020 0007 	bic.w	r0, r0, #7
 8005794:	1ac3      	subs	r3, r0, r3
 8005796:	d0d3      	beq.n	8005740 <_malloc_r+0x20>
 8005798:	425a      	negs	r2, r3
 800579a:	50e2      	str	r2, [r4, r3]
 800579c:	e7d0      	b.n	8005740 <_malloc_r+0x20>
 800579e:	428c      	cmp	r4, r1
 80057a0:	684b      	ldr	r3, [r1, #4]
 80057a2:	bf16      	itet	ne
 80057a4:	6063      	strne	r3, [r4, #4]
 80057a6:	6013      	streq	r3, [r2, #0]
 80057a8:	460c      	movne	r4, r1
 80057aa:	e7eb      	b.n	8005784 <_malloc_r+0x64>
 80057ac:	460c      	mov	r4, r1
 80057ae:	6849      	ldr	r1, [r1, #4]
 80057b0:	e7cc      	b.n	800574c <_malloc_r+0x2c>
 80057b2:	1cc4      	adds	r4, r0, #3
 80057b4:	f024 0403 	bic.w	r4, r4, #3
 80057b8:	42a0      	cmp	r0, r4
 80057ba:	d005      	beq.n	80057c8 <_malloc_r+0xa8>
 80057bc:	1a21      	subs	r1, r4, r0
 80057be:	4630      	mov	r0, r6
 80057c0:	f000 fad0 	bl	8005d64 <_sbrk_r>
 80057c4:	3001      	adds	r0, #1
 80057c6:	d0cf      	beq.n	8005768 <_malloc_r+0x48>
 80057c8:	6025      	str	r5, [r4, #0]
 80057ca:	e7db      	b.n	8005784 <_malloc_r+0x64>
 80057cc:	200002cc 	.word	0x200002cc
 80057d0:	200002d0 	.word	0x200002d0

080057d4 <__sfputc_r>:
 80057d4:	6893      	ldr	r3, [r2, #8]
 80057d6:	3b01      	subs	r3, #1
 80057d8:	2b00      	cmp	r3, #0
 80057da:	b410      	push	{r4}
 80057dc:	6093      	str	r3, [r2, #8]
 80057de:	da08      	bge.n	80057f2 <__sfputc_r+0x1e>
 80057e0:	6994      	ldr	r4, [r2, #24]
 80057e2:	42a3      	cmp	r3, r4
 80057e4:	db01      	blt.n	80057ea <__sfputc_r+0x16>
 80057e6:	290a      	cmp	r1, #10
 80057e8:	d103      	bne.n	80057f2 <__sfputc_r+0x1e>
 80057ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057ee:	f7ff bcab 	b.w	8005148 <__swbuf_r>
 80057f2:	6813      	ldr	r3, [r2, #0]
 80057f4:	1c58      	adds	r0, r3, #1
 80057f6:	6010      	str	r0, [r2, #0]
 80057f8:	7019      	strb	r1, [r3, #0]
 80057fa:	4608      	mov	r0, r1
 80057fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005800:	4770      	bx	lr

08005802 <__sfputs_r>:
 8005802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005804:	4606      	mov	r6, r0
 8005806:	460f      	mov	r7, r1
 8005808:	4614      	mov	r4, r2
 800580a:	18d5      	adds	r5, r2, r3
 800580c:	42ac      	cmp	r4, r5
 800580e:	d101      	bne.n	8005814 <__sfputs_r+0x12>
 8005810:	2000      	movs	r0, #0
 8005812:	e007      	b.n	8005824 <__sfputs_r+0x22>
 8005814:	463a      	mov	r2, r7
 8005816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800581a:	4630      	mov	r0, r6
 800581c:	f7ff ffda 	bl	80057d4 <__sfputc_r>
 8005820:	1c43      	adds	r3, r0, #1
 8005822:	d1f3      	bne.n	800580c <__sfputs_r+0xa>
 8005824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005828 <_vfiprintf_r>:
 8005828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800582c:	460c      	mov	r4, r1
 800582e:	b09d      	sub	sp, #116	; 0x74
 8005830:	4617      	mov	r7, r2
 8005832:	461d      	mov	r5, r3
 8005834:	4606      	mov	r6, r0
 8005836:	b118      	cbz	r0, 8005840 <_vfiprintf_r+0x18>
 8005838:	6983      	ldr	r3, [r0, #24]
 800583a:	b90b      	cbnz	r3, 8005840 <_vfiprintf_r+0x18>
 800583c:	f7ff fe34 	bl	80054a8 <__sinit>
 8005840:	4b7c      	ldr	r3, [pc, #496]	; (8005a34 <_vfiprintf_r+0x20c>)
 8005842:	429c      	cmp	r4, r3
 8005844:	d158      	bne.n	80058f8 <_vfiprintf_r+0xd0>
 8005846:	6874      	ldr	r4, [r6, #4]
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	0718      	lsls	r0, r3, #28
 800584c:	d55e      	bpl.n	800590c <_vfiprintf_r+0xe4>
 800584e:	6923      	ldr	r3, [r4, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d05b      	beq.n	800590c <_vfiprintf_r+0xe4>
 8005854:	2300      	movs	r3, #0
 8005856:	9309      	str	r3, [sp, #36]	; 0x24
 8005858:	2320      	movs	r3, #32
 800585a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800585e:	2330      	movs	r3, #48	; 0x30
 8005860:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005864:	9503      	str	r5, [sp, #12]
 8005866:	f04f 0b01 	mov.w	fp, #1
 800586a:	46b8      	mov	r8, r7
 800586c:	4645      	mov	r5, r8
 800586e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005872:	b10b      	cbz	r3, 8005878 <_vfiprintf_r+0x50>
 8005874:	2b25      	cmp	r3, #37	; 0x25
 8005876:	d154      	bne.n	8005922 <_vfiprintf_r+0xfa>
 8005878:	ebb8 0a07 	subs.w	sl, r8, r7
 800587c:	d00b      	beq.n	8005896 <_vfiprintf_r+0x6e>
 800587e:	4653      	mov	r3, sl
 8005880:	463a      	mov	r2, r7
 8005882:	4621      	mov	r1, r4
 8005884:	4630      	mov	r0, r6
 8005886:	f7ff ffbc 	bl	8005802 <__sfputs_r>
 800588a:	3001      	adds	r0, #1
 800588c:	f000 80c2 	beq.w	8005a14 <_vfiprintf_r+0x1ec>
 8005890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005892:	4453      	add	r3, sl
 8005894:	9309      	str	r3, [sp, #36]	; 0x24
 8005896:	f898 3000 	ldrb.w	r3, [r8]
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 80ba 	beq.w	8005a14 <_vfiprintf_r+0x1ec>
 80058a0:	2300      	movs	r3, #0
 80058a2:	f04f 32ff 	mov.w	r2, #4294967295
 80058a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058aa:	9304      	str	r3, [sp, #16]
 80058ac:	9307      	str	r3, [sp, #28]
 80058ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058b2:	931a      	str	r3, [sp, #104]	; 0x68
 80058b4:	46a8      	mov	r8, r5
 80058b6:	2205      	movs	r2, #5
 80058b8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80058bc:	485e      	ldr	r0, [pc, #376]	; (8005a38 <_vfiprintf_r+0x210>)
 80058be:	f7fa fc87 	bl	80001d0 <memchr>
 80058c2:	9b04      	ldr	r3, [sp, #16]
 80058c4:	bb78      	cbnz	r0, 8005926 <_vfiprintf_r+0xfe>
 80058c6:	06d9      	lsls	r1, r3, #27
 80058c8:	bf44      	itt	mi
 80058ca:	2220      	movmi	r2, #32
 80058cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80058d0:	071a      	lsls	r2, r3, #28
 80058d2:	bf44      	itt	mi
 80058d4:	222b      	movmi	r2, #43	; 0x2b
 80058d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80058da:	782a      	ldrb	r2, [r5, #0]
 80058dc:	2a2a      	cmp	r2, #42	; 0x2a
 80058de:	d02a      	beq.n	8005936 <_vfiprintf_r+0x10e>
 80058e0:	9a07      	ldr	r2, [sp, #28]
 80058e2:	46a8      	mov	r8, r5
 80058e4:	2000      	movs	r0, #0
 80058e6:	250a      	movs	r5, #10
 80058e8:	4641      	mov	r1, r8
 80058ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058ee:	3b30      	subs	r3, #48	; 0x30
 80058f0:	2b09      	cmp	r3, #9
 80058f2:	d969      	bls.n	80059c8 <_vfiprintf_r+0x1a0>
 80058f4:	b360      	cbz	r0, 8005950 <_vfiprintf_r+0x128>
 80058f6:	e024      	b.n	8005942 <_vfiprintf_r+0x11a>
 80058f8:	4b50      	ldr	r3, [pc, #320]	; (8005a3c <_vfiprintf_r+0x214>)
 80058fa:	429c      	cmp	r4, r3
 80058fc:	d101      	bne.n	8005902 <_vfiprintf_r+0xda>
 80058fe:	68b4      	ldr	r4, [r6, #8]
 8005900:	e7a2      	b.n	8005848 <_vfiprintf_r+0x20>
 8005902:	4b4f      	ldr	r3, [pc, #316]	; (8005a40 <_vfiprintf_r+0x218>)
 8005904:	429c      	cmp	r4, r3
 8005906:	bf08      	it	eq
 8005908:	68f4      	ldreq	r4, [r6, #12]
 800590a:	e79d      	b.n	8005848 <_vfiprintf_r+0x20>
 800590c:	4621      	mov	r1, r4
 800590e:	4630      	mov	r0, r6
 8005910:	f7ff fc6c 	bl	80051ec <__swsetup_r>
 8005914:	2800      	cmp	r0, #0
 8005916:	d09d      	beq.n	8005854 <_vfiprintf_r+0x2c>
 8005918:	f04f 30ff 	mov.w	r0, #4294967295
 800591c:	b01d      	add	sp, #116	; 0x74
 800591e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005922:	46a8      	mov	r8, r5
 8005924:	e7a2      	b.n	800586c <_vfiprintf_r+0x44>
 8005926:	4a44      	ldr	r2, [pc, #272]	; (8005a38 <_vfiprintf_r+0x210>)
 8005928:	1a80      	subs	r0, r0, r2
 800592a:	fa0b f000 	lsl.w	r0, fp, r0
 800592e:	4318      	orrs	r0, r3
 8005930:	9004      	str	r0, [sp, #16]
 8005932:	4645      	mov	r5, r8
 8005934:	e7be      	b.n	80058b4 <_vfiprintf_r+0x8c>
 8005936:	9a03      	ldr	r2, [sp, #12]
 8005938:	1d11      	adds	r1, r2, #4
 800593a:	6812      	ldr	r2, [r2, #0]
 800593c:	9103      	str	r1, [sp, #12]
 800593e:	2a00      	cmp	r2, #0
 8005940:	db01      	blt.n	8005946 <_vfiprintf_r+0x11e>
 8005942:	9207      	str	r2, [sp, #28]
 8005944:	e004      	b.n	8005950 <_vfiprintf_r+0x128>
 8005946:	4252      	negs	r2, r2
 8005948:	f043 0302 	orr.w	r3, r3, #2
 800594c:	9207      	str	r2, [sp, #28]
 800594e:	9304      	str	r3, [sp, #16]
 8005950:	f898 3000 	ldrb.w	r3, [r8]
 8005954:	2b2e      	cmp	r3, #46	; 0x2e
 8005956:	d10e      	bne.n	8005976 <_vfiprintf_r+0x14e>
 8005958:	f898 3001 	ldrb.w	r3, [r8, #1]
 800595c:	2b2a      	cmp	r3, #42	; 0x2a
 800595e:	d138      	bne.n	80059d2 <_vfiprintf_r+0x1aa>
 8005960:	9b03      	ldr	r3, [sp, #12]
 8005962:	1d1a      	adds	r2, r3, #4
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	9203      	str	r2, [sp, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	bfb8      	it	lt
 800596c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005970:	f108 0802 	add.w	r8, r8, #2
 8005974:	9305      	str	r3, [sp, #20]
 8005976:	4d33      	ldr	r5, [pc, #204]	; (8005a44 <_vfiprintf_r+0x21c>)
 8005978:	f898 1000 	ldrb.w	r1, [r8]
 800597c:	2203      	movs	r2, #3
 800597e:	4628      	mov	r0, r5
 8005980:	f7fa fc26 	bl	80001d0 <memchr>
 8005984:	b140      	cbz	r0, 8005998 <_vfiprintf_r+0x170>
 8005986:	2340      	movs	r3, #64	; 0x40
 8005988:	1b40      	subs	r0, r0, r5
 800598a:	fa03 f000 	lsl.w	r0, r3, r0
 800598e:	9b04      	ldr	r3, [sp, #16]
 8005990:	4303      	orrs	r3, r0
 8005992:	f108 0801 	add.w	r8, r8, #1
 8005996:	9304      	str	r3, [sp, #16]
 8005998:	f898 1000 	ldrb.w	r1, [r8]
 800599c:	482a      	ldr	r0, [pc, #168]	; (8005a48 <_vfiprintf_r+0x220>)
 800599e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059a2:	2206      	movs	r2, #6
 80059a4:	f108 0701 	add.w	r7, r8, #1
 80059a8:	f7fa fc12 	bl	80001d0 <memchr>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	d037      	beq.n	8005a20 <_vfiprintf_r+0x1f8>
 80059b0:	4b26      	ldr	r3, [pc, #152]	; (8005a4c <_vfiprintf_r+0x224>)
 80059b2:	bb1b      	cbnz	r3, 80059fc <_vfiprintf_r+0x1d4>
 80059b4:	9b03      	ldr	r3, [sp, #12]
 80059b6:	3307      	adds	r3, #7
 80059b8:	f023 0307 	bic.w	r3, r3, #7
 80059bc:	3308      	adds	r3, #8
 80059be:	9303      	str	r3, [sp, #12]
 80059c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059c2:	444b      	add	r3, r9
 80059c4:	9309      	str	r3, [sp, #36]	; 0x24
 80059c6:	e750      	b.n	800586a <_vfiprintf_r+0x42>
 80059c8:	fb05 3202 	mla	r2, r5, r2, r3
 80059cc:	2001      	movs	r0, #1
 80059ce:	4688      	mov	r8, r1
 80059d0:	e78a      	b.n	80058e8 <_vfiprintf_r+0xc0>
 80059d2:	2300      	movs	r3, #0
 80059d4:	f108 0801 	add.w	r8, r8, #1
 80059d8:	9305      	str	r3, [sp, #20]
 80059da:	4619      	mov	r1, r3
 80059dc:	250a      	movs	r5, #10
 80059de:	4640      	mov	r0, r8
 80059e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059e4:	3a30      	subs	r2, #48	; 0x30
 80059e6:	2a09      	cmp	r2, #9
 80059e8:	d903      	bls.n	80059f2 <_vfiprintf_r+0x1ca>
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0c3      	beq.n	8005976 <_vfiprintf_r+0x14e>
 80059ee:	9105      	str	r1, [sp, #20]
 80059f0:	e7c1      	b.n	8005976 <_vfiprintf_r+0x14e>
 80059f2:	fb05 2101 	mla	r1, r5, r1, r2
 80059f6:	2301      	movs	r3, #1
 80059f8:	4680      	mov	r8, r0
 80059fa:	e7f0      	b.n	80059de <_vfiprintf_r+0x1b6>
 80059fc:	ab03      	add	r3, sp, #12
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	4622      	mov	r2, r4
 8005a02:	4b13      	ldr	r3, [pc, #76]	; (8005a50 <_vfiprintf_r+0x228>)
 8005a04:	a904      	add	r1, sp, #16
 8005a06:	4630      	mov	r0, r6
 8005a08:	f3af 8000 	nop.w
 8005a0c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005a10:	4681      	mov	r9, r0
 8005a12:	d1d5      	bne.n	80059c0 <_vfiprintf_r+0x198>
 8005a14:	89a3      	ldrh	r3, [r4, #12]
 8005a16:	065b      	lsls	r3, r3, #25
 8005a18:	f53f af7e 	bmi.w	8005918 <_vfiprintf_r+0xf0>
 8005a1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a1e:	e77d      	b.n	800591c <_vfiprintf_r+0xf4>
 8005a20:	ab03      	add	r3, sp, #12
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	4622      	mov	r2, r4
 8005a26:	4b0a      	ldr	r3, [pc, #40]	; (8005a50 <_vfiprintf_r+0x228>)
 8005a28:	a904      	add	r1, sp, #16
 8005a2a:	4630      	mov	r0, r6
 8005a2c:	f000 f888 	bl	8005b40 <_printf_i>
 8005a30:	e7ec      	b.n	8005a0c <_vfiprintf_r+0x1e4>
 8005a32:	bf00      	nop
 8005a34:	08005fe0 	.word	0x08005fe0
 8005a38:	08006020 	.word	0x08006020
 8005a3c:	08006000 	.word	0x08006000
 8005a40:	08005fc0 	.word	0x08005fc0
 8005a44:	08006026 	.word	0x08006026
 8005a48:	0800602a 	.word	0x0800602a
 8005a4c:	00000000 	.word	0x00000000
 8005a50:	08005803 	.word	0x08005803

08005a54 <_printf_common>:
 8005a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a58:	4691      	mov	r9, r2
 8005a5a:	461f      	mov	r7, r3
 8005a5c:	688a      	ldr	r2, [r1, #8]
 8005a5e:	690b      	ldr	r3, [r1, #16]
 8005a60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a64:	4293      	cmp	r3, r2
 8005a66:	bfb8      	it	lt
 8005a68:	4613      	movlt	r3, r2
 8005a6a:	f8c9 3000 	str.w	r3, [r9]
 8005a6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a72:	4606      	mov	r6, r0
 8005a74:	460c      	mov	r4, r1
 8005a76:	b112      	cbz	r2, 8005a7e <_printf_common+0x2a>
 8005a78:	3301      	adds	r3, #1
 8005a7a:	f8c9 3000 	str.w	r3, [r9]
 8005a7e:	6823      	ldr	r3, [r4, #0]
 8005a80:	0699      	lsls	r1, r3, #26
 8005a82:	bf42      	ittt	mi
 8005a84:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005a88:	3302      	addmi	r3, #2
 8005a8a:	f8c9 3000 	strmi.w	r3, [r9]
 8005a8e:	6825      	ldr	r5, [r4, #0]
 8005a90:	f015 0506 	ands.w	r5, r5, #6
 8005a94:	d107      	bne.n	8005aa6 <_printf_common+0x52>
 8005a96:	f104 0a19 	add.w	sl, r4, #25
 8005a9a:	68e3      	ldr	r3, [r4, #12]
 8005a9c:	f8d9 2000 	ldr.w	r2, [r9]
 8005aa0:	1a9b      	subs	r3, r3, r2
 8005aa2:	42ab      	cmp	r3, r5
 8005aa4:	dc28      	bgt.n	8005af8 <_printf_common+0xa4>
 8005aa6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005aaa:	6822      	ldr	r2, [r4, #0]
 8005aac:	3300      	adds	r3, #0
 8005aae:	bf18      	it	ne
 8005ab0:	2301      	movne	r3, #1
 8005ab2:	0692      	lsls	r2, r2, #26
 8005ab4:	d42d      	bmi.n	8005b12 <_printf_common+0xbe>
 8005ab6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005aba:	4639      	mov	r1, r7
 8005abc:	4630      	mov	r0, r6
 8005abe:	47c0      	blx	r8
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	d020      	beq.n	8005b06 <_printf_common+0xb2>
 8005ac4:	6823      	ldr	r3, [r4, #0]
 8005ac6:	68e5      	ldr	r5, [r4, #12]
 8005ac8:	f8d9 2000 	ldr.w	r2, [r9]
 8005acc:	f003 0306 	and.w	r3, r3, #6
 8005ad0:	2b04      	cmp	r3, #4
 8005ad2:	bf08      	it	eq
 8005ad4:	1aad      	subeq	r5, r5, r2
 8005ad6:	68a3      	ldr	r3, [r4, #8]
 8005ad8:	6922      	ldr	r2, [r4, #16]
 8005ada:	bf0c      	ite	eq
 8005adc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ae0:	2500      	movne	r5, #0
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	bfc4      	itt	gt
 8005ae6:	1a9b      	subgt	r3, r3, r2
 8005ae8:	18ed      	addgt	r5, r5, r3
 8005aea:	f04f 0900 	mov.w	r9, #0
 8005aee:	341a      	adds	r4, #26
 8005af0:	454d      	cmp	r5, r9
 8005af2:	d11a      	bne.n	8005b2a <_printf_common+0xd6>
 8005af4:	2000      	movs	r0, #0
 8005af6:	e008      	b.n	8005b0a <_printf_common+0xb6>
 8005af8:	2301      	movs	r3, #1
 8005afa:	4652      	mov	r2, sl
 8005afc:	4639      	mov	r1, r7
 8005afe:	4630      	mov	r0, r6
 8005b00:	47c0      	blx	r8
 8005b02:	3001      	adds	r0, #1
 8005b04:	d103      	bne.n	8005b0e <_printf_common+0xba>
 8005b06:	f04f 30ff 	mov.w	r0, #4294967295
 8005b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b0e:	3501      	adds	r5, #1
 8005b10:	e7c3      	b.n	8005a9a <_printf_common+0x46>
 8005b12:	18e1      	adds	r1, r4, r3
 8005b14:	1c5a      	adds	r2, r3, #1
 8005b16:	2030      	movs	r0, #48	; 0x30
 8005b18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b1c:	4422      	add	r2, r4
 8005b1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b26:	3302      	adds	r3, #2
 8005b28:	e7c5      	b.n	8005ab6 <_printf_common+0x62>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	4622      	mov	r2, r4
 8005b2e:	4639      	mov	r1, r7
 8005b30:	4630      	mov	r0, r6
 8005b32:	47c0      	blx	r8
 8005b34:	3001      	adds	r0, #1
 8005b36:	d0e6      	beq.n	8005b06 <_printf_common+0xb2>
 8005b38:	f109 0901 	add.w	r9, r9, #1
 8005b3c:	e7d8      	b.n	8005af0 <_printf_common+0x9c>
	...

08005b40 <_printf_i>:
 8005b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b44:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005b48:	460c      	mov	r4, r1
 8005b4a:	7e09      	ldrb	r1, [r1, #24]
 8005b4c:	b085      	sub	sp, #20
 8005b4e:	296e      	cmp	r1, #110	; 0x6e
 8005b50:	4617      	mov	r7, r2
 8005b52:	4606      	mov	r6, r0
 8005b54:	4698      	mov	r8, r3
 8005b56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b58:	f000 80b3 	beq.w	8005cc2 <_printf_i+0x182>
 8005b5c:	d822      	bhi.n	8005ba4 <_printf_i+0x64>
 8005b5e:	2963      	cmp	r1, #99	; 0x63
 8005b60:	d036      	beq.n	8005bd0 <_printf_i+0x90>
 8005b62:	d80a      	bhi.n	8005b7a <_printf_i+0x3a>
 8005b64:	2900      	cmp	r1, #0
 8005b66:	f000 80b9 	beq.w	8005cdc <_printf_i+0x19c>
 8005b6a:	2958      	cmp	r1, #88	; 0x58
 8005b6c:	f000 8083 	beq.w	8005c76 <_printf_i+0x136>
 8005b70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b74:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005b78:	e032      	b.n	8005be0 <_printf_i+0xa0>
 8005b7a:	2964      	cmp	r1, #100	; 0x64
 8005b7c:	d001      	beq.n	8005b82 <_printf_i+0x42>
 8005b7e:	2969      	cmp	r1, #105	; 0x69
 8005b80:	d1f6      	bne.n	8005b70 <_printf_i+0x30>
 8005b82:	6820      	ldr	r0, [r4, #0]
 8005b84:	6813      	ldr	r3, [r2, #0]
 8005b86:	0605      	lsls	r5, r0, #24
 8005b88:	f103 0104 	add.w	r1, r3, #4
 8005b8c:	d52a      	bpl.n	8005be4 <_printf_i+0xa4>
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6011      	str	r1, [r2, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	da03      	bge.n	8005b9e <_printf_i+0x5e>
 8005b96:	222d      	movs	r2, #45	; 0x2d
 8005b98:	425b      	negs	r3, r3
 8005b9a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005b9e:	486f      	ldr	r0, [pc, #444]	; (8005d5c <_printf_i+0x21c>)
 8005ba0:	220a      	movs	r2, #10
 8005ba2:	e039      	b.n	8005c18 <_printf_i+0xd8>
 8005ba4:	2973      	cmp	r1, #115	; 0x73
 8005ba6:	f000 809d 	beq.w	8005ce4 <_printf_i+0x1a4>
 8005baa:	d808      	bhi.n	8005bbe <_printf_i+0x7e>
 8005bac:	296f      	cmp	r1, #111	; 0x6f
 8005bae:	d020      	beq.n	8005bf2 <_printf_i+0xb2>
 8005bb0:	2970      	cmp	r1, #112	; 0x70
 8005bb2:	d1dd      	bne.n	8005b70 <_printf_i+0x30>
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	f043 0320 	orr.w	r3, r3, #32
 8005bba:	6023      	str	r3, [r4, #0]
 8005bbc:	e003      	b.n	8005bc6 <_printf_i+0x86>
 8005bbe:	2975      	cmp	r1, #117	; 0x75
 8005bc0:	d017      	beq.n	8005bf2 <_printf_i+0xb2>
 8005bc2:	2978      	cmp	r1, #120	; 0x78
 8005bc4:	d1d4      	bne.n	8005b70 <_printf_i+0x30>
 8005bc6:	2378      	movs	r3, #120	; 0x78
 8005bc8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005bcc:	4864      	ldr	r0, [pc, #400]	; (8005d60 <_printf_i+0x220>)
 8005bce:	e055      	b.n	8005c7c <_printf_i+0x13c>
 8005bd0:	6813      	ldr	r3, [r2, #0]
 8005bd2:	1d19      	adds	r1, r3, #4
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6011      	str	r1, [r2, #0]
 8005bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005be0:	2301      	movs	r3, #1
 8005be2:	e08c      	b.n	8005cfe <_printf_i+0x1be>
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6011      	str	r1, [r2, #0]
 8005be8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bec:	bf18      	it	ne
 8005bee:	b21b      	sxthne	r3, r3
 8005bf0:	e7cf      	b.n	8005b92 <_printf_i+0x52>
 8005bf2:	6813      	ldr	r3, [r2, #0]
 8005bf4:	6825      	ldr	r5, [r4, #0]
 8005bf6:	1d18      	adds	r0, r3, #4
 8005bf8:	6010      	str	r0, [r2, #0]
 8005bfa:	0628      	lsls	r0, r5, #24
 8005bfc:	d501      	bpl.n	8005c02 <_printf_i+0xc2>
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	e002      	b.n	8005c08 <_printf_i+0xc8>
 8005c02:	0668      	lsls	r0, r5, #25
 8005c04:	d5fb      	bpl.n	8005bfe <_printf_i+0xbe>
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	4854      	ldr	r0, [pc, #336]	; (8005d5c <_printf_i+0x21c>)
 8005c0a:	296f      	cmp	r1, #111	; 0x6f
 8005c0c:	bf14      	ite	ne
 8005c0e:	220a      	movne	r2, #10
 8005c10:	2208      	moveq	r2, #8
 8005c12:	2100      	movs	r1, #0
 8005c14:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c18:	6865      	ldr	r5, [r4, #4]
 8005c1a:	60a5      	str	r5, [r4, #8]
 8005c1c:	2d00      	cmp	r5, #0
 8005c1e:	f2c0 8095 	blt.w	8005d4c <_printf_i+0x20c>
 8005c22:	6821      	ldr	r1, [r4, #0]
 8005c24:	f021 0104 	bic.w	r1, r1, #4
 8005c28:	6021      	str	r1, [r4, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d13d      	bne.n	8005caa <_printf_i+0x16a>
 8005c2e:	2d00      	cmp	r5, #0
 8005c30:	f040 808e 	bne.w	8005d50 <_printf_i+0x210>
 8005c34:	4665      	mov	r5, ip
 8005c36:	2a08      	cmp	r2, #8
 8005c38:	d10b      	bne.n	8005c52 <_printf_i+0x112>
 8005c3a:	6823      	ldr	r3, [r4, #0]
 8005c3c:	07db      	lsls	r3, r3, #31
 8005c3e:	d508      	bpl.n	8005c52 <_printf_i+0x112>
 8005c40:	6923      	ldr	r3, [r4, #16]
 8005c42:	6862      	ldr	r2, [r4, #4]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	bfde      	ittt	le
 8005c48:	2330      	movle	r3, #48	; 0x30
 8005c4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c52:	ebac 0305 	sub.w	r3, ip, r5
 8005c56:	6123      	str	r3, [r4, #16]
 8005c58:	f8cd 8000 	str.w	r8, [sp]
 8005c5c:	463b      	mov	r3, r7
 8005c5e:	aa03      	add	r2, sp, #12
 8005c60:	4621      	mov	r1, r4
 8005c62:	4630      	mov	r0, r6
 8005c64:	f7ff fef6 	bl	8005a54 <_printf_common>
 8005c68:	3001      	adds	r0, #1
 8005c6a:	d14d      	bne.n	8005d08 <_printf_i+0x1c8>
 8005c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c70:	b005      	add	sp, #20
 8005c72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c76:	4839      	ldr	r0, [pc, #228]	; (8005d5c <_printf_i+0x21c>)
 8005c78:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005c7c:	6813      	ldr	r3, [r2, #0]
 8005c7e:	6821      	ldr	r1, [r4, #0]
 8005c80:	1d1d      	adds	r5, r3, #4
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6015      	str	r5, [r2, #0]
 8005c86:	060a      	lsls	r2, r1, #24
 8005c88:	d50b      	bpl.n	8005ca2 <_printf_i+0x162>
 8005c8a:	07ca      	lsls	r2, r1, #31
 8005c8c:	bf44      	itt	mi
 8005c8e:	f041 0120 	orrmi.w	r1, r1, #32
 8005c92:	6021      	strmi	r1, [r4, #0]
 8005c94:	b91b      	cbnz	r3, 8005c9e <_printf_i+0x15e>
 8005c96:	6822      	ldr	r2, [r4, #0]
 8005c98:	f022 0220 	bic.w	r2, r2, #32
 8005c9c:	6022      	str	r2, [r4, #0]
 8005c9e:	2210      	movs	r2, #16
 8005ca0:	e7b7      	b.n	8005c12 <_printf_i+0xd2>
 8005ca2:	064d      	lsls	r5, r1, #25
 8005ca4:	bf48      	it	mi
 8005ca6:	b29b      	uxthmi	r3, r3
 8005ca8:	e7ef      	b.n	8005c8a <_printf_i+0x14a>
 8005caa:	4665      	mov	r5, ip
 8005cac:	fbb3 f1f2 	udiv	r1, r3, r2
 8005cb0:	fb02 3311 	mls	r3, r2, r1, r3
 8005cb4:	5cc3      	ldrb	r3, [r0, r3]
 8005cb6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005cba:	460b      	mov	r3, r1
 8005cbc:	2900      	cmp	r1, #0
 8005cbe:	d1f5      	bne.n	8005cac <_printf_i+0x16c>
 8005cc0:	e7b9      	b.n	8005c36 <_printf_i+0xf6>
 8005cc2:	6813      	ldr	r3, [r2, #0]
 8005cc4:	6825      	ldr	r5, [r4, #0]
 8005cc6:	6961      	ldr	r1, [r4, #20]
 8005cc8:	1d18      	adds	r0, r3, #4
 8005cca:	6010      	str	r0, [r2, #0]
 8005ccc:	0628      	lsls	r0, r5, #24
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	d501      	bpl.n	8005cd6 <_printf_i+0x196>
 8005cd2:	6019      	str	r1, [r3, #0]
 8005cd4:	e002      	b.n	8005cdc <_printf_i+0x19c>
 8005cd6:	066a      	lsls	r2, r5, #25
 8005cd8:	d5fb      	bpl.n	8005cd2 <_printf_i+0x192>
 8005cda:	8019      	strh	r1, [r3, #0]
 8005cdc:	2300      	movs	r3, #0
 8005cde:	6123      	str	r3, [r4, #16]
 8005ce0:	4665      	mov	r5, ip
 8005ce2:	e7b9      	b.n	8005c58 <_printf_i+0x118>
 8005ce4:	6813      	ldr	r3, [r2, #0]
 8005ce6:	1d19      	adds	r1, r3, #4
 8005ce8:	6011      	str	r1, [r2, #0]
 8005cea:	681d      	ldr	r5, [r3, #0]
 8005cec:	6862      	ldr	r2, [r4, #4]
 8005cee:	2100      	movs	r1, #0
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	f7fa fa6d 	bl	80001d0 <memchr>
 8005cf6:	b108      	cbz	r0, 8005cfc <_printf_i+0x1bc>
 8005cf8:	1b40      	subs	r0, r0, r5
 8005cfa:	6060      	str	r0, [r4, #4]
 8005cfc:	6863      	ldr	r3, [r4, #4]
 8005cfe:	6123      	str	r3, [r4, #16]
 8005d00:	2300      	movs	r3, #0
 8005d02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d06:	e7a7      	b.n	8005c58 <_printf_i+0x118>
 8005d08:	6923      	ldr	r3, [r4, #16]
 8005d0a:	462a      	mov	r2, r5
 8005d0c:	4639      	mov	r1, r7
 8005d0e:	4630      	mov	r0, r6
 8005d10:	47c0      	blx	r8
 8005d12:	3001      	adds	r0, #1
 8005d14:	d0aa      	beq.n	8005c6c <_printf_i+0x12c>
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	079b      	lsls	r3, r3, #30
 8005d1a:	d413      	bmi.n	8005d44 <_printf_i+0x204>
 8005d1c:	68e0      	ldr	r0, [r4, #12]
 8005d1e:	9b03      	ldr	r3, [sp, #12]
 8005d20:	4298      	cmp	r0, r3
 8005d22:	bfb8      	it	lt
 8005d24:	4618      	movlt	r0, r3
 8005d26:	e7a3      	b.n	8005c70 <_printf_i+0x130>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	464a      	mov	r2, r9
 8005d2c:	4639      	mov	r1, r7
 8005d2e:	4630      	mov	r0, r6
 8005d30:	47c0      	blx	r8
 8005d32:	3001      	adds	r0, #1
 8005d34:	d09a      	beq.n	8005c6c <_printf_i+0x12c>
 8005d36:	3501      	adds	r5, #1
 8005d38:	68e3      	ldr	r3, [r4, #12]
 8005d3a:	9a03      	ldr	r2, [sp, #12]
 8005d3c:	1a9b      	subs	r3, r3, r2
 8005d3e:	42ab      	cmp	r3, r5
 8005d40:	dcf2      	bgt.n	8005d28 <_printf_i+0x1e8>
 8005d42:	e7eb      	b.n	8005d1c <_printf_i+0x1dc>
 8005d44:	2500      	movs	r5, #0
 8005d46:	f104 0919 	add.w	r9, r4, #25
 8005d4a:	e7f5      	b.n	8005d38 <_printf_i+0x1f8>
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1ac      	bne.n	8005caa <_printf_i+0x16a>
 8005d50:	7803      	ldrb	r3, [r0, #0]
 8005d52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d5a:	e76c      	b.n	8005c36 <_printf_i+0xf6>
 8005d5c:	08006031 	.word	0x08006031
 8005d60:	08006042 	.word	0x08006042

08005d64 <_sbrk_r>:
 8005d64:	b538      	push	{r3, r4, r5, lr}
 8005d66:	4c06      	ldr	r4, [pc, #24]	; (8005d80 <_sbrk_r+0x1c>)
 8005d68:	2300      	movs	r3, #0
 8005d6a:	4605      	mov	r5, r0
 8005d6c:	4608      	mov	r0, r1
 8005d6e:	6023      	str	r3, [r4, #0]
 8005d70:	f7ff f8c4 	bl	8004efc <_sbrk>
 8005d74:	1c43      	adds	r3, r0, #1
 8005d76:	d102      	bne.n	8005d7e <_sbrk_r+0x1a>
 8005d78:	6823      	ldr	r3, [r4, #0]
 8005d7a:	b103      	cbz	r3, 8005d7e <_sbrk_r+0x1a>
 8005d7c:	602b      	str	r3, [r5, #0]
 8005d7e:	bd38      	pop	{r3, r4, r5, pc}
 8005d80:	200006ac 	.word	0x200006ac

08005d84 <__sread>:
 8005d84:	b510      	push	{r4, lr}
 8005d86:	460c      	mov	r4, r1
 8005d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d8c:	f000 f896 	bl	8005ebc <_read_r>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	bfab      	itete	ge
 8005d94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d96:	89a3      	ldrhlt	r3, [r4, #12]
 8005d98:	181b      	addge	r3, r3, r0
 8005d9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d9e:	bfac      	ite	ge
 8005da0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005da2:	81a3      	strhlt	r3, [r4, #12]
 8005da4:	bd10      	pop	{r4, pc}

08005da6 <__swrite>:
 8005da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005daa:	461f      	mov	r7, r3
 8005dac:	898b      	ldrh	r3, [r1, #12]
 8005dae:	05db      	lsls	r3, r3, #23
 8005db0:	4605      	mov	r5, r0
 8005db2:	460c      	mov	r4, r1
 8005db4:	4616      	mov	r6, r2
 8005db6:	d505      	bpl.n	8005dc4 <__swrite+0x1e>
 8005db8:	2302      	movs	r3, #2
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dc0:	f000 f868 	bl	8005e94 <_lseek_r>
 8005dc4:	89a3      	ldrh	r3, [r4, #12]
 8005dc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dce:	81a3      	strh	r3, [r4, #12]
 8005dd0:	4632      	mov	r2, r6
 8005dd2:	463b      	mov	r3, r7
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dda:	f000 b817 	b.w	8005e0c <_write_r>

08005dde <__sseek>:
 8005dde:	b510      	push	{r4, lr}
 8005de0:	460c      	mov	r4, r1
 8005de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005de6:	f000 f855 	bl	8005e94 <_lseek_r>
 8005dea:	1c43      	adds	r3, r0, #1
 8005dec:	89a3      	ldrh	r3, [r4, #12]
 8005dee:	bf15      	itete	ne
 8005df0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005df2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005df6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005dfa:	81a3      	strheq	r3, [r4, #12]
 8005dfc:	bf18      	it	ne
 8005dfe:	81a3      	strhne	r3, [r4, #12]
 8005e00:	bd10      	pop	{r4, pc}

08005e02 <__sclose>:
 8005e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e06:	f000 b813 	b.w	8005e30 <_close_r>
	...

08005e0c <_write_r>:
 8005e0c:	b538      	push	{r3, r4, r5, lr}
 8005e0e:	4c07      	ldr	r4, [pc, #28]	; (8005e2c <_write_r+0x20>)
 8005e10:	4605      	mov	r5, r0
 8005e12:	4608      	mov	r0, r1
 8005e14:	4611      	mov	r1, r2
 8005e16:	2200      	movs	r2, #0
 8005e18:	6022      	str	r2, [r4, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	f7ff f81d 	bl	8004e5a <_write>
 8005e20:	1c43      	adds	r3, r0, #1
 8005e22:	d102      	bne.n	8005e2a <_write_r+0x1e>
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	b103      	cbz	r3, 8005e2a <_write_r+0x1e>
 8005e28:	602b      	str	r3, [r5, #0]
 8005e2a:	bd38      	pop	{r3, r4, r5, pc}
 8005e2c:	200006ac 	.word	0x200006ac

08005e30 <_close_r>:
 8005e30:	b538      	push	{r3, r4, r5, lr}
 8005e32:	4c06      	ldr	r4, [pc, #24]	; (8005e4c <_close_r+0x1c>)
 8005e34:	2300      	movs	r3, #0
 8005e36:	4605      	mov	r5, r0
 8005e38:	4608      	mov	r0, r1
 8005e3a:	6023      	str	r3, [r4, #0]
 8005e3c:	f7ff f829 	bl	8004e92 <_close>
 8005e40:	1c43      	adds	r3, r0, #1
 8005e42:	d102      	bne.n	8005e4a <_close_r+0x1a>
 8005e44:	6823      	ldr	r3, [r4, #0]
 8005e46:	b103      	cbz	r3, 8005e4a <_close_r+0x1a>
 8005e48:	602b      	str	r3, [r5, #0]
 8005e4a:	bd38      	pop	{r3, r4, r5, pc}
 8005e4c:	200006ac 	.word	0x200006ac

08005e50 <_fstat_r>:
 8005e50:	b538      	push	{r3, r4, r5, lr}
 8005e52:	4c07      	ldr	r4, [pc, #28]	; (8005e70 <_fstat_r+0x20>)
 8005e54:	2300      	movs	r3, #0
 8005e56:	4605      	mov	r5, r0
 8005e58:	4608      	mov	r0, r1
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	f7ff f824 	bl	8004eaa <_fstat>
 8005e62:	1c43      	adds	r3, r0, #1
 8005e64:	d102      	bne.n	8005e6c <_fstat_r+0x1c>
 8005e66:	6823      	ldr	r3, [r4, #0]
 8005e68:	b103      	cbz	r3, 8005e6c <_fstat_r+0x1c>
 8005e6a:	602b      	str	r3, [r5, #0]
 8005e6c:	bd38      	pop	{r3, r4, r5, pc}
 8005e6e:	bf00      	nop
 8005e70:	200006ac 	.word	0x200006ac

08005e74 <_isatty_r>:
 8005e74:	b538      	push	{r3, r4, r5, lr}
 8005e76:	4c06      	ldr	r4, [pc, #24]	; (8005e90 <_isatty_r+0x1c>)
 8005e78:	2300      	movs	r3, #0
 8005e7a:	4605      	mov	r5, r0
 8005e7c:	4608      	mov	r0, r1
 8005e7e:	6023      	str	r3, [r4, #0]
 8005e80:	f7ff f823 	bl	8004eca <_isatty>
 8005e84:	1c43      	adds	r3, r0, #1
 8005e86:	d102      	bne.n	8005e8e <_isatty_r+0x1a>
 8005e88:	6823      	ldr	r3, [r4, #0]
 8005e8a:	b103      	cbz	r3, 8005e8e <_isatty_r+0x1a>
 8005e8c:	602b      	str	r3, [r5, #0]
 8005e8e:	bd38      	pop	{r3, r4, r5, pc}
 8005e90:	200006ac 	.word	0x200006ac

08005e94 <_lseek_r>:
 8005e94:	b538      	push	{r3, r4, r5, lr}
 8005e96:	4c07      	ldr	r4, [pc, #28]	; (8005eb4 <_lseek_r+0x20>)
 8005e98:	4605      	mov	r5, r0
 8005e9a:	4608      	mov	r0, r1
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	6022      	str	r2, [r4, #0]
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	f7ff f81c 	bl	8004ee0 <_lseek>
 8005ea8:	1c43      	adds	r3, r0, #1
 8005eaa:	d102      	bne.n	8005eb2 <_lseek_r+0x1e>
 8005eac:	6823      	ldr	r3, [r4, #0]
 8005eae:	b103      	cbz	r3, 8005eb2 <_lseek_r+0x1e>
 8005eb0:	602b      	str	r3, [r5, #0]
 8005eb2:	bd38      	pop	{r3, r4, r5, pc}
 8005eb4:	200006ac 	.word	0x200006ac

08005eb8 <__malloc_lock>:
 8005eb8:	4770      	bx	lr

08005eba <__malloc_unlock>:
 8005eba:	4770      	bx	lr

08005ebc <_read_r>:
 8005ebc:	b538      	push	{r3, r4, r5, lr}
 8005ebe:	4c07      	ldr	r4, [pc, #28]	; (8005edc <_read_r+0x20>)
 8005ec0:	4605      	mov	r5, r0
 8005ec2:	4608      	mov	r0, r1
 8005ec4:	4611      	mov	r1, r2
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	6022      	str	r2, [r4, #0]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	f7fe ffa8 	bl	8004e20 <_read>
 8005ed0:	1c43      	adds	r3, r0, #1
 8005ed2:	d102      	bne.n	8005eda <_read_r+0x1e>
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	b103      	cbz	r3, 8005eda <_read_r+0x1e>
 8005ed8:	602b      	str	r3, [r5, #0]
 8005eda:	bd38      	pop	{r3, r4, r5, pc}
 8005edc:	200006ac 	.word	0x200006ac

08005ee0 <_init>:
 8005ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee2:	bf00      	nop
 8005ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee6:	bc08      	pop	{r3}
 8005ee8:	469e      	mov	lr, r3
 8005eea:	4770      	bx	lr

08005eec <_fini>:
 8005eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eee:	bf00      	nop
 8005ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ef2:	bc08      	pop	{r3}
 8005ef4:	469e      	mov	lr, r3
 8005ef6:	4770      	bx	lr
