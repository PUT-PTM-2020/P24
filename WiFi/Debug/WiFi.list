
WiFi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d40  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08002ec8  08002ec8  00012ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f4c  08002f4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f4c  08002f4c  00012f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f54  08002f54  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f54  08002f54  00012f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f58  08002f58  00012f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  2000000c  08002f68  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  08002f68  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099b8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018fa  00000000  00000000  000299f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000940  00000000  00000000  0002b2f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000878  00000000  00000000  0002bc30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000202f9  00000000  00000000  0002c4a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000076ba  00000000  00000000  0004c7a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2f6a  00000000  00000000  00053e5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00116dc5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002580  00000000  00000000  00116e40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002eb0 	.word	0x08002eb0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002eb0 	.word	0x08002eb0

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b972 	b.w	80004d8 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	4604      	mov	r4, r0
 8000214:	4688      	mov	r8, r1
 8000216:	2b00      	cmp	r3, #0
 8000218:	d14b      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021a:	428a      	cmp	r2, r1
 800021c:	4615      	mov	r5, r2
 800021e:	d967      	bls.n	80002f0 <__udivmoddi4+0xe4>
 8000220:	fab2 f282 	clz	r2, r2
 8000224:	b14a      	cbz	r2, 800023a <__udivmoddi4+0x2e>
 8000226:	f1c2 0720 	rsb	r7, r2, #32
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	fa20 f707 	lsr.w	r7, r0, r7
 8000232:	4095      	lsls	r5, r2
 8000234:	ea47 0803 	orr.w	r8, r7, r3
 8000238:	4094      	lsls	r4, r2
 800023a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023e:	0c23      	lsrs	r3, r4, #16
 8000240:	fbb8 f7fe 	udiv	r7, r8, lr
 8000244:	fa1f fc85 	uxth.w	ip, r5
 8000248:	fb0e 8817 	mls	r8, lr, r7, r8
 800024c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000250:	fb07 f10c 	mul.w	r1, r7, ip
 8000254:	4299      	cmp	r1, r3
 8000256:	d909      	bls.n	800026c <__udivmoddi4+0x60>
 8000258:	18eb      	adds	r3, r5, r3
 800025a:	f107 30ff 	add.w	r0, r7, #4294967295
 800025e:	f080 811b 	bcs.w	8000498 <__udivmoddi4+0x28c>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 8118 	bls.w	8000498 <__udivmoddi4+0x28c>
 8000268:	3f02      	subs	r7, #2
 800026a:	442b      	add	r3, r5
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0fe 	udiv	r0, r3, lr
 8000274:	fb0e 3310 	mls	r3, lr, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000280:	45a4      	cmp	ip, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x8c>
 8000284:	192c      	adds	r4, r5, r4
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x290>
 800028e:	45a4      	cmp	ip, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x290>
 8000294:	3802      	subs	r0, #2
 8000296:	442c      	add	r4, r5
 8000298:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800029c:	eba4 040c 	sub.w	r4, r4, ip
 80002a0:	2700      	movs	r7, #0
 80002a2:	b11e      	cbz	r6, 80002ac <__udivmoddi4+0xa0>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c6 4300 	strd	r4, r3, [r6]
 80002ac:	4639      	mov	r1, r7
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xbe>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80eb 	beq.w	8000492 <__udivmoddi4+0x286>
 80002bc:	2700      	movs	r7, #0
 80002be:	e9c6 0100 	strd	r0, r1, [r6]
 80002c2:	4638      	mov	r0, r7
 80002c4:	4639      	mov	r1, r7
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f783 	clz	r7, r3
 80002ce:	2f00      	cmp	r7, #0
 80002d0:	d147      	bne.n	8000362 <__udivmoddi4+0x156>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd0>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2c4>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4698      	mov	r8, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa0>
 80002ea:	e9c6 4800 	strd	r4, r8, [r6]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa0>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xe8>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 808f 	bne.w	800041c <__udivmoddi4+0x210>
 80002fe:	1b49      	subs	r1, r1, r5
 8000300:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000304:	fa1f f885 	uxth.w	r8, r5
 8000308:	2701      	movs	r7, #1
 800030a:	fbb1 fcfe 	udiv	ip, r1, lr
 800030e:	0c23      	lsrs	r3, r4, #16
 8000310:	fb0e 111c 	mls	r1, lr, ip, r1
 8000314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000318:	fb08 f10c 	mul.w	r1, r8, ip
 800031c:	4299      	cmp	r1, r3
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0x124>
 8000320:	18eb      	adds	r3, r5, r3
 8000322:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4299      	cmp	r1, r3
 800032a:	f200 80cd 	bhi.w	80004c8 <__udivmoddi4+0x2bc>
 800032e:	4684      	mov	ip, r0
 8000330:	1a59      	subs	r1, r3, r1
 8000332:	b2a3      	uxth	r3, r4
 8000334:	fbb1 f0fe 	udiv	r0, r1, lr
 8000338:	fb0e 1410 	mls	r4, lr, r0, r1
 800033c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000340:	fb08 f800 	mul.w	r8, r8, r0
 8000344:	45a0      	cmp	r8, r4
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x14c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x14a>
 8000350:	45a0      	cmp	r8, r4
 8000352:	f200 80b6 	bhi.w	80004c2 <__udivmoddi4+0x2b6>
 8000356:	4618      	mov	r0, r3
 8000358:	eba4 0408 	sub.w	r4, r4, r8
 800035c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000360:	e79f      	b.n	80002a2 <__udivmoddi4+0x96>
 8000362:	f1c7 0c20 	rsb	ip, r7, #32
 8000366:	40bb      	lsls	r3, r7
 8000368:	fa22 fe0c 	lsr.w	lr, r2, ip
 800036c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000370:	fa01 f407 	lsl.w	r4, r1, r7
 8000374:	fa20 f50c 	lsr.w	r5, r0, ip
 8000378:	fa21 f30c 	lsr.w	r3, r1, ip
 800037c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000380:	4325      	orrs	r5, r4
 8000382:	fbb3 f9f8 	udiv	r9, r3, r8
 8000386:	0c2c      	lsrs	r4, r5, #16
 8000388:	fb08 3319 	mls	r3, r8, r9, r3
 800038c:	fa1f fa8e 	uxth.w	sl, lr
 8000390:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000394:	fb09 f40a 	mul.w	r4, r9, sl
 8000398:	429c      	cmp	r4, r3
 800039a:	fa02 f207 	lsl.w	r2, r2, r7
 800039e:	fa00 f107 	lsl.w	r1, r0, r7
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1e 0303 	adds.w	r3, lr, r3
 80003a8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003ac:	f080 8087 	bcs.w	80004be <__udivmoddi4+0x2b2>
 80003b0:	429c      	cmp	r4, r3
 80003b2:	f240 8084 	bls.w	80004be <__udivmoddi4+0x2b2>
 80003b6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ba:	4473      	add	r3, lr
 80003bc:	1b1b      	subs	r3, r3, r4
 80003be:	b2ad      	uxth	r5, r5
 80003c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c4:	fb08 3310 	mls	r3, r8, r0, r3
 80003c8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003cc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d0:	45a2      	cmp	sl, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1e 0404 	adds.w	r4, lr, r4
 80003d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003dc:	d26b      	bcs.n	80004b6 <__udivmoddi4+0x2aa>
 80003de:	45a2      	cmp	sl, r4
 80003e0:	d969      	bls.n	80004b6 <__udivmoddi4+0x2aa>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4474      	add	r4, lr
 80003e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ea:	fba0 8902 	umull	r8, r9, r0, r2
 80003ee:	eba4 040a 	sub.w	r4, r4, sl
 80003f2:	454c      	cmp	r4, r9
 80003f4:	46c2      	mov	sl, r8
 80003f6:	464b      	mov	r3, r9
 80003f8:	d354      	bcc.n	80004a4 <__udivmoddi4+0x298>
 80003fa:	d051      	beq.n	80004a0 <__udivmoddi4+0x294>
 80003fc:	2e00      	cmp	r6, #0
 80003fe:	d069      	beq.n	80004d4 <__udivmoddi4+0x2c8>
 8000400:	ebb1 050a 	subs.w	r5, r1, sl
 8000404:	eb64 0403 	sbc.w	r4, r4, r3
 8000408:	fa04 fc0c 	lsl.w	ip, r4, ip
 800040c:	40fd      	lsrs	r5, r7
 800040e:	40fc      	lsrs	r4, r7
 8000410:	ea4c 0505 	orr.w	r5, ip, r5
 8000414:	e9c6 5400 	strd	r5, r4, [r6]
 8000418:	2700      	movs	r7, #0
 800041a:	e747      	b.n	80002ac <__udivmoddi4+0xa0>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f703 	lsr.w	r7, r0, r3
 8000424:	4095      	lsls	r5, r2
 8000426:	fa01 f002 	lsl.w	r0, r1, r2
 800042a:	fa21 f303 	lsr.w	r3, r1, r3
 800042e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000432:	4338      	orrs	r0, r7
 8000434:	0c01      	lsrs	r1, r0, #16
 8000436:	fbb3 f7fe 	udiv	r7, r3, lr
 800043a:	fa1f f885 	uxth.w	r8, r5
 800043e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000442:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000446:	fb07 f308 	mul.w	r3, r7, r8
 800044a:	428b      	cmp	r3, r1
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x256>
 8000452:	1869      	adds	r1, r5, r1
 8000454:	f107 3cff 	add.w	ip, r7, #4294967295
 8000458:	d22f      	bcs.n	80004ba <__udivmoddi4+0x2ae>
 800045a:	428b      	cmp	r3, r1
 800045c:	d92d      	bls.n	80004ba <__udivmoddi4+0x2ae>
 800045e:	3f02      	subs	r7, #2
 8000460:	4429      	add	r1, r5
 8000462:	1acb      	subs	r3, r1, r3
 8000464:	b281      	uxth	r1, r0
 8000466:	fbb3 f0fe 	udiv	r0, r3, lr
 800046a:	fb0e 3310 	mls	r3, lr, r0, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb00 f308 	mul.w	r3, r0, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x27e>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000480:	d217      	bcs.n	80004b2 <__udivmoddi4+0x2a6>
 8000482:	428b      	cmp	r3, r1
 8000484:	d915      	bls.n	80004b2 <__udivmoddi4+0x2a6>
 8000486:	3802      	subs	r0, #2
 8000488:	4429      	add	r1, r5
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000490:	e73b      	b.n	800030a <__udivmoddi4+0xfe>
 8000492:	4637      	mov	r7, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e709      	b.n	80002ac <__udivmoddi4+0xa0>
 8000498:	4607      	mov	r7, r0
 800049a:	e6e7      	b.n	800026c <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x8c>
 80004a0:	4541      	cmp	r1, r8
 80004a2:	d2ab      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a8:	eb69 020e 	sbc.w	r2, r9, lr
 80004ac:	3801      	subs	r0, #1
 80004ae:	4613      	mov	r3, r2
 80004b0:	e7a4      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b2:	4660      	mov	r0, ip
 80004b4:	e7e9      	b.n	800048a <__udivmoddi4+0x27e>
 80004b6:	4618      	mov	r0, r3
 80004b8:	e795      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004ba:	4667      	mov	r7, ip
 80004bc:	e7d1      	b.n	8000462 <__udivmoddi4+0x256>
 80004be:	4681      	mov	r9, r0
 80004c0:	e77c      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c2:	3802      	subs	r0, #2
 80004c4:	442c      	add	r4, r5
 80004c6:	e747      	b.n	8000358 <__udivmoddi4+0x14c>
 80004c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004cc:	442b      	add	r3, r5
 80004ce:	e72f      	b.n	8000330 <__udivmoddi4+0x124>
 80004d0:	4638      	mov	r0, r7
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xda>
 80004d4:	4637      	mov	r7, r6
 80004d6:	e6e9      	b.n	80002ac <__udivmoddi4+0xa0>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 80004e2:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <disk_timerproc+0x44>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	71fb      	strb	r3, [r7, #7]
	if (n)
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d005      	beq.n	80004fa <disk_timerproc+0x1e>
		Timer1 = --n;
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	3b01      	subs	r3, #1
 80004f2:	71fb      	strb	r3, [r7, #7]
 80004f4:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <disk_timerproc+0x44>)
 80004f6:	79fb      	ldrb	r3, [r7, #7]
 80004f8:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 80004fa:	4b0a      	ldr	r3, [pc, #40]	; (8000524 <disk_timerproc+0x48>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	71fb      	strb	r3, [r7, #7]
	if (n)
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d005      	beq.n	8000512 <disk_timerproc+0x36>
		Timer2 = --n;
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	3b01      	subs	r3, #1
 800050a:	71fb      	strb	r3, [r7, #7]
 800050c:	4a05      	ldr	r2, [pc, #20]	; (8000524 <disk_timerproc+0x48>)
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	7013      	strb	r3, [r2, #0]

}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	20000028 	.word	0x20000028
 8000524:	20000029 	.word	0x20000029

08000528 <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	++sdcard_timer;
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <sdcard_systick_timerproc+0x2c>)
 800052e:	881b      	ldrh	r3, [r3, #0]
 8000530:	b29b      	uxth	r3, r3
 8000532:	3301      	adds	r3, #1
 8000534:	b29a      	uxth	r2, r3
 8000536:	4b07      	ldr	r3, [pc, #28]	; (8000554 <sdcard_systick_timerproc+0x2c>)
 8000538:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <sdcard_systick_timerproc+0x2c>)
 800053c:	881b      	ldrh	r3, [r3, #0]
 800053e:	b29b      	uxth	r3, r3
 8000540:	2b09      	cmp	r3, #9
 8000542:	d904      	bls.n	800054e <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 8000544:	4b03      	ldr	r3, [pc, #12]	; (8000554 <sdcard_systick_timerproc+0x2c>)
 8000546:	2200      	movs	r2, #0
 8000548:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 800054a:	f7ff ffc7 	bl	80004dc <disk_timerproc>
	}
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	2000002a 	.word	0x2000002a

08000558 <HAL_UART_RxCpltCallback>:
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
	{

	}
}
 8000560:	bf00      	nop
 8000562:	370c      	adds	r7, #12
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <send_message>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//Wysyłanie wiadomości do modułu ESP poprzez interfejs UART
void send_message(UART_HandleTypeDef * huart, char * message)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit_IT(huart, message, 100);
 8000576:	2264      	movs	r2, #100	; 0x64
 8000578:	6839      	ldr	r1, [r7, #0]
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f001 fdd5 	bl	800212a <HAL_UART_Transmit_IT>
	HAL_UART_Transmit_IT(huart, "\r\n", 100);
 8000580:	2264      	movs	r2, #100	; 0x64
 8000582:	4904      	ldr	r1, [pc, #16]	; (8000594 <send_message+0x28>)
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f001 fdd0 	bl	800212a <HAL_UART_Transmit_IT>

}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	08002ec8 	.word	0x08002ec8

08000598 <read_message>:
void read_message (UART_HandleTypeDef * huart, char * buffer, uint16_t buffer_size)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	4613      	mov	r3, r2
 80005a4:	80fb      	strh	r3, [r7, #6]
	char current_char;
	uint16_t char_counter = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	82fb      	strh	r3, [r7, #22]
	HAL_StatusTypeDef status;
	while (char_counter < buffer_size - 1)
 80005aa:	e01d      	b.n	80005e8 <read_message+0x50>
	{
		status = HAL_UART_Receive(huart, &current_char, 1, 1);
 80005ac:	f107 0114 	add.w	r1, r7, #20
 80005b0:	2301      	movs	r3, #1
 80005b2:	2201      	movs	r2, #1
 80005b4:	68f8      	ldr	r0, [r7, #12]
 80005b6:	f001 fd12 	bl	8001fde <HAL_UART_Receive>
 80005ba:	4603      	mov	r3, r0
 80005bc:	757b      	strb	r3, [r7, #21]
		if (status == HAL_OK)
 80005be:	7d7b      	ldrb	r3, [r7, #21]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d111      	bne.n	80005e8 <read_message+0x50>
		{
			if (current_char == '\r' || current_char == '\n')
 80005c4:	7d3b      	ldrb	r3, [r7, #20]
 80005c6:	2b0d      	cmp	r3, #13
 80005c8:	d002      	beq.n	80005d0 <read_message+0x38>
 80005ca:	7d3b      	ldrb	r3, [r7, #20]
 80005cc:	2b0a      	cmp	r3, #10
 80005ce:	d103      	bne.n	80005d8 <read_message+0x40>
				if (char_counter == 0)
 80005d0:	8afb      	ldrh	r3, [r7, #22]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d10e      	bne.n	80005f4 <read_message+0x5c>
					continue;
 80005d6:	e007      	b.n	80005e8 <read_message+0x50>
				else
					break;
			current_char = buffer + char_counter++;
 80005d8:	8afb      	ldrh	r3, [r7, #22]
 80005da:	1c5a      	adds	r2, r3, #1
 80005dc:	82fa      	strh	r2, [r7, #22]
 80005de:	461a      	mov	r2, r3
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	4413      	add	r3, r2
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	753b      	strb	r3, [r7, #20]
	while (char_counter < buffer_size - 1)
 80005e8:	8afa      	ldrh	r2, [r7, #22]
 80005ea:	88fb      	ldrh	r3, [r7, #6]
 80005ec:	3b01      	subs	r3, #1
 80005ee:	429a      	cmp	r2, r3
 80005f0:	dbdc      	blt.n	80005ac <read_message+0x14>
		}
	 }
}
 80005f2:	e000      	b.n	80005f6 <read_message+0x5e>
					break;
 80005f4:	bf00      	nop
}
 80005f6:	bf00      	nop
 80005f8:	3718      	adds	r7, #24
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <esp_send_cmd>:
uint8_t esp_send_cmd(UART_HandleTypeDef * huart, char * command)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08a      	sub	sp, #40	; 0x28
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	6039      	str	r1, [r7, #0]
 char response[30]; // w response będzie zapisywana odpowiedź od modułu - z przerwania uart
 response[0]= '\0';
 800060a:	2300      	movs	r3, #0
 800060c:	723b      	strb	r3, [r7, #8]
 send_message(huart, command);
 800060e:	6839      	ldr	r1, [r7, #0]
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f7ff ffab 	bl	800056c <send_message>
 while(strcmp(response, "OK") != 0   // sprawdzenie jaka jest odpowiedź
 8000616:	e006      	b.n	8000626 <esp_send_cmd+0x26>
		 && strcmp(response, "no change") != 0
		 && strcmp(response, "ERROR")!=0)
	 read_message(huart, response, 30);
 8000618:	f107 0308 	add.w	r3, r7, #8
 800061c:	221e      	movs	r2, #30
 800061e:	4619      	mov	r1, r3
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f7ff ffb9 	bl	8000598 <read_message>
 while(strcmp(response, "OK") != 0   // sprawdzenie jaka jest odpowiedź
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	4914      	ldr	r1, [pc, #80]	; (800067c <esp_send_cmd+0x7c>)
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff fdcb 	bl	80001c8 <strcmp>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d011      	beq.n	800065c <esp_send_cmd+0x5c>
		 && strcmp(response, "no change") != 0
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	4910      	ldr	r1, [pc, #64]	; (8000680 <esp_send_cmd+0x80>)
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff fdc2 	bl	80001c8 <strcmp>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d008      	beq.n	800065c <esp_send_cmd+0x5c>
		 && strcmp(response, "ERROR")!=0)
 800064a:	f107 0308 	add.w	r3, r7, #8
 800064e:	490d      	ldr	r1, [pc, #52]	; (8000684 <esp_send_cmd+0x84>)
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff fdb9 	bl	80001c8 <strcmp>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1dd      	bne.n	8000618 <esp_send_cmd+0x18>
 if(strcmp(response, "ERROR")==0) return 0;
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	4908      	ldr	r1, [pc, #32]	; (8000684 <esp_send_cmd+0x84>)
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff fdb0 	bl	80001c8 <strcmp>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d101      	bne.n	8000672 <esp_send_cmd+0x72>
 800066e:	2300      	movs	r3, #0
 8000670:	e000      	b.n	8000674 <esp_send_cmd+0x74>
 else return 1;
 8000672:	2301      	movs	r3, #1
}
 8000674:	4618      	mov	r0, r3
 8000676:	3728      	adds	r7, #40	; 0x28
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	08002ecc 	.word	0x08002ecc
 8000680:	08002ed0 	.word	0x08002ed0
 8000684:	08002edc 	.word	0x08002edc

08000688 <configure_esp>:

uint8_t configure_esp()
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 800068c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000690:	f000 fb6a 	bl	8000d68 <HAL_Delay>

	if (!esp_send_cmd(&huart1, "AT+CWMODE=1"))
 8000694:	4913      	ldr	r1, [pc, #76]	; (80006e4 <configure_esp+0x5c>)
 8000696:	4814      	ldr	r0, [pc, #80]	; (80006e8 <configure_esp+0x60>)
 8000698:	f7ff ffb2 	bl	8000600 <esp_send_cmd>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d101      	bne.n	80006a6 <configure_esp+0x1e>
		return 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	e01b      	b.n	80006de <configure_esp+0x56>
	if (!esp_send_cmd(&huart1, "AT+CWJAP=\"HUAWEI-2.4G-zJ52\",\"...\""))
 80006a6:	4911      	ldr	r1, [pc, #68]	; (80006ec <configure_esp+0x64>)
 80006a8:	480f      	ldr	r0, [pc, #60]	; (80006e8 <configure_esp+0x60>)
 80006aa:	f7ff ffa9 	bl	8000600 <esp_send_cmd>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d101      	bne.n	80006b8 <configure_esp+0x30>
		return 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	e012      	b.n	80006de <configure_esp+0x56>
	if (!esp_send_cmd(&huart1, "AT+CIPMUX=1"))
 80006b8:	490d      	ldr	r1, [pc, #52]	; (80006f0 <configure_esp+0x68>)
 80006ba:	480b      	ldr	r0, [pc, #44]	; (80006e8 <configure_esp+0x60>)
 80006bc:	f7ff ffa0 	bl	8000600 <esp_send_cmd>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d101      	bne.n	80006ca <configure_esp+0x42>
		return 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	e009      	b.n	80006de <configure_esp+0x56>
	if (!esp_send_cmd(&huart1, "AT+CIPSERVER=1,80"))
 80006ca:	490a      	ldr	r1, [pc, #40]	; (80006f4 <configure_esp+0x6c>)
 80006cc:	4806      	ldr	r0, [pc, #24]	; (80006e8 <configure_esp+0x60>)
 80006ce:	f7ff ff97 	bl	8000600 <esp_send_cmd>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d101      	bne.n	80006dc <configure_esp+0x54>
		return 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	e000      	b.n	80006de <configure_esp+0x56>

	return 1;
 80006dc:	2301      	movs	r3, #1
}
 80006de:	4618      	mov	r0, r3
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	08002ee4 	.word	0x08002ee4
 80006e8:	2000042c 	.word	0x2000042c
 80006ec:	08002ef0 	.word	0x08002ef0
 80006f0:	08002f14 	.word	0x08002f14
 80006f4:	08002f20 	.word	0x08002f20

080006f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
	if (configure_esp())  //Jeśli uruchomi się bez problemów, to włącz obsługę przerwań UART
 80006fc:	f7ff ffc4 	bl	8000688 <configure_esp>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d004      	beq.n	8000710 <main+0x18>
	{
		HAL_UART_Receive_IT(&huart1, esp_recieve,1);
 8000706:	2201      	movs	r2, #1
 8000708:	4907      	ldr	r1, [pc, #28]	; (8000728 <main+0x30>)
 800070a:	4808      	ldr	r0, [pc, #32]	; (800072c <main+0x34>)
 800070c:	f001 fd52 	bl	80021b4 <HAL_UART_Receive_IT>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000710:	f000 fab8 	bl	8000c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000714:	f000 f80c 	bl	8000730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000718:	f000 f8d4 	bl	80008c4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800071c:	f000 f8a8 	bl	8000870 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000720:	f000 f870 	bl	8000804 <MX_SPI1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000724:	e7fe      	b.n	8000724 <main+0x2c>
 8000726:	bf00      	nop
 8000728:	2000002c 	.word	0x2000002c
 800072c:	2000042c 	.word	0x2000042c

08000730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b094      	sub	sp, #80	; 0x50
 8000734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000736:	f107 0320 	add.w	r3, r7, #32
 800073a:	2230      	movs	r2, #48	; 0x30
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f002 fbae 	bl	8002ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	4b28      	ldr	r3, [pc, #160]	; (80007fc <SystemClock_Config+0xcc>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	4a27      	ldr	r2, [pc, #156]	; (80007fc <SystemClock_Config+0xcc>)
 800075e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000762:	6413      	str	r3, [r2, #64]	; 0x40
 8000764:	4b25      	ldr	r3, [pc, #148]	; (80007fc <SystemClock_Config+0xcc>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	4b22      	ldr	r3, [pc, #136]	; (8000800 <SystemClock_Config+0xd0>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a21      	ldr	r2, [pc, #132]	; (8000800 <SystemClock_Config+0xd0>)
 800077a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <SystemClock_Config+0xd0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800078c:	2301      	movs	r3, #1
 800078e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000790:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800079e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007a0:	2304      	movs	r3, #4
 80007a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007a4:	23a8      	movs	r3, #168	; 0xa8
 80007a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a8:	2302      	movs	r3, #2
 80007aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ac:	2304      	movs	r3, #4
 80007ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b0:	f107 0320 	add.w	r3, r7, #32
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 fde1 	bl	800137c <HAL_RCC_OscConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007c0:	f000 f90c 	bl	80009dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c4:	230f      	movs	r3, #15
 80007c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c8:	2302      	movs	r3, #2
 80007ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007dc:	f107 030c 	add.w	r3, r7, #12
 80007e0:	2105      	movs	r1, #5
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 f83a 	bl	800185c <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ee:	f000 f8f5 	bl	80009dc <Error_Handler>
  }
}
 80007f2:	bf00      	nop
 80007f4:	3750      	adds	r7, #80	; 0x50
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40023800 	.word	0x40023800
 8000800:	40007000 	.word	0x40007000

08000804 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_SPI1_Init+0x64>)
 800080a:	4a18      	ldr	r2, [pc, #96]	; (800086c <MX_SPI1_Init+0x68>)
 800080c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_SPI1_Init+0x64>)
 8000810:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000814:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_SPI1_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_SPI1_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_SPI1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_SPI1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_SPI1_Init+0x64>)
 8000830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000834:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_SPI1_Init+0x64>)
 8000838:	2218      	movs	r2, #24
 800083a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <MX_SPI1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_SPI1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_SPI1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_SPI1_Init+0x64>)
 8000850:	220a      	movs	r2, #10
 8000852:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_SPI1_Init+0x64>)
 8000856:	f001 f9f3 	bl	8001c40 <HAL_SPI_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000860:	f000 f8bc 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	2000046c 	.word	0x2000046c
 800086c:	40013000 	.word	0x40013000

08000870 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000874:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_USART1_UART_Init+0x4c>)
 8000876:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <MX_USART1_UART_Init+0x50>)
 8000878:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <MX_USART1_UART_Init+0x4c>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_USART1_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_USART1_UART_Init+0x4c>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <MX_USART1_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_USART1_UART_Init+0x4c>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <MX_USART1_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_USART1_UART_Init+0x4c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_USART1_UART_Init+0x4c>)
 80008a8:	f001 fb4c 	bl	8001f44 <HAL_UART_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008b2:	f000 f893 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2000042c 	.word	0x2000042c
 80008c0:	40011000 	.word	0x40011000

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	; 0x28
 80008c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	4b3c      	ldr	r3, [pc, #240]	; (80009d0 <MX_GPIO_Init+0x10c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a3b      	ldr	r2, [pc, #236]	; (80009d0 <MX_GPIO_Init+0x10c>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b39      	ldr	r3, [pc, #228]	; (80009d0 <MX_GPIO_Init+0x10c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b35      	ldr	r3, [pc, #212]	; (80009d0 <MX_GPIO_Init+0x10c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a34      	ldr	r2, [pc, #208]	; (80009d0 <MX_GPIO_Init+0x10c>)
 8000900:	f043 0308 	orr.w	r3, r3, #8
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b32      	ldr	r3, [pc, #200]	; (80009d0 <MX_GPIO_Init+0x10c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0308 	and.w	r3, r3, #8
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	4b2e      	ldr	r3, [pc, #184]	; (80009d0 <MX_GPIO_Init+0x10c>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a2d      	ldr	r2, [pc, #180]	; (80009d0 <MX_GPIO_Init+0x10c>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b2b      	ldr	r3, [pc, #172]	; (80009d0 <MX_GPIO_Init+0x10c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b27      	ldr	r3, [pc, #156]	; (80009d0 <MX_GPIO_Init+0x10c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a26      	ldr	r2, [pc, #152]	; (80009d0 <MX_GPIO_Init+0x10c>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b24      	ldr	r3, [pc, #144]	; (80009d0 <MX_GPIO_Init+0x10c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <MX_GPIO_Init+0x10c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a1f      	ldr	r2, [pc, #124]	; (80009d0 <MX_GPIO_Init+0x10c>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <MX_GPIO_Init+0x10c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800096c:	4819      	ldr	r0, [pc, #100]	; (80009d4 <MX_GPIO_Init+0x110>)
 800096e:	f000 fceb 	bl	8001348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8000972:	2201      	movs	r2, #1
 8000974:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000978:	4816      	ldr	r0, [pc, #88]	; (80009d4 <MX_GPIO_Init+0x110>)
 800097a:	f000 fce5 	bl	8001348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CH_PD_GPIO_Port, CH_PD_Pin, GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000984:	4814      	ldr	r0, [pc, #80]	; (80009d8 <MX_GPIO_Init+0x114>)
 8000986:	f000 fcdf 	bl	8001348 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEN_LED_Pin ORANGE_LED_Pin RED_LED_Pin BLUE_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|ORANGE_LED_Pin|RED_LED_Pin|BLUE_LED_Pin;
 800098a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099c:	f107 0314 	add.w	r3, r7, #20
 80009a0:	4619      	mov	r1, r3
 80009a2:	480c      	ldr	r0, [pc, #48]	; (80009d4 <MX_GPIO_Init+0x110>)
 80009a4:	f000 fb36 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : CH_PD_Pin */
  GPIO_InitStruct.Pin = CH_PD_Pin;
 80009a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CH_PD_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_GPIO_Init+0x114>)
 80009c2:	f000 fb27 	bl	8001014 <HAL_GPIO_Init>

}
 80009c6:	bf00      	nop
 80009c8:	3728      	adds	r7, #40	; 0x28
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020c00 	.word	0x40020c00
 80009d8:	40020800 	.word	0x40020800

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <HAL_MspInit+0x4c>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	4a0f      	ldr	r2, [pc, #60]	; (8000a38 <HAL_MspInit+0x4c>)
 80009fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a00:	6453      	str	r3, [r2, #68]	; 0x44
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800

08000a3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	; 0x28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a1d      	ldr	r2, [pc, #116]	; (8000ad0 <HAL_SPI_MspInit+0x94>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d133      	bne.n	8000ac6 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <HAL_SPI_MspInit+0x98>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	4a1b      	ldr	r2, [pc, #108]	; (8000ad4 <HAL_SPI_MspInit+0x98>)
 8000a68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6e:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <HAL_SPI_MspInit+0x98>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <HAL_SPI_MspInit+0x98>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a14      	ldr	r2, [pc, #80]	; (8000ad4 <HAL_SPI_MspInit+0x98>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_SPI_MspInit+0x98>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000a96:	2338      	movs	r3, #56	; 0x38
 8000a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aa6:	2305      	movs	r3, #5
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <HAL_SPI_MspInit+0x9c>)
 8000ab2:	f000 faaf 	bl	8001014 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2023      	movs	r0, #35	; 0x23
 8000abc:	f000 fa51 	bl	8000f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000ac0:	2023      	movs	r0, #35	; 0x23
 8000ac2:	f000 fa6a 	bl	8000f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ac6:	bf00      	nop
 8000ac8:	3728      	adds	r7, #40	; 0x28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40013000 	.word	0x40013000
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	40020400 	.word	0x40020400

08000adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a1d      	ldr	r2, [pc, #116]	; (8000b70 <HAL_UART_MspInit+0x94>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d134      	bne.n	8000b68 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b08:	f043 0310 	orr.w	r3, r3, #16
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f003 0310 	and.w	r3, r3, #16
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <HAL_UART_MspInit+0x98>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b48:	2307      	movs	r3, #7
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	4809      	ldr	r0, [pc, #36]	; (8000b78 <HAL_UART_MspInit+0x9c>)
 8000b54:	f000 fa5e 	bl	8001014 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2025      	movs	r0, #37	; 0x25
 8000b5e:	f000 fa00 	bl	8000f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b62:	2025      	movs	r0, #37	; 0x25
 8000b64:	f000 fa19 	bl	8000f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40011000 	.word	0x40011000
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020000 	.word	0x40020000

08000b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <MemManage_Handler+0x4>

08000b96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <BusFault_Handler+0x4>

08000b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <UsageFault_Handler+0x4>

08000ba2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 8000bd0:	f7ff fcaa 	bl	8000528 <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd4:	f000 f8a8 	bl	8000d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <SPI1_IRQHandler+0x10>)
 8000be2:	f001 f891 	bl	8001d08 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	2000046c 	.word	0x2000046c

08000bf0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <USART1_IRQHandler+0x10>)
 8000bf6:	f001 fb33 	bl	8002260 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	2000042c 	.word	0x2000042c

08000c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <SystemInit+0x28>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0e:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <SystemInit+0x28>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <SystemInit+0x28>)
 8000c1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c1e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c36:	e003      	b.n	8000c40 <LoopCopyDataInit>

08000c38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c3e:	3104      	adds	r1, #4

08000c40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c40:	480b      	ldr	r0, [pc, #44]	; (8000c70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c48:	d3f6      	bcc.n	8000c38 <CopyDataInit>
  ldr  r2, =_sbss
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c4c:	e002      	b.n	8000c54 <LoopFillZerobss>

08000c4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c50:	f842 3b04 	str.w	r3, [r2], #4

08000c54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c58:	d3f9      	bcc.n	8000c4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c5a:	f7ff ffd3 	bl	8000c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f002 f8fb 	bl	8002e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c62:	f7ff fd49 	bl	80006f8 <main>
  bx  lr    
 8000c66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c68:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c6c:	08002f5c 	.word	0x08002f5c
  ldr  r0, =_sdata
 8000c70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c74:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000c78:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000c7c:	200004c8 	.word	0x200004c8

08000c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC_IRQHandler>
	...

08000c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <HAL_Init+0x40>)
 8000c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <HAL_Init+0x40>)
 8000c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <HAL_Init+0x40>)
 8000ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f000 f94d 	bl	8000f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f000 f808 	bl	8000cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb8:	f7ff fe98 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023c00 	.word	0x40023c00

08000cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_InitTick+0x54>)
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_InitTick+0x58>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 f965 	bl	8000fb6 <HAL_SYSTICK_Config>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e00e      	b.n	8000d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b0f      	cmp	r3, #15
 8000cfa:	d80a      	bhi.n	8000d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	6879      	ldr	r1, [r7, #4]
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f000 f92d 	bl	8000f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d08:	4a06      	ldr	r2, [pc, #24]	; (8000d24 <HAL_InitTick+0x5c>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e000      	b.n	8000d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20000004 	.word	0x20000004

08000d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x20>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x24>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <HAL_IncTick+0x24>)
 8000d3a:	6013      	str	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	200004c4 	.word	0x200004c4

08000d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return uwTick;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <HAL_GetTick+0x14>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	200004c4 	.word	0x200004c4

08000d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d70:	f7ff ffee 	bl	8000d50 <HAL_GetTick>
 8000d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d80:	d005      	beq.n	8000d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <HAL_Delay+0x40>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	461a      	mov	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d8e:	bf00      	nop
 8000d90:	f7ff ffde 	bl	8000d50 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d8f7      	bhi.n	8000d90 <HAL_Delay+0x28>
  {
  }
}
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000008 	.word	0x20000008

08000dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dde:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	60d3      	str	r3, [r2, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <__NVIC_GetPriorityGrouping+0x18>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	f003 0307 	and.w	r3, r3, #7
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	db0b      	blt.n	8000e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	f003 021f 	and.w	r2, r3, #31
 8000e28:	4907      	ldr	r1, [pc, #28]	; (8000e48 <__NVIC_EnableIRQ+0x38>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	095b      	lsrs	r3, r3, #5
 8000e30:	2001      	movs	r0, #1
 8000e32:	fa00 f202 	lsl.w	r2, r0, r2
 8000e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000e100 	.word	0xe000e100

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	db0a      	blt.n	8000e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	490c      	ldr	r1, [pc, #48]	; (8000e98 <__NVIC_SetPriority+0x4c>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	0112      	lsls	r2, r2, #4
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	440b      	add	r3, r1
 8000e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e74:	e00a      	b.n	8000e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4908      	ldr	r1, [pc, #32]	; (8000e9c <__NVIC_SetPriority+0x50>)
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	3b04      	subs	r3, #4
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	440b      	add	r3, r1
 8000e8a:	761a      	strb	r2, [r3, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000e100 	.word	0xe000e100
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	; 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f1c3 0307 	rsb	r3, r3, #7
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	bf28      	it	cs
 8000ebe:	2304      	movcs	r3, #4
 8000ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d902      	bls.n	8000ed0 <NVIC_EncodePriority+0x30>
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3b03      	subs	r3, #3
 8000ece:	e000      	b.n	8000ed2 <NVIC_EncodePriority+0x32>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	4313      	orrs	r3, r2
         );
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3724      	adds	r7, #36	; 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f18:	d301      	bcc.n	8000f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00f      	b.n	8000f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <SysTick_Config+0x40>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f26:	210f      	movs	r1, #15
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f7ff ff8e 	bl	8000e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <SysTick_Config+0x40>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f36:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <SysTick_Config+0x40>)
 8000f38:	2207      	movs	r2, #7
 8000f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	e000e010 	.word	0xe000e010

08000f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ff29 	bl	8000dac <__NVIC_SetPriorityGrouping>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
 8000f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f74:	f7ff ff3e 	bl	8000df4 <__NVIC_GetPriorityGrouping>
 8000f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	68b9      	ldr	r1, [r7, #8]
 8000f7e:	6978      	ldr	r0, [r7, #20]
 8000f80:	f7ff ff8e 	bl	8000ea0 <NVIC_EncodePriority>
 8000f84:	4602      	mov	r2, r0
 8000f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff5d 	bl	8000e4c <__NVIC_SetPriority>
}
 8000f92:	bf00      	nop
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff31 	bl	8000e10 <__NVIC_EnableIRQ>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ffa2 	bl	8000f08 <SysTick_Config>
 8000fc4:	4603      	mov	r3, r0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d004      	beq.n	8000fec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2280      	movs	r2, #128	; 0x80
 8000fe6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e00c      	b.n	8001006 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2205      	movs	r2, #5
 8000ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 0201 	bic.w	r2, r2, #1
 8001002:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	; 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
 800102e:	e16b      	b.n	8001308 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001030:	2201      	movs	r2, #1
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	429a      	cmp	r2, r3
 800104a:	f040 815a 	bne.w	8001302 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d00b      	beq.n	800106e <HAL_GPIO_Init+0x5a>
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b02      	cmp	r3, #2
 800105c:	d007      	beq.n	800106e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001062:	2b11      	cmp	r3, #17
 8001064:	d003      	beq.n	800106e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b12      	cmp	r3, #18
 800106c:	d130      	bne.n	80010d0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	2203      	movs	r2, #3
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	68da      	ldr	r2, [r3, #12]
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010a4:	2201      	movs	r2, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	091b      	lsrs	r3, r3, #4
 80010ba:	f003 0201 	and.w	r2, r3, #1
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4013      	ands	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0xfc>
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	2b12      	cmp	r3, #18
 800110e:	d123      	bne.n	8001158 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	08da      	lsrs	r2, r3, #3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3208      	adds	r2, #8
 8001118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	220f      	movs	r2, #15
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	691a      	ldr	r2, [r3, #16]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	08da      	lsrs	r2, r3, #3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3208      	adds	r2, #8
 8001152:	69b9      	ldr	r1, [r7, #24]
 8001154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	2203      	movs	r2, #3
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0203 	and.w	r2, r3, #3
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 80b4 	beq.w	8001302 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b5f      	ldr	r3, [pc, #380]	; (800131c <HAL_GPIO_Init+0x308>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a2:	4a5e      	ldr	r2, [pc, #376]	; (800131c <HAL_GPIO_Init+0x308>)
 80011a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a8:	6453      	str	r3, [r2, #68]	; 0x44
 80011aa:	4b5c      	ldr	r3, [pc, #368]	; (800131c <HAL_GPIO_Init+0x308>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011b6:	4a5a      	ldr	r2, [pc, #360]	; (8001320 <HAL_GPIO_Init+0x30c>)
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	3302      	adds	r3, #2
 80011be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	220f      	movs	r2, #15
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a51      	ldr	r2, [pc, #324]	; (8001324 <HAL_GPIO_Init+0x310>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d02b      	beq.n	800123a <HAL_GPIO_Init+0x226>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a50      	ldr	r2, [pc, #320]	; (8001328 <HAL_GPIO_Init+0x314>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d025      	beq.n	8001236 <HAL_GPIO_Init+0x222>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4f      	ldr	r2, [pc, #316]	; (800132c <HAL_GPIO_Init+0x318>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d01f      	beq.n	8001232 <HAL_GPIO_Init+0x21e>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4e      	ldr	r2, [pc, #312]	; (8001330 <HAL_GPIO_Init+0x31c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d019      	beq.n	800122e <HAL_GPIO_Init+0x21a>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4d      	ldr	r2, [pc, #308]	; (8001334 <HAL_GPIO_Init+0x320>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d013      	beq.n	800122a <HAL_GPIO_Init+0x216>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4c      	ldr	r2, [pc, #304]	; (8001338 <HAL_GPIO_Init+0x324>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d00d      	beq.n	8001226 <HAL_GPIO_Init+0x212>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4b      	ldr	r2, [pc, #300]	; (800133c <HAL_GPIO_Init+0x328>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d007      	beq.n	8001222 <HAL_GPIO_Init+0x20e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4a      	ldr	r2, [pc, #296]	; (8001340 <HAL_GPIO_Init+0x32c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d101      	bne.n	800121e <HAL_GPIO_Init+0x20a>
 800121a:	2307      	movs	r3, #7
 800121c:	e00e      	b.n	800123c <HAL_GPIO_Init+0x228>
 800121e:	2308      	movs	r3, #8
 8001220:	e00c      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001222:	2306      	movs	r3, #6
 8001224:	e00a      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001226:	2305      	movs	r3, #5
 8001228:	e008      	b.n	800123c <HAL_GPIO_Init+0x228>
 800122a:	2304      	movs	r3, #4
 800122c:	e006      	b.n	800123c <HAL_GPIO_Init+0x228>
 800122e:	2303      	movs	r3, #3
 8001230:	e004      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001232:	2302      	movs	r3, #2
 8001234:	e002      	b.n	800123c <HAL_GPIO_Init+0x228>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <HAL_GPIO_Init+0x228>
 800123a:	2300      	movs	r3, #0
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	f002 0203 	and.w	r2, r2, #3
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	4093      	lsls	r3, r2
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800124c:	4934      	ldr	r1, [pc, #208]	; (8001320 <HAL_GPIO_Init+0x30c>)
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	089b      	lsrs	r3, r3, #2
 8001252:	3302      	adds	r3, #2
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800125a:	4b3a      	ldr	r3, [pc, #232]	; (8001344 <HAL_GPIO_Init+0x330>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800127e:	4a31      	ldr	r2, [pc, #196]	; (8001344 <HAL_GPIO_Init+0x330>)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001284:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <HAL_GPIO_Init+0x330>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012a8:	4a26      	ldr	r2, [pc, #152]	; (8001344 <HAL_GPIO_Init+0x330>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ae:	4b25      	ldr	r3, [pc, #148]	; (8001344 <HAL_GPIO_Init+0x330>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012d2:	4a1c      	ldr	r2, [pc, #112]	; (8001344 <HAL_GPIO_Init+0x330>)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <HAL_GPIO_Init+0x330>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012fc:	4a11      	ldr	r2, [pc, #68]	; (8001344 <HAL_GPIO_Init+0x330>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3301      	adds	r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	2b0f      	cmp	r3, #15
 800130c:	f67f ae90 	bls.w	8001030 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001310:	bf00      	nop
 8001312:	3724      	adds	r7, #36	; 0x24
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	40023800 	.word	0x40023800
 8001320:	40013800 	.word	0x40013800
 8001324:	40020000 	.word	0x40020000
 8001328:	40020400 	.word	0x40020400
 800132c:	40020800 	.word	0x40020800
 8001330:	40020c00 	.word	0x40020c00
 8001334:	40021000 	.word	0x40021000
 8001338:	40021400 	.word	0x40021400
 800133c:	40021800 	.word	0x40021800
 8001340:	40021c00 	.word	0x40021c00
 8001344:	40013c00 	.word	0x40013c00

08001348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	807b      	strh	r3, [r7, #2]
 8001354:	4613      	mov	r3, r2
 8001356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001358:	787b      	ldrb	r3, [r7, #1]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800135e:	887a      	ldrh	r2, [r7, #2]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001364:	e003      	b.n	800136e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001366:	887b      	ldrh	r3, [r7, #2]
 8001368:	041a      	lsls	r2, r3, #16
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	619a      	str	r2, [r3, #24]
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e25b      	b.n	8001846 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b00      	cmp	r3, #0
 8001398:	d075      	beq.n	8001486 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800139a:	4ba3      	ldr	r3, [pc, #652]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 030c 	and.w	r3, r3, #12
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d00c      	beq.n	80013c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013a6:	4ba0      	ldr	r3, [pc, #640]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ae:	2b08      	cmp	r3, #8
 80013b0:	d112      	bne.n	80013d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013b2:	4b9d      	ldr	r3, [pc, #628]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013be:	d10b      	bne.n	80013d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c0:	4b99      	ldr	r3, [pc, #612]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d05b      	beq.n	8001484 <HAL_RCC_OscConfig+0x108>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d157      	bne.n	8001484 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e236      	b.n	8001846 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e0:	d106      	bne.n	80013f0 <HAL_RCC_OscConfig+0x74>
 80013e2:	4b91      	ldr	r3, [pc, #580]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a90      	ldr	r2, [pc, #576]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e01d      	b.n	800142c <HAL_RCC_OscConfig+0xb0>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f8:	d10c      	bne.n	8001414 <HAL_RCC_OscConfig+0x98>
 80013fa:	4b8b      	ldr	r3, [pc, #556]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a8a      	ldr	r2, [pc, #552]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 8001400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	4b88      	ldr	r3, [pc, #544]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a87      	ldr	r2, [pc, #540]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 800140c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e00b      	b.n	800142c <HAL_RCC_OscConfig+0xb0>
 8001414:	4b84      	ldr	r3, [pc, #528]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a83      	ldr	r2, [pc, #524]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 800141a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b81      	ldr	r3, [pc, #516]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a80      	ldr	r2, [pc, #512]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 8001426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d013      	beq.n	800145c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff fc8c 	bl	8000d50 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800143c:	f7ff fc88 	bl	8000d50 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b64      	cmp	r3, #100	; 0x64
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e1fb      	b.n	8001846 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144e:	4b76      	ldr	r3, [pc, #472]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0xc0>
 800145a:	e014      	b.n	8001486 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fc78 	bl	8000d50 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff fc74 	bl	8000d50 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	; 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e1e7      	b.n	8001846 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001476:	4b6c      	ldr	r3, [pc, #432]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0xe8>
 8001482:	e000      	b.n	8001486 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d063      	beq.n	800155a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001492:	4b65      	ldr	r3, [pc, #404]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 030c 	and.w	r3, r3, #12
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00b      	beq.n	80014b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800149e:	4b62      	ldr	r3, [pc, #392]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d11c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014aa:	4b5f      	ldr	r3, [pc, #380]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d116      	bne.n	80014e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b6:	4b5c      	ldr	r3, [pc, #368]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d005      	beq.n	80014ce <HAL_RCC_OscConfig+0x152>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d001      	beq.n	80014ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e1bb      	b.n	8001846 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ce:	4b56      	ldr	r3, [pc, #344]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	4952      	ldr	r1, [pc, #328]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e2:	e03a      	b.n	800155a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d020      	beq.n	800152e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ec:	4b4f      	ldr	r3, [pc, #316]	; (800162c <HAL_RCC_OscConfig+0x2b0>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f2:	f7ff fc2d 	bl	8000d50 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014fa:	f7ff fc29 	bl	8000d50 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e19c      	b.n	8001846 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150c:	4b46      	ldr	r3, [pc, #280]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001518:	4b43      	ldr	r3, [pc, #268]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	4940      	ldr	r1, [pc, #256]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 8001528:	4313      	orrs	r3, r2
 800152a:	600b      	str	r3, [r1, #0]
 800152c:	e015      	b.n	800155a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800152e:	4b3f      	ldr	r3, [pc, #252]	; (800162c <HAL_RCC_OscConfig+0x2b0>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001534:	f7ff fc0c 	bl	8000d50 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800153c:	f7ff fc08 	bl	8000d50 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e17b      	b.n	8001846 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800154e:	4b36      	ldr	r3, [pc, #216]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d030      	beq.n	80015c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d016      	beq.n	800159c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800156e:	4b30      	ldr	r3, [pc, #192]	; (8001630 <HAL_RCC_OscConfig+0x2b4>)
 8001570:	2201      	movs	r2, #1
 8001572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001574:	f7ff fbec 	bl	8000d50 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800157c:	f7ff fbe8 	bl	8000d50 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e15b      	b.n	8001846 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158e:	4b26      	ldr	r3, [pc, #152]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 8001590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0f0      	beq.n	800157c <HAL_RCC_OscConfig+0x200>
 800159a:	e015      	b.n	80015c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800159c:	4b24      	ldr	r3, [pc, #144]	; (8001630 <HAL_RCC_OscConfig+0x2b4>)
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a2:	f7ff fbd5 	bl	8000d50 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015aa:	f7ff fbd1 	bl	8000d50 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e144      	b.n	8001846 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015bc:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 80015be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1f0      	bne.n	80015aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 80a0 	beq.w	8001716 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015da:	4b13      	ldr	r3, [pc, #76]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10f      	bne.n	8001606 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 80015f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f4:	6413      	str	r3, [r2, #64]	; 0x40
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <HAL_RCC_OscConfig+0x2ac>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001602:	2301      	movs	r3, #1
 8001604:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <HAL_RCC_OscConfig+0x2b8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160e:	2b00      	cmp	r3, #0
 8001610:	d121      	bne.n	8001656 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_RCC_OscConfig+0x2b8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a07      	ldr	r2, [pc, #28]	; (8001634 <HAL_RCC_OscConfig+0x2b8>)
 8001618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800161c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800161e:	f7ff fb97 	bl	8000d50 <HAL_GetTick>
 8001622:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001624:	e011      	b.n	800164a <HAL_RCC_OscConfig+0x2ce>
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800
 800162c:	42470000 	.word	0x42470000
 8001630:	42470e80 	.word	0x42470e80
 8001634:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001638:	f7ff fb8a 	bl	8000d50 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e0fd      	b.n	8001846 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164a:	4b81      	ldr	r3, [pc, #516]	; (8001850 <HAL_RCC_OscConfig+0x4d4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d106      	bne.n	800166c <HAL_RCC_OscConfig+0x2f0>
 800165e:	4b7d      	ldr	r3, [pc, #500]	; (8001854 <HAL_RCC_OscConfig+0x4d8>)
 8001660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001662:	4a7c      	ldr	r2, [pc, #496]	; (8001854 <HAL_RCC_OscConfig+0x4d8>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	6713      	str	r3, [r2, #112]	; 0x70
 800166a:	e01c      	b.n	80016a6 <HAL_RCC_OscConfig+0x32a>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	2b05      	cmp	r3, #5
 8001672:	d10c      	bne.n	800168e <HAL_RCC_OscConfig+0x312>
 8001674:	4b77      	ldr	r3, [pc, #476]	; (8001854 <HAL_RCC_OscConfig+0x4d8>)
 8001676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001678:	4a76      	ldr	r2, [pc, #472]	; (8001854 <HAL_RCC_OscConfig+0x4d8>)
 800167a:	f043 0304 	orr.w	r3, r3, #4
 800167e:	6713      	str	r3, [r2, #112]	; 0x70
 8001680:	4b74      	ldr	r3, [pc, #464]	; (8001854 <HAL_RCC_OscConfig+0x4d8>)
 8001682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001684:	4a73      	ldr	r2, [pc, #460]	; (8001854 <HAL_RCC_OscConfig+0x4d8>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6713      	str	r3, [r2, #112]	; 0x70
 800168c:	e00b      	b.n	80016a6 <HAL_RCC_OscConfig+0x32a>
 800168e:	4b71      	ldr	r3, [pc, #452]	; (8001854 <HAL_RCC_OscConfig+0x4d8>)
 8001690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001692:	4a70      	ldr	r2, [pc, #448]	; (8001854 <HAL_RCC_OscConfig+0x4d8>)
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	6713      	str	r3, [r2, #112]	; 0x70
 800169a:	4b6e      	ldr	r3, [pc, #440]	; (8001854 <HAL_RCC_OscConfig+0x4d8>)
 800169c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800169e:	4a6d      	ldr	r2, [pc, #436]	; (8001854 <HAL_RCC_OscConfig+0x4d8>)
 80016a0:	f023 0304 	bic.w	r3, r3, #4
 80016a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d015      	beq.n	80016da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ae:	f7ff fb4f 	bl	8000d50 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b4:	e00a      	b.n	80016cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016b6:	f7ff fb4b 	bl	8000d50 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e0bc      	b.n	8001846 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016cc:	4b61      	ldr	r3, [pc, #388]	; (8001854 <HAL_RCC_OscConfig+0x4d8>)
 80016ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0ee      	beq.n	80016b6 <HAL_RCC_OscConfig+0x33a>
 80016d8:	e014      	b.n	8001704 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016da:	f7ff fb39 	bl	8000d50 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e0:	e00a      	b.n	80016f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e2:	f7ff fb35 	bl	8000d50 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e0a6      	b.n	8001846 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f8:	4b56      	ldr	r3, [pc, #344]	; (8001854 <HAL_RCC_OscConfig+0x4d8>)
 80016fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1ee      	bne.n	80016e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001704:	7dfb      	ldrb	r3, [r7, #23]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d105      	bne.n	8001716 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800170a:	4b52      	ldr	r3, [pc, #328]	; (8001854 <HAL_RCC_OscConfig+0x4d8>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	4a51      	ldr	r2, [pc, #324]	; (8001854 <HAL_RCC_OscConfig+0x4d8>)
 8001710:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001714:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 8092 	beq.w	8001844 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001720:	4b4c      	ldr	r3, [pc, #304]	; (8001854 <HAL_RCC_OscConfig+0x4d8>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f003 030c 	and.w	r3, r3, #12
 8001728:	2b08      	cmp	r3, #8
 800172a:	d05c      	beq.n	80017e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	2b02      	cmp	r3, #2
 8001732:	d141      	bne.n	80017b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001734:	4b48      	ldr	r3, [pc, #288]	; (8001858 <HAL_RCC_OscConfig+0x4dc>)
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173a:	f7ff fb09 	bl	8000d50 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001742:	f7ff fb05 	bl	8000d50 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e078      	b.n	8001846 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001754:	4b3f      	ldr	r3, [pc, #252]	; (8001854 <HAL_RCC_OscConfig+0x4d8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1f0      	bne.n	8001742 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69da      	ldr	r2, [r3, #28]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	431a      	orrs	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176e:	019b      	lsls	r3, r3, #6
 8001770:	431a      	orrs	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001776:	085b      	lsrs	r3, r3, #1
 8001778:	3b01      	subs	r3, #1
 800177a:	041b      	lsls	r3, r3, #16
 800177c:	431a      	orrs	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001782:	061b      	lsls	r3, r3, #24
 8001784:	4933      	ldr	r1, [pc, #204]	; (8001854 <HAL_RCC_OscConfig+0x4d8>)
 8001786:	4313      	orrs	r3, r2
 8001788:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800178a:	4b33      	ldr	r3, [pc, #204]	; (8001858 <HAL_RCC_OscConfig+0x4dc>)
 800178c:	2201      	movs	r2, #1
 800178e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001790:	f7ff fade 	bl	8000d50 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001798:	f7ff fada 	bl	8000d50 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e04d      	b.n	8001846 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017aa:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <HAL_RCC_OscConfig+0x4d8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0x41c>
 80017b6:	e045      	b.n	8001844 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b8:	4b27      	ldr	r3, [pc, #156]	; (8001858 <HAL_RCC_OscConfig+0x4dc>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017be:	f7ff fac7 	bl	8000d50 <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017c6:	f7ff fac3 	bl	8000d50 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e036      	b.n	8001846 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d8:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <HAL_RCC_OscConfig+0x4d8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1f0      	bne.n	80017c6 <HAL_RCC_OscConfig+0x44a>
 80017e4:	e02e      	b.n	8001844 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e029      	b.n	8001846 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017f2:	4b18      	ldr	r3, [pc, #96]	; (8001854 <HAL_RCC_OscConfig+0x4d8>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	429a      	cmp	r2, r3
 8001804:	d11c      	bne.n	8001840 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001810:	429a      	cmp	r2, r3
 8001812:	d115      	bne.n	8001840 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800181a:	4013      	ands	r3, r2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001820:	4293      	cmp	r3, r2
 8001822:	d10d      	bne.n	8001840 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800182e:	429a      	cmp	r2, r3
 8001830:	d106      	bne.n	8001840 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800183c:	429a      	cmp	r2, r3
 800183e:	d001      	beq.n	8001844 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40007000 	.word	0x40007000
 8001854:	40023800 	.word	0x40023800
 8001858:	42470060 	.word	0x42470060

0800185c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e0cc      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001870:	4b68      	ldr	r3, [pc, #416]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 030f 	and.w	r3, r3, #15
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d90c      	bls.n	8001898 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187e:	4b65      	ldr	r3, [pc, #404]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001886:	4b63      	ldr	r3, [pc, #396]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0b8      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d020      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018b0:	4b59      	ldr	r3, [pc, #356]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	4a58      	ldr	r2, [pc, #352]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018c8:	4b53      	ldr	r3, [pc, #332]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	4a52      	ldr	r2, [pc, #328]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018d4:	4b50      	ldr	r3, [pc, #320]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	494d      	ldr	r1, [pc, #308]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d044      	beq.n	800197c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d107      	bne.n	800190a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	4b47      	ldr	r3, [pc, #284]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d119      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e07f      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b02      	cmp	r3, #2
 8001910:	d003      	beq.n	800191a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001916:	2b03      	cmp	r3, #3
 8001918:	d107      	bne.n	800192a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191a:	4b3f      	ldr	r3, [pc, #252]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d109      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e06f      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800192a:	4b3b      	ldr	r3, [pc, #236]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e067      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800193a:	4b37      	ldr	r3, [pc, #220]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f023 0203 	bic.w	r2, r3, #3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	4934      	ldr	r1, [pc, #208]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 8001948:	4313      	orrs	r3, r2
 800194a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800194c:	f7ff fa00 	bl	8000d50 <HAL_GetTick>
 8001950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001952:	e00a      	b.n	800196a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001954:	f7ff f9fc 	bl	8000d50 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e04f      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196a:	4b2b      	ldr	r3, [pc, #172]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 020c 	and.w	r2, r3, #12
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	429a      	cmp	r2, r3
 800197a:	d1eb      	bne.n	8001954 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800197c:	4b25      	ldr	r3, [pc, #148]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 030f 	and.w	r3, r3, #15
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	429a      	cmp	r2, r3
 8001988:	d20c      	bcs.n	80019a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198a:	4b22      	ldr	r3, [pc, #136]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	b2d2      	uxtb	r2, r2
 8001990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001992:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <HAL_RCC_ClockConfig+0x1b8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e032      	b.n	8001a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d008      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019b0:	4b19      	ldr	r3, [pc, #100]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4916      	ldr	r1, [pc, #88]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d009      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ce:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	490e      	ldr	r1, [pc, #56]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019e2:	f000 f821 	bl	8001a28 <HAL_RCC_GetSysClockFreq>
 80019e6:	4601      	mov	r1, r0
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <HAL_RCC_ClockConfig+0x1bc>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	091b      	lsrs	r3, r3, #4
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <HAL_RCC_ClockConfig+0x1c0>)
 80019f4:	5cd3      	ldrb	r3, [r2, r3]
 80019f6:	fa21 f303 	lsr.w	r3, r1, r3
 80019fa:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_RCC_ClockConfig+0x1c8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff f960 	bl	8000cc8 <HAL_InitTick>

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023c00 	.word	0x40023c00
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	08002f34 	.word	0x08002f34
 8001a20:	20000000 	.word	0x20000000
 8001a24:	20000004 	.word	0x20000004

08001a28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	607b      	str	r3, [r7, #4]
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	2300      	movs	r3, #0
 8001a38:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a3e:	4b63      	ldr	r3, [pc, #396]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 030c 	and.w	r3, r3, #12
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d007      	beq.n	8001a5a <HAL_RCC_GetSysClockFreq+0x32>
 8001a4a:	2b08      	cmp	r3, #8
 8001a4c:	d008      	beq.n	8001a60 <HAL_RCC_GetSysClockFreq+0x38>
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f040 80b4 	bne.w	8001bbc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a54:	4b5e      	ldr	r3, [pc, #376]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001a56:	60bb      	str	r3, [r7, #8]
       break;
 8001a58:	e0b3      	b.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a5a:	4b5e      	ldr	r3, [pc, #376]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001a5c:	60bb      	str	r3, [r7, #8]
      break;
 8001a5e:	e0b0      	b.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a60:	4b5a      	ldr	r3, [pc, #360]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a68:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a6a:	4b58      	ldr	r3, [pc, #352]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d04a      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a76:	4b55      	ldr	r3, [pc, #340]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	099b      	lsrs	r3, r3, #6
 8001a7c:	f04f 0400 	mov.w	r4, #0
 8001a80:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	ea03 0501 	and.w	r5, r3, r1
 8001a8c:	ea04 0602 	and.w	r6, r4, r2
 8001a90:	4629      	mov	r1, r5
 8001a92:	4632      	mov	r2, r6
 8001a94:	f04f 0300 	mov.w	r3, #0
 8001a98:	f04f 0400 	mov.w	r4, #0
 8001a9c:	0154      	lsls	r4, r2, #5
 8001a9e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001aa2:	014b      	lsls	r3, r1, #5
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4622      	mov	r2, r4
 8001aa8:	1b49      	subs	r1, r1, r5
 8001aaa:	eb62 0206 	sbc.w	r2, r2, r6
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	f04f 0400 	mov.w	r4, #0
 8001ab6:	0194      	lsls	r4, r2, #6
 8001ab8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001abc:	018b      	lsls	r3, r1, #6
 8001abe:	1a5b      	subs	r3, r3, r1
 8001ac0:	eb64 0402 	sbc.w	r4, r4, r2
 8001ac4:	f04f 0100 	mov.w	r1, #0
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	00e2      	lsls	r2, r4, #3
 8001ace:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ad2:	00d9      	lsls	r1, r3, #3
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4614      	mov	r4, r2
 8001ad8:	195b      	adds	r3, r3, r5
 8001ada:	eb44 0406 	adc.w	r4, r4, r6
 8001ade:	f04f 0100 	mov.w	r1, #0
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	0262      	lsls	r2, r4, #9
 8001ae8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001aec:	0259      	lsls	r1, r3, #9
 8001aee:	460b      	mov	r3, r1
 8001af0:	4614      	mov	r4, r2
 8001af2:	4618      	mov	r0, r3
 8001af4:	4621      	mov	r1, r4
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f04f 0400 	mov.w	r4, #0
 8001afc:	461a      	mov	r2, r3
 8001afe:	4623      	mov	r3, r4
 8001b00:	f7fe fb6c 	bl	80001dc <__aeabi_uldivmod>
 8001b04:	4603      	mov	r3, r0
 8001b06:	460c      	mov	r4, r1
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	e049      	b.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0c:	4b2f      	ldr	r3, [pc, #188]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	099b      	lsrs	r3, r3, #6
 8001b12:	f04f 0400 	mov.w	r4, #0
 8001b16:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	ea03 0501 	and.w	r5, r3, r1
 8001b22:	ea04 0602 	and.w	r6, r4, r2
 8001b26:	4629      	mov	r1, r5
 8001b28:	4632      	mov	r2, r6
 8001b2a:	f04f 0300 	mov.w	r3, #0
 8001b2e:	f04f 0400 	mov.w	r4, #0
 8001b32:	0154      	lsls	r4, r2, #5
 8001b34:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b38:	014b      	lsls	r3, r1, #5
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4622      	mov	r2, r4
 8001b3e:	1b49      	subs	r1, r1, r5
 8001b40:	eb62 0206 	sbc.w	r2, r2, r6
 8001b44:	f04f 0300 	mov.w	r3, #0
 8001b48:	f04f 0400 	mov.w	r4, #0
 8001b4c:	0194      	lsls	r4, r2, #6
 8001b4e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b52:	018b      	lsls	r3, r1, #6
 8001b54:	1a5b      	subs	r3, r3, r1
 8001b56:	eb64 0402 	sbc.w	r4, r4, r2
 8001b5a:	f04f 0100 	mov.w	r1, #0
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	00e2      	lsls	r2, r4, #3
 8001b64:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b68:	00d9      	lsls	r1, r3, #3
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4614      	mov	r4, r2
 8001b6e:	195b      	adds	r3, r3, r5
 8001b70:	eb44 0406 	adc.w	r4, r4, r6
 8001b74:	f04f 0100 	mov.w	r1, #0
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	02a2      	lsls	r2, r4, #10
 8001b7e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001b82:	0299      	lsls	r1, r3, #10
 8001b84:	460b      	mov	r3, r1
 8001b86:	4614      	mov	r4, r2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	4621      	mov	r1, r4
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f04f 0400 	mov.w	r4, #0
 8001b92:	461a      	mov	r2, r3
 8001b94:	4623      	mov	r3, r4
 8001b96:	f7fe fb21 	bl	80001dc <__aeabi_uldivmod>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	460c      	mov	r4, r1
 8001b9e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ba0:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	0c1b      	lsrs	r3, r3, #16
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	3301      	adds	r3, #1
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb8:	60bb      	str	r3, [r7, #8]
      break;
 8001bba:	e002      	b.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bbc:	4b04      	ldr	r3, [pc, #16]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001bbe:	60bb      	str	r3, [r7, #8]
      break;
 8001bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bc2:	68bb      	ldr	r3, [r7, #8]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	00f42400 	.word	0x00f42400
 8001bd4:	007a1200 	.word	0x007a1200

08001bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bdc:	4b03      	ldr	r3, [pc, #12]	; (8001bec <HAL_RCC_GetHCLKFreq+0x14>)
 8001bde:	681b      	ldr	r3, [r3, #0]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	20000000 	.word	0x20000000

08001bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001bf4:	f7ff fff0 	bl	8001bd8 <HAL_RCC_GetHCLKFreq>
 8001bf8:	4601      	mov	r1, r0
 8001bfa:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	0a9b      	lsrs	r3, r3, #10
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	4a03      	ldr	r2, [pc, #12]	; (8001c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c06:	5cd3      	ldrb	r3, [r2, r3]
 8001c08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40023800 	.word	0x40023800
 8001c14:	08002f44 	.word	0x08002f44

08001c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c1c:	f7ff ffdc 	bl	8001bd8 <HAL_RCC_GetHCLKFreq>
 8001c20:	4601      	mov	r1, r0
 8001c22:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	0b5b      	lsrs	r3, r3, #13
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	4a03      	ldr	r2, [pc, #12]	; (8001c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c2e:	5cd3      	ldrb	r3, [r2, r3]
 8001c30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	08002f44 	.word	0x08002f44

08001c40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e056      	b.n	8001d00 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d106      	bne.n	8001c72 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7fe fee5 	bl	8000a3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2202      	movs	r2, #2
 8001c76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c88:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	ea42 0103 	orr.w	r1, r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	0c1b      	lsrs	r3, r3, #16
 8001cd0:	f003 0104 	and.w	r1, r3, #4
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	69da      	ldr	r2, [r3, #28]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	099b      	lsrs	r3, r3, #6
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10f      	bne.n	8001d4c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00a      	beq.n	8001d4c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	099b      	lsrs	r3, r3, #6
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d004      	beq.n	8001d4c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	4798      	blx	r3
    return;
 8001d4a:	e0d8      	b.n	8001efe <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	085b      	lsrs	r3, r3, #1
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00a      	beq.n	8001d6e <HAL_SPI_IRQHandler+0x66>
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	09db      	lsrs	r3, r3, #7
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d004      	beq.n	8001d6e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	4798      	blx	r3
    return;
 8001d6c:	e0c7      	b.n	8001efe <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	095b      	lsrs	r3, r3, #5
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10c      	bne.n	8001d94 <HAL_SPI_IRQHandler+0x8c>
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	099b      	lsrs	r3, r3, #6
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d106      	bne.n	8001d94 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	0a1b      	lsrs	r3, r3, #8
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 80b5 	beq.w	8001efe <HAL_SPI_IRQHandler+0x1f6>
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	095b      	lsrs	r3, r3, #5
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80ae 	beq.w	8001efe <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	099b      	lsrs	r3, r3, #6
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d023      	beq.n	8001df6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d011      	beq.n	8001dde <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbe:	f043 0204 	orr.w	r2, r3, #4
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	e00b      	b.n	8001df6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	693b      	ldr	r3, [r7, #16]
        return;
 8001df4:	e083      	b.n	8001efe <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	095b      	lsrs	r3, r3, #5
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d014      	beq.n	8001e2c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e06:	f043 0201 	orr.w	r2, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	0a1b      	lsrs	r3, r3, #8
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00c      	beq.n	8001e52 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3c:	f043 0208 	orr.w	r2, r3, #8
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	60bb      	str	r3, [r7, #8]
 8001e50:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d050      	beq.n	8001efc <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001e68:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d104      	bne.n	8001e86 <HAL_SPI_IRQHandler+0x17e>
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d034      	beq.n	8001ef0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0203 	bic.w	r2, r2, #3
 8001e94:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d011      	beq.n	8001ec2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	4a18      	ldr	r2, [pc, #96]	; (8001f04 <HAL_SPI_IRQHandler+0x1fc>)
 8001ea4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff f88f 	bl	8000fce <HAL_DMA_Abort_IT>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d005      	beq.n	8001ec2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d016      	beq.n	8001ef8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ece:	4a0d      	ldr	r2, [pc, #52]	; (8001f04 <HAL_SPI_IRQHandler+0x1fc>)
 8001ed0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff f879 	bl	8000fce <HAL_DMA_Abort_IT>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00a      	beq.n	8001ef8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8001eee:	e003      	b.n	8001ef8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f809 	bl	8001f08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001ef6:	e000      	b.n	8001efa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8001ef8:	bf00      	nop
    return;
 8001efa:	bf00      	nop
 8001efc:	bf00      	nop
  }
}
 8001efe:	3720      	adds	r7, #32
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	08001f1d 	.word	0x08001f1d

08001f08 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f28:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f7ff ffe6 	bl	8001f08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001f3c:	bf00      	nop
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e03f      	b.n	8001fd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d106      	bne.n	8001f70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7fe fdb6 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2224      	movs	r2, #36	; 0x24
 8001f74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68da      	ldr	r2, [r3, #12]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 fbe9 	bl	8002760 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	691a      	ldr	r2, [r3, #16]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695a      	ldr	r2, [r3, #20]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68da      	ldr	r2, [r3, #12]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2220      	movs	r2, #32
 8001fd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b088      	sub	sp, #32
 8001fe2:	af02      	add	r7, sp, #8
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	603b      	str	r3, [r7, #0]
 8001fea:	4613      	mov	r3, r2
 8001fec:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b20      	cmp	r3, #32
 8001ffc:	f040 8090 	bne.w	8002120 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <HAL_UART_Receive+0x2e>
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e088      	b.n	8002122 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002016:	2b01      	cmp	r3, #1
 8002018:	d101      	bne.n	800201e <HAL_UART_Receive+0x40>
 800201a:	2302      	movs	r3, #2
 800201c:	e081      	b.n	8002122 <HAL_UART_Receive+0x144>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2222      	movs	r2, #34	; 0x22
 8002030:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002034:	f7fe fe8c 	bl	8000d50 <HAL_GetTick>
 8002038:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	88fa      	ldrh	r2, [r7, #6]
 800203e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	88fa      	ldrh	r2, [r7, #6]
 8002044:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800204e:	e05c      	b.n	800210a <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002054:	b29b      	uxth	r3, r3
 8002056:	3b01      	subs	r3, #1
 8002058:	b29a      	uxth	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002066:	d12b      	bne.n	80020c0 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	2200      	movs	r2, #0
 8002070:	2120      	movs	r1, #32
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 fa08 	bl	8002488 <UART_WaitOnFlagUntilTimeout>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e04f      	b.n	8002122 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10c      	bne.n	80020a8 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	b29b      	uxth	r3, r3
 8002096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800209a:	b29a      	uxth	r2, r3
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	3302      	adds	r3, #2
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	e030      	b.n	800210a <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	3301      	adds	r3, #1
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	e024      	b.n	800210a <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	2200      	movs	r2, #0
 80020c8:	2120      	movs	r1, #32
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 f9dc 	bl	8002488 <UART_WaitOnFlagUntilTimeout>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e023      	b.n	8002122 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d108      	bne.n	80020f4 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6859      	ldr	r1, [r3, #4]
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	60ba      	str	r2, [r7, #8]
 80020ee:	b2ca      	uxtb	r2, r1
 80020f0:	701a      	strb	r2, [r3, #0]
 80020f2:	e00a      	b.n	800210a <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	1c59      	adds	r1, r3, #1
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800210e:	b29b      	uxth	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d19d      	bne.n	8002050 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2220      	movs	r2, #32
 8002118:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	e000      	b.n	8002122 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8002120:	2302      	movs	r3, #2
  }
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800212a:	b480      	push	{r7}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	4613      	mov	r3, r2
 8002136:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b20      	cmp	r3, #32
 8002142:	d130      	bne.n	80021a6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d002      	beq.n	8002150 <HAL_UART_Transmit_IT+0x26>
 800214a:	88fb      	ldrh	r3, [r7, #6]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e029      	b.n	80021a8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_UART_Transmit_IT+0x38>
 800215e:	2302      	movs	r3, #2
 8002160:	e022      	b.n	80021a8 <HAL_UART_Transmit_IT+0x7e>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	88fa      	ldrh	r2, [r7, #6]
 8002174:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	88fa      	ldrh	r2, [r7, #6]
 800217a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2221      	movs	r2, #33	; 0x21
 8002186:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021a0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	e000      	b.n	80021a8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80021a6:	2302      	movs	r3, #2
  }
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	4613      	mov	r3, r2
 80021c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b20      	cmp	r3, #32
 80021cc:	d140      	bne.n	8002250 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <HAL_UART_Receive_IT+0x26>
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e039      	b.n	8002252 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_UART_Receive_IT+0x38>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e032      	b.n	8002252 <HAL_UART_Receive_IT+0x9e>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	88fa      	ldrh	r2, [r7, #6]
 80021fe:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	88fa      	ldrh	r2, [r7, #6]
 8002204:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2222      	movs	r2, #34	; 0x22
 8002210:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800222a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	695a      	ldr	r2, [r3, #20]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0220 	orr.w	r2, r2, #32
 800224a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	e000      	b.n	8002252 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002250:	2302      	movs	r3, #2
  }
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b088      	sub	sp, #32
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002280:	2300      	movs	r3, #0
 8002282:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10d      	bne.n	80022b2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	f003 0320 	and.w	r3, r3, #32
 800229c:	2b00      	cmp	r3, #0
 800229e:	d008      	beq.n	80022b2 <HAL_UART_IRQHandler+0x52>
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	f003 0320 	and.w	r3, r3, #32
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f9d6 	bl	800265c <UART_Receive_IT>
      return;
 80022b0:	e0d1      	b.n	8002456 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 80b0 	beq.w	800241a <HAL_UART_IRQHandler+0x1ba>
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d105      	bne.n	80022d0 <HAL_UART_IRQHandler+0x70>
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f000 80a5 	beq.w	800241a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <HAL_UART_IRQHandler+0x90>
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d005      	beq.n	80022f0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e8:	f043 0201 	orr.w	r2, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <HAL_UART_IRQHandler+0xb0>
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002308:	f043 0202 	orr.w	r2, r3, #2
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00a      	beq.n	8002330 <HAL_UART_IRQHandler+0xd0>
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002328:	f043 0204 	orr.w	r2, r3, #4
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00f      	beq.n	800235a <HAL_UART_IRQHandler+0xfa>
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	f003 0320 	and.w	r3, r3, #32
 8002340:	2b00      	cmp	r3, #0
 8002342:	d104      	bne.n	800234e <HAL_UART_IRQHandler+0xee>
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d005      	beq.n	800235a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002352:	f043 0208 	orr.w	r2, r3, #8
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235e:	2b00      	cmp	r3, #0
 8002360:	d078      	beq.n	8002454 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	f003 0320 	and.w	r3, r3, #32
 8002368:	2b00      	cmp	r3, #0
 800236a:	d007      	beq.n	800237c <HAL_UART_IRQHandler+0x11c>
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	f003 0320 	and.w	r3, r3, #32
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f970 	bl	800265c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002386:	2b40      	cmp	r3, #64	; 0x40
 8002388:	bf0c      	ite	eq
 800238a:	2301      	moveq	r3, #1
 800238c:	2300      	movne	r3, #0
 800238e:	b2db      	uxtb	r3, r3
 8002390:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b00      	cmp	r3, #0
 800239c:	d102      	bne.n	80023a4 <HAL_UART_IRQHandler+0x144>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d031      	beq.n	8002408 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 f8b9 	bl	800251c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b4:	2b40      	cmp	r3, #64	; 0x40
 80023b6:	d123      	bne.n	8002400 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023c6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d013      	beq.n	80023f8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d4:	4a21      	ldr	r2, [pc, #132]	; (800245c <HAL_UART_IRQHandler+0x1fc>)
 80023d6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe fdf6 	bl	8000fce <HAL_DMA_Abort_IT>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d016      	beq.n	8002416 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023f2:	4610      	mov	r0, r2
 80023f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023f6:	e00e      	b.n	8002416 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f83b 	bl	8002474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023fe:	e00a      	b.n	8002416 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 f837 	bl	8002474 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002406:	e006      	b.n	8002416 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f833 	bl	8002474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002414:	e01e      	b.n	8002454 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002416:	bf00      	nop
    return;
 8002418:	e01c      	b.n	8002454 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_UART_IRQHandler+0x1d6>
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f8a6 	bl	8002580 <UART_Transmit_IT>
    return;
 8002434:	e00f      	b.n	8002456 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00a      	beq.n	8002456 <HAL_UART_IRQHandler+0x1f6>
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002446:	2b00      	cmp	r3, #0
 8002448:	d005      	beq.n	8002456 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f8ee 	bl	800262c <UART_EndTransmit_IT>
    return;
 8002450:	bf00      	nop
 8002452:	e000      	b.n	8002456 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002454:	bf00      	nop
  }
}
 8002456:	3720      	adds	r7, #32
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	08002559 	.word	0x08002559

08002460 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	603b      	str	r3, [r7, #0]
 8002494:	4613      	mov	r3, r2
 8002496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002498:	e02c      	b.n	80024f4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a0:	d028      	beq.n	80024f4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d007      	beq.n	80024b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80024a8:	f7fe fc52 	bl	8000d50 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d21d      	bcs.n	80024f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80024c6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695a      	ldr	r2, [r3, #20]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0201 	bic.w	r2, r2, #1
 80024d6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2220      	movs	r2, #32
 80024dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e00f      	b.n	8002514 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	4013      	ands	r3, r2
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	429a      	cmp	r2, r3
 8002502:	bf0c      	ite	eq
 8002504:	2301      	moveq	r3, #1
 8002506:	2300      	movne	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	461a      	mov	r2, r3
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	429a      	cmp	r2, r3
 8002510:	d0c3      	beq.n	800249a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002532:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695a      	ldr	r2, [r3, #20]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0201 	bic.w	r2, r2, #1
 8002542:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2220      	movs	r2, #32
 8002548:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002564:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f7ff ff7e 	bl	8002474 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002578:	bf00      	nop
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b21      	cmp	r3, #33	; 0x21
 8002592:	d144      	bne.n	800261e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800259c:	d11a      	bne.n	80025d4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	461a      	mov	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025b2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d105      	bne.n	80025c8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	1c9a      	adds	r2, r3, #2
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	621a      	str	r2, [r3, #32]
 80025c6:	e00e      	b.n	80025e6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	621a      	str	r2, [r3, #32]
 80025d2:	e008      	b.n	80025e6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	1c59      	adds	r1, r3, #1
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6211      	str	r1, [r2, #32]
 80025de:	781a      	ldrb	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	4619      	mov	r1, r3
 80025f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10f      	bne.n	800261a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002608:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002618:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	e000      	b.n	8002620 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800261e:	2302      	movs	r3, #2
  }
}
 8002620:	4618      	mov	r0, r3
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002642:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff ff07 	bl	8002460 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b22      	cmp	r3, #34	; 0x22
 800266e:	d171      	bne.n	8002754 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002678:	d123      	bne.n	80026c2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10e      	bne.n	80026a6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	b29b      	uxth	r3, r3
 8002690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269e:	1c9a      	adds	r2, r3, #2
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	629a      	str	r2, [r3, #40]	; 0x28
 80026a4:	e029      	b.n	80026fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ba:	1c5a      	adds	r2, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	629a      	str	r2, [r3, #40]	; 0x28
 80026c0:	e01b      	b.n	80026fa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10a      	bne.n	80026e0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6858      	ldr	r0, [r3, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d4:	1c59      	adds	r1, r3, #1
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6291      	str	r1, [r2, #40]	; 0x28
 80026da:	b2c2      	uxtb	r2, r0
 80026dc:	701a      	strb	r2, [r3, #0]
 80026de:	e00c      	b.n	80026fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ec:	1c58      	adds	r0, r3, #1
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	6288      	str	r0, [r1, #40]	; 0x28
 80026f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026fe:	b29b      	uxth	r3, r3
 8002700:	3b01      	subs	r3, #1
 8002702:	b29b      	uxth	r3, r3
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	4619      	mov	r1, r3
 8002708:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800270a:	2b00      	cmp	r3, #0
 800270c:	d120      	bne.n	8002750 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0220 	bic.w	r2, r2, #32
 800271c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68da      	ldr	r2, [r3, #12]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800272c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695a      	ldr	r2, [r3, #20]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0201 	bic.w	r2, r2, #1
 800273c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2220      	movs	r2, #32
 8002742:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fd ff06 	bl	8000558 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800274c:	2300      	movs	r3, #0
 800274e:	e002      	b.n	8002756 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	e000      	b.n	8002756 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002754:	2302      	movs	r3, #2
  }
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002764:	b085      	sub	sp, #20
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	431a      	orrs	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	4313      	orrs	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80027a2:	f023 030c 	bic.w	r3, r3, #12
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	68f9      	ldr	r1, [r7, #12]
 80027ac:	430b      	orrs	r3, r1
 80027ae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699a      	ldr	r2, [r3, #24]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027ce:	f040 818b 	bne.w	8002ae8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4ac1      	ldr	r2, [pc, #772]	; (8002adc <UART_SetConfig+0x37c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d005      	beq.n	80027e8 <UART_SetConfig+0x88>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4abf      	ldr	r2, [pc, #764]	; (8002ae0 <UART_SetConfig+0x380>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	f040 80bd 	bne.w	8002962 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027e8:	f7ff fa16 	bl	8001c18 <HAL_RCC_GetPCLK2Freq>
 80027ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	461d      	mov	r5, r3
 80027f2:	f04f 0600 	mov.w	r6, #0
 80027f6:	46a8      	mov	r8, r5
 80027f8:	46b1      	mov	r9, r6
 80027fa:	eb18 0308 	adds.w	r3, r8, r8
 80027fe:	eb49 0409 	adc.w	r4, r9, r9
 8002802:	4698      	mov	r8, r3
 8002804:	46a1      	mov	r9, r4
 8002806:	eb18 0805 	adds.w	r8, r8, r5
 800280a:	eb49 0906 	adc.w	r9, r9, r6
 800280e:	f04f 0100 	mov.w	r1, #0
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800281a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800281e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002822:	4688      	mov	r8, r1
 8002824:	4691      	mov	r9, r2
 8002826:	eb18 0005 	adds.w	r0, r8, r5
 800282a:	eb49 0106 	adc.w	r1, r9, r6
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	461d      	mov	r5, r3
 8002834:	f04f 0600 	mov.w	r6, #0
 8002838:	196b      	adds	r3, r5, r5
 800283a:	eb46 0406 	adc.w	r4, r6, r6
 800283e:	461a      	mov	r2, r3
 8002840:	4623      	mov	r3, r4
 8002842:	f7fd fccb 	bl	80001dc <__aeabi_uldivmod>
 8002846:	4603      	mov	r3, r0
 8002848:	460c      	mov	r4, r1
 800284a:	461a      	mov	r2, r3
 800284c:	4ba5      	ldr	r3, [pc, #660]	; (8002ae4 <UART_SetConfig+0x384>)
 800284e:	fba3 2302 	umull	r2, r3, r3, r2
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	461d      	mov	r5, r3
 800285c:	f04f 0600 	mov.w	r6, #0
 8002860:	46a9      	mov	r9, r5
 8002862:	46b2      	mov	sl, r6
 8002864:	eb19 0309 	adds.w	r3, r9, r9
 8002868:	eb4a 040a 	adc.w	r4, sl, sl
 800286c:	4699      	mov	r9, r3
 800286e:	46a2      	mov	sl, r4
 8002870:	eb19 0905 	adds.w	r9, r9, r5
 8002874:	eb4a 0a06 	adc.w	sl, sl, r6
 8002878:	f04f 0100 	mov.w	r1, #0
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002884:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002888:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800288c:	4689      	mov	r9, r1
 800288e:	4692      	mov	sl, r2
 8002890:	eb19 0005 	adds.w	r0, r9, r5
 8002894:	eb4a 0106 	adc.w	r1, sl, r6
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	461d      	mov	r5, r3
 800289e:	f04f 0600 	mov.w	r6, #0
 80028a2:	196b      	adds	r3, r5, r5
 80028a4:	eb46 0406 	adc.w	r4, r6, r6
 80028a8:	461a      	mov	r2, r3
 80028aa:	4623      	mov	r3, r4
 80028ac:	f7fd fc96 	bl	80001dc <__aeabi_uldivmod>
 80028b0:	4603      	mov	r3, r0
 80028b2:	460c      	mov	r4, r1
 80028b4:	461a      	mov	r2, r3
 80028b6:	4b8b      	ldr	r3, [pc, #556]	; (8002ae4 <UART_SetConfig+0x384>)
 80028b8:	fba3 1302 	umull	r1, r3, r3, r2
 80028bc:	095b      	lsrs	r3, r3, #5
 80028be:	2164      	movs	r1, #100	; 0x64
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	3332      	adds	r3, #50	; 0x32
 80028ca:	4a86      	ldr	r2, [pc, #536]	; (8002ae4 <UART_SetConfig+0x384>)
 80028cc:	fba2 2303 	umull	r2, r3, r2, r3
 80028d0:	095b      	lsrs	r3, r3, #5
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028d8:	4498      	add	r8, r3
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	461d      	mov	r5, r3
 80028de:	f04f 0600 	mov.w	r6, #0
 80028e2:	46a9      	mov	r9, r5
 80028e4:	46b2      	mov	sl, r6
 80028e6:	eb19 0309 	adds.w	r3, r9, r9
 80028ea:	eb4a 040a 	adc.w	r4, sl, sl
 80028ee:	4699      	mov	r9, r3
 80028f0:	46a2      	mov	sl, r4
 80028f2:	eb19 0905 	adds.w	r9, r9, r5
 80028f6:	eb4a 0a06 	adc.w	sl, sl, r6
 80028fa:	f04f 0100 	mov.w	r1, #0
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002906:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800290a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800290e:	4689      	mov	r9, r1
 8002910:	4692      	mov	sl, r2
 8002912:	eb19 0005 	adds.w	r0, r9, r5
 8002916:	eb4a 0106 	adc.w	r1, sl, r6
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	461d      	mov	r5, r3
 8002920:	f04f 0600 	mov.w	r6, #0
 8002924:	196b      	adds	r3, r5, r5
 8002926:	eb46 0406 	adc.w	r4, r6, r6
 800292a:	461a      	mov	r2, r3
 800292c:	4623      	mov	r3, r4
 800292e:	f7fd fc55 	bl	80001dc <__aeabi_uldivmod>
 8002932:	4603      	mov	r3, r0
 8002934:	460c      	mov	r4, r1
 8002936:	461a      	mov	r2, r3
 8002938:	4b6a      	ldr	r3, [pc, #424]	; (8002ae4 <UART_SetConfig+0x384>)
 800293a:	fba3 1302 	umull	r1, r3, r3, r2
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	2164      	movs	r1, #100	; 0x64
 8002942:	fb01 f303 	mul.w	r3, r1, r3
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	3332      	adds	r3, #50	; 0x32
 800294c:	4a65      	ldr	r2, [pc, #404]	; (8002ae4 <UART_SetConfig+0x384>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	f003 0207 	and.w	r2, r3, #7
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4442      	add	r2, r8
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	e26f      	b.n	8002e42 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002962:	f7ff f945 	bl	8001bf0 <HAL_RCC_GetPCLK1Freq>
 8002966:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	461d      	mov	r5, r3
 800296c:	f04f 0600 	mov.w	r6, #0
 8002970:	46a8      	mov	r8, r5
 8002972:	46b1      	mov	r9, r6
 8002974:	eb18 0308 	adds.w	r3, r8, r8
 8002978:	eb49 0409 	adc.w	r4, r9, r9
 800297c:	4698      	mov	r8, r3
 800297e:	46a1      	mov	r9, r4
 8002980:	eb18 0805 	adds.w	r8, r8, r5
 8002984:	eb49 0906 	adc.w	r9, r9, r6
 8002988:	f04f 0100 	mov.w	r1, #0
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002994:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002998:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800299c:	4688      	mov	r8, r1
 800299e:	4691      	mov	r9, r2
 80029a0:	eb18 0005 	adds.w	r0, r8, r5
 80029a4:	eb49 0106 	adc.w	r1, r9, r6
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	461d      	mov	r5, r3
 80029ae:	f04f 0600 	mov.w	r6, #0
 80029b2:	196b      	adds	r3, r5, r5
 80029b4:	eb46 0406 	adc.w	r4, r6, r6
 80029b8:	461a      	mov	r2, r3
 80029ba:	4623      	mov	r3, r4
 80029bc:	f7fd fc0e 	bl	80001dc <__aeabi_uldivmod>
 80029c0:	4603      	mov	r3, r0
 80029c2:	460c      	mov	r4, r1
 80029c4:	461a      	mov	r2, r3
 80029c6:	4b47      	ldr	r3, [pc, #284]	; (8002ae4 <UART_SetConfig+0x384>)
 80029c8:	fba3 2302 	umull	r2, r3, r3, r2
 80029cc:	095b      	lsrs	r3, r3, #5
 80029ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	461d      	mov	r5, r3
 80029d6:	f04f 0600 	mov.w	r6, #0
 80029da:	46a9      	mov	r9, r5
 80029dc:	46b2      	mov	sl, r6
 80029de:	eb19 0309 	adds.w	r3, r9, r9
 80029e2:	eb4a 040a 	adc.w	r4, sl, sl
 80029e6:	4699      	mov	r9, r3
 80029e8:	46a2      	mov	sl, r4
 80029ea:	eb19 0905 	adds.w	r9, r9, r5
 80029ee:	eb4a 0a06 	adc.w	sl, sl, r6
 80029f2:	f04f 0100 	mov.w	r1, #0
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a06:	4689      	mov	r9, r1
 8002a08:	4692      	mov	sl, r2
 8002a0a:	eb19 0005 	adds.w	r0, r9, r5
 8002a0e:	eb4a 0106 	adc.w	r1, sl, r6
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	461d      	mov	r5, r3
 8002a18:	f04f 0600 	mov.w	r6, #0
 8002a1c:	196b      	adds	r3, r5, r5
 8002a1e:	eb46 0406 	adc.w	r4, r6, r6
 8002a22:	461a      	mov	r2, r3
 8002a24:	4623      	mov	r3, r4
 8002a26:	f7fd fbd9 	bl	80001dc <__aeabi_uldivmod>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	460c      	mov	r4, r1
 8002a2e:	461a      	mov	r2, r3
 8002a30:	4b2c      	ldr	r3, [pc, #176]	; (8002ae4 <UART_SetConfig+0x384>)
 8002a32:	fba3 1302 	umull	r1, r3, r3, r2
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	2164      	movs	r1, #100	; 0x64
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	3332      	adds	r3, #50	; 0x32
 8002a44:	4a27      	ldr	r2, [pc, #156]	; (8002ae4 <UART_SetConfig+0x384>)
 8002a46:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a52:	4498      	add	r8, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	461d      	mov	r5, r3
 8002a58:	f04f 0600 	mov.w	r6, #0
 8002a5c:	46a9      	mov	r9, r5
 8002a5e:	46b2      	mov	sl, r6
 8002a60:	eb19 0309 	adds.w	r3, r9, r9
 8002a64:	eb4a 040a 	adc.w	r4, sl, sl
 8002a68:	4699      	mov	r9, r3
 8002a6a:	46a2      	mov	sl, r4
 8002a6c:	eb19 0905 	adds.w	r9, r9, r5
 8002a70:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a74:	f04f 0100 	mov.w	r1, #0
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a88:	4689      	mov	r9, r1
 8002a8a:	4692      	mov	sl, r2
 8002a8c:	eb19 0005 	adds.w	r0, r9, r5
 8002a90:	eb4a 0106 	adc.w	r1, sl, r6
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	461d      	mov	r5, r3
 8002a9a:	f04f 0600 	mov.w	r6, #0
 8002a9e:	196b      	adds	r3, r5, r5
 8002aa0:	eb46 0406 	adc.w	r4, r6, r6
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4623      	mov	r3, r4
 8002aa8:	f7fd fb98 	bl	80001dc <__aeabi_uldivmod>
 8002aac:	4603      	mov	r3, r0
 8002aae:	460c      	mov	r4, r1
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <UART_SetConfig+0x384>)
 8002ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ab8:	095b      	lsrs	r3, r3, #5
 8002aba:	2164      	movs	r1, #100	; 0x64
 8002abc:	fb01 f303 	mul.w	r3, r1, r3
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	3332      	adds	r3, #50	; 0x32
 8002ac6:	4a07      	ldr	r2, [pc, #28]	; (8002ae4 <UART_SetConfig+0x384>)
 8002ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8002acc:	095b      	lsrs	r3, r3, #5
 8002ace:	f003 0207 	and.w	r2, r3, #7
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4442      	add	r2, r8
 8002ad8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002ada:	e1b2      	b.n	8002e42 <UART_SetConfig+0x6e2>
 8002adc:	40011000 	.word	0x40011000
 8002ae0:	40011400 	.word	0x40011400
 8002ae4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4ad7      	ldr	r2, [pc, #860]	; (8002e4c <UART_SetConfig+0x6ec>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d005      	beq.n	8002afe <UART_SetConfig+0x39e>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4ad6      	ldr	r2, [pc, #856]	; (8002e50 <UART_SetConfig+0x6f0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	f040 80d1 	bne.w	8002ca0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002afe:	f7ff f88b 	bl	8001c18 <HAL_RCC_GetPCLK2Freq>
 8002b02:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	469a      	mov	sl, r3
 8002b08:	f04f 0b00 	mov.w	fp, #0
 8002b0c:	46d0      	mov	r8, sl
 8002b0e:	46d9      	mov	r9, fp
 8002b10:	eb18 0308 	adds.w	r3, r8, r8
 8002b14:	eb49 0409 	adc.w	r4, r9, r9
 8002b18:	4698      	mov	r8, r3
 8002b1a:	46a1      	mov	r9, r4
 8002b1c:	eb18 080a 	adds.w	r8, r8, sl
 8002b20:	eb49 090b 	adc.w	r9, r9, fp
 8002b24:	f04f 0100 	mov.w	r1, #0
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b30:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b34:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b38:	4688      	mov	r8, r1
 8002b3a:	4691      	mov	r9, r2
 8002b3c:	eb1a 0508 	adds.w	r5, sl, r8
 8002b40:	eb4b 0609 	adc.w	r6, fp, r9
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	f04f 0300 	mov.w	r3, #0
 8002b52:	f04f 0400 	mov.w	r4, #0
 8002b56:	0094      	lsls	r4, r2, #2
 8002b58:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b5c:	008b      	lsls	r3, r1, #2
 8002b5e:	461a      	mov	r2, r3
 8002b60:	4623      	mov	r3, r4
 8002b62:	4628      	mov	r0, r5
 8002b64:	4631      	mov	r1, r6
 8002b66:	f7fd fb39 	bl	80001dc <__aeabi_uldivmod>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	460c      	mov	r4, r1
 8002b6e:	461a      	mov	r2, r3
 8002b70:	4bb8      	ldr	r3, [pc, #736]	; (8002e54 <UART_SetConfig+0x6f4>)
 8002b72:	fba3 2302 	umull	r2, r3, r3, r2
 8002b76:	095b      	lsrs	r3, r3, #5
 8002b78:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	469b      	mov	fp, r3
 8002b80:	f04f 0c00 	mov.w	ip, #0
 8002b84:	46d9      	mov	r9, fp
 8002b86:	46e2      	mov	sl, ip
 8002b88:	eb19 0309 	adds.w	r3, r9, r9
 8002b8c:	eb4a 040a 	adc.w	r4, sl, sl
 8002b90:	4699      	mov	r9, r3
 8002b92:	46a2      	mov	sl, r4
 8002b94:	eb19 090b 	adds.w	r9, r9, fp
 8002b98:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b9c:	f04f 0100 	mov.w	r1, #0
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ba8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002bac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002bb0:	4689      	mov	r9, r1
 8002bb2:	4692      	mov	sl, r2
 8002bb4:	eb1b 0509 	adds.w	r5, fp, r9
 8002bb8:	eb4c 060a 	adc.w	r6, ip, sl
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	f04f 0300 	mov.w	r3, #0
 8002bca:	f04f 0400 	mov.w	r4, #0
 8002bce:	0094      	lsls	r4, r2, #2
 8002bd0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bd4:	008b      	lsls	r3, r1, #2
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	4623      	mov	r3, r4
 8002bda:	4628      	mov	r0, r5
 8002bdc:	4631      	mov	r1, r6
 8002bde:	f7fd fafd 	bl	80001dc <__aeabi_uldivmod>
 8002be2:	4603      	mov	r3, r0
 8002be4:	460c      	mov	r4, r1
 8002be6:	461a      	mov	r2, r3
 8002be8:	4b9a      	ldr	r3, [pc, #616]	; (8002e54 <UART_SetConfig+0x6f4>)
 8002bea:	fba3 1302 	umull	r1, r3, r3, r2
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	2164      	movs	r1, #100	; 0x64
 8002bf2:	fb01 f303 	mul.w	r3, r1, r3
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	3332      	adds	r3, #50	; 0x32
 8002bfc:	4a95      	ldr	r2, [pc, #596]	; (8002e54 <UART_SetConfig+0x6f4>)
 8002bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c08:	4498      	add	r8, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	469b      	mov	fp, r3
 8002c0e:	f04f 0c00 	mov.w	ip, #0
 8002c12:	46d9      	mov	r9, fp
 8002c14:	46e2      	mov	sl, ip
 8002c16:	eb19 0309 	adds.w	r3, r9, r9
 8002c1a:	eb4a 040a 	adc.w	r4, sl, sl
 8002c1e:	4699      	mov	r9, r3
 8002c20:	46a2      	mov	sl, r4
 8002c22:	eb19 090b 	adds.w	r9, r9, fp
 8002c26:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c2a:	f04f 0100 	mov.w	r1, #0
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c3e:	4689      	mov	r9, r1
 8002c40:	4692      	mov	sl, r2
 8002c42:	eb1b 0509 	adds.w	r5, fp, r9
 8002c46:	eb4c 060a 	adc.w	r6, ip, sl
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4619      	mov	r1, r3
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	f04f 0400 	mov.w	r4, #0
 8002c5c:	0094      	lsls	r4, r2, #2
 8002c5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c62:	008b      	lsls	r3, r1, #2
 8002c64:	461a      	mov	r2, r3
 8002c66:	4623      	mov	r3, r4
 8002c68:	4628      	mov	r0, r5
 8002c6a:	4631      	mov	r1, r6
 8002c6c:	f7fd fab6 	bl	80001dc <__aeabi_uldivmod>
 8002c70:	4603      	mov	r3, r0
 8002c72:	460c      	mov	r4, r1
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b77      	ldr	r3, [pc, #476]	; (8002e54 <UART_SetConfig+0x6f4>)
 8002c78:	fba3 1302 	umull	r1, r3, r3, r2
 8002c7c:	095b      	lsrs	r3, r3, #5
 8002c7e:	2164      	movs	r1, #100	; 0x64
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	3332      	adds	r3, #50	; 0x32
 8002c8a:	4a72      	ldr	r2, [pc, #456]	; (8002e54 <UART_SetConfig+0x6f4>)
 8002c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c90:	095b      	lsrs	r3, r3, #5
 8002c92:	f003 020f 	and.w	r2, r3, #15
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4442      	add	r2, r8
 8002c9c:	609a      	str	r2, [r3, #8]
 8002c9e:	e0d0      	b.n	8002e42 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ca0:	f7fe ffa6 	bl	8001bf0 <HAL_RCC_GetPCLK1Freq>
 8002ca4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	469a      	mov	sl, r3
 8002caa:	f04f 0b00 	mov.w	fp, #0
 8002cae:	46d0      	mov	r8, sl
 8002cb0:	46d9      	mov	r9, fp
 8002cb2:	eb18 0308 	adds.w	r3, r8, r8
 8002cb6:	eb49 0409 	adc.w	r4, r9, r9
 8002cba:	4698      	mov	r8, r3
 8002cbc:	46a1      	mov	r9, r4
 8002cbe:	eb18 080a 	adds.w	r8, r8, sl
 8002cc2:	eb49 090b 	adc.w	r9, r9, fp
 8002cc6:	f04f 0100 	mov.w	r1, #0
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002cd2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002cd6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002cda:	4688      	mov	r8, r1
 8002cdc:	4691      	mov	r9, r2
 8002cde:	eb1a 0508 	adds.w	r5, sl, r8
 8002ce2:	eb4b 0609 	adc.w	r6, fp, r9
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	4619      	mov	r1, r3
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	f04f 0400 	mov.w	r4, #0
 8002cf8:	0094      	lsls	r4, r2, #2
 8002cfa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002cfe:	008b      	lsls	r3, r1, #2
 8002d00:	461a      	mov	r2, r3
 8002d02:	4623      	mov	r3, r4
 8002d04:	4628      	mov	r0, r5
 8002d06:	4631      	mov	r1, r6
 8002d08:	f7fd fa68 	bl	80001dc <__aeabi_uldivmod>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	460c      	mov	r4, r1
 8002d10:	461a      	mov	r2, r3
 8002d12:	4b50      	ldr	r3, [pc, #320]	; (8002e54 <UART_SetConfig+0x6f4>)
 8002d14:	fba3 2302 	umull	r2, r3, r3, r2
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	469b      	mov	fp, r3
 8002d22:	f04f 0c00 	mov.w	ip, #0
 8002d26:	46d9      	mov	r9, fp
 8002d28:	46e2      	mov	sl, ip
 8002d2a:	eb19 0309 	adds.w	r3, r9, r9
 8002d2e:	eb4a 040a 	adc.w	r4, sl, sl
 8002d32:	4699      	mov	r9, r3
 8002d34:	46a2      	mov	sl, r4
 8002d36:	eb19 090b 	adds.w	r9, r9, fp
 8002d3a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d3e:	f04f 0100 	mov.w	r1, #0
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d52:	4689      	mov	r9, r1
 8002d54:	4692      	mov	sl, r2
 8002d56:	eb1b 0509 	adds.w	r5, fp, r9
 8002d5a:	eb4c 060a 	adc.w	r6, ip, sl
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	4619      	mov	r1, r3
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	f04f 0400 	mov.w	r4, #0
 8002d70:	0094      	lsls	r4, r2, #2
 8002d72:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d76:	008b      	lsls	r3, r1, #2
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4623      	mov	r3, r4
 8002d7c:	4628      	mov	r0, r5
 8002d7e:	4631      	mov	r1, r6
 8002d80:	f7fd fa2c 	bl	80001dc <__aeabi_uldivmod>
 8002d84:	4603      	mov	r3, r0
 8002d86:	460c      	mov	r4, r1
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4b32      	ldr	r3, [pc, #200]	; (8002e54 <UART_SetConfig+0x6f4>)
 8002d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	2164      	movs	r1, #100	; 0x64
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	3332      	adds	r3, #50	; 0x32
 8002d9e:	4a2d      	ldr	r2, [pc, #180]	; (8002e54 <UART_SetConfig+0x6f4>)
 8002da0:	fba2 2303 	umull	r2, r3, r2, r3
 8002da4:	095b      	lsrs	r3, r3, #5
 8002da6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002daa:	4498      	add	r8, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	469b      	mov	fp, r3
 8002db0:	f04f 0c00 	mov.w	ip, #0
 8002db4:	46d9      	mov	r9, fp
 8002db6:	46e2      	mov	sl, ip
 8002db8:	eb19 0309 	adds.w	r3, r9, r9
 8002dbc:	eb4a 040a 	adc.w	r4, sl, sl
 8002dc0:	4699      	mov	r9, r3
 8002dc2:	46a2      	mov	sl, r4
 8002dc4:	eb19 090b 	adds.w	r9, r9, fp
 8002dc8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002dcc:	f04f 0100 	mov.w	r1, #0
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ddc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002de0:	4689      	mov	r9, r1
 8002de2:	4692      	mov	sl, r2
 8002de4:	eb1b 0509 	adds.w	r5, fp, r9
 8002de8:	eb4c 060a 	adc.w	r6, ip, sl
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	4619      	mov	r1, r3
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	f04f 0300 	mov.w	r3, #0
 8002dfa:	f04f 0400 	mov.w	r4, #0
 8002dfe:	0094      	lsls	r4, r2, #2
 8002e00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e04:	008b      	lsls	r3, r1, #2
 8002e06:	461a      	mov	r2, r3
 8002e08:	4623      	mov	r3, r4
 8002e0a:	4628      	mov	r0, r5
 8002e0c:	4631      	mov	r1, r6
 8002e0e:	f7fd f9e5 	bl	80001dc <__aeabi_uldivmod>
 8002e12:	4603      	mov	r3, r0
 8002e14:	460c      	mov	r4, r1
 8002e16:	461a      	mov	r2, r3
 8002e18:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <UART_SetConfig+0x6f4>)
 8002e1a:	fba3 1302 	umull	r1, r3, r3, r2
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	2164      	movs	r1, #100	; 0x64
 8002e22:	fb01 f303 	mul.w	r3, r1, r3
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	3332      	adds	r3, #50	; 0x32
 8002e2c:	4a09      	ldr	r2, [pc, #36]	; (8002e54 <UART_SetConfig+0x6f4>)
 8002e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	f003 020f 	and.w	r2, r3, #15
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4442      	add	r2, r8
 8002e3e:	609a      	str	r2, [r3, #8]
}
 8002e40:	e7ff      	b.n	8002e42 <UART_SetConfig+0x6e2>
 8002e42:	bf00      	nop
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e4c:	40011000 	.word	0x40011000
 8002e50:	40011400 	.word	0x40011400
 8002e54:	51eb851f 	.word	0x51eb851f

08002e58 <__libc_init_array>:
 8002e58:	b570      	push	{r4, r5, r6, lr}
 8002e5a:	4e0d      	ldr	r6, [pc, #52]	; (8002e90 <__libc_init_array+0x38>)
 8002e5c:	4c0d      	ldr	r4, [pc, #52]	; (8002e94 <__libc_init_array+0x3c>)
 8002e5e:	1ba4      	subs	r4, r4, r6
 8002e60:	10a4      	asrs	r4, r4, #2
 8002e62:	2500      	movs	r5, #0
 8002e64:	42a5      	cmp	r5, r4
 8002e66:	d109      	bne.n	8002e7c <__libc_init_array+0x24>
 8002e68:	4e0b      	ldr	r6, [pc, #44]	; (8002e98 <__libc_init_array+0x40>)
 8002e6a:	4c0c      	ldr	r4, [pc, #48]	; (8002e9c <__libc_init_array+0x44>)
 8002e6c:	f000 f820 	bl	8002eb0 <_init>
 8002e70:	1ba4      	subs	r4, r4, r6
 8002e72:	10a4      	asrs	r4, r4, #2
 8002e74:	2500      	movs	r5, #0
 8002e76:	42a5      	cmp	r5, r4
 8002e78:	d105      	bne.n	8002e86 <__libc_init_array+0x2e>
 8002e7a:	bd70      	pop	{r4, r5, r6, pc}
 8002e7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e80:	4798      	blx	r3
 8002e82:	3501      	adds	r5, #1
 8002e84:	e7ee      	b.n	8002e64 <__libc_init_array+0xc>
 8002e86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e8a:	4798      	blx	r3
 8002e8c:	3501      	adds	r5, #1
 8002e8e:	e7f2      	b.n	8002e76 <__libc_init_array+0x1e>
 8002e90:	08002f54 	.word	0x08002f54
 8002e94:	08002f54 	.word	0x08002f54
 8002e98:	08002f54 	.word	0x08002f54
 8002e9c:	08002f58 	.word	0x08002f58

08002ea0 <memset>:
 8002ea0:	4402      	add	r2, r0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d100      	bne.n	8002eaa <memset+0xa>
 8002ea8:	4770      	bx	lr
 8002eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8002eae:	e7f9      	b.n	8002ea4 <memset+0x4>

08002eb0 <_init>:
 8002eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb2:	bf00      	nop
 8002eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb6:	bc08      	pop	{r3}
 8002eb8:	469e      	mov	lr, r3
 8002eba:	4770      	bx	lr

08002ebc <_fini>:
 8002ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ebe:	bf00      	nop
 8002ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ec2:	bc08      	pop	{r3}
 8002ec4:	469e      	mov	lr, r3
 8002ec6:	4770      	bx	lr
