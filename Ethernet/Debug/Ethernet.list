
Ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000167bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011988  0801694c  0801694c  0002694c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080282d4  080282d4  00040084  2**0
                  CONTENTS
  4 .ARM          00000008  080282d4  080282d4  000382d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080282dc  080282dc  00040084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080282dc  080282dc  000382dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080282e0  080282e0  000382e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080282e4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000076b4  20000088  08028368  00040088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000773c  08028368  0004773c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f353  00000000  00000000  000400b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000590a  00000000  00000000  0006f407  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016f0  00000000  00000000  00074d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001618  00000000  00000000  00076408  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d82d  00000000  00000000  00077a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001fe28  00000000  00000000  000a524d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000df76d  00000000  00000000  000c5075  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a47e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006320  00000000  00000000  001a4860  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016934 	.word	0x08016934

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08016934 	.word	0x08016934

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <DESELECT>:

static
inline void DESELECT(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0

}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <xmit_spi>:

extern SPI_HandleTypeDef hspi1;

static
void xmit_spi(BYTE Data)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000596:	bf00      	nop
 8000598:	4808      	ldr	r0, [pc, #32]	; (80005bc <xmit_spi+0x30>)
 800059a:	f009 f83d 	bl	8009618 <HAL_SPI_GetState>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d1f9      	bne.n	8000598 <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 5000);
 80005a4:	1df9      	adds	r1, r7, #7
 80005a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80005aa:	2201      	movs	r2, #1
 80005ac:	4803      	ldr	r0, [pc, #12]	; (80005bc <xmit_spi+0x30>)
 80005ae:	f008 fd5d 	bl	800906c <HAL_SPI_Transmit>
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200005dc 	.word	0x200005dc

080005c0 <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 80005c6:	23ff      	movs	r3, #255	; 0xff
 80005c8:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80005ce:	bf00      	nop
 80005d0:	4809      	ldr	r0, [pc, #36]	; (80005f8 <rcvr_spi+0x38>)
 80005d2:	f009 f821 	bl	8009618 <HAL_SPI_GetState>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d1f9      	bne.n	80005d0 <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &Dummy, &Data, 1, 5000);
 80005dc:	1dba      	adds	r2, r7, #6
 80005de:	1df9      	adds	r1, r7, #7
 80005e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2301      	movs	r3, #1
 80005e8:	4803      	ldr	r0, [pc, #12]	; (80005f8 <rcvr_spi+0x38>)
 80005ea:	f008 fe73 	bl	80092d4 <HAL_SPI_TransmitReceive>

	return Data;
 80005ee:	79bb      	ldrb	r3, [r7, #6]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	200005dc 	.word	0x200005dc

080005fc <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 8000604:	f7ff ffdc 	bl	80005c0 <rcvr_spi>
 8000608:	4603      	mov	r3, r0
 800060a:	461a      	mov	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	701a      	strb	r2, [r3, #0]
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <wait_ready+0x34>)
 8000620:	2232      	movs	r2, #50	; 0x32
 8000622:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 8000624:	f7ff ffcc 	bl	80005c0 <rcvr_spi>
	do
		res = rcvr_spi();
 8000628:	f7ff ffca 	bl	80005c0 <rcvr_spi>
 800062c:	4603      	mov	r3, r0
 800062e:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	2bff      	cmp	r3, #255	; 0xff
 8000634:	d004      	beq.n	8000640 <wait_ready+0x28>
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <wait_ready+0x34>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1f3      	bne.n	8000628 <wait_ready+0x10>

	return res;
 8000640:	79fb      	ldrb	r3, [r7, #7]
}
 8000642:	4618      	mov	r0, r3
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200000a5 	.word	0x200000a5

08000650 <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 8000656:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800065a:	60bb      	str	r3, [r7, #8]

	DESELECT();
 800065c:	f7ff ff8f 	bl	800057e <DESELECT>

	for (i = 0; i < 10; i++)
 8000660:	2300      	movs	r3, #0
 8000662:	73fb      	strb	r3, [r7, #15]
 8000664:	e005      	b.n	8000672 <power_on+0x22>
		xmit_spi(0xFF);
 8000666:	20ff      	movs	r0, #255	; 0xff
 8000668:	f7ff ff90 	bl	800058c <xmit_spi>
	for (i = 0; i < 10; i++)
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	3301      	adds	r3, #1
 8000670:	73fb      	strb	r3, [r7, #15]
 8000672:	7bfb      	ldrb	r3, [r7, #15]
 8000674:	2b09      	cmp	r3, #9
 8000676:	d9f6      	bls.n	8000666 <power_on+0x16>

	SELECT();
 8000678:	f7ff ff7a 	bl	8000570 <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 800067c:	2340      	movs	r3, #64	; 0x40
 800067e:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 8000690:	2395      	movs	r3, #149	; 0x95
 8000692:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 8000694:	2300      	movs	r3, #0
 8000696:	73fb      	strb	r3, [r7, #15]
 8000698:	e00b      	b.n	80006b2 <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	f107 0210 	add.w	r2, r7, #16
 80006a0:	4413      	add	r3, r2
 80006a2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ff70 	bl	800058c <xmit_spi>
	for (i = 0; i < 6; i++)
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	3301      	adds	r3, #1
 80006b0:	73fb      	strb	r3, [r7, #15]
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	2b05      	cmp	r3, #5
 80006b6:	d9f0      	bls.n	800069a <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 80006b8:	e002      	b.n	80006c0 <power_on+0x70>
		Count--;
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	3b01      	subs	r3, #1
 80006be:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 80006c0:	f7ff ff7e 	bl	80005c0 <rcvr_spi>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d002      	beq.n	80006d0 <power_on+0x80>
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d1f4      	bne.n	80006ba <power_on+0x6a>

	DESELECT();
 80006d0:	f7ff ff55 	bl	800057e <DESELECT>
	xmit_spi(0XFF);
 80006d4:	20ff      	movs	r0, #255	; 0xff
 80006d6:	f7ff ff59 	bl	800058c <xmit_spi>

	PowerFlag = 1;
 80006da:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <power_on+0x98>)
 80006dc:	2201      	movs	r2, #1
 80006de:	701a      	strb	r2, [r3, #0]
}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200000a7 	.word	0x200000a7

080006ec <power_off>:

static
void power_off(void) {
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80006f0:	4b03      	ldr	r3, [pc, #12]	; (8000700 <power_off+0x14>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	200000a7 	.word	0x200000a7

08000704 <chk_power>:

static
int chk_power(void) /* Socket power state: 0=off, 1=on */
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000708:	4b03      	ldr	r3, [pc, #12]	; (8000718 <chk_power+0x14>)
 800070a:	781b      	ldrb	r3, [r3, #0]
}
 800070c:	4618      	mov	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	200000a7 	.word	0x200000a7

0800071c <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <rcvr_datablock+0x68>)
 8000728:	220a      	movs	r2, #10
 800072a:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 800072c:	f7ff ff48 	bl	80005c0 <rcvr_spi>
 8000730:	4603      	mov	r3, r0
 8000732:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	2bff      	cmp	r3, #255	; 0xff
 8000738:	d104      	bne.n	8000744 <rcvr_datablock+0x28>
 800073a:	4b12      	ldr	r3, [pc, #72]	; (8000784 <rcvr_datablock+0x68>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	2b00      	cmp	r3, #0
 8000742:	d1f3      	bne.n	800072c <rcvr_datablock+0x10>
	if (token != 0xFE)
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	2bfe      	cmp	r3, #254	; 0xfe
 8000748:	d001      	beq.n	800074e <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 800074a:	2300      	movs	r3, #0
 800074c:	e016      	b.n	800077c <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	1c5a      	adds	r2, r3, #1
 8000752:	607a      	str	r2, [r7, #4]
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff51 	bl	80005fc <rcvr_spi_m>
		rcvr_spi_m(buff++);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	1c5a      	adds	r2, r3, #1
 800075e:	607a      	str	r2, [r7, #4]
 8000760:	4618      	mov	r0, r3
 8000762:	f7ff ff4b 	bl	80005fc <rcvr_spi_m>
	} while (btr -= 2);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	3b02      	subs	r3, #2
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d1ed      	bne.n	800074e <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 8000772:	f7ff ff25 	bl	80005c0 <rcvr_spi>
	rcvr_spi();
 8000776:	f7ff ff23 	bl	80005c0 <rcvr_spi>

	return TRUE; /* Return with success */
 800077a:	2301      	movs	r3, #1
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200000a4 	.word	0x200000a4

08000788 <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	460b      	mov	r3, r1
 8000792:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 8000798:	f7ff ff3e 	bl	8000618 <wait_ready>
 800079c:	4603      	mov	r3, r0
 800079e:	2bff      	cmp	r3, #255	; 0xff
 80007a0:	d001      	beq.n	80007a6 <xmit_datablock+0x1e>
		return FALSE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	e040      	b.n	8000828 <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 80007a6:	78fb      	ldrb	r3, [r7, #3]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff feef 	bl	800058c <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 80007ae:	78fb      	ldrb	r3, [r7, #3]
 80007b0:	2bfd      	cmp	r3, #253	; 0xfd
 80007b2:	d031      	beq.n	8000818 <xmit_datablock+0x90>
		wc = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	1c5a      	adds	r2, r3, #1
 80007bc:	607a      	str	r2, [r7, #4]
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fee3 	bl	800058c <xmit_spi>
			xmit_spi(*buff++);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	1c5a      	adds	r2, r3, #1
 80007ca:	607a      	str	r2, [r7, #4]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fedc 	bl	800058c <xmit_spi>
		} while (--wc);
 80007d4:	7bbb      	ldrb	r3, [r7, #14]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	73bb      	strb	r3, [r7, #14]
 80007da:	7bbb      	ldrb	r3, [r7, #14]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1eb      	bne.n	80007b8 <xmit_datablock+0x30>

		rcvr_spi();
 80007e0:	f7ff feee 	bl	80005c0 <rcvr_spi>
		rcvr_spi();
 80007e4:	f7ff feec 	bl	80005c0 <rcvr_spi>

		while (i <= 64) {
 80007e8:	e00b      	b.n	8000802 <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 80007ea:	f7ff fee9 	bl	80005c0 <rcvr_spi>
 80007ee:	4603      	mov	r3, r0
 80007f0:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	f003 031f 	and.w	r3, r3, #31
 80007f8:	2b05      	cmp	r3, #5
 80007fa:	d006      	beq.n	800080a <xmit_datablock+0x82>
				break;
			i++;
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	3301      	adds	r3, #1
 8000800:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 8000802:	68bb      	ldr	r3, [r7, #8]
 8000804:	2b40      	cmp	r3, #64	; 0x40
 8000806:	d9f0      	bls.n	80007ea <xmit_datablock+0x62>
 8000808:	e000      	b.n	800080c <xmit_datablock+0x84>
				break;
 800080a:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 800080c:	bf00      	nop
 800080e:	f7ff fed7 	bl	80005c0 <rcvr_spi>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d0fa      	beq.n	800080e <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	f003 031f 	and.w	r3, r3, #31
 800081e:	2b05      	cmp	r3, #5
 8000820:	d101      	bne.n	8000826 <xmit_datablock+0x9e>
		return TRUE;
 8000822:	2301      	movs	r3, #1
 8000824:	e000      	b.n	8000828 <xmit_datablock+0xa0>
	else
		return FALSE;
 8000826:	2300      	movs	r3, #0
}
 8000828:	4618      	mov	r0, r3
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	6039      	str	r1, [r7, #0]
 800083a:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 800083c:	f7ff feec 	bl	8000618 <wait_ready>
 8000840:	4603      	mov	r3, r0
 8000842:	2bff      	cmp	r3, #255	; 0xff
 8000844:	d001      	beq.n	800084a <send_cmd+0x1a>
		return 0xFF;
 8000846:	23ff      	movs	r3, #255	; 0xff
 8000848:	e040      	b.n	80008cc <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff fe9d 	bl	800058c <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	0e1b      	lsrs	r3, r3, #24
 8000856:	b2db      	uxtb	r3, r3
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fe97 	bl	800058c <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	0c1b      	lsrs	r3, r3, #16
 8000862:	b2db      	uxtb	r3, r3
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff fe91 	bl	800058c <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	0a1b      	lsrs	r3, r3, #8
 800086e:	b2db      	uxtb	r3, r3
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fe8b 	bl	800058c <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff fe86 	bl	800058c <xmit_spi>
	n = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	2b40      	cmp	r3, #64	; 0x40
 8000888:	d101      	bne.n	800088e <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 800088a:	2395      	movs	r3, #149	; 0x95
 800088c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2b48      	cmp	r3, #72	; 0x48
 8000892:	d101      	bne.n	8000898 <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 8000894:	2387      	movs	r3, #135	; 0x87
 8000896:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fe76 	bl	800058c <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	2b4c      	cmp	r3, #76	; 0x4c
 80008a4:	d101      	bne.n	80008aa <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 80008a6:	f7ff fe8b 	bl	80005c0 <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 80008aa:	230a      	movs	r3, #10
 80008ac:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 80008ae:	f7ff fe87 	bl	80005c0 <rcvr_spi>
 80008b2:	4603      	mov	r3, r0
 80008b4:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 80008b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	da05      	bge.n	80008ca <send_cmd+0x9a>
 80008be:	7bfb      	ldrb	r3, [r7, #15]
 80008c0:	3b01      	subs	r3, #1
 80008c2:	73fb      	strb	r3, [r7, #15]
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d1f1      	bne.n	80008ae <send_cmd+0x7e>

	return res; /* Return with the response value */
 80008ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 80008e4:	2301      	movs	r3, #1
 80008e6:	e0d5      	b.n	8000a94 <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 80008e8:	4b6c      	ldr	r3, [pc, #432]	; (8000a9c <disk_initialize+0x1c8>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d003      	beq.n	80008fe <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 80008f6:	4b69      	ldr	r3, [pc, #420]	; (8000a9c <disk_initialize+0x1c8>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	e0ca      	b.n	8000a94 <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 80008fe:	f7ff fea7 	bl	8000650 <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 8000902:	f7ff fe35 	bl	8000570 <SELECT>
	ty = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 800090a:	2100      	movs	r1, #0
 800090c:	2040      	movs	r0, #64	; 0x40
 800090e:	f7ff ff8f 	bl	8000830 <send_cmd>
 8000912:	4603      	mov	r3, r0
 8000914:	2b01      	cmp	r3, #1
 8000916:	f040 80a5 	bne.w	8000a64 <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 800091a:	4b61      	ldr	r3, [pc, #388]	; (8000aa0 <disk_initialize+0x1cc>)
 800091c:	2264      	movs	r2, #100	; 0x64
 800091e:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 8000920:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000924:	2048      	movs	r0, #72	; 0x48
 8000926:	f7ff ff83 	bl	8000830 <send_cmd>
 800092a:	4603      	mov	r3, r0
 800092c:	2b01      	cmp	r3, #1
 800092e:	d158      	bne.n	80009e2 <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8000930:	2300      	movs	r3, #0
 8000932:	73fb      	strb	r3, [r7, #15]
 8000934:	e00c      	b.n	8000950 <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 8000936:	7bfc      	ldrb	r4, [r7, #15]
 8000938:	f7ff fe42 	bl	80005c0 <rcvr_spi>
 800093c:	4603      	mov	r3, r0
 800093e:	461a      	mov	r2, r3
 8000940:	f107 0310 	add.w	r3, r7, #16
 8000944:	4423      	add	r3, r4
 8000946:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	3301      	adds	r3, #1
 800094e:	73fb      	strb	r3, [r7, #15]
 8000950:	7bfb      	ldrb	r3, [r7, #15]
 8000952:	2b03      	cmp	r3, #3
 8000954:	d9ef      	bls.n	8000936 <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 8000956:	7abb      	ldrb	r3, [r7, #10]
 8000958:	2b01      	cmp	r3, #1
 800095a:	f040 8083 	bne.w	8000a64 <disk_initialize+0x190>
 800095e:	7afb      	ldrb	r3, [r7, #11]
 8000960:	2baa      	cmp	r3, #170	; 0xaa
 8000962:	d17f      	bne.n	8000a64 <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 8000964:	2100      	movs	r1, #0
 8000966:	2077      	movs	r0, #119	; 0x77
 8000968:	f7ff ff62 	bl	8000830 <send_cmd>
 800096c:	4603      	mov	r3, r0
 800096e:	2b01      	cmp	r3, #1
 8000970:	d807      	bhi.n	8000982 <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 8000972:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000976:	2069      	movs	r0, #105	; 0x69
 8000978:	f7ff ff5a 	bl	8000830 <send_cmd>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d005      	beq.n	800098e <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 8000982:	4b47      	ldr	r3, [pc, #284]	; (8000aa0 <disk_initialize+0x1cc>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	b2db      	uxtb	r3, r3
 8000988:	2b00      	cmp	r3, #0
 800098a:	d1eb      	bne.n	8000964 <disk_initialize+0x90>
 800098c:	e000      	b.n	8000990 <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 800098e:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 8000990:	4b43      	ldr	r3, [pc, #268]	; (8000aa0 <disk_initialize+0x1cc>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b00      	cmp	r3, #0
 8000998:	d064      	beq.n	8000a64 <disk_initialize+0x190>
 800099a:	2100      	movs	r1, #0
 800099c:	207a      	movs	r0, #122	; 0x7a
 800099e:	f7ff ff47 	bl	8000830 <send_cmd>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d15d      	bne.n	8000a64 <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 80009a8:	2300      	movs	r3, #0
 80009aa:	73fb      	strb	r3, [r7, #15]
 80009ac:	e00c      	b.n	80009c8 <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 80009ae:	7bfc      	ldrb	r4, [r7, #15]
 80009b0:	f7ff fe06 	bl	80005c0 <rcvr_spi>
 80009b4:	4603      	mov	r3, r0
 80009b6:	461a      	mov	r2, r3
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	4423      	add	r3, r4
 80009be:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80009c2:	7bfb      	ldrb	r3, [r7, #15]
 80009c4:	3301      	adds	r3, #1
 80009c6:	73fb      	strb	r3, [r7, #15]
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	d9ef      	bls.n	80009ae <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 80009ce:	7a3b      	ldrb	r3, [r7, #8]
 80009d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <disk_initialize+0x108>
 80009d8:	2306      	movs	r3, #6
 80009da:	e000      	b.n	80009de <disk_initialize+0x10a>
 80009dc:	2302      	movs	r3, #2
 80009de:	73bb      	strb	r3, [r7, #14]
 80009e0:	e040      	b.n	8000a64 <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80009e2:	2100      	movs	r1, #0
 80009e4:	2077      	movs	r0, #119	; 0x77
 80009e6:	f7ff ff23 	bl	8000830 <send_cmd>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d808      	bhi.n	8000a02 <disk_initialize+0x12e>
 80009f0:	2100      	movs	r1, #0
 80009f2:	2069      	movs	r0, #105	; 0x69
 80009f4:	f7ff ff1c 	bl	8000830 <send_cmd>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d801      	bhi.n	8000a02 <disk_initialize+0x12e>
 80009fe:	2302      	movs	r3, #2
 8000a00:	e000      	b.n	8000a04 <disk_initialize+0x130>
 8000a02:	2301      	movs	r3, #1
 8000a04:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 8000a06:	7bbb      	ldrb	r3, [r7, #14]
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d10e      	bne.n	8000a2a <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	2077      	movs	r0, #119	; 0x77
 8000a10:	f7ff ff0e 	bl	8000830 <send_cmd>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d80e      	bhi.n	8000a38 <disk_initialize+0x164>
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2069      	movs	r0, #105	; 0x69
 8000a1e:	f7ff ff07 	bl	8000830 <send_cmd>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d107      	bne.n	8000a38 <disk_initialize+0x164>
						break; /* ACMD41 */
 8000a28:	e00d      	b.n	8000a46 <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2041      	movs	r0, #65	; 0x41
 8000a2e:	f7ff feff 	bl	8000830 <send_cmd>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d005      	beq.n	8000a44 <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <disk_initialize+0x1cc>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d1e1      	bne.n	8000a06 <disk_initialize+0x132>
 8000a42:	e000      	b.n	8000a46 <disk_initialize+0x172>
						break; /* CMD1 */
 8000a44:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <disk_initialize+0x1cc>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d007      	beq.n	8000a60 <disk_initialize+0x18c>
 8000a50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a54:	2050      	movs	r0, #80	; 0x50
 8000a56:	f7ff feeb 	bl	8000830 <send_cmd>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <disk_initialize+0x190>
				ty = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 8000a64:	4a0f      	ldr	r2, [pc, #60]	; (8000aa4 <disk_initialize+0x1d0>)
 8000a66:	7bbb      	ldrb	r3, [r7, #14]
 8000a68:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 8000a6a:	f7ff fd88 	bl	800057e <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8000a6e:	f7ff fda7 	bl	80005c0 <rcvr_spi>

	if (ty) /* Initialization succeded */
 8000a72:	7bbb      	ldrb	r3, [r7, #14]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d008      	beq.n	8000a8a <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <disk_initialize+0x1c8>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	f023 0301 	bic.w	r3, r3, #1
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <disk_initialize+0x1c8>)
 8000a86:	701a      	strb	r2, [r3, #0]
 8000a88:	e001      	b.n	8000a8e <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 8000a8a:	f7ff fe2f 	bl	80006ec <power_off>

	return Stat;
 8000a8e:	4b03      	ldr	r3, [pc, #12]	; (8000a9c <disk_initialize+0x1c8>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	b2db      	uxtb	r3, r3
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd90      	pop	{r4, r7, pc}
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	200000a4 	.word	0x200000a4
 8000aa4:	200000a6 	.word	0x200000a6

08000aa8 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e002      	b.n	8000ac2 <disk_status+0x1a>
	return Stat;
 8000abc:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <disk_status+0x28>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	b2db      	uxtb	r3, r3
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000000 	.word	0x20000000

08000ad4 <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	607a      	str	r2, [r7, #4]
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8000ae4:	7bfb      	ldrb	r3, [r7, #15]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d102      	bne.n	8000af0 <disk_read+0x1c>
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d101      	bne.n	8000af4 <disk_read+0x20>
		return RES_PARERR;
 8000af0:	2304      	movs	r3, #4
 8000af2:	e051      	b.n	8000b98 <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 8000af4:	4b2a      	ldr	r3, [pc, #168]	; (8000ba0 <disk_read+0xcc>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <disk_read+0x32>
		return RES_NOTRDY;
 8000b02:	2303      	movs	r3, #3
 8000b04:	e048      	b.n	8000b98 <disk_read+0xc4>

	if (!(CardType & 4))
 8000b06:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <disk_read+0xd0>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	f003 0304 	and.w	r3, r3, #4
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d102      	bne.n	8000b18 <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	025b      	lsls	r3, r3, #9
 8000b16:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8000b18:	f7ff fd2a 	bl	8000570 <SELECT>

	if (count == 1) { /* Single block read */
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d111      	bne.n	8000b46 <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 8000b22:	6879      	ldr	r1, [r7, #4]
 8000b24:	2051      	movs	r0, #81	; 0x51
 8000b26:	f7ff fe83 	bl	8000830 <send_cmd>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d129      	bne.n	8000b84 <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 8000b30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b34:	68b8      	ldr	r0, [r7, #8]
 8000b36:	f7ff fdf1 	bl	800071c <rcvr_datablock>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d021      	beq.n	8000b84 <disk_read+0xb0>
			count = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	e01e      	b.n	8000b84 <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	2052      	movs	r0, #82	; 0x52
 8000b4a:	f7ff fe71 	bl	8000830 <send_cmd>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d117      	bne.n	8000b84 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8000b54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b58:	68b8      	ldr	r0, [r7, #8]
 8000b5a:	f7ff fddf 	bl	800071c <rcvr_datablock>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d00a      	beq.n	8000b7a <disk_read+0xa6>
					break;
				buff += 512;
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b6a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	603b      	str	r3, [r7, #0]
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d1ed      	bne.n	8000b54 <disk_read+0x80>
 8000b78:	e000      	b.n	8000b7c <disk_read+0xa8>
					break;
 8000b7a:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	204c      	movs	r0, #76	; 0x4c
 8000b80:	f7ff fe56 	bl	8000830 <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 8000b84:	f7ff fcfb 	bl	800057e <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8000b88:	f7ff fd1a 	bl	80005c0 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	bf14      	ite	ne
 8000b92:	2301      	movne	r3, #1
 8000b94:	2300      	moveq	r3, #0
 8000b96:	b2db      	uxtb	r3, r3
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	200000a6 	.word	0x200000a6

08000ba8 <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d102      	bne.n	8000bc4 <disk_write+0x1c>
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d101      	bne.n	8000bc8 <disk_write+0x20>
		return RES_PARERR;
 8000bc4:	2304      	movs	r3, #4
 8000bc6:	e06b      	b.n	8000ca0 <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 8000bc8:	4b37      	ldr	r3, [pc, #220]	; (8000ca8 <disk_write+0x100>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <disk_write+0x32>
		return RES_NOTRDY;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	e062      	b.n	8000ca0 <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 8000bda:	4b33      	ldr	r3, [pc, #204]	; (8000ca8 <disk_write+0x100>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <disk_write+0x44>
		return RES_WRPRT;
 8000be8:	2302      	movs	r3, #2
 8000bea:	e059      	b.n	8000ca0 <disk_write+0xf8>

	if (!(CardType & 4))
 8000bec:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <disk_write+0x104>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	f003 0304 	and.w	r3, r3, #4
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	025b      	lsls	r3, r3, #9
 8000bfc:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8000bfe:	f7ff fcb7 	bl	8000570 <SELECT>

	if (count == 1) { /* Single block write */
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d110      	bne.n	8000c2a <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 8000c08:	6879      	ldr	r1, [r7, #4]
 8000c0a:	2058      	movs	r0, #88	; 0x58
 8000c0c:	f7ff fe10 	bl	8000830 <send_cmd>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d13a      	bne.n	8000c8c <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 8000c16:	21fe      	movs	r1, #254	; 0xfe
 8000c18:	68b8      	ldr	r0, [r7, #8]
 8000c1a:	f7ff fdb5 	bl	8000788 <xmit_datablock>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d033      	beq.n	8000c8c <disk_write+0xe4>
			count = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	e030      	b.n	8000c8c <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 8000c2a:	4b20      	ldr	r3, [pc, #128]	; (8000cac <disk_write+0x104>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d007      	beq.n	8000c46 <disk_write+0x9e>
			send_cmd(CMD55, 0);
 8000c36:	2100      	movs	r1, #0
 8000c38:	2077      	movs	r0, #119	; 0x77
 8000c3a:	f7ff fdf9 	bl	8000830 <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 8000c3e:	6839      	ldr	r1, [r7, #0]
 8000c40:	2057      	movs	r0, #87	; 0x57
 8000c42:	f7ff fdf5 	bl	8000830 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	2059      	movs	r0, #89	; 0x59
 8000c4a:	f7ff fdf1 	bl	8000830 <send_cmd>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d11b      	bne.n	8000c8c <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8000c54:	21fc      	movs	r1, #252	; 0xfc
 8000c56:	68b8      	ldr	r0, [r7, #8]
 8000c58:	f7ff fd96 	bl	8000788 <xmit_datablock>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d00a      	beq.n	8000c78 <disk_write+0xd0>
					break;
				buff += 512;
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c68:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d1ee      	bne.n	8000c54 <disk_write+0xac>
 8000c76:	e000      	b.n	8000c7a <disk_write+0xd2>
					break;
 8000c78:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 8000c7a:	21fd      	movs	r1, #253	; 0xfd
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f7ff fd83 	bl	8000788 <xmit_datablock>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d101      	bne.n	8000c8c <disk_write+0xe4>
				count = 1;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 8000c8c:	f7ff fc77 	bl	800057e <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8000c90:	f7ff fc96 	bl	80005c0 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	bf14      	ite	ne
 8000c9a:	2301      	movne	r3, #1
 8000c9c:	2300      	moveq	r3, #0
 8000c9e:	b2db      	uxtb	r3, r3
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	200000a6 	.word	0x200000a6

08000cb0 <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 8000cb0:	b590      	push	{r4, r7, lr}
 8000cb2:	b08b      	sub	sp, #44	; 0x2c
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	603a      	str	r2, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <disk_ioctl+0x1e>
		return RES_PARERR;
 8000cca:	2304      	movs	r3, #4
 8000ccc:	e16a      	b.n	8000fa4 <disk_ioctl+0x2f4>

	res = RES_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER_OFF) {
 8000cd4:	79bb      	ldrb	r3, [r7, #6]
 8000cd6:	2b07      	cmp	r3, #7
 8000cd8:	d127      	bne.n	8000d2a <disk_ioctl+0x7a>
		switch (*ptr) {
 8000cda:	6a3b      	ldr	r3, [r7, #32]
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d00e      	beq.n	8000d00 <disk_ioctl+0x50>
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d012      	beq.n	8000d0c <disk_ioctl+0x5c>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d11b      	bne.n	8000d22 <disk_ioctl+0x72>
		case 0: /* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
 8000cea:	f7ff fd0b 	bl	8000704 <chk_power>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <disk_ioctl+0x48>
				power_off(); /* Power off */
 8000cf4:	f7ff fcfa 	bl	80006ec <power_off>
			res = RES_OK;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000cfe:	e14f      	b.n	8000fa0 <disk_ioctl+0x2f0>
		case 1: /* Sub control code == 1 (POWER_ON) */
			power_on(); /* Power on */
 8000d00:	f7ff fca6 	bl	8000650 <power_on>
			res = RES_OK;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d0a:	e149      	b.n	8000fa0 <disk_ioctl+0x2f0>
		case 2: /* Sub control code == 2 (POWER_GET) */
			*(ptr + 1) = (BYTE) chk_power();
 8000d0c:	f7ff fcfa 	bl	8000704 <chk_power>
 8000d10:	4602      	mov	r2, r0
 8000d12:	6a3b      	ldr	r3, [r7, #32]
 8000d14:	3301      	adds	r3, #1
 8000d16:	b2d2      	uxtb	r2, r2
 8000d18:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d20:	e13e      	b.n	8000fa0 <disk_ioctl+0x2f0>
		default:
			res = RES_PARERR;
 8000d22:	2304      	movs	r3, #4
 8000d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d28:	e13a      	b.n	8000fa0 <disk_ioctl+0x2f0>
		}
	} else {
		if (Stat & STA_NOINIT)
 8000d2a:	4ba0      	ldr	r3, [pc, #640]	; (8000fac <disk_ioctl+0x2fc>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <disk_ioctl+0x8c>
			return RES_NOTRDY;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	e133      	b.n	8000fa4 <disk_ioctl+0x2f4>

		SELECT(); /* CS = L */
 8000d3c:	f7ff fc18 	bl	8000570 <SELECT>

		switch (ctrl) {
 8000d40:	79bb      	ldrb	r3, [r7, #6]
 8000d42:	2b35      	cmp	r3, #53	; 0x35
 8000d44:	f200 811d 	bhi.w	8000f82 <disk_ioctl+0x2d2>
 8000d48:	a201      	add	r2, pc, #4	; (adr r2, 8000d50 <disk_ioctl+0xa0>)
 8000d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d4e:	bf00      	nop
 8000d50:	08000eeb 	.word	0x08000eeb
 8000d54:	08000e29 	.word	0x08000e29
 8000d58:	08000edb 	.word	0x08000edb
 8000d5c:	08000f83 	.word	0x08000f83
 8000d60:	08000f83 	.word	0x08000f83
 8000d64:	08000f83 	.word	0x08000f83
 8000d68:	08000f83 	.word	0x08000f83
 8000d6c:	08000f83 	.word	0x08000f83
 8000d70:	08000f83 	.word	0x08000f83
 8000d74:	08000f83 	.word	0x08000f83
 8000d78:	08000f83 	.word	0x08000f83
 8000d7c:	08000f83 	.word	0x08000f83
 8000d80:	08000f83 	.word	0x08000f83
 8000d84:	08000f83 	.word	0x08000f83
 8000d88:	08000f83 	.word	0x08000f83
 8000d8c:	08000f83 	.word	0x08000f83
 8000d90:	08000f83 	.word	0x08000f83
 8000d94:	08000f83 	.word	0x08000f83
 8000d98:	08000f83 	.word	0x08000f83
 8000d9c:	08000f83 	.word	0x08000f83
 8000da0:	08000f83 	.word	0x08000f83
 8000da4:	08000f83 	.word	0x08000f83
 8000da8:	08000f83 	.word	0x08000f83
 8000dac:	08000f83 	.word	0x08000f83
 8000db0:	08000f83 	.word	0x08000f83
 8000db4:	08000f83 	.word	0x08000f83
 8000db8:	08000f83 	.word	0x08000f83
 8000dbc:	08000f83 	.word	0x08000f83
 8000dc0:	08000f83 	.word	0x08000f83
 8000dc4:	08000f83 	.word	0x08000f83
 8000dc8:	08000f83 	.word	0x08000f83
 8000dcc:	08000f83 	.word	0x08000f83
 8000dd0:	08000f83 	.word	0x08000f83
 8000dd4:	08000f83 	.word	0x08000f83
 8000dd8:	08000f83 	.word	0x08000f83
 8000ddc:	08000f83 	.word	0x08000f83
 8000de0:	08000f83 	.word	0x08000f83
 8000de4:	08000f83 	.word	0x08000f83
 8000de8:	08000f83 	.word	0x08000f83
 8000dec:	08000f83 	.word	0x08000f83
 8000df0:	08000f83 	.word	0x08000f83
 8000df4:	08000f83 	.word	0x08000f83
 8000df8:	08000f83 	.word	0x08000f83
 8000dfc:	08000f83 	.word	0x08000f83
 8000e00:	08000f83 	.word	0x08000f83
 8000e04:	08000f83 	.word	0x08000f83
 8000e08:	08000f83 	.word	0x08000f83
 8000e0c:	08000f83 	.word	0x08000f83
 8000e10:	08000f83 	.word	0x08000f83
 8000e14:	08000f83 	.word	0x08000f83
 8000e18:	08000f83 	.word	0x08000f83
 8000e1c:	08000efd 	.word	0x08000efd
 8000e20:	08000f21 	.word	0x08000f21
 8000e24:	08000f45 	.word	0x08000f45
		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2049      	movs	r0, #73	; 0x49
 8000e2c:	f7ff fd00 	bl	8000830 <send_cmd>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f040 80a9 	bne.w	8000f8a <disk_ioctl+0x2da>
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	2110      	movs	r1, #16
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fc6c 	bl	800071c <rcvr_datablock>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f000 809f 	beq.w	8000f8a <disk_ioctl+0x2da>
				if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8000e4c:	7b3b      	ldrb	r3, [r7, #12]
 8000e4e:	099b      	lsrs	r3, r3, #6
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d10e      	bne.n	8000e74 <disk_ioctl+0x1c4>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000e56:	7d7b      	ldrb	r3, [r7, #21]
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	7d3b      	ldrb	r3, [r7, #20]
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	4413      	add	r3, r2
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	3301      	adds	r3, #1
 8000e68:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000e6a:	8bfb      	ldrh	r3, [r7, #30]
 8000e6c:	029a      	lsls	r2, r3, #10
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	e02e      	b.n	8000ed2 <disk_ioctl+0x222>
				} else { /* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8000e74:	7c7b      	ldrb	r3, [r7, #17]
 8000e76:	f003 030f 	and.w	r3, r3, #15
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	7dbb      	ldrb	r3, [r7, #22]
 8000e7e:	09db      	lsrs	r3, r3, #7
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	4413      	add	r3, r2
 8000e84:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 8000e86:	7d7b      	ldrb	r3, [r7, #21]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	f003 0306 	and.w	r3, r3, #6
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	4413      	add	r3, r2
 8000e94:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8000e96:	3302      	adds	r3, #2
 8000e98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8000e9c:	7d3b      	ldrb	r3, [r7, #20]
 8000e9e:	099b      	lsrs	r3, r3, #6
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	7cfb      	ldrb	r3, [r7, #19]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	4413      	add	r3, r2
 8000eae:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 8000eb0:	7cbb      	ldrb	r3, [r7, #18]
 8000eb2:	029b      	lsls	r3, r3, #10
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	4413      	add	r3, r2
 8000ebe:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000ec4:	8bfa      	ldrh	r2, [r7, #30]
 8000ec6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000eca:	3b09      	subs	r3, #9
 8000ecc:	409a      	lsls	r2, r3
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000ed8:	e057      	b.n	8000f8a <disk_ioctl+0x2da>

		case GET_SECTOR_SIZE: /* Get sectors on the disk (WORD) */
			*(WORD*) buff = 512;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ee0:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000ee8:	e056      	b.n	8000f98 <disk_ioctl+0x2e8>

		case CTRL_SYNC: /* Make sure that data has been written */
			if (wait_ready() == 0xFF)
 8000eea:	f7ff fb95 	bl	8000618 <wait_ready>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2bff      	cmp	r3, #255	; 0xff
 8000ef2:	d14c      	bne.n	8000f8e <disk_ioctl+0x2de>
				res = RES_OK;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000efa:	e048      	b.n	8000f8e <disk_ioctl+0x2de>

		case MMC_GET_CSD: /* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0 /* READ_CSD */
 8000efc:	2100      	movs	r1, #0
 8000efe:	2049      	movs	r0, #73	; 0x49
 8000f00:	f7ff fc96 	bl	8000830 <send_cmd>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d143      	bne.n	8000f92 <disk_ioctl+0x2e2>
			&& rcvr_datablock(ptr, 16))
 8000f0a:	2110      	movs	r1, #16
 8000f0c:	6a38      	ldr	r0, [r7, #32]
 8000f0e:	f7ff fc05 	bl	800071c <rcvr_datablock>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d03c      	beq.n	8000f92 <disk_ioctl+0x2e2>
				res = RES_OK;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000f1e:	e038      	b.n	8000f92 <disk_ioctl+0x2e2>

		case MMC_GET_CID: /* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0 /* READ_CID */
 8000f20:	2100      	movs	r1, #0
 8000f22:	204a      	movs	r0, #74	; 0x4a
 8000f24:	f7ff fc84 	bl	8000830 <send_cmd>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d133      	bne.n	8000f96 <disk_ioctl+0x2e6>
			&& rcvr_datablock(ptr, 16))
 8000f2e:	2110      	movs	r1, #16
 8000f30:	6a38      	ldr	r0, [r7, #32]
 8000f32:	f7ff fbf3 	bl	800071c <rcvr_datablock>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d02c      	beq.n	8000f96 <disk_ioctl+0x2e6>
				res = RES_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000f42:	e028      	b.n	8000f96 <disk_ioctl+0x2e6>

		case MMC_GET_OCR: /* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 8000f44:	2100      	movs	r1, #0
 8000f46:	207a      	movs	r0, #122	; 0x7a
 8000f48:	f7ff fc72 	bl	8000830 <send_cmd>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d117      	bne.n	8000f82 <disk_ioctl+0x2d2>
				for (n = 0; n < 4; n++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f58:	e00b      	b.n	8000f72 <disk_ioctl+0x2c2>
					*ptr++ = rcvr_spi();
 8000f5a:	6a3c      	ldr	r4, [r7, #32]
 8000f5c:	1c63      	adds	r3, r4, #1
 8000f5e:	623b      	str	r3, [r7, #32]
 8000f60:	f7ff fb2e 	bl	80005c0 <rcvr_spi>
 8000f64:	4603      	mov	r3, r0
 8000f66:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000f68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	d9ef      	bls.n	8000f5a <disk_ioctl+0x2aa>
				res = RES_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8000f80:	e00a      	b.n	8000f98 <disk_ioctl+0x2e8>
//            *ptr = CardType;
//            res = RES_OK;
//            break;

		default:
			res = RES_PARERR;
 8000f82:	2304      	movs	r3, #4
 8000f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f88:	e006      	b.n	8000f98 <disk_ioctl+0x2e8>
			break;
 8000f8a:	bf00      	nop
 8000f8c:	e004      	b.n	8000f98 <disk_ioctl+0x2e8>
			break;
 8000f8e:	bf00      	nop
 8000f90:	e002      	b.n	8000f98 <disk_ioctl+0x2e8>
			break;
 8000f92:	bf00      	nop
 8000f94:	e000      	b.n	8000f98 <disk_ioctl+0x2e8>
			break;
 8000f96:	bf00      	nop
		}

		DESELECT(); /* CS = H */
 8000f98:	f7ff faf1 	bl	800057e <DESELECT>
		rcvr_spi(); /* Idle (Release DO) */
 8000f9c:	f7ff fb10 	bl	80005c0 <rcvr_spi>
	}

	return res;
 8000fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	372c      	adds	r7, #44	; 0x2c
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd90      	pop	{r4, r7, pc}
 8000fac:	20000000 	.word	0x20000000

08000fb0 <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <disk_timerproc+0x44>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	71fb      	strb	r3, [r7, #7]
	if (n)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d005      	beq.n	8000fce <disk_timerproc+0x1e>
		Timer1 = --n;
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <disk_timerproc+0x44>)
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <disk_timerproc+0x48>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
	if (n)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d005      	beq.n	8000fe6 <disk_timerproc+0x36>
		Timer2 = --n;
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	71fb      	strb	r3, [r7, #7]
 8000fe0:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <disk_timerproc+0x48>)
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	7013      	strb	r3, [r2, #0]

}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	200000a4 	.word	0x200000a4
 8000ff8:	200000a5 	.word	0x200000a5

08000ffc <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	++sdcard_timer;
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <sdcard_systick_timerproc+0x2c>)
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	b29b      	uxth	r3, r3
 8001006:	3301      	adds	r3, #1
 8001008:	b29a      	uxth	r2, r3
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <sdcard_systick_timerproc+0x2c>)
 800100c:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <sdcard_systick_timerproc+0x2c>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	b29b      	uxth	r3, r3
 8001014:	2b09      	cmp	r3, #9
 8001016:	d904      	bls.n	8001022 <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <sdcard_systick_timerproc+0x2c>)
 800101a:	2200      	movs	r2, #0
 800101c:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 800101e:	f7ff ffc7 	bl	8000fb0 <disk_timerproc>
	}
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200005a4 	.word	0x200005a4

0800102c <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 8001030:	4b02      	ldr	r3, [pc, #8]	; (800103c <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	36c55cc0 	.word	0x36c55cc0

08001040 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3301      	adds	r3, #1
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8001050:	89fb      	ldrh	r3, [r7, #14]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	b21a      	sxth	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	b21b      	sxth	r3, r3
 800105c:	4313      	orrs	r3, r2
 800105e:	b21b      	sxth	r3, r3
 8001060:	81fb      	strh	r3, [r7, #14]
	return rv;
 8001062:	89fb      	ldrh	r3, [r7, #14]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3303      	adds	r3, #3
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	3202      	adds	r2, #2
 8001088:	7812      	ldrb	r2, [r2, #0]
 800108a:	4313      	orrs	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	021b      	lsls	r3, r3, #8
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	3201      	adds	r2, #1
 8001096:	7812      	ldrb	r2, [r2, #0]
 8001098:	4313      	orrs	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	7812      	ldrb	r2, [r2, #0]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]
	return rv;
 80010a8:	68fb      	ldr	r3, [r7, #12]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3714      	adds	r7, #20
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <ld_qword>:

#if FF_FS_EXFAT
static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 80010b6:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3307      	adds	r3, #7
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	f04f 0400 	mov.w	r4, #0
 80010cc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 80010d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80010d4:	f04f 0b00 	mov.w	fp, #0
 80010d8:	f04f 0c00 	mov.w	ip, #0
 80010dc:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80010e0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80010e4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	3206      	adds	r2, #6
 80010ec:	7812      	ldrb	r2, [r2, #0]
 80010ee:	b2d1      	uxtb	r1, r2
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	ea4b 0301 	orr.w	r3, fp, r1
 80010f8:	ea4c 0402 	orr.w	r4, ip, r2
 80010fc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 8001100:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001104:	f04f 0b00 	mov.w	fp, #0
 8001108:	f04f 0c00 	mov.w	ip, #0
 800110c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8001110:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8001114:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	3205      	adds	r2, #5
 800111c:	7812      	ldrb	r2, [r2, #0]
 800111e:	b2d1      	uxtb	r1, r2
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	ea4b 0301 	orr.w	r3, fp, r1
 8001128:	ea4c 0402 	orr.w	r4, ip, r2
 800112c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 8001130:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001134:	f04f 0b00 	mov.w	fp, #0
 8001138:	f04f 0c00 	mov.w	ip, #0
 800113c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8001140:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8001144:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	3204      	adds	r2, #4
 800114c:	7812      	ldrb	r2, [r2, #0]
 800114e:	b2d1      	uxtb	r1, r2
 8001150:	f04f 0200 	mov.w	r2, #0
 8001154:	ea4b 0301 	orr.w	r3, fp, r1
 8001158:	ea4c 0402 	orr.w	r4, ip, r2
 800115c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 8001160:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001164:	f04f 0b00 	mov.w	fp, #0
 8001168:	f04f 0c00 	mov.w	ip, #0
 800116c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8001170:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8001174:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	3203      	adds	r2, #3
 800117c:	7812      	ldrb	r2, [r2, #0]
 800117e:	b2d1      	uxtb	r1, r2
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	ea4b 0301 	orr.w	r3, fp, r1
 8001188:	ea4c 0402 	orr.w	r4, ip, r2
 800118c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 8001190:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001194:	f04f 0b00 	mov.w	fp, #0
 8001198:	f04f 0c00 	mov.w	ip, #0
 800119c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80011a0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80011a4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	3202      	adds	r2, #2
 80011ac:	7812      	ldrb	r2, [r2, #0]
 80011ae:	b2d1      	uxtb	r1, r2
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	ea4b 0301 	orr.w	r3, fp, r1
 80011b8:	ea4c 0402 	orr.w	r4, ip, r2
 80011bc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 80011c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80011c4:	f04f 0b00 	mov.w	fp, #0
 80011c8:	f04f 0c00 	mov.w	ip, #0
 80011cc:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80011d0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80011d4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	3201      	adds	r2, #1
 80011dc:	7812      	ldrb	r2, [r2, #0]
 80011de:	b2d1      	uxtb	r1, r2
 80011e0:	f04f 0200 	mov.w	r2, #0
 80011e4:	ea4b 0301 	orr.w	r3, fp, r1
 80011e8:	ea4c 0402 	orr.w	r4, ip, r2
 80011ec:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 80011f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80011f4:	f04f 0b00 	mov.w	fp, #0
 80011f8:	f04f 0c00 	mov.w	ip, #0
 80011fc:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8001200:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8001204:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	7812      	ldrb	r2, [r2, #0]
 800120c:	b2d1      	uxtb	r1, r2
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	ea4b 0301 	orr.w	r3, fp, r1
 8001216:	ea4c 0402 	orr.w	r4, ip, r2
 800121a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 800121e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8001222:	4618      	mov	r0, r3
 8001224:	4621      	mov	r1, r4
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800122e:	4770      	bx	lr

08001230 <st_word>:
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	1c5a      	adds	r2, r3, #1
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	887a      	ldrh	r2, [r7, #2]
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	701a      	strb	r2, [r3, #0]
 8001248:	887b      	ldrh	r3, [r7, #2]
 800124a:	0a1b      	lsrs	r3, r3, #8
 800124c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	887a      	ldrh	r2, [r7, #2]
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	701a      	strb	r2, [r3, #0]
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	607a      	str	r2, [r7, #4]
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	701a      	strb	r2, [r3, #0]
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	0a1b      	lsrs	r3, r3, #8
 8001280:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	1c5a      	adds	r2, r3, #1
 8001286:	607a      	str	r2, [r7, #4]
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	701a      	strb	r2, [r3, #0]
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	0a1b      	lsrs	r3, r3, #8
 8001292:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	b2d2      	uxtb	r2, r2
 800129e:	701a      	strb	r2, [r3, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	0a1b      	lsrs	r3, r3, #8
 80012a4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	1c5a      	adds	r2, r3, #1
 80012aa:	607a      	str	r2, [r7, #4]
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	701a      	strb	r2, [r3, #0]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <st_qword>:

#if FF_FS_EXFAT
static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 80012be:	b490      	push	{r4, r7}
 80012c0:	b084      	sub	sp, #16
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	60f8      	str	r0, [r7, #12]
 80012c6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	1c5a      	adds	r2, r3, #1
 80012ce:	60fa      	str	r2, [r7, #12]
 80012d0:	783a      	ldrb	r2, [r7, #0]
 80012d2:	701a      	strb	r2, [r3, #0]
 80012d4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80012d8:	f04f 0300 	mov.w	r3, #0
 80012dc:	f04f 0400 	mov.w	r4, #0
 80012e0:	0a0b      	lsrs	r3, r1, #8
 80012e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80012e6:	0a14      	lsrs	r4, r2, #8
 80012e8:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	60fa      	str	r2, [r7, #12]
 80012f2:	783a      	ldrb	r2, [r7, #0]
 80012f4:	701a      	strb	r2, [r3, #0]
 80012f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80012fa:	f04f 0300 	mov.w	r3, #0
 80012fe:	f04f 0400 	mov.w	r4, #0
 8001302:	0a0b      	lsrs	r3, r1, #8
 8001304:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001308:	0a14      	lsrs	r4, r2, #8
 800130a:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	1c5a      	adds	r2, r3, #1
 8001312:	60fa      	str	r2, [r7, #12]
 8001314:	783a      	ldrb	r2, [r7, #0]
 8001316:	701a      	strb	r2, [r3, #0]
 8001318:	e9d7 1200 	ldrd	r1, r2, [r7]
 800131c:	f04f 0300 	mov.w	r3, #0
 8001320:	f04f 0400 	mov.w	r4, #0
 8001324:	0a0b      	lsrs	r3, r1, #8
 8001326:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800132a:	0a14      	lsrs	r4, r2, #8
 800132c:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	60fa      	str	r2, [r7, #12]
 8001336:	783a      	ldrb	r2, [r7, #0]
 8001338:	701a      	strb	r2, [r3, #0]
 800133a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800133e:	f04f 0300 	mov.w	r3, #0
 8001342:	f04f 0400 	mov.w	r4, #0
 8001346:	0a0b      	lsrs	r3, r1, #8
 8001348:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800134c:	0a14      	lsrs	r4, r2, #8
 800134e:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	1c5a      	adds	r2, r3, #1
 8001356:	60fa      	str	r2, [r7, #12]
 8001358:	783a      	ldrb	r2, [r7, #0]
 800135a:	701a      	strb	r2, [r3, #0]
 800135c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	f04f 0400 	mov.w	r4, #0
 8001368:	0a0b      	lsrs	r3, r1, #8
 800136a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800136e:	0a14      	lsrs	r4, r2, #8
 8001370:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	1c5a      	adds	r2, r3, #1
 8001378:	60fa      	str	r2, [r7, #12]
 800137a:	783a      	ldrb	r2, [r7, #0]
 800137c:	701a      	strb	r2, [r3, #0]
 800137e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001382:	f04f 0300 	mov.w	r3, #0
 8001386:	f04f 0400 	mov.w	r4, #0
 800138a:	0a0b      	lsrs	r3, r1, #8
 800138c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001390:	0a14      	lsrs	r4, r2, #8
 8001392:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	60fa      	str	r2, [r7, #12]
 800139c:	783a      	ldrb	r2, [r7, #0]
 800139e:	701a      	strb	r2, [r3, #0]
 80013a0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80013a4:	f04f 0300 	mov.w	r3, #0
 80013a8:	f04f 0400 	mov.w	r4, #0
 80013ac:	0a0b      	lsrs	r3, r1, #8
 80013ae:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80013b2:	0a14      	lsrs	r4, r2, #8
 80013b4:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	60fa      	str	r2, [r7, #12]
 80013be:	783a      	ldrb	r2, [r7, #0]
 80013c0:	701a      	strb	r2, [r3, #0]
}
 80013c2:	bf00      	nop
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc90      	pop	{r4, r7}
 80013ca:	4770      	bx	lr

080013cc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b087      	sub	sp, #28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	613b      	str	r3, [r7, #16]

	if (cnt != 0) {
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00d      	beq.n	8001402 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	1c53      	adds	r3, r2, #1
 80013ea:	613b      	str	r3, [r7, #16]
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	1c59      	adds	r1, r3, #1
 80013f0:	6179      	str	r1, [r7, #20]
 80013f2:	7812      	ldrb	r2, [r2, #0]
 80013f4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3b01      	subs	r3, #1
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f1      	bne.n	80013e6 <mem_cpy+0x1a>
	}
}
 8001402:	bf00      	nop
 8001404:	371c      	adds	r7, #28
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
 800140e:	b480      	push	{r7}
 8001410:	b087      	sub	sp, #28
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	1c5a      	adds	r2, r3, #1
 8001422:	617a      	str	r2, [r7, #20]
 8001424:	68ba      	ldr	r2, [r7, #8]
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	3b01      	subs	r3, #1
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1f3      	bne.n	800141e <mem_set+0x10>
}
 8001436:	bf00      	nop
 8001438:	371c      	adds	r7, #28
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 8001442:	b480      	push	{r7}
 8001444:	b089      	sub	sp, #36	; 0x24
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	61fb      	str	r3, [r7, #28]
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	61fa      	str	r2, [r7, #28]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	4619      	mov	r1, r3
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	1c5a      	adds	r2, r3, #1
 8001468:	61ba      	str	r2, [r7, #24]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	1acb      	subs	r3, r1, r3
 800146e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d002      	beq.n	8001482 <mem_cmp+0x40>
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0eb      	beq.n	800145a <mem_cmp+0x18>

	return r;
 8001482:	697b      	ldr	r3, [r7, #20]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3724      	adds	r7, #36	; 0x24
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800149a:	e002      	b.n	80014a2 <chk_chr+0x12>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3301      	adds	r3, #1
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d005      	beq.n	80014b6 <chk_chr+0x26>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d1f2      	bne.n	800149c <chk_chr+0xc>
	return *str;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	781b      	ldrb	r3, [r3, #0]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <dbc_1st>:


/* Test if the character is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 80014d0:	2281      	movs	r2, #129	; 0x81
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d30f      	bcc.n	80014f8 <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 80014d8:	229f      	movs	r2, #159	; 0x9f
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	4293      	cmp	r3, r2
 80014de:	d801      	bhi.n	80014e4 <dbc_1st+0x1e>
 80014e0:	2301      	movs	r3, #1
 80014e2:	e00a      	b.n	80014fa <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 80014e4:	22e0      	movs	r2, #224	; 0xe0
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d305      	bcc.n	80014f8 <dbc_1st+0x32>
 80014ec:	22fc      	movs	r2, #252	; 0xfc
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d801      	bhi.n	80014f8 <dbc_1st+0x32>
 80014f4:	2301      	movs	r3, #1
 80014f6:	e000      	b.n	80014fa <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <dbc_2nd>:


/* Test if the character is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
 8001510:	2240      	movs	r2, #64	; 0x40
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	4293      	cmp	r3, r2
 8001516:	d319      	bcc.n	800154c <dbc_2nd+0x46>
		if (c <= DbcTbl[5]) return 1;
 8001518:	227e      	movs	r2, #126	; 0x7e
 800151a:	79fb      	ldrb	r3, [r7, #7]
 800151c:	4293      	cmp	r3, r2
 800151e:	d801      	bhi.n	8001524 <dbc_2nd+0x1e>
 8001520:	2301      	movs	r3, #1
 8001522:	e014      	b.n	800154e <dbc_2nd+0x48>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 8001524:	2280      	movs	r2, #128	; 0x80
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	4293      	cmp	r3, r2
 800152a:	d305      	bcc.n	8001538 <dbc_2nd+0x32>
 800152c:	22fc      	movs	r2, #252	; 0xfc
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	4293      	cmp	r3, r2
 8001532:	d801      	bhi.n	8001538 <dbc_2nd+0x32>
 8001534:	2301      	movs	r3, #1
 8001536:	e00a      	b.n	800154e <dbc_2nd+0x48>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 8001538:	2200      	movs	r2, #0
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	4293      	cmp	r3, r2
 800153e:	d305      	bcc.n	800154c <dbc_2nd+0x46>
 8001540:	2200      	movs	r2, #0
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	4293      	cmp	r3, r2
 8001546:	d801      	bhi.n	800154c <dbc_2nd+0x46>
 8001548:	2301      	movs	r3, #1
 800154a:	e000      	b.n	800154e <dbc_2nd+0x48>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <tchar2uni>:

/* Get a character from TCHAR string in defined API encodeing */
static DWORD tchar2uni (	/* Returns character in UTF-16 encoding (>=0x10000 on double encoding unit, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b086      	sub	sp, #24
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
	DWORD uc;
	const TCHAR *p = *str;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	617b      	str	r3, [r7, #20]

#else		/* ANSI/OEM input */
	BYTE b;
	WCHAR wc;

	wc = (BYTE)*p++;			/* Get a byte */
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	1c5a      	adds	r2, r3, #1
 800156c:	617a      	str	r2, [r7, #20]
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	827b      	strh	r3, [r7, #18]
	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 8001572:	8a7b      	ldrh	r3, [r7, #18]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff ffa5 	bl	80014c6 <dbc_1st>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d015      	beq.n	80015ae <tchar2uni+0x54>
		b = (BYTE)*p++;			/* Get 2nd byte */
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	617a      	str	r2, [r7, #20]
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	747b      	strb	r3, [r7, #17]
		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
 800158c:	7c7b      	ldrb	r3, [r7, #17]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ffb9 	bl	8001506 <dbc_2nd>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d102      	bne.n	80015a0 <tchar2uni+0x46>
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
 800159e:	e01d      	b.n	80015dc <tchar2uni+0x82>
		wc = (wc << 8) + b;		/* Make a DBC */
 80015a0:	8a7b      	ldrh	r3, [r7, #18]
 80015a2:	021b      	lsls	r3, r3, #8
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	7c7b      	ldrb	r3, [r7, #17]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	827b      	strh	r3, [r7, #18]
	}
	if (wc != 0) {
 80015ae:	8a7b      	ldrh	r3, [r7, #18]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00d      	beq.n	80015d0 <tchar2uni+0x76>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 80015b4:	8a7b      	ldrh	r3, [r7, #18]
 80015b6:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80015ba:	4618      	mov	r0, r3
 80015bc:	f004 fdcc 	bl	8006158 <ff_oem2uni>
 80015c0:	4603      	mov	r3, r0
 80015c2:	827b      	strh	r3, [r7, #18]
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 80015c4:	8a7b      	ldrh	r3, [r7, #18]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d102      	bne.n	80015d0 <tchar2uni+0x76>
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295
 80015ce:	e005      	b.n	80015dc <tchar2uni+0x82>
	}
	uc = wc;
 80015d0:	8a7b      	ldrh	r3, [r7, #18]
 80015d2:	60fb      	str	r3, [r7, #12]

#endif
	*str = p;	/* Next read pointer */
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	601a      	str	r2, [r3, #0]
	return uc;
 80015da:	68fb      	ldr	r3, [r7, #12]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <put_utf>:
static BYTE put_utf (	/* Returns number of encoding units written (0:buffer overflow or wrong encoding) */
	DWORD chr,	/* UTF-16 encoded character (Double encoding unit char if >=0x10000) */
	TCHAR* buf,	/* Output buffer */
	UINT szb	/* Size of the buffer */
)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
	return 1;

#else						/* ANSI/OEM output */
	WCHAR wc;

	wc = ff_uni2oem(chr, CODEPAGE);
 80015f0:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	f004 fd53 	bl	80060a0 <ff_uni2oem>
 80015fa:	4603      	mov	r3, r0
 80015fc:	82fb      	strh	r3, [r7, #22]
	if (wc >= 0x100) {	/* Is this a DBC? */
 80015fe:	8afb      	ldrh	r3, [r7, #22]
 8001600:	2bff      	cmp	r3, #255	; 0xff
 8001602:	d914      	bls.n	800162e <put_utf+0x4a>
		if (szb < 2) return 0;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d801      	bhi.n	800160e <put_utf+0x2a>
 800160a:	2300      	movs	r3, #0
 800160c:	e01e      	b.n	800164c <put_utf+0x68>
		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
 800160e:	8afb      	ldrh	r3, [r7, #22]
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	b299      	uxth	r1, r3
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	1c5a      	adds	r2, r3, #1
 8001618:	60ba      	str	r2, [r7, #8]
 800161a:	b2ca      	uxtb	r2, r1
 800161c:	701a      	strb	r2, [r3, #0]
		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	60ba      	str	r2, [r7, #8]
 8001624:	8afa      	ldrh	r2, [r7, #22]
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	701a      	strb	r2, [r3, #0]
		return 2;
 800162a:	2302      	movs	r3, #2
 800162c:	e00e      	b.n	800164c <put_utf+0x68>
	}
	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
 800162e:	8afb      	ldrh	r3, [r7, #22]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d002      	beq.n	800163a <put_utf+0x56>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <put_utf+0x5a>
 800163a:	2300      	movs	r3, #0
 800163c:	e006      	b.n	800164c <put_utf+0x68>
	*buf++ = (TCHAR)wc;					/* Store the character */
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	60ba      	str	r2, [r7, #8]
 8001644:	8afa      	ldrh	r2, [r7, #22]
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	701a      	strb	r2, [r3, #0]
	return 1;
 800164a:	2301      	movs	r3, #1
#endif
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty */
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	78db      	ldrb	r3, [r3, #3]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d02c      	beq.n	80016c2 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	7858      	ldrb	r0, [r3, #1]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001676:	2301      	movs	r3, #1
 8001678:	f7ff fa96 	bl	8000ba8 <disk_write>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d11d      	bne.n	80016be <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001690:	1ad2      	subs	r2, r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	429a      	cmp	r2, r3
 8001698:	d213      	bcs.n	80016c2 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	789b      	ldrb	r3, [r3, #2]
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d10f      	bne.n	80016c2 <sync_window+0x6e>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	7858      	ldrb	r0, [r3, #1]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b4:	441a      	add	r2, r3
 80016b6:	2301      	movs	r3, #1
 80016b8:	f7ff fa76 	bl	8000ba8 <disk_write>
 80016bc:	e001      	b.n	80016c2 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 80016be:	2301      	movs	r3, #1
 80016c0:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d01b      	beq.n	800171c <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ffb5 	bl	8001654 <sync_window>
 80016ea:	4603      	mov	r3, r0
 80016ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d113      	bne.n	800171c <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	7858      	ldrb	r0, [r3, #1]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 80016fe:	2301      	movs	r3, #1
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	f7ff f9e7 	bl	8000ad4 <disk_read>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d004      	beq.n	8001716 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 800170c:	f04f 33ff 	mov.w	r3, #4294967295
 8001710:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8001712:	2301      	movs	r3, #1
 8001714:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
	return res;
 800171c:	7bfb      	ldrb	r3, [r7, #15]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
	...

08001728 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ff8f 	bl	8001654 <sync_window>
 8001736:	4603      	mov	r3, r0
 8001738:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d158      	bne.n	80017f2 <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b03      	cmp	r3, #3
 8001746:	d148      	bne.n	80017da <sync_fs+0xb2>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	791b      	ldrb	r3, [r3, #4]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d144      	bne.n	80017da <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, sizeof fs->win);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	334c      	adds	r3, #76	; 0x4c
 8001754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fe57 	bl	800140e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	334c      	adds	r3, #76	; 0x4c
 8001764:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8001768:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff fd5f 	bl	8001230 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	334c      	adds	r3, #76	; 0x4c
 8001776:	4921      	ldr	r1, [pc, #132]	; (80017fc <sync_fs+0xd4>)
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fd74 	bl	8001266 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	334c      	adds	r3, #76	; 0x4c
 8001782:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8001786:	491e      	ldr	r1, [pc, #120]	; (8001800 <sync_fs+0xd8>)
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fd6c 	bl	8001266 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	334c      	adds	r3, #76	; 0x4c
 8001792:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	4619      	mov	r1, r3
 800179c:	4610      	mov	r0, r2
 800179e:	f7ff fd62 	bl	8001266 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	334c      	adds	r3, #76	; 0x4c
 80017a6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	4619      	mov	r1, r3
 80017b0:	4610      	mov	r0, r2
 80017b2:	f7ff fd58 	bl	8001266 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	649a      	str	r2, [r3, #72]	; 0x48
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	7858      	ldrb	r0, [r3, #1]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80017ce:	2301      	movs	r3, #1
 80017d0:	f7ff f9ea 	bl	8000ba8 <disk_write>
			fs->fsi_flag = 0;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	785b      	ldrb	r3, [r3, #1]
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fa64 	bl	8000cb0 <disk_ioctl>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <sync_fs+0xca>
 80017ee:	2301      	movs	r3, #1
 80017f0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	41615252 	.word	0x41615252
 8001800:	61417272 	.word	0x61417272

08001804 <clst2sect>:

static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	3b02      	subs	r3, #2
 8001812:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001818:	3b02      	subs	r3, #2
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d301      	bcc.n	8001824 <clst2sect+0x20>
 8001820:	2300      	movs	r3, #0
 8001822:	e008      	b.n	8001836 <clst2sect+0x32>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	895b      	ldrh	r3, [r3, #10]
 800182c:	4619      	mov	r1, r3
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	fb03 f301 	mul.w	r3, r3, r1
 8001834:	4413      	add	r3, r2
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b089      	sub	sp, #36	; 0x24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d904      	bls.n	8001864 <get_fat+0x20>
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d302      	bcc.n	800186a <get_fat+0x26>
		val = 1;	/* Internal error */
 8001864:	2301      	movs	r3, #1
 8001866:	61fb      	str	r3, [r7, #28]
 8001868:	e10b      	b.n	8001a82 <get_fat+0x23e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800186a:	f04f 33ff 	mov.w	r3, #4294967295
 800186e:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	3b01      	subs	r3, #1
 8001876:	2b03      	cmp	r3, #3
 8001878:	f200 80f7 	bhi.w	8001a6a <get_fat+0x226>
 800187c:	a201      	add	r2, pc, #4	; (adr r2, 8001884 <get_fat+0x40>)
 800187e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001882:	bf00      	nop
 8001884:	08001895 	.word	0x08001895
 8001888:	0800191d 	.word	0x0800191d
 800188c:	08001953 	.word	0x08001953
 8001890:	0800198d 	.word	0x0800198d
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	60fb      	str	r3, [r7, #12]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	085b      	lsrs	r3, r3, #1
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	4413      	add	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	0a5b      	lsrs	r3, r3, #9
 80018aa:	4413      	add	r3, r2
 80018ac:	4619      	mov	r1, r3
 80018ae:	69b8      	ldr	r0, [r7, #24]
 80018b0:	f7ff ff0c 	bl	80016cc <move_window>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f040 80da 	bne.w	8001a70 <get_fat+0x22c>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	60fa      	str	r2, [r7, #12]
 80018c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4413      	add	r3, r2
 80018ca:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80018ce:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	0a5b      	lsrs	r3, r3, #9
 80018d8:	4413      	add	r3, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	69b8      	ldr	r0, [r7, #24]
 80018de:	f7ff fef5 	bl	80016cc <move_window>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f040 80c5 	bne.w	8001a74 <get_fat+0x230>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4413      	add	r3, r2
 80018f4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80018f8:	021b      	lsls	r3, r3, #8
 80018fa:	461a      	mov	r2, r3
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	4313      	orrs	r3, r2
 8001900:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	d002      	beq.n	8001912 <get_fat+0xce>
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	091b      	lsrs	r3, r3, #4
 8001910:	e002      	b.n	8001918 <get_fat+0xd4>
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001918:	61fb      	str	r3, [r7, #28]
			break;
 800191a:	e0b2      	b.n	8001a82 <get_fat+0x23e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	0a1b      	lsrs	r3, r3, #8
 8001924:	4413      	add	r3, r2
 8001926:	4619      	mov	r1, r3
 8001928:	69b8      	ldr	r0, [r7, #24]
 800192a:	f7ff fecf 	bl	80016cc <move_window>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	f040 80a1 	bne.w	8001a78 <get_fat+0x234>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8001944:	4413      	add	r3, r2
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff fb7a 	bl	8001040 <ld_word>
 800194c:	4603      	mov	r3, r0
 800194e:	61fb      	str	r3, [r7, #28]
			break;
 8001950:	e097      	b.n	8001a82 <get_fat+0x23e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	09db      	lsrs	r3, r3, #7
 800195a:	4413      	add	r3, r2
 800195c:	4619      	mov	r1, r3
 800195e:	69b8      	ldr	r0, [r7, #24]
 8001960:	f7ff feb4 	bl	80016cc <move_window>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	f040 8088 	bne.w	8001a7c <get_fat+0x238>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800197a:	4413      	add	r3, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fb77 	bl	8001070 <ld_dword>
 8001982:	4603      	mov	r3, r0
 8001984:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001988:	61fb      	str	r3, [r7, #28]
			break;
 800198a:	e07a      	b.n	8001a82 <get_fat+0x23e>
#if FF_FS_EXFAT
		case FS_EXFAT :
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001992:	4323      	orrs	r3, r4
 8001994:	d003      	beq.n	800199e <get_fat+0x15a>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d103      	bne.n	80019a6 <get_fat+0x162>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	79db      	ldrb	r3, [r3, #7]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d161      	bne.n	8001a6a <get_fat+0x226>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80019b6:	f113 31ff 	adds.w	r1, r3, #4294967295
 80019ba:	f144 32ff 	adc.w	r2, r4, #4294967295
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	f04f 0400 	mov.w	r4, #0
 80019c6:	0a4b      	lsrs	r3, r1, #9
 80019c8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80019cc:	0a54      	lsrs	r4, r2, #9
 80019ce:	461a      	mov	r2, r3
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	895b      	ldrh	r3, [r3, #10]
 80019d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d8:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	79db      	ldrb	r3, [r3, #7]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d10e      	bne.n	8001a00 <get_fat+0x1bc>
 80019e2:	697a      	ldr	r2, [r7, #20]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d80a      	bhi.n	8001a00 <get_fat+0x1bc>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d002      	beq.n	80019f8 <get_fat+0x1b4>
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	3301      	adds	r3, #1
 80019f6:	e001      	b.n	80019fc <get_fat+0x1b8>
 80019f8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80019fc:	61fb      	str	r3, [r7, #28]
					break;
 80019fe:	e040      	b.n	8001a82 <get_fat+0x23e>
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	79db      	ldrb	r3, [r3, #7]
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	d108      	bne.n	8001a1a <get_fat+0x1d6>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d203      	bcs.n	8001a1a <get_fat+0x1d6>
					val = clst + 1; 	/* Generate the value */
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	3301      	adds	r3, #1
 8001a16:	61fb      	str	r3, [r7, #28]
					break;
 8001a18:	e033      	b.n	8001a82 <get_fat+0x23e>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	79db      	ldrb	r3, [r3, #7]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d023      	beq.n	8001a6a <get_fat+0x226>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <get_fat+0x1ee>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8001a2a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001a2e:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8001a30:	e027      	b.n	8001a82 <get_fat+0x23e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	09db      	lsrs	r3, r3, #7
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	69b8      	ldr	r0, [r7, #24]
 8001a40:	f7ff fe44 	bl	80016cc <move_window>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d11a      	bne.n	8001a80 <get_fat+0x23c>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001a58:	4413      	add	r3, r2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fb08 	bl	8001070 <ld_dword>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a66:	61fb      	str	r3, [r7, #28]
					break;
 8001a68:	e00b      	b.n	8001a82 <get_fat+0x23e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	61fb      	str	r3, [r7, #28]
 8001a6e:	e008      	b.n	8001a82 <get_fat+0x23e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001a70:	bf00      	nop
 8001a72:	e006      	b.n	8001a82 <get_fat+0x23e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001a74:	bf00      	nop
 8001a76:	e004      	b.n	8001a82 <get_fat+0x23e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8001a78:	bf00      	nop
 8001a7a:	e002      	b.n	8001a82 <get_fat+0x23e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001a7c:	bf00      	nop
 8001a7e:	e000      	b.n	8001a82 <get_fat+0x23e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001a80:	bf00      	nop
		}
	}

	return val;
 8001a82:	69fb      	ldr	r3, [r7, #28]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3724      	adds	r7, #36	; 0x24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd90      	pop	{r4, r7, pc}

08001a8c <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	f240 80e2 	bls.w	8001c68 <put_fat+0x1dc>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	f080 80dc 	bcs.w	8001c68 <put_fat+0x1dc>
		switch (fs->fs_type) {
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	f200 80d6 	bhi.w	8001c68 <put_fat+0x1dc>
 8001abc:	a201      	add	r2, pc, #4	; (adr r2, 8001ac4 <put_fat+0x38>)
 8001abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac2:	bf00      	nop
 8001ac4:	08001ad5 	.word	0x08001ad5
 8001ac8:	08001bb1 	.word	0x08001bb1
 8001acc:	08001bf1 	.word	0x08001bf1
 8001ad0:	08001bf1 	.word	0x08001bf1
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	61bb      	str	r3, [r7, #24]
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	085b      	lsrs	r3, r3, #1
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4413      	add	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	0a5b      	lsrs	r3, r3, #9
 8001aea:	4413      	add	r3, r2
 8001aec:	4619      	mov	r1, r3
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f7ff fdec 	bl	80016cc <move_window>
 8001af4:	4603      	mov	r3, r0
 8001af6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001af8:	7ffb      	ldrb	r3, [r7, #31]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f040 80ad 	bne.w	8001c5a <put_fat+0x1ce>
			p = fs->win + bc++ % SS(fs);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	1c59      	adds	r1, r3, #1
 8001b0a:	61b9      	str	r1, [r7, #24]
 8001b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b10:	4413      	add	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00d      	beq.n	8001b3a <put_fat+0xae>
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	b25b      	sxtb	r3, r3
 8001b24:	f003 030f 	and.w	r3, r3, #15
 8001b28:	b25a      	sxtb	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	b25b      	sxtb	r3, r3
 8001b32:	4313      	orrs	r3, r2
 8001b34:	b25b      	sxtb	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	e001      	b.n	8001b3e <put_fat+0xb2>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2201      	movs	r2, #1
 8001b46:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	0a5b      	lsrs	r3, r3, #9
 8001b50:	4413      	add	r3, r2
 8001b52:	4619      	mov	r1, r3
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f7ff fdb9 	bl	80016cc <move_window>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001b5e:	7ffb      	ldrb	r3, [r7, #31]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d17c      	bne.n	8001c5e <put_fat+0x1d2>
			p = fs->win + bc % SS(fs);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b70:	4413      	add	r3, r2
 8001b72:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <put_fat+0xfa>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	e00e      	b.n	8001ba4 <put_fat+0x118>
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	b25b      	sxtb	r3, r3
 8001b8c:	f023 030f 	bic.w	r3, r3, #15
 8001b90:	b25a      	sxtb	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	0a1b      	lsrs	r3, r3, #8
 8001b96:	b25b      	sxtb	r3, r3
 8001b98:	f003 030f 	and.w	r3, r3, #15
 8001b9c:	b25b      	sxtb	r3, r3
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	b25b      	sxtb	r3, r3
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2201      	movs	r2, #1
 8001bac:	70da      	strb	r2, [r3, #3]
			break;
 8001bae:	e05b      	b.n	8001c68 <put_fat+0x1dc>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	4413      	add	r3, r2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f7ff fd85 	bl	80016cc <move_window>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001bc6:	7ffb      	ldrb	r3, [r7, #31]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d14a      	bne.n	8001c62 <put_fat+0x1d6>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8001bda:	4413      	add	r3, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	b292      	uxth	r2, r2
 8001be0:	4611      	mov	r1, r2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fb24 	bl	8001230 <st_word>
			fs->wflag = 1;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2201      	movs	r2, #1
 8001bec:	70da      	strb	r2, [r3, #3]
			break;
 8001bee:	e03b      	b.n	8001c68 <put_fat+0x1dc>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	09db      	lsrs	r3, r3, #7
 8001bf8:	4413      	add	r3, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f7ff fd65 	bl	80016cc <move_window>
 8001c02:	4603      	mov	r3, r0
 8001c04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001c06:	7ffb      	ldrb	r3, [r7, #31]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d12c      	bne.n	8001c66 <put_fat+0x1da>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d012      	beq.n	8001c3a <put_fat+0x1ae>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001c28:	4413      	add	r3, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fa20 	bl	8001070 <ld_dword>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001c36:	4323      	orrs	r3, r4
 8001c38:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001c48:	4413      	add	r3, r2
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fb0a 	bl	8001266 <st_dword>
			fs->wflag = 1;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2201      	movs	r2, #1
 8001c56:	70da      	strb	r2, [r3, #3]
			break;
 8001c58:	e006      	b.n	8001c68 <put_fat+0x1dc>
			if (res != FR_OK) break;
 8001c5a:	bf00      	nop
 8001c5c:	e004      	b.n	8001c68 <put_fat+0x1dc>
			if (res != FR_OK) break;
 8001c5e:	bf00      	nop
 8001c60:	e002      	b.n	8001c68 <put_fat+0x1dc>
			if (res != FR_OK) break;
 8001c62:	bf00      	nop
 8001c64:	e000      	b.n	8001c68 <put_fat+0x1dc>
			if (res != FR_OK) break;
 8001c66:	bf00      	nop
		}
	}
	return res;
 8001c68:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3724      	adds	r7, #36	; 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd90      	pop	{r4, r7, pc}
 8001c72:	bf00      	nop

08001c74 <find_bitmap>:
static DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	; 0x28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	3b02      	subs	r3, #2
 8001c84:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8a:	3b02      	subs	r3, #2
 8001c8c:	68ba      	ldr	r2, [r7, #8]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d301      	bcc.n	8001c96 <find_bitmap+0x22>
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	61fb      	str	r3, [r7, #28]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	61bb      	str	r3, [r7, #24]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	0b1b      	lsrs	r3, r3, #12
 8001caa:	4413      	add	r3, r2
 8001cac:	4619      	mov	r1, r3
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f7ff fd0c 	bl	80016cc <move_window>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d002      	beq.n	8001cc0 <find_bitmap+0x4c>
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295
 8001cbe:	e051      	b.n	8001d64 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	08db      	lsrs	r3, r3, #3
 8001cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cc8:	623b      	str	r3, [r7, #32]
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
 8001cde:	4413      	add	r3, r2
 8001ce0:	334c      	adds	r3, #76	; 0x4c
 8001ce2:	781a      	ldrb	r2, [r3, #0]
 8001ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ce8:	4013      	ands	r3, r2
 8001cea:	74fb      	strb	r3, [r7, #19]
 8001cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	61fb      	str	r3, [r7, #28]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d00:	3b02      	subs	r3, #2
 8001d02:	69fa      	ldr	r2, [r7, #28]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d307      	bcc.n	8001d18 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61fb      	str	r3, [r7, #28]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d16:	623b      	str	r3, [r7, #32]
				}
				if (bv == 0) {	/* Is it a free cluster? */
 8001d18:	7cfb      	ldrb	r3, [r7, #19]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d109      	bne.n	8001d32 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	3301      	adds	r3, #1
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d106      	bne.n	8001d3a <find_bitmap+0xc6>
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	3302      	adds	r3, #2
 8001d30:	e018      	b.n	8001d64 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	61bb      	str	r3, [r7, #24]
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d101      	bne.n	8001d46 <find_bitmap+0xd2>
 8001d42:	2300      	movs	r3, #0
 8001d44:	e00e      	b.n	8001d64 <find_bitmap+0xf0>
			} while (bm != 0);
 8001d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1c5      	bne.n	8001cda <find_bitmap+0x66>
			bm = 1;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	3301      	adds	r3, #1
 8001d58:	623b      	str	r3, [r7, #32]
 8001d5a:	6a3b      	ldr	r3, [r7, #32]
 8001d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d60:	d3bb      	bcc.n	8001cda <find_bitmap+0x66>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 8001d62:	e79e      	b.n	8001ca2 <find_bitmap+0x2e>
	}
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3728      	adds	r7, #40	; 0x28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <change_bitmap>:
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;


	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	3b02      	subs	r3, #2
 8001d7e:	60bb      	str	r3, [r7, #8]
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	0b1b      	lsrs	r3, r3, #12
 8001d88:	4413      	add	r3, r2
 8001d8a:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	08db      	lsrs	r3, r3, #3
 8001d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d94:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	1c5a      	adds	r2, r3, #1
 8001da8:	617a      	str	r2, [r7, #20]
 8001daa:	4619      	mov	r1, r3
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f7ff fc8d 	bl	80016cc <move_window>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <change_bitmap+0x50>
 8001db8:	2301      	movs	r3, #1
 8001dba:	e03d      	b.n	8001e38 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	334c      	adds	r3, #76	; 0x4c
 8001dc4:	781a      	ldrb	r2, [r3, #0]
 8001dc6:	7ffb      	ldrb	r3, [r7, #31]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	bf14      	ite	ne
 8001dd0:	2301      	movne	r3, #1
 8001dd2:	2300      	moveq	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d101      	bne.n	8001de2 <change_bitmap+0x76>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e02a      	b.n	8001e38 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	4413      	add	r3, r2
 8001de8:	334c      	adds	r3, #76	; 0x4c
 8001dea:	781a      	ldrb	r2, [r3, #0]
 8001dec:	7ffb      	ldrb	r3, [r7, #31]
 8001dee:	4053      	eors	r3, r2
 8001df0:	b2d9      	uxtb	r1, r3
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	4413      	add	r3, r2
 8001df8:	334c      	adds	r3, #76	; 0x4c
 8001dfa:	460a      	mov	r2, r1
 8001dfc:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2201      	movs	r2, #1
 8001e02:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <change_bitmap+0xa8>
 8001e10:	2300      	movs	r3, #0
 8001e12:	e011      	b.n	8001e38 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 8001e14:	7ffb      	ldrb	r3, [r7, #31]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	77fb      	strb	r3, [r7, #31]
 8001e1a:	7ffb      	ldrb	r3, [r7, #31]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1cd      	bne.n	8001dbc <change_bitmap+0x50>
			bm = 1;
 8001e20:	2301      	movs	r3, #1
 8001e22:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	3301      	adds	r3, #1
 8001e28:	61bb      	str	r3, [r7, #24]
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e30:	d3c4      	bcc.n	8001dbc <change_bitmap+0x50>
		i = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8001e36:	e7b5      	b.n	8001da4 <change_bitmap+0x38>
	}
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3720      	adds	r7, #32
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <fill_first_frag>:
/*---------------------------------------------*/

static FRESULT fill_first_frag (
	FFOBJID* obj	/* Pointer to the corresponding object */
)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;


	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	79db      	ldrb	r3, [r3, #7]
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d121      	bne.n	8001e94 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	e014      	b.n	8001e88 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	3301      	adds	r3, #1
 8001e66:	461a      	mov	r2, r3
 8001e68:	6979      	ldr	r1, [r7, #20]
 8001e6a:	f7ff fe0f 	bl	8001a8c <put_fat>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <fill_first_frag+0x3c>
 8001e78:	7bfb      	ldrb	r3, [r7, #15]
 8001e7a:	e00c      	b.n	8001e96 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1e7      	bne.n	8001e5e <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <fill_last_frag>:
static FRESULT fill_last_frag (
	FFOBJID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,		/* Last cluster of the fragment */
	DWORD term		/* Value to set the last FAT entry */
)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b086      	sub	sp, #24
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
	FRESULT res;


	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 8001eaa:	e020      	b.n	8001eee <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	68ba      	ldr	r2, [r7, #8]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	1c59      	adds	r1, r3, #1
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d905      	bls.n	8001ece <fill_last_frag+0x30>
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	68ba      	ldr	r2, [r7, #8]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	3302      	adds	r3, #2
 8001ecc:	e000      	b.n	8001ed0 <fill_last_frag+0x32>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	f7ff fddb 	bl	8001a8c <put_fat>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8001eda:	7dfb      	ldrb	r3, [r7, #23]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <fill_last_frag+0x46>
 8001ee0:	7dfb      	ldrb	r3, [r7, #23]
 8001ee2:	e009      	b.n	8001ef8 <fill_last_frag+0x5a>
		obj->n_frag--;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	1e5a      	subs	r2, r3, #1
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	69db      	ldr	r3, [r3, #28]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1da      	bne.n	8001eac <fill_last_frag+0xe>
	}
	return FR_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	; 0x28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	61bb      	str	r3, [r7, #24]
#if FF_FS_EXFAT || FF_USE_TRIM
	DWORD scl = clst, ecl = clst;
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	623b      	str	r3, [r7, #32]
#endif
#if FF_USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d904      	bls.n	8001f2e <remove_chain+0x2e>
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d301      	bcc.n	8001f32 <remove_chain+0x32>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e0c4      	b.n	80020bc <remove_chain+0x1bc>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d014      	beq.n	8001f62 <remove_chain+0x62>
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d103      	bne.n	8001f48 <remove_chain+0x48>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	79db      	ldrb	r3, [r3, #7]
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d00c      	beq.n	8001f62 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	69b8      	ldr	r0, [r7, #24]
 8001f50:	f7ff fd9c 	bl	8001a8c <put_fat>
 8001f54:	4603      	mov	r3, r0
 8001f56:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8001f58:	7ffb      	ldrb	r3, [r7, #31]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <remove_chain+0x62>
 8001f5e:	7ffb      	ldrb	r3, [r7, #31]
 8001f60:	e0ac      	b.n	80020bc <remove_chain+0x1bc>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8001f62:	68b9      	ldr	r1, [r7, #8]
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f7ff fc6d 	bl	8001844 <get_fat>
 8001f6a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d055      	beq.n	800201e <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <remove_chain+0x7c>
 8001f78:	2302      	movs	r3, #2
 8001f7a:	e09f      	b.n	80020bc <remove_chain+0x1bc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f82:	d101      	bne.n	8001f88 <remove_chain+0x88>
 8001f84:	2301      	movs	r3, #1
 8001f86:	e099      	b.n	80020bc <remove_chain+0x1bc>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d00b      	beq.n	8001fa8 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8001f90:	2200      	movs	r2, #0
 8001f92:	68b9      	ldr	r1, [r7, #8]
 8001f94:	69b8      	ldr	r0, [r7, #24]
 8001f96:	f7ff fd79 	bl	8001a8c <put_fat>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8001f9e:	7ffb      	ldrb	r3, [r7, #31]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <remove_chain+0xa8>
 8001fa4:	7ffb      	ldrb	r3, [r7, #31]
 8001fa6:	e089      	b.n	80020bc <remove_chain+0x1bc>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	699a      	ldr	r2, [r3, #24]
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb0:	3b02      	subs	r3, #2
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d20b      	bcs.n	8001fce <remove_chain+0xce>
			fs->free_clst++;
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	791b      	ldrb	r3, [r3, #4]
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	711a      	strb	r2, [r3, #4]
		}
#if FF_FS_EXFAT || FF_USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d102      	bne.n	8001fde <remove_chain+0xde>
			ecl = nxt;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	623b      	str	r3, [r7, #32]
 8001fdc:	e017      	b.n	800200e <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d10f      	bne.n	8002006 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8001fe6:	6a3a      	ldr	r2, [r7, #32]
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	2300      	movs	r3, #0
 8001ff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ff2:	69b8      	ldr	r0, [r7, #24]
 8001ff4:	f7ff feba 	bl	8001d6c <change_bitmap>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8001ffc:	7ffb      	ldrb	r3, [r7, #31]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <remove_chain+0x106>
 8002002:	7ffb      	ldrb	r3, [r7, #31]
 8002004:	e05a      	b.n	80020bc <remove_chain+0x1bc>
#if FF_USE_TRIM
			rt[0] = clst2sect(fs, scl);					/* Start of data area freed */
			rt[1] = clst2sect(fs, ecl) + fs->csize - 1;	/* End of data area freed */
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform device the data in the block is no longer needed */
#endif
			scl = ecl = nxt;
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	623b      	str	r3, [r7, #32]
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002016:	68ba      	ldr	r2, [r7, #8]
 8002018:	429a      	cmp	r2, r3
 800201a:	d3a2      	bcc.n	8001f62 <remove_chain+0x62>
 800201c:	e000      	b.n	8002020 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800201e:	bf00      	nop

#if FF_FS_EXFAT
	/* Some post processes for chain status */
	if (fs->fs_type == FS_EXFAT) {
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b04      	cmp	r3, #4
 8002026:	d148      	bne.n	80020ba <remove_chain+0x1ba>
		if (pclst == 0) {	/* Has the entire chain been removed? */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d103      	bne.n	8002036 <remove_chain+0x136>
			obj->stat = 0;		/* Change the chain status 'initial' */
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	71da      	strb	r2, [r3, #7]
 8002034:	e041      	b.n	80020ba <remove_chain+0x1ba>
		} else {
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	79db      	ldrb	r3, [r3, #7]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d129      	bne.n	8002092 <remove_chain+0x192>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 8002044:	e017      	b.n	8002076 <remove_chain+0x176>
					nxt = get_fat(obj, clst);
 8002046:	68b9      	ldr	r1, [r7, #8]
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	f7ff fbfb 	bl	8001844 <get_fat>
 800204e:	6178      	str	r0, [r7, #20]
					if (nxt < 2) return FR_INT_ERR;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d801      	bhi.n	800205a <remove_chain+0x15a>
 8002056:	2302      	movs	r3, #2
 8002058:	e030      	b.n	80020bc <remove_chain+0x1bc>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002060:	d101      	bne.n	8002066 <remove_chain+0x166>
 8002062:	2301      	movs	r3, #1
 8002064:	e02a      	b.n	80020bc <remove_chain+0x1bc>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	3301      	adds	r3, #1
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	429a      	cmp	r2, r3
 800206e:	d107      	bne.n	8002080 <remove_chain+0x180>
					clst++;
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	3301      	adds	r3, #1
 8002074:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	429a      	cmp	r2, r3
 800207c:	d1e3      	bne.n	8002046 <remove_chain+0x146>
 800207e:	e000      	b.n	8002082 <remove_chain+0x182>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 8002080:	bf00      	nop
				}
				if (clst == pclst) {	/* Has the chain got contiguous again? */
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	429a      	cmp	r2, r3
 8002088:	d117      	bne.n	80020ba <remove_chain+0x1ba>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2202      	movs	r2, #2
 800208e:	71da      	strb	r2, [r3, #7]
 8002090:	e013      	b.n	80020ba <remove_chain+0x1ba>
				}
			} else {
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	79db      	ldrb	r3, [r3, #7]
 8002096:	2b03      	cmp	r3, #3
 8002098:	d10f      	bne.n	80020ba <remove_chain+0x1ba>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d30a      	bcc.n	80020ba <remove_chain+0x1ba>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	4413      	add	r3, r2
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d802      	bhi.n	80020ba <remove_chain+0x1ba>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2202      	movs	r2, #2
 80020b8:	71da      	strb	r2, [r3, #7]
				}
			}
		}
	}
#endif
	return FR_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3728      	adds	r7, #40	; 0x28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10d      	bne.n	80020f6 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d004      	beq.n	80020f0 <create_chain+0x2c>
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d31b      	bcc.n	8002128 <create_chain+0x64>
 80020f0:	2301      	movs	r3, #1
 80020f2:	61bb      	str	r3, [r7, #24]
 80020f4:	e018      	b.n	8002128 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80020f6:	6839      	ldr	r1, [r7, #0]
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff fba3 	bl	8001844 <get_fat>
 80020fe:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d801      	bhi.n	800210a <create_chain+0x46>
 8002106:	2301      	movs	r3, #1
 8002108:	e113      	b.n	8002332 <create_chain+0x26e>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002110:	d101      	bne.n	8002116 <create_chain+0x52>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	e10d      	b.n	8002332 <create_chain+0x26e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	429a      	cmp	r2, r3
 800211e:	d201      	bcs.n	8002124 <create_chain+0x60>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	e106      	b.n	8002332 <create_chain+0x26e>
		scl = clst;							/* Cluster to start to find */
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <create_chain+0x70>
 8002130:	2300      	movs	r3, #0
 8002132:	e0fe      	b.n	8002332 <create_chain+0x26e>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b04      	cmp	r3, #4
 800213a:	d165      	bne.n	8002208 <create_chain+0x144>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800213c:	2201      	movs	r2, #1
 800213e:	69b9      	ldr	r1, [r7, #24]
 8002140:	6938      	ldr	r0, [r7, #16]
 8002142:	f7ff fd97 	bl	8001c74 <find_bitmap>
 8002146:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <create_chain+0x92>
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002154:	d101      	bne.n	800215a <create_chain+0x96>
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	e0eb      	b.n	8002332 <create_chain+0x26e>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800215a:	2301      	movs	r3, #1
 800215c:	2201      	movs	r2, #1
 800215e:	69f9      	ldr	r1, [r7, #28]
 8002160:	6938      	ldr	r0, [r7, #16]
 8002162:	f7ff fe03 	bl	8001d6c <change_bitmap>
 8002166:	4603      	mov	r3, r0
 8002168:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800216a:	7dfb      	ldrb	r3, [r7, #23]
 800216c:	2b02      	cmp	r3, #2
 800216e:	d101      	bne.n	8002174 <create_chain+0xb0>
 8002170:	2301      	movs	r3, #1
 8002172:	e0de      	b.n	8002332 <create_chain+0x26e>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8002174:	7dfb      	ldrb	r3, [r7, #23]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d102      	bne.n	8002180 <create_chain+0xbc>
 800217a:	f04f 33ff 	mov.w	r3, #4294967295
 800217e:	e0d8      	b.n	8002332 <create_chain+0x26e>
		if (clst == 0) {							/* Is it a new chain? */
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d103      	bne.n	800218e <create_chain+0xca>
			obj->stat = 2;							/* Set status 'contiguous' */
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2202      	movs	r2, #2
 800218a:	71da      	strb	r2, [r3, #7]
 800218c:	e011      	b.n	80021b2 <create_chain+0xee>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	79db      	ldrb	r3, [r3, #7]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d10d      	bne.n	80021b2 <create_chain+0xee>
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	3301      	adds	r3, #1
 800219a:	69fa      	ldr	r2, [r7, #28]
 800219c:	429a      	cmp	r2, r3
 800219e:	d008      	beq.n	80021b2 <create_chain+0xee>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	1ad2      	subs	r2, r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2203      	movs	r2, #3
 80021b0:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	79db      	ldrb	r3, [r3, #7]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	f000 8098 	beq.w	80022ec <create_chain+0x228>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	3301      	adds	r3, #1
 80021c0:	69fa      	ldr	r2, [r7, #28]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d10b      	bne.n	80021de <create_chain+0x11a>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <create_chain+0x112>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	3301      	adds	r3, #1
 80021d4:	e000      	b.n	80021d8 <create_chain+0x114>
 80021d6:	2302      	movs	r3, #2
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	61d3      	str	r3, [r2, #28]
 80021dc:	e086      	b.n	80022ec <create_chain+0x228>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d102      	bne.n	80021ec <create_chain+0x128>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 80021ec:	69fa      	ldr	r2, [r7, #28]
 80021ee:	6839      	ldr	r1, [r7, #0]
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff fe54 	bl	8001e9e <fill_last_frag>
 80021f6:	4603      	mov	r3, r0
 80021f8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 80021fa:	7dfb      	ldrb	r3, [r7, #23]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d175      	bne.n	80022ec <create_chain+0x228>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	61da      	str	r2, [r3, #28]
 8002206:	e071      	b.n	80022ec <create_chain+0x228>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d129      	bne.n	8002268 <create_chain+0x1a4>
			ncl = scl + 1;						/* Test if next cluster is free */
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	3301      	adds	r3, #1
 8002218:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	429a      	cmp	r2, r3
 8002222:	d301      	bcc.n	8002228 <create_chain+0x164>
 8002224:	2302      	movs	r3, #2
 8002226:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8002228:	69f9      	ldr	r1, [r7, #28]
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff fb0a 	bl	8001844 <get_fat>
 8002230:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d003      	beq.n	8002240 <create_chain+0x17c>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800223e:	d101      	bne.n	8002244 <create_chain+0x180>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	e076      	b.n	8002332 <create_chain+0x26e>
			if (cs != 0) {						/* Not free? */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00e      	beq.n	8002268 <create_chain+0x1a4>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d906      	bls.n	8002264 <create_chain+0x1a0>
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	429a      	cmp	r2, r3
 800225e:	d201      	bcs.n	8002264 <create_chain+0x1a0>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d129      	bne.n	80022c2 <create_chain+0x1fe>
			ncl = scl;	/* Start cluster */
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	3301      	adds	r3, #1
 8002276:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227c:	69fa      	ldr	r2, [r7, #28]
 800227e:	429a      	cmp	r2, r3
 8002280:	d307      	bcc.n	8002292 <create_chain+0x1ce>
					ncl = 2;
 8002282:	2302      	movs	r3, #2
 8002284:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8002286:	69fa      	ldr	r2, [r7, #28]
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	429a      	cmp	r2, r3
 800228c:	d901      	bls.n	8002292 <create_chain+0x1ce>
 800228e:	2300      	movs	r3, #0
 8002290:	e04f      	b.n	8002332 <create_chain+0x26e>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8002292:	69f9      	ldr	r1, [r7, #28]
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff fad5 	bl	8001844 <get_fat>
 800229a:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00e      	beq.n	80022c0 <create_chain+0x1fc>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d003      	beq.n	80022b0 <create_chain+0x1ec>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ae:	d101      	bne.n	80022b4 <create_chain+0x1f0>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	e03e      	b.n	8002332 <create_chain+0x26e>
				if (ncl == scl) return 0;		/* No free cluster found? */
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d1da      	bne.n	8002272 <create_chain+0x1ae>
 80022bc:	2300      	movs	r3, #0
 80022be:	e038      	b.n	8002332 <create_chain+0x26e>
				if (cs == 0) break;				/* Found a free cluster? */
 80022c0:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 80022c2:	f04f 32ff 	mov.w	r2, #4294967295
 80022c6:	69f9      	ldr	r1, [r7, #28]
 80022c8:	6938      	ldr	r0, [r7, #16]
 80022ca:	f7ff fbdf 	bl	8001a8c <put_fat>
 80022ce:	4603      	mov	r3, r0
 80022d0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80022d2:	7dfb      	ldrb	r3, [r7, #23]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d109      	bne.n	80022ec <create_chain+0x228>
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d006      	beq.n	80022ec <create_chain+0x228>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 80022de:	69fa      	ldr	r2, [r7, #28]
 80022e0:	6839      	ldr	r1, [r7, #0]
 80022e2:	6938      	ldr	r0, [r7, #16]
 80022e4:	f7ff fbd2 	bl	8001a8c <put_fat>
 80022e8:	4603      	mov	r3, r0
 80022ea:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80022ec:	7dfb      	ldrb	r3, [r7, #23]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d116      	bne.n	8002320 <create_chain+0x25c>
		fs->last_clst = ncl;
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	69fa      	ldr	r2, [r7, #28]
 80022f6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	699a      	ldr	r2, [r3, #24]
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	3b02      	subs	r3, #2
 8002302:	429a      	cmp	r2, r3
 8002304:	d804      	bhi.n	8002310 <create_chain+0x24c>
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	1e5a      	subs	r2, r3, #1
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	791b      	ldrb	r3, [r3, #4]
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	b2da      	uxtb	r2, r3
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	711a      	strb	r2, [r3, #4]
 800231e:	e007      	b.n	8002330 <create_chain+0x26c>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8002320:	7dfb      	ldrb	r3, [r7, #23]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d102      	bne.n	800232c <create_chain+0x268>
 8002326:	f04f 33ff 	mov.w	r3, #4294967295
 800232a:	e000      	b.n	800232e <create_chain+0x26a>
 800232c:	2301      	movs	r3, #1
 800232e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8002330:	69fb      	ldr	r3, [r7, #28]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3720      	adds	r7, #32
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	6039      	str	r1, [r7, #0]
	DWORD sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff f985 	bl	8001654 <sync_window>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <dir_clear+0x1a>
 8002350:	2301      	movs	r3, #1
 8002352:	e07d      	b.n	8002450 <dir_clear+0x116>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8002354:	6839      	ldr	r1, [r7, #0]
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff fa54 	bl	8001804 <clst2sect>
 800235c:	60b8      	str	r0, [r7, #8]
	fs->winsect = sect;				/* Set window to top of the cluster */
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	649a      	str	r2, [r3, #72]	; 0x48
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	334c      	adds	r3, #76	; 0x4c
 8002368:	f44f 7200 	mov.w	r2, #512	; 0x200
 800236c:	2100      	movs	r1, #0
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff f84d 	bl	800140e <mem_set>
#if FF_USE_LFN == 3		/* Quick table clear by using multi-secter write */
	/* Allocate a temporary buffer */
	for (szb = ((DWORD)fs->csize * SS(fs) >= MAX_MALLOC) ? MAX_MALLOC : fs->csize * SS(fs), ibuf = 0; szb > SS(fs) && (ibuf = ff_memalloc(szb)) == 0; szb /= 2) ;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	895b      	ldrh	r3, [r3, #10]
 8002378:	025b      	lsls	r3, r3, #9
 800237a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800237e:	d203      	bcs.n	8002388 <dir_clear+0x4e>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	895b      	ldrh	r3, [r3, #10]
 8002384:	025b      	lsls	r3, r3, #9
 8002386:	e001      	b.n	800238c <dir_clear+0x52>
 8002388:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	e002      	b.n	800239a <dir_clear+0x60>
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	085b      	lsrs	r3, r3, #1
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023a0:	d906      	bls.n	80023b0 <dir_clear+0x76>
 80023a2:	6938      	ldr	r0, [r7, #16]
 80023a4:	f003 fe64 	bl	8006070 <ff_memalloc>
 80023a8:	60f8      	str	r0, [r7, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0f1      	beq.n	8002394 <dir_clear+0x5a>
	if (szb > SS(fs)) {		/* Buffer allocated? */
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023b6:	d924      	bls.n	8002402 <dir_clear+0xc8>
		mem_set(ibuf, 0, szb);
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	2100      	movs	r1, #0
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f7ff f826 	bl	800140e <mem_set>
		szb /= SS(fs);		/* Bytes -> Sectors */
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	0a5b      	lsrs	r3, r3, #9
 80023c6:	613b      	str	r3, [r7, #16]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	e003      	b.n	80023d6 <dir_clear+0x9c>
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4413      	add	r3, r2
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	895b      	ldrh	r3, [r3, #10]
 80023da:	461a      	mov	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	4293      	cmp	r3, r2
 80023e0:	d20b      	bcs.n	80023fa <dir_clear+0xc0>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	7858      	ldrb	r0, [r3, #1]
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	441a      	add	r2, r3
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	68f9      	ldr	r1, [r7, #12]
 80023f0:	f7fe fbda 	bl	8000ba8 <disk_write>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0e9      	beq.n	80023ce <dir_clear+0x94>
		ff_memfree(ibuf);
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f003 fe44 	bl	8006088 <ff_memfree>
 8002400:	e01d      	b.n	800243e <dir_clear+0x104>
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	334c      	adds	r3, #76	; 0x4c
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	2301      	movs	r3, #1
 800240a:	613b      	str	r3, [r7, #16]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	e003      	b.n	800241a <dir_clear+0xe0>
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4413      	add	r3, r2
 8002418:	617b      	str	r3, [r7, #20]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	895b      	ldrh	r3, [r3, #10]
 800241e:	461a      	mov	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	4293      	cmp	r3, r2
 8002424:	d20b      	bcs.n	800243e <dir_clear+0x104>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	7858      	ldrb	r0, [r3, #1]
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	441a      	add	r2, r3
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	68f9      	ldr	r1, [r7, #12]
 8002434:	f7fe fbb8 	bl	8000ba8 <disk_write>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0e9      	beq.n	8002412 <dir_clear+0xd8>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	895b      	ldrh	r3, [r3, #10]
 8002442:	461a      	mov	r2, r3
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	4293      	cmp	r3, r2
 8002448:	bf14      	ite	ne
 800244a:	2301      	movne	r3, #1
 800244c:	2300      	moveq	r3, #0
 800244e:	b2db      	uxtb	r3, r3
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b04      	cmp	r3, #4
 800246e:	d102      	bne.n	8002476 <dir_sdi+0x1e>
 8002470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002474:	e001      	b.n	800247a <dir_sdi+0x22>
 8002476:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d904      	bls.n	800248a <dir_sdi+0x32>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	f003 031f 	and.w	r3, r3, #31
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <dir_sdi+0x36>
		return FR_INT_ERR;
 800248a:	2302      	movs	r3, #2
 800248c:	e066      	b.n	800255c <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d109      	bne.n	80024b4 <dir_sdi+0x5c>
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d905      	bls.n	80024b4 <dir_sdi+0x5c>
		clst = fs->dirbase;
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ac:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10c      	bne.n	80024d4 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	095b      	lsrs	r3, r3, #5
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	8912      	ldrh	r2, [r2, #8]
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d301      	bcc.n	80024ca <dir_sdi+0x72>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e048      	b.n	800255c <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	639a      	str	r2, [r3, #56]	; 0x38
 80024d2:	e029      	b.n	8002528 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	895b      	ldrh	r3, [r3, #10]
 80024d8:	025b      	lsls	r3, r3, #9
 80024da:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80024dc:	e019      	b.n	8002512 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6979      	ldr	r1, [r7, #20]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff f9ae 	bl	8001844 <get_fat>
 80024e8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f0:	d101      	bne.n	80024f6 <dir_sdi+0x9e>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e032      	b.n	800255c <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d904      	bls.n	8002506 <dir_sdi+0xae>
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	429a      	cmp	r2, r3
 8002504:	d301      	bcc.n	800250a <dir_sdi+0xb2>
 8002506:	2302      	movs	r3, #2
 8002508:	e028      	b.n	800255c <dir_sdi+0x104>
			ofs -= csz;
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	429a      	cmp	r2, r3
 8002518:	d2e1      	bcs.n	80024de <dir_sdi+0x86>
		}
		dp->sect = clst2sect(fs, clst);
 800251a:	6979      	ldr	r1, [r7, #20]
 800251c:	6938      	ldr	r0, [r7, #16]
 800251e:	f7ff f971 	bl	8001804 <clst2sect>
 8002522:	4602      	mov	r2, r0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	635a      	str	r2, [r3, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <dir_sdi+0xe2>
 8002536:	2302      	movs	r3, #2
 8002538:	e010      	b.n	800255c <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	0a5b      	lsrs	r3, r3, #9
 8002542:	441a      	add	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002554:	441a      	add	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	3320      	adds	r3, #32
 800257a:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b04      	cmp	r3, #4
 8002582:	d102      	bne.n	800258a <dir_next+0x26>
 8002584:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002588:	e001      	b.n	800258e <dir_next+0x2a>
 800258a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	429a      	cmp	r2, r3
 8002592:	d802      	bhi.n	800259a <dir_next+0x36>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	639a      	str	r2, [r3, #56]	; 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <dir_next+0x42>
 80025a2:	2304      	movs	r3, #4
 80025a4:	e07f      	b.n	80026a6 <dir_next+0x142>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d16d      	bne.n	800268c <dir_next+0x128>
		dp->sect++;				/* Next sector */
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	639a      	str	r2, [r3, #56]	; 0x38

		if (dp->clust == 0) {	/* Static table */
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10a      	bne.n	80025d8 <dir_next+0x74>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	095b      	lsrs	r3, r3, #5
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	8912      	ldrh	r2, [r2, #8]
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d35e      	bcc.n	800268c <dir_next+0x128>
				dp->sect = 0; return FR_NO_FILE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	639a      	str	r2, [r3, #56]	; 0x38
 80025d4:	2304      	movs	r3, #4
 80025d6:	e066      	b.n	80026a6 <dir_next+0x142>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	0a5b      	lsrs	r3, r3, #9
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	8952      	ldrh	r2, [r2, #10]
 80025e0:	3a01      	subs	r2, #1
 80025e2:	4013      	ands	r3, r2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d151      	bne.n	800268c <dir_next+0x128>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ee:	4619      	mov	r1, r3
 80025f0:	4610      	mov	r0, r2
 80025f2:	f7ff f927 	bl	8001844 <get_fat>
 80025f6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d801      	bhi.n	8002602 <dir_next+0x9e>
 80025fe:	2302      	movs	r3, #2
 8002600:	e051      	b.n	80026a6 <dir_next+0x142>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002608:	d101      	bne.n	800260e <dir_next+0xaa>
 800260a:	2301      	movs	r3, #1
 800260c:	e04b      	b.n	80026a6 <dir_next+0x142>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	429a      	cmp	r2, r3
 8002616:	d32f      	bcc.n	8002678 <dir_next+0x114>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d104      	bne.n	8002628 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	639a      	str	r2, [r3, #56]	; 0x38
 8002624:	2304      	movs	r3, #4
 8002626:	e03e      	b.n	80026a6 <dir_next+0x142>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262e:	4619      	mov	r1, r3
 8002630:	4610      	mov	r0, r2
 8002632:	f7ff fd47 	bl	80020c4 <create_chain>
 8002636:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <dir_next+0xde>
 800263e:	2307      	movs	r3, #7
 8002640:	e031      	b.n	80026a6 <dir_next+0x142>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <dir_next+0xe8>
 8002648:	2302      	movs	r3, #2
 800264a:	e02c      	b.n	80026a6 <dir_next+0x142>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002652:	d101      	bne.n	8002658 <dir_next+0xf4>
 8002654:	2301      	movs	r3, #1
 8002656:	e026      	b.n	80026a6 <dir_next+0x142>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8002658:	6979      	ldr	r1, [r7, #20]
 800265a:	6938      	ldr	r0, [r7, #16]
 800265c:	f7ff fe6d 	bl	800233a <dir_clear>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <dir_next+0x106>
 8002666:	2301      	movs	r3, #1
 8002668:	e01d      	b.n	80026a6 <dir_next+0x142>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	79db      	ldrb	r3, [r3, #7]
 800266e:	f043 0304 	orr.w	r3, r3, #4
 8002672:	b2da      	uxtb	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	71da      	strb	r2, [r3, #7]
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clst2sect(fs, clst);
 800267e:	6979      	ldr	r1, [r7, #20]
 8002680:	6938      	ldr	r0, [r7, #16]
 8002682:	f7ff f8bf 	bl	8001804 <clst2sect>
 8002686:	4602      	mov	r2, r0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800269e:	441a      	add	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT nent				/* Number of contiguous entries to allocate */
)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b086      	sub	sp, #24
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80026be:	2100      	movs	r1, #0
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff fec9 	bl	8002458 <dir_sdi>
 80026c6:	4603      	mov	r3, r0
 80026c8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80026ca:	7dfb      	ldrb	r3, [r7, #23]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d140      	bne.n	8002752 <dir_alloc+0xa4>
		n = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d8:	4619      	mov	r1, r3
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f7fe fff6 	bl	80016cc <move_window>
 80026e0:	4603      	mov	r3, r0
 80026e2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80026e4:	7dfb      	ldrb	r3, [r7, #23]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d132      	bne.n	8002750 <dir_alloc+0xa2>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d108      	bne.n	8002704 <dir_alloc+0x56>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	b25b      	sxtb	r3, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	09db      	lsrs	r3, r3, #7
 8002700:	b2db      	uxtb	r3, r3
 8002702:	e00f      	b.n	8002724 <dir_alloc+0x76>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2be5      	cmp	r3, #229	; 0xe5
 800270c:	d004      	beq.n	8002718 <dir_alloc+0x6a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <dir_alloc+0x6e>
 8002718:	2301      	movs	r3, #1
 800271a:	e000      	b.n	800271e <dir_alloc+0x70>
 800271c:	2300      	movs	r3, #0
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	d007      	beq.n	8002738 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	3301      	adds	r3, #1
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d102      	bne.n	800273c <dir_alloc+0x8e>
 8002736:	e00c      	b.n	8002752 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8002738:	2300      	movs	r3, #0
 800273a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800273c:	2101      	movs	r1, #1
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff ff10 	bl	8002564 <dir_next>
 8002744:	4603      	mov	r3, r0
 8002746:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8002748:	7dfb      	ldrb	r3, [r7, #23]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0c2      	beq.n	80026d4 <dir_alloc+0x26>
 800274e:	e000      	b.n	8002752 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8002750:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8002752:	7dfb      	ldrb	r3, [r7, #23]
 8002754:	2b04      	cmp	r3, #4
 8002756:	d101      	bne.n	800275c <dir_alloc+0xae>
 8002758:	2307      	movs	r3, #7
 800275a:	75fb      	strb	r3, [r7, #23]
	return res;
 800275c:	7dfb      	ldrb	r3, [r7, #23]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b084      	sub	sp, #16
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	331a      	adds	r3, #26
 8002774:	4618      	mov	r0, r3
 8002776:	f7fe fc63 	bl	8001040 <ld_word>
 800277a:	4603      	mov	r3, r0
 800277c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b03      	cmp	r3, #3
 8002784:	d109      	bne.n	800279a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	3314      	adds	r3, #20
 800278a:	4618      	mov	r0, r3
 800278c:	f7fe fc58 	bl	8001040 <ld_word>
 8002790:	4603      	mov	r3, r0
 8002792:	041b      	lsls	r3, r3, #16
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	4313      	orrs	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800279a:	68fb      	ldr	r3, [r7, #12]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	331a      	adds	r3, #26
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	b292      	uxth	r2, r2
 80027b8:	4611      	mov	r1, r2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fe fd38 	bl	8001230 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d109      	bne.n	80027dc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	f103 0214 	add.w	r2, r3, #20
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	0c1b      	lsrs	r3, r3, #16
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	4619      	mov	r1, r3
 80027d6:	4610      	mov	r0, r2
 80027d8:	f7fe fd2a 	bl	8001230 <st_word>
	}
}
 80027dc:	bf00      	nop
 80027de:	3710      	adds	r7, #16
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <cmp_lfn>:

static int cmp_lfn (		/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80027e4:	b590      	push	{r4, r7, lr}
 80027e6:	b087      	sub	sp, #28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	331a      	adds	r3, #26
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7fe fc24 	bl	8001040 <ld_word>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <cmp_lfn+0x1e>
 80027fe:	2300      	movs	r3, #0
 8002800:	e058      	b.n	80028b4 <cmp_lfn+0xd0>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800280a:	1e5a      	subs	r2, r3, #1
 800280c:	4613      	mov	r3, r2
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	4413      	add	r3, r2
 8002816:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8002818:	2301      	movs	r3, #1
 800281a:	81fb      	strh	r3, [r7, #14]
 800281c:	2300      	movs	r3, #0
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	e032      	b.n	8002888 <cmp_lfn+0xa4>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8002822:	4a26      	ldr	r2, [pc, #152]	; (80028bc <cmp_lfn+0xd8>)
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4413      	add	r3, r2
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	4413      	add	r3, r2
 8002830:	4618      	mov	r0, r3
 8002832:	f7fe fc05 	bl	8001040 <ld_word>
 8002836:	4603      	mov	r3, r0
 8002838:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 800283a:	89fb      	ldrh	r3, [r7, #14]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d019      	beq.n	8002874 <cmp_lfn+0x90>
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	2bfe      	cmp	r3, #254	; 0xfe
 8002844:	d811      	bhi.n	800286a <cmp_lfn+0x86>
 8002846:	89bb      	ldrh	r3, [r7, #12]
 8002848:	4618      	mov	r0, r3
 800284a:	f003 fcdd 	bl	8006208 <ff_wtoupper>
 800284e:	4604      	mov	r4, r0
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	1c5a      	adds	r2, r3, #1
 8002854:	617a      	str	r2, [r7, #20]
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	4413      	add	r3, r2
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f003 fcd2 	bl	8006208 <ff_wtoupper>
 8002864:	4603      	mov	r3, r0
 8002866:	429c      	cmp	r4, r3
 8002868:	d001      	beq.n	800286e <cmp_lfn+0x8a>
				return 0;					/* Not matched */
 800286a:	2300      	movs	r3, #0
 800286c:	e022      	b.n	80028b4 <cmp_lfn+0xd0>
			}
			wc = uc;
 800286e:	89bb      	ldrh	r3, [r7, #12]
 8002870:	81fb      	strh	r3, [r7, #14]
 8002872:	e006      	b.n	8002882 <cmp_lfn+0x9e>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8002874:	89bb      	ldrh	r3, [r7, #12]
 8002876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800287a:	4293      	cmp	r3, r2
 800287c:	d001      	beq.n	8002882 <cmp_lfn+0x9e>
 800287e:	2300      	movs	r3, #0
 8002880:	e018      	b.n	80028b4 <cmp_lfn+0xd0>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	3301      	adds	r3, #1
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	2b0c      	cmp	r3, #12
 800288c:	d9c9      	bls.n	8002822 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00b      	beq.n	80028b2 <cmp_lfn+0xce>
 800289a:	89fb      	ldrh	r3, [r7, #14]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d008      	beq.n	80028b2 <cmp_lfn+0xce>
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	4413      	add	r3, r2
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <cmp_lfn+0xce>
 80028ae:	2300      	movs	r3, #0
 80028b0:	e000      	b.n	80028b4 <cmp_lfn+0xd0>

	return 1;		/* The part of LFN matched */
 80028b2:	2301      	movs	r3, #1
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	371c      	adds	r7, #28
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd90      	pop	{r4, r7, pc}
 80028bc:	08019784 	.word	0x08019784

080028c0 <pick_lfn>:

static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	331a      	adds	r3, #26
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe fbb6 	bl	8001040 <ld_word>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <pick_lfn+0x1e>
 80028da:	2300      	movs	r3, #0
 80028dc:	e04d      	b.n	800297a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028e6:	1e5a      	subs	r2, r3, #1
 80028e8:	4613      	mov	r3, r2
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80028f4:	2301      	movs	r3, #1
 80028f6:	81fb      	strh	r3, [r7, #14]
 80028f8:	2300      	movs	r3, #0
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	e028      	b.n	8002950 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80028fe:	4a21      	ldr	r2, [pc, #132]	; (8002984 <pick_lfn+0xc4>)
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4413      	add	r3, r2
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	461a      	mov	r2, r3
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	4413      	add	r3, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f7fe fb97 	bl	8001040 <ld_word>
 8002912:	4603      	mov	r3, r0
 8002914:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 8002916:	89fb      	ldrh	r3, [r7, #14]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00f      	beq.n	800293c <pick_lfn+0x7c>
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2bfe      	cmp	r3, #254	; 0xfe
 8002920:	d901      	bls.n	8002926 <pick_lfn+0x66>
 8002922:	2300      	movs	r3, #0
 8002924:	e029      	b.n	800297a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8002926:	89bb      	ldrh	r3, [r7, #12]
 8002928:	81fb      	strh	r3, [r7, #14]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	617a      	str	r2, [r7, #20]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	4413      	add	r3, r2
 8002936:	89fa      	ldrh	r2, [r7, #14]
 8002938:	801a      	strh	r2, [r3, #0]
 800293a:	e006      	b.n	800294a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800293c:	89bb      	ldrh	r3, [r7, #12]
 800293e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002942:	4293      	cmp	r3, r2
 8002944:	d001      	beq.n	800294a <pick_lfn+0x8a>
 8002946:	2300      	movs	r3, #0
 8002948:	e017      	b.n	800297a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	3301      	adds	r3, #1
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	2b0c      	cmp	r3, #12
 8002954:	d9d3      	bls.n	80028fe <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00a      	beq.n	8002978 <pick_lfn+0xb8>
		if (i >= FF_MAX_LFN) return 0;		/* Buffer overflow? */
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2bfe      	cmp	r3, #254	; 0xfe
 8002966:	d901      	bls.n	800296c <pick_lfn+0xac>
 8002968:	2300      	movs	r3, #0
 800296a:	e006      	b.n	800297a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	4413      	add	r3, r2
 8002974:	2200      	movs	r2, #0
 8002976:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8002978:	2301      	movs	r3, #1
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	08019784 	.word	0x08019784

08002988 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	4611      	mov	r1, r2
 8002994:	461a      	mov	r2, r3
 8002996:	460b      	mov	r3, r1
 8002998:	71fb      	strb	r3, [r7, #7]
 800299a:	4613      	mov	r3, r2
 800299c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	330d      	adds	r3, #13
 80029a2:	79ba      	ldrb	r2, [r7, #6]
 80029a4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	330b      	adds	r3, #11
 80029aa:	220f      	movs	r2, #15
 80029ac:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	330c      	adds	r3, #12
 80029b2:	2200      	movs	r2, #0
 80029b4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	331a      	adds	r3, #26
 80029ba:	2100      	movs	r1, #0
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fe fc37 	bl	8001230 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	1e5a      	subs	r2, r3, #1
 80029c6:	4613      	mov	r3, r2
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4413      	add	r3, r2
 80029d0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	82fb      	strh	r3, [r7, #22]
 80029d6:	2300      	movs	r3, #0
 80029d8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80029da:	8afb      	ldrh	r3, [r7, #22]
 80029dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d007      	beq.n	80029f4 <put_lfn+0x6c>
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	61fa      	str	r2, [r7, #28]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4413      	add	r3, r2
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80029f4:	4a17      	ldr	r2, [pc, #92]	; (8002a54 <put_lfn+0xcc>)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	4413      	add	r3, r2
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	461a      	mov	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	4413      	add	r3, r2
 8002a02:	8afa      	ldrh	r2, [r7, #22]
 8002a04:	4611      	mov	r1, r2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe fc12 	bl	8001230 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8002a0c:	8afb      	ldrh	r3, [r7, #22]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d102      	bne.n	8002a18 <put_lfn+0x90>
 8002a12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a16:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	2b0c      	cmp	r3, #12
 8002a22:	d9da      	bls.n	80029da <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8002a24:	8afb      	ldrh	r3, [r7, #22]
 8002a26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d006      	beq.n	8002a3c <put_lfn+0xb4>
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4413      	add	r3, r2
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d103      	bne.n	8002a44 <put_lfn+0xbc>
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a42:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	79fa      	ldrb	r2, [r7, #7]
 8002a48:	701a      	strb	r2, [r3, #0]
}
 8002a4a:	bf00      	nop
 8002a4c:	3720      	adds	r7, #32
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	08019784 	.word	0x08019784

08002a58 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08c      	sub	sp, #48	; 0x30
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
 8002a64:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8002a66:	220b      	movs	r2, #11
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f7fe fcae 	bl	80013cc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	2b05      	cmp	r3, #5
 8002a74:	d92b      	bls.n	8002ace <gen_numname+0x76>
		sr = seq;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC as hash value */
 8002a7a:	e022      	b.n	8002ac2 <gen_numname+0x6a>
			wc = *lfn++;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	1c9a      	adds	r2, r3, #2
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8002a86:	2300      	movs	r3, #0
 8002a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a8a:	e017      	b.n	8002abc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	005a      	lsls	r2, r3, #1
 8002a90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	4413      	add	r3, r2
 8002a98:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8002a9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002a9c:	085b      	lsrs	r3, r3, #1
 8002a9e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d005      	beq.n	8002ab6 <gen_numname+0x5e>
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8002ab0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8002ab4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8002ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab8:	3301      	adds	r3, #1
 8002aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8002abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002abe:	2b0f      	cmp	r3, #15
 8002ac0:	d9e4      	bls.n	8002a8c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC as hash value */
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1d8      	bne.n	8002a7c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8002ace:	2307      	movs	r3, #7
 8002ad0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	3330      	adds	r3, #48	; 0x30
 8002ade:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8002ae2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ae6:	2b39      	cmp	r3, #57	; 0x39
 8002ae8:	d904      	bls.n	8002af4 <gen_numname+0x9c>
 8002aea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002aee:	3307      	adds	r3, #7
 8002af0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8002af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af6:	1e5a      	subs	r2, r3, #1
 8002af8:	62ba      	str	r2, [r7, #40]	; 0x28
 8002afa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002afe:	4413      	add	r3, r2
 8002b00:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002b04:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	091b      	lsrs	r3, r3, #4
 8002b0c:	603b      	str	r3, [r7, #0]
	} while (seq);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1de      	bne.n	8002ad2 <gen_numname+0x7a>
	ns[i] = '~';
 8002b14:	f107 0214 	add.w	r2, r7, #20
 8002b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1a:	4413      	add	r3, r2
 8002b1c:	227e      	movs	r2, #126	; 0x7e
 8002b1e:	701a      	strb	r2, [r3, #0]

	/* Append the number to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8002b20:	2300      	movs	r3, #0
 8002b22:	627b      	str	r3, [r7, #36]	; 0x24
 8002b24:	e014      	b.n	8002b50 <gen_numname+0xf8>
		if (dbc_1st(dst[j])) {
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	4413      	add	r3, r2
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe fcc9 	bl	80014c6 <dbc_1st>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d007      	beq.n	8002b4a <gen_numname+0xf2>
			if (j == i - 1) break;
 8002b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d010      	beq.n	8002b66 <gen_numname+0x10e>
			j++;
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	3301      	adds	r3, #1
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d207      	bcs.n	8002b68 <gen_numname+0x110>
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	4413      	add	r3, r2
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	d1e0      	bne.n	8002b26 <gen_numname+0xce>
 8002b64:	e000      	b.n	8002b68 <gen_numname+0x110>
			if (j == i - 1) break;
 8002b66:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8002b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6a:	2b07      	cmp	r3, #7
 8002b6c:	d808      	bhi.n	8002b80 <gen_numname+0x128>
 8002b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b74:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002b78:	4413      	add	r3, r2
 8002b7a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8002b7e:	e000      	b.n	8002b82 <gen_numname+0x12a>
 8002b80:	2120      	movs	r1, #32
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	627a      	str	r2, [r7, #36]	; 0x24
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	460a      	mov	r2, r1
 8002b8e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	2b07      	cmp	r3, #7
 8002b94:	d9e8      	bls.n	8002b68 <gen_numname+0x110>
}
 8002b96:	bf00      	nop
 8002b98:	3730      	adds	r7, #48	; 0x30
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b085      	sub	sp, #20
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8002baa:	230b      	movs	r3, #11
 8002bac:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8002bae:	7bfb      	ldrb	r3, [r7, #15]
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	0852      	lsrs	r2, r2, #1
 8002bb4:	01db      	lsls	r3, r3, #7
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	1c59      	adds	r1, r3, #1
 8002bbe:	6079      	str	r1, [r7, #4]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	60bb      	str	r3, [r7, #8]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1ed      	bne.n	8002bae <sum_sfn+0x10>
	return sum;
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3301      	adds	r3, #1
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	015b      	lsls	r3, r3, #5
 8002bf2:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	827b      	strh	r3, [r7, #18]
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	e018      	b.n	8002c30 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d103      	bne.n	8002c0c <xdir_sum+0x2c>
			i++;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	3301      	adds	r3, #1
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	e00e      	b.n	8002c2a <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8002c0c:	8a7b      	ldrh	r3, [r7, #18]
 8002c0e:	03db      	lsls	r3, r3, #15
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	8a7b      	ldrh	r3, [r7, #18]
 8002c14:	085b      	lsrs	r3, r3, #1
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	440b      	add	r3, r1
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d3e2      	bcc.n	8002bfe <xdir_sum+0x1e>
		}
	}
	return sum;
 8002c38:	8a7b      	ldrh	r3, [r7, #18]
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	371c      	adds	r7, #28
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <xname_sum>:


static WORD xname_sum (	/* Get check sum (to be used as hash) of the file name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8002c52:	e01f      	b.n	8002c94 <xname_sum+0x4e>
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 8002c54:	89bb      	ldrh	r3, [r7, #12]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f003 fad6 	bl	8006208 <ff_wtoupper>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8002c60:	89fb      	ldrh	r3, [r7, #14]
 8002c62:	03db      	lsls	r3, r3, #15
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	89fb      	ldrh	r3, [r7, #14]
 8002c68:	085b      	lsrs	r3, r3, #1
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	89bb      	ldrh	r3, [r7, #12]
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8002c7a:	89fb      	ldrh	r3, [r7, #14]
 8002c7c:	03db      	lsls	r3, r3, #15
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	89fb      	ldrh	r3, [r7, #14]
 8002c82:	085b      	lsrs	r3, r3, #1
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	89bb      	ldrh	r3, [r7, #12]
 8002c8c:	0a1b      	lsrs	r3, r3, #8
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	4413      	add	r3, r2
 8002c92:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	1c9a      	adds	r2, r3, #2
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	81bb      	strh	r3, [r7, #12]
 8002c9e:	89bb      	ldrh	r3, [r7, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1d7      	bne.n	8002c54 <xname_sum+0xe>
	}
	return sum;
 8002ca4:	89fb      	ldrh	r3, [r7, #14]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <get_xfileinfo>:

static void get_xfileinfo (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 8002cae:	b590      	push	{r4, r7, lr}
 8002cb0:	b089      	sub	sp, #36	; 0x24
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	6039      	str	r1, [r7, #0]
	WCHAR wc, hs;
	UINT di, si, nc;

	/* Get file name from the entry block */
	si = SZDIRE * 2;	/* 1st C1 entry */
 8002cb8:	2340      	movs	r3, #64	; 0x40
 8002cba:	617b      	str	r3, [r7, #20]
	nc = 0; hs = 0; di = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	83fb      	strh	r3, [r7, #30]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61bb      	str	r3, [r7, #24]
	while (nc < dirb[XDIR_NumName]) {
 8002cc8:	e048      	b.n	8002d5c <get_xfileinfo+0xae>
		if (si >= MAXDIRB(FF_MAX_LFN)) { di = 0; break; }	/* Truncated directory block? */
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8002cd0:	d302      	bcc.n	8002cd8 <get_xfileinfo+0x2a>
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61bb      	str	r3, [r7, #24]
 8002cd6:	e048      	b.n	8002d6a <get_xfileinfo+0xbc>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f003 031f 	and.w	r3, r3, #31
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d102      	bne.n	8002ce8 <get_xfileinfo+0x3a>
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	3302      	adds	r3, #2
 8002ce6:	617b      	str	r3, [r7, #20]
		wc = ld_word(dirb + si); si += 2; nc++;	/* Get a character */
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	4413      	add	r3, r2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe f9a6 	bl	8001040 <ld_word>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	81fb      	strh	r3, [r7, #14]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	3302      	adds	r3, #2
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	3301      	adds	r3, #1
 8002d02:	613b      	str	r3, [r7, #16]
		if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 8002d04:	8bfb      	ldrh	r3, [r7, #30]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10a      	bne.n	8002d20 <get_xfileinfo+0x72>
 8002d0a:	89fb      	ldrh	r3, [r7, #14]
 8002d0c:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8002d10:	d306      	bcc.n	8002d20 <get_xfileinfo+0x72>
 8002d12:	89fb      	ldrh	r3, [r7, #14]
 8002d14:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8002d18:	d202      	bcs.n	8002d20 <get_xfileinfo+0x72>
			hs = wc; continue;	/* Get low surrogate */
 8002d1a:	89fb      	ldrh	r3, [r7, #14]
 8002d1c:	83fb      	strh	r3, [r7, #30]
 8002d1e:	e01d      	b.n	8002d5c <get_xfileinfo+0xae>
		}
		wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 8002d20:	8bfb      	ldrh	r3, [r7, #30]
 8002d22:	041a      	lsls	r2, r3, #16
 8002d24:	89fb      	ldrh	r3, [r7, #14]
 8002d26:	ea42 0003 	orr.w	r0, r2, r3
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	3318      	adds	r3, #24
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	4413      	add	r3, r2
 8002d32:	1c99      	adds	r1, r3, #2
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f7fe fc52 	bl	80015e4 <put_utf>
 8002d40:	4603      	mov	r3, r0
 8002d42:	81fb      	strh	r3, [r7, #14]
		if (wc == 0) { di = 0; break; }	/* Buffer overflow or wrong encoding? */
 8002d44:	89fb      	ldrh	r3, [r7, #14]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d102      	bne.n	8002d50 <get_xfileinfo+0xa2>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61bb      	str	r3, [r7, #24]
 8002d4e:	e00c      	b.n	8002d6a <get_xfileinfo+0xbc>
		di += wc;
 8002d50:	89fb      	ldrh	r3, [r7, #14]
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4413      	add	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
		hs = 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	83fb      	strh	r3, [r7, #30]
	while (nc < dirb[XDIR_NumName]) {
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3323      	adds	r3, #35	; 0x23
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d3af      	bcc.n	8002cca <get_xfileinfo+0x1c>
	}
	if (hs != 0) di = 0;					/* Broken surrogate pair? */
 8002d6a:	8bfb      	ldrh	r3, [r7, #30]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <get_xfileinfo+0xc6>
 8002d70:	2300      	movs	r3, #0
 8002d72:	61bb      	str	r3, [r7, #24]
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d106      	bne.n	8002d88 <get_xfileinfo+0xda>
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	61ba      	str	r2, [r7, #24]
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	4413      	add	r3, r2
 8002d84:	223f      	movs	r2, #63	; 0x3f
 8002d86:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate the name */
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	331a      	adds	r3, #26
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]
	fno->altname[0] = 0;					/* exFAT does not support SFN */
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2200      	movs	r2, #0
 8002d98:	735a      	strb	r2, [r3, #13]

	fno->fattrib = dirb[XDIR_Attr];			/* Attribute */
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	791a      	ldrb	r2, [r3, #4]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	7b1b      	ldrb	r3, [r3, #12]
 8002da6:	f003 0310 	and.w	r3, r3, #16
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d107      	bne.n	8002dbe <get_xfileinfo+0x110>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3338      	adds	r3, #56	; 0x38
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe f97f 	bl	80010b6 <ld_qword>
 8002db8:	4603      	mov	r3, r0
 8002dba:	460c      	mov	r4, r1
 8002dbc:	e003      	b.n	8002dc6 <get_xfileinfo+0x118>
 8002dbe:	f04f 0300 	mov.w	r3, #0
 8002dc2:	f04f 0400 	mov.w	r4, #0
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	e9c2 3400 	strd	r3, r4, [r2]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	330c      	adds	r3, #12
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fe f935 	bl	8001040 <ld_word>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	461a      	mov	r2, r3
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	330e      	adds	r3, #14
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe f92c 	bl	8001040 <ld_word>
 8002de8:	4603      	mov	r3, r0
 8002dea:	461a      	mov	r2, r3
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	811a      	strh	r2, [r3, #8]
}
 8002df0:	bf00      	nop
 8002df2:	3724      	adds	r7, #36	; 0x24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd90      	pop	{r4, r7, pc}

08002df8 <load_xdir>:
/*-----------------------------------*/

static FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp					/* Reading direcotry object pointing top of the entry block to load */
)
{
 8002df8:	b590      	push	{r4, r7, lr}
 8002dfa:	b087      	sub	sp, #28
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	60fb      	str	r3, [r7, #12]


	/* Load file-directory entry */
	res = move_window(dp->obj.fs, dp->sect);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e10:	4619      	mov	r1, r3
 8002e12:	4610      	mov	r0, r2
 8002e14:	f7fe fc5a 	bl	80016cc <move_window>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8002e1c:	7dfb      	ldrb	r3, [r7, #23]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <load_xdir+0x2e>
 8002e22:	7dfb      	ldrb	r3, [r7, #23]
 8002e24:	e0a9      	b.n	8002f7a <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b85      	cmp	r3, #133	; 0x85
 8002e2e:	d001      	beq.n	8002e34 <load_xdir+0x3c>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e0a2      	b.n	8002f7a <load_xdir+0x182>
	mem_cpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e38:	2220      	movs	r2, #32
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f7fe fac5 	bl	80013cc <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	3301      	adds	r3, #1
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	015b      	lsls	r3, r3, #5
 8002e4c:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b5f      	cmp	r3, #95	; 0x5f
 8002e52:	d903      	bls.n	8002e5c <load_xdir+0x64>
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8002e5a:	d901      	bls.n	8002e60 <load_xdir+0x68>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e08c      	b.n	8002f7a <load_xdir+0x182>

	/* Load stream-extension entry */
	res = dir_next(dp, 0);
 8002e60:	2100      	movs	r1, #0
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff fb7e 	bl	8002564 <dir_next>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
 8002e6e:	2b04      	cmp	r3, #4
 8002e70:	d101      	bne.n	8002e76 <load_xdir+0x7e>
 8002e72:	2302      	movs	r3, #2
 8002e74:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8002e76:	7dfb      	ldrb	r3, [r7, #23]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <load_xdir+0x88>
 8002e7c:	7dfb      	ldrb	r3, [r7, #23]
 8002e7e:	e07c      	b.n	8002f7a <load_xdir+0x182>
	res = move_window(dp->obj.fs, dp->sect);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	f7fe fc1e 	bl	80016cc <move_window>
 8002e90:	4603      	mov	r3, r0
 8002e92:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <load_xdir+0xa6>
 8002e9a:	7dfb      	ldrb	r3, [r7, #23]
 8002e9c:	e06d      	b.n	8002f7a <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2bc0      	cmp	r3, #192	; 0xc0
 8002ea6:	d001      	beq.n	8002eac <load_xdir+0xb4>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e066      	b.n	8002f7a <load_xdir+0x182>
	mem_cpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f103 0020 	add.w	r0, r3, #32
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	4619      	mov	r1, r3
 8002eba:	f7fe fa87 	bl	80013cc <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	3323      	adds	r3, #35	; 0x23
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	332c      	adds	r3, #44	; 0x2c
 8002ec6:	4a2f      	ldr	r2, [pc, #188]	; (8002f84 <load_xdir+0x18c>)
 8002ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ecc:	08db      	lsrs	r3, r3, #3
 8002ece:	015b      	lsls	r3, r3, #5
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d201      	bcs.n	8002eda <load_xdir+0xe2>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e04f      	b.n	8002f7a <load_xdir+0x182>

	/* Load file-name entries */
	i = 2 * SZDIRE;	/* Name offset to load */
 8002eda:	2340      	movs	r3, #64	; 0x40
 8002edc:	613b      	str	r3, [r7, #16]
	do {
		res = dir_next(dp, 0);
 8002ede:	2100      	movs	r1, #0
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7ff fb3f 	bl	8002564 <dir_next>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 8002eea:	7dfb      	ldrb	r3, [r7, #23]
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d101      	bne.n	8002ef4 <load_xdir+0xfc>
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8002ef4:	7dfb      	ldrb	r3, [r7, #23]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <load_xdir+0x106>
 8002efa:	7dfb      	ldrb	r3, [r7, #23]
 8002efc:	e03d      	b.n	8002f7a <load_xdir+0x182>
		res = move_window(dp->obj.fs, dp->sect);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f06:	4619      	mov	r1, r3
 8002f08:	4610      	mov	r0, r2
 8002f0a:	f7fe fbdf 	bl	80016cc <move_window>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8002f12:	7dfb      	ldrb	r3, [r7, #23]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <load_xdir+0x124>
 8002f18:	7dfb      	ldrb	r3, [r7, #23]
 8002f1a:	e02e      	b.n	8002f7a <load_xdir+0x182>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2bc1      	cmp	r3, #193	; 0xc1
 8002f24:	d001      	beq.n	8002f2a <load_xdir+0x132>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e027      	b.n	8002f7a <load_xdir+0x182>
		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8002f30:	d208      	bcs.n	8002f44 <load_xdir+0x14c>
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	18d0      	adds	r0, r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f7fe fa44 	bl	80013cc <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	3320      	adds	r3, #32
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d3c5      	bcc.n	8002ede <load_xdir+0xe6>

	/* Sanity check (do it for only accessible object) */
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8002f58:	d80e      	bhi.n	8002f78 <load_xdir+0x180>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f7ff fe40 	bl	8002be0 <xdir_sum>
 8002f60:	4603      	mov	r3, r0
 8002f62:	461c      	mov	r4, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	3302      	adds	r3, #2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fe f869 	bl	8001040 <ld_word>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	429c      	cmp	r4, r3
 8002f72:	d001      	beq.n	8002f78 <load_xdir+0x180>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e000      	b.n	8002f7a <load_xdir+0x182>
	}
	return FR_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	371c      	adds	r7, #28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd90      	pop	{r4, r7, pc}
 8002f82:	bf00      	nop
 8002f84:	88888889 	.word	0x88888889

08002f88 <init_alloc_info>:

static void init_alloc_info (
	FATFS* fs,		/* Filesystem object */
	FFOBJID* obj	/* Object allocation information to be initialized */
)
{
 8002f88:	b590      	push	{r4, r7, lr}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	3334      	adds	r3, #52	; 0x34
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fe f869 	bl	8001070 <ld_dword>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	609a      	str	r2, [r3, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	3338      	adds	r3, #56	; 0x38
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fe f883 	bl	80010b6 <ld_qword>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	460c      	mov	r4, r1
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	e9c2 3404 	strd	r3, r4, [r2, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	3321      	adds	r3, #33	; 0x21
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	71da      	strb	r2, [r3, #7]
	obj->n_frag = 0;										/* No last fragment info */
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	61da      	str	r2, [r3, #28]
}
 8002fd2:	bf00      	nop
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd90      	pop	{r4, r7, pc}

08002fda <load_obj_xdir>:

static FRESULT load_obj_xdir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const FFOBJID* obj	/* Object with its containing directory information */
)
{
 8002fda:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	6a1a      	ldr	r2, [r3, #32]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	469b      	mov	fp, r3
 8003006:	f04f 0c00 	mov.w	ip, #0
 800300a:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	ea0b 0301 	and.w	r3, fp, r1
 8003016:	ea0c 0402 	and.w	r4, ip, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->obj.n_frag = 0;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	61da      	str	r2, [r3, #28]
	dp->blk_ofs = obj->c_ofs;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003032:	4619      	mov	r1, r3
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff fa0f 	bl	8002458 <dir_sdi>
 800303a:	4603      	mov	r3, r0
 800303c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800303e:	7bfb      	ldrb	r3, [r7, #15]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d104      	bne.n	800304e <load_obj_xdir+0x74>
		res = load_xdir(dp);		/* Load the object's entry block */
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff fed7 	bl	8002df8 <load_xdir>
 800304a:	4603      	mov	r3, r0
 800304c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800304e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800305a <store_xdir>:
/*----------------------------------------*/

static FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800305a:	b590      	push	{r4, r7, lr}
 800305c:	b087      	sub	sp, #28
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	1c9c      	adds	r4, r3, #2
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f7ff fdb6 	bl	8002be0 <xdir_sum>
 8003074:	4603      	mov	r3, r0
 8003076:	4619      	mov	r1, r3
 8003078:	4620      	mov	r0, r4
 800307a:	f7fe f8d9 	bl	8001230 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	3301      	adds	r3, #1
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	3301      	adds	r3, #1
 8003086:	613b      	str	r3, [r7, #16]

	/* Store the direcotry entry block to the directory */
	res = dir_sdi(dp, dp->blk_ofs);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308c:	4619      	mov	r1, r3
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f7ff f9e2 	bl	8002458 <dir_sdi>
 8003094:	4603      	mov	r3, r0
 8003096:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8003098:	e026      	b.n	80030e8 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a2:	4619      	mov	r1, r3
 80030a4:	4610      	mov	r0, r2
 80030a6:	f7fe fb11 	bl	80016cc <move_window>
 80030aa:	4603      	mov	r3, r0
 80030ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80030ae:	7dfb      	ldrb	r3, [r7, #23]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d11d      	bne.n	80030f0 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b8:	2220      	movs	r2, #32
 80030ba:	68f9      	ldr	r1, [r7, #12]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fe f985 	bl	80013cc <mem_cpy>
		dp->obj.fs->wflag = 1;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2201      	movs	r2, #1
 80030c8:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	3b01      	subs	r3, #1
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00e      	beq.n	80030f4 <store_xdir+0x9a>
		dirb += SZDIRE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	3320      	adds	r3, #32
 80030da:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 80030dc:	2100      	movs	r1, #0
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7ff fa40 	bl	8002564 <dir_next>
 80030e4:	4603      	mov	r3, r0
 80030e6:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 80030e8:	7dfb      	ldrb	r3, [r7, #23]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0d5      	beq.n	800309a <store_xdir+0x40>
 80030ee:	e002      	b.n	80030f6 <store_xdir+0x9c>
		if (res != FR_OK) break;
 80030f0:	bf00      	nop
 80030f2:	e000      	b.n	80030f6 <store_xdir+0x9c>
		if (--nent == 0) break;
 80030f4:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 80030f6:	7dfb      	ldrb	r3, [r7, #23]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d002      	beq.n	8003102 <store_xdir+0xa8>
 80030fc:	7dfb      	ldrb	r3, [r7, #23]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <store_xdir+0xac>
 8003102:	7dfb      	ldrb	r3, [r7, #23]
 8003104:	e000      	b.n	8003108 <store_xdir+0xae>
 8003106:	2302      	movs	r3, #2
}
 8003108:	4618      	mov	r0, r3
 800310a:	371c      	adds	r7, #28
 800310c:	46bd      	mov	sp, r7
 800310e:	bd90      	pop	{r4, r7, pc}

08003110 <create_xdir>:

static void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the object name */
)
{
 8003110:	b590      	push	{r4, r7, lr}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
	BYTE nc1, nlen;
	WCHAR wc;


	/* Create file-directory and stream-extension entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800311a:	2240      	movs	r2, #64	; 0x40
 800311c:	2100      	movs	r1, #0
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7fe f975 	bl	800140e <mem_set>
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2285      	movs	r2, #133	; 0x85
 8003128:	701a      	strb	r2, [r3, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3320      	adds	r3, #32
 800312e:	22c0      	movs	r2, #192	; 0xc0
 8003130:	701a      	strb	r2, [r3, #0]

	/* Create file-name entries */
	i = SZDIRE * 2;	/* Top of file_name entries */
 8003132:	2340      	movs	r3, #64	; 0x40
 8003134:	60fb      	str	r3, [r7, #12]
	nlen = nc1 = 0; wc = 1;
 8003136:	2300      	movs	r3, #0
 8003138:	72fb      	strb	r3, [r7, #11]
 800313a:	7afb      	ldrb	r3, [r7, #11]
 800313c:	72bb      	strb	r3, [r7, #10]
 800313e:	2301      	movs	r3, #1
 8003140:	813b      	strh	r3, [r7, #8]
	do {
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	60fa      	str	r2, [r7, #12]
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	4413      	add	r3, r2
 800314c:	22c1      	movs	r2, #193	; 0xc1
 800314e:	701a      	strb	r2, [r3, #0]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	60fa      	str	r2, [r7, #12]
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	4413      	add	r3, r2
 800315a:	2200      	movs	r2, #0
 800315c:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 800315e:	893b      	ldrh	r3, [r7, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00b      	beq.n	800317c <create_xdir+0x6c>
 8003164:	7abb      	ldrb	r3, [r7, #10]
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	4413      	add	r3, r2
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	813b      	strh	r3, [r7, #8]
 8003170:	893b      	ldrh	r3, [r7, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <create_xdir+0x6c>
 8003176:	7abb      	ldrb	r3, [r7, #10]
 8003178:	3301      	adds	r3, #1
 800317a:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, wc); 		/* Store it */
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4413      	add	r3, r2
 8003182:	893a      	ldrh	r2, [r7, #8]
 8003184:	4611      	mov	r1, r2
 8003186:	4618      	mov	r0, r3
 8003188:	f7fe f852 	bl	8001230 <st_word>
			i += 2;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	3302      	adds	r3, #2
 8003190:	60fb      	str	r3, [r7, #12]
		} while (i % SZDIRE != 0);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1e0      	bne.n	800315e <create_xdir+0x4e>
		nc1++;
 800319c:	7afb      	ldrb	r3, [r7, #11]
 800319e:	3301      	adds	r3, #1
 80031a0:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
 80031a2:	7abb      	ldrb	r3, [r7, #10]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	4413      	add	r3, r2
 80031aa:	881b      	ldrh	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1c8      	bne.n	8003142 <create_xdir+0x32>

	dirb[XDIR_NumName] = nlen;		/* Set name length */
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3323      	adds	r3, #35	; 0x23
 80031b4:	7aba      	ldrb	r2, [r7, #10]
 80031b6:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3301      	adds	r3, #1
 80031bc:	7afa      	ldrb	r2, [r7, #11]
 80031be:	3201      	adds	r2, #1
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80031ca:	6838      	ldr	r0, [r7, #0]
 80031cc:	f7ff fd3b 	bl	8002c46 <xname_sum>
 80031d0:	4603      	mov	r3, r0
 80031d2:	4619      	mov	r1, r3
 80031d4:	4620      	mov	r0, r4
 80031d6:	f7fe f82b 	bl	8001230 <st_word>
}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd90      	pop	{r4, r7, pc}

080031e2 <dir_read>:

static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b086      	sub	sp, #24
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
 80031ea:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80031ec:	2304      	movs	r3, #4
 80031ee:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	613b      	str	r3, [r7, #16]
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 80031f6:	23ff      	movs	r3, #255	; 0xff
 80031f8:	757b      	strb	r3, [r7, #21]
 80031fa:	23ff      	movs	r3, #255	; 0xff
 80031fc:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80031fe:	e09f      	b.n	8003340 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003204:	4619      	mov	r1, r3
 8003206:	6938      	ldr	r0, [r7, #16]
 8003208:	f7fe fa60 	bl	80016cc <move_window>
 800320c:	4603      	mov	r3, r0
 800320e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003210:	7dfb      	ldrb	r3, [r7, #23]
 8003212:	2b00      	cmp	r3, #0
 8003214:	f040 809a 	bne.w	800334c <dir_read+0x16a>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	75bb      	strb	r3, [r7, #22]
		if (b == 0) {
 8003220:	7dbb      	ldrb	r3, [r7, #22]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d102      	bne.n	800322c <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8003226:	2304      	movs	r3, #4
 8003228:	75fb      	strb	r3, [r7, #23]
 800322a:	e096      	b.n	800335a <dir_read+0x178>
		}
#if FF_FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b04      	cmp	r3, #4
 8003232:	d118      	bne.n	8003266 <dir_read+0x84>
			if (FF_USE_LABEL && vol) {
				if (b == ET_VLABEL) break;	/* Volume label entry? */
			} else {
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
 8003234:	7dbb      	ldrb	r3, [r7, #22]
 8003236:	2b85      	cmp	r3, #133	; 0x85
 8003238:	d179      	bne.n	800332e <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7ff fdd8 	bl	8002df8 <load_xdir>
 8003248:	4603      	mov	r3, r0
 800324a:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800324c:	7dfb      	ldrb	r3, [r7, #23]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d17e      	bne.n	8003350 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	3304      	adds	r3, #4
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800325e:	b2da      	uxtb	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	719a      	strb	r2, [r3, #6]
					}
					break;
 8003264:	e074      	b.n	8003350 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326a:	330b      	adds	r3, #11
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003272:	73fb      	strb	r3, [r7, #15]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	7bfa      	ldrb	r2, [r7, #15]
 8003278:	719a      	strb	r2, [r3, #6]
#if FF_USE_LFN		/* LFN configuration */
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800327a:	7dbb      	ldrb	r3, [r7, #22]
 800327c:	2be5      	cmp	r3, #229	; 0xe5
 800327e:	d00e      	beq.n	800329e <dir_read+0xbc>
 8003280:	7dbb      	ldrb	r3, [r7, #22]
 8003282:	2b2e      	cmp	r3, #46	; 0x2e
 8003284:	d00b      	beq.n	800329e <dir_read+0xbc>
 8003286:	7bfb      	ldrb	r3, [r7, #15]
 8003288:	f023 0320 	bic.w	r3, r3, #32
 800328c:	2b08      	cmp	r3, #8
 800328e:	bf0c      	ite	eq
 8003290:	2301      	moveq	r3, #1
 8003292:	2300      	movne	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	461a      	mov	r2, r3
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	4293      	cmp	r3, r2
 800329c:	d002      	beq.n	80032a4 <dir_read+0xc2>
				ord = 0xFF;
 800329e:	23ff      	movs	r3, #255	; 0xff
 80032a0:	757b      	strb	r3, [r7, #21]
 80032a2:	e044      	b.n	800332e <dir_read+0x14c>
			} else {
				if (attr == AM_LFN) {			/* An LFN entry is found */
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
 80032a6:	2b0f      	cmp	r3, #15
 80032a8:	d12f      	bne.n	800330a <dir_read+0x128>
					if (b & LLEF) {			/* Is it start of an LFN sequence? */
 80032aa:	7dbb      	ldrb	r3, [r7, #22]
 80032ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00d      	beq.n	80032d0 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b8:	7b5b      	ldrb	r3, [r3, #13]
 80032ba:	753b      	strb	r3, [r7, #20]
						b &= (BYTE)~LLEF; ord = b;
 80032bc:	7dbb      	ldrb	r3, [r7, #22]
 80032be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032c2:	75bb      	strb	r3, [r7, #22]
 80032c4:	7dbb      	ldrb	r3, [r7, #22]
 80032c6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80032d0:	7dba      	ldrb	r2, [r7, #22]
 80032d2:	7d7b      	ldrb	r3, [r7, #21]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d115      	bne.n	8003304 <dir_read+0x122>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032dc:	330d      	adds	r3, #13
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	7d3a      	ldrb	r2, [r7, #20]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d10e      	bne.n	8003304 <dir_read+0x122>
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ee:	4619      	mov	r1, r3
 80032f0:	4610      	mov	r0, r2
 80032f2:	f7ff fae5 	bl	80028c0 <pick_lfn>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <dir_read+0x122>
 80032fc:	7d7b      	ldrb	r3, [r7, #21]
 80032fe:	3b01      	subs	r3, #1
 8003300:	b2db      	uxtb	r3, r3
 8003302:	e000      	b.n	8003306 <dir_read+0x124>
 8003304:	23ff      	movs	r3, #255	; 0xff
 8003306:	757b      	strb	r3, [r7, #21]
 8003308:	e011      	b.n	800332e <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800330a:	7d7b      	ldrb	r3, [r7, #21]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d109      	bne.n	8003324 <dir_read+0x142>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff fc42 	bl	8002b9e <sum_sfn>
 800331a:	4603      	mov	r3, r0
 800331c:	461a      	mov	r2, r3
 800331e:	7d3b      	ldrb	r3, [r7, #20]
 8003320:	4293      	cmp	r3, r2
 8003322:	d017      	beq.n	8003354 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f04f 32ff 	mov.w	r2, #4294967295
 800332a:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800332c:	e012      	b.n	8003354 <dir_read+0x172>
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800332e:	2100      	movs	r1, #0
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7ff f917 	bl	8002564 <dir_next>
 8003336:	4603      	mov	r3, r0
 8003338:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800333a:	7dfb      	ldrb	r3, [r7, #23]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10b      	bne.n	8003358 <dir_read+0x176>
	while (dp->sect) {
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	2b00      	cmp	r3, #0
 8003346:	f47f af5b 	bne.w	8003200 <dir_read+0x1e>
 800334a:	e006      	b.n	800335a <dir_read+0x178>
		if (res != FR_OK) break;
 800334c:	bf00      	nop
 800334e:	e004      	b.n	800335a <dir_read+0x178>
					break;
 8003350:	bf00      	nop
 8003352:	e002      	b.n	800335a <dir_read+0x178>
					break;
 8003354:	bf00      	nop
 8003356:	e000      	b.n	800335a <dir_read+0x178>
		if (res != FR_OK) break;
 8003358:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800335a:	7dfb      	ldrb	r3, [r7, #23]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <dir_read+0x184>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 8003366:	7dfb      	ldrb	r3, [r7, #23]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8003370:	b590      	push	{r4, r7, lr}
 8003372:	b089      	sub	sp, #36	; 0x24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800337e:	2100      	movs	r1, #0
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff f869 	bl	8002458 <dir_sdi>
 8003386:	4603      	mov	r3, r0
 8003388:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800338a:	7ffb      	ldrb	r3, [r7, #31]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <dir_find+0x24>
 8003390:	7ffb      	ldrb	r3, [r7, #31]
 8003392:	e111      	b.n	80035b8 <dir_find+0x248>
#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b04      	cmp	r3, #4
 800339a:	d163      	bne.n	8003464 <dir_find+0xf4>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff fc50 	bl	8002c46 <xname_sum>
 80033a6:	4603      	mov	r3, r0
 80033a8:	813b      	strh	r3, [r7, #8]

		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 80033aa:	e04e      	b.n	800344a <dir_find+0xda>
#if FF_MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > FF_MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	3324      	adds	r3, #36	; 0x24
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd fe44 	bl	8001040 <ld_word>
 80033b8:	4603      	mov	r3, r0
 80033ba:	461a      	mov	r2, r3
 80033bc:	893b      	ldrh	r3, [r7, #8]
 80033be:	4293      	cmp	r3, r2
 80033c0:	d000      	beq.n	80033c4 <dir_find+0x54>
 80033c2:	e042      	b.n	800344a <dir_find+0xda>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80033cc:	76fb      	strb	r3, [r7, #27]
 80033ce:	2340      	movs	r3, #64	; 0x40
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	2300      	movs	r3, #0
 80033d4:	613b      	str	r3, [r7, #16]
 80033d6:	e028      	b.n	800342a <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f003 031f 	and.w	r3, r3, #31
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d102      	bne.n	80033e8 <dir_find+0x78>
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	3302      	adds	r3, #2
 80033e6:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	691a      	ldr	r2, [r3, #16]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	4413      	add	r3, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fd fe25 	bl	8001040 <ld_word>
 80033f6:	4603      	mov	r3, r0
 80033f8:	4618      	mov	r0, r3
 80033fa:	f002 ff05 	bl	8006208 <ff_wtoupper>
 80033fe:	4604      	mov	r4, r0
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	4413      	add	r3, r2
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f002 fefb 	bl	8006208 <ff_wtoupper>
 8003412:	4603      	mov	r3, r0
 8003414:	429c      	cmp	r4, r3
 8003416:	d10c      	bne.n	8003432 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8003418:	7efb      	ldrb	r3, [r7, #27]
 800341a:	3b01      	subs	r3, #1
 800341c:	76fb      	strb	r3, [r7, #27]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	3302      	adds	r3, #2
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	3301      	adds	r3, #1
 8003428:	613b      	str	r3, [r7, #16]
 800342a:	7efb      	ldrb	r3, [r7, #27]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1d3      	bne.n	80033d8 <dir_find+0x68>
 8003430:	e000      	b.n	8003434 <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8003432:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8003434:	7efb      	ldrb	r3, [r7, #27]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d107      	bne.n	800344a <dir_find+0xda>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	4413      	add	r3, r2
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d009      	beq.n	800345e <dir_find+0xee>
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 800344a:	2100      	movs	r1, #0
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff fec8 	bl	80031e2 <dir_read>
 8003452:	4603      	mov	r3, r0
 8003454:	77fb      	strb	r3, [r7, #31]
 8003456:	7ffb      	ldrb	r3, [r7, #31]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0a7      	beq.n	80033ac <dir_find+0x3c>
 800345c:	e000      	b.n	8003460 <dir_find+0xf0>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800345e:	bf00      	nop
		}
		return res;
 8003460:	7ffb      	ldrb	r3, [r7, #31]
 8003462:	e0a9      	b.n	80035b8 <dir_find+0x248>
	}
#endif
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003464:	23ff      	movs	r3, #255	; 0xff
 8003466:	773b      	strb	r3, [r7, #28]
 8003468:	7f3b      	ldrb	r3, [r7, #28]
 800346a:	777b      	strb	r3, [r7, #29]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f04f 32ff 	mov.w	r2, #4294967295
 8003472:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003478:	4619      	mov	r1, r3
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f7fe f926 	bl	80016cc <move_window>
 8003480:	4603      	mov	r3, r0
 8003482:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8003484:	7ffb      	ldrb	r3, [r7, #31]
 8003486:	2b00      	cmp	r3, #0
 8003488:	f040 8090 	bne.w	80035ac <dir_find+0x23c>
		c = dp->dir[DIR_Name];
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003494:	7fbb      	ldrb	r3, [r7, #30]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d102      	bne.n	80034a0 <dir_find+0x130>
 800349a:	2304      	movs	r3, #4
 800349c:	77fb      	strb	r3, [r7, #31]
 800349e:	e08a      	b.n	80035b6 <dir_find+0x246>
#if FF_USE_LFN		/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a4:	330b      	adds	r3, #11
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034ac:	72fb      	strb	r3, [r7, #11]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	7afa      	ldrb	r2, [r7, #11]
 80034b2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80034b4:	7fbb      	ldrb	r3, [r7, #30]
 80034b6:	2be5      	cmp	r3, #229	; 0xe5
 80034b8:	d007      	beq.n	80034ca <dir_find+0x15a>
 80034ba:	7afb      	ldrb	r3, [r7, #11]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d009      	beq.n	80034d8 <dir_find+0x168>
 80034c4:	7afb      	ldrb	r3, [r7, #11]
 80034c6:	2b0f      	cmp	r3, #15
 80034c8:	d006      	beq.n	80034d8 <dir_find+0x168>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80034ca:	23ff      	movs	r3, #255	; 0xff
 80034cc:	777b      	strb	r3, [r7, #29]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f04f 32ff 	mov.w	r2, #4294967295
 80034d4:	64da      	str	r2, [r3, #76]	; 0x4c
 80034d6:	e05e      	b.n	8003596 <dir_find+0x226>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80034d8:	7afb      	ldrb	r3, [r7, #11]
 80034da:	2b0f      	cmp	r3, #15
 80034dc:	d136      	bne.n	800354c <dir_find+0x1dc>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80034e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d154      	bne.n	8003596 <dir_find+0x226>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80034ec:	7fbb      	ldrb	r3, [r7, #30]
 80034ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00d      	beq.n	8003512 <dir_find+0x1a2>
						sum = dp->dir[LDIR_Chksum];
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fa:	7b5b      	ldrb	r3, [r3, #13]
 80034fc:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80034fe:	7fbb      	ldrb	r3, [r7, #30]
 8003500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003504:	77bb      	strb	r3, [r7, #30]
 8003506:	7fbb      	ldrb	r3, [r7, #30]
 8003508:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8003512:	7fba      	ldrb	r2, [r7, #30]
 8003514:	7f7b      	ldrb	r3, [r7, #29]
 8003516:	429a      	cmp	r2, r3
 8003518:	d115      	bne.n	8003546 <dir_find+0x1d6>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351e:	330d      	adds	r3, #13
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	7f3a      	ldrb	r2, [r7, #28]
 8003524:	429a      	cmp	r2, r3
 8003526:	d10e      	bne.n	8003546 <dir_find+0x1d6>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	68da      	ldr	r2, [r3, #12]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003530:	4619      	mov	r1, r3
 8003532:	4610      	mov	r0, r2
 8003534:	f7ff f956 	bl	80027e4 <cmp_lfn>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <dir_find+0x1d6>
 800353e:	7f7b      	ldrb	r3, [r7, #29]
 8003540:	3b01      	subs	r3, #1
 8003542:	b2db      	uxtb	r3, r3
 8003544:	e000      	b.n	8003548 <dir_find+0x1d8>
 8003546:	23ff      	movs	r3, #255	; 0xff
 8003548:	777b      	strb	r3, [r7, #29]
 800354a:	e024      	b.n	8003596 <dir_find+0x226>
				}
			} else {					/* An SFN entry is found */
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800354c:	7f7b      	ldrb	r3, [r7, #29]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d109      	bne.n	8003566 <dir_find+0x1f6>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff fb21 	bl	8002b9e <sum_sfn>
 800355c:	4603      	mov	r3, r0
 800355e:	461a      	mov	r2, r3
 8003560:	7f3b      	ldrb	r3, [r7, #28]
 8003562:	4293      	cmp	r3, r2
 8003564:	d024      	beq.n	80035b0 <dir_find+0x240>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800356c:	f003 0301 	and.w	r3, r3, #1
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10a      	bne.n	800358a <dir_find+0x21a>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3340      	adds	r3, #64	; 0x40
 800357c:	220b      	movs	r2, #11
 800357e:	4619      	mov	r1, r3
 8003580:	f7fd ff5f 	bl	8001442 <mem_cmp>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d014      	beq.n	80035b4 <dir_find+0x244>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800358a:	23ff      	movs	r3, #255	; 0xff
 800358c:	777b      	strb	r3, [r7, #29]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f04f 32ff 	mov.w	r2, #4294967295
 8003594:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8003596:	2100      	movs	r1, #0
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7fe ffe3 	bl	8002564 <dir_next>
 800359e:	4603      	mov	r3, r0
 80035a0:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 80035a2:	7ffb      	ldrb	r3, [r7, #31]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f43f af65 	beq.w	8003474 <dir_find+0x104>
 80035aa:	e004      	b.n	80035b6 <dir_find+0x246>
		if (res != FR_OK) break;
 80035ac:	bf00      	nop
 80035ae:	e002      	b.n	80035b6 <dir_find+0x246>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80035b0:	bf00      	nop
 80035b2:	e000      	b.n	80035b6 <dir_find+0x246>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80035b4:	bf00      	nop

	return res;
 80035b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3724      	adds	r7, #36	; 0x24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd90      	pop	{r4, r7, pc}

080035c0 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 80035c0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80035c4:	b0a0      	sub	sp, #128	; 0x80
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	66fb      	str	r3, [r7, #108]	; 0x6c
#if FF_USE_LFN		/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80035d6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <dir_register+0x22>
 80035de:	2306      	movs	r3, #6
 80035e0:	e19a      	b.n	8003918 <dir_register+0x358>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80035e2:	2300      	movs	r3, #0
 80035e4:	677b      	str	r3, [r7, #116]	; 0x74
 80035e6:	e002      	b.n	80035ee <dir_register+0x2e>
 80035e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035ea:	3301      	adds	r3, #1
 80035ec:	677b      	str	r3, [r7, #116]	; 0x74
 80035ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	4413      	add	r3, r2
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f4      	bne.n	80035e8 <dir_register+0x28>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80035fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b04      	cmp	r3, #4
 8003604:	f040 80ac 	bne.w	8003760 <dir_register+0x1a0>
		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8003608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800360a:	330e      	adds	r3, #14
 800360c:	4aa8      	ldr	r2, [pc, #672]	; (80038b0 <dir_register+0x2f0>)
 800360e:	fba2 2303 	umull	r2, r3, r2, r3
 8003612:	08db      	lsrs	r3, r3, #3
 8003614:	3302      	adds	r3, #2
 8003616:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate directory entries */
 8003618:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7ff f847 	bl	80026ae <dir_alloc>
 8003620:	4603      	mov	r3, r0
 8003622:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 8003626:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <dir_register+0x74>
 800362e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003632:	e171      	b.n	8003918 <dir_register+0x358>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003638:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800363a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800363e:	3b01      	subs	r3, #1
 8003640:	015b      	lsls	r3, r3, #5
 8003642:	1ad2      	subs	r2, r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	79db      	ldrb	r3, [r3, #7]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d07b      	beq.n	800374c <dir_register+0x18c>
			dp->obj.stat &= ~4;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	79db      	ldrb	r3, [r3, #7]
 8003658:	f023 0304 	bic.w	r3, r3, #4
 800365c:	b2da      	uxtb	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	71da      	strb	r2, [r3, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4618      	mov	r0, r3
 8003666:	f7fe fbeb 	bl	8001e40 <fill_first_frag>
 800366a:	4603      	mov	r3, r0
 800366c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8003670:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003674:	2b00      	cmp	r3, #0
 8003676:	d002      	beq.n	800367e <dir_register+0xbe>
 8003678:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800367c:	e14c      	b.n	8003918 <dir_register+0x358>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003684:	f04f 32ff 	mov.w	r2, #4294967295
 8003688:	4619      	mov	r1, r3
 800368a:	f7fe fc08 	bl	8001e9e <fill_last_frag>
 800368e:	4603      	mov	r3, r0
 8003690:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8003694:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <dir_register+0xe2>
 800369c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80036a0:	e13a      	b.n	8003918 <dir_register+0x358>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d050      	beq.n	800374c <dir_register+0x18c>
				DIR dj;

				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	f107 0308 	add.w	r3, r7, #8
 80036b0:	4611      	mov	r1, r2
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff fc91 	bl	8002fda <load_obj_xdir>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) return res;
 80036be:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d002      	beq.n	80036cc <dir_register+0x10c>
 80036c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80036ca:	e125      	b.n	8003918 <dir_register+0x358>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);			/* Increase the directory size by cluster size */
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 80036d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d4:	895b      	ldrh	r3, [r3, #10]
 80036d6:	025b      	lsls	r3, r3, #9
 80036d8:	469b      	mov	fp, r3
 80036da:	f04f 0c00 	mov.w	ip, #0
 80036de:	eb1b 0301 	adds.w	r3, fp, r1
 80036e2:	eb4c 0402 	adc.w	r4, ip, r2
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	e9c2 3404 	strd	r3, r4, [r2, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);	/* Update the allocation status */
 80036ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80036fa:	461a      	mov	r2, r3
 80036fc:	4623      	mov	r3, r4
 80036fe:	4608      	mov	r0, r1
 8003700:	f7fd fddd 	bl	80012be <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8003704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003712:	461a      	mov	r2, r3
 8003714:	4623      	mov	r3, r4
 8003716:	4608      	mov	r0, r1
 8003718:	f7fd fdd1 	bl	80012be <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	79da      	ldrb	r2, [r3, #7]
 8003720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	3321      	adds	r3, #33	; 0x21
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	701a      	strb	r2, [r3, #0]
				res = store_xdir(&dj);				/* Store the object status */
 800372e:	f107 0308 	add.w	r3, r7, #8
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fc91 	bl	800305a <store_xdir>
 8003738:	4603      	mov	r3, r0
 800373a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) return res;
 800373e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003742:	2b00      	cmp	r3, #0
 8003744:	d002      	beq.n	800374c <dir_register+0x18c>
 8003746:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800374a:	e0e5      	b.n	8003918 <dir_register+0x358>
			}
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800374c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800374e:	691a      	ldr	r2, [r3, #16]
 8003750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4619      	mov	r1, r3
 8003756:	4610      	mov	r0, r2
 8003758:	f7ff fcda 	bl	8003110 <create_xdir>
		return FR_OK;
 800375c:	2300      	movs	r3, #0
 800375e:	e0db      	b.n	8003918 <dir_register+0x358>
	}
#endif
	/* On the FAT/FAT32 volume */
	mem_cpy(sn, dp->fn, 12);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8003766:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800376a:	220c      	movs	r2, #12
 800376c:	4618      	mov	r0, r3
 800376e:	f7fd fe2d 	bl	80013cc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8003772:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d033      	beq.n	80037e6 <dir_register+0x226>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2240      	movs	r2, #64	; 0x40
 8003782:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 8003786:	2301      	movs	r3, #1
 8003788:	67bb      	str	r3, [r7, #120]	; 0x78
 800378a:	e016      	b.n	80037ba <dir_register+0x1fa>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8003792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800379a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800379c:	f7ff f95c 	bl	8002a58 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff fde5 	bl	8003370 <dir_find>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 80037ac:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d106      	bne.n	80037c2 <dir_register+0x202>
		for (n = 1; n < 100; n++) {
 80037b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037b6:	3301      	adds	r3, #1
 80037b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80037ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037bc:	2b63      	cmp	r3, #99	; 0x63
 80037be:	d9e5      	bls.n	800378c <dir_register+0x1cc>
 80037c0:	e000      	b.n	80037c4 <dir_register+0x204>
			if (res != FR_OK) break;
 80037c2:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80037c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037c6:	2b64      	cmp	r3, #100	; 0x64
 80037c8:	d101      	bne.n	80037ce <dir_register+0x20e>
 80037ca:	2307      	movs	r3, #7
 80037cc:	e0a4      	b.n	8003918 <dir_register+0x358>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80037ce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d002      	beq.n	80037dc <dir_register+0x21c>
 80037d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80037da:	e09d      	b.n	8003918 <dir_register+0x358>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80037dc:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80037e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d007      	beq.n	8003802 <dir_register+0x242>
 80037f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f4:	330c      	adds	r3, #12
 80037f6:	4a2f      	ldr	r2, [pc, #188]	; (80038b4 <dir_register+0x2f4>)
 80037f8:	fba2 2303 	umull	r2, r3, r2, r3
 80037fc:	089b      	lsrs	r3, r3, #2
 80037fe:	3301      	adds	r3, #1
 8003800:	e000      	b.n	8003804 <dir_register+0x244>
 8003802:	2301      	movs	r3, #1
 8003804:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8003806:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7fe ff50 	bl	80026ae <dir_alloc>
 800380e:	4603      	mov	r3, r0
 8003810:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8003814:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003818:	2b00      	cmp	r3, #0
 800381a:	d14e      	bne.n	80038ba <dir_register+0x2fa>
 800381c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800381e:	3b01      	subs	r3, #1
 8003820:	673b      	str	r3, [r7, #112]	; 0x70
 8003822:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003824:	2b00      	cmp	r3, #0
 8003826:	d048      	beq.n	80038ba <dir_register+0x2fa>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800382c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800382e:	015b      	lsls	r3, r3, #5
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	4619      	mov	r1, r3
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7fe fe0f 	bl	8002458 <dir_sdi>
 800383a:	4603      	mov	r3, r0
 800383c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8003840:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003844:	2b00      	cmp	r3, #0
 8003846:	d138      	bne.n	80038ba <dir_register+0x2fa>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3340      	adds	r3, #64	; 0x40
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff f9a6 	bl	8002b9e <sum_sfn>
 8003852:	4603      	mov	r3, r0
 8003854:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	4619      	mov	r1, r3
 800385e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003860:	f7fd ff34 	bl	80016cc <move_window>
 8003864:	4603      	mov	r3, r0
 8003866:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800386a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800386e:	2b00      	cmp	r3, #0
 8003870:	d122      	bne.n	80038b8 <dir_register+0x2f8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8003872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003874:	68d8      	ldr	r0, [r3, #12]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800387a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800387c:	b2da      	uxtb	r2, r3
 800387e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8003882:	f7ff f881 	bl	8002988 <put_lfn>
				fs->wflag = 1;
 8003886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003888:	2201      	movs	r2, #1
 800388a:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800388c:	2100      	movs	r1, #0
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7fe fe68 	bl	8002564 <dir_next>
 8003894:	4603      	mov	r3, r0
 8003896:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800389a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10b      	bne.n	80038ba <dir_register+0x2fa>
 80038a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038a4:	3b01      	subs	r3, #1
 80038a6:	673b      	str	r3, [r7, #112]	; 0x70
 80038a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1d4      	bne.n	8003858 <dir_register+0x298>
 80038ae:	e004      	b.n	80038ba <dir_register+0x2fa>
 80038b0:	88888889 	.word	0x88888889
 80038b4:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 80038b8:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80038ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d128      	bne.n	8003914 <dir_register+0x354>
		res = move_window(fs, dp->sect);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c6:	4619      	mov	r1, r3
 80038c8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80038ca:	f7fd feff 	bl	80016cc <move_window>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 80038d4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d11b      	bne.n	8003914 <dir_register+0x354>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e0:	2220      	movs	r2, #32
 80038e2:	2100      	movs	r1, #0
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fd fd92 	bl	800140e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3340      	adds	r3, #64	; 0x40
 80038f2:	220b      	movs	r2, #11
 80038f4:	4619      	mov	r1, r3
 80038f6:	f7fd fd69 	bl	80013cc <mem_cpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003904:	330c      	adds	r3, #12
 8003906:	f002 0218 	and.w	r2, r2, #24
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800390e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003910:	2201      	movs	r2, #1
 8003912:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8003914:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003918:	4618      	mov	r0, r3
 800391a:	3780      	adds	r7, #128	; 0x80
 800391c:	46bd      	mov	sp, r7
 800391e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003922:	bf00      	nop

08003924 <dir_remove>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp					/* Directory object pointing the entry to be removed */
)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	613b      	str	r3, [r7, #16]
#if FF_USE_LFN		/* LFN configuration */
	DWORD last = dp->dptr;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003940:	d007      	beq.n	8003952 <dir_remove+0x2e>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003946:	4619      	mov	r1, r3
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7fe fd85 	bl	8002458 <dir_sdi>
 800394e:	4603      	mov	r3, r0
 8003950:	e000      	b.n	8003954 <dir_remove+0x30>
 8003952:	2300      	movs	r3, #0
 8003954:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003956:	7dfb      	ldrb	r3, [r7, #23]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d136      	bne.n	80039ca <dir_remove+0xa6>
		do {
			res = move_window(fs, dp->sect);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003960:	4619      	mov	r1, r3
 8003962:	6938      	ldr	r0, [r7, #16]
 8003964:	f7fd feb2 	bl	80016cc <move_window>
 8003968:	4603      	mov	r3, r0
 800396a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800396c:	7dfb      	ldrb	r3, [r7, #23]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d123      	bne.n	80039ba <dir_remove+0x96>
			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b04      	cmp	r3, #4
 8003978:	d109      	bne.n	800398e <dir_remove+0x6a>
				dp->dir[XDIR_Type] &= 0x7F;	/* Clear the entry InUse flag. */
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397e:	781a      	ldrb	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003984:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	701a      	strb	r2, [r3, #0]
 800398c:	e003      	b.n	8003996 <dir_remove+0x72>
			} else {									/* On the FAT/FAT32 volume */
				dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'. */
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003992:	22e5      	movs	r2, #229	; 0xe5
 8003994:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2201      	movs	r2, #1
 800399a:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d90b      	bls.n	80039be <dir_remove+0x9a>
			res = dir_next(dp, 0);	/* Next entry */
 80039a6:	2100      	movs	r1, #0
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7fe fddb 	bl	8002564 <dir_next>
 80039ae:	4603      	mov	r3, r0
 80039b0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 80039b2:	7dfb      	ldrb	r3, [r7, #23]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0d1      	beq.n	800395c <dir_remove+0x38>
 80039b8:	e002      	b.n	80039c0 <dir_remove+0x9c>
			if (res != FR_OK) break;
 80039ba:	bf00      	nop
 80039bc:	e000      	b.n	80039c0 <dir_remove+0x9c>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80039be:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 80039c0:	7dfb      	ldrb	r3, [r7, #23]
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d101      	bne.n	80039ca <dir_remove+0xa6>
 80039c6:	2302      	movs	r3, #2
 80039c8:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
		fs->wflag = 1;
	}
#endif

	return res;
 80039ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <get_fileinfo>:

static void get_fileinfo (
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno		/* Pointer to the file information to be filled */
)
{
 80039d4:	b590      	push	{r4, r7, lr}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
	UINT si, di;
#if FF_USE_LFN
	WCHAR wc, hs;
	FATFS *fs = dp->obj.fs;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	60bb      	str	r3, [r7, #8]
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2200      	movs	r2, #0
 80039e8:	769a      	strb	r2, [r3, #26]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 810f 	beq.w	8003c12 <get_fileinfo+0x23e>

#if FF_USE_LFN		/* LFN configuration */
#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d106      	bne.n	8003a0a <get_fileinfo+0x36>
		get_xfileinfo(fs->dirbuf, fno);
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	6839      	ldr	r1, [r7, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff f953 	bl	8002cae <get_xfileinfo>
		return;
 8003a08:	e104      	b.n	8003c14 <get_fileinfo+0x240>
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a12:	d04e      	beq.n	8003ab2 <get_fileinfo+0xde>
			si = di = hs = 0;
 8003a14:	2300      	movs	r3, #0
 8003a16:	81bb      	strh	r3, [r7, #12]
 8003a18:	2300      	movs	r3, #0
 8003a1a:	613b      	str	r3, [r7, #16]
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	617b      	str	r3, [r7, #20]
			while (fs->lfnbuf[si] != 0) {
 8003a20:	e034      	b.n	8003a8c <get_fileinfo+0xb8>
				wc = fs->lfnbuf[si++];		/* Get an LFN character (UTF-16) */
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	1c59      	adds	r1, r3, #1
 8003a2a:	6179      	str	r1, [r7, #20]
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	4413      	add	r3, r2
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	81fb      	strh	r3, [r7, #14]
				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 8003a34:	89bb      	ldrh	r3, [r7, #12]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10a      	bne.n	8003a50 <get_fileinfo+0x7c>
 8003a3a:	89fb      	ldrh	r3, [r7, #14]
 8003a3c:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8003a40:	d306      	bcc.n	8003a50 <get_fileinfo+0x7c>
 8003a42:	89fb      	ldrh	r3, [r7, #14]
 8003a44:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8003a48:	d202      	bcs.n	8003a50 <get_fileinfo+0x7c>
					hs = wc; continue;		/* Get low surrogate */
 8003a4a:	89fb      	ldrh	r3, [r7, #14]
 8003a4c:	81bb      	strh	r3, [r7, #12]
 8003a4e:	e01d      	b.n	8003a8c <get_fileinfo+0xb8>
				}
				wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in UTF-16 or UTF-8 encoding */
 8003a50:	89bb      	ldrh	r3, [r7, #12]
 8003a52:	041a      	lsls	r2, r3, #16
 8003a54:	89fb      	ldrh	r3, [r7, #14]
 8003a56:	ea42 0003 	orr.w	r0, r2, r3
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	3318      	adds	r3, #24
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	4413      	add	r3, r2
 8003a62:	1c99      	adds	r1, r3, #2
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f7fd fdba 	bl	80015e4 <put_utf>
 8003a70:	4603      	mov	r3, r0
 8003a72:	81fb      	strh	r3, [r7, #14]
				if (wc == 0) { di = 0; break; }	/* Invalid char or buffer overflow? */
 8003a74:	89fb      	ldrh	r3, [r7, #14]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d102      	bne.n	8003a80 <get_fileinfo+0xac>
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	613b      	str	r3, [r7, #16]
 8003a7e:	e00d      	b.n	8003a9c <get_fileinfo+0xc8>
				di += wc;
 8003a80:	89fb      	ldrh	r3, [r7, #14]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4413      	add	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
				hs = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	81bb      	strh	r3, [r7, #12]
			while (fs->lfnbuf[si] != 0) {
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	68da      	ldr	r2, [r3, #12]
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	4413      	add	r3, r2
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1c2      	bne.n	8003a22 <get_fileinfo+0x4e>
			}
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
 8003a9c:	89bb      	ldrh	r3, [r7, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <get_fileinfo+0xd2>
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	613b      	str	r3, [r7, #16]
			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	4413      	add	r3, r2
 8003aac:	331a      	adds	r3, #26
 8003aae:	2200      	movs	r2, #0
 8003ab0:	701a      	strb	r2, [r3, #0]
		}
	}

	si = di = 0;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	617b      	str	r3, [r7, #20]
	while (si < 11) {		/* Get SFN from SFN entry */
 8003aba:	e026      	b.n	8003b0a <get_fileinfo+0x136>
		wc = dp->dir[si++];			/* Get a char */
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	1c59      	adds	r1, r3, #1
 8003ac4:	6179      	str	r1, [r7, #20]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	81fb      	strh	r3, [r7, #14]
		if (wc == ' ') continue;	/* Skip padding spaces */
 8003acc:	89fb      	ldrh	r3, [r7, #14]
 8003ace:	2b20      	cmp	r3, #32
 8003ad0:	d100      	bne.n	8003ad4 <get_fileinfo+0x100>
 8003ad2:	e01a      	b.n	8003b0a <get_fileinfo+0x136>
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
 8003ad4:	89fb      	ldrh	r3, [r7, #14]
 8003ad6:	2b05      	cmp	r3, #5
 8003ad8:	d101      	bne.n	8003ade <get_fileinfo+0x10a>
 8003ada:	23e5      	movs	r3, #229	; 0xe5
 8003adc:	81fb      	strh	r3, [r7, #14]
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2b09      	cmp	r3, #9
 8003ae2:	d109      	bne.n	8003af8 <get_fileinfo+0x124>
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	2b0b      	cmp	r3, #11
 8003ae8:	d806      	bhi.n	8003af8 <get_fileinfo+0x124>
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	613a      	str	r2, [r7, #16]
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	4413      	add	r3, r2
 8003af4:	222e      	movs	r2, #46	; 0x2e
 8003af6:	735a      	strb	r2, [r3, #13]
		if (wc == 0) { di = 0; break; }		/* Wrong char in the current code page? */
		wc = put_utf(wc, &fno->altname[di], FF_SFN_BUF - di);	/* Store it in Unicode */
		if (wc == 0) { di = 0; break; }		/* Buffer overflow? */
		di += wc;
#else					/* ANSI/OEM output */
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	613a      	str	r2, [r7, #16]
 8003afe:	89fa      	ldrh	r2, [r7, #14]
 8003b00:	b2d1      	uxtb	r1, r2
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	4413      	add	r3, r2
 8003b06:	460a      	mov	r2, r1
 8003b08:	735a      	strb	r2, [r3, #13]
	while (si < 11) {		/* Get SFN from SFN entry */
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2b0a      	cmp	r3, #10
 8003b0e:	d9d5      	bls.n	8003abc <get_fileinfo+0xe8>
#endif
	}
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	4413      	add	r3, r2
 8003b16:	330d      	adds	r3, #13
 8003b18:	2200      	movs	r2, #0
 8003b1a:	701a      	strb	r2, [r3, #0]

	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	7e9b      	ldrb	r3, [r3, #26]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d150      	bne.n	8003bc6 <get_fileinfo+0x1f2>
		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccesible */
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d107      	bne.n	8003b3a <get_fileinfo+0x166>
			fno->fname[di++] = '?';
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	613a      	str	r2, [r7, #16]
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	4413      	add	r3, r2
 8003b34:	223f      	movs	r2, #63	; 0x3f
 8003b36:	769a      	strb	r2, [r3, #26]
 8003b38:	e036      	b.n	8003ba8 <get_fileinfo+0x1d4>
		} else {
			for (si = di = 0; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	617b      	str	r3, [r7, #20]
 8003b42:	e02a      	b.n	8003b9a <get_fileinfo+0x1c6>
				wc = (WCHAR)fno->altname[si];
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	4413      	add	r3, r2
 8003b4a:	330d      	adds	r3, #13
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	81fb      	strh	r3, [r7, #14]
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & ((si >= 9) ? NS_EXT : NS_BODY))) wc += 0x20;
 8003b50:	89fb      	ldrh	r3, [r7, #14]
 8003b52:	2b40      	cmp	r3, #64	; 0x40
 8003b54:	d913      	bls.n	8003b7e <get_fileinfo+0x1aa>
 8003b56:	89fb      	ldrh	r3, [r7, #14]
 8003b58:	2b5a      	cmp	r3, #90	; 0x5a
 8003b5a:	d810      	bhi.n	8003b7e <get_fileinfo+0x1aa>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b60:	330c      	adds	r3, #12
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d901      	bls.n	8003b70 <get_fileinfo+0x19c>
 8003b6c:	2310      	movs	r3, #16
 8003b6e:	e000      	b.n	8003b72 <get_fileinfo+0x19e>
 8003b70:	2308      	movs	r3, #8
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <get_fileinfo+0x1aa>
 8003b78:	89fb      	ldrh	r3, [r7, #14]
 8003b7a:	3320      	adds	r3, #32
 8003b7c:	81fb      	strh	r3, [r7, #14]
				fno->fname[di] = (TCHAR)wc;
 8003b7e:	89fb      	ldrh	r3, [r7, #14]
 8003b80:	b2d9      	uxtb	r1, r3
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4413      	add	r3, r2
 8003b88:	331a      	adds	r3, #26
 8003b8a:	460a      	mov	r2, r1
 8003b8c:	701a      	strb	r2, [r3, #0]
			for (si = di = 0; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	3301      	adds	r3, #1
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	3301      	adds	r3, #1
 8003b98:	613b      	str	r3, [r7, #16]
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	330d      	adds	r3, #13
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1cd      	bne.n	8003b44 <get_fileinfo+0x170>
			}
		}
		fno->fname[di] = 0;	/* Terminate the LFN */
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4413      	add	r3, r2
 8003bae:	331a      	adds	r3, #26
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb8:	330c      	adds	r3, #12
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d102      	bne.n	8003bc6 <get_fileinfo+0x1f2>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	735a      	strb	r2, [r3, #13]
		fno->fname[di++] = c;
	}
	fno->fname[di] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bca:	7ada      	ldrb	r2, [r3, #11]
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd4:	331c      	adds	r3, #28
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fd fa4a 	bl	8001070 <ld_dword>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f04f 0400 	mov.w	r4, #0
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	e9c2 3400 	strd	r3, r4, [r2]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bec:	3316      	adds	r3, #22
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fd fa26 	bl	8001040 <ld_word>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c00:	3318      	adds	r3, #24
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7fd fa1c 	bl	8001040 <ld_word>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	811a      	strh	r2, [r3, #8]
 8003c10:	e000      	b.n	8003c14 <get_fileinfo+0x240>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8003c12:	bf00      	nop
}
 8003c14:	371c      	adds	r7, #28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd90      	pop	{r4, r7, pc}
	...

08003c1c <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08a      	sub	sp, #40	; 0x28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
	UINT i, ni, si, di;
	const TCHAR *p;


	/* Create LFN into LFN working buffer */
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60bb      	str	r3, [r7, #8]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	613b      	str	r3, [r7, #16]
 8003c34:	2300      	movs	r3, #0
 8003c36:	617b      	str	r3, [r7, #20]
	for (;;) {
		uc = tchar2uni(&p);			/* Get a character */
 8003c38:	f107 0308 	add.w	r3, r7, #8
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fd fc8c 	bl	800155a <tchar2uni>
 8003c42:	60f8      	str	r0, [r7, #12]
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4a:	d101      	bne.n	8003c50 <create_name+0x34>
 8003c4c:	2306      	movs	r3, #6
 8003c4e:	e1f7      	b.n	8004040 <create_name+0x424>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c56:	d309      	bcc.n	8003c6c <create_name+0x50>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	0c19      	lsrs	r1, r3, #16
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	617a      	str	r2, [r7, #20]
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4413      	add	r3, r2
 8003c68:	b28a      	uxth	r2, r1
 8003c6a:	801a      	strh	r2, [r3, #0]
		wc = (WCHAR)uc;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
 8003c70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c72:	2b1f      	cmp	r3, #31
 8003c74:	d923      	bls.n	8003cbe <create_name+0xa2>
 8003c76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c78:	2b2f      	cmp	r3, #47	; 0x2f
 8003c7a:	d020      	beq.n	8003cbe <create_name+0xa2>
 8003c7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c7e:	2b5c      	cmp	r3, #92	; 0x5c
 8003c80:	d01d      	beq.n	8003cbe <create_name+0xa2>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8003c82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c84:	2b7f      	cmp	r3, #127	; 0x7f
 8003c86:	d809      	bhi.n	8003c9c <create_name+0x80>
 8003c88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	48a9      	ldr	r0, [pc, #676]	; (8003f34 <create_name+0x318>)
 8003c8e:	f7fd fbff 	bl	8001490 <chk_chr>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <create_name+0x80>
 8003c98:	2306      	movs	r3, #6
 8003c9a:	e1d1      	b.n	8004040 <create_name+0x424>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2bfe      	cmp	r3, #254	; 0xfe
 8003ca0:	d901      	bls.n	8003ca6 <create_name+0x8a>
 8003ca2:	2306      	movs	r3, #6
 8003ca4:	e1cc      	b.n	8004040 <create_name+0x424>
		lfn[di++] = wc;					/* Store the Unicode character */
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	617a      	str	r2, [r7, #20]
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cb4:	801a      	strh	r2, [r3, #0]
		uc = tchar2uni(&p);			/* Get a character */
 8003cb6:	e7bf      	b.n	8003c38 <create_name+0x1c>
	}
	while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	60bb      	str	r3, [r7, #8]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2b2f      	cmp	r3, #47	; 0x2f
 8003cc4:	d0f8      	beq.n	8003cb8 <create_name+0x9c>
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b5c      	cmp	r3, #92	; 0x5c
 8003ccc:	d0f4      	beq.n	8003cb8 <create_name+0x9c>
	*path = p;							/* Return pointer to the next segment */
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	601a      	str	r2, [r3, #0]
	cf = (wc < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8003cd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cd6:	2b1f      	cmp	r3, #31
 8003cd8:	d801      	bhi.n	8003cde <create_name+0xc2>
 8003cda:	2304      	movs	r3, #4
 8003cdc:	e000      	b.n	8003ce0 <create_name+0xc4>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

#if FF_FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d109      	bne.n	8003cfe <create_name+0xe2>
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	2b2e      	cmp	r3, #46	; 0x2e
 8003cfc:	d016      	beq.n	8003d2c <create_name+0x110>
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d14e      	bne.n	8003da2 <create_name+0x186>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4413      	add	r3, r2
 8003d12:	881b      	ldrh	r3, [r3, #0]
 8003d14:	2b2e      	cmp	r3, #46	; 0x2e
 8003d16:	d144      	bne.n	8003da2 <create_name+0x186>
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003d1e:	3b02      	subs	r3, #2
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	4413      	add	r3, r2
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	2b2e      	cmp	r3, #46	; 0x2e
 8003d2a:	d13a      	bne.n	8003da2 <create_name+0x186>
		lfn[di] = 0;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4413      	add	r3, r2
 8003d34:	2200      	movs	r2, #0
 8003d36:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++) {		/* Create dot name for SFN entry */
 8003d38:	2300      	movs	r3, #0
 8003d3a:	623b      	str	r3, [r7, #32]
 8003d3c:	e00f      	b.n	8003d5e <create_name+0x142>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8003d3e:	6a3a      	ldr	r2, [r7, #32]
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d201      	bcs.n	8003d4a <create_name+0x12e>
 8003d46:	212e      	movs	r1, #46	; 0x2e
 8003d48:	e000      	b.n	8003d4c <create_name+0x130>
 8003d4a:	2120      	movs	r1, #32
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	4413      	add	r3, r2
 8003d52:	3340      	adds	r3, #64	; 0x40
 8003d54:	460a      	mov	r2, r1
 8003d56:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++) {		/* Create dot name for SFN entry */
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	623b      	str	r3, [r7, #32]
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	2b0a      	cmp	r3, #10
 8003d62:	d9ec      	bls.n	8003d3e <create_name+0x122>
		}
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8003d64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003d68:	f043 0320 	orr.w	r3, r3, #32
 8003d6c:	b2d9      	uxtb	r1, r3
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	4413      	add	r3, r2
 8003d74:	3340      	adds	r3, #64	; 0x40
 8003d76:	460a      	mov	r2, r1
 8003d78:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	e160      	b.n	8004040 <create_name+0x424>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		wc = lfn[di - 1];
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003d84:	3b01      	subs	r3, #1
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc != ' ' && wc != '.') break;
 8003d90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d92:	2b20      	cmp	r3, #32
 8003d94:	d002      	beq.n	8003d9c <create_name+0x180>
 8003d96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d98:	2b2e      	cmp	r3, #46	; 0x2e
 8003d9a:	d106      	bne.n	8003daa <create_name+0x18e>
		di--;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1ea      	bne.n	8003d7e <create_name+0x162>
 8003da8:	e000      	b.n	8003dac <create_name+0x190>
		if (wc != ' ' && wc != '.') break;
 8003daa:	bf00      	nop
	}
	lfn[di] = 0;							/* LFN is created into the working buffer */
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4413      	add	r3, r2
 8003db4:	2200      	movs	r2, #0
 8003db6:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <create_name+0x1a6>
 8003dbe:	2306      	movs	r3, #6
 8003dc0:	e13e      	b.n	8004040 <create_name+0x424>

	/* Create SFN in directory form */
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61bb      	str	r3, [r7, #24]
 8003dc6:	e002      	b.n	8003dce <create_name+0x1b2>
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	61bb      	str	r3, [r7, #24]
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4413      	add	r3, r2
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	d0f5      	beq.n	8003dc8 <create_name+0x1ac>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d106      	bne.n	8003df0 <create_name+0x1d4>
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4413      	add	r3, r2
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	2b2e      	cmp	r3, #46	; 0x2e
 8003dee:	d109      	bne.n	8003e04 <create_name+0x1e8>
 8003df0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003df4:	f043 0303 	orr.w	r3, r3, #3
 8003df8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 8003dfc:	e002      	b.n	8003e04 <create_name+0x1e8>
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	3b01      	subs	r3, #1
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d009      	beq.n	8003e1e <create_name+0x202>
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003e10:	3b01      	subs	r3, #1
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4413      	add	r3, r2
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	2b2e      	cmp	r3, #46	; 0x2e
 8003e1c:	d1ef      	bne.n	8003dfe <create_name+0x1e2>

	mem_set(dp->fn, ' ', 11);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3340      	adds	r3, #64	; 0x40
 8003e22:	220b      	movs	r2, #11
 8003e24:	2120      	movs	r1, #32
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fd faf1 	bl	800140e <mem_set>
	i = b = 0; ni = 8;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e32:	2300      	movs	r3, #0
 8003e34:	623b      	str	r3, [r7, #32]
 8003e36:	2308      	movs	r3, #8
 8003e38:	61fb      	str	r3, [r7, #28]
	for (;;) {
		wc = lfn[si++];					/* Get an LFN character */
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	61ba      	str	r2, [r7, #24]
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4413      	add	r3, r2
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc == 0) break;				/* Break on end of the LFN */
 8003e4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 80ad 	beq.w	8003fac <create_name+0x390>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 8003e52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e54:	2b20      	cmp	r3, #32
 8003e56:	d006      	beq.n	8003e66 <create_name+0x24a>
 8003e58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e5a:	2b2e      	cmp	r3, #46	; 0x2e
 8003e5c:	d10a      	bne.n	8003e74 <create_name+0x258>
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d006      	beq.n	8003e74 <create_name+0x258>
			cf |= NS_LOSS | NS_LFN;
 8003e66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003e6a:	f043 0303 	orr.w	r3, r3, #3
 8003e6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			continue;
 8003e72:	e09a      	b.n	8003faa <create_name+0x38e>
		}

		if (i >= ni || si == di) {		/* End of field? */
 8003e74:	6a3a      	ldr	r2, [r7, #32]
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d203      	bcs.n	8003e84 <create_name+0x268>
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d123      	bne.n	8003ecc <create_name+0x2b0>
			if (ni == 11) {				/* Name extension overflow? */
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	2b0b      	cmp	r3, #11
 8003e88:	d106      	bne.n	8003e98 <create_name+0x27c>
				cf |= NS_LOSS | NS_LFN;
 8003e8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003e8e:	f043 0303 	orr.w	r3, r3, #3
 8003e92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				break;
 8003e96:	e08c      	b.n	8003fb2 <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d005      	beq.n	8003eac <create_name+0x290>
 8003ea0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003ea4:	f043 0303 	orr.w	r3, r3, #3
 8003ea8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;						/* No name extension? */
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d87d      	bhi.n	8003fb0 <create_name+0x394>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	61bb      	str	r3, [r7, #24]
 8003eb8:	2308      	movs	r3, #8
 8003eba:	623b      	str	r3, [r7, #32]
 8003ebc:	230b      	movs	r3, #11
 8003ebe:	61fb      	str	r3, [r7, #28]
 8003ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			continue;
 8003eca:	e06e      	b.n	8003faa <create_name+0x38e>
		}

		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
 8003ecc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ece:	2b7f      	cmp	r3, #127	; 0x7f
 8003ed0:	d911      	bls.n	8003ef6 <create_name+0x2da>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 8003ed2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003ed6:	f043 0302 	orr.w	r3, r3, #2
 8003eda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
#elif FF_CODE_PAGE < 900	/* SBCS cfg */
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
#else						/* DBCS cfg */
			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Upper convert ==> ANSI/OEM code */
 8003ede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f002 f991 	bl	8006208 <ff_wtoupper>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8003eec:	4618      	mov	r0, r3
 8003eee:	f002 f8d7 	bl	80060a0 <ff_uni2oem>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
		}

		if (wc >= 0x100) {				/* Is this a DBC? */
 8003ef6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ef8:	2bff      	cmp	r3, #255	; 0xff
 8003efa:	d91d      	bls.n	8003f38 <create_name+0x31c>
			if (i >= ni - 1) {			/* Field overflow? */
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	6a3a      	ldr	r2, [r7, #32]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d308      	bcc.n	8003f18 <create_name+0x2fc>
				cf |= NS_LOSS | NS_LFN;
 8003f06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f0a:	f043 0303 	orr.w	r3, r3, #3
 8003f0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				i = ni; continue;		/* Next field */
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	623b      	str	r3, [r7, #32]
 8003f16:	e048      	b.n	8003faa <create_name+0x38e>
			}
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 8003f18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f1a:	0a1b      	lsrs	r3, r3, #8
 8003f1c:	b299      	uxth	r1, r3
 8003f1e:	6a3b      	ldr	r3, [r7, #32]
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	623a      	str	r2, [r7, #32]
 8003f24:	b2c9      	uxtb	r1, r1
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	4413      	add	r3, r2
 8003f2a:	460a      	mov	r2, r1
 8003f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f30:	e031      	b.n	8003f96 <create_name+0x37a>
 8003f32:	bf00      	nop
 8003f34:	0801694c 	.word	0x0801694c
		} else {						/* SBC */
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
 8003f38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d007      	beq.n	8003f4e <create_name+0x332>
 8003f3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f40:	4619      	mov	r1, r3
 8003f42:	4841      	ldr	r0, [pc, #260]	; (8004048 <create_name+0x42c>)
 8003f44:	f7fd faa4 	bl	8001490 <chk_chr>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d008      	beq.n	8003f60 <create_name+0x344>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8003f4e:	235f      	movs	r3, #95	; 0x5f
 8003f50:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003f52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f56:	f043 0303 	orr.w	r3, r3, #3
 8003f5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003f5e:	e01a      	b.n	8003f96 <create_name+0x37a>
			} else {
				if (IsUpper(wc)) {		/* ASCII upper case? */
 8003f60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f62:	2b40      	cmp	r3, #64	; 0x40
 8003f64:	d908      	bls.n	8003f78 <create_name+0x35c>
 8003f66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f68:	2b5a      	cmp	r3, #90	; 0x5a
 8003f6a:	d805      	bhi.n	8003f78 <create_name+0x35c>
					b |= 2;
 8003f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f70:	f043 0302 	orr.w	r3, r3, #2
 8003f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				if (IsLower(wc)) {		/* ASCII lower case? */
 8003f78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f7a:	2b60      	cmp	r3, #96	; 0x60
 8003f7c:	d90b      	bls.n	8003f96 <create_name+0x37a>
 8003f7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f80:	2b7a      	cmp	r3, #122	; 0x7a
 8003f82:	d808      	bhi.n	8003f96 <create_name+0x37a>
					b |= 1; wc -= 0x20;
 8003f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f92:	3b20      	subs	r3, #32
 8003f94:	84bb      	strh	r3, [r7, #36]	; 0x24
				}
			}
		}
		dp->fn[i++] = (BYTE)wc;
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	1c5a      	adds	r2, r3, #1
 8003f9a:	623a      	str	r2, [r7, #32]
 8003f9c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003f9e:	b2d1      	uxtb	r1, r2
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	460a      	mov	r2, r1
 8003fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		wc = lfn[si++];					/* Get an LFN character */
 8003faa:	e746      	b.n	8003e3a <create_name+0x21e>
		if (wc == 0) break;				/* Break on end of the LFN */
 8003fac:	bf00      	nop
 8003fae:	e000      	b.n	8003fb2 <create_name+0x396>
			if (si > di) break;						/* No name extension? */
 8003fb0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fb8:	2be5      	cmp	r3, #229	; 0xe5
 8003fba:	d103      	bne.n	8003fc4 <create_name+0x3a8>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2205      	movs	r2, #5
 8003fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	2b08      	cmp	r3, #8
 8003fc8:	d104      	bne.n	8003fd4 <create_name+0x3b8>
 8003fca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 8003fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fd8:	f003 030c 	and.w	r3, r3, #12
 8003fdc:	2b0c      	cmp	r3, #12
 8003fde:	d005      	beq.n	8003fec <create_name+0x3d0>
 8003fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fe4:	f003 0303 	and.w	r3, r3, #3
 8003fe8:	2b03      	cmp	r3, #3
 8003fea:	d105      	bne.n	8003ff8 <create_name+0x3dc>
 8003fec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003ff0:	f043 0302 	orr.w	r3, r3, #2
 8003ff4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 8003ff8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d117      	bne.n	8004034 <create_name+0x418>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 8004004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <create_name+0x400>
 8004010:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004014:	f043 0310 	orr.w	r3, r3, #16
 8004018:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 800401c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <create_name+0x418>
 8004028:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800402c:	f043 0308 	orr.w	r3, r3, #8
 8004030:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800403a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800403e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* FF_USE_LFN */
}
 8004040:	4618      	mov	r0, r3
 8004042:	3728      	adds	r7, #40	; 0x28
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	08016958 	.word	0x08016958

0800404c <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 800404c:	b590      	push	{r4, r7, lr}
 800404e:	b09b      	sub	sp, #108	; 0x6c
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	663b      	str	r3, [r7, #96]	; 0x60


#if FF_FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b2f      	cmp	r3, #47	; 0x2f
 8004062:	d00b      	beq.n	800407c <follow_path+0x30>
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b5c      	cmp	r3, #92	; 0x5c
 800406a:	d007      	beq.n	800407c <follow_path+0x30>
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
 800406c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800406e:	69da      	ldr	r2, [r3, #28]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	609a      	str	r2, [r3, #8]
 8004074:	e00d      	b.n	8004092 <follow_path+0x46>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	3301      	adds	r3, #1
 800407a:	603b      	str	r3, [r7, #0]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b2f      	cmp	r3, #47	; 0x2f
 8004082:	d0f8      	beq.n	8004076 <follow_path+0x2a>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b5c      	cmp	r3, #92	; 0x5c
 800408a:	d0f4      	beq.n	8004076 <follow_path+0x2a>
		dp->obj.sclust = 0;					/* Start from root directory */
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	609a      	str	r2, [r3, #8]
	}
#if FF_FS_EXFAT
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	61da      	str	r2, [r3, #28]
#if FF_FS_RPATH != 0
	if (fs->fs_type == FS_EXFAT && dp->obj.sclust) {	/* exFAT: Retrieve the sub-directory's status */
 8004098:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	2b04      	cmp	r3, #4
 800409e:	d135      	bne.n	800410c <follow_path+0xc0>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d031      	beq.n	800410c <follow_path+0xc0>
		DIR dj;

		dp->obj.c_scl = fs->cdc_scl;
 80040a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040aa:	6a1a      	ldr	r2, [r3, #32]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	621a      	str	r2, [r3, #32]
		dp->obj.c_size = fs->cdc_size;
 80040b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	625a      	str	r2, [r3, #36]	; 0x24
		dp->obj.c_ofs = fs->cdc_ofs;
 80040b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	629a      	str	r2, [r3, #40]	; 0x28
		res = load_obj_xdir(&dj, &dp->obj);
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	f107 0308 	add.w	r3, r7, #8
 80040c6:	4611      	mov	r1, r2
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fe ff86 	bl	8002fda <load_obj_xdir>
 80040ce:	4603      	mov	r3, r0
 80040d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		if (res != FR_OK) return res;
 80040d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d002      	beq.n	80040e2 <follow_path+0x96>
 80040dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80040e0:	e0a6      	b.n	8004230 <follow_path+0x1e4>
		dp->obj.objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
 80040e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	3338      	adds	r3, #56	; 0x38
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fc ffc1 	bl	8001070 <ld_dword>
 80040ee:	4603      	mov	r3, r0
 80040f0:	f04f 0400 	mov.w	r4, #0
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	e9c2 3404 	strd	r3, r4, [r2, #16]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80040fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	3321      	adds	r3, #33	; 0x21
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	b2da      	uxtb	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	71da      	strb	r2, [r3, #7]
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b1f      	cmp	r3, #31
 8004112:	d80b      	bhi.n	800412c <follow_path+0xe0>
		dp->fn[NSFLAG] = NS_NONAME;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2280      	movs	r2, #128	; 0x80
 8004118:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800411c:	2100      	movs	r1, #0
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7fe f99a 	bl	8002458 <dir_sdi>
 8004124:	4603      	mov	r3, r0
 8004126:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800412a:	e07f      	b.n	800422c <follow_path+0x1e0>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800412c:	463b      	mov	r3, r7
 800412e:	4619      	mov	r1, r3
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff fd73 	bl	8003c1c <create_name>
 8004136:	4603      	mov	r3, r0
 8004138:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			if (res != FR_OK) break;
 800413c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004140:	2b00      	cmp	r3, #0
 8004142:	d16e      	bne.n	8004222 <follow_path+0x1d6>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff f913 	bl	8003370 <dir_find>
 800414a:	4603      	mov	r3, r0
 800414c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			ns = dp->fn[NSFLAG];
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8004156:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res != FR_OK) {				/* Failed to find the object */
 800415a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800415e:	2b00      	cmp	r3, #0
 8004160:	d021      	beq.n	80041a6 <follow_path+0x15a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004162:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004166:	2b04      	cmp	r3, #4
 8004168:	d15d      	bne.n	8004226 <follow_path+0x1da>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800416a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800416e:	f003 0320 	and.w	r3, r3, #32
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00d      	beq.n	8004192 <follow_path+0x146>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8004176:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800417a:	f003 0304 	and.w	r3, r3, #4
 800417e:	2b00      	cmp	r3, #0
 8004180:	d04d      	beq.n	800421e <follow_path+0x1d2>
						dp->fn[NSFLAG] = NS_NONAME;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2280      	movs	r2, #128	; 0x80
 8004186:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
						res = FR_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8004190:	e049      	b.n	8004226 <follow_path+0x1da>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004192:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004196:	f003 0304 	and.w	r3, r3, #4
 800419a:	2b00      	cmp	r3, #0
 800419c:	d143      	bne.n	8004226 <follow_path+0x1da>
 800419e:	2305      	movs	r3, #5
 80041a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 80041a4:	e03f      	b.n	8004226 <follow_path+0x1da>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80041a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80041aa:	f003 0304 	and.w	r3, r3, #4
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d13b      	bne.n	800422a <follow_path+0x1de>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	799b      	ldrb	r3, [r3, #6]
 80041b6:	f003 0310 	and.w	r3, r3, #16
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d103      	bne.n	80041c6 <follow_path+0x17a>
				res = FR_NO_PATH; break;
 80041be:	2305      	movs	r3, #5
 80041c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80041c4:	e032      	b.n	800422c <follow_path+0x1e0>
			}
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 80041c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d117      	bne.n	80041fe <follow_path+0x1b2>
				dp->obj.c_scl = dp->obj.sclust;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	621a      	str	r2, [r3, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80041dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	79d2      	ldrb	r2, [r2, #7]
 80041e4:	431a      	orrs	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	625a      	str	r2, [r3, #36]	; 0x24
				dp->obj.c_ofs = dp->blk_ofs;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	629a      	str	r2, [r3, #40]	; 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4619      	mov	r1, r3
 80041f6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80041f8:	f7fe fec6 	bl	8002f88 <init_alloc_info>
 80041fc:	e796      	b.n	800412c <follow_path+0xe0>
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80041fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004200:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800420c:	4413      	add	r3, r2
 800420e:	4619      	mov	r1, r3
 8004210:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004212:	f7fe faa8 	bl	8002766 <ld_clust>
 8004216:	4602      	mov	r2, r0
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	609a      	str	r2, [r3, #8]
 800421c:	e786      	b.n	800412c <follow_path+0xe0>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800421e:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004220:	e784      	b.n	800412c <follow_path+0xe0>
			if (res != FR_OK) break;
 8004222:	bf00      	nop
 8004224:	e002      	b.n	800422c <follow_path+0x1e0>
				break;
 8004226:	bf00      	nop
 8004228:	e000      	b.n	800422c <follow_path+0x1e0>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800422a:	bf00      	nop
			}
		}
	}

	return res;
 800422c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004230:	4618      	mov	r0, r3
 8004232:	376c      	adds	r7, #108	; 0x6c
 8004234:	46bd      	mov	sp, r7
 8004236:	bd90      	pop	{r4, r7, pc}

08004238 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8004238:	b480      	push	{r7}
 800423a:	b089      	sub	sp, #36	; 0x24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 8004240:	f04f 33ff 	mov.w	r3, #4294967295
 8004244:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	613b      	str	r3, [r7, #16]
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <get_ldnumber+0x22>
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	e02e      	b.n	80042b8 <get_ldnumber+0x80>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	61fa      	str	r2, [r7, #28]
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	73fb      	strb	r3, [r7, #15]
 8004264:	7bfb      	ldrb	r3, [r7, #15]
 8004266:	2b1f      	cmp	r3, #31
 8004268:	d902      	bls.n	8004270 <get_ldnumber+0x38>
 800426a:	7bfb      	ldrb	r3, [r7, #15]
 800426c:	2b3a      	cmp	r3, #58	; 0x3a
 800426e:	d1f4      	bne.n	800425a <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8004270:	7bfb      	ldrb	r3, [r7, #15]
 8004272:	2b3a      	cmp	r3, #58	; 0x3a
 8004274:	d11c      	bne.n	80042b0 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8004276:	2301      	movs	r3, #1
 8004278:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	2b2f      	cmp	r3, #47	; 0x2f
 8004280:	d90c      	bls.n	800429c <get_ldnumber+0x64>
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	2b39      	cmp	r3, #57	; 0x39
 8004288:	d808      	bhi.n	800429c <get_ldnumber+0x64>
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	3302      	adds	r3, #2
 800428e:	69fa      	ldr	r2, [r7, #28]
 8004290:	429a      	cmp	r2, r3
 8004292:	d103      	bne.n	800429c <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	3b30      	subs	r3, #48	; 0x30
 800429a:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	dc04      	bgt.n	80042ac <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69fa      	ldr	r2, [r7, #28]
 80042aa:	601a      	str	r2, [r3, #0]
		}
		return vol;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	e003      	b.n	80042b8 <get_ldnumber+0x80>
		}
	}
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
 80042b0:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <get_ldnumber+0x8c>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	617b      	str	r3, [r7, #20]
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
 80042b6:	697b      	ldr	r3, [r7, #20]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3724      	adds	r7, #36	; 0x24
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	200000ae 	.word	0x200000ae

080042c8 <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	70da      	strb	r2, [r3, #3]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f04f 32ff 	mov.w	r2, #4294967295
 80042de:	649a      	str	r2, [r3, #72]	; 0x48
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80042e0:	6839      	ldr	r1, [r7, #0]
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7fd f9f2 	bl	80016cc <move_window>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d001      	beq.n	80042f2 <check_fs+0x2a>
 80042ee:	2304      	movs	r3, #4
 80042f0:	e044      	b.n	800437c <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	334c      	adds	r3, #76	; 0x4c
 80042f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fc fea0 	bl	8001040 <ld_word>
 8004300:	4603      	mov	r3, r0
 8004302:	461a      	mov	r2, r3
 8004304:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004308:	429a      	cmp	r2, r3
 800430a:	d001      	beq.n	8004310 <check_fs+0x48>
 800430c:	2303      	movs	r3, #3
 800430e:	e035      	b.n	800437c <check_fs+0xb4>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	334c      	adds	r3, #76	; 0x4c
 8004314:	220b      	movs	r2, #11
 8004316:	491b      	ldr	r1, [pc, #108]	; (8004384 <check_fs+0xbc>)
 8004318:	4618      	mov	r0, r3
 800431a:	f7fd f892 	bl	8001442 <mem_cmp>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <check_fs+0x60>
 8004324:	2301      	movs	r3, #1
 8004326:	e029      	b.n	800437c <check_fs+0xb4>
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800432e:	2be9      	cmp	r3, #233	; 0xe9
 8004330:	d009      	beq.n	8004346 <check_fs+0x7e>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004338:	2beb      	cmp	r3, #235	; 0xeb
 800433a:	d004      	beq.n	8004346 <check_fs+0x7e>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004342:	2be8      	cmp	r3, #232	; 0xe8
 8004344:	d119      	bne.n	800437a <check_fs+0xb2>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	334c      	adds	r3, #76	; 0x4c
 800434a:	3336      	adds	r3, #54	; 0x36
 800434c:	2203      	movs	r2, #3
 800434e:	490e      	ldr	r1, [pc, #56]	; (8004388 <check_fs+0xc0>)
 8004350:	4618      	mov	r0, r3
 8004352:	f7fd f876 	bl	8001442 <mem_cmp>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <check_fs+0x98>
 800435c:	2300      	movs	r3, #0
 800435e:	e00d      	b.n	800437c <check_fs+0xb4>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	334c      	adds	r3, #76	; 0x4c
 8004364:	3352      	adds	r3, #82	; 0x52
 8004366:	2205      	movs	r2, #5
 8004368:	4908      	ldr	r1, [pc, #32]	; (800438c <check_fs+0xc4>)
 800436a:	4618      	mov	r0, r3
 800436c:	f7fd f869 	bl	8001442 <mem_cmp>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <check_fs+0xb2>
 8004376:	2300      	movs	r3, #0
 8004378:	e000      	b.n	800437c <check_fs+0xb4>
	}
	return 2;	/* Valid BS but not FAT */
 800437a:	2302      	movs	r3, #2
}
 800437c:	4618      	mov	r0, r3
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	08016960 	.word	0x08016960
 8004388:	0801696c 	.word	0x0801696c
 800438c:	08016970 	.word	0x08016970

08004390 <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 8004390:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004394:	b09c      	sub	sp, #112	; 0x70
 8004396:	af00      	add	r7, sp, #0
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	4613      	mov	r3, r2
 800439e:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f7ff ff46 	bl	8004238 <get_ldnumber>
 80043ac:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (vol < 0) return FR_INVALID_DRIVE;
 80043ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	da01      	bge.n	80043b8 <find_volume+0x28>
 80043b4:	230b      	movs	r3, #11
 80043b6:	e37b      	b.n	8004ab0 <find_volume+0x720>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 80043b8:	4ab2      	ldr	r2, [pc, #712]	; (8004684 <find_volume+0x2f4>)
 80043ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043c0:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 80043c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <find_volume+0x3c>
 80043c8:	230c      	movs	r3, #12
 80043ca:	e371      	b.n	8004ab0 <find_volume+0x720>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043d0:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80043d2:	79fb      	ldrb	r3, [r7, #7]
 80043d4:	f023 0301 	bic.w	r3, r3, #1
 80043d8:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 80043da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d01a      	beq.n	8004418 <find_volume+0x88>
		stat = disk_status(fs->pdrv);
 80043e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043e4:	785b      	ldrb	r3, [r3, #1]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fc fb5e 	bl	8000aa8 <disk_status>
 80043ec:	4603      	mov	r3, r0
 80043ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80043f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10c      	bne.n	8004418 <find_volume+0x88>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80043fe:	79fb      	ldrb	r3, [r7, #7]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d007      	beq.n	8004414 <find_volume+0x84>
 8004404:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8004410:	230a      	movs	r3, #10
 8004412:	e34d      	b.n	8004ab0 <find_volume+0x720>
			}
			return FR_OK;				/* The filesystem object is valid */
 8004414:	2300      	movs	r3, #0
 8004416:	e34b      	b.n	8004ab0 <find_volume+0x720>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 8004418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800441a:	2200      	movs	r2, #0
 800441c:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800441e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004420:	b2da      	uxtb	r2, r3
 8004422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004424:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8004426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004428:	785b      	ldrb	r3, [r3, #1]
 800442a:	4618      	mov	r0, r3
 800442c:	f7fc fa52 	bl	80008d4 <disk_initialize>
 8004430:	4603      	mov	r3, r0
 8004432:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004436:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004442:	2303      	movs	r3, #3
 8004444:	e334      	b.n	8004ab0 <find_volume+0x720>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004446:	79fb      	ldrb	r3, [r7, #7]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d007      	beq.n	800445c <find_volume+0xcc>
 800444c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8004458:	230a      	movs	r3, #10
 800445a:	e329      	b.n	8004ab0 <find_volume+0x720>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK (MBR) and SFD (w/o partition). */
	bsect = 0;
 800445c:	2300      	movs	r3, #0
 800445e:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004460:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004462:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004464:	f7ff ff30 	bl	80042c8 <check_fs>
 8004468:	4603      	mov	r3, r0
 800446a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800446e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004472:	2b02      	cmp	r3, #2
 8004474:	d14b      	bne.n	800450e <find_volume+0x17e>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004476:	2300      	movs	r3, #0
 8004478:	65bb      	str	r3, [r7, #88]	; 0x58
 800447a:	e01f      	b.n	80044bc <find_volume+0x12c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800447c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800447e:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8004482:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800448a:	4413      	add	r3, r2
 800448c:	643b      	str	r3, [r7, #64]	; 0x40
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800448e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004490:	3304      	adds	r3, #4
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d006      	beq.n	80044a6 <find_volume+0x116>
 8004498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800449a:	3308      	adds	r3, #8
 800449c:	4618      	mov	r0, r3
 800449e:	f7fc fde7 	bl	8001070 <ld_dword>
 80044a2:	4602      	mov	r2, r0
 80044a4:	e000      	b.n	80044a8 <find_volume+0x118>
 80044a6:	2200      	movs	r2, #0
 80044a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80044b0:	440b      	add	r3, r1
 80044b2:	f843 2c5c 	str.w	r2, [r3, #-92]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80044b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044b8:	3301      	adds	r3, #1
 80044ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80044bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044be:	2b03      	cmp	r3, #3
 80044c0:	d9dc      	bls.n	800447c <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80044c2:	2300      	movs	r3, #0
 80044c4:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i != 0) i--;
 80044c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d002      	beq.n	80044d2 <find_volume+0x142>
 80044cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044ce:	3b01      	subs	r3, #1
 80044d0:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 80044d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80044da:	4413      	add	r3, r2
 80044dc:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80044e0:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80044e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d005      	beq.n	80044f4 <find_volume+0x164>
 80044e8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80044ea:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80044ec:	f7ff feec 	bl	80042c8 <check_fs>
 80044f0:	4603      	mov	r3, r0
 80044f2:	e000      	b.n	80044f6 <find_volume+0x166>
 80044f4:	2303      	movs	r3, #3
 80044f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80044fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d905      	bls.n	800450e <find_volume+0x17e>
 8004502:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004504:	3301      	adds	r3, #1
 8004506:	65bb      	str	r3, [r7, #88]	; 0x58
 8004508:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800450a:	2b03      	cmp	r3, #3
 800450c:	d9e1      	bls.n	80044d2 <find_volume+0x142>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800450e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004512:	2b04      	cmp	r3, #4
 8004514:	d101      	bne.n	800451a <find_volume+0x18a>
 8004516:	2301      	movs	r3, #1
 8004518:	e2ca      	b.n	8004ab0 <find_volume+0x720>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800451a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800451e:	2b01      	cmp	r3, #1
 8004520:	d901      	bls.n	8004526 <find_volume+0x196>
 8004522:	230d      	movs	r3, #13
 8004524:	e2c4      	b.n	8004ab0 <find_volume+0x720>

	/* An FAT volume is found (bsect). Following code initializes the filesystem object */

#if FF_FS_EXFAT
	if (fmt == 1) {
 8004526:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800452a:	2b01      	cmp	r3, #1
 800452c:	f040 813d 	bne.w	80047aa <find_volume+0x41a>
		QWORD maxlba;
		DWORD so, cv, bcl;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8004530:	230b      	movs	r3, #11
 8004532:	65bb      	str	r3, [r7, #88]	; 0x58
 8004534:	e002      	b.n	800453c <find_volume+0x1ac>
 8004536:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004538:	3301      	adds	r3, #1
 800453a:	65bb      	str	r3, [r7, #88]	; 0x58
 800453c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800453e:	2b3f      	cmp	r3, #63	; 0x3f
 8004540:	d806      	bhi.n	8004550 <find_volume+0x1c0>
 8004542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004544:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004546:	4413      	add	r3, r2
 8004548:	334c      	adds	r3, #76	; 0x4c
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0f2      	beq.n	8004536 <find_volume+0x1a6>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8004550:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004552:	2b3f      	cmp	r3, #63	; 0x3f
 8004554:	d801      	bhi.n	800455a <find_volume+0x1ca>
 8004556:	230d      	movs	r3, #13
 8004558:	e2aa      	b.n	8004ab0 <find_volume+0x720>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 800455a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800455c:	334c      	adds	r3, #76	; 0x4c
 800455e:	3368      	adds	r3, #104	; 0x68
 8004560:	4618      	mov	r0, r3
 8004562:	f7fc fd6d 	bl	8001040 <ld_word>
 8004566:	4603      	mov	r3, r0
 8004568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800456c:	d001      	beq.n	8004572 <find_volume+0x1e2>
 800456e:	230d      	movs	r3, #13
 8004570:	e29e      	b.n	8004ab0 <find_volume+0x720>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8004572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004574:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004578:	2b09      	cmp	r3, #9
 800457a:	d001      	beq.n	8004580 <find_volume+0x1f0>
			return FR_NO_FILESYSTEM;
 800457c:	230d      	movs	r3, #13
 800457e:	e297      	b.n	8004ab0 <find_volume+0x720>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8004580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004582:	334c      	adds	r3, #76	; 0x4c
 8004584:	3348      	adds	r3, #72	; 0x48
 8004586:	4618      	mov	r0, r3
 8004588:	f7fc fd95 	bl	80010b6 <ld_qword>
 800458c:	460a      	mov	r2, r1
 800458e:	4601      	mov	r1, r0
 8004590:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004592:	469b      	mov	fp, r3
 8004594:	f04f 0c00 	mov.w	ip, #0
 8004598:	eb1b 0301 	adds.w	r3, fp, r1
 800459c:	eb4c 0402 	adc.w	r4, ip, r2
 80045a0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 80045a4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80045a8:	2c01      	cmp	r4, #1
 80045aa:	bf08      	it	eq
 80045ac:	2b00      	cmpeq	r3, #0
 80045ae:	d301      	bcc.n	80045b4 <find_volume+0x224>
 80045b0:	230d      	movs	r3, #13
 80045b2:	e27d      	b.n	8004ab0 <find_volume+0x720>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 80045b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045b6:	334c      	adds	r3, #76	; 0x4c
 80045b8:	3354      	adds	r3, #84	; 0x54
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fc fd58 	bl	8001070 <ld_dword>
 80045c0:	4602      	mov	r2, r0
 80045c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c4:	631a      	str	r2, [r3, #48]	; 0x30

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 80045c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c8:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
 80045cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045ce:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 80045d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045d2:	789b      	ldrb	r3, [r3, #2]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d001      	beq.n	80045dc <find_volume+0x24c>
 80045d8:	230d      	movs	r3, #13
 80045da:	e269      	b.n	8004ab0 <find_volume+0x720>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 80045dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045de:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80045e2:	461a      	mov	r2, r3
 80045e4:	2301      	movs	r3, #1
 80045e6:	4093      	lsls	r3, r2
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045ec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 80045ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045f0:	895b      	ldrh	r3, [r3, #10]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <find_volume+0x26a>
 80045f6:	230d      	movs	r3, #13
 80045f8:	e25a      	b.n	8004ab0 <find_volume+0x720>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 80045fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045fc:	334c      	adds	r3, #76	; 0x4c
 80045fe:	335c      	adds	r3, #92	; 0x5c
 8004600:	4618      	mov	r0, r3
 8004602:	f7fc fd35 	bl	8001070 <ld_dword>
 8004606:	6378      	str	r0, [r7, #52]	; 0x34
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8004608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800460a:	4a1f      	ldr	r2, [pc, #124]	; (8004688 <find_volume+0x2f8>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d901      	bls.n	8004614 <find_volume+0x284>
 8004610:	230d      	movs	r3, #13
 8004612:	e24d      	b.n	8004ab0 <find_volume+0x720>
		fs->n_fatent = nclst + 2;
 8004614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004616:	1c9a      	adds	r2, r3, #2
 8004618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800461a:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800461c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800461e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004620:	635a      	str	r2, [r3, #52]	; 0x34
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8004622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004624:	334c      	adds	r3, #76	; 0x4c
 8004626:	3358      	adds	r3, #88	; 0x58
 8004628:	4618      	mov	r0, r3
 800462a:	f7fc fd21 	bl	8001070 <ld_dword>
 800462e:	4602      	mov	r2, r0
 8004630:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004632:	441a      	add	r2, r3
 8004634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004636:	641a      	str	r2, [r3, #64]	; 0x40
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8004638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800463a:	334c      	adds	r3, #76	; 0x4c
 800463c:	3350      	adds	r3, #80	; 0x50
 800463e:	4618      	mov	r0, r3
 8004640:	f7fc fd16 	bl	8001070 <ld_dword>
 8004644:	4602      	mov	r2, r0
 8004646:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004648:	441a      	add	r2, r3
 800464a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800464c:	639a      	str	r2, [r3, #56]	; 0x38
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800464e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	4619      	mov	r1, r3
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800465a:	895b      	ldrh	r3, [r3, #10]
 800465c:	4618      	mov	r0, r3
 800465e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004660:	fb03 f300 	mul.w	r3, r3, r0
 8004664:	469b      	mov	fp, r3
 8004666:	f04f 0c00 	mov.w	ip, #0
 800466a:	eb1b 0301 	adds.w	r3, fp, r1
 800466e:	eb4c 0402 	adc.w	r4, ip, r2
 8004672:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004676:	42a2      	cmp	r2, r4
 8004678:	bf08      	it	eq
 800467a:	4299      	cmpeq	r1, r3
 800467c:	d206      	bcs.n	800468c <find_volume+0x2fc>
 800467e:	230d      	movs	r3, #13
 8004680:	e216      	b.n	8004ab0 <find_volume+0x720>
 8004682:	bf00      	nop
 8004684:	200000a8 	.word	0x200000a8
 8004688:	7ffffffd 	.word	0x7ffffffd
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800468c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800468e:	334c      	adds	r3, #76	; 0x4c
 8004690:	3360      	adds	r3, #96	; 0x60
 8004692:	4618      	mov	r0, r3
 8004694:	f7fc fcec 	bl	8001070 <ld_dword>
 8004698:	4602      	mov	r2, r0
 800469a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800469c:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Get bitmap location and check if it is contiguous (implementation assumption) */
		so = i = 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80046a2:	2300      	movs	r3, #0
 80046a4:	657b      	str	r3, [r7, #84]	; 0x54
		for (;;) {	/* Find the bitmap entry in the root directory (in only first cluster) */
			if (i == 0) {
 80046a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d11c      	bne.n	80046e6 <find_volume+0x356>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
 80046ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ae:	895b      	ldrh	r3, [r3, #10]
 80046b0:	461a      	mov	r2, r3
 80046b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d301      	bcc.n	80046bc <find_volume+0x32c>
 80046b8:	230d      	movs	r3, #13
 80046ba:	e1f9      	b.n	8004ab0 <find_volume+0x720>
				if (move_window(fs, clst2sect(fs, fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 80046bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c0:	4619      	mov	r1, r3
 80046c2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80046c4:	f7fd f89e 	bl	8001804 <clst2sect>
 80046c8:	4602      	mov	r2, r0
 80046ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046cc:	4413      	add	r3, r2
 80046ce:	4619      	mov	r1, r3
 80046d0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80046d2:	f7fc fffb 	bl	80016cc <move_window>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <find_volume+0x350>
 80046dc:	2301      	movs	r3, #1
 80046de:	e1e7      	b.n	8004ab0 <find_volume+0x720>
				so++;
 80046e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046e2:	3301      	adds	r3, #1
 80046e4:	657b      	str	r3, [r7, #84]	; 0x54
			}
			if (fs->win[i] == ET_BITMAP) break;				/* Is it a bitmap entry? */
 80046e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046ea:	4413      	add	r3, r2
 80046ec:	334c      	adds	r3, #76	; 0x4c
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b81      	cmp	r3, #129	; 0x81
 80046f2:	d005      	beq.n	8004700 <find_volume+0x370>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 80046f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046f6:	3320      	adds	r3, #32
 80046f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fc:	65bb      	str	r3, [r7, #88]	; 0x58
			if (i == 0) {
 80046fe:	e7d2      	b.n	80046a6 <find_volume+0x316>
			if (fs->win[i] == ET_BITMAP) break;				/* Is it a bitmap entry? */
 8004700:	bf00      	nop
		}
		bcl = ld_dword(fs->win + i + 20);					/* Bitmap cluster */
 8004702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004704:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8004708:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800470a:	3314      	adds	r3, #20
 800470c:	4413      	add	r3, r2
 800470e:	4618      	mov	r0, r3
 8004710:	f7fc fcae 	bl	8001070 <ld_dword>
 8004714:	6538      	str	r0, [r7, #80]	; 0x50
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;
 8004716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004718:	2b01      	cmp	r3, #1
 800471a:	d904      	bls.n	8004726 <find_volume+0x396>
 800471c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004722:	429a      	cmp	r2, r3
 8004724:	d301      	bcc.n	800472a <find_volume+0x39a>
 8004726:	230d      	movs	r3, #13
 8004728:	e1c2      	b.n	8004ab0 <find_volume+0x720>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
 800472a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800472c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800472e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004730:	895b      	ldrh	r3, [r3, #10]
 8004732:	4619      	mov	r1, r3
 8004734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004736:	3b02      	subs	r3, #2
 8004738:	fb03 f301 	mul.w	r3, r3, r1
 800473c:	441a      	add	r2, r3
 800473e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004740:	645a      	str	r2, [r3, #68]	; 0x44
		for (;;) {	/* Check if bitmap is contiguous */
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 8004742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004748:	09db      	lsrs	r3, r3, #7
 800474a:	4413      	add	r3, r2
 800474c:	4619      	mov	r1, r3
 800474e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004750:	f7fc ffbc 	bl	80016cc <move_window>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <find_volume+0x3ce>
 800475a:	2301      	movs	r3, #1
 800475c:	e1a8      	b.n	8004ab0 <find_volume+0x720>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
 800475e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004760:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8004764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	4618      	mov	r0, r3
 8004770:	f7fc fc7e 	bl	8001070 <ld_dword>
 8004774:	6278      	str	r0, [r7, #36]	; 0x24
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477c:	d008      	beq.n	8004790 <find_volume+0x400>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented? */
 800477e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004780:	3301      	adds	r3, #1
 8004782:	653b      	str	r3, [r7, #80]	; 0x50
 8004784:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	429a      	cmp	r2, r3
 800478a:	d0da      	beq.n	8004742 <find_volume+0x3b2>
 800478c:	230d      	movs	r3, #13
 800478e:	e18f      	b.n	8004ab0 <find_volume+0x720>
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 8004790:	bf00      	nop
		}

#if !FF_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004794:	f04f 32ff 	mov.w	r2, #4294967295
 8004798:	619a      	str	r2, [r3, #24]
 800479a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800479c:	699a      	ldr	r2, [r3, #24]
 800479e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047a0:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 80047a2:	2304      	movs	r3, #4
 80047a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80047a8:	e170      	b.n	8004a8c <find_volume+0x6fc>
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80047aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ac:	334c      	adds	r3, #76	; 0x4c
 80047ae:	330b      	adds	r3, #11
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fc fc45 	bl	8001040 <ld_word>
 80047b6:	4603      	mov	r3, r0
 80047b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047bc:	d001      	beq.n	80047c2 <find_volume+0x432>
 80047be:	230d      	movs	r3, #13
 80047c0:	e176      	b.n	8004ab0 <find_volume+0x720>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80047c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c4:	334c      	adds	r3, #76	; 0x4c
 80047c6:	3316      	adds	r3, #22
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7fc fc39 	bl	8001040 <ld_word>
 80047ce:	4603      	mov	r3, r0
 80047d0:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80047d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d106      	bne.n	80047e6 <find_volume+0x456>
 80047d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047da:	334c      	adds	r3, #76	; 0x4c
 80047dc:	3324      	adds	r3, #36	; 0x24
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fc fc46 	bl	8001070 <ld_dword>
 80047e4:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 80047e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80047ea:	631a      	str	r2, [r3, #48]	; 0x30

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80047ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047ee:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80047f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047f4:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80047f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047f8:	789b      	ldrb	r3, [r3, #2]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d005      	beq.n	800480a <find_volume+0x47a>
 80047fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004800:	789b      	ldrb	r3, [r3, #2]
 8004802:	2b02      	cmp	r3, #2
 8004804:	d001      	beq.n	800480a <find_volume+0x47a>
 8004806:	230d      	movs	r3, #13
 8004808:	e152      	b.n	8004ab0 <find_volume+0x720>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800480a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800480c:	789b      	ldrb	r3, [r3, #2]
 800480e:	461a      	mov	r2, r3
 8004810:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004812:	fb02 f303 	mul.w	r3, r2, r3
 8004816:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800481a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800481e:	b29a      	uxth	r2, r3
 8004820:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004822:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004826:	895b      	ldrh	r3, [r3, #10]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d008      	beq.n	800483e <find_volume+0x4ae>
 800482c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800482e:	895b      	ldrh	r3, [r3, #10]
 8004830:	461a      	mov	r2, r3
 8004832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004834:	895b      	ldrh	r3, [r3, #10]
 8004836:	3b01      	subs	r3, #1
 8004838:	4013      	ands	r3, r2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <find_volume+0x4b2>
 800483e:	230d      	movs	r3, #13
 8004840:	e136      	b.n	8004ab0 <find_volume+0x720>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004844:	334c      	adds	r3, #76	; 0x4c
 8004846:	3311      	adds	r3, #17
 8004848:	4618      	mov	r0, r3
 800484a:	f7fc fbf9 	bl	8001040 <ld_word>
 800484e:	4603      	mov	r3, r0
 8004850:	461a      	mov	r2, r3
 8004852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004854:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004856:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004858:	891b      	ldrh	r3, [r3, #8]
 800485a:	f003 030f 	and.w	r3, r3, #15
 800485e:	b29b      	uxth	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <find_volume+0x4d8>
 8004864:	230d      	movs	r3, #13
 8004866:	e123      	b.n	8004ab0 <find_volume+0x720>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800486a:	334c      	adds	r3, #76	; 0x4c
 800486c:	3313      	adds	r3, #19
 800486e:	4618      	mov	r0, r3
 8004870:	f7fc fbe6 	bl	8001040 <ld_word>
 8004874:	4603      	mov	r3, r0
 8004876:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004878:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800487a:	2b00      	cmp	r3, #0
 800487c:	d106      	bne.n	800488c <find_volume+0x4fc>
 800487e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004880:	334c      	adds	r3, #76	; 0x4c
 8004882:	3320      	adds	r3, #32
 8004884:	4618      	mov	r0, r3
 8004886:	f7fc fbf3 	bl	8001070 <ld_dword>
 800488a:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800488c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800488e:	334c      	adds	r3, #76	; 0x4c
 8004890:	330e      	adds	r3, #14
 8004892:	4618      	mov	r0, r3
 8004894:	f7fc fbd4 	bl	8001040 <ld_word>
 8004898:	4603      	mov	r3, r0
 800489a:	87fb      	strh	r3, [r7, #62]	; 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800489c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <find_volume+0x516>
 80048a2:	230d      	movs	r3, #13
 80048a4:	e104      	b.n	8004ab0 <find_volume+0x720>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80048a6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80048a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048aa:	4413      	add	r3, r2
 80048ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048ae:	8912      	ldrh	r2, [r2, #8]
 80048b0:	0912      	lsrs	r2, r2, #4
 80048b2:	b292      	uxth	r2, r2
 80048b4:	4413      	add	r3, r2
 80048b6:	63bb      	str	r3, [r7, #56]	; 0x38
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80048b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048bc:	429a      	cmp	r2, r3
 80048be:	d201      	bcs.n	80048c4 <find_volume+0x534>
 80048c0:	230d      	movs	r3, #13
 80048c2:	e0f5      	b.n	8004ab0 <find_volume+0x720>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80048c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048cc:	8952      	ldrh	r2, [r2, #10]
 80048ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80048d2:	637b      	str	r3, [r7, #52]	; 0x34
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80048d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <find_volume+0x54e>
 80048da:	230d      	movs	r3, #13
 80048dc:	e0e8      	b.n	8004ab0 <find_volume+0x720>
		fmt = 0;
 80048de:	2300      	movs	r3, #0
 80048e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 80048e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e6:	4a75      	ldr	r2, [pc, #468]	; (8004abc <find_volume+0x72c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d802      	bhi.n	80048f2 <find_volume+0x562>
 80048ec:	2303      	movs	r3, #3
 80048ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80048f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d802      	bhi.n	8004902 <find_volume+0x572>
 80048fc:	2302      	movs	r3, #2
 80048fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004904:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004908:	4293      	cmp	r3, r2
 800490a:	d802      	bhi.n	8004912 <find_volume+0x582>
 800490c:	2301      	movs	r3, #1
 800490e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8004912:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <find_volume+0x58e>
 800491a:	230d      	movs	r3, #13
 800491c:	e0c8      	b.n	8004ab0 <find_volume+0x720>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800491e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004920:	1c9a      	adds	r2, r3, #2
 8004922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004924:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
 8004926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004928:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800492a:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800492c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800492e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004930:	441a      	add	r2, r3
 8004932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004934:	639a      	str	r2, [r3, #56]	; 0x38
		fs->database = bsect + sysect;					/* Data start sector */
 8004936:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493a:	441a      	add	r2, r3
 800493c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800493e:	641a      	str	r2, [r3, #64]	; 0x40
		if (fmt == FS_FAT32) {
 8004940:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004944:	2b03      	cmp	r3, #3
 8004946:	d11e      	bne.n	8004986 <find_volume+0x5f6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800494a:	334c      	adds	r3, #76	; 0x4c
 800494c:	332a      	adds	r3, #42	; 0x2a
 800494e:	4618      	mov	r0, r3
 8004950:	f7fc fb76 	bl	8001040 <ld_word>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <find_volume+0x5ce>
 800495a:	230d      	movs	r3, #13
 800495c:	e0a8      	b.n	8004ab0 <find_volume+0x720>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800495e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004960:	891b      	ldrh	r3, [r3, #8]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <find_volume+0x5da>
 8004966:	230d      	movs	r3, #13
 8004968:	e0a2      	b.n	8004ab0 <find_volume+0x720>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800496a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800496c:	334c      	adds	r3, #76	; 0x4c
 800496e:	332c      	adds	r3, #44	; 0x2c
 8004970:	4618      	mov	r0, r3
 8004972:	f7fc fb7d 	bl	8001070 <ld_dword>
 8004976:	4602      	mov	r2, r0
 8004978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800497a:	63da      	str	r2, [r3, #60]	; 0x3c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800497c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004984:	e01f      	b.n	80049c6 <find_volume+0x636>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8004986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004988:	891b      	ldrh	r3, [r3, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <find_volume+0x602>
 800498e:	230d      	movs	r3, #13
 8004990:	e08e      	b.n	8004ab0 <find_volume+0x720>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004996:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004998:	441a      	add	r2, r3
 800499a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800499c:	63da      	str	r2, [r3, #60]	; 0x3c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800499e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d103      	bne.n	80049ae <find_volume+0x61e>
 80049a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	e00a      	b.n	80049c4 <find_volume+0x634>
 80049ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b2:	4613      	mov	r3, r2
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	4413      	add	r3, r2
 80049b8:	085a      	lsrs	r2, r3, #1
 80049ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80049c4:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80049c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049cc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80049d0:	0a5b      	lsrs	r3, r3, #9
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d201      	bcs.n	80049da <find_volume+0x64a>
 80049d6:	230d      	movs	r3, #13
 80049d8:	e06a      	b.n	8004ab0 <find_volume+0x720>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80049da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049dc:	f04f 32ff 	mov.w	r2, #4294967295
 80049e0:	619a      	str	r2, [r3, #24]
 80049e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049e8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80049ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ec:	2280      	movs	r2, #128	; 0x80
 80049ee:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 80049f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80049f4:	2b03      	cmp	r3, #3
 80049f6:	d149      	bne.n	8004a8c <find_volume+0x6fc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80049f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049fa:	334c      	adds	r3, #76	; 0x4c
 80049fc:	3330      	adds	r3, #48	; 0x30
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fc fb1e 	bl	8001040 <ld_word>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d140      	bne.n	8004a8c <find_volume+0x6fc>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004a0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	4619      	mov	r1, r3
 8004a10:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004a12:	f7fc fe5b 	bl	80016cc <move_window>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d137      	bne.n	8004a8c <find_volume+0x6fc>
		{
			fs->fsi_flag = 0;
 8004a1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a1e:	2200      	movs	r2, #0
 8004a20:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8004a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a24:	334c      	adds	r3, #76	; 0x4c
 8004a26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fc fb08 	bl	8001040 <ld_word>
 8004a30:	4603      	mov	r3, r0
 8004a32:	461a      	mov	r2, r3
 8004a34:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d127      	bne.n	8004a8c <find_volume+0x6fc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a3e:	334c      	adds	r3, #76	; 0x4c
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7fc fb15 	bl	8001070 <ld_dword>
 8004a46:	4602      	mov	r2, r0
 8004a48:	4b1d      	ldr	r3, [pc, #116]	; (8004ac0 <find_volume+0x730>)
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d11e      	bne.n	8004a8c <find_volume+0x6fc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004a4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a50:	334c      	adds	r3, #76	; 0x4c
 8004a52:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fc fb0a 	bl	8001070 <ld_dword>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	4b19      	ldr	r3, [pc, #100]	; (8004ac4 <find_volume+0x734>)
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d113      	bne.n	8004a8c <find_volume+0x6fc>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a66:	334c      	adds	r3, #76	; 0x4c
 8004a68:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fc faff 	bl	8001070 <ld_dword>
 8004a72:	4602      	mov	r2, r0
 8004a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a76:	619a      	str	r2, [r3, #24]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a7a:	334c      	adds	r3, #76	; 0x4c
 8004a7c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fc faf5 	bl	8001070 <ld_dword>
 8004a86:	4602      	mov	r2, r0
 8004a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a8a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a8e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8004a92:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8004a94:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <find_volume+0x738>)
 8004a96:	881b      	ldrh	r3, [r3, #0]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <find_volume+0x738>)
 8004a9e:	801a      	strh	r2, [r3, #0]
 8004aa0:	4b09      	ldr	r3, [pc, #36]	; (8004ac8 <find_volume+0x738>)
 8004aa2:	881a      	ldrh	r2, [r3, #0]
 8004aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aa6:	80da      	strh	r2, [r3, #6]
#if FF_FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if FF_FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8004aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aaa:	2200      	movs	r2, #0
 8004aac:	61da      	str	r2, [r3, #28]
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3770      	adds	r7, #112	; 0x70
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004aba:	bf00      	nop
 8004abc:	0ffffff5 	.word	0x0ffffff5
 8004ac0:	41615252 	.word	0x41615252
 8004ac4:	61417272 	.word	0x61417272
 8004ac8:	200000ac 	.word	0x200000ac

08004acc <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8004ad6:	2309      	movs	r3, #9
 8004ad8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d01c      	beq.n	8004b1a <validate+0x4e>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d018      	beq.n	8004b1a <validate+0x4e>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d013      	beq.n	8004b1a <validate+0x4e>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	889a      	ldrh	r2, [r3, #4]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	88db      	ldrh	r3, [r3, #6]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d10c      	bne.n	8004b1a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	785b      	ldrb	r3, [r3, #1]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7fb ffce 	bl	8000aa8 <disk_status>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <validate+0x4e>
			res = FR_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d102      	bne.n	8004b26 <validate+0x5a>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	e000      	b.n	8004b28 <validate+0x5c>
 8004b26:	2300      	movs	r3, #0
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	6013      	str	r3, [r2, #0]
	return res;
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
	...

08004b38 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b088      	sub	sp, #32
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	4613      	mov	r3, r2
 8004b44:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004b4a:	f107 0310 	add.w	r3, r7, #16
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff fb72 	bl	8004238 <get_ldnumber>
 8004b54:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	da01      	bge.n	8004b60 <f_mount+0x28>
 8004b5c:	230b      	movs	r3, #11
 8004b5e:	e025      	b.n	8004bac <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004b60:	4a14      	ldr	r2, [pc, #80]	; (8004bb4 <f_mount+0x7c>)
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b68:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	2200      	movs	r2, #0
 8004b74:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	490b      	ldr	r1, [pc, #44]	; (8004bb4 <f_mount+0x7c>)
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8004b8c:	79fb      	ldrb	r3, [r7, #7]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <f_mount+0x5e>
 8004b92:	2300      	movs	r3, #0
 8004b94:	e00a      	b.n	8004bac <f_mount+0x74>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004b96:	f107 010c 	add.w	r1, r7, #12
 8004b9a:	f107 0308 	add.w	r3, r7, #8
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff fbf5 	bl	8004390 <find_volume>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3720      	adds	r7, #32
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	200000a8 	.word	0x200000a8

08004bb8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004bb8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004bbc:	b0a4      	sub	sp, #144	; 0x90
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	60f8      	str	r0, [r7, #12]
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <f_open+0x1a>
 8004bce:	2309      	movs	r3, #9
 8004bd0:	e22d      	b.n	800502e <f_open+0x476>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8004bd2:	79fb      	ldrb	r3, [r7, #7]
 8004bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bd8:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8004bda:	79fa      	ldrb	r2, [r7, #7]
 8004bdc:	f107 0114 	add.w	r1, r7, #20
 8004be0:	f107 0308 	add.w	r3, r7, #8
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7ff fbd3 	bl	8004390 <find_volume>
 8004bea:	4603      	mov	r3, r0
 8004bec:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (res == FR_OK) {
 8004bf0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f040 8211 	bne.w	800501c <f_open+0x464>
		dj.obj.fs = fs;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
 8004bfe:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8004c02:	f001 fa35 	bl	8006070 <ff_memalloc>
 8004c06:	67f8      	str	r0, [r7, #124]	; 0x7c
 8004c08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <f_open+0x5a>
 8004c0e:	2311      	movs	r3, #17
 8004c10:	e20d      	b.n	800502e <f_open+0x476>
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004c16:	60da      	str	r2, [r3, #12]
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004c1c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8004c20:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	f107 0318 	add.w	r3, r7, #24
 8004c28:	4611      	mov	r1, r2
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff fa0e 	bl	800404c <follow_path>
 8004c30:	4603      	mov	r3, r0
 8004c32:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8004c36:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d107      	bne.n	8004c4e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004c3e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8004c42:	b25b      	sxtb	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	da02      	bge.n	8004c4e <f_open+0x96>
				res = FR_INVALID_NAME;
 8004c48:	2306      	movs	r3, #6
 8004c4a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004c4e:	79fb      	ldrb	r3, [r7, #7]
 8004c50:	f003 031c 	and.w	r3, r3, #28
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 80c8 	beq.w	8004dea <f_open+0x232>
			if (res != FR_OK) {					/* No file, create new */
 8004c5a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d010      	beq.n	8004c84 <f_open+0xcc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004c62:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d107      	bne.n	8004c7a <f_open+0xc2>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8004c6a:	f107 0318 	add.w	r3, r7, #24
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fe fca6 	bl	80035c0 <dir_register>
 8004c74:	4603      	mov	r3, r0
 8004c76:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004c7a:	79fb      	ldrb	r3, [r7, #7]
 8004c7c:	f043 0308 	orr.w	r3, r3, #8
 8004c80:	71fb      	strb	r3, [r7, #7]
 8004c82:	e010      	b.n	8004ca6 <f_open+0xee>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004c84:	7fbb      	ldrb	r3, [r7, #30]
 8004c86:	f003 0311 	and.w	r3, r3, #17
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <f_open+0xde>
					res = FR_DENIED;
 8004c8e:	2307      	movs	r3, #7
 8004c90:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004c94:	e007      	b.n	8004ca6 <f_open+0xee>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004c96:	79fb      	ldrb	r3, [r7, #7]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <f_open+0xee>
 8004ca0:	2308      	movs	r3, #8
 8004ca2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8004ca6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f040 80b7 	bne.w	8004e1e <f_open+0x266>
 8004cb0:	79fb      	ldrb	r3, [r7, #7]
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f000 80b1 	beq.w	8004e1e <f_open+0x266>
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d14d      	bne.n	8004d60 <f_open+0x1a8>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	601a      	str	r2, [r3, #0]
					init_alloc_info(fs, &fp->obj);
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	4611      	mov	r1, r2
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fe f959 	bl	8002f88 <init_alloc_info>
					/* Set directory entry block initial state */
					mem_set(fs->dirbuf + 2, 0, 30);		/* Clear 85 entry except for NumSec */
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	3302      	adds	r3, #2
 8004cdc:	221e      	movs	r2, #30
 8004cde:	2100      	movs	r1, #0
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fc fb94 	bl	800140e <mem_set>
					mem_set(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	3326      	adds	r3, #38	; 0x26
 8004cec:	221a      	movs	r2, #26
 8004cee:	2100      	movs	r1, #0
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fc fb8c 	bl	800140e <mem_set>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	f103 0408 	add.w	r4, r3, #8
 8004d08:	f7fc f990 	bl	800102c <get_fattime>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4620      	mov	r0, r4
 8004d12:	f7fc faa8 	bl	8001266 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	3321      	adds	r3, #33	; 0x21
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8004d20:	f107 0318 	add.w	r3, r7, #24
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fe f998 	bl	800305a <store_xdir>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
 8004d30:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d172      	bne.n	8004e1e <f_open+0x266>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d06e      	beq.n	8004e1e <f_open+0x266>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2200      	movs	r2, #0
 8004d48:	4619      	mov	r1, r3
 8004d4a:	f7fd f8d9 	bl	8001f00 <remove_chain>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	3a01      	subs	r2, #1
 8004d5c:	615a      	str	r2, [r3, #20]
 8004d5e:	e05e      	b.n	8004e1e <f_open+0x266>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d64:	4611      	mov	r1, r2
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fd fcfd 	bl	8002766 <ld_clust>
 8004d6c:	67b8      	str	r0, [r7, #120]	; 0x78
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 8004d6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d70:	f103 040e 	add.w	r4, r3, #14
 8004d74:	f7fc f95a 	bl	800102c <get_fattime>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	f7fc fa72 	bl	8001266 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d84:	330b      	adds	r3, #11
 8004d86:	2220      	movs	r2, #32
 8004d88:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d8e:	2200      	movs	r2, #0
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fd fd07 	bl	80027a4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d98:	331c      	adds	r3, #28
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7fc fa62 	bl	8001266 <st_dword>
					fs->wflag = 1;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2201      	movs	r2, #1
 8004da6:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8004da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d037      	beq.n	8004e1e <f_open+0x266>
						dw = fs->winsect;
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004db2:	677b      	str	r3, [r7, #116]	; 0x74
						res = remove_chain(&dj.obj, cl, 0);
 8004db4:	f107 0318 	add.w	r3, r7, #24
 8004db8:	2200      	movs	r2, #0
 8004dba:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fd f89f 	bl	8001f00 <remove_chain>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						if (res == FR_OK) {
 8004dc8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d126      	bne.n	8004e1e <f_open+0x266>
							res = move_window(fs, dw);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7fc fc79 	bl	80016cc <move_window>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004de4:	3a01      	subs	r2, #1
 8004de6:	615a      	str	r2, [r3, #20]
 8004de8:	e019      	b.n	8004e1e <f_open+0x266>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 8004dea:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d115      	bne.n	8004e1e <f_open+0x266>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8004df2:	7fbb      	ldrb	r3, [r7, #30]
 8004df4:	f003 0310 	and.w	r3, r3, #16
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <f_open+0x24c>
					res = FR_NO_FILE;
 8004dfc:	2304      	movs	r3, #4
 8004dfe:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004e02:	e00c      	b.n	8004e1e <f_open+0x266>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8004e04:	79fb      	ldrb	r3, [r7, #7]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d007      	beq.n	8004e1e <f_open+0x266>
 8004e0e:	7fbb      	ldrb	r3, [r7, #30]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <f_open+0x266>
						res = FR_DENIED;
 8004e18:	2307      	movs	r3, #7
 8004e1a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					}
				}
			}
		}
		if (res == FR_OK) {
 8004e1e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10f      	bne.n	8004e46 <f_open+0x28e>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8004e26:	79fb      	ldrb	r3, [r7, #7]
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d003      	beq.n	8004e38 <f_open+0x280>
 8004e30:	79fb      	ldrb	r3, [r7, #7]
 8004e32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e36:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 8004e40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	64da      	str	r2, [r3, #76]	; 0x4c
				}
			}
		}
#endif

		if (res == FR_OK) {
 8004e46:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f040 80e3 	bne.w	8005016 <f_open+0x45e>
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	d114      	bne.n	8004e82 <f_open+0x2ca>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8004e58:	6a3a      	ldr	r2, [r7, #32]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8004e5e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004e62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e66:	7ffa      	ldrb	r2, [r7, #31]
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8004e6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	629a      	str	r2, [r3, #40]	; 0x28
				init_alloc_info(fs, &fp->obj);
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4611      	mov	r1, r2
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fe f884 	bl	8002f88 <init_alloc_info>
 8004e80:	e013      	b.n	8004eaa <f_open+0x2f2>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e86:	4611      	mov	r1, r2
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7fd fc6c 	bl	8002766 <ld_clust>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004e94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e96:	331c      	adds	r3, #28
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7fc f8e9 	bl	8001070 <ld_dword>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	f04f 0400 	mov.w	r4, #0
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	88da      	ldrh	r2, [r3, #6]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	79fa      	ldrb	r2, [r7, #7]
 8004ebc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	f04f 0300 	mov.w	r3, #0
 8004ed4:	f04f 0400 	mov.w	r4, #0
 8004ed8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3350      	adds	r3, #80	; 0x50
 8004ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fc fa91 	bl	800140e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004eec:	79fb      	ldrb	r3, [r7, #7]
 8004eee:	f003 0320 	and.w	r3, r3, #32
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 808f 	beq.w	8005016 <f_open+0x45e>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8004efe:	4323      	orrs	r3, r4
 8004f00:	f000 8089 	beq.w	8005016 <f_open+0x45e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	895b      	ldrh	r3, [r3, #10]
 8004f14:	025b      	lsls	r3, r3, #9
 8004f16:	673b      	str	r3, [r7, #112]	; 0x70
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8004f26:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 8004f2a:	e024      	b.n	8004f76 <f_open+0x3be>
					clst = get_fat(&fp->obj, clst);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fc fc86 	bl	8001844 <get_fat>
 8004f38:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					if (clst <= 1) res = FR_INT_ERR;
 8004f3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d802      	bhi.n	8004f4a <f_open+0x392>
 8004f44:	2302      	movs	r3, #2
 8004f46:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8004f4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f52:	d102      	bne.n	8004f5a <f_open+0x3a2>
 8004f54:	2301      	movs	r3, #1
 8004f56:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004f5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f5c:	469b      	mov	fp, r3
 8004f5e:	f04f 0c00 	mov.w	ip, #0
 8004f62:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004f66:	460b      	mov	r3, r1
 8004f68:	4614      	mov	r4, r2
 8004f6a:	ebb3 030b 	subs.w	r3, r3, fp
 8004f6e:	eb64 040c 	sbc.w	r4, r4, ip
 8004f72:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 8004f76:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d109      	bne.n	8004f92 <f_open+0x3da>
 8004f7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f80:	4619      	mov	r1, r3
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8004f8a:	42a2      	cmp	r2, r4
 8004f8c:	bf08      	it	eq
 8004f8e:	4299      	cmpeq	r1, r3
 8004f90:	d3cc      	bcc.n	8004f2c <f_open+0x374>
				}
				fp->clust = clst;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004f98:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004f9a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d139      	bne.n	8005016 <f_open+0x45e>
 8004fa2:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8004fa6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004faa:	f04f 0200 	mov.w	r2, #0
 8004fae:	ea03 0b01 	and.w	fp, r3, r1
 8004fb2:	ea04 0c02 	and.w	ip, r4, r2
 8004fb6:	ea5b 030c 	orrs.w	r3, fp, ip
 8004fba:	d02c      	beq.n	8005016 <f_open+0x45e>
					if ((sc = clst2sect(fs, clst)) == 0) {
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fc fc1e 	bl	8001804 <clst2sect>
 8004fc8:	66f8      	str	r0, [r7, #108]	; 0x6c
 8004fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d103      	bne.n	8004fd8 <f_open+0x420>
						res = FR_INT_ERR;
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004fd6:	e01e      	b.n	8005016 <f_open+0x45e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004fd8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004fdc:	f04f 0300 	mov.w	r3, #0
 8004fe0:	f04f 0400 	mov.w	r4, #0
 8004fe4:	0a4b      	lsrs	r3, r1, #9
 8004fe6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004fea:	0a54      	lsrs	r4, r2, #9
 8004fec:	461a      	mov	r2, r3
 8004fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ff0:	441a      	add	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	645a      	str	r2, [r3, #68]	; 0x44
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	7858      	ldrb	r0, [r3, #1]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005004:	2301      	movs	r3, #1
 8005006:	f7fb fd65 	bl	8000ad4 <disk_read>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <f_open+0x45e>
 8005010:	2301      	movs	r3, #1
 8005012:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
#endif
		}

		FREE_NAMBUF();
 8005016:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8005018:	f001 f836 	bl	8006088 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800501c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <f_open+0x472>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800502a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800502e:	4618      	mov	r0, r3
 8005030:	3790      	adds	r7, #144	; 0x90
 8005032:	46bd      	mov	sp, r7
 8005034:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08005038 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005038:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800503c:	b090      	sub	sp, #64	; 0x40
 800503e:	af00      	add	r7, sp, #0
 8005040:	60f8      	str	r0, [r7, #12]
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	607a      	str	r2, [r7, #4]
 8005046:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	62fb      	str	r3, [r7, #44]	; 0x2c


	*br = 0;	/* Clear read byte counter */
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f107 0214 	add.w	r2, r7, #20
 8005058:	4611      	mov	r1, r2
 800505a:	4618      	mov	r0, r3
 800505c:	f7ff fd36 	bl	8004acc <validate>
 8005060:	4603      	mov	r3, r0
 8005062:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005066:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800506a:	2b00      	cmp	r3, #0
 800506c:	d108      	bne.n	8005080 <f_read+0x48>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005074:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005078:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800507c:	2b00      	cmp	r3, #0
 800507e:	d002      	beq.n	8005086 <f_read+0x4e>
 8005080:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005084:	e13c      	b.n	8005300 <f_read+0x2c8>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <f_read+0x60>
 8005094:	2307      	movs	r3, #7
 8005096:	e133      	b.n	8005300 <f_read+0x2c8>
	remain = fp->obj.objsize - fp->fptr;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	e9d3 bc0e 	ldrd	fp, ip, [r3, #56]	; 0x38
 80050a4:	460b      	mov	r3, r1
 80050a6:	4614      	mov	r4, r2
 80050a8:	ebb3 030b 	subs.w	r3, r3, fp
 80050ac:	eb64 040c 	sbc.w	r4, r4, ip
 80050b0:	e9c7 3408 	strd	r3, r4, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f04f 0400 	mov.w	r4, #0
 80050ba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80050be:	42a2      	cmp	r2, r4
 80050c0:	bf08      	it	eq
 80050c2:	4299      	cmpeq	r1, r3
 80050c4:	f080 8117 	bcs.w	80052f6 <f_read+0x2be>
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until btr bytes read */
 80050cc:	e113      	b.n	80052f6 <f_read+0x2be>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	e9d3 bc0e 	ldrd	fp, ip, [r3, #56]	; 0x38
 80050d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	ea0b 0301 	and.w	r3, fp, r1
 80050e0:	ea0c 0402 	and.w	r4, ip, r2
 80050e4:	4323      	orrs	r3, r4
 80050e6:	f040 80ce 	bne.w	8005286 <f_read+0x24e>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 80050f0:	f04f 0300 	mov.w	r3, #0
 80050f4:	f04f 0400 	mov.w	r4, #0
 80050f8:	0a4b      	lsrs	r3, r1, #9
 80050fa:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80050fe:	0a54      	lsrs	r4, r2, #9
 8005100:	461a      	mov	r2, r3
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	895b      	ldrh	r3, [r3, #10]
 8005106:	3b01      	subs	r3, #1
 8005108:	4013      	ands	r3, r2
 800510a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d126      	bne.n	8005160 <f_read+0x128>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005118:	4323      	orrs	r3, r4
 800511a:	d103      	bne.n	8005124 <f_read+0xec>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	63bb      	str	r3, [r7, #56]	; 0x38
 8005122:	e007      	b.n	8005134 <f_read+0xfc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512a:	4619      	mov	r1, r3
 800512c:	4610      	mov	r0, r2
 800512e:	f7fc fb89 	bl	8001844 <get_fat>
 8005132:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005136:	2b01      	cmp	r3, #1
 8005138:	d805      	bhi.n	8005146 <f_read+0x10e>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2202      	movs	r2, #2
 800513e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005142:	2302      	movs	r3, #2
 8005144:	e0dc      	b.n	8005300 <f_read+0x2c8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800514c:	d105      	bne.n	800515a <f_read+0x122>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005156:	2301      	movs	r3, #1
 8005158:	e0d2      	b.n	8005300 <f_read+0x2c8>
				fp->clust = clst;				/* Update current cluster */
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800515e:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	4619      	mov	r1, r3
 8005168:	4610      	mov	r0, r2
 800516a:	f7fc fb4b 	bl	8001804 <clst2sect>
 800516e:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d105      	bne.n	8005182 <f_read+0x14a>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2202      	movs	r2, #2
 800517a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800517e:	2302      	movs	r3, #2
 8005180:	e0be      	b.n	8005300 <f_read+0x2c8>
			sect += csect;
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	4413      	add	r3, r2
 8005188:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	0a5b      	lsrs	r3, r3, #9
 800518e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8005190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005192:	2b00      	cmp	r3, #0
 8005194:	d03b      	beq.n	800520e <f_read+0x1d6>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005196:	69fa      	ldr	r2, [r7, #28]
 8005198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519a:	4413      	add	r3, r2
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	8952      	ldrh	r2, [r2, #10]
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d905      	bls.n	80051b0 <f_read+0x178>
					cc = fs->csize - csect;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	895b      	ldrh	r3, [r3, #10]
 80051a8:	461a      	mov	r2, r3
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	7858      	ldrb	r0, [r3, #1]
 80051b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051ba:	f7fb fc8b 	bl	8000ad4 <disk_read>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d005      	beq.n	80051d0 <f_read+0x198>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80051cc:	2301      	movs	r3, #1
 80051ce:	e097      	b.n	8005300 <f_read+0x2c8>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051d6:	b25b      	sxtb	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	da14      	bge.n	8005206 <f_read+0x1ce>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d90d      	bls.n	8005206 <f_read+0x1ce>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	025b      	lsls	r3, r3, #9
 80051f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051f6:	18d0      	adds	r0, r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	3350      	adds	r3, #80	; 0x50
 80051fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005200:	4619      	mov	r1, r3
 8005202:	f7fc f8e3 	bl	80013cc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005208:	025b      	lsls	r3, r3, #9
 800520a:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 800520c:	e057      	b.n	80052be <f_read+0x286>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	429a      	cmp	r2, r3
 8005216:	d033      	beq.n	8005280 <f_read+0x248>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800521e:	b25b      	sxtb	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	da1b      	bge.n	800525c <f_read+0x224>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	7858      	ldrb	r0, [r3, #1]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005232:	2301      	movs	r3, #1
 8005234:	f7fb fcb8 	bl	8000ba8 <disk_write>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d005      	beq.n	800524a <f_read+0x212>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005246:	2301      	movs	r3, #1
 8005248:	e05a      	b.n	8005300 <f_read+0x2c8>
					fp->flag &= (BYTE)~FA_DIRTY;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005254:	b2da      	uxtb	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	7858      	ldrb	r0, [r3, #1]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8005266:	2301      	movs	r3, #1
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	f7fb fc33 	bl	8000ad4 <disk_read>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d005      	beq.n	8005280 <f_read+0x248>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800527c:	2301      	movs	r3, #1
 800527e:	e03f      	b.n	8005300 <f_read+0x2c8>
			}
#endif
			fp->sect = sect;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800528c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005290:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005294:	637b      	str	r3, [r7, #52]	; 0x34
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005296:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	429a      	cmp	r2, r3
 800529c:	d901      	bls.n	80052a2 <f_read+0x26a>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	637b      	str	r3, [r7, #52]	; 0x34
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80052ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b2:	4413      	add	r3, r2
 80052b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052b6:	4619      	mov	r1, r3
 80052b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052ba:	f7fc f887 	bl	80013cc <mem_cpy>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	607b      	str	r3, [r7, #4]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052cc:	441a      	add	r2, r3
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d6:	4413      	add	r3, r2
 80052d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 80052e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e2:	469b      	mov	fp, r3
 80052e4:	f04f 0c00 	mov.w	ip, #0
 80052e8:	eb1b 0301 	adds.w	r3, fp, r1
 80052ec:	eb4c 0402 	adc.w	r4, ip, r2
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	for ( ;  btr;								/* Repeat until btr bytes read */
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f47f aee8 	bne.w	80050ce <f_read+0x96>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3740      	adds	r7, #64	; 0x40
 8005304:	46bd      	mov	sp, r7
 8005306:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800530a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800530a:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800530e:	b08c      	sub	sp, #48	; 0x30
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
 8005318:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f107 0210 	add.w	r2, r7, #16
 800532a:	4611      	mov	r1, r2
 800532c:	4618      	mov	r0, r3
 800532e:	f7ff fbcd 	bl	8004acc <validate>
 8005332:	4603      	mov	r3, r0
 8005334:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005338:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800533c:	2b00      	cmp	r3, #0
 800533e:	d108      	bne.n	8005352 <f_write+0x48>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800534a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <f_write+0x4e>
 8005352:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005356:	e17d      	b.n	8005654 <f_write+0x34a>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <f_write+0x60>
 8005366:	2307      	movs	r3, #7
 8005368:	e174      	b.n	8005654 <f_write+0x34a>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	2b04      	cmp	r3, #4
 8005370:	f000 8160 	beq.w	8005634 <f_write+0x32a>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800537a:	461a      	mov	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	441a      	add	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005386:	429a      	cmp	r2, r3
 8005388:	f080 8154 	bcs.w	8005634 <f_write+0x32a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005392:	43db      	mvns	r3, r3
 8005394:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005396:	e14d      	b.n	8005634 <f_write+0x32a>
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	e9d3 bc0e 	ldrd	fp, ip, [r3, #56]	; 0x38
 800539e:	f240 11ff 	movw	r1, #511	; 0x1ff
 80053a2:	f04f 0200 	mov.w	r2, #0
 80053a6:	ea0b 0301 	and.w	r3, fp, r1
 80053aa:	ea0c 0402 	and.w	r4, ip, r2
 80053ae:	4323      	orrs	r3, r4
 80053b0:	f040 80f0 	bne.w	8005594 <f_write+0x28a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 80053ba:	f04f 0300 	mov.w	r3, #0
 80053be:	f04f 0400 	mov.w	r4, #0
 80053c2:	0a4b      	lsrs	r3, r1, #9
 80053c4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80053c8:	0a54      	lsrs	r4, r2, #9
 80053ca:	461a      	mov	r2, r3
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	895b      	ldrh	r3, [r3, #10]
 80053d0:	3b01      	subs	r3, #1
 80053d2:	4013      	ands	r3, r2
 80053d4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d13a      	bne.n	8005452 <f_write+0x148>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80053e2:	4323      	orrs	r3, r4
 80053e4:	d10c      	bne.n	8005400 <f_write+0xf6>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80053ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10e      	bne.n	8005410 <f_write+0x106>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2100      	movs	r1, #0
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fc fe64 	bl	80020c4 <create_chain>
 80053fc:	62b8      	str	r0, [r7, #40]	; 0x28
 80053fe:	e007      	b.n	8005410 <f_write+0x106>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	4619      	mov	r1, r3
 8005408:	4610      	mov	r0, r2
 800540a:	f7fc fe5b 	bl	80020c4 <create_chain>
 800540e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005412:	2b00      	cmp	r3, #0
 8005414:	f000 8113 	beq.w	800563e <f_write+0x334>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	2b01      	cmp	r3, #1
 800541c:	d105      	bne.n	800542a <f_write+0x120>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2202      	movs	r2, #2
 8005422:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005426:	2302      	movs	r3, #2
 8005428:	e114      	b.n	8005654 <f_write+0x34a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800542a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005430:	d105      	bne.n	800543e <f_write+0x134>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800543a:	2301      	movs	r3, #1
 800543c:	e10a      	b.n	8005654 <f_write+0x34a>
				fp->clust = clst;			/* Update current cluster */
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005442:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d102      	bne.n	8005452 <f_write+0x148>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005450:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005458:	b25b      	sxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	da1b      	bge.n	8005496 <f_write+0x18c>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	7858      	ldrb	r0, [r3, #1]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800546c:	2301      	movs	r3, #1
 800546e:	f7fb fb9b 	bl	8000ba8 <disk_write>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d005      	beq.n	8005484 <f_write+0x17a>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005480:	2301      	movs	r3, #1
 8005482:	e0e7      	b.n	8005654 <f_write+0x34a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800548a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800548e:	b2da      	uxtb	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549c:	4619      	mov	r1, r3
 800549e:	4610      	mov	r0, r2
 80054a0:	f7fc f9b0 	bl	8001804 <clst2sect>
 80054a4:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d105      	bne.n	80054b8 <f_write+0x1ae>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80054b4:	2302      	movs	r3, #2
 80054b6:	e0cd      	b.n	8005654 <f_write+0x34a>
			sect += csect;
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	4413      	add	r3, r2
 80054be:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	0a5b      	lsrs	r3, r3, #9
 80054c4:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d03f      	beq.n	800554c <f_write+0x242>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	4413      	add	r3, r2
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	8952      	ldrh	r2, [r2, #10]
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d905      	bls.n	80054e6 <f_write+0x1dc>
					cc = fs->csize - csect;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	895b      	ldrh	r3, [r3, #10]
 80054de:	461a      	mov	r2, r3
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	7858      	ldrb	r0, [r3, #1]
 80054ea:	6a3b      	ldr	r3, [r7, #32]
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	69f9      	ldr	r1, [r7, #28]
 80054f0:	f7fb fb5a 	bl	8000ba8 <disk_write>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d005      	beq.n	8005506 <f_write+0x1fc>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005502:	2301      	movs	r3, #1
 8005504:	e0a6      	b.n	8005654 <f_write+0x34a>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	6a3a      	ldr	r2, [r7, #32]
 8005510:	429a      	cmp	r2, r3
 8005512:	d917      	bls.n	8005544 <f_write+0x23a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	025b      	lsls	r3, r3, #9
 8005524:	69fa      	ldr	r2, [r7, #28]
 8005526:	4413      	add	r3, r2
 8005528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800552c:	4619      	mov	r1, r3
 800552e:	f7fb ff4d 	bl	80013cc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800553c:	b2da      	uxtb	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	025b      	lsls	r3, r3, #9
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800554a:	e048      	b.n	80055de <f_write+0x2d4>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	429a      	cmp	r2, r3
 8005554:	d01b      	beq.n	800558e <f_write+0x284>
				fp->fptr < fp->obj.objsize &&
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005562:	42a2      	cmp	r2, r4
 8005564:	bf08      	it	eq
 8005566:	4299      	cmpeq	r1, r3
 8005568:	d211      	bcs.n	800558e <f_write+0x284>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	7858      	ldrb	r0, [r3, #1]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8005574:	2301      	movs	r3, #1
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	f7fb faac 	bl	8000ad4 <disk_read>
 800557c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800557e:	2b00      	cmp	r3, #0
 8005580:	d005      	beq.n	800558e <f_write+0x284>
					ABORT(fs, FR_DISK_ERR);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800558a:	2301      	movs	r3, #1
 800558c:	e062      	b.n	8005654 <f_write+0x34a>
			}
#endif
			fp->sect = sect;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800559a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800559e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80055a2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80055a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d901      	bls.n	80055b0 <f_write+0x2a6>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	627b      	str	r3, [r7, #36]	; 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80055bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c0:	4413      	add	r3, r2
 80055c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c4:	69f9      	ldr	r1, [r7, #28]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fb ff00 	bl	80013cc <mem_cpy>
		fp->flag |= FA_DIRTY;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80055d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	607b      	str	r3, [r7, #4]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	441a      	add	r2, r3
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	69fa      	ldr	r2, [r7, #28]
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	4413      	add	r3, r2
 80055f8:	61fb      	str	r3, [r7, #28]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	469b      	mov	fp, r3
 8005604:	f04f 0c00 	mov.w	ip, #0
 8005608:	eb1b 0301 	adds.w	r3, fp, r1
 800560c:	eb4c 0402 	adc.w	r4, ip, r2
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
 8005622:	4294      	cmp	r4, r2
 8005624:	bf08      	it	eq
 8005626:	428b      	cmpeq	r3, r1
 8005628:	d201      	bcs.n	800562e <f_write+0x324>
 800562a:	460b      	mov	r3, r1
 800562c:	4614      	mov	r4, r2
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	e9c2 3404 	strd	r3, r4, [r2, #16]
	for ( ;  btw;							/* Repeat until all data written */
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	f47f aeae 	bne.w	8005398 <f_write+0x8e>
 800563c:	e000      	b.n	8005640 <f_write+0x336>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800563e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800564a:	b2da      	uxtb	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3730      	adds	r7, #48	; 0x30
 8005658:	46bd      	mov	sp, r7
 800565a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800565e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800565e:	b590      	push	{r4, r7, lr}
 8005660:	b09d      	sub	sp, #116	; 0x74
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800566c:	4611      	mov	r1, r2
 800566e:	4618      	mov	r0, r3
 8005670:	f7ff fa2c 	bl	8004acc <validate>
 8005674:	4603      	mov	r3, r0
 8005676:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 800567a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800567e:	2b00      	cmp	r3, #0
 8005680:	f040 811d 	bne.w	80058be <f_sync+0x260>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800568a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 8115 	beq.w	80058be <f_sync+0x260>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800569a:	b25b      	sxtb	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	da17      	bge.n	80056d0 <f_sync+0x72>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80056a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056a2:	7858      	ldrb	r0, [r3, #1]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056ae:	2301      	movs	r3, #1
 80056b0:	f7fb fa7a 	bl	8000ba8 <disk_write>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <f_sync+0x60>
 80056ba:	2301      	movs	r3, #1
 80056bc:	e101      	b.n	80058c2 <f_sync+0x264>
				fp->flag &= (BYTE)~FA_DIRTY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80056d0:	f7fb fcac 	bl	800102c <get_fattime>
 80056d4:	66b8      	str	r0, [r7, #104]	; 0x68
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80056d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	2b04      	cmp	r3, #4
 80056dc:	f040 80a4 	bne.w	8005828 <f_sync+0x1ca>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7fc fbac 	bl	8001e40 <fill_first_frag>
 80056e8:	4603      	mov	r3, r0
 80056ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 80056ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10a      	bne.n	800570c <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005700:	4619      	mov	r1, r3
 8005702:	f7fc fbcc 	bl	8001e9e <fill_last_frag>
 8005706:	4603      	mov	r3, r0
 8005708:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
				if (res == FR_OK) {
 800570c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005710:	2b00      	cmp	r3, #0
 8005712:	f040 80d4 	bne.w	80058be <f_sync+0x260>
					DIR dj;
					DEF_NAMBUF

					INIT_NAMBUF(fs);
 8005716:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800571a:	f000 fca9 	bl	8006070 <ff_memalloc>
 800571e:	6638      	str	r0, [r7, #96]	; 0x60
 8005720:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <f_sync+0xcc>
 8005726:	2311      	movs	r3, #17
 8005728:	e0cb      	b.n	80058c2 <f_sync+0x264>
 800572a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800572c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800572e:	60da      	str	r2, [r3, #12]
 8005730:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005732:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005734:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8005738:	611a      	str	r2, [r3, #16]
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	f107 0308 	add.w	r3, r7, #8
 8005740:	4611      	mov	r1, r2
 8005742:	4618      	mov	r0, r3
 8005744:	f7fd fc49 	bl	8002fda <load_obj_xdir>
 8005748:	4603      	mov	r3, r0
 800574a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 800574e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005752:	2b00      	cmp	r3, #0
 8005754:	d164      	bne.n	8005820 <f_sync+0x1c2>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
 8005756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	3304      	adds	r3, #4
 800575c:	781a      	ldrb	r2, [r3, #0]
 800575e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	3304      	adds	r3, #4
 8005764:	f042 0220 	orr.w	r2, r2, #32
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	79da      	ldrb	r2, [r3, #7]
 8005770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	3321      	adds	r3, #33	; 0x21
 8005776:	f042 0201 	orr.w	r2, r2, #1
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800577e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	4619      	mov	r1, r3
 800578c:	4610      	mov	r0, r2
 800578e:	f7fb fd6a 	bl	8001266 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8005792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80057a0:	461a      	mov	r2, r3
 80057a2:	4623      	mov	r3, r4
 80057a4:	4608      	mov	r0, r1
 80057a6:	f7fb fd8a 	bl	80012be <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 80057aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80057b8:	461a      	mov	r2, r3
 80057ba:	4623      	mov	r3, r4
 80057bc:	4608      	mov	r0, r1
 80057be:	f7fb fd7e 	bl	80012be <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 80057c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	330c      	adds	r3, #12
 80057c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fb fd4b 	bl	8001266 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 80057d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	3315      	adds	r3, #21
 80057d6:	2200      	movs	r2, #0
 80057d8:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 80057da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	3310      	adds	r3, #16
 80057e0:	2100      	movs	r1, #0
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fb fd3f 	bl	8001266 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 80057e8:	f107 0308 	add.w	r3, r7, #8
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fd fc34 	bl	800305a <store_xdir>
 80057f2:	4603      	mov	r3, r0
 80057f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 80057f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10f      	bne.n	8005820 <f_sync+0x1c2>
							res = sync_fs(fs);
 8005800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005802:	4618      	mov	r0, r3
 8005804:	f7fb ff90 	bl	8001728 <sync_fs>
 8005808:	4603      	mov	r3, r0
 800580a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005818:	b2da      	uxtb	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
					}
					FREE_NAMBUF();
 8005820:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8005822:	f000 fc31 	bl	8006088 <ff_memfree>
 8005826:	e04a      	b.n	80058be <f_sync+0x260>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005828:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800582e:	4619      	mov	r1, r3
 8005830:	4610      	mov	r0, r2
 8005832:	f7fb ff4b 	bl	80016cc <move_window>
 8005836:	4603      	mov	r3, r0
 8005838:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 800583c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005840:	2b00      	cmp	r3, #0
 8005842:	d13c      	bne.n	80058be <f_sync+0x260>
					dir = fp->dir_ptr;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005848:	667b      	str	r3, [r7, #100]	; 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800584a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800584c:	330b      	adds	r3, #11
 800584e:	781a      	ldrb	r2, [r3, #0]
 8005850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005852:	330b      	adds	r3, #11
 8005854:	f042 0220 	orr.w	r2, r2, #32
 8005858:	b2d2      	uxtb	r2, r2
 800585a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6818      	ldr	r0, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	461a      	mov	r2, r3
 8005866:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005868:	f7fc ff9c 	bl	80027a4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800586c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800586e:	f103 021c 	add.w	r2, r3, #28
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8005878:	4619      	mov	r1, r3
 800587a:	4610      	mov	r0, r2
 800587c:	f7fb fcf3 	bl	8001266 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005880:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005882:	3316      	adds	r3, #22
 8005884:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005886:	4618      	mov	r0, r3
 8005888:	f7fb fced 	bl	8001266 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800588c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800588e:	3312      	adds	r3, #18
 8005890:	2100      	movs	r1, #0
 8005892:	4618      	mov	r0, r3
 8005894:	f7fb fccc 	bl	8001230 <st_word>
					fs->wflag = 1;
 8005898:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800589a:	2201      	movs	r2, #1
 800589c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800589e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7fb ff41 	bl	8001728 <sync_fs>
 80058a6:	4603      	mov	r3, r0
 80058a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058b6:	b2da      	uxtb	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80058be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3774      	adds	r7, #116	; 0x74
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd90      	pop	{r4, r7, pc}

080058ca <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b084      	sub	sp, #16
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7ff fec3 	bl	800565e <f_sync>
 80058d8:	4603      	mov	r3, r0
 80058da:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80058dc:	7bfb      	ldrb	r3, [r7, #15]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10e      	bne.n	8005900 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f107 0208 	add.w	r2, r7, #8
 80058e8:	4611      	mov	r1, r2
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7ff f8ee 	bl	8004acc <validate>
 80058f0:	4603      	mov	r3, r0
 80058f2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d102      	bne.n	8005900 <f_close+0x36>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005900:	7bfb      	ldrb	r3, [r7, #15]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800590a:	b590      	push	{r4, r7, lr}
 800590c:	b09b      	sub	sp, #108	; 0x6c
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8005912:	f107 010c 	add.w	r1, r7, #12
 8005916:	1d3b      	adds	r3, r7, #4
 8005918:	2200      	movs	r2, #0
 800591a:	4618      	mov	r0, r3
 800591c:	f7fe fd38 	bl	8004390 <find_volume>
 8005920:	4603      	mov	r3, r0
 8005922:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8005926:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800592a:	2b00      	cmp	r3, #0
 800592c:	d170      	bne.n	8005a10 <f_chdir+0x106>
		dj.obj.fs = fs;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
 8005932:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8005936:	f000 fb9b 	bl	8006070 <ff_memalloc>
 800593a:	6638      	str	r0, [r7, #96]	; 0x60
 800593c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <f_chdir+0x3c>
 8005942:	2311      	movs	r3, #17
 8005944:	e066      	b.n	8005a14 <f_chdir+0x10a>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800594a:	60da      	str	r2, [r3, #12]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005950:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8005954:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);		/* Follow the path */
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	f107 0310 	add.w	r3, r7, #16
 800595c:	4611      	mov	r1, r2
 800595e:	4618      	mov	r0, r3
 8005960:	f7fe fb74 	bl	800404c <follow_path>
 8005964:	4603      	mov	r3, r0
 8005966:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		if (res == FR_OK) {					/* Follow completed */
 800596a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800596e:	2b00      	cmp	r3, #0
 8005970:	d144      	bne.n	80059fc <f_chdir+0xf2>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Is it the start directory itself? */
 8005972:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005976:	b25b      	sxtb	r3, r3
 8005978:	2b00      	cmp	r3, #0
 800597a:	da10      	bge.n	800599e <f_chdir+0x94>
				fs->cdir = dj.obj.sclust;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	69ba      	ldr	r2, [r7, #24]
 8005980:	61da      	str	r2, [r3, #28]
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	2b04      	cmp	r3, #4
 8005988:	d138      	bne.n	80059fc <f_chdir+0xf2>
					fs->cdc_scl = dj.obj.c_scl;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800598e:	621a      	str	r2, [r3, #32]
					fs->cdc_size = dj.obj.c_size;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005994:	625a      	str	r2, [r3, #36]	; 0x24
					fs->cdc_ofs = dj.obj.c_ofs;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800599a:	629a      	str	r2, [r3, #40]	; 0x28
 800599c:	e02e      	b.n	80059fc <f_chdir+0xf2>
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 800599e:	7dbb      	ldrb	r3, [r7, #22]
 80059a0:	f003 0310 	and.w	r3, r3, #16
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d026      	beq.n	80059f6 <f_chdir+0xec>
#if FF_FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b04      	cmp	r3, #4
 80059ae:	d118      	bne.n	80059e2 <f_chdir+0xd8>
						fs->cdir = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Sub-directory cluster */
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	3334      	adds	r3, #52	; 0x34
 80059b6:	68fc      	ldr	r4, [r7, #12]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7fb fb59 	bl	8001070 <ld_dword>
 80059be:	4603      	mov	r3, r0
 80059c0:	61e3      	str	r3, [r4, #28]
						fs->cdc_scl = dj.obj.sclust;						/* Save containing directory information */
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	621a      	str	r2, [r3, #32]
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80059c8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80059cc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059d0:	7dfb      	ldrb	r3, [r7, #23]
 80059d2:	4619      	mov	r1, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	625a      	str	r2, [r3, #36]	; 0x24
						fs->cdc_ofs = dj.blk_ofs;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059de:	629a      	str	r2, [r3, #40]	; 0x28
 80059e0:	e00c      	b.n	80059fc <f_chdir+0xf2>
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059e6:	68fc      	ldr	r4, [r7, #12]
 80059e8:	4611      	mov	r1, r2
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fc febb 	bl	8002766 <ld_clust>
 80059f0:	4603      	mov	r3, r0
 80059f2:	61e3      	str	r3, [r4, #28]
 80059f4:	e002      	b.n	80059fc <f_chdir+0xf2>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 80059f6:	2305      	movs	r3, #5
 80059f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
		FREE_NAMBUF();
 80059fc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80059fe:	f000 fb43 	bl	8006088 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8005a02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005a06:	2b04      	cmp	r3, #4
 8005a08:	d102      	bne.n	8005a10 <f_chdir+0x106>
 8005a0a:	2305      	movs	r3, #5
 8005a0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			CurrVol = (BYTE)i;
		}
#endif
	}

	LEAVE_FF(fs, res);
 8005a10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	376c      	adds	r7, #108	; 0x6c
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd90      	pop	{r4, r7, pc}

08005a1c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8005a1c:	b590      	push	{r4, r7, lr}
 8005a1e:	b087      	sub	sp, #28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <f_opendir+0x14>
 8005a2c:	2309      	movs	r3, #9
 8005a2e:	e07c      	b.n	8005b2a <f_opendir+0x10e>

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8005a30:	f107 010c 	add.w	r1, r7, #12
 8005a34:	463b      	mov	r3, r7
 8005a36:	2200      	movs	r2, #0
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7fe fca9 	bl	8004390 <find_volume>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d169      	bne.n	8005b1c <f_opendir+0x100>
		dp->obj.fs = fs;
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8005a4e:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8005a52:	f000 fb0d 	bl	8006070 <ff_memalloc>
 8005a56:	6138      	str	r0, [r7, #16]
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d101      	bne.n	8005a62 <f_opendir+0x46>
 8005a5e:	2311      	movs	r3, #17
 8005a60:	e063      	b.n	8005b2a <f_opendir+0x10e>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	60da      	str	r2, [r3, #12]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8005a70:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	4619      	mov	r1, r3
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7fe fae8 	bl	800404c <follow_path>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8005a80:	7dfb      	ldrb	r3, [r7, #23]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d142      	bne.n	8005b0c <f_opendir+0xf0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8005a8c:	b25b      	sxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	db2f      	blt.n	8005af2 <f_opendir+0xd6>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	799b      	ldrb	r3, [r3, #6]
 8005a96:	f003 0310 	and.w	r3, r3, #16
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d027      	beq.n	8005aee <f_opendir+0xd2>
#if FF_FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d118      	bne.n	8005ad8 <f_opendir+0xbc>
						dp->obj.c_scl = dp->obj.sclust;							/* Get containing directory inforamation */
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689a      	ldr	r2, [r3, #8]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	621a      	str	r2, [r3, #32]
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8005ab4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	79d2      	ldrb	r2, [r2, #7]
 8005abc:	431a      	orrs	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	625a      	str	r2, [r3, #36]	; 0x24
						dp->obj.c_ofs = dp->blk_ofs;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	629a      	str	r2, [r3, #40]	; 0x28
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	4611      	mov	r1, r2
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7fd fa59 	bl	8002f88 <init_alloc_info>
 8005ad6:	e00c      	b.n	8005af2 <f_opendir+0xd6>
					} else
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ade:	4619      	mov	r1, r3
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	f7fc fe40 	bl	8002766 <ld_clust>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	609a      	str	r2, [r3, #8]
 8005aec:	e001      	b.n	8005af2 <f_opendir+0xd6>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8005aee:	2305      	movs	r3, #5
 8005af0:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8005af2:	7dfb      	ldrb	r3, [r7, #23]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d109      	bne.n	8005b0c <f_opendir+0xf0>
				dp->obj.id = fs->id;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	88da      	ldrh	r2, [r3, #6]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8005b00:	2100      	movs	r1, #0
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7fc fca8 	bl	8002458 <dir_sdi>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	75fb      	strb	r3, [r7, #23]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 8005b0c:	6938      	ldr	r0, [r7, #16]
 8005b0e:	f000 fabb 	bl	8006088 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8005b12:	7dfb      	ldrb	r3, [r7, #23]
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	d101      	bne.n	8005b1c <f_opendir+0x100>
 8005b18:	2305      	movs	r3, #5
 8005b1a:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 8005b1c:	7dfb      	ldrb	r3, [r7, #23]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d002      	beq.n	8005b28 <f_opendir+0x10c>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	371c      	adds	r7, #28
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd90      	pop	{r4, r7, pc}

08005b32 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b084      	sub	sp, #16
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f107 0208 	add.w	r2, r7, #8
 8005b40:	4611      	mov	r1, r2
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fe ffc2 	bl	8004acc <validate>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d102      	bne.n	8005b58 <f_closedir+0x26>
#if FF_FS_LOCK != 0
		if (dp->obj.lockid) res = dec_lock(dp->obj.lockid);	/* Decrement sub-directory open counter */
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
#else
		dp->obj.fs = 0;	/* Invalidate directory object */
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]
#endif
#if FF_FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8005b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b086      	sub	sp, #24
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
 8005b6a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f107 020c 	add.w	r2, r7, #12
 8005b72:	4611      	mov	r1, r2
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7fe ffa9 	bl	8004acc <validate>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005b7e:	7dfb      	ldrb	r3, [r7, #23]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d13b      	bne.n	8005bfc <f_readdir+0x9a>
		if (!fno) {
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d106      	bne.n	8005b98 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7fc fc63 	bl	8002458 <dir_sdi>
 8005b92:	4603      	mov	r3, r0
 8005b94:	75fb      	strb	r3, [r7, #23]
 8005b96:	e031      	b.n	8005bfc <f_readdir+0x9a>
		} else {
			INIT_NAMBUF(fs);
 8005b98:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8005b9c:	f000 fa68 	bl	8006070 <ff_memalloc>
 8005ba0:	6138      	str	r0, [r7, #16]
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <f_readdir+0x4a>
 8005ba8:	2311      	movs	r3, #17
 8005baa:	e028      	b.n	8005bfe <f_readdir+0x9c>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	60da      	str	r2, [r3, #12]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	693a      	ldr	r2, [r7, #16]
 8005bb6:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8005bba:	611a      	str	r2, [r3, #16]
			res = DIR_READ_FILE(dp);		/* Read an item */
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fd fb0f 	bl	80031e2 <dir_read>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8005bc8:	7dfb      	ldrb	r3, [r7, #23]
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	d101      	bne.n	8005bd2 <f_readdir+0x70>
 8005bce:	2300      	movs	r3, #0
 8005bd0:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 8005bd2:	7dfb      	ldrb	r3, [r7, #23]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10e      	bne.n	8005bf6 <f_readdir+0x94>
				get_fileinfo(dp, fno);		/* Get the object information */
 8005bd8:	6839      	ldr	r1, [r7, #0]
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7fd fefa 	bl	80039d4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8005be0:	2100      	movs	r1, #0
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7fc fcbe 	bl	8002564 <dir_next>
 8005be8:	4603      	mov	r3, r0
 8005bea:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8005bec:	7dfb      	ldrb	r3, [r7, #23]
 8005bee:	2b04      	cmp	r3, #4
 8005bf0:	d101      	bne.n	8005bf6 <f_readdir+0x94>
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 8005bf6:	6938      	ldr	r0, [r7, #16]
 8005bf8:	f000 fa46 	bl	8006088 <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 8005bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3718      	adds	r7, #24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8005c06:	b590      	push	{r4, r7, lr}
 8005c08:	b0bd      	sub	sp, #244	; 0xf4
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8005c14:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005c18:	1d3b      	adds	r3, r7, #4
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7fe fbb7 	bl	8004390 <find_volume>
 8005c22:	4603      	mov	r3, r0
 8005c24:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	if (res == FR_OK) {
 8005c28:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f040 80d7 	bne.w	8005de0 <f_unlink+0x1da>
		dj.obj.fs = fs;
 8005c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		INIT_NAMBUF(fs);
 8005c38:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8005c3c:	f000 fa18 	bl	8006070 <ff_memalloc>
 8005c40:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
 8005c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <f_unlink+0x4a>
 8005c4c:	2311      	movs	r3, #17
 8005c4e:	e0c9      	b.n	8005de4 <f_unlink+0x1de>
 8005c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c52:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005c56:	60da      	str	r2, [r3, #12]
 8005c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005c5e:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8005c62:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);		/* Follow the file path */
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005c6a:	4611      	mov	r1, r2
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7fe f9ed 	bl	800404c <follow_path>
 8005c72:	4603      	mov	r3, r0
 8005c74:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8005c78:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d108      	bne.n	8005c92 <f_unlink+0x8c>
 8005c80:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005c84:	f003 0320 	and.w	r3, r3, #32
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d002      	beq.n	8005c92 <f_unlink+0x8c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8005c8c:	2306      	movs	r3, #6
 8005c8e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8005c92:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f040 809e 	bne.w	8005dd8 <f_unlink+0x1d2>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8005c9c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8005ca0:	b25b      	sxtb	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	da03      	bge.n	8005cae <f_unlink+0xa8>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8005ca6:	2306      	movs	r3, #6
 8005ca8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8005cac:	e008      	b.n	8005cc0 <f_unlink+0xba>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8005cae:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d002      	beq.n	8005cc0 <f_unlink+0xba>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8005cba:	2307      	movs	r3, #7
 8005cbc:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
				}
			}
			if (res == FR_OK) {
 8005cc0:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d15d      	bne.n	8005d84 <f_unlink+0x17e>
#if FF_FS_EXFAT
				obj.fs = fs;
 8005cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cca:	60bb      	str	r3, [r7, #8]
				if (fs->fs_type == FS_EXFAT) {
 8005ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	2b04      	cmp	r3, #4
 8005cd2:	d10a      	bne.n	8005cea <f_unlink+0xe4>
					init_alloc_info(fs, &obj);
 8005cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cd6:	f107 0208 	add.w	r2, r7, #8
 8005cda:	4611      	mov	r1, r2
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7fd f953 	bl	8002f88 <init_alloc_info>
					dclst = obj.sclust;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ce8:	e008      	b.n	8005cfc <f_unlink+0xf6>
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8005cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cec:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8005cf0:	4611      	mov	r1, r2
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fc fd37 	bl	8002766 <ld_clust>
 8005cf8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8005cfc:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8005d00:	f003 0310 	and.w	r3, r3, #16
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d03d      	beq.n	8005d84 <f_unlink+0x17e>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
 8005d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d0a:	69db      	ldr	r3, [r3, #28]
 8005d0c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d103      	bne.n	8005d1c <f_unlink+0x116>
						res = FR_DENIED;
 8005d14:	2307      	movs	r3, #7
 8005d16:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8005d1a:	e033      	b.n	8005d84 <f_unlink+0x17e>
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
 8005d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d1e:	643b      	str	r3, [r7, #64]	; 0x40
						sdj.obj.sclust = dclst;
 8005d20:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d24:	64bb      	str	r3, [r7, #72]	; 0x48
#if FF_FS_EXFAT
						if (fs->fs_type == FS_EXFAT) {
 8005d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	2b04      	cmp	r3, #4
 8005d2c:	d106      	bne.n	8005d3c <f_unlink+0x136>
							sdj.obj.objsize = obj.objsize;
 8005d2e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005d32:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
							sdj.obj.stat = obj.stat;
 8005d36:	7bfb      	ldrb	r3, [r7, #15]
 8005d38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						}
#endif
						res = dir_sdi(&sdj, 0);
 8005d3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d40:	2100      	movs	r1, #0
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fc fb88 	bl	8002458 <dir_sdi>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
						if (res == FR_OK) {
 8005d4e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d116      	bne.n	8005d84 <f_unlink+0x17e>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
 8005d56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fd fa40 	bl	80031e2 <dir_read>
 8005d62:	4603      	mov	r3, r0
 8005d64:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8005d68:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d102      	bne.n	8005d76 <f_unlink+0x170>
 8005d70:	2307      	movs	r3, #7
 8005d72:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8005d76:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8005d7a:	2b04      	cmp	r3, #4
 8005d7c:	d102      	bne.n	8005d84 <f_unlink+0x17e>
 8005d7e:	2300      	movs	r3, #0
 8005d80:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
						}
					}
				}
			}
			if (res == FR_OK) {
 8005d84:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d125      	bne.n	8005dd8 <f_unlink+0x1d2>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8005d8c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005d90:	4618      	mov	r0, r3
 8005d92:	f7fd fdc7 	bl	8003924 <dir_remove>
 8005d96:	4603      	mov	r3, r0
 8005d98:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
 8005d9c:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10e      	bne.n	8005dc2 <f_unlink+0x1bc>
 8005da4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00a      	beq.n	8005dc2 <f_unlink+0x1bc>
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
 8005dac:	f107 0308 	add.w	r3, r7, #8
 8005db0:	2200      	movs	r2, #0
 8005db2:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fc f8a2 	bl	8001f00 <remove_chain>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8005dc2:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d106      	bne.n	8005dd8 <f_unlink+0x1d2>
 8005dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f7fb fcab 	bl	8001728 <sync_fs>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
			}
		}
		FREE_NAMBUF();
 8005dd8:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8005ddc:	f000 f954 	bl	8006088 <ff_memfree>
	}

	LEAVE_FF(fs, res);
 8005de0:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	37f4      	adds	r7, #244	; 0xf4
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd90      	pop	{r4, r7, pc}

08005dec <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b0aa      	sub	sp, #168	; 0xa8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
 8005df4:	f107 010c 	add.w	r1, r7, #12
 8005df8:	1d3b      	adds	r3, r7, #4
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fe fac7 	bl	8004390 <find_volume>
 8005e02:	4603      	mov	r3, r0
 8005e04:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	if (res == FR_OK) {
 8005e08:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f040 8129 	bne.w	8006064 <f_mkdir+0x278>
		dj.obj.fs = fs;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	643b      	str	r3, [r7, #64]	; 0x40
		INIT_NAMBUF(fs);
 8005e16:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8005e1a:	f000 f929 	bl	8006070 <ff_memalloc>
 8005e1e:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8005e22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <f_mkdir+0x42>
 8005e2a:	2311      	movs	r3, #17
 8005e2c:	e11c      	b.n	8006068 <f_mkdir+0x27c>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8005e34:	60da      	str	r2, [r3, #12]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8005e3c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8005e40:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);			/* Follow the file path */
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e48:	4611      	mov	r1, r2
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fe f8fe 	bl	800404c <follow_path>
 8005e50:	4603      	mov	r3, r0
 8005e52:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
 8005e56:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d102      	bne.n	8005e64 <f_mkdir+0x78>
 8005e5e:	2308      	movs	r3, #8
 8005e60:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
 8005e64:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005e68:	2b04      	cmp	r3, #4
 8005e6a:	d108      	bne.n	8005e7e <f_mkdir+0x92>
 8005e6c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8005e70:	f003 0320 	and.w	r3, r3, #32
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d002      	beq.n	8005e7e <f_mkdir+0x92>
			res = FR_INVALID_NAME;
 8005e78:	2306      	movs	r3, #6
 8005e7a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
 8005e7e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	f040 80ea 	bne.w	800605c <f_mkdir+0x270>
			sobj.fs = fs;						/* New object id to create a new chain */
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	613b      	str	r3, [r7, #16]
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
 8005e8c:	f107 0310 	add.w	r3, r7, #16
 8005e90:	2100      	movs	r1, #0
 8005e92:	4618      	mov	r0, r3
 8005e94:	f7fc f916 	bl	80020c4 <create_chain>
 8005e98:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
			res = FR_OK;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
 8005ea2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d102      	bne.n	8005eb0 <f_mkdir+0xc4>
 8005eaa:	2307      	movs	r3, #7
 8005eac:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
 8005eb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d102      	bne.n	8005ebe <f_mkdir+0xd2>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
 8005ebe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec6:	d102      	bne.n	8005ece <f_mkdir+0xe2>
 8005ec8:	2301      	movs	r3, #1
 8005eca:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			tm = GET_FATTIME();
 8005ece:	f7fb f8ad 	bl	800102c <get_fattime>
 8005ed2:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
			if (res == FR_OK) {
 8005ed6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d154      	bne.n	8005f88 <f_mkdir+0x19c>
				res = dir_clear(fs, dcl);		/* Clean up the new table */
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fc fa28 	bl	800233a <dir_clear>
 8005eea:	4603      	mov	r3, r0
 8005eec:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				if (res == FR_OK) {
 8005ef0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d147      	bne.n	8005f88 <f_mkdir+0x19c>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b04      	cmp	r3, #4
 8005efe:	d03b      	beq.n	8005f78 <f_mkdir+0x18c>
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	334c      	adds	r3, #76	; 0x4c
 8005f04:	220b      	movs	r2, #11
 8005f06:	2120      	movs	r1, #32
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7fb fa80 	bl	800140e <mem_set>
						fs->win[DIR_Name] = '.';
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	222e      	movs	r2, #46	; 0x2e
 8005f12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
						fs->win[DIR_Attr] = AM_DIR;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2210      	movs	r2, #16
 8005f1a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
						st_dword(fs->win + DIR_ModTime, tm);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	334c      	adds	r3, #76	; 0x4c
 8005f22:	3316      	adds	r3, #22
 8005f24:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fb f99c 	bl	8001266 <st_dword>
						st_clust(fs, fs->win, dcl);
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	334c      	adds	r3, #76	; 0x4c
 8005f34:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8005f38:	4619      	mov	r1, r3
 8005f3a:	f7fc fc33 	bl	80027a4 <st_clust>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	334c      	adds	r3, #76	; 0x4c
 8005f42:	f103 0020 	add.w	r0, r3, #32
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	334c      	adds	r3, #76	; 0x4c
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	f7fb fa3d 	bl	80013cc <mem_cpy>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	222e      	movs	r2, #46	; 0x2e
 8005f56:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 8005f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
						st_clust(fs, fs->win + SZDIRE, pcl);
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	334c      	adds	r3, #76	; 0x4c
 8005f66:	3320      	adds	r3, #32
 8005f68:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	f7fc fc19 	bl	80027a4 <st_clust>
						fs->wflag = 1;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2201      	movs	r2, #1
 8005f76:	70da      	strb	r2, [r3, #3]
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
 8005f78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7fd fb1f 	bl	80035c0 <dir_register>
 8005f82:	4603      	mov	r3, r0
 8005f84:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				}
			}
			if (res == FR_OK) {
 8005f88:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d15d      	bne.n	800604c <f_mkdir+0x260>
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d138      	bne.n	800600a <f_mkdir+0x21e>
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	330c      	adds	r3, #12
 8005f9e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fb f95f 	bl	8001266 <st_dword>
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	3334      	adds	r3, #52	; 0x34
 8005fae:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fb f957 	bl	8001266 <st_dword>
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)fs->csize * SS(fs));	/* File size needs to be valid */
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	895b      	ldrh	r3, [r3, #10]
 8005fc4:	025b      	lsls	r3, r3, #9
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4610      	mov	r0, r2
 8005fca:	f7fb f94c 	bl	8001266 <st_dword>
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)fs->csize * SS(fs));
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	895b      	ldrh	r3, [r3, #10]
 8005fda:	025b      	lsls	r3, r3, #9
 8005fdc:	4619      	mov	r1, r3
 8005fde:	4610      	mov	r0, r2
 8005fe0:	f7fb f941 	bl	8001266 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag */
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	3321      	adds	r3, #33	; 0x21
 8005fea:	2203      	movs	r2, #3
 8005fec:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	2210      	movs	r2, #16
 8005ff6:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8005ff8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7fd f82c 	bl	800305a <store_xdir>
 8006002:	4603      	mov	r3, r0
 8006004:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8006008:	e014      	b.n	8006034 <f_mkdir+0x248>
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
 800600a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800600c:	3316      	adds	r3, #22
 800600e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8006012:	4618      	mov	r0, r3
 8006014:	f7fb f927 	bl	8001266 <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800601c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006020:	4618      	mov	r0, r3
 8006022:	f7fc fbbf 	bl	80027a4 <st_clust>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
 8006026:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006028:	330b      	adds	r3, #11
 800602a:	2210      	movs	r2, #16
 800602c:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2201      	movs	r2, #1
 8006032:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8006034:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10f      	bne.n	800605c <f_mkdir+0x270>
					res = sync_fs(fs);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4618      	mov	r0, r3
 8006040:	f7fb fb72 	bl	8001728 <sync_fs>
 8006044:	4603      	mov	r3, r0
 8006046:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800604a:	e007      	b.n	800605c <f_mkdir+0x270>
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
 800604c:	f107 0310 	add.w	r3, r7, #16
 8006050:	2200      	movs	r2, #0
 8006052:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8006056:	4618      	mov	r0, r3
 8006058:	f7fb ff52 	bl	8001f00 <remove_chain>
			}
		}
		FREE_NAMBUF();
 800605c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8006060:	f000 f812 	bl	8006088 <ff_memfree>
	}

	LEAVE_FF(fs, res);
 8006064:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 8006068:	4618      	mov	r0, r3
 800606a:	37a8      	adds	r7, #168	; 0xa8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <ff_memalloc>:
/*------------------------------------------------------------------------*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
	return malloc(msize);	/* Allocate a new memory block with POSIX API */
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f00f fd11 	bl	8015aa0 <malloc>
 800607e:	4603      	mov	r3, r0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
	free(mblock);	/* Free the memory block with POSIX API */
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f00f fd0d 	bl	8015ab0 <free>
}
 8006096:	bf00      	nop
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
	...

080060a0 <ff_uni2oem>:
#if FF_CODE_PAGE >= 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b08b      	sub	sp, #44	; 0x2c
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	460b      	mov	r3, r1
 80060aa:	807b      	strh	r3, [r7, #2]
	const WCHAR *p;
	WCHAR c = 0, uc;
 80060ac:	2300      	movs	r3, #0
 80060ae:	84fb      	strh	r3, [r7, #38]	; 0x26
	UINT i = 0, n, li, hi;
 80060b0:	2300      	movs	r3, #0
 80060b2:	623b      	str	r3, [r7, #32]


	if (uni < 0x80) {	/* ASCII? */
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b7f      	cmp	r3, #127	; 0x7f
 80060b8:	d802      	bhi.n	80060c0 <ff_uni2oem+0x20>
		c = (WCHAR)uni;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80060be:	e041      	b.n	8006144 <ff_uni2oem+0xa4>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060c6:	d23d      	bcs.n	8006144 <ff_uni2oem+0xa4>
 80060c8:	887b      	ldrh	r3, [r7, #2]
 80060ca:	f5b3 7f69 	cmp.w	r3, #932	; 0x3a4
 80060ce:	d139      	bne.n	8006144 <ff_uni2oem+0xa4>
			uc = (WCHAR)uni;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	827b      	strh	r3, [r7, #18]
			p = CVTBL(uni2oem, FF_CODE_PAGE);
 80060d4:	4b1f      	ldr	r3, [pc, #124]	; (8006154 <ff_uni2oem+0xb4>)
 80060d6:	60fb      	str	r3, [r7, #12]
			hi = sizeof CVTBL(uni2oem, FF_CODE_PAGE) / 4 - 1;
 80060d8:	f641 43dd 	movw	r3, #7389	; 0x1cdd
 80060dc:	617b      	str	r3, [r7, #20]
			li = 0;
 80060de:	2300      	movs	r3, #0
 80060e0:	61bb      	str	r3, [r7, #24]
			for (n = 16; n; n--) {
 80060e2:	2310      	movs	r3, #16
 80060e4:	61fb      	str	r3, [r7, #28]
 80060e6:	e01e      	b.n	8006126 <ff_uni2oem+0x86>
				i = li + (hi - li) / 2;
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	085b      	lsrs	r3, r3, #1
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	4413      	add	r3, r2
 80060f4:	623b      	str	r3, [r7, #32]
				if (uc == p[i * 2]) break;
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	4413      	add	r3, r2
 80060fe:	881b      	ldrh	r3, [r3, #0]
 8006100:	8a7a      	ldrh	r2, [r7, #18]
 8006102:	429a      	cmp	r2, r3
 8006104:	d013      	beq.n	800612e <ff_uni2oem+0x8e>
				if (uc > p[i * 2]) {
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	4413      	add	r3, r2
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	8a7a      	ldrh	r2, [r7, #18]
 8006112:	429a      	cmp	r2, r3
 8006114:	d902      	bls.n	800611c <ff_uni2oem+0x7c>
					li = i;
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	61bb      	str	r3, [r7, #24]
 800611a:	e001      	b.n	8006120 <ff_uni2oem+0x80>
				} else {
					hi = i;
 800611c:	6a3b      	ldr	r3, [r7, #32]
 800611e:	617b      	str	r3, [r7, #20]
			for (n = 16; n; n--) {
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	3b01      	subs	r3, #1
 8006124:	61fb      	str	r3, [r7, #28]
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1dd      	bne.n	80060e8 <ff_uni2oem+0x48>
 800612c:	e000      	b.n	8006130 <ff_uni2oem+0x90>
				if (uc == p[i * 2]) break;
 800612e:	bf00      	nop
				}
			}
			if (n != 0) c = p[i * 2 + 1];
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d006      	beq.n	8006144 <ff_uni2oem+0xa4>
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	3302      	adds	r3, #2
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	4413      	add	r3, r2
 8006140:	881b      	ldrh	r3, [r3, #0]
 8006142:	84fb      	strh	r3, [r7, #38]	; 0x26
		}
	}

	return c;
 8006144:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8006146:	4618      	mov	r0, r3
 8006148:	372c      	adds	r7, #44	; 0x2c
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	08019794 	.word	0x08019794

08006158 <ff_oem2uni>:

WCHAR ff_oem2uni (	/* Returns Unicode character, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 8006158:	b480      	push	{r7}
 800615a:	b089      	sub	sp, #36	; 0x24
 800615c:	af00      	add	r7, sp, #0
 800615e:	4603      	mov	r3, r0
 8006160:	460a      	mov	r2, r1
 8006162:	80fb      	strh	r3, [r7, #6]
 8006164:	4613      	mov	r3, r2
 8006166:	80bb      	strh	r3, [r7, #4]
	const WCHAR *p;
	WCHAR c = 0;
 8006168:	2300      	movs	r3, #0
 800616a:	83fb      	strh	r3, [r7, #30]
	UINT i = 0, n, li, hi;
 800616c:	2300      	movs	r3, #0
 800616e:	61bb      	str	r3, [r7, #24]


	if (oem < 0x80) {	/* ASCII? */
 8006170:	88fb      	ldrh	r3, [r7, #6]
 8006172:	2b7f      	cmp	r3, #127	; 0x7f
 8006174:	d802      	bhi.n	800617c <ff_oem2uni+0x24>
		c = oem;
 8006176:	88fb      	ldrh	r3, [r7, #6]
 8006178:	83fb      	strh	r3, [r7, #30]
 800617a:	e03b      	b.n	80061f4 <ff_oem2uni+0x9c>

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it valid code page? */
 800617c:	88bb      	ldrh	r3, [r7, #4]
 800617e:	f5b3 7f69 	cmp.w	r3, #932	; 0x3a4
 8006182:	d137      	bne.n	80061f4 <ff_oem2uni+0x9c>
			p = CVTBL(oem2uni, FF_CODE_PAGE);
 8006184:	4b1f      	ldr	r3, [pc, #124]	; (8006204 <ff_oem2uni+0xac>)
 8006186:	60bb      	str	r3, [r7, #8]
			hi = sizeof CVTBL(oem2uni, FF_CODE_PAGE) / 4 - 1;
 8006188:	f641 43dd 	movw	r3, #7389	; 0x1cdd
 800618c:	60fb      	str	r3, [r7, #12]
			li = 0;
 800618e:	2300      	movs	r3, #0
 8006190:	613b      	str	r3, [r7, #16]
			for (n = 16; n; n--) {
 8006192:	2310      	movs	r3, #16
 8006194:	617b      	str	r3, [r7, #20]
 8006196:	e01e      	b.n	80061d6 <ff_oem2uni+0x7e>
				i = li + (hi - li) / 2;
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	085b      	lsrs	r3, r3, #1
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	4413      	add	r3, r2
 80061a4:	61bb      	str	r3, [r7, #24]
				if (oem == p[i * 2]) break;
 80061a6:	69bb      	ldr	r3, [r7, #24]
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	4413      	add	r3, r2
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	88fa      	ldrh	r2, [r7, #6]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d013      	beq.n	80061de <ff_oem2uni+0x86>
				if (oem > p[i * 2]) {
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	4413      	add	r3, r2
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	88fa      	ldrh	r2, [r7, #6]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d902      	bls.n	80061cc <ff_oem2uni+0x74>
					li = i;
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	613b      	str	r3, [r7, #16]
 80061ca:	e001      	b.n	80061d0 <ff_oem2uni+0x78>
				} else {
					hi = i;
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	60fb      	str	r3, [r7, #12]
			for (n = 16; n; n--) {
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	3b01      	subs	r3, #1
 80061d4:	617b      	str	r3, [r7, #20]
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1dd      	bne.n	8006198 <ff_oem2uni+0x40>
 80061dc:	e000      	b.n	80061e0 <ff_oem2uni+0x88>
				if (oem == p[i * 2]) break;
 80061de:	bf00      	nop
				}
			}
			if (n != 0) c = p[i * 2 + 1];
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d006      	beq.n	80061f4 <ff_oem2uni+0x9c>
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	3302      	adds	r3, #2
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	4413      	add	r3, r2
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	83fb      	strh	r3, [r7, #30]
		}
	}

	return c;
 80061f4:	8bfb      	ldrh	r3, [r7, #30]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3724      	adds	r7, #36	; 0x24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	08020b0c 	.word	0x08020b0c

08006208 <ff_wtoupper>:
/*------------------------------------------------------------------------*/

DWORD ff_wtoupper (	/* Returns up-converted code point */
	DWORD uni		/* Unicode code point to be up-converted */
)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006216:	d27d      	bcs.n	8006314 <ff_wtoupper+0x10c>
		uc = (WORD)uni;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	827b      	strh	r3, [r7, #18]
		p = uc < 0x1000 ? cvt1 : cvt2;
 800621c:	8a7b      	ldrh	r3, [r7, #18]
 800621e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006222:	d201      	bcs.n	8006228 <ff_wtoupper+0x20>
 8006224:	4b3f      	ldr	r3, [pc, #252]	; (8006324 <ff_wtoupper+0x11c>)
 8006226:	e000      	b.n	800622a <ff_wtoupper+0x22>
 8006228:	4b3f      	ldr	r3, [pc, #252]	; (8006328 <ff_wtoupper+0x120>)
 800622a:	617b      	str	r3, [r7, #20]
		for (;;) {
			bc = *p++;								/* Get the block base */
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	1c9a      	adds	r2, r3, #2
 8006230:	617a      	str	r2, [r7, #20]
 8006232:	881b      	ldrh	r3, [r3, #0]
 8006234:	823b      	strh	r3, [r7, #16]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 8006236:	8a3b      	ldrh	r3, [r7, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d069      	beq.n	8006310 <ff_wtoupper+0x108>
 800623c:	8a7a      	ldrh	r2, [r7, #18]
 800623e:	8a3b      	ldrh	r3, [r7, #16]
 8006240:	429a      	cmp	r2, r3
 8006242:	d365      	bcc.n	8006310 <ff_wtoupper+0x108>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	1c9a      	adds	r2, r3, #2
 8006248:	617a      	str	r2, [r7, #20]
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	81fb      	strh	r3, [r7, #14]
 800624e:	89fb      	ldrh	r3, [r7, #14]
 8006250:	0a1b      	lsrs	r3, r3, #8
 8006252:	81bb      	strh	r3, [r7, #12]
 8006254:	89fb      	ldrh	r3, [r7, #14]
 8006256:	b2db      	uxtb	r3, r3
 8006258:	81fb      	strh	r3, [r7, #14]
			if (uc < bc + nc) {	/* In the block? */
 800625a:	8a7a      	ldrh	r2, [r7, #18]
 800625c:	8a39      	ldrh	r1, [r7, #16]
 800625e:	89fb      	ldrh	r3, [r7, #14]
 8006260:	440b      	add	r3, r1
 8006262:	429a      	cmp	r2, r3
 8006264:	da4a      	bge.n	80062fc <ff_wtoupper+0xf4>
				switch (cmd) {
 8006266:	89bb      	ldrh	r3, [r7, #12]
 8006268:	2b08      	cmp	r3, #8
 800626a:	d850      	bhi.n	800630e <ff_wtoupper+0x106>
 800626c:	a201      	add	r2, pc, #4	; (adr r2, 8006274 <ff_wtoupper+0x6c>)
 800626e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006272:	bf00      	nop
 8006274:	08006299 	.word	0x08006299
 8006278:	080062ab 	.word	0x080062ab
 800627c:	080062c1 	.word	0x080062c1
 8006280:	080062c9 	.word	0x080062c9
 8006284:	080062d1 	.word	0x080062d1
 8006288:	080062d9 	.word	0x080062d9
 800628c:	080062e1 	.word	0x080062e1
 8006290:	080062e9 	.word	0x080062e9
 8006294:	080062f1 	.word	0x080062f1
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 8006298:	8a7a      	ldrh	r2, [r7, #18]
 800629a:	8a3b      	ldrh	r3, [r7, #16]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	005b      	lsls	r3, r3, #1
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	4413      	add	r3, r2
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	827b      	strh	r3, [r7, #18]
 80062a8:	e027      	b.n	80062fa <ff_wtoupper+0xf2>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 80062aa:	8a7a      	ldrh	r2, [r7, #18]
 80062ac:	8a3b      	ldrh	r3, [r7, #16]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	8a7a      	ldrh	r2, [r7, #18]
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	827b      	strh	r3, [r7, #18]
 80062be:	e01c      	b.n	80062fa <ff_wtoupper+0xf2>
				case 2: uc -= 16; break;			/* Shift -16 */
 80062c0:	8a7b      	ldrh	r3, [r7, #18]
 80062c2:	3b10      	subs	r3, #16
 80062c4:	827b      	strh	r3, [r7, #18]
 80062c6:	e018      	b.n	80062fa <ff_wtoupper+0xf2>
				case 3:	uc -= 32; break;			/* Shift -32 */
 80062c8:	8a7b      	ldrh	r3, [r7, #18]
 80062ca:	3b20      	subs	r3, #32
 80062cc:	827b      	strh	r3, [r7, #18]
 80062ce:	e014      	b.n	80062fa <ff_wtoupper+0xf2>
				case 4:	uc -= 48; break;			/* Shift -48 */
 80062d0:	8a7b      	ldrh	r3, [r7, #18]
 80062d2:	3b30      	subs	r3, #48	; 0x30
 80062d4:	827b      	strh	r3, [r7, #18]
 80062d6:	e010      	b.n	80062fa <ff_wtoupper+0xf2>
				case 5:	uc -= 26; break;			/* Shift -26 */
 80062d8:	8a7b      	ldrh	r3, [r7, #18]
 80062da:	3b1a      	subs	r3, #26
 80062dc:	827b      	strh	r3, [r7, #18]
 80062de:	e00c      	b.n	80062fa <ff_wtoupper+0xf2>
				case 6:	uc += 8; break;				/* Shift +8 */
 80062e0:	8a7b      	ldrh	r3, [r7, #18]
 80062e2:	3308      	adds	r3, #8
 80062e4:	827b      	strh	r3, [r7, #18]
 80062e6:	e008      	b.n	80062fa <ff_wtoupper+0xf2>
				case 7: uc -= 80; break;			/* Shift -80 */
 80062e8:	8a7b      	ldrh	r3, [r7, #18]
 80062ea:	3b50      	subs	r3, #80	; 0x50
 80062ec:	827b      	strh	r3, [r7, #18]
 80062ee:	e004      	b.n	80062fa <ff_wtoupper+0xf2>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 80062f0:	8a7b      	ldrh	r3, [r7, #18]
 80062f2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80062f6:	827b      	strh	r3, [r7, #18]
 80062f8:	bf00      	nop
				}
				break;
 80062fa:	e008      	b.n	800630e <ff_wtoupper+0x106>
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
 80062fc:	89bb      	ldrh	r3, [r7, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d194      	bne.n	800622c <ff_wtoupper+0x24>
 8006302:	89fb      	ldrh	r3, [r7, #14]
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	4413      	add	r3, r2
 800630a:	617b      	str	r3, [r7, #20]
			bc = *p++;								/* Get the block base */
 800630c:	e78e      	b.n	800622c <ff_wtoupper+0x24>
				break;
 800630e:	bf00      	nop
		}
		uni = uc;
 8006310:	8a7b      	ldrh	r3, [r7, #18]
 8006312:	607b      	str	r3, [r7, #4]
	}

	return uni;
 8006314:	687b      	ldr	r3, [r7, #4]
}
 8006316:	4618      	mov	r0, r3
 8006318:	371c      	adds	r7, #28
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	08027e84 	.word	0x08027e84
 8006328:	08028078 	.word	0x08028078

0800632c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006330:	f000 ff56 	bl	80071e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006334:	f000 f810 	bl	8006358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006338:	f000 f8ae 	bl	8006498 <MX_GPIO_Init>
  MX_LWIP_Init();
 800633c:	f003 fa26 	bl	800978c <MX_LWIP_Init>
  MX_SPI1_Init();
 8006340:	f000 f874 	bl	800642c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  udp_server_init();
 8006344:	f000 fa46 	bl	80067d4 <udp_server_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ethernetif_input(&gnetif);
 8006348:	4802      	ldr	r0, [pc, #8]	; (8006354 <main+0x28>)
 800634a:	f003 fd07 	bl	8009d5c <ethernetif_input>
	  	  sys_check_timeouts();
 800634e:	f00a fcf9 	bl	8010d44 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 8006352:	e7f9      	b.n	8006348 <main+0x1c>
 8006354:	200005a8 	.word	0x200005a8

08006358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b094      	sub	sp, #80	; 0x50
 800635c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800635e:	f107 0320 	add.w	r3, r7, #32
 8006362:	2230      	movs	r2, #48	; 0x30
 8006364:	2100      	movs	r1, #0
 8006366:	4618      	mov	r0, r3
 8006368:	f00f fbc4 	bl	8015af4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800636c:	f107 030c 	add.w	r3, r7, #12
 8006370:	2200      	movs	r2, #0
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	605a      	str	r2, [r3, #4]
 8006376:	609a      	str	r2, [r3, #8]
 8006378:	60da      	str	r2, [r3, #12]
 800637a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800637c:	2300      	movs	r3, #0
 800637e:	60bb      	str	r3, [r7, #8]
 8006380:	4b28      	ldr	r3, [pc, #160]	; (8006424 <SystemClock_Config+0xcc>)
 8006382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006384:	4a27      	ldr	r2, [pc, #156]	; (8006424 <SystemClock_Config+0xcc>)
 8006386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800638a:	6413      	str	r3, [r2, #64]	; 0x40
 800638c:	4b25      	ldr	r3, [pc, #148]	; (8006424 <SystemClock_Config+0xcc>)
 800638e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006394:	60bb      	str	r3, [r7, #8]
 8006396:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006398:	2300      	movs	r3, #0
 800639a:	607b      	str	r3, [r7, #4]
 800639c:	4b22      	ldr	r3, [pc, #136]	; (8006428 <SystemClock_Config+0xd0>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a21      	ldr	r2, [pc, #132]	; (8006428 <SystemClock_Config+0xd0>)
 80063a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063a6:	6013      	str	r3, [r2, #0]
 80063a8:	4b1f      	ldr	r3, [pc, #124]	; (8006428 <SystemClock_Config+0xd0>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063b0:	607b      	str	r3, [r7, #4]
 80063b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80063b4:	2301      	movs	r3, #1
 80063b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80063b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80063bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80063be:	2302      	movs	r3, #2
 80063c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80063c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80063c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80063c8:	2304      	movs	r3, #4
 80063ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80063cc:	23a8      	movs	r3, #168	; 0xa8
 80063ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80063d0:	2302      	movs	r3, #2
 80063d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80063d4:	2304      	movs	r3, #4
 80063d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80063d8:	f107 0320 	add.w	r3, r7, #32
 80063dc:	4618      	mov	r0, r3
 80063de:	f002 f9a7 	bl	8008730 <HAL_RCC_OscConfig>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80063e8:	f000 f89a 	bl	8006520 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80063ec:	230f      	movs	r3, #15
 80063ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80063f0:	2302      	movs	r3, #2
 80063f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80063f4:	2300      	movs	r3, #0
 80063f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80063f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80063fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80063fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006402:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006404:	f107 030c 	add.w	r3, r7, #12
 8006408:	2105      	movs	r1, #5
 800640a:	4618      	mov	r0, r3
 800640c:	f002 fc00 	bl	8008c10 <HAL_RCC_ClockConfig>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8006416:	f000 f883 	bl	8006520 <Error_Handler>
  }
}
 800641a:	bf00      	nop
 800641c:	3750      	adds	r7, #80	; 0x50
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	40023800 	.word	0x40023800
 8006428:	40007000 	.word	0x40007000

0800642c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006430:	4b17      	ldr	r3, [pc, #92]	; (8006490 <MX_SPI1_Init+0x64>)
 8006432:	4a18      	ldr	r2, [pc, #96]	; (8006494 <MX_SPI1_Init+0x68>)
 8006434:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006436:	4b16      	ldr	r3, [pc, #88]	; (8006490 <MX_SPI1_Init+0x64>)
 8006438:	f44f 7282 	mov.w	r2, #260	; 0x104
 800643c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800643e:	4b14      	ldr	r3, [pc, #80]	; (8006490 <MX_SPI1_Init+0x64>)
 8006440:	2200      	movs	r2, #0
 8006442:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006444:	4b12      	ldr	r3, [pc, #72]	; (8006490 <MX_SPI1_Init+0x64>)
 8006446:	2200      	movs	r2, #0
 8006448:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800644a:	4b11      	ldr	r3, [pc, #68]	; (8006490 <MX_SPI1_Init+0x64>)
 800644c:	2200      	movs	r2, #0
 800644e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006450:	4b0f      	ldr	r3, [pc, #60]	; (8006490 <MX_SPI1_Init+0x64>)
 8006452:	2200      	movs	r2, #0
 8006454:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006456:	4b0e      	ldr	r3, [pc, #56]	; (8006490 <MX_SPI1_Init+0x64>)
 8006458:	f44f 7200 	mov.w	r2, #512	; 0x200
 800645c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800645e:	4b0c      	ldr	r3, [pc, #48]	; (8006490 <MX_SPI1_Init+0x64>)
 8006460:	2218      	movs	r2, #24
 8006462:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006464:	4b0a      	ldr	r3, [pc, #40]	; (8006490 <MX_SPI1_Init+0x64>)
 8006466:	2200      	movs	r2, #0
 8006468:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800646a:	4b09      	ldr	r3, [pc, #36]	; (8006490 <MX_SPI1_Init+0x64>)
 800646c:	2200      	movs	r2, #0
 800646e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006470:	4b07      	ldr	r3, [pc, #28]	; (8006490 <MX_SPI1_Init+0x64>)
 8006472:	2200      	movs	r2, #0
 8006474:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006476:	4b06      	ldr	r3, [pc, #24]	; (8006490 <MX_SPI1_Init+0x64>)
 8006478:	220a      	movs	r2, #10
 800647a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800647c:	4804      	ldr	r0, [pc, #16]	; (8006490 <MX_SPI1_Init+0x64>)
 800647e:	f002 fd91 	bl	8008fa4 <HAL_SPI_Init>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006488:	f000 f84a 	bl	8006520 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800648c:	bf00      	nop
 800648e:	bd80      	pop	{r7, pc}
 8006490:	200005dc 	.word	0x200005dc
 8006494:	40013000 	.word	0x40013000

08006498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800649e:	2300      	movs	r3, #0
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	4b1e      	ldr	r3, [pc, #120]	; (800651c <MX_GPIO_Init+0x84>)
 80064a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a6:	4a1d      	ldr	r2, [pc, #116]	; (800651c <MX_GPIO_Init+0x84>)
 80064a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ac:	6313      	str	r3, [r2, #48]	; 0x30
 80064ae:	4b1b      	ldr	r3, [pc, #108]	; (800651c <MX_GPIO_Init+0x84>)
 80064b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b6:	60fb      	str	r3, [r7, #12]
 80064b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80064ba:	2300      	movs	r3, #0
 80064bc:	60bb      	str	r3, [r7, #8]
 80064be:	4b17      	ldr	r3, [pc, #92]	; (800651c <MX_GPIO_Init+0x84>)
 80064c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c2:	4a16      	ldr	r2, [pc, #88]	; (800651c <MX_GPIO_Init+0x84>)
 80064c4:	f043 0304 	orr.w	r3, r3, #4
 80064c8:	6313      	str	r3, [r2, #48]	; 0x30
 80064ca:	4b14      	ldr	r3, [pc, #80]	; (800651c <MX_GPIO_Init+0x84>)
 80064cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ce:	f003 0304 	and.w	r3, r3, #4
 80064d2:	60bb      	str	r3, [r7, #8]
 80064d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80064d6:	2300      	movs	r3, #0
 80064d8:	607b      	str	r3, [r7, #4]
 80064da:	4b10      	ldr	r3, [pc, #64]	; (800651c <MX_GPIO_Init+0x84>)
 80064dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064de:	4a0f      	ldr	r2, [pc, #60]	; (800651c <MX_GPIO_Init+0x84>)
 80064e0:	f043 0301 	orr.w	r3, r3, #1
 80064e4:	6313      	str	r3, [r2, #48]	; 0x30
 80064e6:	4b0d      	ldr	r3, [pc, #52]	; (800651c <MX_GPIO_Init+0x84>)
 80064e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	607b      	str	r3, [r7, #4]
 80064f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80064f2:	2300      	movs	r3, #0
 80064f4:	603b      	str	r3, [r7, #0]
 80064f6:	4b09      	ldr	r3, [pc, #36]	; (800651c <MX_GPIO_Init+0x84>)
 80064f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fa:	4a08      	ldr	r2, [pc, #32]	; (800651c <MX_GPIO_Init+0x84>)
 80064fc:	f043 0302 	orr.w	r3, r3, #2
 8006500:	6313      	str	r3, [r2, #48]	; 0x30
 8006502:	4b06      	ldr	r3, [pc, #24]	; (800651c <MX_GPIO_Init+0x84>)
 8006504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	603b      	str	r3, [r7, #0]
 800650c:	683b      	ldr	r3, [r7, #0]

}
 800650e:	bf00      	nop
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	40023800 	.word	0x40023800

08006520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006520:	b480      	push	{r7}
 8006522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006524:	bf00      	nop
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
	...

08006530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006536:	2300      	movs	r3, #0
 8006538:	607b      	str	r3, [r7, #4]
 800653a:	4b10      	ldr	r3, [pc, #64]	; (800657c <HAL_MspInit+0x4c>)
 800653c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800653e:	4a0f      	ldr	r2, [pc, #60]	; (800657c <HAL_MspInit+0x4c>)
 8006540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006544:	6453      	str	r3, [r2, #68]	; 0x44
 8006546:	4b0d      	ldr	r3, [pc, #52]	; (800657c <HAL_MspInit+0x4c>)
 8006548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800654a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800654e:	607b      	str	r3, [r7, #4]
 8006550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006552:	2300      	movs	r3, #0
 8006554:	603b      	str	r3, [r7, #0]
 8006556:	4b09      	ldr	r3, [pc, #36]	; (800657c <HAL_MspInit+0x4c>)
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	4a08      	ldr	r2, [pc, #32]	; (800657c <HAL_MspInit+0x4c>)
 800655c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006560:	6413      	str	r3, [r2, #64]	; 0x40
 8006562:	4b06      	ldr	r3, [pc, #24]	; (800657c <HAL_MspInit+0x4c>)
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800656a:	603b      	str	r3, [r7, #0]
 800656c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800656e:	bf00      	nop
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	40023800 	.word	0x40023800

08006580 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b08a      	sub	sp, #40	; 0x28
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006588:	f107 0314 	add.w	r3, r7, #20
 800658c:	2200      	movs	r2, #0
 800658e:	601a      	str	r2, [r3, #0]
 8006590:	605a      	str	r2, [r3, #4]
 8006592:	609a      	str	r2, [r3, #8]
 8006594:	60da      	str	r2, [r3, #12]
 8006596:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a19      	ldr	r2, [pc, #100]	; (8006604 <HAL_SPI_MspInit+0x84>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d12b      	bne.n	80065fa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80065a2:	2300      	movs	r3, #0
 80065a4:	613b      	str	r3, [r7, #16]
 80065a6:	4b18      	ldr	r3, [pc, #96]	; (8006608 <HAL_SPI_MspInit+0x88>)
 80065a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065aa:	4a17      	ldr	r2, [pc, #92]	; (8006608 <HAL_SPI_MspInit+0x88>)
 80065ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80065b0:	6453      	str	r3, [r2, #68]	; 0x44
 80065b2:	4b15      	ldr	r3, [pc, #84]	; (8006608 <HAL_SPI_MspInit+0x88>)
 80065b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065ba:	613b      	str	r3, [r7, #16]
 80065bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80065be:	2300      	movs	r3, #0
 80065c0:	60fb      	str	r3, [r7, #12]
 80065c2:	4b11      	ldr	r3, [pc, #68]	; (8006608 <HAL_SPI_MspInit+0x88>)
 80065c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c6:	4a10      	ldr	r2, [pc, #64]	; (8006608 <HAL_SPI_MspInit+0x88>)
 80065c8:	f043 0302 	orr.w	r3, r3, #2
 80065cc:	6313      	str	r3, [r2, #48]	; 0x30
 80065ce:	4b0e      	ldr	r3, [pc, #56]	; (8006608 <HAL_SPI_MspInit+0x88>)
 80065d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80065da:	2338      	movs	r3, #56	; 0x38
 80065dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065de:	2302      	movs	r3, #2
 80065e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065e2:	2300      	movs	r3, #0
 80065e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065e6:	2303      	movs	r3, #3
 80065e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80065ea:	2305      	movs	r3, #5
 80065ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065ee:	f107 0314 	add.w	r3, r7, #20
 80065f2:	4619      	mov	r1, r3
 80065f4:	4805      	ldr	r0, [pc, #20]	; (800660c <HAL_SPI_MspInit+0x8c>)
 80065f6:	f001 ff01 	bl	80083fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80065fa:	bf00      	nop
 80065fc:	3728      	adds	r7, #40	; 0x28
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	40013000 	.word	0x40013000
 8006608:	40023800 	.word	0x40023800
 800660c:	40020400 	.word	0x40020400

08006610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006610:	b480      	push	{r7}
 8006612:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006614:	bf00      	nop
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800661e:	b480      	push	{r7}
 8006620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006622:	e7fe      	b.n	8006622 <HardFault_Handler+0x4>

08006624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006624:	b480      	push	{r7}
 8006626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006628:	e7fe      	b.n	8006628 <MemManage_Handler+0x4>

0800662a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800662a:	b480      	push	{r7}
 800662c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800662e:	e7fe      	b.n	800662e <BusFault_Handler+0x4>

08006630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006630:	b480      	push	{r7}
 8006632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006634:	e7fe      	b.n	8006634 <UsageFault_Handler+0x4>

08006636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006636:	b480      	push	{r7}
 8006638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800663a:	bf00      	nop
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006644:	b480      	push	{r7}
 8006646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006648:	bf00      	nop
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006652:	b480      	push	{r7}
 8006654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006656:	bf00      	nop
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 8006664:	f7fa fcca 	bl	8000ffc <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006668:	f000 fe0c 	bl	8007284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800666c:	bf00      	nop
 800666e:	bd80      	pop	{r7, pc}

08006670 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800667c:	2300      	movs	r3, #0
 800667e:	617b      	str	r3, [r7, #20]
 8006680:	e00a      	b.n	8006698 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006682:	f3af 8000 	nop.w
 8006686:	4601      	mov	r1, r0
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	1c5a      	adds	r2, r3, #1
 800668c:	60ba      	str	r2, [r7, #8]
 800668e:	b2ca      	uxtb	r2, r1
 8006690:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	3301      	adds	r3, #1
 8006696:	617b      	str	r3, [r7, #20]
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	429a      	cmp	r2, r3
 800669e:	dbf0      	blt.n	8006682 <_read+0x12>
	}

return len;
 80066a0:	687b      	ldr	r3, [r7, #4]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3718      	adds	r7, #24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}

080066aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b086      	sub	sp, #24
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	60f8      	str	r0, [r7, #12]
 80066b2:	60b9      	str	r1, [r7, #8]
 80066b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066b6:	2300      	movs	r3, #0
 80066b8:	617b      	str	r3, [r7, #20]
 80066ba:	e009      	b.n	80066d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	1c5a      	adds	r2, r3, #1
 80066c0:	60ba      	str	r2, [r7, #8]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	4618      	mov	r0, r3
 80066c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	3301      	adds	r3, #1
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	dbf1      	blt.n	80066bc <_write+0x12>
	}
	return len;
 80066d8:	687b      	ldr	r3, [r7, #4]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3718      	adds	r7, #24
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}

080066e2 <_close>:

int _close(int file)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
	return -1;
 80066ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80066fa:	b480      	push	{r7}
 80066fc:	b083      	sub	sp, #12
 80066fe:	af00      	add	r7, sp, #0
 8006700:	6078      	str	r0, [r7, #4]
 8006702:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800670a:	605a      	str	r2, [r3, #4]
	return 0;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <_isatty>:

int _isatty(int file)
{
 800671a:	b480      	push	{r7}
 800671c:	b083      	sub	sp, #12
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
	return 1;
 8006722:	2301      	movs	r3, #1
}
 8006724:	4618      	mov	r0, r3
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
	return 0;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
	...

0800674c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006754:	4b11      	ldr	r3, [pc, #68]	; (800679c <_sbrk+0x50>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d102      	bne.n	8006762 <_sbrk+0x16>
		heap_end = &end;
 800675c:	4b0f      	ldr	r3, [pc, #60]	; (800679c <_sbrk+0x50>)
 800675e:	4a10      	ldr	r2, [pc, #64]	; (80067a0 <_sbrk+0x54>)
 8006760:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006762:	4b0e      	ldr	r3, [pc, #56]	; (800679c <_sbrk+0x50>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006768:	4b0c      	ldr	r3, [pc, #48]	; (800679c <_sbrk+0x50>)
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4413      	add	r3, r2
 8006770:	466a      	mov	r2, sp
 8006772:	4293      	cmp	r3, r2
 8006774:	d905      	bls.n	8006782 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8006776:	4b0b      	ldr	r3, [pc, #44]	; (80067a4 <_sbrk+0x58>)
 8006778:	220c      	movs	r2, #12
 800677a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800677c:	f04f 33ff 	mov.w	r3, #4294967295
 8006780:	e006      	b.n	8006790 <_sbrk+0x44>
	}

	heap_end += incr;
 8006782:	4b06      	ldr	r3, [pc, #24]	; (800679c <_sbrk+0x50>)
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4413      	add	r3, r2
 800678a:	4a04      	ldr	r2, [pc, #16]	; (800679c <_sbrk+0x50>)
 800678c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800678e:	68fb      	ldr	r3, [r7, #12]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	200000b0 	.word	0x200000b0
 80067a0:	20007740 	.word	0x20007740
 80067a4:	20007738 	.word	0x20007738

080067a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80067a8:	b480      	push	{r7}
 80067aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80067ac:	4b08      	ldr	r3, [pc, #32]	; (80067d0 <SystemInit+0x28>)
 80067ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b2:	4a07      	ldr	r2, [pc, #28]	; (80067d0 <SystemInit+0x28>)
 80067b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80067bc:	4b04      	ldr	r3, [pc, #16]	; (80067d0 <SystemInit+0x28>)
 80067be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80067c2:	609a      	str	r2, [r3, #8]
#endif
}
 80067c4:	bf00      	nop
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	e000ed00 	.word	0xe000ed00

080067d4 <udp_server_init>:
uint16_t delete_directory(char * path);
uint16_t create_directory(char * path);


void udp_server_init(void)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
   struct udp_pcb *upcb;
   err_t err;
   upcb = udp_new();
 80067da:	f00a ffc5 	bl	8011768 <udp_new>
 80067de:	6078      	str	r0, [r7, #4]

   if (upcb)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d010      	beq.n	8006808 <udp_server_init+0x34>
   {
      err = udp_bind(upcb, IP_ADDR_ANY, UDP_SERVER_PORT);
 80067e6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80067ea:	4909      	ldr	r1, [pc, #36]	; (8006810 <udp_server_init+0x3c>)
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f00a fe63 	bl	80114b8 <udp_bind>
 80067f2:	4603      	mov	r3, r0
 80067f4:	70fb      	strb	r3, [r7, #3]
      if(err == ERR_OK)
 80067f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d104      	bne.n	8006808 <udp_server_init+0x34>
      {
        udp_recv(upcb, udp_server_receive_callback, NULL);
 80067fe:	2200      	movs	r2, #0
 8006800:	4904      	ldr	r1, [pc, #16]	; (8006814 <udp_server_init+0x40>)
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f00a ff4e 	bl	80116a4 <udp_recv>
      }
   }
}
 8006808:	bf00      	nop
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	08028224 	.word	0x08028224
 8006814:	08006819 	.word	0x08006819

08006818 <udp_server_receive_callback>:

void udp_server_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	603b      	str	r3, [r7, #0]
  pbuf_copy_partial(p, msg_buffer, 1024, 0);
 8006826:	2300      	movs	r3, #0
 8006828:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800682c:	4918      	ldr	r1, [pc, #96]	; (8006890 <udp_server_receive_callback+0x78>)
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f004 ff84 	bl	800b73c <pbuf_copy_partial>
  process_data();
 8006834:	f000 f8a0 	bl	8006978 <process_data>
  p->tot_len = 1024;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800683e:	811a      	strh	r2, [r3, #8]
  p->len = 1024;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006846:	815a      	strh	r2, [r3, #10]
  uint16_t x = copy_to_pbuf(p, msg_buffer, 1024, 0);
 8006848:	2300      	movs	r3, #0
 800684a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800684e:	4910      	ldr	r1, [pc, #64]	; (8006890 <udp_server_receive_callback+0x78>)
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f821 	bl	8006898 <copy_to_pbuf>
 8006856:	4603      	mov	r3, r0
 8006858:	82fb      	strh	r3, [r7, #22]
  memset(msg_buffer,0,sizeof(msg_buffer));
 800685a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800685e:	2100      	movs	r1, #0
 8006860:	480b      	ldr	r0, [pc, #44]	; (8006890 <udp_server_receive_callback+0x78>)
 8006862:	f00f f947 	bl	8015af4 <memset>
  memset(file_buffer, 0, sizeof(file_buffer));
 8006866:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800686a:	2100      	movs	r1, #0
 800686c:	4809      	ldr	r0, [pc, #36]	; (8006894 <udp_server_receive_callback+0x7c>)
 800686e:	f00f f941 	bl	8015af4 <memset>
  udp_sendto(upcb, p, addr, UDP_CLIENT_PORT);
 8006872:	f644 6320 	movw	r3, #20000	; 0x4e20
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	6879      	ldr	r1, [r7, #4]
 800687a:	68b8      	ldr	r0, [r7, #8]
 800687c:	f00a fc66 	bl	801114c <udp_sendto>
  pbuf_free(p);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f004 fd61 	bl	800b348 <pbuf_free>

}
 8006886:	bf00      	nop
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	20000a38 	.word	0x20000a38
 8006894:	20000638 	.word	0x20000638

08006898 <copy_to_pbuf>:
u16_t copy_to_pbuf(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b088      	sub	sp, #32
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	4611      	mov	r1, r2
 80068a4:	461a      	mov	r2, r3
 80068a6:	460b      	mov	r3, r1
 80068a8:	80fb      	strh	r3, [r7, #6]
 80068aa:	4613      	mov	r3, r2
 80068ac:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80068ae:	2300      	movs	r3, #0
 80068b0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80068b2:	2300      	movs	r3, #0
 80068b4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d107      	bne.n	80068cc <copy_to_pbuf+0x34>
 80068bc:	4b2a      	ldr	r3, [pc, #168]	; (8006968 <copy_to_pbuf+0xd0>)
 80068be:	226b      	movs	r2, #107	; 0x6b
 80068c0:	492a      	ldr	r1, [pc, #168]	; (800696c <copy_to_pbuf+0xd4>)
 80068c2:	482b      	ldr	r0, [pc, #172]	; (8006970 <copy_to_pbuf+0xd8>)
 80068c4:	f00f f9c6 	bl	8015c54 <iprintf>
 80068c8:	2300      	movs	r3, #0
 80068ca:	e049      	b.n	8006960 <copy_to_pbuf+0xc8>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d107      	bne.n	80068e2 <copy_to_pbuf+0x4a>
 80068d2:	4b25      	ldr	r3, [pc, #148]	; (8006968 <copy_to_pbuf+0xd0>)
 80068d4:	226c      	movs	r2, #108	; 0x6c
 80068d6:	4927      	ldr	r1, [pc, #156]	; (8006974 <copy_to_pbuf+0xdc>)
 80068d8:	4825      	ldr	r0, [pc, #148]	; (8006970 <copy_to_pbuf+0xd8>)
 80068da:	f00f f9bb 	bl	8015c54 <iprintf>
 80068de:	2300      	movs	r3, #0
 80068e0:	e03e      	b.n	8006960 <copy_to_pbuf+0xc8>
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	61fb      	str	r3, [r7, #28]
 80068e6:	e034      	b.n	8006952 <copy_to_pbuf+0xba>
    if ((offset != 0) && (offset >= p->len)) {
 80068e8:	88bb      	ldrh	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00a      	beq.n	8006904 <copy_to_pbuf+0x6c>
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	895b      	ldrh	r3, [r3, #10]
 80068f2:	88ba      	ldrh	r2, [r7, #4]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d305      	bcc.n	8006904 <copy_to_pbuf+0x6c>
      offset = (u16_t)(offset - p->len);
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	895b      	ldrh	r3, [r3, #10]
 80068fc:	88ba      	ldrh	r2, [r7, #4]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	80bb      	strh	r3, [r7, #4]
 8006902:	e023      	b.n	800694c <copy_to_pbuf+0xb4>
    } else {
      buf_copy_len = (u16_t)(p->len - offset);
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	895a      	ldrh	r2, [r3, #10]
 8006908:	88bb      	ldrh	r3, [r7, #4]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800690e:	8b3a      	ldrh	r2, [r7, #24]
 8006910:	88fb      	ldrh	r3, [r7, #6]
 8006912:	429a      	cmp	r2, r3
 8006914:	d901      	bls.n	800691a <copy_to_pbuf+0x82>
        buf_copy_len = len;
 8006916:	88fb      	ldrh	r3, [r7, #6]
 8006918:	833b      	strh	r3, [r7, #24]
      }
      MEMCPY(&((char *)p->payload)[offset],&((char *)dataptr)[left] , buf_copy_len);
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	88bb      	ldrh	r3, [r7, #4]
 8006920:	18d0      	adds	r0, r2, r3
 8006922:	8b7b      	ldrh	r3, [r7, #26]
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	4413      	add	r3, r2
 8006928:	8b3a      	ldrh	r2, [r7, #24]
 800692a:	4619      	mov	r1, r3
 800692c:	f00f f8d7 	bl	8015ade <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006930:	8afa      	ldrh	r2, [r7, #22]
 8006932:	8b3b      	ldrh	r3, [r7, #24]
 8006934:	4413      	add	r3, r2
 8006936:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006938:	8b7a      	ldrh	r2, [r7, #26]
 800693a:	8b3b      	ldrh	r3, [r7, #24]
 800693c:	4413      	add	r3, r2
 800693e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006940:	88fa      	ldrh	r2, [r7, #6]
 8006942:	8b3b      	ldrh	r3, [r7, #24]
 8006944:	1ad3      	subs	r3, r2, r3
 8006946:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006948:	2300      	movs	r3, #0
 800694a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	61fb      	str	r3, [r7, #28]
 8006952:	88fb      	ldrh	r3, [r7, #6]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d002      	beq.n	800695e <copy_to_pbuf+0xc6>
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1c4      	bne.n	80068e8 <copy_to_pbuf+0x50>
    }
  }
  return copied_total;
 800695e:	8afb      	ldrh	r3, [r7, #22]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3720      	adds	r7, #32
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	08016978 	.word	0x08016978
 800696c:	08016994 	.word	0x08016994
 8006970:	080169b4 	.word	0x080169b4
 8006974:	080169dc 	.word	0x080169dc

08006978 <process_data>:
void process_data()
{
 8006978:	b580      	push	{r7, lr}
 800697a:	af00      	add	r7, sp, #0
	memcpy(operation, msg_buffer,1);
 800697c:	4b26      	ldr	r3, [pc, #152]	; (8006a18 <process_data+0xa0>)
 800697e:	781a      	ldrb	r2, [r3, #0]
 8006980:	4b26      	ldr	r3, [pc, #152]	; (8006a1c <process_data+0xa4>)
 8006982:	701a      	strb	r2, [r3, #0]
	if (operation[0] - GET_FILE_INFO == 0)
 8006984:	4b25      	ldr	r3, [pc, #148]	; (8006a1c <process_data+0xa4>)
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	2b05      	cmp	r3, #5
 800698a:	d102      	bne.n	8006992 <process_data+0x1a>
	{
		get_path_info();
 800698c:	f000 f872 	bl	8006a74 <get_path_info>
	{
		memset(msg_buffer, 0, sizeof(msg_buffer));
		memcpy(msg_buffer, operation, 1);
		memcpy(msg_buffer+1, RESP_ERR, 1);
	}
}
 8006990:	e040      	b.n	8006a14 <process_data+0x9c>
	else if (operation[0] - CHANGE_DIRECTORY == 0)
 8006992:	4b22      	ldr	r3, [pc, #136]	; (8006a1c <process_data+0xa4>)
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	2b06      	cmp	r3, #6
 8006998:	d102      	bne.n	80069a0 <process_data+0x28>
		check_if_dir_exists();
 800699a:	f000 f8ab 	bl	8006af4 <check_if_dir_exists>
}
 800699e:	e039      	b.n	8006a14 <process_data+0x9c>
	else if (operation[0] - START_SEND_FILE == 0)
 80069a0:	4b1e      	ldr	r3, [pc, #120]	; (8006a1c <process_data+0xa4>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d103      	bne.n	80069b0 <process_data+0x38>
		save_to_file(0);
 80069a8:	2000      	movs	r0, #0
 80069aa:	f000 f8df 	bl	8006b6c <save_to_file>
}
 80069ae:	e031      	b.n	8006a14 <process_data+0x9c>
	else if(operation[0] - NEXT_SEND_FILE == 0)
 80069b0:	4b1a      	ldr	r3, [pc, #104]	; (8006a1c <process_data+0xa4>)
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d103      	bne.n	80069c0 <process_data+0x48>
		save_to_file(1);
 80069b8:	2001      	movs	r0, #1
 80069ba:	f000 f8d7 	bl	8006b6c <save_to_file>
}
 80069be:	e029      	b.n	8006a14 <process_data+0x9c>
	else if(operation[0] - DELETE_FILE == 0)
 80069c0:	4b16      	ldr	r3, [pc, #88]	; (8006a1c <process_data+0xa4>)
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	2b07      	cmp	r3, #7
 80069c6:	d102      	bne.n	80069ce <process_data+0x56>
		parse_path_and_delete_file();
 80069c8:	f000 f92e 	bl	8006c28 <parse_path_and_delete_file>
}
 80069cc:	e022      	b.n	8006a14 <process_data+0x9c>
	else if(operation[0] - DELETE_DIRECTORY == 0)
 80069ce:	4b13      	ldr	r3, [pc, #76]	; (8006a1c <process_data+0xa4>)
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	2b08      	cmp	r3, #8
 80069d4:	d102      	bne.n	80069dc <process_data+0x64>
		parse_path_and_delete_directory();
 80069d6:	f000 f96f 	bl	8006cb8 <parse_path_and_delete_directory>
}
 80069da:	e01b      	b.n	8006a14 <process_data+0x9c>
	else if(operation[0] - GET_FILE == 0)
 80069dc:	4b0f      	ldr	r3, [pc, #60]	; (8006a1c <process_data+0xa4>)
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	2b09      	cmp	r3, #9
 80069e2:	d102      	bne.n	80069ea <process_data+0x72>
		read_and_send_file();
 80069e4:	f000 f9b0 	bl	8006d48 <read_and_send_file>
}
 80069e8:	e014      	b.n	8006a14 <process_data+0x9c>
	else if(operation[0] - CREATE_DIRECTORY == 0)
 80069ea:	4b0c      	ldr	r3, [pc, #48]	; (8006a1c <process_data+0xa4>)
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	2b10      	cmp	r3, #16
 80069f0:	d102      	bne.n	80069f8 <process_data+0x80>
		parse_path_and_create_directory();
 80069f2:	f000 fa1b 	bl	8006e2c <parse_path_and_create_directory>
}
 80069f6:	e00d      	b.n	8006a14 <process_data+0x9c>
		memset(msg_buffer, 0, sizeof(msg_buffer));
 80069f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069fc:	2100      	movs	r1, #0
 80069fe:	4806      	ldr	r0, [pc, #24]	; (8006a18 <process_data+0xa0>)
 8006a00:	f00f f878 	bl	8015af4 <memset>
		memcpy(msg_buffer, operation, 1);
 8006a04:	4b05      	ldr	r3, [pc, #20]	; (8006a1c <process_data+0xa4>)
 8006a06:	781a      	ldrb	r2, [r3, #0]
 8006a08:	4b03      	ldr	r3, [pc, #12]	; (8006a18 <process_data+0xa0>)
 8006a0a:	701a      	strb	r2, [r3, #0]
		memcpy(msg_buffer+1, RESP_ERR, 1);
 8006a0c:	4b04      	ldr	r3, [pc, #16]	; (8006a20 <process_data+0xa8>)
 8006a0e:	2201      	movs	r2, #1
 8006a10:	7812      	ldrb	r2, [r2, #0]
 8006a12:	701a      	strb	r2, [r3, #0]
}
 8006a14:	bf00      	nop
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	20000a38 	.word	0x20000a38
 8006a1c:	20000e3c 	.word	0x20000e3c
 8006a20:	20000a39 	.word	0x20000a39

08006a24 <find_end_of_msg>:

uint16_t find_end_of_msg()
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
	for (int i=3;i<1024;i++)
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	607b      	str	r3, [r7, #4]
 8006a2e:	e013      	b.n	8006a58 <find_end_of_msg+0x34>
	{
		if (msg_buffer[i] == '\0' || msg_buffer[i] == 42) return i - 3;
 8006a30:	4a0f      	ldr	r2, [pc, #60]	; (8006a70 <find_end_of_msg+0x4c>)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4413      	add	r3, r2
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d005      	beq.n	8006a48 <find_end_of_msg+0x24>
 8006a3c:	4a0c      	ldr	r2, [pc, #48]	; (8006a70 <find_end_of_msg+0x4c>)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4413      	add	r3, r2
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	2b2a      	cmp	r3, #42	; 0x2a
 8006a46:	d104      	bne.n	8006a52 <find_end_of_msg+0x2e>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	3b03      	subs	r3, #3
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	e008      	b.n	8006a64 <find_end_of_msg+0x40>
	for (int i=3;i<1024;i++)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	3301      	adds	r3, #1
 8006a56:	607b      	str	r3, [r7, #4]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a5e:	dbe7      	blt.n	8006a30 <find_end_of_msg+0xc>
	}
	return -1;
 8006a60:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr
 8006a70:	20000a38 	.word	0x20000a38

08006a74 <get_path_info>:
void get_path_info()
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
	uint16_t len;
	uint16_t it = find_end_of_msg();
 8006a7a:	f7ff ffd3 	bl	8006a24 <find_end_of_msg>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	80fb      	strh	r3, [r7, #6]
	memcpy(file_buffer, msg_buffer+3, it);
 8006a82:	4915      	ldr	r1, [pc, #84]	; (8006ad8 <get_path_info+0x64>)
 8006a84:	88fb      	ldrh	r3, [r7, #6]
 8006a86:	461a      	mov	r2, r3
 8006a88:	4814      	ldr	r0, [pc, #80]	; (8006adc <get_path_info+0x68>)
 8006a8a:	f00f f828 	bl	8015ade <memcpy>
	if (it < 1)
	{
		//error
	}
	len = scan_dir(file_buffer);
 8006a8e:	4813      	ldr	r0, [pc, #76]	; (8006adc <get_path_info+0x68>)
 8006a90:	f000 face 	bl	8007030 <scan_dir>
 8006a94:	4603      	mov	r3, r0
 8006a96:	80bb      	strh	r3, [r7, #4]
	memset(msg_buffer,0,sizeof(msg_buffer));
 8006a98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	4810      	ldr	r0, [pc, #64]	; (8006ae0 <get_path_info+0x6c>)
 8006aa0:	f00f f828 	bl	8015af4 <memset>
	if(len > 0)
 8006aa4:	88bb      	ldrh	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d011      	beq.n	8006ace <get_path_info+0x5a>
	{
		memcpy(msg_buffer, operation, 1);
 8006aaa:	4b0e      	ldr	r3, [pc, #56]	; (8006ae4 <get_path_info+0x70>)
 8006aac:	781a      	ldrb	r2, [r3, #0]
 8006aae:	4b0c      	ldr	r3, [pc, #48]	; (8006ae0 <get_path_info+0x6c>)
 8006ab0:	701a      	strb	r2, [r3, #0]

		memcpy(msg_buffer+1, RESP_OK, 1);
 8006ab2:	4b0d      	ldr	r3, [pc, #52]	; (8006ae8 <get_path_info+0x74>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	7812      	ldrb	r2, [r2, #0]
 8006ab8:	701a      	strb	r2, [r3, #0]
		memcpy(msg_buffer+2, id, 1);
 8006aba:	4b0c      	ldr	r3, [pc, #48]	; (8006aec <get_path_info+0x78>)
 8006abc:	4a0c      	ldr	r2, [pc, #48]	; (8006af0 <get_path_info+0x7c>)
 8006abe:	7812      	ldrb	r2, [r2, #0]
 8006ac0:	701a      	strb	r2, [r3, #0]
		memcpy(msg_buffer+3, file_buffer, len);
 8006ac2:	4805      	ldr	r0, [pc, #20]	; (8006ad8 <get_path_info+0x64>)
 8006ac4:	88bb      	ldrh	r3, [r7, #4]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	4904      	ldr	r1, [pc, #16]	; (8006adc <get_path_info+0x68>)
 8006aca:	f00f f808 	bl	8015ade <memcpy>
	}
}
 8006ace:	bf00      	nop
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20000a3b 	.word	0x20000a3b
 8006adc:	20000638 	.word	0x20000638
 8006ae0:	20000a38 	.word	0x20000a38
 8006ae4:	20000e3c 	.word	0x20000e3c
 8006ae8:	20000a39 	.word	0x20000a39
 8006aec:	20000a3a 	.word	0x20000a3a
 8006af0:	20000e38 	.word	0x20000e38

08006af4 <check_if_dir_exists>:

void check_if_dir_exists()
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
	uint16_t len;
	uint16_t it = find_end_of_msg();
 8006afa:	f7ff ff93 	bl	8006a24 <find_end_of_msg>
 8006afe:	4603      	mov	r3, r0
 8006b00:	80fb      	strh	r3, [r7, #6]
	memcpy(file_buffer, msg_buffer+3, it);
 8006b02:	4914      	ldr	r1, [pc, #80]	; (8006b54 <check_if_dir_exists+0x60>)
 8006b04:	88fb      	ldrh	r3, [r7, #6]
 8006b06:	461a      	mov	r2, r3
 8006b08:	4813      	ldr	r0, [pc, #76]	; (8006b58 <check_if_dir_exists+0x64>)
 8006b0a:	f00e ffe8 	bl	8015ade <memcpy>
	if (it < 1)
		{
			//error
		}
	FRESULT fr = f_chdir(file_buffer);
 8006b0e:	4812      	ldr	r0, [pc, #72]	; (8006b58 <check_if_dir_exists+0x64>)
 8006b10:	f7fe fefb 	bl	800590a <f_chdir>
 8006b14:	4603      	mov	r3, r0
 8006b16:	717b      	strb	r3, [r7, #5]
	memset(msg_buffer,0,sizeof(msg_buffer));
 8006b18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	480f      	ldr	r0, [pc, #60]	; (8006b5c <check_if_dir_exists+0x68>)
 8006b20:	f00e ffe8 	bl	8015af4 <memset>
	memcpy(msg_buffer, operation, 1);
 8006b24:	4b0e      	ldr	r3, [pc, #56]	; (8006b60 <check_if_dir_exists+0x6c>)
 8006b26:	781a      	ldrb	r2, [r3, #0]
 8006b28:	4b0c      	ldr	r3, [pc, #48]	; (8006b5c <check_if_dir_exists+0x68>)
 8006b2a:	701a      	strb	r2, [r3, #0]
	if(fr == FR_OK) memcpy(msg_buffer+1, RESP_OK, 1);
 8006b2c:	797b      	ldrb	r3, [r7, #5]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d104      	bne.n	8006b3c <check_if_dir_exists+0x48>
 8006b32:	4b0c      	ldr	r3, [pc, #48]	; (8006b64 <check_if_dir_exists+0x70>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	7812      	ldrb	r2, [r2, #0]
 8006b38:	701a      	strb	r2, [r3, #0]
 8006b3a:	e003      	b.n	8006b44 <check_if_dir_exists+0x50>
	else memcpy(msg_buffer+1, RESP_ERR, 1);
 8006b3c:	4b09      	ldr	r3, [pc, #36]	; (8006b64 <check_if_dir_exists+0x70>)
 8006b3e:	2201      	movs	r2, #1
 8006b40:	7812      	ldrb	r2, [r2, #0]
 8006b42:	701a      	strb	r2, [r3, #0]
	memcpy(msg_buffer+3, id, 1);
 8006b44:	4b03      	ldr	r3, [pc, #12]	; (8006b54 <check_if_dir_exists+0x60>)
 8006b46:	4a08      	ldr	r2, [pc, #32]	; (8006b68 <check_if_dir_exists+0x74>)
 8006b48:	7812      	ldrb	r2, [r2, #0]
 8006b4a:	701a      	strb	r2, [r3, #0]
}
 8006b4c:	bf00      	nop
 8006b4e:	3708      	adds	r7, #8
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	20000a3b 	.word	0x20000a3b
 8006b58:	20000638 	.word	0x20000638
 8006b5c:	20000a38 	.word	0x20000a38
 8006b60:	20000e3c 	.word	0x20000e3c
 8006b64:	20000a39 	.word	0x20000a39
 8006b68:	20000e38 	.word	0x20000e38

08006b6c <save_to_file>:

void save_to_file(uint16_t append)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b09c      	sub	sp, #112	; 0x70
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	4603      	mov	r3, r0
 8006b74:	80fb      	strh	r3, [r7, #6]
	uint16_t it = find_end_of_msg();
 8006b76:	f7ff ff55 	bl	8006a24 <find_end_of_msg>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	char filename[100];
	memset(filename,0, sizeof(filename));
 8006b80:	f107 0308 	add.w	r3, r7, #8
 8006b84:	2264      	movs	r2, #100	; 0x64
 8006b86:	2100      	movs	r1, #0
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f00e ffb3 	bl	8015af4 <memset>
	memcpy(filename, msg_buffer + 3, it);
 8006b8e:	491f      	ldr	r1, [pc, #124]	; (8006c0c <save_to_file+0xa0>)
 8006b90:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8006b94:	f107 0308 	add.w	r3, r7, #8
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f00e ffa0 	bl	8015ade <memcpy>
	memcpy(file_buffer, msg_buffer + 3 + it + 1, 1024 - it - 3);
 8006b9e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006ba2:	3304      	adds	r3, #4
 8006ba4:	4a1a      	ldr	r2, [pc, #104]	; (8006c10 <save_to_file+0xa4>)
 8006ba6:	1899      	adds	r1, r3, r2
 8006ba8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006bac:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	4817      	ldr	r0, [pc, #92]	; (8006c14 <save_to_file+0xa8>)
 8006bb6:	f00e ff92 	bl	8015ade <memcpy>
	memset(msg_buffer, 0, sizeof(msg_buffer));
 8006bba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	4813      	ldr	r0, [pc, #76]	; (8006c10 <save_to_file+0xa4>)
 8006bc2:	f00e ff97 	bl	8015af4 <memset>
	FRESULT fres = write_file(filename, append);
 8006bc6:	88fa      	ldrh	r2, [r7, #6]
 8006bc8:	f107 0308 	add.w	r3, r7, #8
 8006bcc:	4611      	mov	r1, r2
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 f9b6 	bl	8006f40 <write_file>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	memcpy(msg_buffer, operation, 1);
 8006bda:	4b0f      	ldr	r3, [pc, #60]	; (8006c18 <save_to_file+0xac>)
 8006bdc:	781a      	ldrb	r2, [r3, #0]
 8006bde:	4b0c      	ldr	r3, [pc, #48]	; (8006c10 <save_to_file+0xa4>)
 8006be0:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK)
 8006be2:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d104      	bne.n	8006bf4 <save_to_file+0x88>
	{
		memcpy(msg_buffer+1, RESP_OK, 1);
 8006bea:	4b0c      	ldr	r3, [pc, #48]	; (8006c1c <save_to_file+0xb0>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	7812      	ldrb	r2, [r2, #0]
 8006bf0:	701a      	strb	r2, [r3, #0]
 8006bf2:	e003      	b.n	8006bfc <save_to_file+0x90>

	}
	else
	{
		memcpy(msg_buffer+1, RESP_ERR, 1);
 8006bf4:	4b09      	ldr	r3, [pc, #36]	; (8006c1c <save_to_file+0xb0>)
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	7812      	ldrb	r2, [r2, #0]
 8006bfa:	701a      	strb	r2, [r3, #0]
	}
	memcpy(msg_buffer+2, id, 1);
 8006bfc:	4b08      	ldr	r3, [pc, #32]	; (8006c20 <save_to_file+0xb4>)
 8006bfe:	4a09      	ldr	r2, [pc, #36]	; (8006c24 <save_to_file+0xb8>)
 8006c00:	7812      	ldrb	r2, [r2, #0]
 8006c02:	701a      	strb	r2, [r3, #0]
}
 8006c04:	bf00      	nop
 8006c06:	3770      	adds	r7, #112	; 0x70
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	20000a3b 	.word	0x20000a3b
 8006c10:	20000a38 	.word	0x20000a38
 8006c14:	20000638 	.word	0x20000638
 8006c18:	20000e3c 	.word	0x20000e3c
 8006c1c:	20000a39 	.word	0x20000a39
 8006c20:	20000a3a 	.word	0x20000a3a
 8006c24:	20000e38 	.word	0x20000e38

08006c28 <parse_path_and_delete_file>:
void parse_path_and_delete_file()
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b09a      	sub	sp, #104	; 0x68
 8006c2c:	af00      	add	r7, sp, #0
	uint16_t it = find_end_of_msg();
 8006c2e:	f7ff fef9 	bl	8006a24 <find_end_of_msg>
 8006c32:	4603      	mov	r3, r0
 8006c34:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	char filename[100];
	memset(filename, 0, sizeof(filename));
 8006c38:	463b      	mov	r3, r7
 8006c3a:	2264      	movs	r2, #100	; 0x64
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f00e ff58 	bl	8015af4 <memset>
	memcpy(filename, msg_buffer + 3, it);
 8006c44:	4916      	ldr	r1, [pc, #88]	; (8006ca0 <parse_path_and_delete_file+0x78>)
 8006c46:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8006c4a:	463b      	mov	r3, r7
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f00e ff46 	bl	8015ade <memcpy>
	memset(msg_buffer, 0, sizeof(msg_buffer));
 8006c52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c56:	2100      	movs	r1, #0
 8006c58:	4812      	ldr	r0, [pc, #72]	; (8006ca4 <parse_path_and_delete_file+0x7c>)
 8006c5a:	f00e ff4b 	bl	8015af4 <memset>
	FRESULT fres = delete_file(filename);
 8006c5e:	463b      	mov	r3, r7
 8006c60:	4618      	mov	r0, r3
 8006c62:	f000 fa57 	bl	8007114 <delete_file>
 8006c66:	4603      	mov	r3, r0
 8006c68:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	memcpy(msg_buffer, operation, 1);
 8006c6c:	4b0e      	ldr	r3, [pc, #56]	; (8006ca8 <parse_path_and_delete_file+0x80>)
 8006c6e:	781a      	ldrb	r2, [r3, #0]
 8006c70:	4b0c      	ldr	r3, [pc, #48]	; (8006ca4 <parse_path_and_delete_file+0x7c>)
 8006c72:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK)
 8006c74:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d104      	bne.n	8006c86 <parse_path_and_delete_file+0x5e>
	{
		memcpy(msg_buffer+1, RESP_OK, 1);
 8006c7c:	4b0b      	ldr	r3, [pc, #44]	; (8006cac <parse_path_and_delete_file+0x84>)
 8006c7e:	2200      	movs	r2, #0
 8006c80:	7812      	ldrb	r2, [r2, #0]
 8006c82:	701a      	strb	r2, [r3, #0]
 8006c84:	e003      	b.n	8006c8e <parse_path_and_delete_file+0x66>
	}
	else
	{
		memcpy(msg_buffer+1, RESP_ERR, 1);
 8006c86:	4b09      	ldr	r3, [pc, #36]	; (8006cac <parse_path_and_delete_file+0x84>)
 8006c88:	2201      	movs	r2, #1
 8006c8a:	7812      	ldrb	r2, [r2, #0]
 8006c8c:	701a      	strb	r2, [r3, #0]
	}
	memcpy(msg_buffer+2, id, 1);
 8006c8e:	4b08      	ldr	r3, [pc, #32]	; (8006cb0 <parse_path_and_delete_file+0x88>)
 8006c90:	4a08      	ldr	r2, [pc, #32]	; (8006cb4 <parse_path_and_delete_file+0x8c>)
 8006c92:	7812      	ldrb	r2, [r2, #0]
 8006c94:	701a      	strb	r2, [r3, #0]
}
 8006c96:	bf00      	nop
 8006c98:	3768      	adds	r7, #104	; 0x68
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20000a3b 	.word	0x20000a3b
 8006ca4:	20000a38 	.word	0x20000a38
 8006ca8:	20000e3c 	.word	0x20000e3c
 8006cac:	20000a39 	.word	0x20000a39
 8006cb0:	20000a3a 	.word	0x20000a3a
 8006cb4:	20000e38 	.word	0x20000e38

08006cb8 <parse_path_and_delete_directory>:

void parse_path_and_delete_directory()
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b09a      	sub	sp, #104	; 0x68
 8006cbc:	af00      	add	r7, sp, #0
	uint16_t it = find_end_of_msg();
 8006cbe:	f7ff feb1 	bl	8006a24 <find_end_of_msg>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	char filename[100];
	memset(filename, 0, sizeof(filename));
 8006cc8:	463b      	mov	r3, r7
 8006cca:	2264      	movs	r2, #100	; 0x64
 8006ccc:	2100      	movs	r1, #0
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f00e ff10 	bl	8015af4 <memset>
	memcpy(filename, msg_buffer + 3, it);
 8006cd4:	4916      	ldr	r1, [pc, #88]	; (8006d30 <parse_path_and_delete_directory+0x78>)
 8006cd6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8006cda:	463b      	mov	r3, r7
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f00e fefe 	bl	8015ade <memcpy>
	memset(msg_buffer, 0, sizeof(msg_buffer));
 8006ce2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	4812      	ldr	r0, [pc, #72]	; (8006d34 <parse_path_and_delete_directory+0x7c>)
 8006cea:	f00e ff03 	bl	8015af4 <memset>
	FRESULT fres = delete_file(filename);
 8006cee:	463b      	mov	r3, r7
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 fa0f 	bl	8007114 <delete_file>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	memcpy(msg_buffer, operation, 1);
 8006cfc:	4b0e      	ldr	r3, [pc, #56]	; (8006d38 <parse_path_and_delete_directory+0x80>)
 8006cfe:	781a      	ldrb	r2, [r3, #0]
 8006d00:	4b0c      	ldr	r3, [pc, #48]	; (8006d34 <parse_path_and_delete_directory+0x7c>)
 8006d02:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK)
 8006d04:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d104      	bne.n	8006d16 <parse_path_and_delete_directory+0x5e>
	{
		memcpy(msg_buffer+1, RESP_OK, 1);
 8006d0c:	4b0b      	ldr	r3, [pc, #44]	; (8006d3c <parse_path_and_delete_directory+0x84>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	7812      	ldrb	r2, [r2, #0]
 8006d12:	701a      	strb	r2, [r3, #0]
 8006d14:	e003      	b.n	8006d1e <parse_path_and_delete_directory+0x66>
	}
	else
	{
		memcpy(msg_buffer+1, RESP_ERR, 1);
 8006d16:	4b09      	ldr	r3, [pc, #36]	; (8006d3c <parse_path_and_delete_directory+0x84>)
 8006d18:	2201      	movs	r2, #1
 8006d1a:	7812      	ldrb	r2, [r2, #0]
 8006d1c:	701a      	strb	r2, [r3, #0]
	}
	memcpy(msg_buffer+2, id, 1);
 8006d1e:	4b08      	ldr	r3, [pc, #32]	; (8006d40 <parse_path_and_delete_directory+0x88>)
 8006d20:	4a08      	ldr	r2, [pc, #32]	; (8006d44 <parse_path_and_delete_directory+0x8c>)
 8006d22:	7812      	ldrb	r2, [r2, #0]
 8006d24:	701a      	strb	r2, [r3, #0]
}
 8006d26:	bf00      	nop
 8006d28:	3768      	adds	r7, #104	; 0x68
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	20000a3b 	.word	0x20000a3b
 8006d34:	20000a38 	.word	0x20000a38
 8006d38:	20000e3c 	.word	0x20000e3c
 8006d3c:	20000a39 	.word	0x20000a39
 8006d40:	20000a3a 	.word	0x20000a3a
 8006d44:	20000e38 	.word	0x20000e38

08006d48 <read_and_send_file>:

void read_and_send_file()
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b09e      	sub	sp, #120	; 0x78
 8006d4c:	af00      	add	r7, sp, #0
	FRESULT fres;
	uint16_t it = find_end_of_msg();
 8006d4e:	f7ff fe69 	bl	8006a24 <find_end_of_msg>
 8006d52:	4603      	mov	r3, r0
 8006d54:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	char filename[100];
	memset(filename,0, sizeof(filename));
 8006d58:	f107 0308 	add.w	r3, r7, #8
 8006d5c:	2264      	movs	r2, #100	; 0x64
 8006d5e:	2100      	movs	r1, #0
 8006d60:	4618      	mov	r0, r3
 8006d62:	f00e fec7 	bl	8015af4 <memset>
	memcpy(filename, msg_buffer + 3, it);
 8006d66:	492a      	ldr	r1, [pc, #168]	; (8006e10 <read_and_send_file+0xc8>)
 8006d68:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006d6c:	f107 0308 	add.w	r3, r7, #8
 8006d70:	4618      	mov	r0, r3
 8006d72:	f00e feb4 	bl	8015ade <memcpy>
	char packet_counter[1] = {'\0'};
 8006d76:	2300      	movs	r3, #0
 8006d78:	713b      	strb	r3, [r7, #4]
	memcpy(packet_counter, msg_buffer + it + 4, 1);
 8006d7a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006d7e:	3304      	adds	r3, #4
 8006d80:	4a24      	ldr	r2, [pc, #144]	; (8006e14 <read_and_send_file+0xcc>)
 8006d82:	4413      	add	r3, r2
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	713b      	strb	r3, [r7, #4]
	int p_counter = 0;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	673b      	str	r3, [r7, #112]	; 0x70
	p_counter = packet_counter[0];
 8006d8c:	793b      	ldrb	r3, [r7, #4]
 8006d8e:	673b      	str	r3, [r7, #112]	; 0x70
	memset(msg_buffer, 0, sizeof(msg_buffer));
 8006d90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d94:	2100      	movs	r1, #0
 8006d96:	481f      	ldr	r0, [pc, #124]	; (8006e14 <read_and_send_file+0xcc>)
 8006d98:	f00e feac 	bl	8015af4 <memset>
	fres = read_file(filename, p_counter);
 8006d9c:	f107 0308 	add.w	r3, r7, #8
 8006da0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 f88a 	bl	8006ebc <read_file>
 8006da8:	4603      	mov	r3, r0
 8006daa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fres == FR_OK)
 8006dae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d113      	bne.n	8006dde <read_and_send_file+0x96>
		{
		if(bytes_read == 512)
 8006db6:	4b18      	ldr	r3, [pc, #96]	; (8006e18 <read_and_send_file+0xd0>)
 8006db8:	881b      	ldrh	r3, [r3, #0]
 8006dba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dbe:	d104      	bne.n	8006dca <read_and_send_file+0x82>
		{
			memcpy(msg_buffer+1, RESP_OK, 1);
 8006dc0:	4b16      	ldr	r3, [pc, #88]	; (8006e1c <read_and_send_file+0xd4>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	7812      	ldrb	r2, [r2, #0]
 8006dc6:	701a      	strb	r2, [r3, #0]
 8006dc8:	e00d      	b.n	8006de6 <read_and_send_file+0x9e>
		}
		else if(bytes_read < 512)
 8006dca:	4b13      	ldr	r3, [pc, #76]	; (8006e18 <read_and_send_file+0xd0>)
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dd2:	d208      	bcs.n	8006de6 <read_and_send_file+0x9e>
		{
			memcpy(msg_buffer+1, RESP_OK, 1);
 8006dd4:	4b11      	ldr	r3, [pc, #68]	; (8006e1c <read_and_send_file+0xd4>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	7812      	ldrb	r2, [r2, #0]
 8006dda:	701a      	strb	r2, [r3, #0]
 8006ddc:	e003      	b.n	8006de6 <read_and_send_file+0x9e>
		}
		}
		else
		{
			memcpy(msg_buffer+1, RESP_ERR, 1);
 8006dde:	4b0f      	ldr	r3, [pc, #60]	; (8006e1c <read_and_send_file+0xd4>)
 8006de0:	2201      	movs	r2, #1
 8006de2:	7812      	ldrb	r2, [r2, #0]
 8006de4:	701a      	strb	r2, [r3, #0]
		}
		memcpy(msg_buffer+2, id, 1);
 8006de6:	4b0e      	ldr	r3, [pc, #56]	; (8006e20 <read_and_send_file+0xd8>)
 8006de8:	4a0e      	ldr	r2, [pc, #56]	; (8006e24 <read_and_send_file+0xdc>)
 8006dea:	7812      	ldrb	r2, [r2, #0]
 8006dec:	701a      	strb	r2, [r3, #0]
		memcpy(msg_buffer+3, file_buffer, 512);
 8006dee:	4b08      	ldr	r3, [pc, #32]	; (8006e10 <read_and_send_file+0xc8>)
 8006df0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006df4:	490c      	ldr	r1, [pc, #48]	; (8006e28 <read_and_send_file+0xe0>)
 8006df6:	4618      	mov	r0, r3
 8006df8:	f00e fe71 	bl	8015ade <memcpy>
		memset(file_buffer, 0, sizeof(file_buffer));
 8006dfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e00:	2100      	movs	r1, #0
 8006e02:	4809      	ldr	r0, [pc, #36]	; (8006e28 <read_and_send_file+0xe0>)
 8006e04:	f00e fe76 	bl	8015af4 <memset>
}
 8006e08:	bf00      	nop
 8006e0a:	3778      	adds	r7, #120	; 0x78
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	20000a3b 	.word	0x20000a3b
 8006e14:	20000a38 	.word	0x20000a38
 8006e18:	20001090 	.word	0x20001090
 8006e1c:	20000a39 	.word	0x20000a39
 8006e20:	20000a3a 	.word	0x20000a3a
 8006e24:	20000e38 	.word	0x20000e38
 8006e28:	20000638 	.word	0x20000638

08006e2c <parse_path_and_create_directory>:

void parse_path_and_create_directory()
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b09a      	sub	sp, #104	; 0x68
 8006e30:	af00      	add	r7, sp, #0
	uint16_t it = find_end_of_msg();
 8006e32:	f7ff fdf7 	bl	8006a24 <find_end_of_msg>
 8006e36:	4603      	mov	r3, r0
 8006e38:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
		char dirname[100];
		memset(dirname, 0, sizeof(dirname));
 8006e3c:	463b      	mov	r3, r7
 8006e3e:	2264      	movs	r2, #100	; 0x64
 8006e40:	2100      	movs	r1, #0
 8006e42:	4618      	mov	r0, r3
 8006e44:	f00e fe56 	bl	8015af4 <memset>
		memcpy(dirname, msg_buffer + 3, it);
 8006e48:	4916      	ldr	r1, [pc, #88]	; (8006ea4 <parse_path_and_create_directory+0x78>)
 8006e4a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8006e4e:	463b      	mov	r3, r7
 8006e50:	4618      	mov	r0, r3
 8006e52:	f00e fe44 	bl	8015ade <memcpy>
		memset(msg_buffer, 0, sizeof(msg_buffer));
 8006e56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	4812      	ldr	r0, [pc, #72]	; (8006ea8 <parse_path_and_create_directory+0x7c>)
 8006e5e:	f00e fe49 	bl	8015af4 <memset>
		FRESULT fres = create_directory(dirname);
 8006e62:	463b      	mov	r3, r7
 8006e64:	4618      	mov	r0, r3
 8006e66:	f000 f973 	bl	8007150 <create_directory>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
		memcpy(msg_buffer, operation, 1);
 8006e70:	4b0e      	ldr	r3, [pc, #56]	; (8006eac <parse_path_and_create_directory+0x80>)
 8006e72:	781a      	ldrb	r2, [r3, #0]
 8006e74:	4b0c      	ldr	r3, [pc, #48]	; (8006ea8 <parse_path_and_create_directory+0x7c>)
 8006e76:	701a      	strb	r2, [r3, #0]
		if (fres == FR_OK)
 8006e78:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d104      	bne.n	8006e8a <parse_path_and_create_directory+0x5e>
		{
			memcpy(msg_buffer+1, RESP_OK, 1);
 8006e80:	4b0b      	ldr	r3, [pc, #44]	; (8006eb0 <parse_path_and_create_directory+0x84>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	7812      	ldrb	r2, [r2, #0]
 8006e86:	701a      	strb	r2, [r3, #0]
 8006e88:	e003      	b.n	8006e92 <parse_path_and_create_directory+0x66>
		}
		else
		{
			memcpy(msg_buffer+1, RESP_ERR, 1);
 8006e8a:	4b09      	ldr	r3, [pc, #36]	; (8006eb0 <parse_path_and_create_directory+0x84>)
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	7812      	ldrb	r2, [r2, #0]
 8006e90:	701a      	strb	r2, [r3, #0]
		}
		memcpy(msg_buffer+2, id, 1);
 8006e92:	4b08      	ldr	r3, [pc, #32]	; (8006eb4 <parse_path_and_create_directory+0x88>)
 8006e94:	4a08      	ldr	r2, [pc, #32]	; (8006eb8 <parse_path_and_create_directory+0x8c>)
 8006e96:	7812      	ldrb	r2, [r2, #0]
 8006e98:	701a      	strb	r2, [r3, #0]
}
 8006e9a:	bf00      	nop
 8006e9c:	3768      	adds	r7, #104	; 0x68
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	20000a3b 	.word	0x20000a3b
 8006ea8:	20000a38 	.word	0x20000a38
 8006eac:	20000e3c 	.word	0x20000e3c
 8006eb0:	20000a39 	.word	0x20000a39
 8006eb4:	20000a3a 	.word	0x20000a3a
 8006eb8:	20000e38 	.word	0x20000e38

08006ebc <read_file>:




uint16_t read_file(char* filename, int p_counter)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
	FRESULT fr;
	fr = f_mount(&FatFs, "", 0);
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	4918      	ldr	r1, [pc, #96]	; (8006f2c <read_file+0x70>)
 8006eca:	4819      	ldr	r0, [pc, #100]	; (8006f30 <read_file+0x74>)
 8006ecc:	f7fd fe34 	bl	8004b38 <f_mount>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	72fb      	strb	r3, [r7, #11]
	fr = f_open(&file, filename, FA_READ);
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	6879      	ldr	r1, [r7, #4]
 8006ed8:	4816      	ldr	r0, [pc, #88]	; (8006f34 <read_file+0x78>)
 8006eda:	f7fd fe6d 	bl	8004bb8 <f_open>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	72fb      	strb	r3, [r7, #11]
	if (fr) return (int)fr;
 8006ee2:	7afb      	ldrb	r3, [r7, #11]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <read_file+0x32>
 8006ee8:	7afb      	ldrb	r3, [r7, #11]
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	e019      	b.n	8006f22 <read_file+0x66>
	for (int i=0; i<p_counter; i++)
 8006eee:	2300      	movs	r3, #0
 8006ef0:	60fb      	str	r3, [r7, #12]
 8006ef2:	e00b      	b.n	8006f0c <read_file+0x50>
	{
		fr = f_read(&file, file_buffer,512,&bytes_read);
 8006ef4:	4b10      	ldr	r3, [pc, #64]	; (8006f38 <read_file+0x7c>)
 8006ef6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006efa:	4910      	ldr	r1, [pc, #64]	; (8006f3c <read_file+0x80>)
 8006efc:	480d      	ldr	r0, [pc, #52]	; (8006f34 <read_file+0x78>)
 8006efe:	f7fe f89b 	bl	8005038 <f_read>
 8006f02:	4603      	mov	r3, r0
 8006f04:	72fb      	strb	r3, [r7, #11]
	for (int i=0; i<p_counter; i++)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	60fb      	str	r3, [r7, #12]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	dbef      	blt.n	8006ef4 <read_file+0x38>
	}
	fr = f_close(&file);
 8006f14:	4807      	ldr	r0, [pc, #28]	; (8006f34 <read_file+0x78>)
 8006f16:	f7fe fcd8 	bl	80058ca <f_close>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	72fb      	strb	r3, [r7, #11]
	return fr;
 8006f1e:	7afb      	ldrb	r3, [r7, #11]
 8006f20:	b29b      	uxth	r3, r3
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	08016a00 	.word	0x08016a00
 8006f30:	200000b4 	.word	0x200000b4
 8006f34:	20000e40 	.word	0x20000e40
 8006f38:	20001090 	.word	0x20001090
 8006f3c:	20000638 	.word	0x20000638

08006f40 <write_file>:

uint16_t write_file(char* filename, uint16_t append)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	807b      	strh	r3, [r7, #2]
	FRESULT fr;
	f_mount(&FatFs, "", 0);
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	4928      	ldr	r1, [pc, #160]	; (8006ff0 <write_file+0xb0>)
 8006f50:	4828      	ldr	r0, [pc, #160]	; (8006ff4 <write_file+0xb4>)
 8006f52:	f7fd fdf1 	bl	8004b38 <f_mount>
	if(append == 0) fr = f_open(&file, filename, FA_WRITE | FA_CREATE_NEW);
 8006f56:	887b      	ldrh	r3, [r7, #2]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d107      	bne.n	8006f6c <write_file+0x2c>
 8006f5c:	2206      	movs	r2, #6
 8006f5e:	6879      	ldr	r1, [r7, #4]
 8006f60:	4825      	ldr	r0, [pc, #148]	; (8006ff8 <write_file+0xb8>)
 8006f62:	f7fd fe29 	bl	8004bb8 <f_open>
 8006f66:	4603      	mov	r3, r0
 8006f68:	73fb      	strb	r3, [r7, #15]
 8006f6a:	e009      	b.n	8006f80 <write_file+0x40>
	else if (append == 1) fr = f_open(&file, filename, FA_WRITE | FA_OPEN_APPEND);
 8006f6c:	887b      	ldrh	r3, [r7, #2]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d106      	bne.n	8006f80 <write_file+0x40>
 8006f72:	2232      	movs	r2, #50	; 0x32
 8006f74:	6879      	ldr	r1, [r7, #4]
 8006f76:	4820      	ldr	r0, [pc, #128]	; (8006ff8 <write_file+0xb8>)
 8006f78:	f7fd fe1e 	bl	8004bb8 <f_open>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	73fb      	strb	r3, [r7, #15]
	if (fr) return (int)fr;
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d002      	beq.n	8006f8c <write_file+0x4c>
 8006f86:	7bfb      	ldrb	r3, [r7, #15]
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	e02d      	b.n	8006fe8 <write_file+0xa8>
	uint16_t it = 0;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	81bb      	strh	r3, [r7, #12]
	for (int i=0;i<1024;i++)
 8006f90:	2300      	movs	r3, #0
 8006f92:	60bb      	str	r3, [r7, #8]
 8006f94:	e00f      	b.n	8006fb6 <write_file+0x76>
	{
		if (file_buffer[i] == '\0' || i == 1024)
 8006f96:	4a19      	ldr	r2, [pc, #100]	; (8006ffc <write_file+0xbc>)
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d003      	beq.n	8006faa <write_file+0x6a>
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fa8:	d102      	bne.n	8006fb0 <write_file+0x70>
		{
			it = i;
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	81bb      	strh	r3, [r7, #12]
			break;
 8006fae:	e006      	b.n	8006fbe <write_file+0x7e>
	for (int i=0;i<1024;i++)
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	60bb      	str	r3, [r7, #8]
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fbc:	dbeb      	blt.n	8006f96 <write_file+0x56>
		}
	}
	fr =f_write(&file, file_buffer, it, NULL);
 8006fbe:	89ba      	ldrh	r2, [r7, #12]
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	490e      	ldr	r1, [pc, #56]	; (8006ffc <write_file+0xbc>)
 8006fc4:	480c      	ldr	r0, [pc, #48]	; (8006ff8 <write_file+0xb8>)
 8006fc6:	f7fe f9a0 	bl	800530a <f_write>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	73fb      	strb	r3, [r7, #15]
	fr = f_close(&file);
 8006fce:	480a      	ldr	r0, [pc, #40]	; (8006ff8 <write_file+0xb8>)
 8006fd0:	f7fe fc7b 	bl	80058ca <f_close>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	73fb      	strb	r3, [r7, #15]
	memset(file_buffer, 0, sizeof(file_buffer));
 8006fd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006fdc:	2100      	movs	r1, #0
 8006fde:	4807      	ldr	r0, [pc, #28]	; (8006ffc <write_file+0xbc>)
 8006fe0:	f00e fd88 	bl	8015af4 <memset>
	return fr;
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
 8006fe6:	b29b      	uxth	r3, r3
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	08016a00 	.word	0x08016a00
 8006ff4:	200000b4 	.word	0x200000b4
 8006ff8:	20000e40 	.word	0x20000e40
 8006ffc:	20000638 	.word	0x20000638

08007000 <find_size>:
uint16_t find_size(TCHAR * fname)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
	uint16_t index = 0;
 8007008:	2300      	movs	r3, #0
 800700a:	81fb      	strh	r3, [r7, #14]
	while(fname[index] != '\0')
 800700c:	e002      	b.n	8007014 <find_size+0x14>
	{
		index++;
 800700e:	89fb      	ldrh	r3, [r7, #14]
 8007010:	3301      	adds	r3, #1
 8007012:	81fb      	strh	r3, [r7, #14]
	while(fname[index] != '\0')
 8007014:	89fb      	ldrh	r3, [r7, #14]
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	4413      	add	r3, r2
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1f6      	bne.n	800700e <find_size+0xe>
	}
	return index;
 8007020:	89fb      	ldrh	r3, [r7, #14]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
	...

08007030 <scan_dir>:

uint16_t scan_dir(char* path)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b098      	sub	sp, #96	; 0x60
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
	FRESULT fr;
    DIR dir;
    uint16_t i = 0;
 8007038:	2300      	movs	r3, #0
 800703a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    uint16_t fname_size = 0;
 800703e:	2300      	movs	r3, #0
 8007040:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c


    fr = f_mount(&FatFs, "", 0);
 8007044:	2200      	movs	r2, #0
 8007046:	492d      	ldr	r1, [pc, #180]	; (80070fc <scan_dir+0xcc>)
 8007048:	482d      	ldr	r0, [pc, #180]	; (8007100 <scan_dir+0xd0>)
 800704a:	f7fd fd75 	bl	8004b38 <f_mount>
 800704e:	4603      	mov	r3, r0
 8007050:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    if (fr != FR_OK) return 0;
 8007054:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007058:	2b00      	cmp	r3, #0
 800705a:	d001      	beq.n	8007060 <scan_dir+0x30>
 800705c:	2300      	movs	r3, #0
 800705e:	e048      	b.n	80070f2 <scan_dir+0xc2>
    fr = f_opendir(&dir, path);
 8007060:	f107 0308 	add.w	r3, r7, #8
 8007064:	6879      	ldr	r1, [r7, #4]
 8007066:	4618      	mov	r0, r3
 8007068:	f7fe fcd8 	bl	8005a1c <f_opendir>
 800706c:	4603      	mov	r3, r0
 800706e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    if (fr == FR_OK) {
 8007072:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007076:	2b00      	cmp	r3, #0
 8007078:	d139      	bne.n	80070ee <scan_dir+0xbe>
        for (;;)
        {
        	fr = f_readdir(&dir, &file_info);
 800707a:	f107 0308 	add.w	r3, r7, #8
 800707e:	4921      	ldr	r1, [pc, #132]	; (8007104 <scan_dir+0xd4>)
 8007080:	4618      	mov	r0, r3
 8007082:	f7fe fd6e 	bl	8005b62 <f_readdir>
 8007086:	4603      	mov	r3, r0
 8007088:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
            if (fr != FR_OK || file_info.fname[0] == 0) break;
 800708c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007090:	2b00      	cmp	r3, #0
 8007092:	d127      	bne.n	80070e4 <scan_dir+0xb4>
 8007094:	4b1b      	ldr	r3, [pc, #108]	; (8007104 <scan_dir+0xd4>)
 8007096:	7e9b      	ldrb	r3, [r3, #26]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d023      	beq.n	80070e4 <scan_dir+0xb4>
            fname_size  = find_size(file_info.fname);
 800709c:	481a      	ldr	r0, [pc, #104]	; (8007108 <scan_dir+0xd8>)
 800709e:	f7ff ffaf 	bl	8007000 <find_size>
 80070a2:	4603      	mov	r3, r0
 80070a4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            memcpy(file_buffer + i, file_info.fname, fname_size);
 80070a8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80070ac:	4a17      	ldr	r2, [pc, #92]	; (800710c <scan_dir+0xdc>)
 80070ae:	4413      	add	r3, r2
 80070b0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80070b4:	4914      	ldr	r1, [pc, #80]	; (8007108 <scan_dir+0xd8>)
 80070b6:	4618      	mov	r0, r3
 80070b8:	f00e fd11 	bl	8015ade <memcpy>
            i += fname_size;
 80070bc:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80070c0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80070c4:	4413      	add	r3, r2
 80070c6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            memcpy(file_buffer + i, divider,1);
 80070ca:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80070ce:	4a0f      	ldr	r2, [pc, #60]	; (800710c <scan_dir+0xdc>)
 80070d0:	4413      	add	r3, r2
 80070d2:	4a0f      	ldr	r2, [pc, #60]	; (8007110 <scan_dir+0xe0>)
 80070d4:	7812      	ldrb	r2, [r2, #0]
 80070d6:	701a      	strb	r2, [r3, #0]
            i++;
 80070d8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80070dc:	3301      	adds	r3, #1
 80070de:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        	fr = f_readdir(&dir, &file_info);
 80070e2:	e7ca      	b.n	800707a <scan_dir+0x4a>
        }
        f_closedir(&dir);
 80070e4:	f107 0308 	add.w	r3, r7, #8
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fe fd22 	bl	8005b32 <f_closedir>
    }

    return i;
 80070ee:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3760      	adds	r7, #96	; 0x60
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	08016a00 	.word	0x08016a00
 8007100:	200000b4 	.word	0x200000b4
 8007104:	20000300 	.word	0x20000300
 8007108:	2000031a 	.word	0x2000031a
 800710c:	20000638 	.word	0x20000638
 8007110:	20000008 	.word	0x20000008

08007114 <delete_file>:
	f_mount(&FatFs, "", 0);
	fr = f_stat(path, &file_info);
	return fr;
}
uint16_t delete_file(char * path)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
	FRESULT fr;
	fr = f_mount(&FatFs, "", 0);
 800711c:	2200      	movs	r2, #0
 800711e:	490a      	ldr	r1, [pc, #40]	; (8007148 <delete_file+0x34>)
 8007120:	480a      	ldr	r0, [pc, #40]	; (800714c <delete_file+0x38>)
 8007122:	f7fd fd09 	bl	8004b38 <f_mount>
 8007126:	4603      	mov	r3, r0
 8007128:	73fb      	strb	r3, [r7, #15]
	if(fr == FR_OK)
 800712a:	7bfb      	ldrb	r3, [r7, #15]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d104      	bne.n	800713a <delete_file+0x26>
		{
			fr = f_unlink(path);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f7fe fd68 	bl	8005c06 <f_unlink>
 8007136:	4603      	mov	r3, r0
 8007138:	73fb      	strb	r3, [r7, #15]
		}
	return fr;
 800713a:	7bfb      	ldrb	r3, [r7, #15]
 800713c:	b29b      	uxth	r3, r3
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	08016a00 	.word	0x08016a00
 800714c:	200000b4 	.word	0x200000b4

08007150 <create_directory>:
	}
	*/
}

uint16_t create_directory(char * path)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
	FRESULT fr;
	fr = f_mount(&FatFs, "", 0);
 8007158:	2200      	movs	r2, #0
 800715a:	490a      	ldr	r1, [pc, #40]	; (8007184 <create_directory+0x34>)
 800715c:	480a      	ldr	r0, [pc, #40]	; (8007188 <create_directory+0x38>)
 800715e:	f7fd fceb 	bl	8004b38 <f_mount>
 8007162:	4603      	mov	r3, r0
 8007164:	73fb      	strb	r3, [r7, #15]
	if (fr == FR_OK)
 8007166:	7bfb      	ldrb	r3, [r7, #15]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d104      	bne.n	8007176 <create_directory+0x26>
	{
		fr = f_mkdir(path);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f7fe fe3d 	bl	8005dec <f_mkdir>
 8007172:	4603      	mov	r3, r0
 8007174:	73fb      	strb	r3, [r7, #15]
	}
	return fr;
 8007176:	7bfb      	ldrb	r3, [r7, #15]
 8007178:	b29b      	uxth	r3, r3
}
 800717a:	4618      	mov	r0, r3
 800717c:	3710      	adds	r7, #16
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	08016a00 	.word	0x08016a00
 8007188:	200000b4 	.word	0x200000b4

0800718c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800718c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80071c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007190:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007192:	e003      	b.n	800719c <LoopCopyDataInit>

08007194 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007194:	4b0c      	ldr	r3, [pc, #48]	; (80071c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007196:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007198:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800719a:	3104      	adds	r1, #4

0800719c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800719c:	480b      	ldr	r0, [pc, #44]	; (80071cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800719e:	4b0c      	ldr	r3, [pc, #48]	; (80071d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80071a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80071a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80071a4:	d3f6      	bcc.n	8007194 <CopyDataInit>
  ldr  r2, =_sbss
 80071a6:	4a0b      	ldr	r2, [pc, #44]	; (80071d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80071a8:	e002      	b.n	80071b0 <LoopFillZerobss>

080071aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80071aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80071ac:	f842 3b04 	str.w	r3, [r2], #4

080071b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80071b0:	4b09      	ldr	r3, [pc, #36]	; (80071d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80071b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80071b4:	d3f9      	bcc.n	80071aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80071b6:	f7ff faf7 	bl	80067a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80071ba:	f00e fc4d 	bl	8015a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80071be:	f7ff f8b5 	bl	800632c <main>
  bx  lr    
 80071c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80071c4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80071c8:	080282e4 	.word	0x080282e4
  ldr  r0, =_sdata
 80071cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80071d0:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 80071d4:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 80071d8:	2000773c 	.word	0x2000773c

080071dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80071dc:	e7fe      	b.n	80071dc <ADC_IRQHandler>
	...

080071e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80071e4:	4b0e      	ldr	r3, [pc, #56]	; (8007220 <HAL_Init+0x40>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a0d      	ldr	r2, [pc, #52]	; (8007220 <HAL_Init+0x40>)
 80071ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80071ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80071f0:	4b0b      	ldr	r3, [pc, #44]	; (8007220 <HAL_Init+0x40>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a0a      	ldr	r2, [pc, #40]	; (8007220 <HAL_Init+0x40>)
 80071f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80071fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80071fc:	4b08      	ldr	r3, [pc, #32]	; (8007220 <HAL_Init+0x40>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a07      	ldr	r2, [pc, #28]	; (8007220 <HAL_Init+0x40>)
 8007202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007206:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007208:	2003      	movs	r0, #3
 800720a:	f000 f92f 	bl	800746c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800720e:	2000      	movs	r0, #0
 8007210:	f000 f808 	bl	8007224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007214:	f7ff f98c 	bl	8006530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	40023c00 	.word	0x40023c00

08007224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800722c:	4b12      	ldr	r3, [pc, #72]	; (8007278 <HAL_InitTick+0x54>)
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	4b12      	ldr	r3, [pc, #72]	; (800727c <HAL_InitTick+0x58>)
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	4619      	mov	r1, r3
 8007236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800723a:	fbb3 f3f1 	udiv	r3, r3, r1
 800723e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007242:	4618      	mov	r0, r3
 8007244:	f000 f939 	bl	80074ba <HAL_SYSTICK_Config>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d001      	beq.n	8007252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e00e      	b.n	8007270 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2b0f      	cmp	r3, #15
 8007256:	d80a      	bhi.n	800726e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007258:	2200      	movs	r2, #0
 800725a:	6879      	ldr	r1, [r7, #4]
 800725c:	f04f 30ff 	mov.w	r0, #4294967295
 8007260:	f000 f90f 	bl	8007482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007264:	4a06      	ldr	r2, [pc, #24]	; (8007280 <HAL_InitTick+0x5c>)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800726a:	2300      	movs	r3, #0
 800726c:	e000      	b.n	8007270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
}
 8007270:	4618      	mov	r0, r3
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	20000004 	.word	0x20000004
 800727c:	20000010 	.word	0x20000010
 8007280:	2000000c 	.word	0x2000000c

08007284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007284:	b480      	push	{r7}
 8007286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007288:	4b06      	ldr	r3, [pc, #24]	; (80072a4 <HAL_IncTick+0x20>)
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	461a      	mov	r2, r3
 800728e:	4b06      	ldr	r3, [pc, #24]	; (80072a8 <HAL_IncTick+0x24>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4413      	add	r3, r2
 8007294:	4a04      	ldr	r2, [pc, #16]	; (80072a8 <HAL_IncTick+0x24>)
 8007296:	6013      	str	r3, [r2, #0]
}
 8007298:	bf00      	nop
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	20000010 	.word	0x20000010
 80072a8:	20001098 	.word	0x20001098

080072ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80072ac:	b480      	push	{r7}
 80072ae:	af00      	add	r7, sp, #0
  return uwTick;
 80072b0:	4b03      	ldr	r3, [pc, #12]	; (80072c0 <HAL_GetTick+0x14>)
 80072b2:	681b      	ldr	r3, [r3, #0]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	20001098 	.word	0x20001098

080072c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80072cc:	f7ff ffee 	bl	80072ac <HAL_GetTick>
 80072d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072dc:	d005      	beq.n	80072ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80072de:	4b09      	ldr	r3, [pc, #36]	; (8007304 <HAL_Delay+0x40>)
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	461a      	mov	r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	4413      	add	r3, r2
 80072e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80072ea:	bf00      	nop
 80072ec:	f7ff ffde 	bl	80072ac <HAL_GetTick>
 80072f0:	4602      	mov	r2, r0
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d8f7      	bhi.n	80072ec <HAL_Delay+0x28>
  {
  }
}
 80072fc:	bf00      	nop
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	20000010 	.word	0x20000010

08007308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f003 0307 	and.w	r3, r3, #7
 8007316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007318:	4b0c      	ldr	r3, [pc, #48]	; (800734c <__NVIC_SetPriorityGrouping+0x44>)
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007324:	4013      	ands	r3, r2
 8007326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800733a:	4a04      	ldr	r2, [pc, #16]	; (800734c <__NVIC_SetPriorityGrouping+0x44>)
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	60d3      	str	r3, [r2, #12]
}
 8007340:	bf00      	nop
 8007342:	3714      	adds	r7, #20
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	e000ed00 	.word	0xe000ed00

08007350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007350:	b480      	push	{r7}
 8007352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007354:	4b04      	ldr	r3, [pc, #16]	; (8007368 <__NVIC_GetPriorityGrouping+0x18>)
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	0a1b      	lsrs	r3, r3, #8
 800735a:	f003 0307 	and.w	r3, r3, #7
}
 800735e:	4618      	mov	r0, r3
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr
 8007368:	e000ed00 	.word	0xe000ed00

0800736c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	4603      	mov	r3, r0
 8007374:	6039      	str	r1, [r7, #0]
 8007376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800737c:	2b00      	cmp	r3, #0
 800737e:	db0a      	blt.n	8007396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	b2da      	uxtb	r2, r3
 8007384:	490c      	ldr	r1, [pc, #48]	; (80073b8 <__NVIC_SetPriority+0x4c>)
 8007386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800738a:	0112      	lsls	r2, r2, #4
 800738c:	b2d2      	uxtb	r2, r2
 800738e:	440b      	add	r3, r1
 8007390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007394:	e00a      	b.n	80073ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	b2da      	uxtb	r2, r3
 800739a:	4908      	ldr	r1, [pc, #32]	; (80073bc <__NVIC_SetPriority+0x50>)
 800739c:	79fb      	ldrb	r3, [r7, #7]
 800739e:	f003 030f 	and.w	r3, r3, #15
 80073a2:	3b04      	subs	r3, #4
 80073a4:	0112      	lsls	r2, r2, #4
 80073a6:	b2d2      	uxtb	r2, r2
 80073a8:	440b      	add	r3, r1
 80073aa:	761a      	strb	r2, [r3, #24]
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	e000e100 	.word	0xe000e100
 80073bc:	e000ed00 	.word	0xe000ed00

080073c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b089      	sub	sp, #36	; 0x24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f003 0307 	and.w	r3, r3, #7
 80073d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	f1c3 0307 	rsb	r3, r3, #7
 80073da:	2b04      	cmp	r3, #4
 80073dc:	bf28      	it	cs
 80073de:	2304      	movcs	r3, #4
 80073e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	3304      	adds	r3, #4
 80073e6:	2b06      	cmp	r3, #6
 80073e8:	d902      	bls.n	80073f0 <NVIC_EncodePriority+0x30>
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	3b03      	subs	r3, #3
 80073ee:	e000      	b.n	80073f2 <NVIC_EncodePriority+0x32>
 80073f0:	2300      	movs	r3, #0
 80073f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073f4:	f04f 32ff 	mov.w	r2, #4294967295
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	fa02 f303 	lsl.w	r3, r2, r3
 80073fe:	43da      	mvns	r2, r3
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	401a      	ands	r2, r3
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007408:	f04f 31ff 	mov.w	r1, #4294967295
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	fa01 f303 	lsl.w	r3, r1, r3
 8007412:	43d9      	mvns	r1, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007418:	4313      	orrs	r3, r2
         );
}
 800741a:	4618      	mov	r0, r3
 800741c:	3724      	adds	r7, #36	; 0x24
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
	...

08007428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b082      	sub	sp, #8
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	3b01      	subs	r3, #1
 8007434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007438:	d301      	bcc.n	800743e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800743a:	2301      	movs	r3, #1
 800743c:	e00f      	b.n	800745e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800743e:	4a0a      	ldr	r2, [pc, #40]	; (8007468 <SysTick_Config+0x40>)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	3b01      	subs	r3, #1
 8007444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007446:	210f      	movs	r1, #15
 8007448:	f04f 30ff 	mov.w	r0, #4294967295
 800744c:	f7ff ff8e 	bl	800736c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007450:	4b05      	ldr	r3, [pc, #20]	; (8007468 <SysTick_Config+0x40>)
 8007452:	2200      	movs	r2, #0
 8007454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007456:	4b04      	ldr	r3, [pc, #16]	; (8007468 <SysTick_Config+0x40>)
 8007458:	2207      	movs	r2, #7
 800745a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	e000e010 	.word	0xe000e010

0800746c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7ff ff47 	bl	8007308 <__NVIC_SetPriorityGrouping>
}
 800747a:	bf00      	nop
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007482:	b580      	push	{r7, lr}
 8007484:	b086      	sub	sp, #24
 8007486:	af00      	add	r7, sp, #0
 8007488:	4603      	mov	r3, r0
 800748a:	60b9      	str	r1, [r7, #8]
 800748c:	607a      	str	r2, [r7, #4]
 800748e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007490:	2300      	movs	r3, #0
 8007492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007494:	f7ff ff5c 	bl	8007350 <__NVIC_GetPriorityGrouping>
 8007498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	68b9      	ldr	r1, [r7, #8]
 800749e:	6978      	ldr	r0, [r7, #20]
 80074a0:	f7ff ff8e 	bl	80073c0 <NVIC_EncodePriority>
 80074a4:	4602      	mov	r2, r0
 80074a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074aa:	4611      	mov	r1, r2
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7ff ff5d 	bl	800736c <__NVIC_SetPriority>
}
 80074b2:	bf00      	nop
 80074b4:	3718      	adds	r7, #24
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b082      	sub	sp, #8
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7ff ffb0 	bl	8007428 <SysTick_Config>
 80074c8:	4603      	mov	r3, r0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3708      	adds	r7, #8
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
	...

080074d4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b088      	sub	sp, #32
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80074dc:	2300      	movs	r3, #0
 80074de:	61fb      	str	r3, [r7, #28]
 80074e0:	2300      	movs	r3, #0
 80074e2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80074e4:	4baa      	ldr	r3, [pc, #680]	; (8007790 <HAL_ETH_Init+0x2bc>)
 80074e6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80074e8:	2300      	movs	r3, #0
 80074ea:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80074ec:	2300      	movs	r3, #0
 80074ee:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d101      	bne.n	80074fa <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e185      	b.n	8007806 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b00      	cmp	r3, #0
 8007504:	d106      	bne.n	8007514 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f002 f97c 	bl	800980c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007514:	2300      	movs	r3, #0
 8007516:	60bb      	str	r3, [r7, #8]
 8007518:	4b9e      	ldr	r3, [pc, #632]	; (8007794 <HAL_ETH_Init+0x2c0>)
 800751a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800751c:	4a9d      	ldr	r2, [pc, #628]	; (8007794 <HAL_ETH_Init+0x2c0>)
 800751e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007522:	6453      	str	r3, [r2, #68]	; 0x44
 8007524:	4b9b      	ldr	r3, [pc, #620]	; (8007794 <HAL_ETH_Init+0x2c0>)
 8007526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800752c:	60bb      	str	r3, [r7, #8]
 800752e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8007530:	4b99      	ldr	r3, [pc, #612]	; (8007798 <HAL_ETH_Init+0x2c4>)
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	4a98      	ldr	r2, [pc, #608]	; (8007798 <HAL_ETH_Init+0x2c4>)
 8007536:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800753a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800753c:	4b96      	ldr	r3, [pc, #600]	; (8007798 <HAL_ETH_Init+0x2c4>)
 800753e:	685a      	ldr	r2, [r3, #4]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6a1b      	ldr	r3, [r3, #32]
 8007544:	4994      	ldr	r1, [pc, #592]	; (8007798 <HAL_ETH_Init+0x2c4>)
 8007546:	4313      	orrs	r3, r2
 8007548:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f042 0201 	orr.w	r2, r2, #1
 800755c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007560:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8007562:	f7ff fea3 	bl	80072ac <HAL_GetTick>
 8007566:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8007568:	e011      	b.n	800758e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800756a:	f7ff fe9f 	bl	80072ac <HAL_GetTick>
 800756e:	4602      	mov	r2, r0
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007578:	d909      	bls.n	800758e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2203      	movs	r2, #3
 800757e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e13b      	b.n	8007806 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1e4      	bne.n	800756a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	f023 031c 	bic.w	r3, r3, #28
 80075ae:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80075b0:	f001 fcec 	bl	8008f8c <HAL_RCC_GetHCLKFreq>
 80075b4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	4a78      	ldr	r2, [pc, #480]	; (800779c <HAL_ETH_Init+0x2c8>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d908      	bls.n	80075d0 <HAL_ETH_Init+0xfc>
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	4a77      	ldr	r2, [pc, #476]	; (80077a0 <HAL_ETH_Init+0x2cc>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d804      	bhi.n	80075d0 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	f043 0308 	orr.w	r3, r3, #8
 80075cc:	61fb      	str	r3, [r7, #28]
 80075ce:	e027      	b.n	8007620 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	4a73      	ldr	r2, [pc, #460]	; (80077a0 <HAL_ETH_Init+0x2cc>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d908      	bls.n	80075ea <HAL_ETH_Init+0x116>
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	4a72      	ldr	r2, [pc, #456]	; (80077a4 <HAL_ETH_Init+0x2d0>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d804      	bhi.n	80075ea <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	f043 030c 	orr.w	r3, r3, #12
 80075e6:	61fb      	str	r3, [r7, #28]
 80075e8:	e01a      	b.n	8007620 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	4a6d      	ldr	r2, [pc, #436]	; (80077a4 <HAL_ETH_Init+0x2d0>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d903      	bls.n	80075fa <HAL_ETH_Init+0x126>
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	4a6c      	ldr	r2, [pc, #432]	; (80077a8 <HAL_ETH_Init+0x2d4>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d911      	bls.n	800761e <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	4a6a      	ldr	r2, [pc, #424]	; (80077a8 <HAL_ETH_Init+0x2d4>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d908      	bls.n	8007614 <HAL_ETH_Init+0x140>
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	4a69      	ldr	r2, [pc, #420]	; (80077ac <HAL_ETH_Init+0x2d8>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d804      	bhi.n	8007614 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	f043 0304 	orr.w	r3, r3, #4
 8007610:	61fb      	str	r3, [r7, #28]
 8007612:	e005      	b.n	8007620 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	f043 0310 	orr.w	r3, r3, #16
 800761a:	61fb      	str	r3, [r7, #28]
 800761c:	e000      	b.n	8007620 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800761e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	69fa      	ldr	r2, [r7, #28]
 8007626:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8007628:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800762c:	2100      	movs	r1, #0
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fb9a 	bl	8007d68 <HAL_ETH_WritePHYRegister>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00b      	beq.n	8007652 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800763e:	6939      	ldr	r1, [r7, #16]
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 fc27 	bl	8007e94 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	e0d9      	b.n	8007806 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8007652:	20ff      	movs	r0, #255	; 0xff
 8007654:	f7ff fe36 	bl	80072c4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	f000 80a7 	beq.w	80077b0 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007662:	f7ff fe23 	bl	80072ac <HAL_GetTick>
 8007666:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8007668:	f107 030c 	add.w	r3, r7, #12
 800766c:	461a      	mov	r2, r3
 800766e:	2101      	movs	r1, #1
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fb11 	bl	8007c98 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8007676:	f7ff fe19 	bl	80072ac <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	f241 3288 	movw	r2, #5000	; 0x1388
 8007684:	4293      	cmp	r3, r2
 8007686:	d90f      	bls.n	80076a8 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800768c:	6939      	ldr	r1, [r7, #16]
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fc00 	bl	8007e94 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e0ae      	b.n	8007806 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f003 0304 	and.w	r3, r3, #4
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d0da      	beq.n	8007668 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80076b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80076b6:	2100      	movs	r1, #0
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 fb55 	bl	8007d68 <HAL_ETH_WritePHYRegister>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00b      	beq.n	80076dc <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80076c8:	6939      	ldr	r1, [r7, #16]
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fbe2 	bl	8007e94 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80076d8:	2301      	movs	r3, #1
 80076da:	e094      	b.n	8007806 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80076dc:	f7ff fde6 	bl	80072ac <HAL_GetTick>
 80076e0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80076e2:	f107 030c 	add.w	r3, r7, #12
 80076e6:	461a      	mov	r2, r3
 80076e8:	2101      	movs	r1, #1
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fad4 	bl	8007c98 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80076f0:	f7ff fddc 	bl	80072ac <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80076fe:	4293      	cmp	r3, r2
 8007700:	d90f      	bls.n	8007722 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8007706:	6939      	ldr	r1, [r7, #16]
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 fbc3 	bl	8007e94 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e071      	b.n	8007806 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f003 0320 	and.w	r3, r3, #32
 8007728:	2b00      	cmp	r3, #0
 800772a:	d0da      	beq.n	80076e2 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800772c:	f107 030c 	add.w	r3, r7, #12
 8007730:	461a      	mov	r2, r3
 8007732:	211f      	movs	r1, #31
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 faaf 	bl	8007c98 <HAL_ETH_ReadPHYRegister>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00b      	beq.n	8007758 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8007744:	6939      	ldr	r1, [r7, #16]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fba4 	bl	8007e94 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8007754:	2301      	movs	r3, #1
 8007756:	e056      	b.n	8007806 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f003 0310 	and.w	r3, r3, #16
 800775e:	2b00      	cmp	r3, #0
 8007760:	d004      	beq.n	800776c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007768:	60da      	str	r2, [r3, #12]
 800776a:	e002      	b.n	8007772 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f003 0304 	and.w	r3, r3, #4
 8007778:	2b00      	cmp	r3, #0
 800777a:	d003      	beq.n	8007784 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	609a      	str	r2, [r3, #8]
 8007782:	e037      	b.n	80077f4 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800778a:	609a      	str	r2, [r3, #8]
 800778c:	e032      	b.n	80077f4 <HAL_ETH_Init+0x320>
 800778e:	bf00      	nop
 8007790:	03938700 	.word	0x03938700
 8007794:	40023800 	.word	0x40023800
 8007798:	40013800 	.word	0x40013800
 800779c:	01312cff 	.word	0x01312cff
 80077a0:	02160ebf 	.word	0x02160ebf
 80077a4:	039386ff 	.word	0x039386ff
 80077a8:	05f5e0ff 	.word	0x05f5e0ff
 80077ac:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	08db      	lsrs	r3, r3, #3
 80077b6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	085b      	lsrs	r3, r3, #1
 80077be:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80077c0:	4313      	orrs	r3, r2
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	461a      	mov	r2, r3
 80077c6:	2100      	movs	r1, #0
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 facd 	bl	8007d68 <HAL_ETH_WritePHYRegister>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00b      	beq.n	80077ec <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80077d8:	6939      	ldr	r1, [r7, #16]
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fb5a 	bl	8007e94 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e00c      	b.n	8007806 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80077ec:	f640 70ff 	movw	r0, #4095	; 0xfff
 80077f0:	f7ff fd68 	bl	80072c4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80077f4:	6939      	ldr	r1, [r7, #16]
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 fb4c 	bl	8007e94 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8007804:	2300      	movs	r3, #0
}
 8007806:	4618      	mov	r0, r3
 8007808:	3720      	adds	r7, #32
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop

08007810 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8007810:	b480      	push	{r7}
 8007812:	b087      	sub	sp, #28
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
 800781c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800781e:	2300      	movs	r3, #0
 8007820:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007828:	2b01      	cmp	r3, #1
 800782a:	d101      	bne.n	8007830 <HAL_ETH_DMATxDescListInit+0x20>
 800782c:	2302      	movs	r3, #2
 800782e:	e052      	b.n	80078d6 <HAL_ETH_DMATxDescListInit+0xc6>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2202      	movs	r2, #2
 800783c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8007846:	2300      	movs	r3, #0
 8007848:	617b      	str	r3, [r7, #20]
 800784a:	e030      	b.n	80078ae <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	015b      	lsls	r3, r3, #5
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	4413      	add	r3, r2
 8007854:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800785c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007864:	fb02 f303 	mul.w	r3, r2, r3
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	4413      	add	r3, r2
 800786c:	461a      	mov	r2, r3
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	69db      	ldr	r3, [r3, #28]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d105      	bne.n	8007886 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	3b01      	subs	r3, #1
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	429a      	cmp	r2, r3
 800788e:	d208      	bcs.n	80078a2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	3301      	adds	r3, #1
 8007894:	015b      	lsls	r3, r3, #5
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	4413      	add	r3, r2
 800789a:	461a      	mov	r2, r3
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	60da      	str	r2, [r3, #12]
 80078a0:	e002      	b.n	80078a8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	3301      	adds	r3, #1
 80078ac:	617b      	str	r3, [r7, #20]
 80078ae:	697a      	ldr	r2, [r7, #20]
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d3ca      	bcc.n	800784c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078c0:	3310      	adds	r3, #16
 80078c2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	371c      	adds	r7, #28
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80078e2:	b480      	push	{r7}
 80078e4:	b087      	sub	sp, #28
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	60f8      	str	r0, [r7, #12]
 80078ea:	60b9      	str	r1, [r7, #8]
 80078ec:	607a      	str	r2, [r7, #4]
 80078ee:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80078f0:	2300      	movs	r3, #0
 80078f2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d101      	bne.n	8007902 <HAL_ETH_DMARxDescListInit+0x20>
 80078fe:	2302      	movs	r3, #2
 8007900:	e056      	b.n	80079b0 <HAL_ETH_DMARxDescListInit+0xce>
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2202      	movs	r2, #2
 800790e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8007918:	2300      	movs	r3, #0
 800791a:	617b      	str	r3, [r7, #20]
 800791c:	e034      	b.n	8007988 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	015b      	lsls	r3, r3, #5
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	4413      	add	r3, r2
 8007926:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800792e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8007936:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800793e:	fb02 f303 	mul.w	r3, r2, r3
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	4413      	add	r3, r2
 8007946:	461a      	mov	r2, r3
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	699b      	ldr	r3, [r3, #24]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d105      	bne.n	8007960 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	3b01      	subs	r3, #1
 8007964:	697a      	ldr	r2, [r7, #20]
 8007966:	429a      	cmp	r2, r3
 8007968:	d208      	bcs.n	800797c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	3301      	adds	r3, #1
 800796e:	015b      	lsls	r3, r3, #5
 8007970:	68ba      	ldr	r2, [r7, #8]
 8007972:	4413      	add	r3, r2
 8007974:	461a      	mov	r2, r3
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	60da      	str	r2, [r3, #12]
 800797a:	e002      	b.n	8007982 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	3301      	adds	r3, #1
 8007986:	617b      	str	r3, [r7, #20]
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	429a      	cmp	r2, r3
 800798e:	d3c6      	bcc.n	800791e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800799a:	330c      	adds	r3, #12
 800799c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	371c      	adds	r7, #28
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	617b      	str	r3, [r7, #20]
 80079ca:	2300      	movs	r3, #0
 80079cc:	60fb      	str	r3, [r7, #12]
 80079ce:	2300      	movs	r3, #0
 80079d0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d101      	bne.n	80079e0 <HAL_ETH_TransmitFrame+0x24>
 80079dc:	2302      	movs	r3, #2
 80079de:	e0cd      	b.n	8007b7c <HAL_ETH_TransmitFrame+0x1c0>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2202      	movs	r2, #2
 80079ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d109      	bne.n	8007a0a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8007a06:	2301      	movs	r3, #1
 8007a08:	e0b8      	b.n	8007b7c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	da09      	bge.n	8007a28 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2212      	movs	r2, #18
 8007a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e0a9      	b.n	8007b7c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d915      	bls.n	8007a5e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	4a54      	ldr	r2, [pc, #336]	; (8007b88 <HAL_ETH_TransmitFrame+0x1cc>)
 8007a36:	fba2 2303 	umull	r2, r3, r2, r3
 8007a3a:	0a9b      	lsrs	r3, r3, #10
 8007a3c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	4b51      	ldr	r3, [pc, #324]	; (8007b88 <HAL_ETH_TransmitFrame+0x1cc>)
 8007a42:	fba3 1302 	umull	r1, r3, r3, r2
 8007a46:	0a9b      	lsrs	r3, r3, #10
 8007a48:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8007a4c:	fb01 f303 	mul.w	r3, r1, r3
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d005      	beq.n	8007a62 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	617b      	str	r3, [r7, #20]
 8007a5c:	e001      	b.n	8007a62 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d11c      	bne.n	8007aa2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a72:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8007a76:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8007a82:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007a92:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	62da      	str	r2, [r3, #44]	; 0x2c
 8007aa0:	e04b      	b.n	8007b3a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	613b      	str	r3, [r7, #16]
 8007aa6:	e044      	b.n	8007b32 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007ab6:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d107      	bne.n	8007ace <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007acc:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007ad6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	3b01      	subs	r3, #1
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d116      	bne.n	8007b10 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aec:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007af0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	4a25      	ldr	r2, [pc, #148]	; (8007b8c <HAL_ETH_TransmitFrame+0x1d0>)
 8007af6:	fb02 f203 	mul.w	r2, r2, r3
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	4413      	add	r3, r2
 8007afe:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007b02:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8007b0e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007b1e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	461a      	mov	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	3301      	adds	r3, #1
 8007b30:	613b      	str	r3, [r7, #16]
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d3b6      	bcc.n	8007aa8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b42:	3314      	adds	r3, #20
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0304 	and.w	r3, r3, #4
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00d      	beq.n	8007b6a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b56:	3314      	adds	r3, #20
 8007b58:	2204      	movs	r2, #4
 8007b5a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b64:	3304      	adds	r3, #4
 8007b66:	2200      	movs	r2, #0
 8007b68:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	371c      	adds	r7, #28
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	ac02b00b 	.word	0xac02b00b
 8007b8c:	fffffa0c 	.word	0xfffffa0c

08007b90 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d101      	bne.n	8007baa <HAL_ETH_GetReceivedFrame+0x1a>
 8007ba6:	2302      	movs	r3, #2
 8007ba8:	e070      	b.n	8007c8c <HAL_ETH_GetReceivedFrame+0xfc>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2202      	movs	r2, #2
 8007bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	db5a      	blt.n	8007c7a <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d030      	beq.n	8007c34 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd6:	1c5a      	adds	r2, r3, #1
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d103      	bne.n	8007bec <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	0c1b      	lsrs	r3, r3, #16
 8007bfc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007c00:	3b04      	subs	r3, #4
 8007c02:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0e:	689a      	ldr	r2, [r3, #8]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8007c30:	2300      	movs	r3, #0
 8007c32:	e02b      	b.n	8007c8c <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d010      	beq.n	8007c64 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	629a      	str	r2, [r3, #40]	; 0x28
 8007c62:	e00a      	b.n	8007c7a <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c68:	1c5a      	adds	r2, r3, #1
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	461a      	mov	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	607a      	str	r2, [r7, #4]
 8007ca4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8007caa:	2300      	movs	r3, #0
 8007cac:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b82      	cmp	r3, #130	; 0x82
 8007cb8:	d101      	bne.n	8007cbe <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8007cba:	2302      	movs	r3, #2
 8007cbc:	e050      	b.n	8007d60 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2282      	movs	r2, #130	; 0x82
 8007cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	f003 031c 	and.w	r3, r3, #28
 8007cd4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	8a1b      	ldrh	r3, [r3, #16]
 8007cda:	02db      	lsls	r3, r3, #11
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	697a      	ldr	r2, [r7, #20]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8007ce4:	897b      	ldrh	r3, [r7, #10]
 8007ce6:	019b      	lsls	r3, r3, #6
 8007ce8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	f023 0302 	bic.w	r3, r3, #2
 8007cf8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f043 0301 	orr.w	r3, r3, #1
 8007d00:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8007d0a:	f7ff facf 	bl	80072ac <HAL_GetTick>
 8007d0e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007d10:	e015      	b.n	8007d3e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8007d12:	f7ff facb 	bl	80072ac <HAL_GetTick>
 8007d16:	4602      	mov	r2, r0
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d20:	d309      	bcc.n	8007d36 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8007d32:	2303      	movs	r3, #3
 8007d34:	e014      	b.n	8007d60 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	f003 0301 	and.w	r3, r3, #1
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1e4      	bne.n	8007d12 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	695b      	ldr	r3, [r3, #20]
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	461a      	mov	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3718      	adds	r7, #24
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b086      	sub	sp, #24
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	460b      	mov	r3, r1
 8007d72:	607a      	str	r2, [r7, #4]
 8007d74:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8007d76:	2300      	movs	r3, #0
 8007d78:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b42      	cmp	r3, #66	; 0x42
 8007d88:	d101      	bne.n	8007d8e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	e04e      	b.n	8007e2c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2242      	movs	r2, #66	; 0x42
 8007d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	f003 031c 	and.w	r3, r3, #28
 8007da4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	8a1b      	ldrh	r3, [r3, #16]
 8007daa:	02db      	lsls	r3, r3, #11
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8007db4:	897b      	ldrh	r3, [r7, #10]
 8007db6:	019b      	lsls	r3, r3, #6
 8007db8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f043 0302 	orr.w	r3, r3, #2
 8007dc8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	f043 0301 	orr.w	r3, r3, #1
 8007dd0:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8007de4:	f7ff fa62 	bl	80072ac <HAL_GetTick>
 8007de8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007dea:	e015      	b.n	8007e18 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8007dec:	f7ff fa5e 	bl	80072ac <HAL_GetTick>
 8007df0:	4602      	mov	r2, r0
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dfa:	d309      	bcc.n	8007e10 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e00d      	b.n	8007e2c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f003 0301 	and.w	r3, r3, #1
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1e4      	bne.n	8007dec <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3718      	adds	r7, #24
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d101      	bne.n	8007e4a <HAL_ETH_Start+0x16>
 8007e46:	2302      	movs	r3, #2
 8007e48:	e01f      	b.n	8007e8a <HAL_ETH_Start+0x56>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2202      	movs	r2, #2
 8007e56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 fa1c 	bl	8008298 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 fa36 	bl	80082d2 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fa80 	bl	800836c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fa4d 	bl	800830c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fa62 	bl	800833c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
	...

08007e94 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b0b0      	sub	sp, #192	; 0xc0
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d007      	beq.n	8007eba <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007eb0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007eb8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	69db      	ldr	r3, [r3, #28]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d103      	bne.n	8007ee2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8007eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ede:	663b      	str	r3, [r7, #96]	; 0x60
 8007ee0:	e001      	b.n	8007ee6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8007ee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007eea:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8007eec:	2300      	movs	r3, #0
 8007eee:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8007efc:	2300      	movs	r3, #0
 8007efe:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8007f00:	2340      	movs	r3, #64	; 0x40
 8007f02:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8007f04:	2300      	movs	r3, #0
 8007f06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8007f10:	2300      	movs	r3, #0
 8007f12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8007f16:	2300      	movs	r3, #0
 8007f18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8007f34:	2380      	movs	r3, #128	; 0x80
 8007f36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8007f40:	2300      	movs	r3, #0
 8007f42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8007f46:	2300      	movs	r3, #0
 8007f48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8007f52:	2300      	movs	r3, #0
 8007f54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8007f68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007f6c:	4bac      	ldr	r3, [pc, #688]	; (8008220 <ETH_MACDMAConfig+0x38c>)
 8007f6e:	4013      	ands	r3, r2
 8007f70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8007f74:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8007f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8007f78:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8007f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8007f7c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8007f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8007f80:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8007f86:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8007f88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8007f8a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8007f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8007f8e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8007f94:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8007f96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8007f98:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8007f9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8007f9c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8007f9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8007fa0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8007fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8007fa4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8007fa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8007fa8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8007faa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007fbc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007fc8:	2001      	movs	r0, #1
 8007fca:	f7ff f97b 	bl	80072c4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007fd6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8007fd8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8007fda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8007fdc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8007fde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8007fe0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8007fe2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8007fe6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8007fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8007fec:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8007fee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8007ff2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8007ff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8007ff8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8007ffc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8008004:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8008006:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8008012:	2001      	movs	r0, #1
 8008014:	f7ff f956 	bl	80072c4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008020:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800802a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008034:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	699b      	ldr	r3, [r3, #24]
 800803c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8008040:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008044:	f64f 7341 	movw	r3, #65345	; 0xff41
 8008048:	4013      	ands	r3, r2
 800804a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800804e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008052:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8008054:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8008058:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800805a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800805e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8008060:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8008064:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8008066:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800806a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800806c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8008070:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8008072:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008076:	4313      	orrs	r3, r2
 8008078:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008084:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8008090:	2001      	movs	r0, #1
 8008092:	f7ff f917 	bl	80072c4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800809e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80080a0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80080a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	430a      	orrs	r2, r1
 80080ae:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	69db      	ldr	r3, [r3, #28]
 80080b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80080ba:	2001      	movs	r0, #1
 80080bc:	f7ff f902 	bl	80072c4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80080c8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80080ca:	2300      	movs	r3, #0
 80080cc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80080ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80080d2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80080d4:	2300      	movs	r3, #0
 80080d6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80080d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80080dc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80080de:	2300      	movs	r3, #0
 80080e0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80080e2:	2300      	movs	r3, #0
 80080e4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80080e6:	2300      	movs	r3, #0
 80080e8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80080ea:	2300      	movs	r3, #0
 80080ec:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80080ee:	2304      	movs	r3, #4
 80080f0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80080f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80080f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80080f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80080fc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80080fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008102:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008104:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008108:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800810a:	2380      	movs	r3, #128	; 0x80
 800810c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800810e:	2300      	movs	r3, #0
 8008110:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8008112:	2300      	movs	r3, #0
 8008114:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800811e:	3318      	adds	r3, #24
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8008126:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800812a:	4b3e      	ldr	r3, [pc, #248]	; (8008224 <ETH_MACDMAConfig+0x390>)
 800812c:	4013      	ands	r3, r2
 800812e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8008132:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8008134:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8008136:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8008138:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800813a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800813c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800813e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8008140:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8008142:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8008144:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8008146:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8008148:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800814a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800814e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8008150:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8008152:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8008154:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008158:	4313      	orrs	r3, r2
 800815a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008166:	3318      	adds	r3, #24
 8008168:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800816c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008176:	3318      	adds	r3, #24
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800817e:	2001      	movs	r0, #1
 8008180:	f7ff f8a0 	bl	80072c4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800818c:	3318      	adds	r3, #24
 800818e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008192:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8008194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8008196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8008198:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800819a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800819c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800819e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80081a0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80081a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80081a4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80081a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081a8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80081aa:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80081ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80081ae:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80081b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081bc:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80081cc:	2001      	movs	r0, #1
 80081ce:	f7ff f879 	bl	80072c4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80081de:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d10f      	bne.n	8008208 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081f0:	331c      	adds	r3, #28
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80081fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008204:	331c      	adds	r3, #28
 8008206:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	695b      	ldr	r3, [r3, #20]
 800820c:	461a      	mov	r2, r3
 800820e:	2100      	movs	r1, #0
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 f809 	bl	8008228 <ETH_MACAddressConfig>
}
 8008216:	bf00      	nop
 8008218:	37c0      	adds	r7, #192	; 0xc0
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	ff20810f 	.word	0xff20810f
 8008224:	f8de3f23 	.word	0xf8de3f23

08008228 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8008228:	b480      	push	{r7}
 800822a:	b087      	sub	sp, #28
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	3305      	adds	r3, #5
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	021b      	lsls	r3, r3, #8
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	3204      	adds	r2, #4
 8008240:	7812      	ldrb	r2, [r2, #0]
 8008242:	4313      	orrs	r3, r2
 8008244:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	4b11      	ldr	r3, [pc, #68]	; (8008290 <ETH_MACAddressConfig+0x68>)
 800824a:	4413      	add	r3, r2
 800824c:	461a      	mov	r2, r3
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	3303      	adds	r3, #3
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	061a      	lsls	r2, r3, #24
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	3302      	adds	r3, #2
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	041b      	lsls	r3, r3, #16
 8008262:	431a      	orrs	r2, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	3301      	adds	r3, #1
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	021b      	lsls	r3, r3, #8
 800826c:	4313      	orrs	r3, r2
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	7812      	ldrb	r2, [r2, #0]
 8008272:	4313      	orrs	r3, r2
 8008274:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	4b06      	ldr	r3, [pc, #24]	; (8008294 <ETH_MACAddressConfig+0x6c>)
 800827a:	4413      	add	r3, r2
 800827c:	461a      	mov	r2, r3
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	6013      	str	r3, [r2, #0]
}
 8008282:	bf00      	nop
 8008284:	371c      	adds	r7, #28
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	40028040 	.word	0x40028040
 8008294:	40028044 	.word	0x40028044

08008298 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80082a0:	2300      	movs	r3, #0
 80082a2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f042 0208 	orr.w	r2, r2, #8
 80082b2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80082bc:	2001      	movs	r0, #1
 80082be:	f000 f87f 	bl	80083c0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	601a      	str	r2, [r3, #0]
}
 80082ca:	bf00      	nop
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b084      	sub	sp, #16
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80082da:	2300      	movs	r3, #0
 80082dc:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f042 0204 	orr.w	r2, r2, #4
 80082ec:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80082f6:	2001      	movs	r0, #1
 80082f8:	f000 f862 	bl	80083c0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	601a      	str	r2, [r3, #0]
}
 8008304:	bf00      	nop
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800831c:	3318      	adds	r3, #24
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800832c:	3318      	adds	r3, #24
 800832e:	601a      	str	r2, [r3, #0]
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800834c:	3318      	adds	r3, #24
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f042 0202 	orr.w	r2, r2, #2
 8008358:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800835c:	3318      	adds	r3, #24
 800835e:	601a      	str	r2, [r3, #0]
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8008374:	2300      	movs	r3, #0
 8008376:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008380:	3318      	adds	r3, #24
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800838c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008390:	3318      	adds	r3, #24
 8008392:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800839c:	3318      	adds	r3, #24
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80083a2:	2001      	movs	r0, #1
 80083a4:	f000 f80c 	bl	80083c0 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083b2:	3318      	adds	r3, #24
 80083b4:	601a      	str	r2, [r3, #0]
}
 80083b6:	bf00      	nop
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
	...

080083c0 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80083c8:	4b0a      	ldr	r3, [pc, #40]	; (80083f4 <ETH_Delay+0x34>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a0a      	ldr	r2, [pc, #40]	; (80083f8 <ETH_Delay+0x38>)
 80083ce:	fba2 2303 	umull	r2, r3, r2, r3
 80083d2:	0a5b      	lsrs	r3, r3, #9
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	fb02 f303 	mul.w	r3, r2, r3
 80083da:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80083dc:	bf00      	nop
  } 
  while (Delay --);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	1e5a      	subs	r2, r3, #1
 80083e2:	60fa      	str	r2, [r7, #12]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d1f9      	bne.n	80083dc <ETH_Delay+0x1c>
}
 80083e8:	bf00      	nop
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr
 80083f4:	20000004 	.word	0x20000004
 80083f8:	10624dd3 	.word	0x10624dd3

080083fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b089      	sub	sp, #36	; 0x24
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008406:	2300      	movs	r3, #0
 8008408:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800840a:	2300      	movs	r3, #0
 800840c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800840e:	2300      	movs	r3, #0
 8008410:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008412:	2300      	movs	r3, #0
 8008414:	61fb      	str	r3, [r7, #28]
 8008416:	e16b      	b.n	80086f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008418:	2201      	movs	r2, #1
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	fa02 f303 	lsl.w	r3, r2, r3
 8008420:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	4013      	ands	r3, r2
 800842a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800842c:	693a      	ldr	r2, [r7, #16]
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	429a      	cmp	r2, r3
 8008432:	f040 815a 	bne.w	80086ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	2b01      	cmp	r3, #1
 800843c:	d00b      	beq.n	8008456 <HAL_GPIO_Init+0x5a>
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	2b02      	cmp	r3, #2
 8008444:	d007      	beq.n	8008456 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800844a:	2b11      	cmp	r3, #17
 800844c:	d003      	beq.n	8008456 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	2b12      	cmp	r3, #18
 8008454:	d130      	bne.n	80084b8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	005b      	lsls	r3, r3, #1
 8008460:	2203      	movs	r2, #3
 8008462:	fa02 f303 	lsl.w	r3, r2, r3
 8008466:	43db      	mvns	r3, r3
 8008468:	69ba      	ldr	r2, [r7, #24]
 800846a:	4013      	ands	r3, r2
 800846c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	68da      	ldr	r2, [r3, #12]
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	005b      	lsls	r3, r3, #1
 8008476:	fa02 f303 	lsl.w	r3, r2, r3
 800847a:	69ba      	ldr	r2, [r7, #24]
 800847c:	4313      	orrs	r3, r2
 800847e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	69ba      	ldr	r2, [r7, #24]
 8008484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800848c:	2201      	movs	r2, #1
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	fa02 f303 	lsl.w	r3, r2, r3
 8008494:	43db      	mvns	r3, r3
 8008496:	69ba      	ldr	r2, [r7, #24]
 8008498:	4013      	ands	r3, r2
 800849a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	091b      	lsrs	r3, r3, #4
 80084a2:	f003 0201 	and.w	r2, r3, #1
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	fa02 f303 	lsl.w	r3, r2, r3
 80084ac:	69ba      	ldr	r2, [r7, #24]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	69ba      	ldr	r2, [r7, #24]
 80084b6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	68db      	ldr	r3, [r3, #12]
 80084bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	005b      	lsls	r3, r3, #1
 80084c2:	2203      	movs	r2, #3
 80084c4:	fa02 f303 	lsl.w	r3, r2, r3
 80084c8:	43db      	mvns	r3, r3
 80084ca:	69ba      	ldr	r2, [r7, #24]
 80084cc:	4013      	ands	r3, r2
 80084ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	689a      	ldr	r2, [r3, #8]
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	005b      	lsls	r3, r3, #1
 80084d8:	fa02 f303 	lsl.w	r3, r2, r3
 80084dc:	69ba      	ldr	r2, [r7, #24]
 80084de:	4313      	orrs	r3, r2
 80084e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	69ba      	ldr	r2, [r7, #24]
 80084e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d003      	beq.n	80084f8 <HAL_GPIO_Init+0xfc>
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	2b12      	cmp	r3, #18
 80084f6:	d123      	bne.n	8008540 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	08da      	lsrs	r2, r3, #3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	3208      	adds	r2, #8
 8008500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008504:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	f003 0307 	and.w	r3, r3, #7
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	220f      	movs	r2, #15
 8008510:	fa02 f303 	lsl.w	r3, r2, r3
 8008514:	43db      	mvns	r3, r3
 8008516:	69ba      	ldr	r2, [r7, #24]
 8008518:	4013      	ands	r3, r2
 800851a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	691a      	ldr	r2, [r3, #16]
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	f003 0307 	and.w	r3, r3, #7
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	fa02 f303 	lsl.w	r3, r2, r3
 800852c:	69ba      	ldr	r2, [r7, #24]
 800852e:	4313      	orrs	r3, r2
 8008530:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	08da      	lsrs	r2, r3, #3
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	3208      	adds	r2, #8
 800853a:	69b9      	ldr	r1, [r7, #24]
 800853c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	005b      	lsls	r3, r3, #1
 800854a:	2203      	movs	r2, #3
 800854c:	fa02 f303 	lsl.w	r3, r2, r3
 8008550:	43db      	mvns	r3, r3
 8008552:	69ba      	ldr	r2, [r7, #24]
 8008554:	4013      	ands	r3, r2
 8008556:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	f003 0203 	and.w	r2, r3, #3
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	005b      	lsls	r3, r3, #1
 8008564:	fa02 f303 	lsl.w	r3, r2, r3
 8008568:	69ba      	ldr	r2, [r7, #24]
 800856a:	4313      	orrs	r3, r2
 800856c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	69ba      	ldr	r2, [r7, #24]
 8008572:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800857c:	2b00      	cmp	r3, #0
 800857e:	f000 80b4 	beq.w	80086ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008582:	2300      	movs	r3, #0
 8008584:	60fb      	str	r3, [r7, #12]
 8008586:	4b5f      	ldr	r3, [pc, #380]	; (8008704 <HAL_GPIO_Init+0x308>)
 8008588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800858a:	4a5e      	ldr	r2, [pc, #376]	; (8008704 <HAL_GPIO_Init+0x308>)
 800858c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008590:	6453      	str	r3, [r2, #68]	; 0x44
 8008592:	4b5c      	ldr	r3, [pc, #368]	; (8008704 <HAL_GPIO_Init+0x308>)
 8008594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800859a:	60fb      	str	r3, [r7, #12]
 800859c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800859e:	4a5a      	ldr	r2, [pc, #360]	; (8008708 <HAL_GPIO_Init+0x30c>)
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	089b      	lsrs	r3, r3, #2
 80085a4:	3302      	adds	r3, #2
 80085a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	f003 0303 	and.w	r3, r3, #3
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	220f      	movs	r2, #15
 80085b6:	fa02 f303 	lsl.w	r3, r2, r3
 80085ba:	43db      	mvns	r3, r3
 80085bc:	69ba      	ldr	r2, [r7, #24]
 80085be:	4013      	ands	r3, r2
 80085c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a51      	ldr	r2, [pc, #324]	; (800870c <HAL_GPIO_Init+0x310>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d02b      	beq.n	8008622 <HAL_GPIO_Init+0x226>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a50      	ldr	r2, [pc, #320]	; (8008710 <HAL_GPIO_Init+0x314>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d025      	beq.n	800861e <HAL_GPIO_Init+0x222>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a4f      	ldr	r2, [pc, #316]	; (8008714 <HAL_GPIO_Init+0x318>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d01f      	beq.n	800861a <HAL_GPIO_Init+0x21e>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a4e      	ldr	r2, [pc, #312]	; (8008718 <HAL_GPIO_Init+0x31c>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d019      	beq.n	8008616 <HAL_GPIO_Init+0x21a>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a4d      	ldr	r2, [pc, #308]	; (800871c <HAL_GPIO_Init+0x320>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d013      	beq.n	8008612 <HAL_GPIO_Init+0x216>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a4c      	ldr	r2, [pc, #304]	; (8008720 <HAL_GPIO_Init+0x324>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d00d      	beq.n	800860e <HAL_GPIO_Init+0x212>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a4b      	ldr	r2, [pc, #300]	; (8008724 <HAL_GPIO_Init+0x328>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d007      	beq.n	800860a <HAL_GPIO_Init+0x20e>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a4a      	ldr	r2, [pc, #296]	; (8008728 <HAL_GPIO_Init+0x32c>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d101      	bne.n	8008606 <HAL_GPIO_Init+0x20a>
 8008602:	2307      	movs	r3, #7
 8008604:	e00e      	b.n	8008624 <HAL_GPIO_Init+0x228>
 8008606:	2308      	movs	r3, #8
 8008608:	e00c      	b.n	8008624 <HAL_GPIO_Init+0x228>
 800860a:	2306      	movs	r3, #6
 800860c:	e00a      	b.n	8008624 <HAL_GPIO_Init+0x228>
 800860e:	2305      	movs	r3, #5
 8008610:	e008      	b.n	8008624 <HAL_GPIO_Init+0x228>
 8008612:	2304      	movs	r3, #4
 8008614:	e006      	b.n	8008624 <HAL_GPIO_Init+0x228>
 8008616:	2303      	movs	r3, #3
 8008618:	e004      	b.n	8008624 <HAL_GPIO_Init+0x228>
 800861a:	2302      	movs	r3, #2
 800861c:	e002      	b.n	8008624 <HAL_GPIO_Init+0x228>
 800861e:	2301      	movs	r3, #1
 8008620:	e000      	b.n	8008624 <HAL_GPIO_Init+0x228>
 8008622:	2300      	movs	r3, #0
 8008624:	69fa      	ldr	r2, [r7, #28]
 8008626:	f002 0203 	and.w	r2, r2, #3
 800862a:	0092      	lsls	r2, r2, #2
 800862c:	4093      	lsls	r3, r2
 800862e:	69ba      	ldr	r2, [r7, #24]
 8008630:	4313      	orrs	r3, r2
 8008632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008634:	4934      	ldr	r1, [pc, #208]	; (8008708 <HAL_GPIO_Init+0x30c>)
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	089b      	lsrs	r3, r3, #2
 800863a:	3302      	adds	r3, #2
 800863c:	69ba      	ldr	r2, [r7, #24]
 800863e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008642:	4b3a      	ldr	r3, [pc, #232]	; (800872c <HAL_GPIO_Init+0x330>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	43db      	mvns	r3, r3
 800864c:	69ba      	ldr	r2, [r7, #24]
 800864e:	4013      	ands	r3, r2
 8008650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800865a:	2b00      	cmp	r3, #0
 800865c:	d003      	beq.n	8008666 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800865e:	69ba      	ldr	r2, [r7, #24]
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	4313      	orrs	r3, r2
 8008664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008666:	4a31      	ldr	r2, [pc, #196]	; (800872c <HAL_GPIO_Init+0x330>)
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800866c:	4b2f      	ldr	r3, [pc, #188]	; (800872c <HAL_GPIO_Init+0x330>)
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	43db      	mvns	r3, r3
 8008676:	69ba      	ldr	r2, [r7, #24]
 8008678:	4013      	ands	r3, r2
 800867a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008684:	2b00      	cmp	r3, #0
 8008686:	d003      	beq.n	8008690 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008688:	69ba      	ldr	r2, [r7, #24]
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	4313      	orrs	r3, r2
 800868e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008690:	4a26      	ldr	r2, [pc, #152]	; (800872c <HAL_GPIO_Init+0x330>)
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008696:	4b25      	ldr	r3, [pc, #148]	; (800872c <HAL_GPIO_Init+0x330>)
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	43db      	mvns	r3, r3
 80086a0:	69ba      	ldr	r2, [r7, #24]
 80086a2:	4013      	ands	r3, r2
 80086a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d003      	beq.n	80086ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80086b2:	69ba      	ldr	r2, [r7, #24]
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80086ba:	4a1c      	ldr	r2, [pc, #112]	; (800872c <HAL_GPIO_Init+0x330>)
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80086c0:	4b1a      	ldr	r3, [pc, #104]	; (800872c <HAL_GPIO_Init+0x330>)
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	43db      	mvns	r3, r3
 80086ca:	69ba      	ldr	r2, [r7, #24]
 80086cc:	4013      	ands	r3, r2
 80086ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d003      	beq.n	80086e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80086dc:	69ba      	ldr	r2, [r7, #24]
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80086e4:	4a11      	ldr	r2, [pc, #68]	; (800872c <HAL_GPIO_Init+0x330>)
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	3301      	adds	r3, #1
 80086ee:	61fb      	str	r3, [r7, #28]
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	2b0f      	cmp	r3, #15
 80086f4:	f67f ae90 	bls.w	8008418 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80086f8:	bf00      	nop
 80086fa:	3724      	adds	r7, #36	; 0x24
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr
 8008704:	40023800 	.word	0x40023800
 8008708:	40013800 	.word	0x40013800
 800870c:	40020000 	.word	0x40020000
 8008710:	40020400 	.word	0x40020400
 8008714:	40020800 	.word	0x40020800
 8008718:	40020c00 	.word	0x40020c00
 800871c:	40021000 	.word	0x40021000
 8008720:	40021400 	.word	0x40021400
 8008724:	40021800 	.word	0x40021800
 8008728:	40021c00 	.word	0x40021c00
 800872c:	40013c00 	.word	0x40013c00

08008730 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d101      	bne.n	8008742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	e25b      	b.n	8008bfa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	2b00      	cmp	r3, #0
 800874c:	d075      	beq.n	800883a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800874e:	4ba3      	ldr	r3, [pc, #652]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	f003 030c 	and.w	r3, r3, #12
 8008756:	2b04      	cmp	r3, #4
 8008758:	d00c      	beq.n	8008774 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800875a:	4ba0      	ldr	r3, [pc, #640]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008762:	2b08      	cmp	r3, #8
 8008764:	d112      	bne.n	800878c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008766:	4b9d      	ldr	r3, [pc, #628]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800876e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008772:	d10b      	bne.n	800878c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008774:	4b99      	ldr	r3, [pc, #612]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800877c:	2b00      	cmp	r3, #0
 800877e:	d05b      	beq.n	8008838 <HAL_RCC_OscConfig+0x108>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d157      	bne.n	8008838 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	e236      	b.n	8008bfa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008794:	d106      	bne.n	80087a4 <HAL_RCC_OscConfig+0x74>
 8008796:	4b91      	ldr	r3, [pc, #580]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a90      	ldr	r2, [pc, #576]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 800879c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087a0:	6013      	str	r3, [r2, #0]
 80087a2:	e01d      	b.n	80087e0 <HAL_RCC_OscConfig+0xb0>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087ac:	d10c      	bne.n	80087c8 <HAL_RCC_OscConfig+0x98>
 80087ae:	4b8b      	ldr	r3, [pc, #556]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a8a      	ldr	r2, [pc, #552]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 80087b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087b8:	6013      	str	r3, [r2, #0]
 80087ba:	4b88      	ldr	r3, [pc, #544]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a87      	ldr	r2, [pc, #540]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 80087c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087c4:	6013      	str	r3, [r2, #0]
 80087c6:	e00b      	b.n	80087e0 <HAL_RCC_OscConfig+0xb0>
 80087c8:	4b84      	ldr	r3, [pc, #528]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a83      	ldr	r2, [pc, #524]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 80087ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087d2:	6013      	str	r3, [r2, #0]
 80087d4:	4b81      	ldr	r3, [pc, #516]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a80      	ldr	r2, [pc, #512]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 80087da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d013      	beq.n	8008810 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087e8:	f7fe fd60 	bl	80072ac <HAL_GetTick>
 80087ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087ee:	e008      	b.n	8008802 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80087f0:	f7fe fd5c 	bl	80072ac <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	2b64      	cmp	r3, #100	; 0x64
 80087fc:	d901      	bls.n	8008802 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	e1fb      	b.n	8008bfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008802:	4b76      	ldr	r3, [pc, #472]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800880a:	2b00      	cmp	r3, #0
 800880c:	d0f0      	beq.n	80087f0 <HAL_RCC_OscConfig+0xc0>
 800880e:	e014      	b.n	800883a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008810:	f7fe fd4c 	bl	80072ac <HAL_GetTick>
 8008814:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008816:	e008      	b.n	800882a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008818:	f7fe fd48 	bl	80072ac <HAL_GetTick>
 800881c:	4602      	mov	r2, r0
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	2b64      	cmp	r3, #100	; 0x64
 8008824:	d901      	bls.n	800882a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	e1e7      	b.n	8008bfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800882a:	4b6c      	ldr	r3, [pc, #432]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1f0      	bne.n	8008818 <HAL_RCC_OscConfig+0xe8>
 8008836:	e000      	b.n	800883a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 0302 	and.w	r3, r3, #2
 8008842:	2b00      	cmp	r3, #0
 8008844:	d063      	beq.n	800890e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008846:	4b65      	ldr	r3, [pc, #404]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	f003 030c 	and.w	r3, r3, #12
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00b      	beq.n	800886a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008852:	4b62      	ldr	r3, [pc, #392]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800885a:	2b08      	cmp	r3, #8
 800885c:	d11c      	bne.n	8008898 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800885e:	4b5f      	ldr	r3, [pc, #380]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008866:	2b00      	cmp	r3, #0
 8008868:	d116      	bne.n	8008898 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800886a:	4b5c      	ldr	r3, [pc, #368]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 0302 	and.w	r3, r3, #2
 8008872:	2b00      	cmp	r3, #0
 8008874:	d005      	beq.n	8008882 <HAL_RCC_OscConfig+0x152>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	2b01      	cmp	r3, #1
 800887c:	d001      	beq.n	8008882 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e1bb      	b.n	8008bfa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008882:	4b56      	ldr	r3, [pc, #344]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	00db      	lsls	r3, r3, #3
 8008890:	4952      	ldr	r1, [pc, #328]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 8008892:	4313      	orrs	r3, r2
 8008894:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008896:	e03a      	b.n	800890e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d020      	beq.n	80088e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80088a0:	4b4f      	ldr	r3, [pc, #316]	; (80089e0 <HAL_RCC_OscConfig+0x2b0>)
 80088a2:	2201      	movs	r2, #1
 80088a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088a6:	f7fe fd01 	bl	80072ac <HAL_GetTick>
 80088aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088ac:	e008      	b.n	80088c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088ae:	f7fe fcfd 	bl	80072ac <HAL_GetTick>
 80088b2:	4602      	mov	r2, r0
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d901      	bls.n	80088c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	e19c      	b.n	8008bfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088c0:	4b46      	ldr	r3, [pc, #280]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 0302 	and.w	r3, r3, #2
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d0f0      	beq.n	80088ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088cc:	4b43      	ldr	r3, [pc, #268]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	00db      	lsls	r3, r3, #3
 80088da:	4940      	ldr	r1, [pc, #256]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 80088dc:	4313      	orrs	r3, r2
 80088de:	600b      	str	r3, [r1, #0]
 80088e0:	e015      	b.n	800890e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088e2:	4b3f      	ldr	r3, [pc, #252]	; (80089e0 <HAL_RCC_OscConfig+0x2b0>)
 80088e4:	2200      	movs	r2, #0
 80088e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088e8:	f7fe fce0 	bl	80072ac <HAL_GetTick>
 80088ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088ee:	e008      	b.n	8008902 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088f0:	f7fe fcdc 	bl	80072ac <HAL_GetTick>
 80088f4:	4602      	mov	r2, r0
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d901      	bls.n	8008902 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	e17b      	b.n	8008bfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008902:	4b36      	ldr	r3, [pc, #216]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 0302 	and.w	r3, r3, #2
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1f0      	bne.n	80088f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 0308 	and.w	r3, r3, #8
 8008916:	2b00      	cmp	r3, #0
 8008918:	d030      	beq.n	800897c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d016      	beq.n	8008950 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008922:	4b30      	ldr	r3, [pc, #192]	; (80089e4 <HAL_RCC_OscConfig+0x2b4>)
 8008924:	2201      	movs	r2, #1
 8008926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008928:	f7fe fcc0 	bl	80072ac <HAL_GetTick>
 800892c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800892e:	e008      	b.n	8008942 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008930:	f7fe fcbc 	bl	80072ac <HAL_GetTick>
 8008934:	4602      	mov	r2, r0
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	2b02      	cmp	r3, #2
 800893c:	d901      	bls.n	8008942 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800893e:	2303      	movs	r3, #3
 8008940:	e15b      	b.n	8008bfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008942:	4b26      	ldr	r3, [pc, #152]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 8008944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008946:	f003 0302 	and.w	r3, r3, #2
 800894a:	2b00      	cmp	r3, #0
 800894c:	d0f0      	beq.n	8008930 <HAL_RCC_OscConfig+0x200>
 800894e:	e015      	b.n	800897c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008950:	4b24      	ldr	r3, [pc, #144]	; (80089e4 <HAL_RCC_OscConfig+0x2b4>)
 8008952:	2200      	movs	r2, #0
 8008954:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008956:	f7fe fca9 	bl	80072ac <HAL_GetTick>
 800895a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800895c:	e008      	b.n	8008970 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800895e:	f7fe fca5 	bl	80072ac <HAL_GetTick>
 8008962:	4602      	mov	r2, r0
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	2b02      	cmp	r3, #2
 800896a:	d901      	bls.n	8008970 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800896c:	2303      	movs	r3, #3
 800896e:	e144      	b.n	8008bfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008970:	4b1a      	ldr	r3, [pc, #104]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 8008972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008974:	f003 0302 	and.w	r3, r3, #2
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1f0      	bne.n	800895e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 0304 	and.w	r3, r3, #4
 8008984:	2b00      	cmp	r3, #0
 8008986:	f000 80a0 	beq.w	8008aca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800898a:	2300      	movs	r3, #0
 800898c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800898e:	4b13      	ldr	r3, [pc, #76]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 8008990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d10f      	bne.n	80089ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800899a:	2300      	movs	r3, #0
 800899c:	60bb      	str	r3, [r7, #8]
 800899e:	4b0f      	ldr	r3, [pc, #60]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 80089a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a2:	4a0e      	ldr	r2, [pc, #56]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 80089a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089a8:	6413      	str	r3, [r2, #64]	; 0x40
 80089aa:	4b0c      	ldr	r3, [pc, #48]	; (80089dc <HAL_RCC_OscConfig+0x2ac>)
 80089ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089b2:	60bb      	str	r3, [r7, #8]
 80089b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089b6:	2301      	movs	r3, #1
 80089b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089ba:	4b0b      	ldr	r3, [pc, #44]	; (80089e8 <HAL_RCC_OscConfig+0x2b8>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d121      	bne.n	8008a0a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80089c6:	4b08      	ldr	r3, [pc, #32]	; (80089e8 <HAL_RCC_OscConfig+0x2b8>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a07      	ldr	r2, [pc, #28]	; (80089e8 <HAL_RCC_OscConfig+0x2b8>)
 80089cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089d2:	f7fe fc6b 	bl	80072ac <HAL_GetTick>
 80089d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089d8:	e011      	b.n	80089fe <HAL_RCC_OscConfig+0x2ce>
 80089da:	bf00      	nop
 80089dc:	40023800 	.word	0x40023800
 80089e0:	42470000 	.word	0x42470000
 80089e4:	42470e80 	.word	0x42470e80
 80089e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089ec:	f7fe fc5e 	bl	80072ac <HAL_GetTick>
 80089f0:	4602      	mov	r2, r0
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d901      	bls.n	80089fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80089fa:	2303      	movs	r3, #3
 80089fc:	e0fd      	b.n	8008bfa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089fe:	4b81      	ldr	r3, [pc, #516]	; (8008c04 <HAL_RCC_OscConfig+0x4d4>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d0f0      	beq.n	80089ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d106      	bne.n	8008a20 <HAL_RCC_OscConfig+0x2f0>
 8008a12:	4b7d      	ldr	r3, [pc, #500]	; (8008c08 <HAL_RCC_OscConfig+0x4d8>)
 8008a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a16:	4a7c      	ldr	r2, [pc, #496]	; (8008c08 <HAL_RCC_OscConfig+0x4d8>)
 8008a18:	f043 0301 	orr.w	r3, r3, #1
 8008a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8008a1e:	e01c      	b.n	8008a5a <HAL_RCC_OscConfig+0x32a>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	2b05      	cmp	r3, #5
 8008a26:	d10c      	bne.n	8008a42 <HAL_RCC_OscConfig+0x312>
 8008a28:	4b77      	ldr	r3, [pc, #476]	; (8008c08 <HAL_RCC_OscConfig+0x4d8>)
 8008a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a2c:	4a76      	ldr	r2, [pc, #472]	; (8008c08 <HAL_RCC_OscConfig+0x4d8>)
 8008a2e:	f043 0304 	orr.w	r3, r3, #4
 8008a32:	6713      	str	r3, [r2, #112]	; 0x70
 8008a34:	4b74      	ldr	r3, [pc, #464]	; (8008c08 <HAL_RCC_OscConfig+0x4d8>)
 8008a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a38:	4a73      	ldr	r2, [pc, #460]	; (8008c08 <HAL_RCC_OscConfig+0x4d8>)
 8008a3a:	f043 0301 	orr.w	r3, r3, #1
 8008a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8008a40:	e00b      	b.n	8008a5a <HAL_RCC_OscConfig+0x32a>
 8008a42:	4b71      	ldr	r3, [pc, #452]	; (8008c08 <HAL_RCC_OscConfig+0x4d8>)
 8008a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a46:	4a70      	ldr	r2, [pc, #448]	; (8008c08 <HAL_RCC_OscConfig+0x4d8>)
 8008a48:	f023 0301 	bic.w	r3, r3, #1
 8008a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8008a4e:	4b6e      	ldr	r3, [pc, #440]	; (8008c08 <HAL_RCC_OscConfig+0x4d8>)
 8008a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a52:	4a6d      	ldr	r2, [pc, #436]	; (8008c08 <HAL_RCC_OscConfig+0x4d8>)
 8008a54:	f023 0304 	bic.w	r3, r3, #4
 8008a58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d015      	beq.n	8008a8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a62:	f7fe fc23 	bl	80072ac <HAL_GetTick>
 8008a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a68:	e00a      	b.n	8008a80 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a6a:	f7fe fc1f 	bl	80072ac <HAL_GetTick>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d901      	bls.n	8008a80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008a7c:	2303      	movs	r3, #3
 8008a7e:	e0bc      	b.n	8008bfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a80:	4b61      	ldr	r3, [pc, #388]	; (8008c08 <HAL_RCC_OscConfig+0x4d8>)
 8008a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a84:	f003 0302 	and.w	r3, r3, #2
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d0ee      	beq.n	8008a6a <HAL_RCC_OscConfig+0x33a>
 8008a8c:	e014      	b.n	8008ab8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a8e:	f7fe fc0d 	bl	80072ac <HAL_GetTick>
 8008a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a94:	e00a      	b.n	8008aac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a96:	f7fe fc09 	bl	80072ac <HAL_GetTick>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	1ad3      	subs	r3, r2, r3
 8008aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d901      	bls.n	8008aac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	e0a6      	b.n	8008bfa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008aac:	4b56      	ldr	r3, [pc, #344]	; (8008c08 <HAL_RCC_OscConfig+0x4d8>)
 8008aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ab0:	f003 0302 	and.w	r3, r3, #2
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d1ee      	bne.n	8008a96 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ab8:	7dfb      	ldrb	r3, [r7, #23]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d105      	bne.n	8008aca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008abe:	4b52      	ldr	r3, [pc, #328]	; (8008c08 <HAL_RCC_OscConfig+0x4d8>)
 8008ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac2:	4a51      	ldr	r2, [pc, #324]	; (8008c08 <HAL_RCC_OscConfig+0x4d8>)
 8008ac4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ac8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	699b      	ldr	r3, [r3, #24]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f000 8092 	beq.w	8008bf8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008ad4:	4b4c      	ldr	r3, [pc, #304]	; (8008c08 <HAL_RCC_OscConfig+0x4d8>)
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	f003 030c 	and.w	r3, r3, #12
 8008adc:	2b08      	cmp	r3, #8
 8008ade:	d05c      	beq.n	8008b9a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	699b      	ldr	r3, [r3, #24]
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d141      	bne.n	8008b6c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ae8:	4b48      	ldr	r3, [pc, #288]	; (8008c0c <HAL_RCC_OscConfig+0x4dc>)
 8008aea:	2200      	movs	r2, #0
 8008aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008aee:	f7fe fbdd 	bl	80072ac <HAL_GetTick>
 8008af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008af4:	e008      	b.n	8008b08 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008af6:	f7fe fbd9 	bl	80072ac <HAL_GetTick>
 8008afa:	4602      	mov	r2, r0
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	1ad3      	subs	r3, r2, r3
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d901      	bls.n	8008b08 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008b04:	2303      	movs	r3, #3
 8008b06:	e078      	b.n	8008bfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b08:	4b3f      	ldr	r3, [pc, #252]	; (8008c08 <HAL_RCC_OscConfig+0x4d8>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1f0      	bne.n	8008af6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	69da      	ldr	r2, [r3, #28]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a1b      	ldr	r3, [r3, #32]
 8008b1c:	431a      	orrs	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b22:	019b      	lsls	r3, r3, #6
 8008b24:	431a      	orrs	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b2a:	085b      	lsrs	r3, r3, #1
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	041b      	lsls	r3, r3, #16
 8008b30:	431a      	orrs	r2, r3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b36:	061b      	lsls	r3, r3, #24
 8008b38:	4933      	ldr	r1, [pc, #204]	; (8008c08 <HAL_RCC_OscConfig+0x4d8>)
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b3e:	4b33      	ldr	r3, [pc, #204]	; (8008c0c <HAL_RCC_OscConfig+0x4dc>)
 8008b40:	2201      	movs	r2, #1
 8008b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b44:	f7fe fbb2 	bl	80072ac <HAL_GetTick>
 8008b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b4a:	e008      	b.n	8008b5e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b4c:	f7fe fbae 	bl	80072ac <HAL_GetTick>
 8008b50:	4602      	mov	r2, r0
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	1ad3      	subs	r3, r2, r3
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d901      	bls.n	8008b5e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e04d      	b.n	8008bfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b5e:	4b2a      	ldr	r3, [pc, #168]	; (8008c08 <HAL_RCC_OscConfig+0x4d8>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d0f0      	beq.n	8008b4c <HAL_RCC_OscConfig+0x41c>
 8008b6a:	e045      	b.n	8008bf8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b6c:	4b27      	ldr	r3, [pc, #156]	; (8008c0c <HAL_RCC_OscConfig+0x4dc>)
 8008b6e:	2200      	movs	r2, #0
 8008b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b72:	f7fe fb9b 	bl	80072ac <HAL_GetTick>
 8008b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b78:	e008      	b.n	8008b8c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b7a:	f7fe fb97 	bl	80072ac <HAL_GetTick>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	1ad3      	subs	r3, r2, r3
 8008b84:	2b02      	cmp	r3, #2
 8008b86:	d901      	bls.n	8008b8c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008b88:	2303      	movs	r3, #3
 8008b8a:	e036      	b.n	8008bfa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b8c:	4b1e      	ldr	r3, [pc, #120]	; (8008c08 <HAL_RCC_OscConfig+0x4d8>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d1f0      	bne.n	8008b7a <HAL_RCC_OscConfig+0x44a>
 8008b98:	e02e      	b.n	8008bf8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	699b      	ldr	r3, [r3, #24]
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d101      	bne.n	8008ba6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e029      	b.n	8008bfa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008ba6:	4b18      	ldr	r3, [pc, #96]	; (8008c08 <HAL_RCC_OscConfig+0x4d8>)
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	69db      	ldr	r3, [r3, #28]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d11c      	bne.n	8008bf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d115      	bne.n	8008bf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008bce:	4013      	ands	r3, r2
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d10d      	bne.n	8008bf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d106      	bne.n	8008bf4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d001      	beq.n	8008bf8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e000      	b.n	8008bfa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3718      	adds	r7, #24
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	40007000 	.word	0x40007000
 8008c08:	40023800 	.word	0x40023800
 8008c0c:	42470060 	.word	0x42470060

08008c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d101      	bne.n	8008c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e0cc      	b.n	8008dbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c24:	4b68      	ldr	r3, [pc, #416]	; (8008dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 030f 	and.w	r3, r3, #15
 8008c2c:	683a      	ldr	r2, [r7, #0]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d90c      	bls.n	8008c4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c32:	4b65      	ldr	r3, [pc, #404]	; (8008dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8008c34:	683a      	ldr	r2, [r7, #0]
 8008c36:	b2d2      	uxtb	r2, r2
 8008c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c3a:	4b63      	ldr	r3, [pc, #396]	; (8008dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 030f 	and.w	r3, r3, #15
 8008c42:	683a      	ldr	r2, [r7, #0]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d001      	beq.n	8008c4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e0b8      	b.n	8008dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 0302 	and.w	r3, r3, #2
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d020      	beq.n	8008c9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 0304 	and.w	r3, r3, #4
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d005      	beq.n	8008c70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008c64:	4b59      	ldr	r3, [pc, #356]	; (8008dcc <HAL_RCC_ClockConfig+0x1bc>)
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	4a58      	ldr	r2, [pc, #352]	; (8008dcc <HAL_RCC_ClockConfig+0x1bc>)
 8008c6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008c6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 0308 	and.w	r3, r3, #8
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d005      	beq.n	8008c88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008c7c:	4b53      	ldr	r3, [pc, #332]	; (8008dcc <HAL_RCC_ClockConfig+0x1bc>)
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	4a52      	ldr	r2, [pc, #328]	; (8008dcc <HAL_RCC_ClockConfig+0x1bc>)
 8008c82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008c86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c88:	4b50      	ldr	r3, [pc, #320]	; (8008dcc <HAL_RCC_ClockConfig+0x1bc>)
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	494d      	ldr	r1, [pc, #308]	; (8008dcc <HAL_RCC_ClockConfig+0x1bc>)
 8008c96:	4313      	orrs	r3, r2
 8008c98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 0301 	and.w	r3, r3, #1
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d044      	beq.n	8008d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d107      	bne.n	8008cbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cae:	4b47      	ldr	r3, [pc, #284]	; (8008dcc <HAL_RCC_ClockConfig+0x1bc>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d119      	bne.n	8008cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e07f      	b.n	8008dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d003      	beq.n	8008cce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008cca:	2b03      	cmp	r3, #3
 8008ccc:	d107      	bne.n	8008cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cce:	4b3f      	ldr	r3, [pc, #252]	; (8008dcc <HAL_RCC_ClockConfig+0x1bc>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d109      	bne.n	8008cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e06f      	b.n	8008dbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cde:	4b3b      	ldr	r3, [pc, #236]	; (8008dcc <HAL_RCC_ClockConfig+0x1bc>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 0302 	and.w	r3, r3, #2
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d101      	bne.n	8008cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e067      	b.n	8008dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008cee:	4b37      	ldr	r3, [pc, #220]	; (8008dcc <HAL_RCC_ClockConfig+0x1bc>)
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	f023 0203 	bic.w	r2, r3, #3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	4934      	ldr	r1, [pc, #208]	; (8008dcc <HAL_RCC_ClockConfig+0x1bc>)
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008d00:	f7fe fad4 	bl	80072ac <HAL_GetTick>
 8008d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d06:	e00a      	b.n	8008d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d08:	f7fe fad0 	bl	80072ac <HAL_GetTick>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d901      	bls.n	8008d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	e04f      	b.n	8008dbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d1e:	4b2b      	ldr	r3, [pc, #172]	; (8008dcc <HAL_RCC_ClockConfig+0x1bc>)
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	f003 020c 	and.w	r2, r3, #12
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d1eb      	bne.n	8008d08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008d30:	4b25      	ldr	r3, [pc, #148]	; (8008dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 030f 	and.w	r3, r3, #15
 8008d38:	683a      	ldr	r2, [r7, #0]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d20c      	bcs.n	8008d58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d3e:	4b22      	ldr	r3, [pc, #136]	; (8008dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8008d40:	683a      	ldr	r2, [r7, #0]
 8008d42:	b2d2      	uxtb	r2, r2
 8008d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d46:	4b20      	ldr	r3, [pc, #128]	; (8008dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 030f 	and.w	r3, r3, #15
 8008d4e:	683a      	ldr	r2, [r7, #0]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d001      	beq.n	8008d58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008d54:	2301      	movs	r3, #1
 8008d56:	e032      	b.n	8008dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f003 0304 	and.w	r3, r3, #4
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d008      	beq.n	8008d76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d64:	4b19      	ldr	r3, [pc, #100]	; (8008dcc <HAL_RCC_ClockConfig+0x1bc>)
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	4916      	ldr	r1, [pc, #88]	; (8008dcc <HAL_RCC_ClockConfig+0x1bc>)
 8008d72:	4313      	orrs	r3, r2
 8008d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 0308 	and.w	r3, r3, #8
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d009      	beq.n	8008d96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d82:	4b12      	ldr	r3, [pc, #72]	; (8008dcc <HAL_RCC_ClockConfig+0x1bc>)
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	00db      	lsls	r3, r3, #3
 8008d90:	490e      	ldr	r1, [pc, #56]	; (8008dcc <HAL_RCC_ClockConfig+0x1bc>)
 8008d92:	4313      	orrs	r3, r2
 8008d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008d96:	f000 f821 	bl	8008ddc <HAL_RCC_GetSysClockFreq>
 8008d9a:	4601      	mov	r1, r0
 8008d9c:	4b0b      	ldr	r3, [pc, #44]	; (8008dcc <HAL_RCC_ClockConfig+0x1bc>)
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	091b      	lsrs	r3, r3, #4
 8008da2:	f003 030f 	and.w	r3, r3, #15
 8008da6:	4a0a      	ldr	r2, [pc, #40]	; (8008dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8008da8:	5cd3      	ldrb	r3, [r2, r3]
 8008daa:	fa21 f303 	lsr.w	r3, r1, r3
 8008dae:	4a09      	ldr	r2, [pc, #36]	; (8008dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8008db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008db2:	4b09      	ldr	r3, [pc, #36]	; (8008dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fe fa34 	bl	8007224 <HAL_InitTick>

  return HAL_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	40023c00 	.word	0x40023c00
 8008dcc:	40023800 	.word	0x40023800
 8008dd0:	08028134 	.word	0x08028134
 8008dd4:	20000004 	.word	0x20000004
 8008dd8:	2000000c 	.word	0x2000000c

08008ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008de2:	2300      	movs	r3, #0
 8008de4:	607b      	str	r3, [r7, #4]
 8008de6:	2300      	movs	r3, #0
 8008de8:	60fb      	str	r3, [r7, #12]
 8008dea:	2300      	movs	r3, #0
 8008dec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008dee:	2300      	movs	r3, #0
 8008df0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008df2:	4b63      	ldr	r3, [pc, #396]	; (8008f80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008df4:	689b      	ldr	r3, [r3, #8]
 8008df6:	f003 030c 	and.w	r3, r3, #12
 8008dfa:	2b04      	cmp	r3, #4
 8008dfc:	d007      	beq.n	8008e0e <HAL_RCC_GetSysClockFreq+0x32>
 8008dfe:	2b08      	cmp	r3, #8
 8008e00:	d008      	beq.n	8008e14 <HAL_RCC_GetSysClockFreq+0x38>
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f040 80b4 	bne.w	8008f70 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008e08:	4b5e      	ldr	r3, [pc, #376]	; (8008f84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008e0a:	60bb      	str	r3, [r7, #8]
       break;
 8008e0c:	e0b3      	b.n	8008f76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008e0e:	4b5e      	ldr	r3, [pc, #376]	; (8008f88 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8008e10:	60bb      	str	r3, [r7, #8]
      break;
 8008e12:	e0b0      	b.n	8008f76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008e14:	4b5a      	ldr	r3, [pc, #360]	; (8008f80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008e1e:	4b58      	ldr	r3, [pc, #352]	; (8008f80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d04a      	beq.n	8008ec0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e2a:	4b55      	ldr	r3, [pc, #340]	; (8008f80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	099b      	lsrs	r3, r3, #6
 8008e30:	f04f 0400 	mov.w	r4, #0
 8008e34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008e38:	f04f 0200 	mov.w	r2, #0
 8008e3c:	ea03 0501 	and.w	r5, r3, r1
 8008e40:	ea04 0602 	and.w	r6, r4, r2
 8008e44:	4629      	mov	r1, r5
 8008e46:	4632      	mov	r2, r6
 8008e48:	f04f 0300 	mov.w	r3, #0
 8008e4c:	f04f 0400 	mov.w	r4, #0
 8008e50:	0154      	lsls	r4, r2, #5
 8008e52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008e56:	014b      	lsls	r3, r1, #5
 8008e58:	4619      	mov	r1, r3
 8008e5a:	4622      	mov	r2, r4
 8008e5c:	1b49      	subs	r1, r1, r5
 8008e5e:	eb62 0206 	sbc.w	r2, r2, r6
 8008e62:	f04f 0300 	mov.w	r3, #0
 8008e66:	f04f 0400 	mov.w	r4, #0
 8008e6a:	0194      	lsls	r4, r2, #6
 8008e6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008e70:	018b      	lsls	r3, r1, #6
 8008e72:	1a5b      	subs	r3, r3, r1
 8008e74:	eb64 0402 	sbc.w	r4, r4, r2
 8008e78:	f04f 0100 	mov.w	r1, #0
 8008e7c:	f04f 0200 	mov.w	r2, #0
 8008e80:	00e2      	lsls	r2, r4, #3
 8008e82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008e86:	00d9      	lsls	r1, r3, #3
 8008e88:	460b      	mov	r3, r1
 8008e8a:	4614      	mov	r4, r2
 8008e8c:	195b      	adds	r3, r3, r5
 8008e8e:	eb44 0406 	adc.w	r4, r4, r6
 8008e92:	f04f 0100 	mov.w	r1, #0
 8008e96:	f04f 0200 	mov.w	r2, #0
 8008e9a:	0262      	lsls	r2, r4, #9
 8008e9c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008ea0:	0259      	lsls	r1, r3, #9
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	4614      	mov	r4, r2
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	4621      	mov	r1, r4
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f04f 0400 	mov.w	r4, #0
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	4623      	mov	r3, r4
 8008eb4:	f7f7 f9dc 	bl	8000270 <__aeabi_uldivmod>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	460c      	mov	r4, r1
 8008ebc:	60fb      	str	r3, [r7, #12]
 8008ebe:	e049      	b.n	8008f54 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ec0:	4b2f      	ldr	r3, [pc, #188]	; (8008f80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	099b      	lsrs	r3, r3, #6
 8008ec6:	f04f 0400 	mov.w	r4, #0
 8008eca:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008ece:	f04f 0200 	mov.w	r2, #0
 8008ed2:	ea03 0501 	and.w	r5, r3, r1
 8008ed6:	ea04 0602 	and.w	r6, r4, r2
 8008eda:	4629      	mov	r1, r5
 8008edc:	4632      	mov	r2, r6
 8008ede:	f04f 0300 	mov.w	r3, #0
 8008ee2:	f04f 0400 	mov.w	r4, #0
 8008ee6:	0154      	lsls	r4, r2, #5
 8008ee8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008eec:	014b      	lsls	r3, r1, #5
 8008eee:	4619      	mov	r1, r3
 8008ef0:	4622      	mov	r2, r4
 8008ef2:	1b49      	subs	r1, r1, r5
 8008ef4:	eb62 0206 	sbc.w	r2, r2, r6
 8008ef8:	f04f 0300 	mov.w	r3, #0
 8008efc:	f04f 0400 	mov.w	r4, #0
 8008f00:	0194      	lsls	r4, r2, #6
 8008f02:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008f06:	018b      	lsls	r3, r1, #6
 8008f08:	1a5b      	subs	r3, r3, r1
 8008f0a:	eb64 0402 	sbc.w	r4, r4, r2
 8008f0e:	f04f 0100 	mov.w	r1, #0
 8008f12:	f04f 0200 	mov.w	r2, #0
 8008f16:	00e2      	lsls	r2, r4, #3
 8008f18:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008f1c:	00d9      	lsls	r1, r3, #3
 8008f1e:	460b      	mov	r3, r1
 8008f20:	4614      	mov	r4, r2
 8008f22:	195b      	adds	r3, r3, r5
 8008f24:	eb44 0406 	adc.w	r4, r4, r6
 8008f28:	f04f 0100 	mov.w	r1, #0
 8008f2c:	f04f 0200 	mov.w	r2, #0
 8008f30:	02a2      	lsls	r2, r4, #10
 8008f32:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008f36:	0299      	lsls	r1, r3, #10
 8008f38:	460b      	mov	r3, r1
 8008f3a:	4614      	mov	r4, r2
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	4621      	mov	r1, r4
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f04f 0400 	mov.w	r4, #0
 8008f46:	461a      	mov	r2, r3
 8008f48:	4623      	mov	r3, r4
 8008f4a:	f7f7 f991 	bl	8000270 <__aeabi_uldivmod>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	460c      	mov	r4, r1
 8008f52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008f54:	4b0a      	ldr	r3, [pc, #40]	; (8008f80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	0c1b      	lsrs	r3, r3, #16
 8008f5a:	f003 0303 	and.w	r3, r3, #3
 8008f5e:	3301      	adds	r3, #1
 8008f60:	005b      	lsls	r3, r3, #1
 8008f62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f6c:	60bb      	str	r3, [r7, #8]
      break;
 8008f6e:	e002      	b.n	8008f76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008f70:	4b04      	ldr	r3, [pc, #16]	; (8008f84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008f72:	60bb      	str	r3, [r7, #8]
      break;
 8008f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f76:	68bb      	ldr	r3, [r7, #8]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3714      	adds	r7, #20
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f80:	40023800 	.word	0x40023800
 8008f84:	00f42400 	.word	0x00f42400
 8008f88:	007a1200 	.word	0x007a1200

08008f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f90:	4b03      	ldr	r3, [pc, #12]	; (8008fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f92:	681b      	ldr	r3, [r3, #0]
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	20000004 	.word	0x20000004

08008fa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d101      	bne.n	8008fb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e056      	b.n	8009064 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d106      	bne.n	8008fd6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f7fd fad5 	bl	8006580 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2202      	movs	r2, #2
 8008fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fec:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	685a      	ldr	r2, [r3, #4]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	431a      	orrs	r2, r3
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	431a      	orrs	r2, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	431a      	orrs	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	695b      	ldr	r3, [r3, #20]
 8009008:	431a      	orrs	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009012:	431a      	orrs	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	69db      	ldr	r3, [r3, #28]
 8009018:	431a      	orrs	r2, r3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a1b      	ldr	r3, [r3, #32]
 800901e:	ea42 0103 	orr.w	r1, r2, r3
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	430a      	orrs	r2, r1
 800902c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	699b      	ldr	r3, [r3, #24]
 8009032:	0c1b      	lsrs	r3, r3, #16
 8009034:	f003 0104 	and.w	r1, r3, #4
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	430a      	orrs	r2, r1
 8009042:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	69da      	ldr	r2, [r3, #28]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009052:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2201      	movs	r2, #1
 800905e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b088      	sub	sp, #32
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	603b      	str	r3, [r7, #0]
 8009078:	4613      	mov	r3, r2
 800907a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800907c:	2300      	movs	r3, #0
 800907e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009086:	2b01      	cmp	r3, #1
 8009088:	d101      	bne.n	800908e <HAL_SPI_Transmit+0x22>
 800908a:	2302      	movs	r3, #2
 800908c:	e11e      	b.n	80092cc <HAL_SPI_Transmit+0x260>
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2201      	movs	r2, #1
 8009092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009096:	f7fe f909 	bl	80072ac <HAL_GetTick>
 800909a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800909c:	88fb      	ldrh	r3, [r7, #6]
 800909e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d002      	beq.n	80090b2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80090ac:	2302      	movs	r3, #2
 80090ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090b0:	e103      	b.n	80092ba <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d002      	beq.n	80090be <HAL_SPI_Transmit+0x52>
 80090b8:	88fb      	ldrh	r3, [r7, #6]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d102      	bne.n	80090c4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80090c2:	e0fa      	b.n	80092ba <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2203      	movs	r2, #3
 80090c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2200      	movs	r2, #0
 80090d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	68ba      	ldr	r2, [r7, #8]
 80090d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	88fa      	ldrh	r2, [r7, #6]
 80090dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	88fa      	ldrh	r2, [r7, #6]
 80090e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	2200      	movs	r2, #0
 80090e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2200      	movs	r2, #0
 80090ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2200      	movs	r2, #0
 80090fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2200      	movs	r2, #0
 8009100:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800910a:	d107      	bne.n	800911c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800911a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009126:	2b40      	cmp	r3, #64	; 0x40
 8009128:	d007      	beq.n	800913a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009138:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009142:	d14b      	bne.n	80091dc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d002      	beq.n	8009152 <HAL_SPI_Transmit+0xe6>
 800914c:	8afb      	ldrh	r3, [r7, #22]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d13e      	bne.n	80091d0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009156:	881a      	ldrh	r2, [r3, #0]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009162:	1c9a      	adds	r2, r3, #2
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800916c:	b29b      	uxth	r3, r3
 800916e:	3b01      	subs	r3, #1
 8009170:	b29a      	uxth	r2, r3
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009176:	e02b      	b.n	80091d0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	f003 0302 	and.w	r3, r3, #2
 8009182:	2b02      	cmp	r3, #2
 8009184:	d112      	bne.n	80091ac <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918a:	881a      	ldrh	r2, [r3, #0]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009196:	1c9a      	adds	r2, r3, #2
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	3b01      	subs	r3, #1
 80091a4:	b29a      	uxth	r2, r3
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	86da      	strh	r2, [r3, #54]	; 0x36
 80091aa:	e011      	b.n	80091d0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091ac:	f7fe f87e 	bl	80072ac <HAL_GetTick>
 80091b0:	4602      	mov	r2, r0
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	683a      	ldr	r2, [r7, #0]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d803      	bhi.n	80091c4 <HAL_SPI_Transmit+0x158>
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c2:	d102      	bne.n	80091ca <HAL_SPI_Transmit+0x15e>
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d102      	bne.n	80091d0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80091ca:	2303      	movs	r3, #3
 80091cc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80091ce:	e074      	b.n	80092ba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1ce      	bne.n	8009178 <HAL_SPI_Transmit+0x10c>
 80091da:	e04c      	b.n	8009276 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d002      	beq.n	80091ea <HAL_SPI_Transmit+0x17e>
 80091e4:	8afb      	ldrh	r3, [r7, #22]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d140      	bne.n	800926c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	330c      	adds	r3, #12
 80091f4:	7812      	ldrb	r2, [r2, #0]
 80091f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091fc:	1c5a      	adds	r2, r3, #1
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009206:	b29b      	uxth	r3, r3
 8009208:	3b01      	subs	r3, #1
 800920a:	b29a      	uxth	r2, r3
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009210:	e02c      	b.n	800926c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	f003 0302 	and.w	r3, r3, #2
 800921c:	2b02      	cmp	r3, #2
 800921e:	d113      	bne.n	8009248 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	330c      	adds	r3, #12
 800922a:	7812      	ldrb	r2, [r2, #0]
 800922c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009232:	1c5a      	adds	r2, r3, #1
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800923c:	b29b      	uxth	r3, r3
 800923e:	3b01      	subs	r3, #1
 8009240:	b29a      	uxth	r2, r3
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	86da      	strh	r2, [r3, #54]	; 0x36
 8009246:	e011      	b.n	800926c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009248:	f7fe f830 	bl	80072ac <HAL_GetTick>
 800924c:	4602      	mov	r2, r0
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	1ad3      	subs	r3, r2, r3
 8009252:	683a      	ldr	r2, [r7, #0]
 8009254:	429a      	cmp	r2, r3
 8009256:	d803      	bhi.n	8009260 <HAL_SPI_Transmit+0x1f4>
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800925e:	d102      	bne.n	8009266 <HAL_SPI_Transmit+0x1fa>
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d102      	bne.n	800926c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8009266:	2303      	movs	r3, #3
 8009268:	77fb      	strb	r3, [r7, #31]
          goto error;
 800926a:	e026      	b.n	80092ba <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009270:	b29b      	uxth	r3, r3
 8009272:	2b00      	cmp	r3, #0
 8009274:	d1cd      	bne.n	8009212 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009276:	69ba      	ldr	r2, [r7, #24]
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f000 fa44 	bl	8009708 <SPI_EndRxTxTransaction>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d002      	beq.n	800928c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2220      	movs	r2, #32
 800928a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d10a      	bne.n	80092aa <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009294:	2300      	movs	r3, #0
 8009296:	613b      	str	r3, [r7, #16]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	613b      	str	r3, [r7, #16]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	613b      	str	r3, [r7, #16]
 80092a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d002      	beq.n	80092b8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	77fb      	strb	r3, [r7, #31]
 80092b6:	e000      	b.n	80092ba <HAL_SPI_Transmit+0x24e>
  }

error:
 80092b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2201      	movs	r2, #1
 80092be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80092ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3720      	adds	r7, #32
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b08c      	sub	sp, #48	; 0x30
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	607a      	str	r2, [r7, #4]
 80092e0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80092e2:	2301      	movs	r3, #1
 80092e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80092f2:	2b01      	cmp	r3, #1
 80092f4:	d101      	bne.n	80092fa <HAL_SPI_TransmitReceive+0x26>
 80092f6:	2302      	movs	r3, #2
 80092f8:	e18a      	b.n	8009610 <HAL_SPI_TransmitReceive+0x33c>
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009302:	f7fd ffd3 	bl	80072ac <HAL_GetTick>
 8009306:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800930e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009318:	887b      	ldrh	r3, [r7, #2]
 800931a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800931c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009320:	2b01      	cmp	r3, #1
 8009322:	d00f      	beq.n	8009344 <HAL_SPI_TransmitReceive+0x70>
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800932a:	d107      	bne.n	800933c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d103      	bne.n	800933c <HAL_SPI_TransmitReceive+0x68>
 8009334:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009338:	2b04      	cmp	r3, #4
 800933a:	d003      	beq.n	8009344 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800933c:	2302      	movs	r3, #2
 800933e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009342:	e15b      	b.n	80095fc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d005      	beq.n	8009356 <HAL_SPI_TransmitReceive+0x82>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d002      	beq.n	8009356 <HAL_SPI_TransmitReceive+0x82>
 8009350:	887b      	ldrh	r3, [r7, #2]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d103      	bne.n	800935e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800935c:	e14e      	b.n	80095fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009364:	b2db      	uxtb	r3, r3
 8009366:	2b04      	cmp	r3, #4
 8009368:	d003      	beq.n	8009372 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	2205      	movs	r2, #5
 800936e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2200      	movs	r2, #0
 8009376:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	687a      	ldr	r2, [r7, #4]
 800937c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	887a      	ldrh	r2, [r7, #2]
 8009382:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	887a      	ldrh	r2, [r7, #2]
 8009388:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	887a      	ldrh	r2, [r7, #2]
 8009394:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	887a      	ldrh	r2, [r7, #2]
 800939a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093b2:	2b40      	cmp	r3, #64	; 0x40
 80093b4:	d007      	beq.n	80093c6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093ce:	d178      	bne.n	80094c2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d002      	beq.n	80093de <HAL_SPI_TransmitReceive+0x10a>
 80093d8:	8b7b      	ldrh	r3, [r7, #26]
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d166      	bne.n	80094ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e2:	881a      	ldrh	r2, [r3, #0]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ee:	1c9a      	adds	r2, r3, #2
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	3b01      	subs	r3, #1
 80093fc:	b29a      	uxth	r2, r3
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009402:	e053      	b.n	80094ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	f003 0302 	and.w	r3, r3, #2
 800940e:	2b02      	cmp	r3, #2
 8009410:	d11b      	bne.n	800944a <HAL_SPI_TransmitReceive+0x176>
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009416:	b29b      	uxth	r3, r3
 8009418:	2b00      	cmp	r3, #0
 800941a:	d016      	beq.n	800944a <HAL_SPI_TransmitReceive+0x176>
 800941c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941e:	2b01      	cmp	r3, #1
 8009420:	d113      	bne.n	800944a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009426:	881a      	ldrh	r2, [r3, #0]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009432:	1c9a      	adds	r2, r3, #2
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800943c:	b29b      	uxth	r3, r3
 800943e:	3b01      	subs	r3, #1
 8009440:	b29a      	uxth	r2, r3
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009446:	2300      	movs	r3, #0
 8009448:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	f003 0301 	and.w	r3, r3, #1
 8009454:	2b01      	cmp	r3, #1
 8009456:	d119      	bne.n	800948c <HAL_SPI_TransmitReceive+0x1b8>
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800945c:	b29b      	uxth	r3, r3
 800945e:	2b00      	cmp	r3, #0
 8009460:	d014      	beq.n	800948c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	68da      	ldr	r2, [r3, #12]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946c:	b292      	uxth	r2, r2
 800946e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009474:	1c9a      	adds	r2, r3, #2
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800947e:	b29b      	uxth	r3, r3
 8009480:	3b01      	subs	r3, #1
 8009482:	b29a      	uxth	r2, r3
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009488:	2301      	movs	r3, #1
 800948a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800948c:	f7fd ff0e 	bl	80072ac <HAL_GetTick>
 8009490:	4602      	mov	r2, r0
 8009492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009494:	1ad3      	subs	r3, r2, r3
 8009496:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009498:	429a      	cmp	r2, r3
 800949a:	d807      	bhi.n	80094ac <HAL_SPI_TransmitReceive+0x1d8>
 800949c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a2:	d003      	beq.n	80094ac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80094a4:	2303      	movs	r3, #3
 80094a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80094aa:	e0a7      	b.n	80095fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1a6      	bne.n	8009404 <HAL_SPI_TransmitReceive+0x130>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d1a1      	bne.n	8009404 <HAL_SPI_TransmitReceive+0x130>
 80094c0:	e07c      	b.n	80095bc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d002      	beq.n	80094d0 <HAL_SPI_TransmitReceive+0x1fc>
 80094ca:	8b7b      	ldrh	r3, [r7, #26]
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d16b      	bne.n	80095a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	330c      	adds	r3, #12
 80094da:	7812      	ldrb	r2, [r2, #0]
 80094dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e2:	1c5a      	adds	r2, r3, #1
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	3b01      	subs	r3, #1
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094f6:	e057      	b.n	80095a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	f003 0302 	and.w	r3, r3, #2
 8009502:	2b02      	cmp	r3, #2
 8009504:	d11c      	bne.n	8009540 <HAL_SPI_TransmitReceive+0x26c>
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800950a:	b29b      	uxth	r3, r3
 800950c:	2b00      	cmp	r3, #0
 800950e:	d017      	beq.n	8009540 <HAL_SPI_TransmitReceive+0x26c>
 8009510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009512:	2b01      	cmp	r3, #1
 8009514:	d114      	bne.n	8009540 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	330c      	adds	r3, #12
 8009520:	7812      	ldrb	r2, [r2, #0]
 8009522:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009528:	1c5a      	adds	r2, r3, #1
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009532:	b29b      	uxth	r3, r3
 8009534:	3b01      	subs	r3, #1
 8009536:	b29a      	uxth	r2, r3
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800953c:	2300      	movs	r3, #0
 800953e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	f003 0301 	and.w	r3, r3, #1
 800954a:	2b01      	cmp	r3, #1
 800954c:	d119      	bne.n	8009582 <HAL_SPI_TransmitReceive+0x2ae>
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009552:	b29b      	uxth	r3, r3
 8009554:	2b00      	cmp	r3, #0
 8009556:	d014      	beq.n	8009582 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	68da      	ldr	r2, [r3, #12]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009562:	b2d2      	uxtb	r2, r2
 8009564:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800956a:	1c5a      	adds	r2, r3, #1
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009574:	b29b      	uxth	r3, r3
 8009576:	3b01      	subs	r3, #1
 8009578:	b29a      	uxth	r2, r3
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800957e:	2301      	movs	r3, #1
 8009580:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009582:	f7fd fe93 	bl	80072ac <HAL_GetTick>
 8009586:	4602      	mov	r2, r0
 8009588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958a:	1ad3      	subs	r3, r2, r3
 800958c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800958e:	429a      	cmp	r2, r3
 8009590:	d803      	bhi.n	800959a <HAL_SPI_TransmitReceive+0x2c6>
 8009592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009598:	d102      	bne.n	80095a0 <HAL_SPI_TransmitReceive+0x2cc>
 800959a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959c:	2b00      	cmp	r3, #0
 800959e:	d103      	bne.n	80095a8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80095a0:	2303      	movs	r3, #3
 80095a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80095a6:	e029      	b.n	80095fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1a2      	bne.n	80094f8 <HAL_SPI_TransmitReceive+0x224>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d19d      	bne.n	80094f8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f000 f8a1 	bl	8009708 <SPI_EndRxTxTransaction>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d006      	beq.n	80095da <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2220      	movs	r2, #32
 80095d6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80095d8:	e010      	b.n	80095fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d10b      	bne.n	80095fa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095e2:	2300      	movs	r3, #0
 80095e4:	617b      	str	r3, [r7, #20]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	617b      	str	r3, [r7, #20]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	617b      	str	r3, [r7, #20]
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	e000      	b.n	80095fc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80095fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2201      	movs	r2, #1
 8009600:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800960c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009610:	4618      	mov	r0, r3
 8009612:	3730      	adds	r7, #48	; 0x30
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009626:	b2db      	uxtb	r3, r3
}
 8009628:	4618      	mov	r0, r3
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	60b9      	str	r1, [r7, #8]
 800963e:	603b      	str	r3, [r7, #0]
 8009640:	4613      	mov	r3, r2
 8009642:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009644:	e04c      	b.n	80096e0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800964c:	d048      	beq.n	80096e0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800964e:	f7fd fe2d 	bl	80072ac <HAL_GetTick>
 8009652:	4602      	mov	r2, r0
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	1ad3      	subs	r3, r2, r3
 8009658:	683a      	ldr	r2, [r7, #0]
 800965a:	429a      	cmp	r2, r3
 800965c:	d902      	bls.n	8009664 <SPI_WaitFlagStateUntilTimeout+0x30>
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d13d      	bne.n	80096e0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	685a      	ldr	r2, [r3, #4]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009672:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800967c:	d111      	bne.n	80096a2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009686:	d004      	beq.n	8009692 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009690:	d107      	bne.n	80096a2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096aa:	d10f      	bne.n	80096cc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80096ba:	601a      	str	r2, [r3, #0]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	681a      	ldr	r2, [r3, #0]
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80096dc:	2303      	movs	r3, #3
 80096de:	e00f      	b.n	8009700 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	689a      	ldr	r2, [r3, #8]
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	4013      	ands	r3, r2
 80096ea:	68ba      	ldr	r2, [r7, #8]
 80096ec:	429a      	cmp	r2, r3
 80096ee:	bf0c      	ite	eq
 80096f0:	2301      	moveq	r3, #1
 80096f2:	2300      	movne	r3, #0
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	461a      	mov	r2, r3
 80096f8:	79fb      	ldrb	r3, [r7, #7]
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d1a3      	bne.n	8009646 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80096fe:	2300      	movs	r3, #0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3710      	adds	r7, #16
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b088      	sub	sp, #32
 800970c:	af02      	add	r7, sp, #8
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009714:	4b1b      	ldr	r3, [pc, #108]	; (8009784 <SPI_EndRxTxTransaction+0x7c>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a1b      	ldr	r2, [pc, #108]	; (8009788 <SPI_EndRxTxTransaction+0x80>)
 800971a:	fba2 2303 	umull	r2, r3, r2, r3
 800971e:	0d5b      	lsrs	r3, r3, #21
 8009720:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009724:	fb02 f303 	mul.w	r3, r2, r3
 8009728:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009732:	d112      	bne.n	800975a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	2200      	movs	r2, #0
 800973c:	2180      	movs	r1, #128	; 0x80
 800973e:	68f8      	ldr	r0, [r7, #12]
 8009740:	f7ff ff78 	bl	8009634 <SPI_WaitFlagStateUntilTimeout>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d016      	beq.n	8009778 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800974e:	f043 0220 	orr.w	r2, r3, #32
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009756:	2303      	movs	r3, #3
 8009758:	e00f      	b.n	800977a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00a      	beq.n	8009776 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	3b01      	subs	r3, #1
 8009764:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009770:	2b80      	cmp	r3, #128	; 0x80
 8009772:	d0f2      	beq.n	800975a <SPI_EndRxTxTransaction+0x52>
 8009774:	e000      	b.n	8009778 <SPI_EndRxTxTransaction+0x70>
        break;
 8009776:	bf00      	nop
  }

  return HAL_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	3718      	adds	r7, #24
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	20000004 	.word	0x20000004
 8009788:	165e9f81 	.word	0x165e9f81

0800978c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8009792:	f000 fb66 	bl	8009e62 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8009796:	4b17      	ldr	r3, [pc, #92]	; (80097f4 <MX_LWIP_Init+0x68>)
 8009798:	2200      	movs	r2, #0
 800979a:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800979c:	4b16      	ldr	r3, [pc, #88]	; (80097f8 <MX_LWIP_Init+0x6c>)
 800979e:	2200      	movs	r2, #0
 80097a0:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80097a2:	4b16      	ldr	r3, [pc, #88]	; (80097fc <MX_LWIP_Init+0x70>)
 80097a4:	2200      	movs	r2, #0
 80097a6:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80097a8:	4b15      	ldr	r3, [pc, #84]	; (8009800 <MX_LWIP_Init+0x74>)
 80097aa:	9302      	str	r3, [sp, #8]
 80097ac:	4b15      	ldr	r3, [pc, #84]	; (8009804 <MX_LWIP_Init+0x78>)
 80097ae:	9301      	str	r3, [sp, #4]
 80097b0:	2300      	movs	r3, #0
 80097b2:	9300      	str	r3, [sp, #0]
 80097b4:	4b11      	ldr	r3, [pc, #68]	; (80097fc <MX_LWIP_Init+0x70>)
 80097b6:	4a10      	ldr	r2, [pc, #64]	; (80097f8 <MX_LWIP_Init+0x6c>)
 80097b8:	490e      	ldr	r1, [pc, #56]	; (80097f4 <MX_LWIP_Init+0x68>)
 80097ba:	4813      	ldr	r0, [pc, #76]	; (8009808 <MX_LWIP_Init+0x7c>)
 80097bc:	f000 fff6 	bl	800a7ac <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80097c0:	4811      	ldr	r0, [pc, #68]	; (8009808 <MX_LWIP_Init+0x7c>)
 80097c2:	f001 f9a9 	bl	800ab18 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80097c6:	4b10      	ldr	r3, [pc, #64]	; (8009808 <MX_LWIP_Init+0x7c>)
 80097c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80097cc:	089b      	lsrs	r3, r3, #2
 80097ce:	f003 0301 	and.w	r3, r3, #1
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d003      	beq.n	80097e0 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80097d8:	480b      	ldr	r0, [pc, #44]	; (8009808 <MX_LWIP_Init+0x7c>)
 80097da:	f001 f9ad 	bl	800ab38 <netif_set_up>
 80097de:	e002      	b.n	80097e6 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80097e0:	4809      	ldr	r0, [pc, #36]	; (8009808 <MX_LWIP_Init+0x7c>)
 80097e2:	f001 fa15 	bl	800ac10 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80097e6:	4808      	ldr	r0, [pc, #32]	; (8009808 <MX_LWIP_Init+0x7c>)
 80097e8:	f008 fb82 	bl	8011ef0 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80097ec:	bf00      	nop
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	2000109c 	.word	0x2000109c
 80097f8:	200010a0 	.word	0x200010a0
 80097fc:	200010a4 	.word	0x200010a4
 8009800:	080158ad 	.word	0x080158ad
 8009804:	08009d9d 	.word	0x08009d9d
 8009808:	200005a8 	.word	0x200005a8

0800980c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b08e      	sub	sp, #56	; 0x38
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009818:	2200      	movs	r2, #0
 800981a:	601a      	str	r2, [r3, #0]
 800981c:	605a      	str	r2, [r3, #4]
 800981e:	609a      	str	r2, [r3, #8]
 8009820:	60da      	str	r2, [r3, #12]
 8009822:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a46      	ldr	r2, [pc, #280]	; (8009944 <HAL_ETH_MspInit+0x138>)
 800982a:	4293      	cmp	r3, r2
 800982c:	f040 8085 	bne.w	800993a <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009830:	2300      	movs	r3, #0
 8009832:	623b      	str	r3, [r7, #32]
 8009834:	4b44      	ldr	r3, [pc, #272]	; (8009948 <HAL_ETH_MspInit+0x13c>)
 8009836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009838:	4a43      	ldr	r2, [pc, #268]	; (8009948 <HAL_ETH_MspInit+0x13c>)
 800983a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800983e:	6313      	str	r3, [r2, #48]	; 0x30
 8009840:	4b41      	ldr	r3, [pc, #260]	; (8009948 <HAL_ETH_MspInit+0x13c>)
 8009842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009848:	623b      	str	r3, [r7, #32]
 800984a:	6a3b      	ldr	r3, [r7, #32]
 800984c:	2300      	movs	r3, #0
 800984e:	61fb      	str	r3, [r7, #28]
 8009850:	4b3d      	ldr	r3, [pc, #244]	; (8009948 <HAL_ETH_MspInit+0x13c>)
 8009852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009854:	4a3c      	ldr	r2, [pc, #240]	; (8009948 <HAL_ETH_MspInit+0x13c>)
 8009856:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800985a:	6313      	str	r3, [r2, #48]	; 0x30
 800985c:	4b3a      	ldr	r3, [pc, #232]	; (8009948 <HAL_ETH_MspInit+0x13c>)
 800985e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009860:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009864:	61fb      	str	r3, [r7, #28]
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	2300      	movs	r3, #0
 800986a:	61bb      	str	r3, [r7, #24]
 800986c:	4b36      	ldr	r3, [pc, #216]	; (8009948 <HAL_ETH_MspInit+0x13c>)
 800986e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009870:	4a35      	ldr	r2, [pc, #212]	; (8009948 <HAL_ETH_MspInit+0x13c>)
 8009872:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009876:	6313      	str	r3, [r2, #48]	; 0x30
 8009878:	4b33      	ldr	r3, [pc, #204]	; (8009948 <HAL_ETH_MspInit+0x13c>)
 800987a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800987c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009880:	61bb      	str	r3, [r7, #24]
 8009882:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009884:	2300      	movs	r3, #0
 8009886:	617b      	str	r3, [r7, #20]
 8009888:	4b2f      	ldr	r3, [pc, #188]	; (8009948 <HAL_ETH_MspInit+0x13c>)
 800988a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800988c:	4a2e      	ldr	r2, [pc, #184]	; (8009948 <HAL_ETH_MspInit+0x13c>)
 800988e:	f043 0304 	orr.w	r3, r3, #4
 8009892:	6313      	str	r3, [r2, #48]	; 0x30
 8009894:	4b2c      	ldr	r3, [pc, #176]	; (8009948 <HAL_ETH_MspInit+0x13c>)
 8009896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009898:	f003 0304 	and.w	r3, r3, #4
 800989c:	617b      	str	r3, [r7, #20]
 800989e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098a0:	2300      	movs	r3, #0
 80098a2:	613b      	str	r3, [r7, #16]
 80098a4:	4b28      	ldr	r3, [pc, #160]	; (8009948 <HAL_ETH_MspInit+0x13c>)
 80098a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a8:	4a27      	ldr	r2, [pc, #156]	; (8009948 <HAL_ETH_MspInit+0x13c>)
 80098aa:	f043 0301 	orr.w	r3, r3, #1
 80098ae:	6313      	str	r3, [r2, #48]	; 0x30
 80098b0:	4b25      	ldr	r3, [pc, #148]	; (8009948 <HAL_ETH_MspInit+0x13c>)
 80098b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098b4:	f003 0301 	and.w	r3, r3, #1
 80098b8:	613b      	str	r3, [r7, #16]
 80098ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80098bc:	2300      	movs	r3, #0
 80098be:	60fb      	str	r3, [r7, #12]
 80098c0:	4b21      	ldr	r3, [pc, #132]	; (8009948 <HAL_ETH_MspInit+0x13c>)
 80098c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c4:	4a20      	ldr	r2, [pc, #128]	; (8009948 <HAL_ETH_MspInit+0x13c>)
 80098c6:	f043 0302 	orr.w	r3, r3, #2
 80098ca:	6313      	str	r3, [r2, #48]	; 0x30
 80098cc:	4b1e      	ldr	r3, [pc, #120]	; (8009948 <HAL_ETH_MspInit+0x13c>)
 80098ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d0:	f003 0302 	and.w	r3, r3, #2
 80098d4:	60fb      	str	r3, [r7, #12]
 80098d6:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80098d8:	2332      	movs	r3, #50	; 0x32
 80098da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098dc:	2302      	movs	r3, #2
 80098de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098e0:	2300      	movs	r3, #0
 80098e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098e4:	2303      	movs	r3, #3
 80098e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80098e8:	230b      	movs	r3, #11
 80098ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80098ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098f0:	4619      	mov	r1, r3
 80098f2:	4816      	ldr	r0, [pc, #88]	; (800994c <HAL_ETH_MspInit+0x140>)
 80098f4:	f7fe fd82 	bl	80083fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80098f8:	2386      	movs	r3, #134	; 0x86
 80098fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098fc:	2302      	movs	r3, #2
 80098fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009900:	2300      	movs	r3, #0
 8009902:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009904:	2303      	movs	r3, #3
 8009906:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009908:	230b      	movs	r3, #11
 800990a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800990c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009910:	4619      	mov	r1, r3
 8009912:	480f      	ldr	r0, [pc, #60]	; (8009950 <HAL_ETH_MspInit+0x144>)
 8009914:	f7fe fd72 	bl	80083fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8009918:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800991c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800991e:	2302      	movs	r3, #2
 8009920:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009922:	2300      	movs	r3, #0
 8009924:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009926:	2303      	movs	r3, #3
 8009928:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800992a:	230b      	movs	r3, #11
 800992c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800992e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009932:	4619      	mov	r1, r3
 8009934:	4807      	ldr	r0, [pc, #28]	; (8009954 <HAL_ETH_MspInit+0x148>)
 8009936:	f7fe fd61 	bl	80083fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800993a:	bf00      	nop
 800993c:	3738      	adds	r7, #56	; 0x38
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	40028000 	.word	0x40028000
 8009948:	40023800 	.word	0x40023800
 800994c:	40020800 	.word	0x40020800
 8009950:	40020000 	.word	0x40020000
 8009954:	40020400 	.word	0x40020400

08009958 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8009958:	b580      	push	{r7, lr}
 800995a:	b086      	sub	sp, #24
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8009960:	2300      	movs	r3, #0
 8009962:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009964:	4b4e      	ldr	r3, [pc, #312]	; (8009aa0 <low_level_init+0x148>)
 8009966:	4a4f      	ldr	r2, [pc, #316]	; (8009aa4 <low_level_init+0x14c>)
 8009968:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800996a:	4b4d      	ldr	r3, [pc, #308]	; (8009aa0 <low_level_init+0x148>)
 800996c:	2201      	movs	r2, #1
 800996e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 8009970:	4b4b      	ldr	r3, [pc, #300]	; (8009aa0 <low_level_init+0x148>)
 8009972:	2201      	movs	r2, #1
 8009974:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8009976:	2300      	movs	r3, #0
 8009978:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800997a:	2380      	movs	r3, #128	; 0x80
 800997c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800997e:	23e1      	movs	r3, #225	; 0xe1
 8009980:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8009982:	2300      	movs	r3, #0
 8009984:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8009986:	2300      	movs	r3, #0
 8009988:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800998a:	2300      	movs	r3, #0
 800998c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800998e:	4a44      	ldr	r2, [pc, #272]	; (8009aa0 <low_level_init+0x148>)
 8009990:	f107 0308 	add.w	r3, r7, #8
 8009994:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8009996:	4b42      	ldr	r3, [pc, #264]	; (8009aa0 <low_level_init+0x148>)
 8009998:	2200      	movs	r2, #0
 800999a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800999c:	4b40      	ldr	r3, [pc, #256]	; (8009aa0 <low_level_init+0x148>)
 800999e:	2200      	movs	r2, #0
 80099a0:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80099a2:	4b3f      	ldr	r3, [pc, #252]	; (8009aa0 <low_level_init+0x148>)
 80099a4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80099a8:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80099aa:	483d      	ldr	r0, [pc, #244]	; (8009aa0 <low_level_init+0x148>)
 80099ac:	f7fd fd92 	bl	80074d4 <HAL_ETH_Init>
 80099b0:	4603      	mov	r3, r0
 80099b2:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 80099b4:	7dfb      	ldrb	r3, [r7, #23]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d108      	bne.n	80099cc <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80099c0:	f043 0304 	orr.w	r3, r3, #4
 80099c4:	b2da      	uxtb	r2, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80099cc:	2304      	movs	r3, #4
 80099ce:	4a36      	ldr	r2, [pc, #216]	; (8009aa8 <low_level_init+0x150>)
 80099d0:	4936      	ldr	r1, [pc, #216]	; (8009aac <low_level_init+0x154>)
 80099d2:	4833      	ldr	r0, [pc, #204]	; (8009aa0 <low_level_init+0x148>)
 80099d4:	f7fd ff1c 	bl	8007810 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80099d8:	2304      	movs	r3, #4
 80099da:	4a35      	ldr	r2, [pc, #212]	; (8009ab0 <low_level_init+0x158>)
 80099dc:	4935      	ldr	r1, [pc, #212]	; (8009ab4 <low_level_init+0x15c>)
 80099de:	4830      	ldr	r0, [pc, #192]	; (8009aa0 <low_level_init+0x148>)
 80099e0:	f7fd ff7f 	bl	80078e2 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2206      	movs	r2, #6
 80099e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80099ec:	4b2c      	ldr	r3, [pc, #176]	; (8009aa0 <low_level_init+0x148>)
 80099ee:	695b      	ldr	r3, [r3, #20]
 80099f0:	781a      	ldrb	r2, [r3, #0]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80099f8:	4b29      	ldr	r3, [pc, #164]	; (8009aa0 <low_level_init+0x148>)
 80099fa:	695b      	ldr	r3, [r3, #20]
 80099fc:	785a      	ldrb	r2, [r3, #1]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009a04:	4b26      	ldr	r3, [pc, #152]	; (8009aa0 <low_level_init+0x148>)
 8009a06:	695b      	ldr	r3, [r3, #20]
 8009a08:	789a      	ldrb	r2, [r3, #2]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009a10:	4b23      	ldr	r3, [pc, #140]	; (8009aa0 <low_level_init+0x148>)
 8009a12:	695b      	ldr	r3, [r3, #20]
 8009a14:	78da      	ldrb	r2, [r3, #3]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009a1c:	4b20      	ldr	r3, [pc, #128]	; (8009aa0 <low_level_init+0x148>)
 8009a1e:	695b      	ldr	r3, [r3, #20]
 8009a20:	791a      	ldrb	r2, [r3, #4]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009a28:	4b1d      	ldr	r3, [pc, #116]	; (8009aa0 <low_level_init+0x148>)
 8009a2a:	695b      	ldr	r3, [r3, #20]
 8009a2c:	795a      	ldrb	r2, [r3, #5]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009a3a:	849a      	strh	r2, [r3, #36]	; 0x24
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009a42:	f043 030a 	orr.w	r3, r3, #10
 8009a46:	b2da      	uxtb	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8009a4e:	4814      	ldr	r0, [pc, #80]	; (8009aa0 <low_level_init+0x148>)
 8009a50:	f7fe f9f0 	bl	8007e34 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  
  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 8009a54:	f107 0310 	add.w	r3, r7, #16
 8009a58:	461a      	mov	r2, r3
 8009a5a:	2111      	movs	r1, #17
 8009a5c:	4810      	ldr	r0, [pc, #64]	; (8009aa0 <low_level_init+0x148>)
 8009a5e:	f7fe f91b 	bl	8007c98 <HAL_ETH_ReadPHYRegister>
  
  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	f043 0303 	orr.w	r3, r3, #3
 8009a68:	613b      	str	r3, [r7, #16]

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	2111      	movs	r1, #17
 8009a70:	480b      	ldr	r0, [pc, #44]	; (8009aa0 <low_level_init+0x148>)
 8009a72:	f7fe f979 	bl	8007d68 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 8009a76:	f107 0310 	add.w	r3, r7, #16
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	2112      	movs	r1, #18
 8009a7e:	4808      	ldr	r0, [pc, #32]	; (8009aa0 <low_level_init+0x148>)
 8009a80:	f7fe f90a 	bl	8007c98 <HAL_ETH_ReadPHYRegister>
  
  regvalue |= PHY_MISR_LINK_INT_EN;
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	f043 0320 	orr.w	r3, r3, #32
 8009a8a:	613b      	str	r3, [r7, #16]
    
  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	461a      	mov	r2, r3
 8009a90:	2112      	movs	r1, #18
 8009a92:	4803      	ldr	r0, [pc, #12]	; (8009aa0 <low_level_init+0x148>)
 8009a94:	f7fe f968 	bl	8007d68 <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8009a98:	bf00      	nop
 8009a9a:	3718      	adds	r7, #24
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	20002978 	.word	0x20002978
 8009aa4:	40028000 	.word	0x40028000
 8009aa8:	200029c0 	.word	0x200029c0
 8009aac:	200010a8 	.word	0x200010a8
 8009ab0:	20001128 	.word	0x20001128
 8009ab4:	200028f8 	.word	0x200028f8

08009ab8 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b08a      	sub	sp, #40	; 0x28
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8009ac2:	4b4b      	ldr	r3, [pc, #300]	; (8009bf0 <low_level_output+0x138>)
 8009ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8009aca:	2300      	movs	r3, #0
 8009acc:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8009ada:	4b45      	ldr	r3, [pc, #276]	; (8009bf0 <low_level_output+0x138>)
 8009adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ade:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	623b      	str	r3, [r7, #32]
 8009ae8:	e05a      	b.n	8009ba0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	da03      	bge.n	8009afa <low_level_output+0x42>
      {
        errval = ERR_USE;
 8009af2:	23f8      	movs	r3, #248	; 0xf8
 8009af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8009af8:	e05c      	b.n	8009bb4 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8009afa:	6a3b      	ldr	r3, [r7, #32]
 8009afc:	895b      	ldrh	r3, [r3, #10]
 8009afe:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8009b00:	2300      	movs	r3, #0
 8009b02:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8009b04:	e02f      	b.n	8009b66 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8009b06:	69fa      	ldr	r2, [r7, #28]
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	18d0      	adds	r0, r2, r3
 8009b0c:	6a3b      	ldr	r3, [r7, #32]
 8009b0e:	685a      	ldr	r2, [r3, #4]
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	18d1      	adds	r1, r2, r3
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8009b1a:	3304      	adds	r3, #4
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	f00b ffde 	bl	8015ade <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	68db      	ldr	r3, [r3, #12]
 8009b26:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	da03      	bge.n	8009b38 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8009b30:	23f8      	movs	r3, #248	; 0xf8
 8009b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8009b36:	e03d      	b.n	8009bb4 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	4413      	add	r3, r2
 8009b44:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8009b48:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8009b4a:	68ba      	ldr	r2, [r7, #8]
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	1ad3      	subs	r3, r2, r3
 8009b50:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009b54:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8009b56:	697a      	ldr	r2, [r7, #20]
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	1ad3      	subs	r3, r2, r3
 8009b5c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009b60:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8009b62:	2300      	movs	r3, #0
 8009b64:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8009b66:	68fa      	ldr	r2, [r7, #12]
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d8c8      	bhi.n	8009b06 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8009b74:	69fa      	ldr	r2, [r7, #28]
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	18d0      	adds	r0, r2, r3
 8009b7a:	6a3b      	ldr	r3, [r7, #32]
 8009b7c:	685a      	ldr	r2, [r3, #4]
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	4413      	add	r3, r2
 8009b82:	68fa      	ldr	r2, [r7, #12]
 8009b84:	4619      	mov	r1, r3
 8009b86:	f00b ffaa 	bl	8015ade <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8009b8a:	693a      	ldr	r2, [r7, #16]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	4413      	add	r3, r2
 8009b90:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8009b92:	697a      	ldr	r2, [r7, #20]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	4413      	add	r3, r2
 8009b98:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8009b9a:	6a3b      	ldr	r3, [r7, #32]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	623b      	str	r3, [r7, #32]
 8009ba0:	6a3b      	ldr	r3, [r7, #32]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d1a1      	bne.n	8009aea <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8009ba6:	6979      	ldr	r1, [r7, #20]
 8009ba8:	4811      	ldr	r0, [pc, #68]	; (8009bf0 <low_level_output+0x138>)
 8009baa:	f7fd ff07 	bl	80079bc <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8009bb4:	4b0e      	ldr	r3, [pc, #56]	; (8009bf0 <low_level_output+0x138>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bbc:	3314      	adds	r3, #20
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f003 0320 	and.w	r3, r3, #32
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d00d      	beq.n	8009be4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8009bc8:	4b09      	ldr	r3, [pc, #36]	; (8009bf0 <low_level_output+0x138>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bd0:	3314      	adds	r3, #20
 8009bd2:	2220      	movs	r2, #32
 8009bd4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8009bd6:	4b06      	ldr	r3, [pc, #24]	; (8009bf0 <low_level_output+0x138>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bde:	3304      	adds	r3, #4
 8009be0:	2200      	movs	r2, #0
 8009be2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8009be4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3728      	adds	r7, #40	; 0x28
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	20002978 	.word	0x20002978

08009bf4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b08c      	sub	sp, #48	; 0x30
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8009c00:	2300      	movs	r3, #0
 8009c02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8009c04:	2300      	movs	r3, #0
 8009c06:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8009c10:	2300      	movs	r3, #0
 8009c12:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8009c14:	2300      	movs	r3, #0
 8009c16:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8009c18:	484f      	ldr	r0, [pc, #316]	; (8009d58 <low_level_input+0x164>)
 8009c1a:	f7fd ffb9 	bl	8007b90 <HAL_ETH_GetReceivedFrame>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d001      	beq.n	8009c28 <low_level_input+0x34>
  
    return NULL;
 8009c24:	2300      	movs	r3, #0
 8009c26:	e092      	b.n	8009d4e <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8009c28:	4b4b      	ldr	r3, [pc, #300]	; (8009d58 <low_level_input+0x164>)
 8009c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c2c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8009c2e:	4b4a      	ldr	r3, [pc, #296]	; (8009d58 <low_level_input+0x164>)
 8009c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c32:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8009c34:	89fb      	ldrh	r3, [r7, #14]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d007      	beq.n	8009c4a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8009c3a:	89fb      	ldrh	r3, [r7, #14]
 8009c3c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8009c40:	4619      	mov	r1, r3
 8009c42:	2000      	movs	r0, #0
 8009c44:	f001 f8a0 	bl	800ad88 <pbuf_alloc>
 8009c48:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8009c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d04b      	beq.n	8009ce8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8009c50:	4b41      	ldr	r3, [pc, #260]	; (8009d58 <low_level_input+0x164>)
 8009c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c54:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8009c56:	2300      	movs	r3, #0
 8009c58:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8009c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c5e:	e040      	b.n	8009ce2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8009c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c62:	895b      	ldrh	r3, [r3, #10]
 8009c64:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8009c66:	2300      	movs	r3, #0
 8009c68:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8009c6a:	e021      	b.n	8009cb0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8009c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6e:	685a      	ldr	r2, [r3, #4]
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	18d0      	adds	r0, r2, r3
 8009c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	18d1      	adds	r1, r2, r3
 8009c7a:	69fb      	ldr	r3, [r7, #28]
 8009c7c:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8009c80:	3304      	adds	r3, #4
 8009c82:	461a      	mov	r2, r3
 8009c84:	f00b ff2b 	bl	8015ade <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009c88:	6a3b      	ldr	r3, [r7, #32]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8009c8e:	6a3b      	ldr	r3, [r7, #32]
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8009c94:	69fa      	ldr	r2, [r7, #28]
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	4413      	add	r3, r2
 8009c9a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8009c9e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8009ca0:	69ba      	ldr	r2, [r7, #24]
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	1ad3      	subs	r3, r2, r3
 8009ca6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009caa:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8009cac:	2300      	movs	r3, #0
 8009cae:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8009cb0:	697a      	ldr	r2, [r7, #20]
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d8d6      	bhi.n	8009c6c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8009cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc0:	685a      	ldr	r2, [r3, #4]
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	18d0      	adds	r0, r2, r3
 8009cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cc8:	69fb      	ldr	r3, [r7, #28]
 8009cca:	4413      	add	r3, r2
 8009ccc:	697a      	ldr	r2, [r7, #20]
 8009cce:	4619      	mov	r1, r3
 8009cd0:	f00b ff05 	bl	8015ade <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8009cd4:	69fa      	ldr	r2, [r7, #28]
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	4413      	add	r3, r2
 8009cda:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8009cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d1bb      	bne.n	8009c60 <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8009ce8:	4b1b      	ldr	r3, [pc, #108]	; (8009d58 <low_level_input+0x164>)
 8009cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cec:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8009cee:	2300      	movs	r3, #0
 8009cf0:	613b      	str	r3, [r7, #16]
 8009cf2:	e00b      	b.n	8009d0c <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8009cf4:	6a3b      	ldr	r3, [r7, #32]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009cfc:	6a3b      	ldr	r3, [r7, #32]
 8009cfe:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009d00:	6a3b      	ldr	r3, [r7, #32]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	613b      	str	r3, [r7, #16]
 8009d0c:	4b12      	ldr	r3, [pc, #72]	; (8009d58 <low_level_input+0x164>)
 8009d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d10:	693a      	ldr	r2, [r7, #16]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d3ee      	bcc.n	8009cf4 <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8009d16:	4b10      	ldr	r3, [pc, #64]	; (8009d58 <low_level_input+0x164>)
 8009d18:	2200      	movs	r2, #0
 8009d1a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8009d1c:	4b0e      	ldr	r3, [pc, #56]	; (8009d58 <low_level_input+0x164>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d24:	3314      	adds	r3, #20
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d00d      	beq.n	8009d4c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8009d30:	4b09      	ldr	r3, [pc, #36]	; (8009d58 <low_level_input+0x164>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d38:	3314      	adds	r3, #20
 8009d3a:	2280      	movs	r2, #128	; 0x80
 8009d3c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8009d3e:	4b06      	ldr	r3, [pc, #24]	; (8009d58 <low_level_input+0x164>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d46:	3308      	adds	r3, #8
 8009d48:	2200      	movs	r2, #0
 8009d4a:	601a      	str	r2, [r3, #0]
  }
  return p;
 8009d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3730      	adds	r7, #48	; 0x30
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	20002978 	.word	0x20002978

08009d5c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f7ff ff45 	bl	8009bf4 <low_level_input>
 8009d6a:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d010      	beq.n	8009d94 <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	691b      	ldr	r3, [r3, #16]
 8009d76:	6879      	ldr	r1, [r7, #4]
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	4798      	blx	r3
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 8009d80:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d006      	beq.n	8009d96 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8009d88:	68f8      	ldr	r0, [r7, #12]
 8009d8a:	f001 fadd 	bl	800b348 <pbuf_free>
    p = NULL;    
 8009d8e:	2300      	movs	r3, #0
 8009d90:	60fb      	str	r3, [r7, #12]
 8009d92:	e000      	b.n	8009d96 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8009d94:	bf00      	nop
  }
}
 8009d96:	3710      	adds	r7, #16
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d106      	bne.n	8009db8 <ethernetif_init+0x1c>
 8009daa:	4b0e      	ldr	r3, [pc, #56]	; (8009de4 <ethernetif_init+0x48>)
 8009dac:	f240 220d 	movw	r2, #525	; 0x20d
 8009db0:	490d      	ldr	r1, [pc, #52]	; (8009de8 <ethernetif_init+0x4c>)
 8009db2:	480e      	ldr	r0, [pc, #56]	; (8009dec <ethernetif_init+0x50>)
 8009db4:	f00b ff4e 	bl	8015c54 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2273      	movs	r2, #115	; 0x73
 8009dbc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2274      	movs	r2, #116	; 0x74
 8009dc4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a09      	ldr	r2, [pc, #36]	; (8009df0 <ethernetif_init+0x54>)
 8009dcc:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4a08      	ldr	r2, [pc, #32]	; (8009df4 <ethernetif_init+0x58>)
 8009dd2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f7ff fdbf 	bl	8009958 <low_level_init>

  return ERR_OK;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3708      	adds	r7, #8
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	08016a04 	.word	0x08016a04
 8009de8:	08016a20 	.word	0x08016a20
 8009dec:	08016a30 	.word	0x08016a30
 8009df0:	08013d41 	.word	0x08013d41
 8009df4:	08009ab9 	.word	0x08009ab9

08009df8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009dfc:	f7fd fa56 	bl	80072ac <HAL_GetTick>
 8009e00:	4603      	mov	r3, r0
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009e06:	b480      	push	{r7}
 8009e08:	b083      	sub	sp, #12
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009e10:	88fb      	ldrh	r3, [r7, #6]
 8009e12:	021b      	lsls	r3, r3, #8
 8009e14:	b21a      	sxth	r2, r3
 8009e16:	88fb      	ldrh	r3, [r7, #6]
 8009e18:	0a1b      	lsrs	r3, r3, #8
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	b21b      	sxth	r3, r3
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	b21b      	sxth	r3, r3
 8009e22:	b29b      	uxth	r3, r3
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	370c      	adds	r7, #12
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	061a      	lsls	r2, r3, #24
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	021b      	lsls	r3, r3, #8
 8009e40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e44:	431a      	orrs	r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	0a1b      	lsrs	r3, r3, #8
 8009e4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009e4e:	431a      	orrs	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	0e1b      	lsrs	r3, r3, #24
 8009e54:	4313      	orrs	r3, r2
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	370c      	adds	r7, #12
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr

08009e62 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b082      	sub	sp, #8
 8009e66:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8009e6c:	f000 f8d4 	bl	800a018 <mem_init>
  memp_init();
 8009e70:	f000 fbda 	bl	800a628 <memp_init>
  pbuf_init();
  netif_init();
 8009e74:	f000 fc92 	bl	800a79c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009e78:	f006 ffa6 	bl	8010dc8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009e7c:	f001 fd02 	bl	800b884 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009e80:	f006 ff1a 	bl	8010cb8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009e84:	bf00      	nop
 8009e86:	3708      	adds	r7, #8
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	4603      	mov	r3, r0
 8009e94:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009e96:	4b05      	ldr	r3, [pc, #20]	; (8009eac <ptr_to_mem+0x20>)
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	88fb      	ldrh	r3, [r7, #6]
 8009e9c:	4413      	add	r3, r2
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	370c      	adds	r7, #12
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop
 8009eac:	20000420 	.word	0x20000420

08009eb0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	4a05      	ldr	r2, [pc, #20]	; (8009ed0 <mem_to_ptr+0x20>)
 8009ebc:	6812      	ldr	r2, [r2, #0]
 8009ebe:	1a9b      	subs	r3, r3, r2
 8009ec0:	b29b      	uxth	r3, r3
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	370c      	adds	r7, #12
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ecc:	4770      	bx	lr
 8009ece:	bf00      	nop
 8009ed0:	20000420 	.word	0x20000420

08009ed4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009ed4:	b590      	push	{r4, r7, lr}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009edc:	4b45      	ldr	r3, [pc, #276]	; (8009ff4 <plug_holes+0x120>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d206      	bcs.n	8009ef4 <plug_holes+0x20>
 8009ee6:	4b44      	ldr	r3, [pc, #272]	; (8009ff8 <plug_holes+0x124>)
 8009ee8:	f240 12df 	movw	r2, #479	; 0x1df
 8009eec:	4943      	ldr	r1, [pc, #268]	; (8009ffc <plug_holes+0x128>)
 8009eee:	4844      	ldr	r0, [pc, #272]	; (800a000 <plug_holes+0x12c>)
 8009ef0:	f00b feb0 	bl	8015c54 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009ef4:	4b43      	ldr	r3, [pc, #268]	; (800a004 <plug_holes+0x130>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d306      	bcc.n	8009f0c <plug_holes+0x38>
 8009efe:	4b3e      	ldr	r3, [pc, #248]	; (8009ff8 <plug_holes+0x124>)
 8009f00:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009f04:	4940      	ldr	r1, [pc, #256]	; (800a008 <plug_holes+0x134>)
 8009f06:	483e      	ldr	r0, [pc, #248]	; (800a000 <plug_holes+0x12c>)
 8009f08:	f00b fea4 	bl	8015c54 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	791b      	ldrb	r3, [r3, #4]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d006      	beq.n	8009f22 <plug_holes+0x4e>
 8009f14:	4b38      	ldr	r3, [pc, #224]	; (8009ff8 <plug_holes+0x124>)
 8009f16:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009f1a:	493c      	ldr	r1, [pc, #240]	; (800a00c <plug_holes+0x138>)
 8009f1c:	4838      	ldr	r0, [pc, #224]	; (800a000 <plug_holes+0x12c>)
 8009f1e:	f00b fe99 	bl	8015c54 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	881b      	ldrh	r3, [r3, #0]
 8009f26:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009f2a:	d906      	bls.n	8009f3a <plug_holes+0x66>
 8009f2c:	4b32      	ldr	r3, [pc, #200]	; (8009ff8 <plug_holes+0x124>)
 8009f2e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009f32:	4937      	ldr	r1, [pc, #220]	; (800a010 <plug_holes+0x13c>)
 8009f34:	4832      	ldr	r0, [pc, #200]	; (800a000 <plug_holes+0x12c>)
 8009f36:	f00b fe8d 	bl	8015c54 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	881b      	ldrh	r3, [r3, #0]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7ff ffa4 	bl	8009e8c <ptr_to_mem>
 8009f44:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d024      	beq.n	8009f98 <plug_holes+0xc4>
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	791b      	ldrb	r3, [r3, #4]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d120      	bne.n	8009f98 <plug_holes+0xc4>
 8009f56:	4b2b      	ldr	r3, [pc, #172]	; (800a004 <plug_holes+0x130>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	68fa      	ldr	r2, [r7, #12]
 8009f5c:	429a      	cmp	r2, r3
 8009f5e:	d01b      	beq.n	8009f98 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009f60:	4b2c      	ldr	r3, [pc, #176]	; (800a014 <plug_holes+0x140>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d102      	bne.n	8009f70 <plug_holes+0x9c>
      lfree = mem;
 8009f6a:	4a2a      	ldr	r2, [pc, #168]	; (800a014 <plug_holes+0x140>)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	881a      	ldrh	r2, [r3, #0]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	881b      	ldrh	r3, [r3, #0]
 8009f7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009f80:	d00a      	beq.n	8009f98 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	881b      	ldrh	r3, [r3, #0]
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7ff ff80 	bl	8009e8c <ptr_to_mem>
 8009f8c:	4604      	mov	r4, r0
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f7ff ff8e 	bl	8009eb0 <mem_to_ptr>
 8009f94:	4603      	mov	r3, r0
 8009f96:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	885b      	ldrh	r3, [r3, #2]
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f7ff ff75 	bl	8009e8c <ptr_to_mem>
 8009fa2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009fa4:	68ba      	ldr	r2, [r7, #8]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d01f      	beq.n	8009fec <plug_holes+0x118>
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	791b      	ldrb	r3, [r3, #4]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d11b      	bne.n	8009fec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009fb4:	4b17      	ldr	r3, [pc, #92]	; (800a014 <plug_holes+0x140>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d102      	bne.n	8009fc4 <plug_holes+0xf0>
      lfree = pmem;
 8009fbe:	4a15      	ldr	r2, [pc, #84]	; (800a014 <plug_holes+0x140>)
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	881a      	ldrh	r2, [r3, #0]
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	881b      	ldrh	r3, [r3, #0]
 8009fd0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009fd4:	d00a      	beq.n	8009fec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	881b      	ldrh	r3, [r3, #0]
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f7ff ff56 	bl	8009e8c <ptr_to_mem>
 8009fe0:	4604      	mov	r4, r0
 8009fe2:	68b8      	ldr	r0, [r7, #8]
 8009fe4:	f7ff ff64 	bl	8009eb0 <mem_to_ptr>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009fec:	bf00      	nop
 8009fee:	3714      	adds	r7, #20
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd90      	pop	{r4, r7, pc}
 8009ff4:	20000420 	.word	0x20000420
 8009ff8:	08016a58 	.word	0x08016a58
 8009ffc:	08016a88 	.word	0x08016a88
 800a000:	08016aa0 	.word	0x08016aa0
 800a004:	20000424 	.word	0x20000424
 800a008:	08016ac8 	.word	0x08016ac8
 800a00c:	08016ae4 	.word	0x08016ae4
 800a010:	08016b00 	.word	0x08016b00
 800a014:	20000428 	.word	0x20000428

0800a018 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a01e:	4b18      	ldr	r3, [pc, #96]	; (800a080 <mem_init+0x68>)
 800a020:	3303      	adds	r3, #3
 800a022:	f023 0303 	bic.w	r3, r3, #3
 800a026:	461a      	mov	r2, r3
 800a028:	4b16      	ldr	r3, [pc, #88]	; (800a084 <mem_init+0x6c>)
 800a02a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a02c:	4b15      	ldr	r3, [pc, #84]	; (800a084 <mem_init+0x6c>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a038:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a046:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a04a:	f7ff ff1f 	bl	8009e8c <ptr_to_mem>
 800a04e:	4602      	mov	r2, r0
 800a050:	4b0d      	ldr	r3, [pc, #52]	; (800a088 <mem_init+0x70>)
 800a052:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800a054:	4b0c      	ldr	r3, [pc, #48]	; (800a088 <mem_init+0x70>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2201      	movs	r2, #1
 800a05a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a05c:	4b0a      	ldr	r3, [pc, #40]	; (800a088 <mem_init+0x70>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a064:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a066:	4b08      	ldr	r3, [pc, #32]	; (800a088 <mem_init+0x70>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a06e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a070:	4b04      	ldr	r3, [pc, #16]	; (800a084 <mem_init+0x6c>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a05      	ldr	r2, [pc, #20]	; (800a08c <mem_init+0x74>)
 800a076:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800a078:	bf00      	nop
 800a07a:	3708      	adds	r7, #8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	200041a8 	.word	0x200041a8
 800a084:	20000420 	.word	0x20000420
 800a088:	20000424 	.word	0x20000424
 800a08c:	20000428 	.word	0x20000428

0800a090 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b086      	sub	sp, #24
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f7ff ff09 	bl	8009eb0 <mem_to_ptr>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	881b      	ldrh	r3, [r3, #0]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7ff fef0 	bl	8009e8c <ptr_to_mem>
 800a0ac:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	885b      	ldrh	r3, [r3, #2]
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7ff feea 	bl	8009e8c <ptr_to_mem>
 800a0b8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	881b      	ldrh	r3, [r3, #0]
 800a0be:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a0c2:	d818      	bhi.n	800a0f6 <mem_link_valid+0x66>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	885b      	ldrh	r3, [r3, #2]
 800a0c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a0cc:	d813      	bhi.n	800a0f6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a0d2:	8afa      	ldrh	r2, [r7, #22]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d004      	beq.n	800a0e2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	881b      	ldrh	r3, [r3, #0]
 800a0dc:	8afa      	ldrh	r2, [r7, #22]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d109      	bne.n	800a0f6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a0e2:	4b08      	ldr	r3, [pc, #32]	; (800a104 <mem_link_valid+0x74>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a0e6:	693a      	ldr	r2, [r7, #16]
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d006      	beq.n	800a0fa <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	885b      	ldrh	r3, [r3, #2]
 800a0f0:	8afa      	ldrh	r2, [r7, #22]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d001      	beq.n	800a0fa <mem_link_valid+0x6a>
    return 0;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	e000      	b.n	800a0fc <mem_link_valid+0x6c>
  }
  return 1;
 800a0fa:	2301      	movs	r3, #1
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3718      	adds	r7, #24
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}
 800a104:	20000424 	.word	0x20000424

0800a108 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d04c      	beq.n	800a1b0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f003 0303 	and.w	r3, r3, #3
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d007      	beq.n	800a130 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a120:	4b25      	ldr	r3, [pc, #148]	; (800a1b8 <mem_free+0xb0>)
 800a122:	f240 2273 	movw	r2, #627	; 0x273
 800a126:	4925      	ldr	r1, [pc, #148]	; (800a1bc <mem_free+0xb4>)
 800a128:	4825      	ldr	r0, [pc, #148]	; (800a1c0 <mem_free+0xb8>)
 800a12a:	f00b fd93 	bl	8015c54 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a12e:	e040      	b.n	800a1b2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	3b08      	subs	r3, #8
 800a134:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a136:	4b23      	ldr	r3, [pc, #140]	; (800a1c4 <mem_free+0xbc>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d306      	bcc.n	800a14e <mem_free+0x46>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f103 020c 	add.w	r2, r3, #12
 800a146:	4b20      	ldr	r3, [pc, #128]	; (800a1c8 <mem_free+0xc0>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d907      	bls.n	800a15e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a14e:	4b1a      	ldr	r3, [pc, #104]	; (800a1b8 <mem_free+0xb0>)
 800a150:	f240 227f 	movw	r2, #639	; 0x27f
 800a154:	491d      	ldr	r1, [pc, #116]	; (800a1cc <mem_free+0xc4>)
 800a156:	481a      	ldr	r0, [pc, #104]	; (800a1c0 <mem_free+0xb8>)
 800a158:	f00b fd7c 	bl	8015c54 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a15c:	e029      	b.n	800a1b2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	791b      	ldrb	r3, [r3, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d107      	bne.n	800a176 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a166:	4b14      	ldr	r3, [pc, #80]	; (800a1b8 <mem_free+0xb0>)
 800a168:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a16c:	4918      	ldr	r1, [pc, #96]	; (800a1d0 <mem_free+0xc8>)
 800a16e:	4814      	ldr	r0, [pc, #80]	; (800a1c0 <mem_free+0xb8>)
 800a170:	f00b fd70 	bl	8015c54 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a174:	e01d      	b.n	800a1b2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	f7ff ff8a 	bl	800a090 <mem_link_valid>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d107      	bne.n	800a192 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a182:	4b0d      	ldr	r3, [pc, #52]	; (800a1b8 <mem_free+0xb0>)
 800a184:	f240 2295 	movw	r2, #661	; 0x295
 800a188:	4912      	ldr	r1, [pc, #72]	; (800a1d4 <mem_free+0xcc>)
 800a18a:	480d      	ldr	r0, [pc, #52]	; (800a1c0 <mem_free+0xb8>)
 800a18c:	f00b fd62 	bl	8015c54 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a190:	e00f      	b.n	800a1b2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2200      	movs	r2, #0
 800a196:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a198:	4b0f      	ldr	r3, [pc, #60]	; (800a1d8 <mem_free+0xd0>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d202      	bcs.n	800a1a8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a1a2:	4a0d      	ldr	r2, [pc, #52]	; (800a1d8 <mem_free+0xd0>)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a1a8:	68f8      	ldr	r0, [r7, #12]
 800a1aa:	f7ff fe93 	bl	8009ed4 <plug_holes>
 800a1ae:	e000      	b.n	800a1b2 <mem_free+0xaa>
    return;
 800a1b0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a1b2:	3710      	adds	r7, #16
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	08016a58 	.word	0x08016a58
 800a1bc:	08016b2c 	.word	0x08016b2c
 800a1c0:	08016aa0 	.word	0x08016aa0
 800a1c4:	20000420 	.word	0x20000420
 800a1c8:	20000424 	.word	0x20000424
 800a1cc:	08016b50 	.word	0x08016b50
 800a1d0:	08016b6c 	.word	0x08016b6c
 800a1d4:	08016b94 	.word	0x08016b94
 800a1d8:	20000428 	.word	0x20000428

0800a1dc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b088      	sub	sp, #32
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a1e8:	887b      	ldrh	r3, [r7, #2]
 800a1ea:	3303      	adds	r3, #3
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	f023 0303 	bic.w	r3, r3, #3
 800a1f2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a1f4:	8bfb      	ldrh	r3, [r7, #30]
 800a1f6:	2b0b      	cmp	r3, #11
 800a1f8:	d801      	bhi.n	800a1fe <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a1fa:	230c      	movs	r3, #12
 800a1fc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a1fe:	8bfb      	ldrh	r3, [r7, #30]
 800a200:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a204:	d803      	bhi.n	800a20e <mem_trim+0x32>
 800a206:	8bfa      	ldrh	r2, [r7, #30]
 800a208:	887b      	ldrh	r3, [r7, #2]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d201      	bcs.n	800a212 <mem_trim+0x36>
    return NULL;
 800a20e:	2300      	movs	r3, #0
 800a210:	e0cc      	b.n	800a3ac <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a212:	4b68      	ldr	r3, [pc, #416]	; (800a3b4 <mem_trim+0x1d8>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d304      	bcc.n	800a226 <mem_trim+0x4a>
 800a21c:	4b66      	ldr	r3, [pc, #408]	; (800a3b8 <mem_trim+0x1dc>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	429a      	cmp	r2, r3
 800a224:	d306      	bcc.n	800a234 <mem_trim+0x58>
 800a226:	4b65      	ldr	r3, [pc, #404]	; (800a3bc <mem_trim+0x1e0>)
 800a228:	f240 22d2 	movw	r2, #722	; 0x2d2
 800a22c:	4964      	ldr	r1, [pc, #400]	; (800a3c0 <mem_trim+0x1e4>)
 800a22e:	4865      	ldr	r0, [pc, #404]	; (800a3c4 <mem_trim+0x1e8>)
 800a230:	f00b fd10 	bl	8015c54 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a234:	4b5f      	ldr	r3, [pc, #380]	; (800a3b4 <mem_trim+0x1d8>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d304      	bcc.n	800a248 <mem_trim+0x6c>
 800a23e:	4b5e      	ldr	r3, [pc, #376]	; (800a3b8 <mem_trim+0x1dc>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	429a      	cmp	r2, r3
 800a246:	d301      	bcc.n	800a24c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	e0af      	b.n	800a3ac <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	3b08      	subs	r3, #8
 800a250:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a252:	69b8      	ldr	r0, [r7, #24]
 800a254:	f7ff fe2c 	bl	8009eb0 <mem_to_ptr>
 800a258:	4603      	mov	r3, r0
 800a25a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	881a      	ldrh	r2, [r3, #0]
 800a260:	8afb      	ldrh	r3, [r7, #22]
 800a262:	1ad3      	subs	r3, r2, r3
 800a264:	b29b      	uxth	r3, r3
 800a266:	3b08      	subs	r3, #8
 800a268:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a26a:	8bfa      	ldrh	r2, [r7, #30]
 800a26c:	8abb      	ldrh	r3, [r7, #20]
 800a26e:	429a      	cmp	r2, r3
 800a270:	d906      	bls.n	800a280 <mem_trim+0xa4>
 800a272:	4b52      	ldr	r3, [pc, #328]	; (800a3bc <mem_trim+0x1e0>)
 800a274:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a278:	4953      	ldr	r1, [pc, #332]	; (800a3c8 <mem_trim+0x1ec>)
 800a27a:	4852      	ldr	r0, [pc, #328]	; (800a3c4 <mem_trim+0x1e8>)
 800a27c:	f00b fcea 	bl	8015c54 <iprintf>
  if (newsize > size) {
 800a280:	8bfa      	ldrh	r2, [r7, #30]
 800a282:	8abb      	ldrh	r3, [r7, #20]
 800a284:	429a      	cmp	r2, r3
 800a286:	d901      	bls.n	800a28c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800a288:	2300      	movs	r3, #0
 800a28a:	e08f      	b.n	800a3ac <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800a28c:	8bfa      	ldrh	r2, [r7, #30]
 800a28e:	8abb      	ldrh	r3, [r7, #20]
 800a290:	429a      	cmp	r2, r3
 800a292:	d101      	bne.n	800a298 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	e089      	b.n	800a3ac <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	881b      	ldrh	r3, [r3, #0]
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7ff fdf5 	bl	8009e8c <ptr_to_mem>
 800a2a2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	791b      	ldrb	r3, [r3, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d13f      	bne.n	800a32c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a2ac:	69bb      	ldr	r3, [r7, #24]
 800a2ae:	881b      	ldrh	r3, [r3, #0]
 800a2b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a2b4:	d106      	bne.n	800a2c4 <mem_trim+0xe8>
 800a2b6:	4b41      	ldr	r3, [pc, #260]	; (800a3bc <mem_trim+0x1e0>)
 800a2b8:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a2bc:	4943      	ldr	r1, [pc, #268]	; (800a3cc <mem_trim+0x1f0>)
 800a2be:	4841      	ldr	r0, [pc, #260]	; (800a3c4 <mem_trim+0x1e8>)
 800a2c0:	f00b fcc8 	bl	8015c54 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	881b      	ldrh	r3, [r3, #0]
 800a2c8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a2ca:	8afa      	ldrh	r2, [r7, #22]
 800a2cc:	8bfb      	ldrh	r3, [r7, #30]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	3308      	adds	r3, #8
 800a2d4:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a2d6:	4b3e      	ldr	r3, [pc, #248]	; (800a3d0 <mem_trim+0x1f4>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	693a      	ldr	r2, [r7, #16]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d106      	bne.n	800a2ee <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800a2e0:	89fb      	ldrh	r3, [r7, #14]
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7ff fdd2 	bl	8009e8c <ptr_to_mem>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	4b39      	ldr	r3, [pc, #228]	; (800a3d0 <mem_trim+0x1f4>)
 800a2ec:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a2ee:	89fb      	ldrh	r3, [r7, #14]
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7ff fdcb 	bl	8009e8c <ptr_to_mem>
 800a2f6:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	89ba      	ldrh	r2, [r7, #12]
 800a302:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	8afa      	ldrh	r2, [r7, #22]
 800a308:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	89fa      	ldrh	r2, [r7, #14]
 800a30e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	881b      	ldrh	r3, [r3, #0]
 800a314:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a318:	d047      	beq.n	800a3aa <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	881b      	ldrh	r3, [r3, #0]
 800a31e:	4618      	mov	r0, r3
 800a320:	f7ff fdb4 	bl	8009e8c <ptr_to_mem>
 800a324:	4602      	mov	r2, r0
 800a326:	89fb      	ldrh	r3, [r7, #14]
 800a328:	8053      	strh	r3, [r2, #2]
 800a32a:	e03e      	b.n	800a3aa <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a32c:	8bfb      	ldrh	r3, [r7, #30]
 800a32e:	f103 0214 	add.w	r2, r3, #20
 800a332:	8abb      	ldrh	r3, [r7, #20]
 800a334:	429a      	cmp	r2, r3
 800a336:	d838      	bhi.n	800a3aa <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a338:	8afa      	ldrh	r2, [r7, #22]
 800a33a:	8bfb      	ldrh	r3, [r7, #30]
 800a33c:	4413      	add	r3, r2
 800a33e:	b29b      	uxth	r3, r3
 800a340:	3308      	adds	r3, #8
 800a342:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a344:	69bb      	ldr	r3, [r7, #24]
 800a346:	881b      	ldrh	r3, [r3, #0]
 800a348:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a34c:	d106      	bne.n	800a35c <mem_trim+0x180>
 800a34e:	4b1b      	ldr	r3, [pc, #108]	; (800a3bc <mem_trim+0x1e0>)
 800a350:	f240 3216 	movw	r2, #790	; 0x316
 800a354:	491d      	ldr	r1, [pc, #116]	; (800a3cc <mem_trim+0x1f0>)
 800a356:	481b      	ldr	r0, [pc, #108]	; (800a3c4 <mem_trim+0x1e8>)
 800a358:	f00b fc7c 	bl	8015c54 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a35c:	89fb      	ldrh	r3, [r7, #14]
 800a35e:	4618      	mov	r0, r3
 800a360:	f7ff fd94 	bl	8009e8c <ptr_to_mem>
 800a364:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a366:	4b1a      	ldr	r3, [pc, #104]	; (800a3d0 <mem_trim+0x1f4>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	693a      	ldr	r2, [r7, #16]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d202      	bcs.n	800a376 <mem_trim+0x19a>
      lfree = mem2;
 800a370:	4a17      	ldr	r2, [pc, #92]	; (800a3d0 <mem_trim+0x1f4>)
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	2200      	movs	r2, #0
 800a37a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	881a      	ldrh	r2, [r3, #0]
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	8afa      	ldrh	r2, [r7, #22]
 800a388:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a38a:	69bb      	ldr	r3, [r7, #24]
 800a38c:	89fa      	ldrh	r2, [r7, #14]
 800a38e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	881b      	ldrh	r3, [r3, #0]
 800a394:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a398:	d007      	beq.n	800a3aa <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	881b      	ldrh	r3, [r3, #0]
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7ff fd74 	bl	8009e8c <ptr_to_mem>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	89fb      	ldrh	r3, [r7, #14]
 800a3a8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800a3aa:	687b      	ldr	r3, [r7, #4]
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3720      	adds	r7, #32
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	20000420 	.word	0x20000420
 800a3b8:	20000424 	.word	0x20000424
 800a3bc:	08016a58 	.word	0x08016a58
 800a3c0:	08016bc8 	.word	0x08016bc8
 800a3c4:	08016aa0 	.word	0x08016aa0
 800a3c8:	08016be0 	.word	0x08016be0
 800a3cc:	08016c00 	.word	0x08016c00
 800a3d0:	20000428 	.word	0x20000428

0800a3d4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b088      	sub	sp, #32
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	4603      	mov	r3, r0
 800a3dc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a3de:	88fb      	ldrh	r3, [r7, #6]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d101      	bne.n	800a3e8 <mem_malloc+0x14>
    return NULL;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	e0d9      	b.n	800a59c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a3e8:	88fb      	ldrh	r3, [r7, #6]
 800a3ea:	3303      	adds	r3, #3
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	f023 0303 	bic.w	r3, r3, #3
 800a3f2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a3f4:	8bbb      	ldrh	r3, [r7, #28]
 800a3f6:	2b0b      	cmp	r3, #11
 800a3f8:	d801      	bhi.n	800a3fe <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a3fa:	230c      	movs	r3, #12
 800a3fc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a3fe:	8bbb      	ldrh	r3, [r7, #28]
 800a400:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a404:	d803      	bhi.n	800a40e <mem_malloc+0x3a>
 800a406:	8bba      	ldrh	r2, [r7, #28]
 800a408:	88fb      	ldrh	r3, [r7, #6]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d201      	bcs.n	800a412 <mem_malloc+0x3e>
    return NULL;
 800a40e:	2300      	movs	r3, #0
 800a410:	e0c4      	b.n	800a59c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a412:	4b64      	ldr	r3, [pc, #400]	; (800a5a4 <mem_malloc+0x1d0>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4618      	mov	r0, r3
 800a418:	f7ff fd4a 	bl	8009eb0 <mem_to_ptr>
 800a41c:	4603      	mov	r3, r0
 800a41e:	83fb      	strh	r3, [r7, #30]
 800a420:	e0b4      	b.n	800a58c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a422:	8bfb      	ldrh	r3, [r7, #30]
 800a424:	4618      	mov	r0, r3
 800a426:	f7ff fd31 	bl	8009e8c <ptr_to_mem>
 800a42a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	791b      	ldrb	r3, [r3, #4]
 800a430:	2b00      	cmp	r3, #0
 800a432:	f040 80a4 	bne.w	800a57e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	881b      	ldrh	r3, [r3, #0]
 800a43a:	461a      	mov	r2, r3
 800a43c:	8bfb      	ldrh	r3, [r7, #30]
 800a43e:	1ad3      	subs	r3, r2, r3
 800a440:	f1a3 0208 	sub.w	r2, r3, #8
 800a444:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a446:	429a      	cmp	r2, r3
 800a448:	f0c0 8099 	bcc.w	800a57e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	881b      	ldrh	r3, [r3, #0]
 800a450:	461a      	mov	r2, r3
 800a452:	8bfb      	ldrh	r3, [r7, #30]
 800a454:	1ad3      	subs	r3, r2, r3
 800a456:	f1a3 0208 	sub.w	r2, r3, #8
 800a45a:	8bbb      	ldrh	r3, [r7, #28]
 800a45c:	3314      	adds	r3, #20
 800a45e:	429a      	cmp	r2, r3
 800a460:	d333      	bcc.n	800a4ca <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a462:	8bfa      	ldrh	r2, [r7, #30]
 800a464:	8bbb      	ldrh	r3, [r7, #28]
 800a466:	4413      	add	r3, r2
 800a468:	b29b      	uxth	r3, r3
 800a46a:	3308      	adds	r3, #8
 800a46c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a46e:	8a7b      	ldrh	r3, [r7, #18]
 800a470:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a474:	d106      	bne.n	800a484 <mem_malloc+0xb0>
 800a476:	4b4c      	ldr	r3, [pc, #304]	; (800a5a8 <mem_malloc+0x1d4>)
 800a478:	f240 3287 	movw	r2, #903	; 0x387
 800a47c:	494b      	ldr	r1, [pc, #300]	; (800a5ac <mem_malloc+0x1d8>)
 800a47e:	484c      	ldr	r0, [pc, #304]	; (800a5b0 <mem_malloc+0x1dc>)
 800a480:	f00b fbe8 	bl	8015c54 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a484:	8a7b      	ldrh	r3, [r7, #18]
 800a486:	4618      	mov	r0, r3
 800a488:	f7ff fd00 	bl	8009e8c <ptr_to_mem>
 800a48c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2200      	movs	r2, #0
 800a492:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	881a      	ldrh	r2, [r3, #0]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	8bfa      	ldrh	r2, [r7, #30]
 800a4a0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	8a7a      	ldrh	r2, [r7, #18]
 800a4a6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	881b      	ldrh	r3, [r3, #0]
 800a4b2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a4b6:	d00b      	beq.n	800a4d0 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	881b      	ldrh	r3, [r3, #0]
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7ff fce5 	bl	8009e8c <ptr_to_mem>
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	8a7b      	ldrh	r3, [r7, #18]
 800a4c6:	8053      	strh	r3, [r2, #2]
 800a4c8:	e002      	b.n	800a4d0 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a4d0:	4b34      	ldr	r3, [pc, #208]	; (800a5a4 <mem_malloc+0x1d0>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	697a      	ldr	r2, [r7, #20]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d127      	bne.n	800a52a <mem_malloc+0x156>
          struct mem *cur = lfree;
 800a4da:	4b32      	ldr	r3, [pc, #200]	; (800a5a4 <mem_malloc+0x1d0>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a4e0:	e005      	b.n	800a4ee <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	881b      	ldrh	r3, [r3, #0]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7ff fcd0 	bl	8009e8c <ptr_to_mem>
 800a4ec:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	791b      	ldrb	r3, [r3, #4]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d004      	beq.n	800a500 <mem_malloc+0x12c>
 800a4f6:	4b2f      	ldr	r3, [pc, #188]	; (800a5b4 <mem_malloc+0x1e0>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	69ba      	ldr	r2, [r7, #24]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d1f0      	bne.n	800a4e2 <mem_malloc+0x10e>
          }
          lfree = cur;
 800a500:	4a28      	ldr	r2, [pc, #160]	; (800a5a4 <mem_malloc+0x1d0>)
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a506:	4b27      	ldr	r3, [pc, #156]	; (800a5a4 <mem_malloc+0x1d0>)
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	4b2a      	ldr	r3, [pc, #168]	; (800a5b4 <mem_malloc+0x1e0>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d00b      	beq.n	800a52a <mem_malloc+0x156>
 800a512:	4b24      	ldr	r3, [pc, #144]	; (800a5a4 <mem_malloc+0x1d0>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	791b      	ldrb	r3, [r3, #4]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d006      	beq.n	800a52a <mem_malloc+0x156>
 800a51c:	4b22      	ldr	r3, [pc, #136]	; (800a5a8 <mem_malloc+0x1d4>)
 800a51e:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a522:	4925      	ldr	r1, [pc, #148]	; (800a5b8 <mem_malloc+0x1e4>)
 800a524:	4822      	ldr	r0, [pc, #136]	; (800a5b0 <mem_malloc+0x1dc>)
 800a526:	f00b fb95 	bl	8015c54 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a52a:	8bba      	ldrh	r2, [r7, #28]
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	4413      	add	r3, r2
 800a530:	3308      	adds	r3, #8
 800a532:	4a20      	ldr	r2, [pc, #128]	; (800a5b4 <mem_malloc+0x1e0>)
 800a534:	6812      	ldr	r2, [r2, #0]
 800a536:	4293      	cmp	r3, r2
 800a538:	d906      	bls.n	800a548 <mem_malloc+0x174>
 800a53a:	4b1b      	ldr	r3, [pc, #108]	; (800a5a8 <mem_malloc+0x1d4>)
 800a53c:	f240 32ba 	movw	r2, #954	; 0x3ba
 800a540:	491e      	ldr	r1, [pc, #120]	; (800a5bc <mem_malloc+0x1e8>)
 800a542:	481b      	ldr	r0, [pc, #108]	; (800a5b0 <mem_malloc+0x1dc>)
 800a544:	f00b fb86 	bl	8015c54 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	f003 0303 	and.w	r3, r3, #3
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d006      	beq.n	800a560 <mem_malloc+0x18c>
 800a552:	4b15      	ldr	r3, [pc, #84]	; (800a5a8 <mem_malloc+0x1d4>)
 800a554:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800a558:	4919      	ldr	r1, [pc, #100]	; (800a5c0 <mem_malloc+0x1ec>)
 800a55a:	4815      	ldr	r0, [pc, #84]	; (800a5b0 <mem_malloc+0x1dc>)
 800a55c:	f00b fb7a 	bl	8015c54 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	f003 0303 	and.w	r3, r3, #3
 800a566:	2b00      	cmp	r3, #0
 800a568:	d006      	beq.n	800a578 <mem_malloc+0x1a4>
 800a56a:	4b0f      	ldr	r3, [pc, #60]	; (800a5a8 <mem_malloc+0x1d4>)
 800a56c:	f240 32be 	movw	r2, #958	; 0x3be
 800a570:	4914      	ldr	r1, [pc, #80]	; (800a5c4 <mem_malloc+0x1f0>)
 800a572:	480f      	ldr	r0, [pc, #60]	; (800a5b0 <mem_malloc+0x1dc>)
 800a574:	f00b fb6e 	bl	8015c54 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	3308      	adds	r3, #8
 800a57c:	e00e      	b.n	800a59c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800a57e:	8bfb      	ldrh	r3, [r7, #30]
 800a580:	4618      	mov	r0, r3
 800a582:	f7ff fc83 	bl	8009e8c <ptr_to_mem>
 800a586:	4603      	mov	r3, r0
 800a588:	881b      	ldrh	r3, [r3, #0]
 800a58a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a58c:	8bfa      	ldrh	r2, [r7, #30]
 800a58e:	8bbb      	ldrh	r3, [r7, #28]
 800a590:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800a594:	429a      	cmp	r2, r3
 800a596:	f4ff af44 	bcc.w	800a422 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a59a:	2300      	movs	r3, #0
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3720      	adds	r7, #32
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	20000428 	.word	0x20000428
 800a5a8:	08016a58 	.word	0x08016a58
 800a5ac:	08016c00 	.word	0x08016c00
 800a5b0:	08016aa0 	.word	0x08016aa0
 800a5b4:	20000424 	.word	0x20000424
 800a5b8:	08016c14 	.word	0x08016c14
 800a5bc:	08016c30 	.word	0x08016c30
 800a5c0:	08016c60 	.word	0x08016c60
 800a5c4:	08016c90 	.word	0x08016c90

0800a5c8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b085      	sub	sp, #20
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	3303      	adds	r3, #3
 800a5de:	f023 0303 	bic.w	r3, r3, #3
 800a5e2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	60fb      	str	r3, [r7, #12]
 800a5e8:	e011      	b.n	800a60e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	68ba      	ldr	r2, [r7, #8]
 800a5fa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	881b      	ldrh	r3, [r3, #0]
 800a600:	461a      	mov	r2, r3
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	4413      	add	r3, r2
 800a606:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	3301      	adds	r3, #1
 800a60c:	60fb      	str	r3, [r7, #12]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	885b      	ldrh	r3, [r3, #2]
 800a612:	461a      	mov	r2, r3
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	4293      	cmp	r3, r2
 800a618:	dbe7      	blt.n	800a5ea <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a61a:	bf00      	nop
 800a61c:	3714      	adds	r7, #20
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr
	...

0800a628 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a62e:	2300      	movs	r3, #0
 800a630:	80fb      	strh	r3, [r7, #6]
 800a632:	e009      	b.n	800a648 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a634:	88fb      	ldrh	r3, [r7, #6]
 800a636:	4a08      	ldr	r2, [pc, #32]	; (800a658 <memp_init+0x30>)
 800a638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a63c:	4618      	mov	r0, r3
 800a63e:	f7ff ffc3 	bl	800a5c8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a642:	88fb      	ldrh	r3, [r7, #6]
 800a644:	3301      	adds	r3, #1
 800a646:	80fb      	strh	r3, [r7, #6]
 800a648:	88fb      	ldrh	r3, [r7, #6]
 800a64a:	2b08      	cmp	r3, #8
 800a64c:	d9f2      	bls.n	800a634 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a64e:	bf00      	nop
 800a650:	3708      	adds	r7, #8
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	080281b0 	.word	0x080281b0

0800a65c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d012      	beq.n	800a698 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	68fa      	ldr	r2, [r7, #12]
 800a678:	6812      	ldr	r2, [r2, #0]
 800a67a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f003 0303 	and.w	r3, r3, #3
 800a682:	2b00      	cmp	r3, #0
 800a684:	d006      	beq.n	800a694 <do_memp_malloc_pool+0x38>
 800a686:	4b07      	ldr	r3, [pc, #28]	; (800a6a4 <do_memp_malloc_pool+0x48>)
 800a688:	f240 1219 	movw	r2, #281	; 0x119
 800a68c:	4906      	ldr	r1, [pc, #24]	; (800a6a8 <do_memp_malloc_pool+0x4c>)
 800a68e:	4807      	ldr	r0, [pc, #28]	; (800a6ac <do_memp_malloc_pool+0x50>)
 800a690:	f00b fae0 	bl	8015c54 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	e000      	b.n	800a69a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a698:	2300      	movs	r3, #0
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3710      	adds	r7, #16
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	08016cb4 	.word	0x08016cb4
 800a6a8:	08016ce4 	.word	0x08016ce4
 800a6ac:	08016d08 	.word	0x08016d08

0800a6b0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a6ba:	79fb      	ldrb	r3, [r7, #7]
 800a6bc:	2b08      	cmp	r3, #8
 800a6be:	d908      	bls.n	800a6d2 <memp_malloc+0x22>
 800a6c0:	4b0a      	ldr	r3, [pc, #40]	; (800a6ec <memp_malloc+0x3c>)
 800a6c2:	f240 1257 	movw	r2, #343	; 0x157
 800a6c6:	490a      	ldr	r1, [pc, #40]	; (800a6f0 <memp_malloc+0x40>)
 800a6c8:	480a      	ldr	r0, [pc, #40]	; (800a6f4 <memp_malloc+0x44>)
 800a6ca:	f00b fac3 	bl	8015c54 <iprintf>
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	e008      	b.n	800a6e4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a6d2:	79fb      	ldrb	r3, [r7, #7]
 800a6d4:	4a08      	ldr	r2, [pc, #32]	; (800a6f8 <memp_malloc+0x48>)
 800a6d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7ff ffbe 	bl	800a65c <do_memp_malloc_pool>
 800a6e0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3710      	adds	r7, #16
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	08016cb4 	.word	0x08016cb4
 800a6f0:	08016d44 	.word	0x08016d44
 800a6f4:	08016d08 	.word	0x08016d08
 800a6f8:	080281b0 	.word	0x080281b0

0800a6fc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	f003 0303 	and.w	r3, r3, #3
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d006      	beq.n	800a71e <do_memp_free_pool+0x22>
 800a710:	4b0a      	ldr	r3, [pc, #40]	; (800a73c <do_memp_free_pool+0x40>)
 800a712:	f240 126d 	movw	r2, #365	; 0x16d
 800a716:	490a      	ldr	r1, [pc, #40]	; (800a740 <do_memp_free_pool+0x44>)
 800a718:	480a      	ldr	r0, [pc, #40]	; (800a744 <do_memp_free_pool+0x48>)
 800a71a:	f00b fa9b 	bl	8015c54 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a71e:	683b      	ldr	r3, [r7, #0]
 800a720:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	68fa      	ldr	r2, [r7, #12]
 800a732:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800a734:	bf00      	nop
 800a736:	3710      	adds	r7, #16
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	08016cb4 	.word	0x08016cb4
 800a740:	08016d64 	.word	0x08016d64
 800a744:	08016d08 	.word	0x08016d08

0800a748 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	4603      	mov	r3, r0
 800a750:	6039      	str	r1, [r7, #0]
 800a752:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a754:	79fb      	ldrb	r3, [r7, #7]
 800a756:	2b08      	cmp	r3, #8
 800a758:	d907      	bls.n	800a76a <memp_free+0x22>
 800a75a:	4b0c      	ldr	r3, [pc, #48]	; (800a78c <memp_free+0x44>)
 800a75c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a760:	490b      	ldr	r1, [pc, #44]	; (800a790 <memp_free+0x48>)
 800a762:	480c      	ldr	r0, [pc, #48]	; (800a794 <memp_free+0x4c>)
 800a764:	f00b fa76 	bl	8015c54 <iprintf>
 800a768:	e00c      	b.n	800a784 <memp_free+0x3c>

  if (mem == NULL) {
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d008      	beq.n	800a782 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a770:	79fb      	ldrb	r3, [r7, #7]
 800a772:	4a09      	ldr	r2, [pc, #36]	; (800a798 <memp_free+0x50>)
 800a774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a778:	6839      	ldr	r1, [r7, #0]
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7ff ffbe 	bl	800a6fc <do_memp_free_pool>
 800a780:	e000      	b.n	800a784 <memp_free+0x3c>
    return;
 800a782:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a784:	3708      	adds	r7, #8
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	08016cb4 	.word	0x08016cb4
 800a790:	08016d84 	.word	0x08016d84
 800a794:	08016d08 	.word	0x08016d08
 800a798:	080281b0 	.word	0x080281b0

0800a79c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a79c:	b480      	push	{r7}
 800a79e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a7a0:	bf00      	nop
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr
	...

0800a7ac <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b086      	sub	sp, #24
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
 800a7b8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d108      	bne.n	800a7d2 <netif_add+0x26>
 800a7c0:	4b59      	ldr	r3, [pc, #356]	; (800a928 <netif_add+0x17c>)
 800a7c2:	f240 1227 	movw	r2, #295	; 0x127
 800a7c6:	4959      	ldr	r1, [pc, #356]	; (800a92c <netif_add+0x180>)
 800a7c8:	4859      	ldr	r0, [pc, #356]	; (800a930 <netif_add+0x184>)
 800a7ca:	f00b fa43 	bl	8015c54 <iprintf>
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	e0a6      	b.n	800a920 <netif_add+0x174>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d108      	bne.n	800a7ea <netif_add+0x3e>
 800a7d8:	4b53      	ldr	r3, [pc, #332]	; (800a928 <netif_add+0x17c>)
 800a7da:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a7de:	4955      	ldr	r1, [pc, #340]	; (800a934 <netif_add+0x188>)
 800a7e0:	4853      	ldr	r0, [pc, #332]	; (800a930 <netif_add+0x184>)
 800a7e2:	f00b fa37 	bl	8015c54 <iprintf>
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	e09a      	b.n	800a920 <netif_add+0x174>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d101      	bne.n	800a7f4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a7f0:	4b51      	ldr	r3, [pc, #324]	; (800a938 <netif_add+0x18c>)
 800a7f2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d101      	bne.n	800a7fe <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a7fa:	4b4f      	ldr	r3, [pc, #316]	; (800a938 <netif_add+0x18c>)
 800a7fc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d101      	bne.n	800a808 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a804:	4b4c      	ldr	r3, [pc, #304]	; (800a938 <netif_add+0x18c>)
 800a806:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2200      	movs	r2, #0
 800a80c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	2200      	movs	r2, #0
 800a812:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2200      	movs	r2, #0
 800a818:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	4a47      	ldr	r2, [pc, #284]	; (800a93c <netif_add+0x190>)
 800a81e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2200      	movs	r2, #0
 800a824:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2200      	movs	r2, #0
 800a82a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	3320      	adds	r3, #32
 800a832:	2204      	movs	r2, #4
 800a834:	2100      	movs	r1, #0
 800a836:	4618      	mov	r0, r3
 800a838:	f00b f95c 	bl	8015af4 <memset>
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6a3a      	ldr	r2, [r7, #32]
 800a840:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 800a842:	4b3f      	ldr	r3, [pc, #252]	; (800a940 <netif_add+0x194>)
 800a844:	781a      	ldrb	r2, [r3, #0]
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a850:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	68b9      	ldr	r1, [r7, #8]
 800a858:	68f8      	ldr	r0, [r7, #12]
 800a85a:	f000 f913 	bl	800aa84 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	4798      	blx	r3
 800a864:	4603      	mov	r3, r0
 800a866:	2b00      	cmp	r3, #0
 800a868:	d001      	beq.n	800a86e <netif_add+0xc2>
    return NULL;
 800a86a:	2300      	movs	r3, #0
 800a86c:	e058      	b.n	800a920 <netif_add+0x174>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a874:	2bff      	cmp	r3, #255	; 0xff
 800a876:	d103      	bne.n	800a880 <netif_add+0xd4>
        netif->num = 0;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800a880:	2300      	movs	r3, #0
 800a882:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a884:	4b2f      	ldr	r3, [pc, #188]	; (800a944 <netif_add+0x198>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	617b      	str	r3, [r7, #20]
 800a88a:	e02b      	b.n	800a8e4 <netif_add+0x138>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a88c:	697a      	ldr	r2, [r7, #20]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	429a      	cmp	r2, r3
 800a892:	d106      	bne.n	800a8a2 <netif_add+0xf6>
 800a894:	4b24      	ldr	r3, [pc, #144]	; (800a928 <netif_add+0x17c>)
 800a896:	f240 128b 	movw	r2, #395	; 0x18b
 800a89a:	492b      	ldr	r1, [pc, #172]	; (800a948 <netif_add+0x19c>)
 800a89c:	4824      	ldr	r0, [pc, #144]	; (800a930 <netif_add+0x184>)
 800a89e:	f00b f9d9 	bl	8015c54 <iprintf>
        num_netifs++;
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	2bff      	cmp	r3, #255	; 0xff
 800a8ac:	dd06      	ble.n	800a8bc <netif_add+0x110>
 800a8ae:	4b1e      	ldr	r3, [pc, #120]	; (800a928 <netif_add+0x17c>)
 800a8b0:	f240 128d 	movw	r2, #397	; 0x18d
 800a8b4:	4925      	ldr	r1, [pc, #148]	; (800a94c <netif_add+0x1a0>)
 800a8b6:	481e      	ldr	r0, [pc, #120]	; (800a930 <netif_add+0x184>)
 800a8b8:	f00b f9cc 	bl	8015c54 <iprintf>
        if (netif2->num == netif->num) {
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d108      	bne.n	800a8de <netif_add+0x132>
          netif->num++;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	b2da      	uxtb	r2, r3
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800a8dc:	e005      	b.n	800a8ea <netif_add+0x13e>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	617b      	str	r3, [r7, #20]
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d1d0      	bne.n	800a88c <netif_add+0xe0>
        }
      }
    } while (netif2 != NULL);
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d1be      	bne.n	800a86e <netif_add+0xc2>
  }
  if (netif->num == 254) {
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a8f6:	2bfe      	cmp	r3, #254	; 0xfe
 800a8f8:	d103      	bne.n	800a902 <netif_add+0x156>
    netif_num = 0;
 800a8fa:	4b11      	ldr	r3, [pc, #68]	; (800a940 <netif_add+0x194>)
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	701a      	strb	r2, [r3, #0]
 800a900:	e006      	b.n	800a910 <netif_add+0x164>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a908:	3301      	adds	r3, #1
 800a90a:	b2da      	uxtb	r2, r3
 800a90c:	4b0c      	ldr	r3, [pc, #48]	; (800a940 <netif_add+0x194>)
 800a90e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a910:	4b0c      	ldr	r3, [pc, #48]	; (800a944 <netif_add+0x198>)
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a918:	4a0a      	ldr	r2, [pc, #40]	; (800a944 <netif_add+0x198>)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a91e:	68fb      	ldr	r3, [r7, #12]
}
 800a920:	4618      	mov	r0, r3
 800a922:	3718      	adds	r7, #24
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}
 800a928:	08016da0 	.word	0x08016da0
 800a92c:	08016e34 	.word	0x08016e34
 800a930:	08016df0 	.word	0x08016df0
 800a934:	08016e50 	.word	0x08016e50
 800a938:	08028224 	.word	0x08028224
 800a93c:	0800ac75 	.word	0x0800ac75
 800a940:	20000450 	.word	0x20000450
 800a944:	200076e4 	.word	0x200076e4
 800a948:	08016e74 	.word	0x08016e74
 800a94c:	08016e88 	.word	0x08016e88

0800a950 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b082      	sub	sp, #8
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a95a:	6839      	ldr	r1, [r7, #0]
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f002 facd 	bl	800cefc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a962:	6839      	ldr	r1, [r7, #0]
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f006 ff17 	bl	8011798 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a96a:	bf00      	nop
 800a96c:	3708      	adds	r7, #8
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
	...

0800a974 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b086      	sub	sp, #24
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d106      	bne.n	800a994 <netif_do_set_ipaddr+0x20>
 800a986:	4b1d      	ldr	r3, [pc, #116]	; (800a9fc <netif_do_set_ipaddr+0x88>)
 800a988:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a98c:	491c      	ldr	r1, [pc, #112]	; (800aa00 <netif_do_set_ipaddr+0x8c>)
 800a98e:	481d      	ldr	r0, [pc, #116]	; (800aa04 <netif_do_set_ipaddr+0x90>)
 800a990:	f00b f960 	bl	8015c54 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d106      	bne.n	800a9a8 <netif_do_set_ipaddr+0x34>
 800a99a:	4b18      	ldr	r3, [pc, #96]	; (800a9fc <netif_do_set_ipaddr+0x88>)
 800a99c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a9a0:	4917      	ldr	r1, [pc, #92]	; (800aa00 <netif_do_set_ipaddr+0x8c>)
 800a9a2:	4818      	ldr	r0, [pc, #96]	; (800aa04 <netif_do_set_ipaddr+0x90>)
 800a9a4:	f00b f956 	bl	8015c54 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	3304      	adds	r3, #4
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d01c      	beq.n	800a9f0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	3304      	adds	r3, #4
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a9c6:	f107 0314 	add.w	r3, r7, #20
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f7ff ffbf 	bl	800a950 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d002      	beq.n	800a9de <netif_do_set_ipaddr+0x6a>
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	e000      	b.n	800a9e0 <netif_do_set_ipaddr+0x6c>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	68fa      	ldr	r2, [r7, #12]
 800a9e2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a9e4:	2101      	movs	r1, #1
 800a9e6:	68f8      	ldr	r0, [r7, #12]
 800a9e8:	f000 f8d2 	bl	800ab90 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e000      	b.n	800a9f2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a9f0:	2300      	movs	r3, #0
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3718      	adds	r7, #24
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	08016da0 	.word	0x08016da0
 800aa00:	08016eb8 	.word	0x08016eb8
 800aa04:	08016df0 	.word	0x08016df0

0800aa08 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	3308      	adds	r3, #8
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d00a      	beq.n	800aa38 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d002      	beq.n	800aa2e <netif_do_set_netmask+0x26>
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	e000      	b.n	800aa30 <netif_do_set_netmask+0x28>
 800aa2e:	2300      	movs	r3, #0
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800aa34:	2301      	movs	r3, #1
 800aa36:	e000      	b.n	800aa3a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3714      	adds	r7, #20
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr

0800aa46 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800aa46:	b480      	push	{r7}
 800aa48:	b085      	sub	sp, #20
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	60f8      	str	r0, [r7, #12]
 800aa4e:	60b9      	str	r1, [r7, #8]
 800aa50:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	330c      	adds	r3, #12
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d00a      	beq.n	800aa76 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d002      	beq.n	800aa6c <netif_do_set_gw+0x26>
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	e000      	b.n	800aa6e <netif_do_set_gw+0x28>
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800aa72:	2301      	movs	r3, #1
 800aa74:	e000      	b.n	800aa78 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800aa76:	2300      	movs	r3, #0
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3714      	adds	r7, #20
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr

0800aa84 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b088      	sub	sp, #32
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	607a      	str	r2, [r7, #4]
 800aa90:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800aa92:	2300      	movs	r3, #0
 800aa94:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800aa96:	2300      	movs	r3, #0
 800aa98:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d101      	bne.n	800aaa4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800aaa0:	4b1c      	ldr	r3, [pc, #112]	; (800ab14 <netif_set_addr+0x90>)
 800aaa2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d101      	bne.n	800aaae <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800aaaa:	4b1a      	ldr	r3, [pc, #104]	; (800ab14 <netif_set_addr+0x90>)
 800aaac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d101      	bne.n	800aab8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800aab4:	4b17      	ldr	r3, [pc, #92]	; (800ab14 <netif_set_addr+0x90>)
 800aab6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d003      	beq.n	800aac6 <netif_set_addr+0x42>
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d101      	bne.n	800aaca <netif_set_addr+0x46>
 800aac6:	2301      	movs	r3, #1
 800aac8:	e000      	b.n	800aacc <netif_set_addr+0x48>
 800aaca:	2300      	movs	r3, #0
 800aacc:	617b      	str	r3, [r7, #20]
  if (remove) {
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d006      	beq.n	800aae2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800aad4:	f107 0310 	add.w	r3, r7, #16
 800aad8:	461a      	mov	r2, r3
 800aada:	68b9      	ldr	r1, [r7, #8]
 800aadc:	68f8      	ldr	r0, [r7, #12]
 800aade:	f7ff ff49 	bl	800a974 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800aae2:	69fa      	ldr	r2, [r7, #28]
 800aae4:	6879      	ldr	r1, [r7, #4]
 800aae6:	68f8      	ldr	r0, [r7, #12]
 800aae8:	f7ff ff8e 	bl	800aa08 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800aaec:	69ba      	ldr	r2, [r7, #24]
 800aaee:	6839      	ldr	r1, [r7, #0]
 800aaf0:	68f8      	ldr	r0, [r7, #12]
 800aaf2:	f7ff ffa8 	bl	800aa46 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d106      	bne.n	800ab0a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800aafc:	f107 0310 	add.w	r3, r7, #16
 800ab00:	461a      	mov	r2, r3
 800ab02:	68b9      	ldr	r1, [r7, #8]
 800ab04:	68f8      	ldr	r0, [r7, #12]
 800ab06:	f7ff ff35 	bl	800a974 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ab0a:	bf00      	nop
 800ab0c:	3720      	adds	r7, #32
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	08028224 	.word	0x08028224

0800ab18 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b083      	sub	sp, #12
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ab20:	4a04      	ldr	r2, [pc, #16]	; (800ab34 <netif_set_default+0x1c>)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ab26:	bf00      	nop
 800ab28:	370c      	adds	r7, #12
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr
 800ab32:	bf00      	nop
 800ab34:	200076e8 	.word	0x200076e8

0800ab38 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d107      	bne.n	800ab56 <netif_set_up+0x1e>
 800ab46:	4b0f      	ldr	r3, [pc, #60]	; (800ab84 <netif_set_up+0x4c>)
 800ab48:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ab4c:	490e      	ldr	r1, [pc, #56]	; (800ab88 <netif_set_up+0x50>)
 800ab4e:	480f      	ldr	r0, [pc, #60]	; (800ab8c <netif_set_up+0x54>)
 800ab50:	f00b f880 	bl	8015c54 <iprintf>
 800ab54:	e013      	b.n	800ab7e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ab5c:	f003 0301 	and.w	r3, r3, #1
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d10c      	bne.n	800ab7e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ab6a:	f043 0301 	orr.w	r3, r3, #1
 800ab6e:	b2da      	uxtb	r2, r3
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ab76:	2103      	movs	r1, #3
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 f809 	bl	800ab90 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ab7e:	3708      	adds	r7, #8
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	08016da0 	.word	0x08016da0
 800ab88:	08016f28 	.word	0x08016f28
 800ab8c:	08016df0 	.word	0x08016df0

0800ab90 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	460b      	mov	r3, r1
 800ab9a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d106      	bne.n	800abb0 <netif_issue_reports+0x20>
 800aba2:	4b18      	ldr	r3, [pc, #96]	; (800ac04 <netif_issue_reports+0x74>)
 800aba4:	f240 326d 	movw	r2, #877	; 0x36d
 800aba8:	4917      	ldr	r1, [pc, #92]	; (800ac08 <netif_issue_reports+0x78>)
 800abaa:	4818      	ldr	r0, [pc, #96]	; (800ac0c <netif_issue_reports+0x7c>)
 800abac:	f00b f852 	bl	8015c54 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800abb6:	f003 0304 	and.w	r3, r3, #4
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d01e      	beq.n	800abfc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800abc4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d017      	beq.n	800abfc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800abcc:	78fb      	ldrb	r3, [r7, #3]
 800abce:	f003 0301 	and.w	r3, r3, #1
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d013      	beq.n	800abfe <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	3304      	adds	r3, #4
 800abda:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d00e      	beq.n	800abfe <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800abe6:	f003 0308 	and.w	r3, r3, #8
 800abea:	2b00      	cmp	r3, #0
 800abec:	d007      	beq.n	800abfe <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	3304      	adds	r3, #4
 800abf2:	4619      	mov	r1, r3
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f009 fb91 	bl	801431c <etharp_request>
 800abfa:	e000      	b.n	800abfe <netif_issue_reports+0x6e>
    return;
 800abfc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800abfe:	3708      	adds	r7, #8
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}
 800ac04:	08016da0 	.word	0x08016da0
 800ac08:	08016f44 	.word	0x08016f44
 800ac0c:	08016df0 	.word	0x08016df0

0800ac10 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d107      	bne.n	800ac2e <netif_set_down+0x1e>
 800ac1e:	4b12      	ldr	r3, [pc, #72]	; (800ac68 <netif_set_down+0x58>)
 800ac20:	f240 329b 	movw	r2, #923	; 0x39b
 800ac24:	4911      	ldr	r1, [pc, #68]	; (800ac6c <netif_set_down+0x5c>)
 800ac26:	4812      	ldr	r0, [pc, #72]	; (800ac70 <netif_set_down+0x60>)
 800ac28:	f00b f814 	bl	8015c54 <iprintf>
 800ac2c:	e019      	b.n	800ac62 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ac34:	f003 0301 	and.w	r3, r3, #1
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d012      	beq.n	800ac62 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ac42:	f023 0301 	bic.w	r3, r3, #1
 800ac46:	b2da      	uxtb	r2, r3
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ac54:	f003 0308 	and.w	r3, r3, #8
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d002      	beq.n	800ac62 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f008 ff17 	bl	8013a90 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ac62:	3708      	adds	r7, #8
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	08016da0 	.word	0x08016da0
 800ac6c:	08016f68 	.word	0x08016f68
 800ac70:	08016df0 	.word	0x08016df0

0800ac74 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b085      	sub	sp, #20
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	60f8      	str	r0, [r7, #12]
 800ac7c:	60b9      	str	r1, [r7, #8]
 800ac7e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ac80:	f06f 030b 	mvn.w	r3, #11
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3714      	adds	r7, #20
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b085      	sub	sp, #20
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	4603      	mov	r3, r0
 800ac98:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ac9a:	79fb      	ldrb	r3, [r7, #7]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d013      	beq.n	800acc8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800aca0:	4b0d      	ldr	r3, [pc, #52]	; (800acd8 <netif_get_by_index+0x48>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	60fb      	str	r3, [r7, #12]
 800aca6:	e00c      	b.n	800acc2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800acae:	3301      	adds	r3, #1
 800acb0:	b2db      	uxtb	r3, r3
 800acb2:	79fa      	ldrb	r2, [r7, #7]
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d101      	bne.n	800acbc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	e006      	b.n	800acca <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	60fb      	str	r3, [r7, #12]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d1ef      	bne.n	800aca8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800acc8:	2300      	movs	r3, #0
}
 800acca:	4618      	mov	r0, r3
 800accc:	3714      	adds	r7, #20
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr
 800acd6:	bf00      	nop
 800acd8:	200076e4 	.word	0x200076e4

0800acdc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ace2:	4b0c      	ldr	r3, [pc, #48]	; (800ad14 <pbuf_free_ooseq+0x38>)
 800ace4:	2200      	movs	r2, #0
 800ace6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ace8:	4b0b      	ldr	r3, [pc, #44]	; (800ad18 <pbuf_free_ooseq+0x3c>)
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	607b      	str	r3, [r7, #4]
 800acee:	e00a      	b.n	800ad06 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d003      	beq.n	800ad00 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f002 f93d 	bl	800cf78 <tcp_free_ooseq>
      return;
 800acfe:	e005      	b.n	800ad0c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	607b      	str	r3, [r7, #4]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d1f1      	bne.n	800acf0 <pbuf_free_ooseq+0x14>
    }
  }
}
 800ad0c:	3708      	adds	r7, #8
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	200076ec 	.word	0x200076ec
 800ad18:	200076f4 	.word	0x200076f4

0800ad1c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800ad20:	4b03      	ldr	r3, [pc, #12]	; (800ad30 <pbuf_pool_is_empty+0x14>)
 800ad22:	2201      	movs	r2, #1
 800ad24:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ad26:	bf00      	nop
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr
 800ad30:	200076ec 	.word	0x200076ec

0800ad34 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b085      	sub	sp, #20
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	4611      	mov	r1, r2
 800ad40:	461a      	mov	r2, r3
 800ad42:	460b      	mov	r3, r1
 800ad44:	80fb      	strh	r3, [r7, #6]
 800ad46:	4613      	mov	r3, r2
 800ad48:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	68ba      	ldr	r2, [r7, #8]
 800ad54:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	88fa      	ldrh	r2, [r7, #6]
 800ad5a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	88ba      	ldrh	r2, [r7, #4]
 800ad60:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ad62:	8b3b      	ldrh	r3, [r7, #24]
 800ad64:	b2da      	uxtb	r2, r3
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	7f3a      	ldrb	r2, [r7, #28]
 800ad6e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2201      	movs	r2, #1
 800ad74:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	73da      	strb	r2, [r3, #15]
}
 800ad7c:	bf00      	nop
 800ad7e:	3714      	adds	r7, #20
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b08c      	sub	sp, #48	; 0x30
 800ad8c:	af02      	add	r7, sp, #8
 800ad8e:	4603      	mov	r3, r0
 800ad90:	71fb      	strb	r3, [r7, #7]
 800ad92:	460b      	mov	r3, r1
 800ad94:	80bb      	strh	r3, [r7, #4]
 800ad96:	4613      	mov	r3, r2
 800ad98:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ad9a:	79fb      	ldrb	r3, [r7, #7]
 800ad9c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ad9e:	887b      	ldrh	r3, [r7, #2]
 800ada0:	2b41      	cmp	r3, #65	; 0x41
 800ada2:	d00b      	beq.n	800adbc <pbuf_alloc+0x34>
 800ada4:	2b41      	cmp	r3, #65	; 0x41
 800ada6:	dc02      	bgt.n	800adae <pbuf_alloc+0x26>
 800ada8:	2b01      	cmp	r3, #1
 800adaa:	d007      	beq.n	800adbc <pbuf_alloc+0x34>
 800adac:	e0c2      	b.n	800af34 <pbuf_alloc+0x1ac>
 800adae:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800adb2:	d00b      	beq.n	800adcc <pbuf_alloc+0x44>
 800adb4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800adb8:	d070      	beq.n	800ae9c <pbuf_alloc+0x114>
 800adba:	e0bb      	b.n	800af34 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800adbc:	887a      	ldrh	r2, [r7, #2]
 800adbe:	88bb      	ldrh	r3, [r7, #4]
 800adc0:	4619      	mov	r1, r3
 800adc2:	2000      	movs	r0, #0
 800adc4:	f000 f8d2 	bl	800af6c <pbuf_alloc_reference>
 800adc8:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800adca:	e0bd      	b.n	800af48 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800adcc:	2300      	movs	r3, #0
 800adce:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800add0:	2300      	movs	r3, #0
 800add2:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800add4:	88bb      	ldrh	r3, [r7, #4]
 800add6:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800add8:	2008      	movs	r0, #8
 800adda:	f7ff fc69 	bl	800a6b0 <memp_malloc>
 800adde:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d109      	bne.n	800adfa <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800ade6:	f7ff ff99 	bl	800ad1c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800adea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adec:	2b00      	cmp	r3, #0
 800adee:	d002      	beq.n	800adf6 <pbuf_alloc+0x6e>
            pbuf_free(p);
 800adf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800adf2:	f000 faa9 	bl	800b348 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800adf6:	2300      	movs	r3, #0
 800adf8:	e0a7      	b.n	800af4a <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800adfa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800adfc:	3303      	adds	r3, #3
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	f023 0303 	bic.w	r3, r3, #3
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	8b7a      	ldrh	r2, [r7, #26]
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	bf28      	it	cs
 800ae12:	4613      	movcs	r3, r2
 800ae14:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ae16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae18:	3310      	adds	r3, #16
 800ae1a:	693a      	ldr	r2, [r7, #16]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	3303      	adds	r3, #3
 800ae20:	f023 0303 	bic.w	r3, r3, #3
 800ae24:	4618      	mov	r0, r3
 800ae26:	89f9      	ldrh	r1, [r7, #14]
 800ae28:	8b7a      	ldrh	r2, [r7, #26]
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	9301      	str	r3, [sp, #4]
 800ae2e:	887b      	ldrh	r3, [r7, #2]
 800ae30:	9300      	str	r3, [sp, #0]
 800ae32:	460b      	mov	r3, r1
 800ae34:	4601      	mov	r1, r0
 800ae36:	6938      	ldr	r0, [r7, #16]
 800ae38:	f7ff ff7c 	bl	800ad34 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	685b      	ldr	r3, [r3, #4]
 800ae40:	f003 0303 	and.w	r3, r3, #3
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d006      	beq.n	800ae56 <pbuf_alloc+0xce>
 800ae48:	4b42      	ldr	r3, [pc, #264]	; (800af54 <pbuf_alloc+0x1cc>)
 800ae4a:	f240 1201 	movw	r2, #257	; 0x101
 800ae4e:	4942      	ldr	r1, [pc, #264]	; (800af58 <pbuf_alloc+0x1d0>)
 800ae50:	4842      	ldr	r0, [pc, #264]	; (800af5c <pbuf_alloc+0x1d4>)
 800ae52:	f00a feff 	bl	8015c54 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ae56:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae58:	3303      	adds	r3, #3
 800ae5a:	f023 0303 	bic.w	r3, r3, #3
 800ae5e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800ae62:	d106      	bne.n	800ae72 <pbuf_alloc+0xea>
 800ae64:	4b3b      	ldr	r3, [pc, #236]	; (800af54 <pbuf_alloc+0x1cc>)
 800ae66:	f240 1203 	movw	r2, #259	; 0x103
 800ae6a:	493d      	ldr	r1, [pc, #244]	; (800af60 <pbuf_alloc+0x1d8>)
 800ae6c:	483b      	ldr	r0, [pc, #236]	; (800af5c <pbuf_alloc+0x1d4>)
 800ae6e:	f00a fef1 	bl	8015c54 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ae72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d102      	bne.n	800ae7e <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	627b      	str	r3, [r7, #36]	; 0x24
 800ae7c:	e002      	b.n	800ae84 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	693a      	ldr	r2, [r7, #16]
 800ae82:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ae88:	8b7a      	ldrh	r2, [r7, #26]
 800ae8a:	89fb      	ldrh	r3, [r7, #14]
 800ae8c:	1ad3      	subs	r3, r2, r3
 800ae8e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ae90:	2300      	movs	r3, #0
 800ae92:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800ae94:	8b7b      	ldrh	r3, [r7, #26]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d19e      	bne.n	800add8 <pbuf_alloc+0x50>
      break;
 800ae9a:	e055      	b.n	800af48 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ae9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae9e:	3303      	adds	r3, #3
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	f023 0303 	bic.w	r3, r3, #3
 800aea6:	b29a      	uxth	r2, r3
 800aea8:	88bb      	ldrh	r3, [r7, #4]
 800aeaa:	3303      	adds	r3, #3
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	f023 0303 	bic.w	r3, r3, #3
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	4413      	add	r3, r2
 800aeb6:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800aeb8:	8b3b      	ldrh	r3, [r7, #24]
 800aeba:	3310      	adds	r3, #16
 800aebc:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800aebe:	8b3a      	ldrh	r2, [r7, #24]
 800aec0:	88bb      	ldrh	r3, [r7, #4]
 800aec2:	3303      	adds	r3, #3
 800aec4:	f023 0303 	bic.w	r3, r3, #3
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d306      	bcc.n	800aeda <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800aecc:	8afa      	ldrh	r2, [r7, #22]
 800aece:	88bb      	ldrh	r3, [r7, #4]
 800aed0:	3303      	adds	r3, #3
 800aed2:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d201      	bcs.n	800aede <pbuf_alloc+0x156>
        return NULL;
 800aeda:	2300      	movs	r3, #0
 800aedc:	e035      	b.n	800af4a <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800aede:	8afb      	ldrh	r3, [r7, #22]
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7ff fa77 	bl	800a3d4 <mem_malloc>
 800aee6:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800aee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d101      	bne.n	800aef2 <pbuf_alloc+0x16a>
        return NULL;
 800aeee:	2300      	movs	r3, #0
 800aef0:	e02b      	b.n	800af4a <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800aef2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aef4:	3310      	adds	r3, #16
 800aef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aef8:	4413      	add	r3, r2
 800aefa:	3303      	adds	r3, #3
 800aefc:	f023 0303 	bic.w	r3, r3, #3
 800af00:	4618      	mov	r0, r3
 800af02:	88b9      	ldrh	r1, [r7, #4]
 800af04:	88ba      	ldrh	r2, [r7, #4]
 800af06:	2300      	movs	r3, #0
 800af08:	9301      	str	r3, [sp, #4]
 800af0a:	887b      	ldrh	r3, [r7, #2]
 800af0c:	9300      	str	r3, [sp, #0]
 800af0e:	460b      	mov	r3, r1
 800af10:	4601      	mov	r1, r0
 800af12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af14:	f7ff ff0e 	bl	800ad34 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800af18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	f003 0303 	and.w	r3, r3, #3
 800af20:	2b00      	cmp	r3, #0
 800af22:	d010      	beq.n	800af46 <pbuf_alloc+0x1be>
 800af24:	4b0b      	ldr	r3, [pc, #44]	; (800af54 <pbuf_alloc+0x1cc>)
 800af26:	f240 1223 	movw	r2, #291	; 0x123
 800af2a:	490e      	ldr	r1, [pc, #56]	; (800af64 <pbuf_alloc+0x1dc>)
 800af2c:	480b      	ldr	r0, [pc, #44]	; (800af5c <pbuf_alloc+0x1d4>)
 800af2e:	f00a fe91 	bl	8015c54 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800af32:	e008      	b.n	800af46 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800af34:	4b07      	ldr	r3, [pc, #28]	; (800af54 <pbuf_alloc+0x1cc>)
 800af36:	f240 1227 	movw	r2, #295	; 0x127
 800af3a:	490b      	ldr	r1, [pc, #44]	; (800af68 <pbuf_alloc+0x1e0>)
 800af3c:	4807      	ldr	r0, [pc, #28]	; (800af5c <pbuf_alloc+0x1d4>)
 800af3e:	f00a fe89 	bl	8015c54 <iprintf>
      return NULL;
 800af42:	2300      	movs	r3, #0
 800af44:	e001      	b.n	800af4a <pbuf_alloc+0x1c2>
      break;
 800af46:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800af48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3728      	adds	r7, #40	; 0x28
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
 800af52:	bf00      	nop
 800af54:	08016fd0 	.word	0x08016fd0
 800af58:	08017000 	.word	0x08017000
 800af5c:	08017030 	.word	0x08017030
 800af60:	08017058 	.word	0x08017058
 800af64:	0801708c 	.word	0x0801708c
 800af68:	080170b8 	.word	0x080170b8

0800af6c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b086      	sub	sp, #24
 800af70:	af02      	add	r7, sp, #8
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	460b      	mov	r3, r1
 800af76:	807b      	strh	r3, [r7, #2]
 800af78:	4613      	mov	r3, r2
 800af7a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800af7c:	883b      	ldrh	r3, [r7, #0]
 800af7e:	2b41      	cmp	r3, #65	; 0x41
 800af80:	d009      	beq.n	800af96 <pbuf_alloc_reference+0x2a>
 800af82:	883b      	ldrh	r3, [r7, #0]
 800af84:	2b01      	cmp	r3, #1
 800af86:	d006      	beq.n	800af96 <pbuf_alloc_reference+0x2a>
 800af88:	4b0f      	ldr	r3, [pc, #60]	; (800afc8 <pbuf_alloc_reference+0x5c>)
 800af8a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800af8e:	490f      	ldr	r1, [pc, #60]	; (800afcc <pbuf_alloc_reference+0x60>)
 800af90:	480f      	ldr	r0, [pc, #60]	; (800afd0 <pbuf_alloc_reference+0x64>)
 800af92:	f00a fe5f 	bl	8015c54 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800af96:	2007      	movs	r0, #7
 800af98:	f7ff fb8a 	bl	800a6b0 <memp_malloc>
 800af9c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d101      	bne.n	800afa8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800afa4:	2300      	movs	r3, #0
 800afa6:	e00b      	b.n	800afc0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800afa8:	8879      	ldrh	r1, [r7, #2]
 800afaa:	887a      	ldrh	r2, [r7, #2]
 800afac:	2300      	movs	r3, #0
 800afae:	9301      	str	r3, [sp, #4]
 800afb0:	883b      	ldrh	r3, [r7, #0]
 800afb2:	9300      	str	r3, [sp, #0]
 800afb4:	460b      	mov	r3, r1
 800afb6:	6879      	ldr	r1, [r7, #4]
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	f7ff febb 	bl	800ad34 <pbuf_init_alloced_pbuf>
  return p;
 800afbe:	68fb      	ldr	r3, [r7, #12]
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}
 800afc8:	08016fd0 	.word	0x08016fd0
 800afcc:	080170d4 	.word	0x080170d4
 800afd0:	08017030 	.word	0x08017030

0800afd4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b088      	sub	sp, #32
 800afd8:	af02      	add	r7, sp, #8
 800afda:	607b      	str	r3, [r7, #4]
 800afdc:	4603      	mov	r3, r0
 800afde:	73fb      	strb	r3, [r7, #15]
 800afe0:	460b      	mov	r3, r1
 800afe2:	81bb      	strh	r3, [r7, #12]
 800afe4:	4613      	mov	r3, r2
 800afe6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800afe8:	7bfb      	ldrb	r3, [r7, #15]
 800afea:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800afec:	8a7b      	ldrh	r3, [r7, #18]
 800afee:	3303      	adds	r3, #3
 800aff0:	f023 0203 	bic.w	r2, r3, #3
 800aff4:	89bb      	ldrh	r3, [r7, #12]
 800aff6:	441a      	add	r2, r3
 800aff8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800affa:	429a      	cmp	r2, r3
 800affc:	d901      	bls.n	800b002 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800affe:	2300      	movs	r3, #0
 800b000:	e018      	b.n	800b034 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b002:	6a3b      	ldr	r3, [r7, #32]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d007      	beq.n	800b018 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b008:	8a7b      	ldrh	r3, [r7, #18]
 800b00a:	3303      	adds	r3, #3
 800b00c:	f023 0303 	bic.w	r3, r3, #3
 800b010:	6a3a      	ldr	r2, [r7, #32]
 800b012:	4413      	add	r3, r2
 800b014:	617b      	str	r3, [r7, #20]
 800b016:	e001      	b.n	800b01c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b018:	2300      	movs	r3, #0
 800b01a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	89b9      	ldrh	r1, [r7, #12]
 800b020:	89ba      	ldrh	r2, [r7, #12]
 800b022:	2302      	movs	r3, #2
 800b024:	9301      	str	r3, [sp, #4]
 800b026:	897b      	ldrh	r3, [r7, #10]
 800b028:	9300      	str	r3, [sp, #0]
 800b02a:	460b      	mov	r3, r1
 800b02c:	6979      	ldr	r1, [r7, #20]
 800b02e:	f7ff fe81 	bl	800ad34 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b032:	687b      	ldr	r3, [r7, #4]
}
 800b034:	4618      	mov	r0, r3
 800b036:	3718      	adds	r7, #24
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	460b      	mov	r3, r1
 800b046:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d106      	bne.n	800b05c <pbuf_realloc+0x20>
 800b04e:	4b3a      	ldr	r3, [pc, #232]	; (800b138 <pbuf_realloc+0xfc>)
 800b050:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b054:	4939      	ldr	r1, [pc, #228]	; (800b13c <pbuf_realloc+0x100>)
 800b056:	483a      	ldr	r0, [pc, #232]	; (800b140 <pbuf_realloc+0x104>)
 800b058:	f00a fdfc 	bl	8015c54 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	891b      	ldrh	r3, [r3, #8]
 800b060:	887a      	ldrh	r2, [r7, #2]
 800b062:	429a      	cmp	r2, r3
 800b064:	d264      	bcs.n	800b130 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	891a      	ldrh	r2, [r3, #8]
 800b06a:	887b      	ldrh	r3, [r7, #2]
 800b06c:	1ad3      	subs	r3, r2, r3
 800b06e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b070:	887b      	ldrh	r3, [r7, #2]
 800b072:	817b      	strh	r3, [r7, #10]
  q = p;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b078:	e018      	b.n	800b0ac <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	895b      	ldrh	r3, [r3, #10]
 800b07e:	897a      	ldrh	r2, [r7, #10]
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	891a      	ldrh	r2, [r3, #8]
 800b088:	893b      	ldrh	r3, [r7, #8]
 800b08a:	1ad3      	subs	r3, r2, r3
 800b08c:	b29a      	uxth	r2, r3
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d106      	bne.n	800b0ac <pbuf_realloc+0x70>
 800b09e:	4b26      	ldr	r3, [pc, #152]	; (800b138 <pbuf_realloc+0xfc>)
 800b0a0:	f240 12af 	movw	r2, #431	; 0x1af
 800b0a4:	4927      	ldr	r1, [pc, #156]	; (800b144 <pbuf_realloc+0x108>)
 800b0a6:	4826      	ldr	r0, [pc, #152]	; (800b140 <pbuf_realloc+0x104>)
 800b0a8:	f00a fdd4 	bl	8015c54 <iprintf>
  while (rem_len > q->len) {
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	895b      	ldrh	r3, [r3, #10]
 800b0b0:	897a      	ldrh	r2, [r7, #10]
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d8e1      	bhi.n	800b07a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	7b1b      	ldrb	r3, [r3, #12]
 800b0ba:	f003 030f 	and.w	r3, r3, #15
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d122      	bne.n	800b108 <pbuf_realloc+0xcc>
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	895b      	ldrh	r3, [r3, #10]
 800b0c6:	897a      	ldrh	r2, [r7, #10]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d01d      	beq.n	800b108 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	7b5b      	ldrb	r3, [r3, #13]
 800b0d0:	f003 0302 	and.w	r3, r3, #2
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d117      	bne.n	800b108 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	461a      	mov	r2, r3
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	1ad3      	subs	r3, r2, r3
 800b0e2:	b29a      	uxth	r2, r3
 800b0e4:	897b      	ldrh	r3, [r7, #10]
 800b0e6:	4413      	add	r3, r2
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	f7ff f875 	bl	800a1dc <mem_trim>
 800b0f2:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d106      	bne.n	800b108 <pbuf_realloc+0xcc>
 800b0fa:	4b0f      	ldr	r3, [pc, #60]	; (800b138 <pbuf_realloc+0xfc>)
 800b0fc:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b100:	4911      	ldr	r1, [pc, #68]	; (800b148 <pbuf_realloc+0x10c>)
 800b102:	480f      	ldr	r0, [pc, #60]	; (800b140 <pbuf_realloc+0x104>)
 800b104:	f00a fda6 	bl	8015c54 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	897a      	ldrh	r2, [r7, #10]
 800b10c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	895a      	ldrh	r2, [r3, #10]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d004      	beq.n	800b128 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4618      	mov	r0, r3
 800b124:	f000 f910 	bl	800b348 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2200      	movs	r2, #0
 800b12c:	601a      	str	r2, [r3, #0]
 800b12e:	e000      	b.n	800b132 <pbuf_realloc+0xf6>
    return;
 800b130:	bf00      	nop

}
 800b132:	3710      	adds	r7, #16
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}
 800b138:	08016fd0 	.word	0x08016fd0
 800b13c:	080170e8 	.word	0x080170e8
 800b140:	08017030 	.word	0x08017030
 800b144:	08017100 	.word	0x08017100
 800b148:	08017118 	.word	0x08017118

0800b14c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b086      	sub	sp, #24
 800b150:	af00      	add	r7, sp, #0
 800b152:	60f8      	str	r0, [r7, #12]
 800b154:	60b9      	str	r1, [r7, #8]
 800b156:	4613      	mov	r3, r2
 800b158:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d106      	bne.n	800b16e <pbuf_add_header_impl+0x22>
 800b160:	4b2b      	ldr	r3, [pc, #172]	; (800b210 <pbuf_add_header_impl+0xc4>)
 800b162:	f240 12df 	movw	r2, #479	; 0x1df
 800b166:	492b      	ldr	r1, [pc, #172]	; (800b214 <pbuf_add_header_impl+0xc8>)
 800b168:	482b      	ldr	r0, [pc, #172]	; (800b218 <pbuf_add_header_impl+0xcc>)
 800b16a:	f00a fd73 	bl	8015c54 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d003      	beq.n	800b17c <pbuf_add_header_impl+0x30>
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b17a:	d301      	bcc.n	800b180 <pbuf_add_header_impl+0x34>
    return 1;
 800b17c:	2301      	movs	r3, #1
 800b17e:	e043      	b.n	800b208 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d101      	bne.n	800b18a <pbuf_add_header_impl+0x3e>
    return 0;
 800b186:	2300      	movs	r3, #0
 800b188:	e03e      	b.n	800b208 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	891a      	ldrh	r2, [r3, #8]
 800b192:	8a7b      	ldrh	r3, [r7, #18]
 800b194:	4413      	add	r3, r2
 800b196:	b29b      	uxth	r3, r3
 800b198:	8a7a      	ldrh	r2, [r7, #18]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d901      	bls.n	800b1a2 <pbuf_add_header_impl+0x56>
    return 1;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	e032      	b.n	800b208 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	7b1b      	ldrb	r3, [r3, #12]
 800b1a6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b1a8:	8a3b      	ldrh	r3, [r7, #16]
 800b1aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d00c      	beq.n	800b1cc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	685a      	ldr	r2, [r3, #4]
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	425b      	negs	r3, r3
 800b1ba:	4413      	add	r3, r2
 800b1bc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	3310      	adds	r3, #16
 800b1c2:	697a      	ldr	r2, [r7, #20]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d20d      	bcs.n	800b1e4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	e01d      	b.n	800b208 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b1cc:	79fb      	ldrb	r3, [r7, #7]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d006      	beq.n	800b1e0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	685a      	ldr	r2, [r3, #4]
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	425b      	negs	r3, r3
 800b1da:	4413      	add	r3, r2
 800b1dc:	617b      	str	r3, [r7, #20]
 800b1de:	e001      	b.n	800b1e4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	e011      	b.n	800b208 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	697a      	ldr	r2, [r7, #20]
 800b1e8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	895a      	ldrh	r2, [r3, #10]
 800b1ee:	8a7b      	ldrh	r3, [r7, #18]
 800b1f0:	4413      	add	r3, r2
 800b1f2:	b29a      	uxth	r2, r3
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	891a      	ldrh	r2, [r3, #8]
 800b1fc:	8a7b      	ldrh	r3, [r7, #18]
 800b1fe:	4413      	add	r3, r2
 800b200:	b29a      	uxth	r2, r3
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	811a      	strh	r2, [r3, #8]


  return 0;
 800b206:	2300      	movs	r3, #0
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3718      	adds	r7, #24
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	08016fd0 	.word	0x08016fd0
 800b214:	08017134 	.word	0x08017134
 800b218:	08017030 	.word	0x08017030

0800b21c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b226:	2200      	movs	r2, #0
 800b228:	6839      	ldr	r1, [r7, #0]
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f7ff ff8e 	bl	800b14c <pbuf_add_header_impl>
 800b230:	4603      	mov	r3, r0
}
 800b232:	4618      	mov	r0, r3
 800b234:	3708      	adds	r7, #8
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
	...

0800b23c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d106      	bne.n	800b25a <pbuf_remove_header+0x1e>
 800b24c:	4b20      	ldr	r3, [pc, #128]	; (800b2d0 <pbuf_remove_header+0x94>)
 800b24e:	f240 224b 	movw	r2, #587	; 0x24b
 800b252:	4920      	ldr	r1, [pc, #128]	; (800b2d4 <pbuf_remove_header+0x98>)
 800b254:	4820      	ldr	r0, [pc, #128]	; (800b2d8 <pbuf_remove_header+0x9c>)
 800b256:	f00a fcfd 	bl	8015c54 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d003      	beq.n	800b268 <pbuf_remove_header+0x2c>
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b266:	d301      	bcc.n	800b26c <pbuf_remove_header+0x30>
    return 1;
 800b268:	2301      	movs	r3, #1
 800b26a:	e02c      	b.n	800b2c6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d101      	bne.n	800b276 <pbuf_remove_header+0x3a>
    return 0;
 800b272:	2300      	movs	r3, #0
 800b274:	e027      	b.n	800b2c6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	895b      	ldrh	r3, [r3, #10]
 800b27e:	89fa      	ldrh	r2, [r7, #14]
 800b280:	429a      	cmp	r2, r3
 800b282:	d908      	bls.n	800b296 <pbuf_remove_header+0x5a>
 800b284:	4b12      	ldr	r3, [pc, #72]	; (800b2d0 <pbuf_remove_header+0x94>)
 800b286:	f240 2255 	movw	r2, #597	; 0x255
 800b28a:	4914      	ldr	r1, [pc, #80]	; (800b2dc <pbuf_remove_header+0xa0>)
 800b28c:	4812      	ldr	r0, [pc, #72]	; (800b2d8 <pbuf_remove_header+0x9c>)
 800b28e:	f00a fce1 	bl	8015c54 <iprintf>
 800b292:	2301      	movs	r3, #1
 800b294:	e017      	b.n	800b2c6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685a      	ldr	r2, [r3, #4]
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	441a      	add	r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	895a      	ldrh	r2, [r3, #10]
 800b2ac:	89fb      	ldrh	r3, [r7, #14]
 800b2ae:	1ad3      	subs	r3, r2, r3
 800b2b0:	b29a      	uxth	r2, r3
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	891a      	ldrh	r2, [r3, #8]
 800b2ba:	89fb      	ldrh	r3, [r7, #14]
 800b2bc:	1ad3      	subs	r3, r2, r3
 800b2be:	b29a      	uxth	r2, r3
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b2c4:	2300      	movs	r3, #0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3710      	adds	r7, #16
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	08016fd0 	.word	0x08016fd0
 800b2d4:	08017134 	.word	0x08017134
 800b2d8:	08017030 	.word	0x08017030
 800b2dc:	08017140 	.word	0x08017140

0800b2e0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	807b      	strh	r3, [r7, #2]
 800b2ec:	4613      	mov	r3, r2
 800b2ee:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b2f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	da08      	bge.n	800b30a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b2f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b2fc:	425b      	negs	r3, r3
 800b2fe:	4619      	mov	r1, r3
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f7ff ff9b 	bl	800b23c <pbuf_remove_header>
 800b306:	4603      	mov	r3, r0
 800b308:	e007      	b.n	800b31a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b30a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b30e:	787a      	ldrb	r2, [r7, #1]
 800b310:	4619      	mov	r1, r3
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f7ff ff1a 	bl	800b14c <pbuf_add_header_impl>
 800b318:	4603      	mov	r3, r0
  }
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3708      	adds	r7, #8
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b322:	b580      	push	{r7, lr}
 800b324:	b082      	sub	sp, #8
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
 800b32a:	460b      	mov	r3, r1
 800b32c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b32e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b332:	2201      	movs	r2, #1
 800b334:	4619      	mov	r1, r3
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f7ff ffd2 	bl	800b2e0 <pbuf_header_impl>
 800b33c:	4603      	mov	r3, r0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3708      	adds	r7, #8
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
	...

0800b348 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b086      	sub	sp, #24
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d10b      	bne.n	800b36e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d106      	bne.n	800b36a <pbuf_free+0x22>
 800b35c:	4b38      	ldr	r3, [pc, #224]	; (800b440 <pbuf_free+0xf8>)
 800b35e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b362:	4938      	ldr	r1, [pc, #224]	; (800b444 <pbuf_free+0xfc>)
 800b364:	4838      	ldr	r0, [pc, #224]	; (800b448 <pbuf_free+0x100>)
 800b366:	f00a fc75 	bl	8015c54 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b36a:	2300      	movs	r3, #0
 800b36c:	e063      	b.n	800b436 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b36e:	2300      	movs	r3, #0
 800b370:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b372:	e05c      	b.n	800b42e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	7b9b      	ldrb	r3, [r3, #14]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d106      	bne.n	800b38a <pbuf_free+0x42>
 800b37c:	4b30      	ldr	r3, [pc, #192]	; (800b440 <pbuf_free+0xf8>)
 800b37e:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b382:	4932      	ldr	r1, [pc, #200]	; (800b44c <pbuf_free+0x104>)
 800b384:	4830      	ldr	r0, [pc, #192]	; (800b448 <pbuf_free+0x100>)
 800b386:	f00a fc65 	bl	8015c54 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	7b9b      	ldrb	r3, [r3, #14]
 800b38e:	3b01      	subs	r3, #1
 800b390:	b2da      	uxtb	r2, r3
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	739a      	strb	r2, [r3, #14]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	7b9b      	ldrb	r3, [r3, #14]
 800b39a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b39c:	7dbb      	ldrb	r3, [r7, #22]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d143      	bne.n	800b42a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	7b1b      	ldrb	r3, [r3, #12]
 800b3ac:	f003 030f 	and.w	r3, r3, #15
 800b3b0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	7b5b      	ldrb	r3, [r3, #13]
 800b3b6:	f003 0302 	and.w	r3, r3, #2
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d011      	beq.n	800b3e2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	691b      	ldr	r3, [r3, #16]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d106      	bne.n	800b3d8 <pbuf_free+0x90>
 800b3ca:	4b1d      	ldr	r3, [pc, #116]	; (800b440 <pbuf_free+0xf8>)
 800b3cc:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b3d0:	491f      	ldr	r1, [pc, #124]	; (800b450 <pbuf_free+0x108>)
 800b3d2:	481d      	ldr	r0, [pc, #116]	; (800b448 <pbuf_free+0x100>)
 800b3d4:	f00a fc3e 	bl	8015c54 <iprintf>
        pc->custom_free_function(p);
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	691b      	ldr	r3, [r3, #16]
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	4798      	blx	r3
 800b3e0:	e01d      	b.n	800b41e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b3e2:	7bfb      	ldrb	r3, [r7, #15]
 800b3e4:	2b02      	cmp	r3, #2
 800b3e6:	d104      	bne.n	800b3f2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800b3e8:	6879      	ldr	r1, [r7, #4]
 800b3ea:	2008      	movs	r0, #8
 800b3ec:	f7ff f9ac 	bl	800a748 <memp_free>
 800b3f0:	e015      	b.n	800b41e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b3f2:	7bfb      	ldrb	r3, [r7, #15]
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d104      	bne.n	800b402 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800b3f8:	6879      	ldr	r1, [r7, #4]
 800b3fa:	2007      	movs	r0, #7
 800b3fc:	f7ff f9a4 	bl	800a748 <memp_free>
 800b400:	e00d      	b.n	800b41e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b402:	7bfb      	ldrb	r3, [r7, #15]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d103      	bne.n	800b410 <pbuf_free+0xc8>
          mem_free(p);
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f7fe fe7d 	bl	800a108 <mem_free>
 800b40e:	e006      	b.n	800b41e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b410:	4b0b      	ldr	r3, [pc, #44]	; (800b440 <pbuf_free+0xf8>)
 800b412:	f240 320f 	movw	r2, #783	; 0x30f
 800b416:	490f      	ldr	r1, [pc, #60]	; (800b454 <pbuf_free+0x10c>)
 800b418:	480b      	ldr	r0, [pc, #44]	; (800b448 <pbuf_free+0x100>)
 800b41a:	f00a fc1b 	bl	8015c54 <iprintf>
        }
      }
      count++;
 800b41e:	7dfb      	ldrb	r3, [r7, #23]
 800b420:	3301      	adds	r3, #1
 800b422:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	607b      	str	r3, [r7, #4]
 800b428:	e001      	b.n	800b42e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b42a:	2300      	movs	r3, #0
 800b42c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d19f      	bne.n	800b374 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b434:	7dfb      	ldrb	r3, [r7, #23]
}
 800b436:	4618      	mov	r0, r3
 800b438:	3718      	adds	r7, #24
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	08016fd0 	.word	0x08016fd0
 800b444:	08017134 	.word	0x08017134
 800b448:	08017030 	.word	0x08017030
 800b44c:	08017160 	.word	0x08017160
 800b450:	08017178 	.word	0x08017178
 800b454:	0801719c 	.word	0x0801719c

0800b458 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b458:	b480      	push	{r7}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b460:	2300      	movs	r3, #0
 800b462:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b464:	e005      	b.n	800b472 <pbuf_clen+0x1a>
    ++len;
 800b466:	89fb      	ldrh	r3, [r7, #14]
 800b468:	3301      	adds	r3, #1
 800b46a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d1f6      	bne.n	800b466 <pbuf_clen+0xe>
  }
  return len;
 800b478:	89fb      	ldrh	r3, [r7, #14]
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3714      	adds	r7, #20
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr
	...

0800b488 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d010      	beq.n	800b4b8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	7b9b      	ldrb	r3, [r3, #14]
 800b49a:	3301      	adds	r3, #1
 800b49c:	b2da      	uxtb	r2, r3
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	7b9b      	ldrb	r3, [r3, #14]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d106      	bne.n	800b4b8 <pbuf_ref+0x30>
 800b4aa:	4b05      	ldr	r3, [pc, #20]	; (800b4c0 <pbuf_ref+0x38>)
 800b4ac:	f240 3242 	movw	r2, #834	; 0x342
 800b4b0:	4904      	ldr	r1, [pc, #16]	; (800b4c4 <pbuf_ref+0x3c>)
 800b4b2:	4805      	ldr	r0, [pc, #20]	; (800b4c8 <pbuf_ref+0x40>)
 800b4b4:	f00a fbce 	bl	8015c54 <iprintf>
  }
}
 800b4b8:	bf00      	nop
 800b4ba:	3708      	adds	r7, #8
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	08016fd0 	.word	0x08016fd0
 800b4c4:	080171b0 	.word	0x080171b0
 800b4c8:	08017030 	.word	0x08017030

0800b4cc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d002      	beq.n	800b4e2 <pbuf_cat+0x16>
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d107      	bne.n	800b4f2 <pbuf_cat+0x26>
 800b4e2:	4b20      	ldr	r3, [pc, #128]	; (800b564 <pbuf_cat+0x98>)
 800b4e4:	f240 325a 	movw	r2, #858	; 0x35a
 800b4e8:	491f      	ldr	r1, [pc, #124]	; (800b568 <pbuf_cat+0x9c>)
 800b4ea:	4820      	ldr	r0, [pc, #128]	; (800b56c <pbuf_cat+0xa0>)
 800b4ec:	f00a fbb2 	bl	8015c54 <iprintf>
 800b4f0:	e034      	b.n	800b55c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	60fb      	str	r3, [r7, #12]
 800b4f6:	e00a      	b.n	800b50e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	891a      	ldrh	r2, [r3, #8]
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	891b      	ldrh	r3, [r3, #8]
 800b500:	4413      	add	r3, r2
 800b502:	b29a      	uxth	r2, r3
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	60fb      	str	r3, [r7, #12]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d1f0      	bne.n	800b4f8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	891a      	ldrh	r2, [r3, #8]
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	895b      	ldrh	r3, [r3, #10]
 800b51e:	429a      	cmp	r2, r3
 800b520:	d006      	beq.n	800b530 <pbuf_cat+0x64>
 800b522:	4b10      	ldr	r3, [pc, #64]	; (800b564 <pbuf_cat+0x98>)
 800b524:	f240 3262 	movw	r2, #866	; 0x362
 800b528:	4911      	ldr	r1, [pc, #68]	; (800b570 <pbuf_cat+0xa4>)
 800b52a:	4810      	ldr	r0, [pc, #64]	; (800b56c <pbuf_cat+0xa0>)
 800b52c:	f00a fb92 	bl	8015c54 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d006      	beq.n	800b546 <pbuf_cat+0x7a>
 800b538:	4b0a      	ldr	r3, [pc, #40]	; (800b564 <pbuf_cat+0x98>)
 800b53a:	f240 3263 	movw	r2, #867	; 0x363
 800b53e:	490d      	ldr	r1, [pc, #52]	; (800b574 <pbuf_cat+0xa8>)
 800b540:	480a      	ldr	r0, [pc, #40]	; (800b56c <pbuf_cat+0xa0>)
 800b542:	f00a fb87 	bl	8015c54 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	891a      	ldrh	r2, [r3, #8]
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	891b      	ldrh	r3, [r3, #8]
 800b54e:	4413      	add	r3, r2
 800b550:	b29a      	uxth	r2, r3
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	683a      	ldr	r2, [r7, #0]
 800b55a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b55c:	3710      	adds	r7, #16
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	08016fd0 	.word	0x08016fd0
 800b568:	080171c4 	.word	0x080171c4
 800b56c:	08017030 	.word	0x08017030
 800b570:	080171fc 	.word	0x080171fc
 800b574:	0801722c 	.word	0x0801722c

0800b578 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b582:	6839      	ldr	r1, [r7, #0]
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f7ff ffa1 	bl	800b4cc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b58a:	6838      	ldr	r0, [r7, #0]
 800b58c:	f7ff ff7c 	bl	800b488 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b590:	bf00      	nop
 800b592:	3708      	adds	r7, #8
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b086      	sub	sp, #24
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	617b      	str	r3, [r7, #20]
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d008      	beq.n	800b5c2 <pbuf_copy+0x2a>
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d005      	beq.n	800b5c2 <pbuf_copy+0x2a>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	891a      	ldrh	r2, [r3, #8]
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	891b      	ldrh	r3, [r3, #8]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d209      	bcs.n	800b5d6 <pbuf_copy+0x3e>
 800b5c2:	4b57      	ldr	r3, [pc, #348]	; (800b720 <pbuf_copy+0x188>)
 800b5c4:	f240 32ca 	movw	r2, #970	; 0x3ca
 800b5c8:	4956      	ldr	r1, [pc, #344]	; (800b724 <pbuf_copy+0x18c>)
 800b5ca:	4857      	ldr	r0, [pc, #348]	; (800b728 <pbuf_copy+0x190>)
 800b5cc:	f00a fb42 	bl	8015c54 <iprintf>
 800b5d0:	f06f 030f 	mvn.w	r3, #15
 800b5d4:	e09f      	b.n	800b716 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	895b      	ldrh	r3, [r3, #10]
 800b5da:	461a      	mov	r2, r3
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	1ad2      	subs	r2, r2, r3
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	895b      	ldrh	r3, [r3, #10]
 800b5e4:	4619      	mov	r1, r3
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	1acb      	subs	r3, r1, r3
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d306      	bcc.n	800b5fc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	895b      	ldrh	r3, [r3, #10]
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	1ad3      	subs	r3, r2, r3
 800b5f8:	60fb      	str	r3, [r7, #12]
 800b5fa:	e005      	b.n	800b608 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	895b      	ldrh	r3, [r3, #10]
 800b600:	461a      	mov	r2, r3
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	1ad3      	subs	r3, r2, r3
 800b606:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	685a      	ldr	r2, [r3, #4]
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	18d0      	adds	r0, r2, r3
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	685a      	ldr	r2, [r3, #4]
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	4413      	add	r3, r2
 800b618:	68fa      	ldr	r2, [r7, #12]
 800b61a:	4619      	mov	r1, r3
 800b61c:	f00a fa5f 	bl	8015ade <memcpy>
    offset_to += len;
 800b620:	697a      	ldr	r2, [r7, #20]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	4413      	add	r3, r2
 800b626:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b628:	693a      	ldr	r2, [r7, #16]
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	4413      	add	r3, r2
 800b62e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	895b      	ldrh	r3, [r3, #10]
 800b634:	461a      	mov	r2, r3
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	4293      	cmp	r3, r2
 800b63a:	d906      	bls.n	800b64a <pbuf_copy+0xb2>
 800b63c:	4b38      	ldr	r3, [pc, #224]	; (800b720 <pbuf_copy+0x188>)
 800b63e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b642:	493a      	ldr	r1, [pc, #232]	; (800b72c <pbuf_copy+0x194>)
 800b644:	4838      	ldr	r0, [pc, #224]	; (800b728 <pbuf_copy+0x190>)
 800b646:	f00a fb05 	bl	8015c54 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	895b      	ldrh	r3, [r3, #10]
 800b64e:	461a      	mov	r2, r3
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	4293      	cmp	r3, r2
 800b654:	d906      	bls.n	800b664 <pbuf_copy+0xcc>
 800b656:	4b32      	ldr	r3, [pc, #200]	; (800b720 <pbuf_copy+0x188>)
 800b658:	f240 32da 	movw	r2, #986	; 0x3da
 800b65c:	4934      	ldr	r1, [pc, #208]	; (800b730 <pbuf_copy+0x198>)
 800b65e:	4832      	ldr	r0, [pc, #200]	; (800b728 <pbuf_copy+0x190>)
 800b660:	f00a faf8 	bl	8015c54 <iprintf>
    if (offset_from >= p_from->len) {
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	895b      	ldrh	r3, [r3, #10]
 800b668:	461a      	mov	r2, r3
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d304      	bcc.n	800b67a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b670:	2300      	movs	r3, #0
 800b672:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	895b      	ldrh	r3, [r3, #10]
 800b67e:	461a      	mov	r2, r3
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	4293      	cmp	r3, r2
 800b684:	d114      	bne.n	800b6b0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b686:	2300      	movs	r3, #0
 800b688:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d10c      	bne.n	800b6b0 <pbuf_copy+0x118>
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d009      	beq.n	800b6b0 <pbuf_copy+0x118>
 800b69c:	4b20      	ldr	r3, [pc, #128]	; (800b720 <pbuf_copy+0x188>)
 800b69e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b6a2:	4924      	ldr	r1, [pc, #144]	; (800b734 <pbuf_copy+0x19c>)
 800b6a4:	4820      	ldr	r0, [pc, #128]	; (800b728 <pbuf_copy+0x190>)
 800b6a6:	f00a fad5 	bl	8015c54 <iprintf>
 800b6aa:	f06f 030f 	mvn.w	r3, #15
 800b6ae:	e032      	b.n	800b716 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d013      	beq.n	800b6de <pbuf_copy+0x146>
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	895a      	ldrh	r2, [r3, #10]
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	891b      	ldrh	r3, [r3, #8]
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d10d      	bne.n	800b6de <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d009      	beq.n	800b6de <pbuf_copy+0x146>
 800b6ca:	4b15      	ldr	r3, [pc, #84]	; (800b720 <pbuf_copy+0x188>)
 800b6cc:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800b6d0:	4919      	ldr	r1, [pc, #100]	; (800b738 <pbuf_copy+0x1a0>)
 800b6d2:	4815      	ldr	r0, [pc, #84]	; (800b728 <pbuf_copy+0x190>)
 800b6d4:	f00a fabe 	bl	8015c54 <iprintf>
 800b6d8:	f06f 0305 	mvn.w	r3, #5
 800b6dc:	e01b      	b.n	800b716 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d013      	beq.n	800b70c <pbuf_copy+0x174>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	895a      	ldrh	r2, [r3, #10]
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	891b      	ldrh	r3, [r3, #8]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d10d      	bne.n	800b70c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d009      	beq.n	800b70c <pbuf_copy+0x174>
 800b6f8:	4b09      	ldr	r3, [pc, #36]	; (800b720 <pbuf_copy+0x188>)
 800b6fa:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800b6fe:	490e      	ldr	r1, [pc, #56]	; (800b738 <pbuf_copy+0x1a0>)
 800b700:	4809      	ldr	r0, [pc, #36]	; (800b728 <pbuf_copy+0x190>)
 800b702:	f00a faa7 	bl	8015c54 <iprintf>
 800b706:	f06f 0305 	mvn.w	r3, #5
 800b70a:	e004      	b.n	800b716 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	f47f af61 	bne.w	800b5d6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b714:	2300      	movs	r3, #0
}
 800b716:	4618      	mov	r0, r3
 800b718:	3718      	adds	r7, #24
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	08016fd0 	.word	0x08016fd0
 800b724:	08017278 	.word	0x08017278
 800b728:	08017030 	.word	0x08017030
 800b72c:	080172a8 	.word	0x080172a8
 800b730:	080172c0 	.word	0x080172c0
 800b734:	080172dc 	.word	0x080172dc
 800b738:	080172ec 	.word	0x080172ec

0800b73c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b088      	sub	sp, #32
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	60b9      	str	r1, [r7, #8]
 800b746:	4611      	mov	r1, r2
 800b748:	461a      	mov	r2, r3
 800b74a:	460b      	mov	r3, r1
 800b74c:	80fb      	strh	r3, [r7, #6]
 800b74e:	4613      	mov	r3, r2
 800b750:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b752:	2300      	movs	r3, #0
 800b754:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b756:	2300      	movs	r3, #0
 800b758:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d108      	bne.n	800b772 <pbuf_copy_partial+0x36>
 800b760:	4b2b      	ldr	r3, [pc, #172]	; (800b810 <pbuf_copy_partial+0xd4>)
 800b762:	f240 420a 	movw	r2, #1034	; 0x40a
 800b766:	492b      	ldr	r1, [pc, #172]	; (800b814 <pbuf_copy_partial+0xd8>)
 800b768:	482b      	ldr	r0, [pc, #172]	; (800b818 <pbuf_copy_partial+0xdc>)
 800b76a:	f00a fa73 	bl	8015c54 <iprintf>
 800b76e:	2300      	movs	r3, #0
 800b770:	e04a      	b.n	800b808 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d108      	bne.n	800b78a <pbuf_copy_partial+0x4e>
 800b778:	4b25      	ldr	r3, [pc, #148]	; (800b810 <pbuf_copy_partial+0xd4>)
 800b77a:	f240 420b 	movw	r2, #1035	; 0x40b
 800b77e:	4927      	ldr	r1, [pc, #156]	; (800b81c <pbuf_copy_partial+0xe0>)
 800b780:	4825      	ldr	r0, [pc, #148]	; (800b818 <pbuf_copy_partial+0xdc>)
 800b782:	f00a fa67 	bl	8015c54 <iprintf>
 800b786:	2300      	movs	r3, #0
 800b788:	e03e      	b.n	800b808 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	61fb      	str	r3, [r7, #28]
 800b78e:	e034      	b.n	800b7fa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b790:	88bb      	ldrh	r3, [r7, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d00a      	beq.n	800b7ac <pbuf_copy_partial+0x70>
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	895b      	ldrh	r3, [r3, #10]
 800b79a:	88ba      	ldrh	r2, [r7, #4]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d305      	bcc.n	800b7ac <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b7a0:	69fb      	ldr	r3, [r7, #28]
 800b7a2:	895b      	ldrh	r3, [r3, #10]
 800b7a4:	88ba      	ldrh	r2, [r7, #4]
 800b7a6:	1ad3      	subs	r3, r2, r3
 800b7a8:	80bb      	strh	r3, [r7, #4]
 800b7aa:	e023      	b.n	800b7f4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b7ac:	69fb      	ldr	r3, [r7, #28]
 800b7ae:	895a      	ldrh	r2, [r3, #10]
 800b7b0:	88bb      	ldrh	r3, [r7, #4]
 800b7b2:	1ad3      	subs	r3, r2, r3
 800b7b4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b7b6:	8b3a      	ldrh	r2, [r7, #24]
 800b7b8:	88fb      	ldrh	r3, [r7, #6]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d901      	bls.n	800b7c2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b7be:	88fb      	ldrh	r3, [r7, #6]
 800b7c0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b7c2:	8b7b      	ldrh	r3, [r7, #26]
 800b7c4:	68ba      	ldr	r2, [r7, #8]
 800b7c6:	18d0      	adds	r0, r2, r3
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	685a      	ldr	r2, [r3, #4]
 800b7cc:	88bb      	ldrh	r3, [r7, #4]
 800b7ce:	4413      	add	r3, r2
 800b7d0:	8b3a      	ldrh	r2, [r7, #24]
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	f00a f983 	bl	8015ade <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b7d8:	8afa      	ldrh	r2, [r7, #22]
 800b7da:	8b3b      	ldrh	r3, [r7, #24]
 800b7dc:	4413      	add	r3, r2
 800b7de:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b7e0:	8b7a      	ldrh	r2, [r7, #26]
 800b7e2:	8b3b      	ldrh	r3, [r7, #24]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b7e8:	88fa      	ldrh	r2, [r7, #6]
 800b7ea:	8b3b      	ldrh	r3, [r7, #24]
 800b7ec:	1ad3      	subs	r3, r2, r3
 800b7ee:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b7f4:	69fb      	ldr	r3, [r7, #28]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	61fb      	str	r3, [r7, #28]
 800b7fa:	88fb      	ldrh	r3, [r7, #6]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d002      	beq.n	800b806 <pbuf_copy_partial+0xca>
 800b800:	69fb      	ldr	r3, [r7, #28]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d1c4      	bne.n	800b790 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b806:	8afb      	ldrh	r3, [r7, #22]
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3720      	adds	r7, #32
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}
 800b810:	08016fd0 	.word	0x08016fd0
 800b814:	08017318 	.word	0x08017318
 800b818:	08017030 	.word	0x08017030
 800b81c:	08017338 	.word	0x08017338

0800b820 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	4603      	mov	r3, r0
 800b828:	603a      	str	r2, [r7, #0]
 800b82a:	71fb      	strb	r3, [r7, #7]
 800b82c:	460b      	mov	r3, r1
 800b82e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	8919      	ldrh	r1, [r3, #8]
 800b834:	88ba      	ldrh	r2, [r7, #4]
 800b836:	79fb      	ldrb	r3, [r7, #7]
 800b838:	4618      	mov	r0, r3
 800b83a:	f7ff faa5 	bl	800ad88 <pbuf_alloc>
 800b83e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d101      	bne.n	800b84a <pbuf_clone+0x2a>
    return NULL;
 800b846:	2300      	movs	r3, #0
 800b848:	e011      	b.n	800b86e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b84a:	6839      	ldr	r1, [r7, #0]
 800b84c:	68f8      	ldr	r0, [r7, #12]
 800b84e:	f7ff fea3 	bl	800b598 <pbuf_copy>
 800b852:	4603      	mov	r3, r0
 800b854:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b856:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d006      	beq.n	800b86c <pbuf_clone+0x4c>
 800b85e:	4b06      	ldr	r3, [pc, #24]	; (800b878 <pbuf_clone+0x58>)
 800b860:	f240 5224 	movw	r2, #1316	; 0x524
 800b864:	4905      	ldr	r1, [pc, #20]	; (800b87c <pbuf_clone+0x5c>)
 800b866:	4806      	ldr	r0, [pc, #24]	; (800b880 <pbuf_clone+0x60>)
 800b868:	f00a f9f4 	bl	8015c54 <iprintf>
  return q;
 800b86c:	68fb      	ldr	r3, [r7, #12]
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3710      	adds	r7, #16
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}
 800b876:	bf00      	nop
 800b878:	08016fd0 	.word	0x08016fd0
 800b87c:	08017444 	.word	0x08017444
 800b880:	08017030 	.word	0x08017030

0800b884 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b888:	f00a f9fc 	bl	8015c84 <rand>
 800b88c:	4603      	mov	r3, r0
 800b88e:	b29b      	uxth	r3, r3
 800b890:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b894:	b29b      	uxth	r3, r3
 800b896:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b89a:	b29a      	uxth	r2, r3
 800b89c:	4b01      	ldr	r3, [pc, #4]	; (800b8a4 <tcp_init+0x20>)
 800b89e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b8a0:	bf00      	nop
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	20000012 	.word	0x20000012

0800b8a8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	7d1b      	ldrb	r3, [r3, #20]
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d105      	bne.n	800b8c4 <tcp_free+0x1c>
 800b8b8:	4b06      	ldr	r3, [pc, #24]	; (800b8d4 <tcp_free+0x2c>)
 800b8ba:	22d4      	movs	r2, #212	; 0xd4
 800b8bc:	4906      	ldr	r1, [pc, #24]	; (800b8d8 <tcp_free+0x30>)
 800b8be:	4807      	ldr	r0, [pc, #28]	; (800b8dc <tcp_free+0x34>)
 800b8c0:	f00a f9c8 	bl	8015c54 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b8c4:	6879      	ldr	r1, [r7, #4]
 800b8c6:	2001      	movs	r0, #1
 800b8c8:	f7fe ff3e 	bl	800a748 <memp_free>
}
 800b8cc:	bf00      	nop
 800b8ce:	3708      	adds	r7, #8
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	080174d0 	.word	0x080174d0
 800b8d8:	08017500 	.word	0x08017500
 800b8dc:	08017514 	.word	0x08017514

0800b8e0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	7d1b      	ldrb	r3, [r3, #20]
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d105      	bne.n	800b8fc <tcp_free_listen+0x1c>
 800b8f0:	4b06      	ldr	r3, [pc, #24]	; (800b90c <tcp_free_listen+0x2c>)
 800b8f2:	22df      	movs	r2, #223	; 0xdf
 800b8f4:	4906      	ldr	r1, [pc, #24]	; (800b910 <tcp_free_listen+0x30>)
 800b8f6:	4807      	ldr	r0, [pc, #28]	; (800b914 <tcp_free_listen+0x34>)
 800b8f8:	f00a f9ac 	bl	8015c54 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b8fc:	6879      	ldr	r1, [r7, #4]
 800b8fe:	2002      	movs	r0, #2
 800b900:	f7fe ff22 	bl	800a748 <memp_free>
}
 800b904:	bf00      	nop
 800b906:	3708      	adds	r7, #8
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}
 800b90c:	080174d0 	.word	0x080174d0
 800b910:	0801753c 	.word	0x0801753c
 800b914:	08017514 	.word	0x08017514

0800b918 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b91c:	f000 fe98 	bl	800c650 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b920:	4b07      	ldr	r3, [pc, #28]	; (800b940 <tcp_tmr+0x28>)
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	3301      	adds	r3, #1
 800b926:	b2da      	uxtb	r2, r3
 800b928:	4b05      	ldr	r3, [pc, #20]	; (800b940 <tcp_tmr+0x28>)
 800b92a:	701a      	strb	r2, [r3, #0]
 800b92c:	4b04      	ldr	r3, [pc, #16]	; (800b940 <tcp_tmr+0x28>)
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	f003 0301 	and.w	r3, r3, #1
 800b934:	2b00      	cmp	r3, #0
 800b936:	d001      	beq.n	800b93c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b938:	f000 fb4c 	bl	800bfd4 <tcp_slowtmr>
  }
}
 800b93c:	bf00      	nop
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	20000451 	.word	0x20000451

0800b944 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d105      	bne.n	800b960 <tcp_remove_listener+0x1c>
 800b954:	4b0d      	ldr	r3, [pc, #52]	; (800b98c <tcp_remove_listener+0x48>)
 800b956:	22ff      	movs	r2, #255	; 0xff
 800b958:	490d      	ldr	r1, [pc, #52]	; (800b990 <tcp_remove_listener+0x4c>)
 800b95a:	480e      	ldr	r0, [pc, #56]	; (800b994 <tcp_remove_listener+0x50>)
 800b95c:	f00a f97a 	bl	8015c54 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	60fb      	str	r3, [r7, #12]
 800b964:	e00a      	b.n	800b97c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b96a:	683a      	ldr	r2, [r7, #0]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d102      	bne.n	800b976 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2200      	movs	r2, #0
 800b974:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	68db      	ldr	r3, [r3, #12]
 800b97a:	60fb      	str	r3, [r7, #12]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d1f1      	bne.n	800b966 <tcp_remove_listener+0x22>
    }
  }
}
 800b982:	bf00      	nop
 800b984:	3710      	adds	r7, #16
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	080174d0 	.word	0x080174d0
 800b990:	08017558 	.word	0x08017558
 800b994:	08017514 	.word	0x08017514

0800b998 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b084      	sub	sp, #16
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d106      	bne.n	800b9b4 <tcp_listen_closed+0x1c>
 800b9a6:	4b14      	ldr	r3, [pc, #80]	; (800b9f8 <tcp_listen_closed+0x60>)
 800b9a8:	f240 1211 	movw	r2, #273	; 0x111
 800b9ac:	4913      	ldr	r1, [pc, #76]	; (800b9fc <tcp_listen_closed+0x64>)
 800b9ae:	4814      	ldr	r0, [pc, #80]	; (800ba00 <tcp_listen_closed+0x68>)
 800b9b0:	f00a f950 	bl	8015c54 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	7d1b      	ldrb	r3, [r3, #20]
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d006      	beq.n	800b9ca <tcp_listen_closed+0x32>
 800b9bc:	4b0e      	ldr	r3, [pc, #56]	; (800b9f8 <tcp_listen_closed+0x60>)
 800b9be:	f44f 7289 	mov.w	r2, #274	; 0x112
 800b9c2:	4910      	ldr	r1, [pc, #64]	; (800ba04 <tcp_listen_closed+0x6c>)
 800b9c4:	480e      	ldr	r0, [pc, #56]	; (800ba00 <tcp_listen_closed+0x68>)
 800b9c6:	f00a f945 	bl	8015c54 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	60fb      	str	r3, [r7, #12]
 800b9ce:	e00b      	b.n	800b9e8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b9d0:	4a0d      	ldr	r2, [pc, #52]	; (800ba08 <tcp_listen_closed+0x70>)
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	6879      	ldr	r1, [r7, #4]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7ff ffb1 	bl	800b944 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	60fb      	str	r3, [r7, #12]
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	2b03      	cmp	r3, #3
 800b9ec:	d9f0      	bls.n	800b9d0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b9ee:	bf00      	nop
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop
 800b9f8:	080174d0 	.word	0x080174d0
 800b9fc:	08017580 	.word	0x08017580
 800ba00:	08017514 	.word	0x08017514
 800ba04:	0801758c 	.word	0x0801758c
 800ba08:	080281ec 	.word	0x080281ec

0800ba0c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ba0c:	b5b0      	push	{r4, r5, r7, lr}
 800ba0e:	b088      	sub	sp, #32
 800ba10:	af04      	add	r7, sp, #16
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	460b      	mov	r3, r1
 800ba16:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d106      	bne.n	800ba2c <tcp_close_shutdown+0x20>
 800ba1e:	4b61      	ldr	r3, [pc, #388]	; (800bba4 <tcp_close_shutdown+0x198>)
 800ba20:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ba24:	4960      	ldr	r1, [pc, #384]	; (800bba8 <tcp_close_shutdown+0x19c>)
 800ba26:	4861      	ldr	r0, [pc, #388]	; (800bbac <tcp_close_shutdown+0x1a0>)
 800ba28:	f00a f914 	bl	8015c54 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ba2c:	78fb      	ldrb	r3, [r7, #3]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d066      	beq.n	800bb00 <tcp_close_shutdown+0xf4>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	7d1b      	ldrb	r3, [r3, #20]
 800ba36:	2b04      	cmp	r3, #4
 800ba38:	d003      	beq.n	800ba42 <tcp_close_shutdown+0x36>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	7d1b      	ldrb	r3, [r3, #20]
 800ba3e:	2b07      	cmp	r3, #7
 800ba40:	d15e      	bne.n	800bb00 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d104      	bne.n	800ba54 <tcp_close_shutdown+0x48>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba4e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ba52:	d055      	beq.n	800bb00 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	8b5b      	ldrh	r3, [r3, #26]
 800ba58:	f003 0310 	and.w	r3, r3, #16
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d106      	bne.n	800ba6e <tcp_close_shutdown+0x62>
 800ba60:	4b50      	ldr	r3, [pc, #320]	; (800bba4 <tcp_close_shutdown+0x198>)
 800ba62:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ba66:	4952      	ldr	r1, [pc, #328]	; (800bbb0 <tcp_close_shutdown+0x1a4>)
 800ba68:	4850      	ldr	r0, [pc, #320]	; (800bbac <tcp_close_shutdown+0x1a0>)
 800ba6a:	f00a f8f3 	bl	8015c54 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ba76:	687d      	ldr	r5, [r7, #4]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	3304      	adds	r3, #4
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	8ad2      	ldrh	r2, [r2, #22]
 800ba80:	6879      	ldr	r1, [r7, #4]
 800ba82:	8b09      	ldrh	r1, [r1, #24]
 800ba84:	9102      	str	r1, [sp, #8]
 800ba86:	9201      	str	r2, [sp, #4]
 800ba88:	9300      	str	r3, [sp, #0]
 800ba8a:	462b      	mov	r3, r5
 800ba8c:	4622      	mov	r2, r4
 800ba8e:	4601      	mov	r1, r0
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f004 fe8f 	bl	80107b4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f001 f8ba 	bl	800cc10 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ba9c:	4b45      	ldr	r3, [pc, #276]	; (800bbb4 <tcp_close_shutdown+0x1a8>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d105      	bne.n	800bab2 <tcp_close_shutdown+0xa6>
 800baa6:	4b43      	ldr	r3, [pc, #268]	; (800bbb4 <tcp_close_shutdown+0x1a8>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	4a41      	ldr	r2, [pc, #260]	; (800bbb4 <tcp_close_shutdown+0x1a8>)
 800baae:	6013      	str	r3, [r2, #0]
 800bab0:	e013      	b.n	800bada <tcp_close_shutdown+0xce>
 800bab2:	4b40      	ldr	r3, [pc, #256]	; (800bbb4 <tcp_close_shutdown+0x1a8>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	60fb      	str	r3, [r7, #12]
 800bab8:	e00c      	b.n	800bad4 <tcp_close_shutdown+0xc8>
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	68db      	ldr	r3, [r3, #12]
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d104      	bne.n	800bace <tcp_close_shutdown+0xc2>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	68da      	ldr	r2, [r3, #12]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	60da      	str	r2, [r3, #12]
 800bacc:	e005      	b.n	800bada <tcp_close_shutdown+0xce>
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	68db      	ldr	r3, [r3, #12]
 800bad2:	60fb      	str	r3, [r7, #12]
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d1ef      	bne.n	800baba <tcp_close_shutdown+0xae>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2200      	movs	r2, #0
 800bade:	60da      	str	r2, [r3, #12]
 800bae0:	4b35      	ldr	r3, [pc, #212]	; (800bbb8 <tcp_close_shutdown+0x1ac>)
 800bae2:	2201      	movs	r2, #1
 800bae4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800bae6:	4b35      	ldr	r3, [pc, #212]	; (800bbbc <tcp_close_shutdown+0x1b0>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	687a      	ldr	r2, [r7, #4]
 800baec:	429a      	cmp	r2, r3
 800baee:	d102      	bne.n	800baf6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800baf0:	f003 fd4c 	bl	800f58c <tcp_trigger_input_pcb_close>
 800baf4:	e002      	b.n	800bafc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f7ff fed6 	bl	800b8a8 <tcp_free>
      }
      return ERR_OK;
 800bafc:	2300      	movs	r3, #0
 800bafe:	e04d      	b.n	800bb9c <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	7d1b      	ldrb	r3, [r3, #20]
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d02d      	beq.n	800bb64 <tcp_close_shutdown+0x158>
 800bb08:	2b02      	cmp	r3, #2
 800bb0a:	d036      	beq.n	800bb7a <tcp_close_shutdown+0x16e>
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d13f      	bne.n	800bb90 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	8adb      	ldrh	r3, [r3, #22]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d021      	beq.n	800bb5c <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bb18:	4b29      	ldr	r3, [pc, #164]	; (800bbc0 <tcp_close_shutdown+0x1b4>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d105      	bne.n	800bb2e <tcp_close_shutdown+0x122>
 800bb22:	4b27      	ldr	r3, [pc, #156]	; (800bbc0 <tcp_close_shutdown+0x1b4>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	68db      	ldr	r3, [r3, #12]
 800bb28:	4a25      	ldr	r2, [pc, #148]	; (800bbc0 <tcp_close_shutdown+0x1b4>)
 800bb2a:	6013      	str	r3, [r2, #0]
 800bb2c:	e013      	b.n	800bb56 <tcp_close_shutdown+0x14a>
 800bb2e:	4b24      	ldr	r3, [pc, #144]	; (800bbc0 <tcp_close_shutdown+0x1b4>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	60bb      	str	r3, [r7, #8]
 800bb34:	e00c      	b.n	800bb50 <tcp_close_shutdown+0x144>
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d104      	bne.n	800bb4a <tcp_close_shutdown+0x13e>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	68da      	ldr	r2, [r3, #12]
 800bb44:	68bb      	ldr	r3, [r7, #8]
 800bb46:	60da      	str	r2, [r3, #12]
 800bb48:	e005      	b.n	800bb56 <tcp_close_shutdown+0x14a>
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	68db      	ldr	r3, [r3, #12]
 800bb4e:	60bb      	str	r3, [r7, #8]
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d1ef      	bne.n	800bb36 <tcp_close_shutdown+0x12a>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f7ff fea3 	bl	800b8a8 <tcp_free>
      break;
 800bb62:	e01a      	b.n	800bb9a <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f7ff ff17 	bl	800b998 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800bb6a:	6879      	ldr	r1, [r7, #4]
 800bb6c:	4815      	ldr	r0, [pc, #84]	; (800bbc4 <tcp_close_shutdown+0x1b8>)
 800bb6e:	f001 f89f 	bl	800ccb0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f7ff feb4 	bl	800b8e0 <tcp_free_listen>
      break;
 800bb78:	e00f      	b.n	800bb9a <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bb7a:	6879      	ldr	r1, [r7, #4]
 800bb7c:	480d      	ldr	r0, [pc, #52]	; (800bbb4 <tcp_close_shutdown+0x1a8>)
 800bb7e:	f001 f897 	bl	800ccb0 <tcp_pcb_remove>
 800bb82:	4b0d      	ldr	r3, [pc, #52]	; (800bbb8 <tcp_close_shutdown+0x1ac>)
 800bb84:	2201      	movs	r2, #1
 800bb86:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f7ff fe8d 	bl	800b8a8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800bb8e:	e004      	b.n	800bb9a <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 f819 	bl	800bbc8 <tcp_close_shutdown_fin>
 800bb96:	4603      	mov	r3, r0
 800bb98:	e000      	b.n	800bb9c <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800bb9a:	2300      	movs	r3, #0
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3710      	adds	r7, #16
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bdb0      	pop	{r4, r5, r7, pc}
 800bba4:	080174d0 	.word	0x080174d0
 800bba8:	080175a4 	.word	0x080175a4
 800bbac:	08017514 	.word	0x08017514
 800bbb0:	080175c4 	.word	0x080175c4
 800bbb4:	200076f4 	.word	0x200076f4
 800bbb8:	200076f0 	.word	0x200076f0
 800bbbc:	20007708 	.word	0x20007708
 800bbc0:	20007700 	.word	0x20007700
 800bbc4:	200076fc 	.word	0x200076fc

0800bbc8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b084      	sub	sp, #16
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d106      	bne.n	800bbe4 <tcp_close_shutdown_fin+0x1c>
 800bbd6:	4b2c      	ldr	r3, [pc, #176]	; (800bc88 <tcp_close_shutdown_fin+0xc0>)
 800bbd8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800bbdc:	492b      	ldr	r1, [pc, #172]	; (800bc8c <tcp_close_shutdown_fin+0xc4>)
 800bbde:	482c      	ldr	r0, [pc, #176]	; (800bc90 <tcp_close_shutdown_fin+0xc8>)
 800bbe0:	f00a f838 	bl	8015c54 <iprintf>

  switch (pcb->state) {
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	7d1b      	ldrb	r3, [r3, #20]
 800bbe8:	2b04      	cmp	r3, #4
 800bbea:	d010      	beq.n	800bc0e <tcp_close_shutdown_fin+0x46>
 800bbec:	2b07      	cmp	r3, #7
 800bbee:	d01b      	beq.n	800bc28 <tcp_close_shutdown_fin+0x60>
 800bbf0:	2b03      	cmp	r3, #3
 800bbf2:	d126      	bne.n	800bc42 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f003 fedb 	bl	800f9b0 <tcp_send_fin>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bbfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d11f      	bne.n	800bc46 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2205      	movs	r2, #5
 800bc0a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bc0c:	e01b      	b.n	800bc46 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f003 fece 	bl	800f9b0 <tcp_send_fin>
 800bc14:	4603      	mov	r3, r0
 800bc16:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bc18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d114      	bne.n	800bc4a <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2205      	movs	r2, #5
 800bc24:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bc26:	e010      	b.n	800bc4a <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800bc28:	6878      	ldr	r0, [r7, #4]
 800bc2a:	f003 fec1 	bl	800f9b0 <tcp_send_fin>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bc32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d109      	bne.n	800bc4e <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2209      	movs	r2, #9
 800bc3e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bc40:	e005      	b.n	800bc4e <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800bc42:	2300      	movs	r3, #0
 800bc44:	e01c      	b.n	800bc80 <tcp_close_shutdown_fin+0xb8>
      break;
 800bc46:	bf00      	nop
 800bc48:	e002      	b.n	800bc50 <tcp_close_shutdown_fin+0x88>
      break;
 800bc4a:	bf00      	nop
 800bc4c:	e000      	b.n	800bc50 <tcp_close_shutdown_fin+0x88>
      break;
 800bc4e:	bf00      	nop
  }

  if (err == ERR_OK) {
 800bc50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d103      	bne.n	800bc60 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f003 ffe7 	bl	800fc2c <tcp_output>
 800bc5e:	e00d      	b.n	800bc7c <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800bc60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc68:	d108      	bne.n	800bc7c <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	8b5b      	ldrh	r3, [r3, #26]
 800bc6e:	f043 0308 	orr.w	r3, r3, #8
 800bc72:	b29a      	uxth	r2, r3
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	e001      	b.n	800bc80 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800bc7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3710      	adds	r7, #16
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	080174d0 	.word	0x080174d0
 800bc8c:	08017580 	.word	0x08017580
 800bc90:	08017514 	.word	0x08017514

0800bc94 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d109      	bne.n	800bcb6 <tcp_close+0x22>
 800bca2:	4b0f      	ldr	r3, [pc, #60]	; (800bce0 <tcp_close+0x4c>)
 800bca4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800bca8:	490e      	ldr	r1, [pc, #56]	; (800bce4 <tcp_close+0x50>)
 800bcaa:	480f      	ldr	r0, [pc, #60]	; (800bce8 <tcp_close+0x54>)
 800bcac:	f009 ffd2 	bl	8015c54 <iprintf>
 800bcb0:	f06f 030f 	mvn.w	r3, #15
 800bcb4:	e00f      	b.n	800bcd6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	7d1b      	ldrb	r3, [r3, #20]
 800bcba:	2b01      	cmp	r3, #1
 800bcbc:	d006      	beq.n	800bccc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	8b5b      	ldrh	r3, [r3, #26]
 800bcc2:	f043 0310 	orr.w	r3, r3, #16
 800bcc6:	b29a      	uxth	r2, r3
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800bccc:	2101      	movs	r1, #1
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f7ff fe9c 	bl	800ba0c <tcp_close_shutdown>
 800bcd4:	4603      	mov	r3, r0
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3708      	adds	r7, #8
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}
 800bcde:	bf00      	nop
 800bce0:	080174d0 	.word	0x080174d0
 800bce4:	080175e0 	.word	0x080175e0
 800bce8:	08017514 	.word	0x08017514

0800bcec <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b08e      	sub	sp, #56	; 0x38
 800bcf0:	af04      	add	r7, sp, #16
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d107      	bne.n	800bd0c <tcp_abandon+0x20>
 800bcfc:	4b52      	ldr	r3, [pc, #328]	; (800be48 <tcp_abandon+0x15c>)
 800bcfe:	f240 223d 	movw	r2, #573	; 0x23d
 800bd02:	4952      	ldr	r1, [pc, #328]	; (800be4c <tcp_abandon+0x160>)
 800bd04:	4852      	ldr	r0, [pc, #328]	; (800be50 <tcp_abandon+0x164>)
 800bd06:	f009 ffa5 	bl	8015c54 <iprintf>
 800bd0a:	e099      	b.n	800be40 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	7d1b      	ldrb	r3, [r3, #20]
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d106      	bne.n	800bd22 <tcp_abandon+0x36>
 800bd14:	4b4c      	ldr	r3, [pc, #304]	; (800be48 <tcp_abandon+0x15c>)
 800bd16:	f240 2241 	movw	r2, #577	; 0x241
 800bd1a:	494e      	ldr	r1, [pc, #312]	; (800be54 <tcp_abandon+0x168>)
 800bd1c:	484c      	ldr	r0, [pc, #304]	; (800be50 <tcp_abandon+0x164>)
 800bd1e:	f009 ff99 	bl	8015c54 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	7d1b      	ldrb	r3, [r3, #20]
 800bd26:	2b0a      	cmp	r3, #10
 800bd28:	d107      	bne.n	800bd3a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800bd2a:	6879      	ldr	r1, [r7, #4]
 800bd2c:	484a      	ldr	r0, [pc, #296]	; (800be58 <tcp_abandon+0x16c>)
 800bd2e:	f000 ffbf 	bl	800ccb0 <tcp_pcb_remove>
    tcp_free(pcb);
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f7ff fdb8 	bl	800b8a8 <tcp_free>
 800bd38:	e082      	b.n	800be40 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd46:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd4c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd54:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	691b      	ldr	r3, [r3, #16]
 800bd5a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	7d1b      	ldrb	r3, [r3, #20]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d126      	bne.n	800bdb2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	8adb      	ldrh	r3, [r3, #22]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d02e      	beq.n	800bdca <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bd6c:	4b3b      	ldr	r3, [pc, #236]	; (800be5c <tcp_abandon+0x170>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	687a      	ldr	r2, [r7, #4]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d105      	bne.n	800bd82 <tcp_abandon+0x96>
 800bd76:	4b39      	ldr	r3, [pc, #228]	; (800be5c <tcp_abandon+0x170>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	68db      	ldr	r3, [r3, #12]
 800bd7c:	4a37      	ldr	r2, [pc, #220]	; (800be5c <tcp_abandon+0x170>)
 800bd7e:	6013      	str	r3, [r2, #0]
 800bd80:	e013      	b.n	800bdaa <tcp_abandon+0xbe>
 800bd82:	4b36      	ldr	r3, [pc, #216]	; (800be5c <tcp_abandon+0x170>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	61fb      	str	r3, [r7, #28]
 800bd88:	e00c      	b.n	800bda4 <tcp_abandon+0xb8>
 800bd8a:	69fb      	ldr	r3, [r7, #28]
 800bd8c:	68db      	ldr	r3, [r3, #12]
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d104      	bne.n	800bd9e <tcp_abandon+0xb2>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	68da      	ldr	r2, [r3, #12]
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	60da      	str	r2, [r3, #12]
 800bd9c:	e005      	b.n	800bdaa <tcp_abandon+0xbe>
 800bd9e:	69fb      	ldr	r3, [r7, #28]
 800bda0:	68db      	ldr	r3, [r3, #12]
 800bda2:	61fb      	str	r3, [r7, #28]
 800bda4:	69fb      	ldr	r3, [r7, #28]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d1ef      	bne.n	800bd8a <tcp_abandon+0x9e>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2200      	movs	r2, #0
 800bdae:	60da      	str	r2, [r3, #12]
 800bdb0:	e00b      	b.n	800bdca <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	8adb      	ldrh	r3, [r3, #22]
 800bdba:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bdbc:	6879      	ldr	r1, [r7, #4]
 800bdbe:	4828      	ldr	r0, [pc, #160]	; (800be60 <tcp_abandon+0x174>)
 800bdc0:	f000 ff76 	bl	800ccb0 <tcp_pcb_remove>
 800bdc4:	4b27      	ldr	r3, [pc, #156]	; (800be64 <tcp_abandon+0x178>)
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d004      	beq.n	800bddc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f000 fd1a 	bl	800c810 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d004      	beq.n	800bdee <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bde8:	4618      	mov	r0, r3
 800bdea:	f000 fd11 	bl	800c810 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d004      	beq.n	800be00 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f000 fd08 	bl	800c810 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800be00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be02:	2b00      	cmp	r3, #0
 800be04:	d00e      	beq.n	800be24 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800be06:	6879      	ldr	r1, [r7, #4]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	3304      	adds	r3, #4
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	8b12      	ldrh	r2, [r2, #24]
 800be10:	9202      	str	r2, [sp, #8]
 800be12:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800be14:	9201      	str	r2, [sp, #4]
 800be16:	9300      	str	r3, [sp, #0]
 800be18:	460b      	mov	r3, r1
 800be1a:	697a      	ldr	r2, [r7, #20]
 800be1c:	69b9      	ldr	r1, [r7, #24]
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f004 fcc8 	bl	80107b4 <tcp_rst>
    }
    last_state = pcb->state;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	7d1b      	ldrb	r3, [r3, #20]
 800be28:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f7ff fd3c 	bl	800b8a8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d004      	beq.n	800be40 <tcp_abandon+0x154>
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	f06f 010c 	mvn.w	r1, #12
 800be3c:	68f8      	ldr	r0, [r7, #12]
 800be3e:	4798      	blx	r3
  }
}
 800be40:	3728      	adds	r7, #40	; 0x28
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	080174d0 	.word	0x080174d0
 800be4c:	08017614 	.word	0x08017614
 800be50:	08017514 	.word	0x08017514
 800be54:	08017630 	.word	0x08017630
 800be58:	20007704 	.word	0x20007704
 800be5c:	20007700 	.word	0x20007700
 800be60:	200076f4 	.word	0x200076f4
 800be64:	200076f0 	.word	0x200076f0

0800be68 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b082      	sub	sp, #8
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800be70:	2101      	movs	r1, #1
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f7ff ff3a 	bl	800bcec <tcp_abandon>
}
 800be78:	bf00      	nop
 800be7a:	3708      	adds	r7, #8
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b084      	sub	sp, #16
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d106      	bne.n	800be9c <tcp_update_rcv_ann_wnd+0x1c>
 800be8e:	4b25      	ldr	r3, [pc, #148]	; (800bf24 <tcp_update_rcv_ann_wnd+0xa4>)
 800be90:	f240 32a6 	movw	r2, #934	; 0x3a6
 800be94:	4924      	ldr	r1, [pc, #144]	; (800bf28 <tcp_update_rcv_ann_wnd+0xa8>)
 800be96:	4825      	ldr	r0, [pc, #148]	; (800bf2c <tcp_update_rcv_ann_wnd+0xac>)
 800be98:	f009 fedc 	bl	8015c54 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800bea4:	4413      	add	r3, r2
 800bea6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beac:	687a      	ldr	r2, [r7, #4]
 800beae:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800beb0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800beb4:	bf28      	it	cs
 800beb6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800beba:	b292      	uxth	r2, r2
 800bebc:	4413      	add	r3, r2
 800bebe:	68fa      	ldr	r2, [r7, #12]
 800bec0:	1ad3      	subs	r3, r2, r3
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	db08      	blt.n	800bed8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed2:	68fa      	ldr	r2, [r7, #12]
 800bed4:	1ad3      	subs	r3, r2, r3
 800bed6:	e020      	b.n	800bf1a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bee0:	1ad3      	subs	r3, r2, r3
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	dd03      	ble.n	800beee <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2200      	movs	r2, #0
 800beea:	855a      	strh	r2, [r3, #42]	; 0x2a
 800beec:	e014      	b.n	800bf18 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef6:	1ad3      	subs	r3, r2, r3
 800bef8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf00:	d306      	bcc.n	800bf10 <tcp_update_rcv_ann_wnd+0x90>
 800bf02:	4b08      	ldr	r3, [pc, #32]	; (800bf24 <tcp_update_rcv_ann_wnd+0xa4>)
 800bf04:	f240 32b6 	movw	r2, #950	; 0x3b6
 800bf08:	4909      	ldr	r1, [pc, #36]	; (800bf30 <tcp_update_rcv_ann_wnd+0xb0>)
 800bf0a:	4808      	ldr	r0, [pc, #32]	; (800bf2c <tcp_update_rcv_ann_wnd+0xac>)
 800bf0c:	f009 fea2 	bl	8015c54 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	b29a      	uxth	r2, r3
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800bf18:	2300      	movs	r3, #0
  }
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3710      	adds	r7, #16
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	080174d0 	.word	0x080174d0
 800bf28:	0801772c 	.word	0x0801772c
 800bf2c:	08017514 	.word	0x08017514
 800bf30:	08017750 	.word	0x08017750

0800bf34 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d107      	bne.n	800bf56 <tcp_recved+0x22>
 800bf46:	4b1f      	ldr	r3, [pc, #124]	; (800bfc4 <tcp_recved+0x90>)
 800bf48:	f240 32cf 	movw	r2, #975	; 0x3cf
 800bf4c:	491e      	ldr	r1, [pc, #120]	; (800bfc8 <tcp_recved+0x94>)
 800bf4e:	481f      	ldr	r0, [pc, #124]	; (800bfcc <tcp_recved+0x98>)
 800bf50:	f009 fe80 	bl	8015c54 <iprintf>
 800bf54:	e032      	b.n	800bfbc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	7d1b      	ldrb	r3, [r3, #20]
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d106      	bne.n	800bf6c <tcp_recved+0x38>
 800bf5e:	4b19      	ldr	r3, [pc, #100]	; (800bfc4 <tcp_recved+0x90>)
 800bf60:	f240 32d3 	movw	r2, #979	; 0x3d3
 800bf64:	491a      	ldr	r1, [pc, #104]	; (800bfd0 <tcp_recved+0x9c>)
 800bf66:	4819      	ldr	r0, [pc, #100]	; (800bfcc <tcp_recved+0x98>)
 800bf68:	f009 fe74 	bl	8015c54 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bf70:	887b      	ldrh	r3, [r7, #2]
 800bf72:	4413      	add	r3, r2
 800bf74:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800bf76:	89fb      	ldrh	r3, [r7, #14]
 800bf78:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bf7c:	d804      	bhi.n	800bf88 <tcp_recved+0x54>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf82:	89fa      	ldrh	r2, [r7, #14]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d204      	bcs.n	800bf92 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800bf8e:	851a      	strh	r2, [r3, #40]	; 0x28
 800bf90:	e002      	b.n	800bf98 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	89fa      	ldrh	r2, [r7, #14]
 800bf96:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f7ff ff71 	bl	800be80 <tcp_update_rcv_ann_wnd>
 800bf9e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800bfa6:	d309      	bcc.n	800bfbc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	8b5b      	ldrh	r3, [r3, #26]
 800bfac:	f043 0302 	orr.w	r3, r3, #2
 800bfb0:	b29a      	uxth	r2, r3
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f003 fe38 	bl	800fc2c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800bfbc:	3710      	adds	r7, #16
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	bf00      	nop
 800bfc4:	080174d0 	.word	0x080174d0
 800bfc8:	0801776c 	.word	0x0801776c
 800bfcc:	08017514 	.word	0x08017514
 800bfd0:	08017784 	.word	0x08017784

0800bfd4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800bfd4:	b5b0      	push	{r4, r5, r7, lr}
 800bfd6:	b090      	sub	sp, #64	; 0x40
 800bfd8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800bfe0:	4b94      	ldr	r3, [pc, #592]	; (800c234 <tcp_slowtmr+0x260>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	3301      	adds	r3, #1
 800bfe6:	4a93      	ldr	r2, [pc, #588]	; (800c234 <tcp_slowtmr+0x260>)
 800bfe8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800bfea:	4b93      	ldr	r3, [pc, #588]	; (800c238 <tcp_slowtmr+0x264>)
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	3301      	adds	r3, #1
 800bff0:	b2da      	uxtb	r2, r3
 800bff2:	4b91      	ldr	r3, [pc, #580]	; (800c238 <tcp_slowtmr+0x264>)
 800bff4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800bff6:	2300      	movs	r3, #0
 800bff8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800bffa:	4b90      	ldr	r3, [pc, #576]	; (800c23c <tcp_slowtmr+0x268>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c000:	e29f      	b.n	800c542 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c004:	7d1b      	ldrb	r3, [r3, #20]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d106      	bne.n	800c018 <tcp_slowtmr+0x44>
 800c00a:	4b8d      	ldr	r3, [pc, #564]	; (800c240 <tcp_slowtmr+0x26c>)
 800c00c:	f240 42be 	movw	r2, #1214	; 0x4be
 800c010:	498c      	ldr	r1, [pc, #560]	; (800c244 <tcp_slowtmr+0x270>)
 800c012:	488d      	ldr	r0, [pc, #564]	; (800c248 <tcp_slowtmr+0x274>)
 800c014:	f009 fe1e 	bl	8015c54 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c01a:	7d1b      	ldrb	r3, [r3, #20]
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d106      	bne.n	800c02e <tcp_slowtmr+0x5a>
 800c020:	4b87      	ldr	r3, [pc, #540]	; (800c240 <tcp_slowtmr+0x26c>)
 800c022:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c026:	4989      	ldr	r1, [pc, #548]	; (800c24c <tcp_slowtmr+0x278>)
 800c028:	4887      	ldr	r0, [pc, #540]	; (800c248 <tcp_slowtmr+0x274>)
 800c02a:	f009 fe13 	bl	8015c54 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c030:	7d1b      	ldrb	r3, [r3, #20]
 800c032:	2b0a      	cmp	r3, #10
 800c034:	d106      	bne.n	800c044 <tcp_slowtmr+0x70>
 800c036:	4b82      	ldr	r3, [pc, #520]	; (800c240 <tcp_slowtmr+0x26c>)
 800c038:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c03c:	4984      	ldr	r1, [pc, #528]	; (800c250 <tcp_slowtmr+0x27c>)
 800c03e:	4882      	ldr	r0, [pc, #520]	; (800c248 <tcp_slowtmr+0x274>)
 800c040:	f009 fe08 	bl	8015c54 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c046:	7f9a      	ldrb	r2, [r3, #30]
 800c048:	4b7b      	ldr	r3, [pc, #492]	; (800c238 <tcp_slowtmr+0x264>)
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d105      	bne.n	800c05c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c052:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c05a:	e272      	b.n	800c542 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c05c:	4b76      	ldr	r3, [pc, #472]	; (800c238 <tcp_slowtmr+0x264>)
 800c05e:	781a      	ldrb	r2, [r3, #0]
 800c060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c062:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c064:	2300      	movs	r3, #0
 800c066:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c06a:	2300      	movs	r3, #0
 800c06c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c072:	7d1b      	ldrb	r3, [r3, #20]
 800c074:	2b02      	cmp	r3, #2
 800c076:	d10a      	bne.n	800c08e <tcp_slowtmr+0xba>
 800c078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c07a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c07e:	2b05      	cmp	r3, #5
 800c080:	d905      	bls.n	800c08e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c082:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c086:	3301      	adds	r3, #1
 800c088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c08c:	e11e      	b.n	800c2cc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c090:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c094:	2b0b      	cmp	r3, #11
 800c096:	d905      	bls.n	800c0a4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c09c:	3301      	adds	r3, #1
 800c09e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c0a2:	e113      	b.n	800c2cc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d075      	beq.n	800c19a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d006      	beq.n	800c0c4 <tcp_slowtmr+0xf0>
 800c0b6:	4b62      	ldr	r3, [pc, #392]	; (800c240 <tcp_slowtmr+0x26c>)
 800c0b8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c0bc:	4965      	ldr	r1, [pc, #404]	; (800c254 <tcp_slowtmr+0x280>)
 800c0be:	4862      	ldr	r0, [pc, #392]	; (800c248 <tcp_slowtmr+0x274>)
 800c0c0:	f009 fdc8 	bl	8015c54 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c0c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d106      	bne.n	800c0da <tcp_slowtmr+0x106>
 800c0cc:	4b5c      	ldr	r3, [pc, #368]	; (800c240 <tcp_slowtmr+0x26c>)
 800c0ce:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c0d2:	4961      	ldr	r1, [pc, #388]	; (800c258 <tcp_slowtmr+0x284>)
 800c0d4:	485c      	ldr	r0, [pc, #368]	; (800c248 <tcp_slowtmr+0x274>)
 800c0d6:	f009 fdbd 	bl	8015c54 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0dc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c0e0:	2b0b      	cmp	r3, #11
 800c0e2:	d905      	bls.n	800c0f0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c0e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c0ee:	e0ed      	b.n	800c2cc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c0f6:	3b01      	subs	r3, #1
 800c0f8:	4a58      	ldr	r2, [pc, #352]	; (800c25c <tcp_slowtmr+0x288>)
 800c0fa:	5cd3      	ldrb	r3, [r2, r3]
 800c0fc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c100:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c104:	7c7a      	ldrb	r2, [r7, #17]
 800c106:	429a      	cmp	r2, r3
 800c108:	d907      	bls.n	800c11a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c10c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c110:	3301      	adds	r3, #1
 800c112:	b2da      	uxtb	r2, r3
 800c114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c116:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c11c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c120:	7c7a      	ldrb	r2, [r7, #17]
 800c122:	429a      	cmp	r2, r3
 800c124:	f200 80d2 	bhi.w	800c2cc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c128:	2301      	movs	r3, #1
 800c12a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c12e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c132:	2b00      	cmp	r3, #0
 800c134:	d108      	bne.n	800c148 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c136:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c138:	f004 fc30 	bl	801099c <tcp_zero_window_probe>
 800c13c:	4603      	mov	r3, r0
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d014      	beq.n	800c16c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c142:	2300      	movs	r3, #0
 800c144:	623b      	str	r3, [r7, #32]
 800c146:	e011      	b.n	800c16c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c14a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c14e:	4619      	mov	r1, r3
 800c150:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c152:	f003 fae5 	bl	800f720 <tcp_split_unsent_seg>
 800c156:	4603      	mov	r3, r0
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d107      	bne.n	800c16c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c15c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c15e:	f003 fd65 	bl	800fc2c <tcp_output>
 800c162:	4603      	mov	r3, r0
 800c164:	2b00      	cmp	r3, #0
 800c166:	d101      	bne.n	800c16c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c168:	2300      	movs	r3, #0
 800c16a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c16c:	6a3b      	ldr	r3, [r7, #32]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	f000 80ac 	beq.w	800c2cc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c176:	2200      	movs	r2, #0
 800c178:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c182:	2b06      	cmp	r3, #6
 800c184:	f200 80a2 	bhi.w	800c2cc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c18a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c18e:	3301      	adds	r3, #1
 800c190:	b2da      	uxtb	r2, r3
 800c192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c194:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c198:	e098      	b.n	800c2cc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c19c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	db0f      	blt.n	800c1c4 <tcp_slowtmr+0x1f0>
 800c1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c1aa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d008      	beq.n	800c1c4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	b29b      	uxth	r3, r3
 800c1be:	b21a      	sxth	r2, r3
 800c1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1cc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	db7b      	blt.n	800c2cc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c1d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1d6:	f004 f821 	bl	801021c <tcp_rexmit_rto_prepare>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d007      	beq.n	800c1f0 <tcp_slowtmr+0x21c>
 800c1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d171      	bne.n	800c2cc <tcp_slowtmr+0x2f8>
 800c1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d06d      	beq.n	800c2cc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f2:	7d1b      	ldrb	r3, [r3, #20]
 800c1f4:	2b02      	cmp	r3, #2
 800c1f6:	d03a      	beq.n	800c26e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c1fe:	2b0c      	cmp	r3, #12
 800c200:	bf28      	it	cs
 800c202:	230c      	movcs	r3, #12
 800c204:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c208:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c20c:	10db      	asrs	r3, r3, #3
 800c20e:	b21b      	sxth	r3, r3
 800c210:	461a      	mov	r2, r3
 800c212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c214:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c218:	4413      	add	r3, r2
 800c21a:	7efa      	ldrb	r2, [r7, #27]
 800c21c:	4910      	ldr	r1, [pc, #64]	; (800c260 <tcp_slowtmr+0x28c>)
 800c21e:	5c8a      	ldrb	r2, [r1, r2]
 800c220:	4093      	lsls	r3, r2
 800c222:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c22a:	4293      	cmp	r3, r2
 800c22c:	dc1a      	bgt.n	800c264 <tcp_slowtmr+0x290>
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	b21a      	sxth	r2, r3
 800c232:	e019      	b.n	800c268 <tcp_slowtmr+0x294>
 800c234:	200076f8 	.word	0x200076f8
 800c238:	20000452 	.word	0x20000452
 800c23c:	200076f4 	.word	0x200076f4
 800c240:	080174d0 	.word	0x080174d0
 800c244:	08017814 	.word	0x08017814
 800c248:	08017514 	.word	0x08017514
 800c24c:	08017840 	.word	0x08017840
 800c250:	0801786c 	.word	0x0801786c
 800c254:	0801789c 	.word	0x0801789c
 800c258:	080178d0 	.word	0x080178d0
 800c25c:	080281e4 	.word	0x080281e4
 800c260:	080281d4 	.word	0x080281d4
 800c264:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c270:	2200      	movs	r2, #0
 800c272:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c276:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c27c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c280:	4293      	cmp	r3, r2
 800c282:	bf28      	it	cs
 800c284:	4613      	movcs	r3, r2
 800c286:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c288:	8a7b      	ldrh	r3, [r7, #18]
 800c28a:	085b      	lsrs	r3, r3, #1
 800c28c:	b29a      	uxth	r2, r3
 800c28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c290:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c296:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c29c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c29e:	005b      	lsls	r3, r3, #1
 800c2a0:	b29b      	uxth	r3, r3
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d206      	bcs.n	800c2b4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c2aa:	005b      	lsls	r3, r3, #1
 800c2ac:	b29a      	uxth	r2, r3
 800c2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c2c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2c8:	f004 f818 	bl	80102fc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ce:	7d1b      	ldrb	r3, [r3, #20]
 800c2d0:	2b06      	cmp	r3, #6
 800c2d2:	d111      	bne.n	800c2f8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d6:	8b5b      	ldrh	r3, [r3, #26]
 800c2d8:	f003 0310 	and.w	r3, r3, #16
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d00b      	beq.n	800c2f8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c2e0:	4b9d      	ldr	r3, [pc, #628]	; (800c558 <tcp_slowtmr+0x584>)
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e6:	6a1b      	ldr	r3, [r3, #32]
 800c2e8:	1ad3      	subs	r3, r2, r3
 800c2ea:	2b28      	cmp	r3, #40	; 0x28
 800c2ec:	d904      	bls.n	800c2f8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c2ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2f2:	3301      	adds	r3, #1
 800c2f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2fa:	7a5b      	ldrb	r3, [r3, #9]
 800c2fc:	f003 0308 	and.w	r3, r3, #8
 800c300:	2b00      	cmp	r3, #0
 800c302:	d04c      	beq.n	800c39e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800c304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c306:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c308:	2b04      	cmp	r3, #4
 800c30a:	d003      	beq.n	800c314 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c310:	2b07      	cmp	r3, #7
 800c312:	d144      	bne.n	800c39e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c314:	4b90      	ldr	r3, [pc, #576]	; (800c558 <tcp_slowtmr+0x584>)
 800c316:	681a      	ldr	r2, [r3, #0]
 800c318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c31a:	6a1b      	ldr	r3, [r3, #32]
 800c31c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c324:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800c328:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800c32c:	498b      	ldr	r1, [pc, #556]	; (800c55c <tcp_slowtmr+0x588>)
 800c32e:	fba1 1303 	umull	r1, r3, r1, r3
 800c332:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c334:	429a      	cmp	r2, r3
 800c336:	d90a      	bls.n	800c34e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c33c:	3301      	adds	r3, #1
 800c33e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c342:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c346:	3301      	adds	r3, #1
 800c348:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c34c:	e027      	b.n	800c39e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c34e:	4b82      	ldr	r3, [pc, #520]	; (800c558 <tcp_slowtmr+0x584>)
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c354:	6a1b      	ldr	r3, [r3, #32]
 800c356:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c35a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c360:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c364:	4618      	mov	r0, r3
 800c366:	4b7e      	ldr	r3, [pc, #504]	; (800c560 <tcp_slowtmr+0x58c>)
 800c368:	fb03 f300 	mul.w	r3, r3, r0
 800c36c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c36e:	497b      	ldr	r1, [pc, #492]	; (800c55c <tcp_slowtmr+0x588>)
 800c370:	fba1 1303 	umull	r1, r3, r1, r3
 800c374:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c376:	429a      	cmp	r2, r3
 800c378:	d911      	bls.n	800c39e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800c37a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c37c:	f004 face 	bl	801091c <tcp_keepalive>
 800c380:	4603      	mov	r3, r0
 800c382:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c386:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d107      	bne.n	800c39e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800c38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c390:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c394:	3301      	adds	r3, #1
 800c396:	b2da      	uxtb	r2, r3
 800c398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c39a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d011      	beq.n	800c3ca <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c3a6:	4b6c      	ldr	r3, [pc, #432]	; (800c558 <tcp_slowtmr+0x584>)
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ac:	6a1b      	ldr	r3, [r3, #32]
 800c3ae:	1ad2      	subs	r2, r2, r3
 800c3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	460b      	mov	r3, r1
 800c3ba:	005b      	lsls	r3, r3, #1
 800c3bc:	440b      	add	r3, r1
 800c3be:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	d302      	bcc.n	800c3ca <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800c3c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3c6:	f000 fdd7 	bl	800cf78 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3cc:	7d1b      	ldrb	r3, [r3, #20]
 800c3ce:	2b03      	cmp	r3, #3
 800c3d0:	d10b      	bne.n	800c3ea <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c3d2:	4b61      	ldr	r3, [pc, #388]	; (800c558 <tcp_slowtmr+0x584>)
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d8:	6a1b      	ldr	r3, [r3, #32]
 800c3da:	1ad3      	subs	r3, r2, r3
 800c3dc:	2b28      	cmp	r3, #40	; 0x28
 800c3de:	d904      	bls.n	800c3ea <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c3e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ec:	7d1b      	ldrb	r3, [r3, #20]
 800c3ee:	2b09      	cmp	r3, #9
 800c3f0:	d10b      	bne.n	800c40a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c3f2:	4b59      	ldr	r3, [pc, #356]	; (800c558 <tcp_slowtmr+0x584>)
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f8:	6a1b      	ldr	r3, [r3, #32]
 800c3fa:	1ad3      	subs	r3, r2, r3
 800c3fc:	2bf0      	cmp	r3, #240	; 0xf0
 800c3fe:	d904      	bls.n	800c40a <tcp_slowtmr+0x436>
        ++pcb_remove;
 800c400:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c404:	3301      	adds	r3, #1
 800c406:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c40a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d060      	beq.n	800c4d4 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c418:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c41a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c41c:	f000 fbf8 	bl	800cc10 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c422:	2b00      	cmp	r3, #0
 800c424:	d010      	beq.n	800c448 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c426:	4b4f      	ldr	r3, [pc, #316]	; (800c564 <tcp_slowtmr+0x590>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d106      	bne.n	800c43e <tcp_slowtmr+0x46a>
 800c430:	4b4d      	ldr	r3, [pc, #308]	; (800c568 <tcp_slowtmr+0x594>)
 800c432:	f240 526d 	movw	r2, #1389	; 0x56d
 800c436:	494d      	ldr	r1, [pc, #308]	; (800c56c <tcp_slowtmr+0x598>)
 800c438:	484d      	ldr	r0, [pc, #308]	; (800c570 <tcp_slowtmr+0x59c>)
 800c43a:	f009 fc0b 	bl	8015c54 <iprintf>
        prev->next = pcb->next;
 800c43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c440:	68da      	ldr	r2, [r3, #12]
 800c442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c444:	60da      	str	r2, [r3, #12]
 800c446:	e00f      	b.n	800c468 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c448:	4b46      	ldr	r3, [pc, #280]	; (800c564 <tcp_slowtmr+0x590>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c44e:	429a      	cmp	r2, r3
 800c450:	d006      	beq.n	800c460 <tcp_slowtmr+0x48c>
 800c452:	4b45      	ldr	r3, [pc, #276]	; (800c568 <tcp_slowtmr+0x594>)
 800c454:	f240 5271 	movw	r2, #1393	; 0x571
 800c458:	4946      	ldr	r1, [pc, #280]	; (800c574 <tcp_slowtmr+0x5a0>)
 800c45a:	4845      	ldr	r0, [pc, #276]	; (800c570 <tcp_slowtmr+0x59c>)
 800c45c:	f009 fbfa 	bl	8015c54 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	4a3f      	ldr	r2, [pc, #252]	; (800c564 <tcp_slowtmr+0x590>)
 800c466:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c468:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d013      	beq.n	800c498 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c472:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c476:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c478:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800c47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c47c:	3304      	adds	r3, #4
 800c47e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c480:	8ad2      	ldrh	r2, [r2, #22]
 800c482:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c484:	8b09      	ldrh	r1, [r1, #24]
 800c486:	9102      	str	r1, [sp, #8]
 800c488:	9201      	str	r2, [sp, #4]
 800c48a:	9300      	str	r3, [sp, #0]
 800c48c:	462b      	mov	r3, r5
 800c48e:	4622      	mov	r2, r4
 800c490:	4601      	mov	r1, r0
 800c492:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c494:	f004 f98e 	bl	80107b4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c49a:	691b      	ldr	r3, [r3, #16]
 800c49c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a0:	7d1b      	ldrb	r3, [r3, #20]
 800c4a2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c4a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4aa:	68db      	ldr	r3, [r3, #12]
 800c4ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c4ae:	6838      	ldr	r0, [r7, #0]
 800c4b0:	f7ff f9fa 	bl	800b8a8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800c4b4:	4b30      	ldr	r3, [pc, #192]	; (800c578 <tcp_slowtmr+0x5a4>)
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d004      	beq.n	800c4ca <tcp_slowtmr+0x4f6>
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f06f 010c 	mvn.w	r1, #12
 800c4c6:	68b8      	ldr	r0, [r7, #8]
 800c4c8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c4ca:	4b2b      	ldr	r3, [pc, #172]	; (800c578 <tcp_slowtmr+0x5a4>)
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d037      	beq.n	800c542 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800c4d2:	e590      	b.n	800bff6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4da:	68db      	ldr	r3, [r3, #12]
 800c4dc:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e0:	7f1b      	ldrb	r3, [r3, #28]
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	b2da      	uxtb	r2, r3
 800c4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ec:	7f1a      	ldrb	r2, [r3, #28]
 800c4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f0:	7f5b      	ldrb	r3, [r3, #29]
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d325      	bcc.n	800c542 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800c4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800c4fc:	4b1e      	ldr	r3, [pc, #120]	; (800c578 <tcp_slowtmr+0x5a4>)
 800c4fe:	2200      	movs	r2, #0
 800c500:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d00b      	beq.n	800c524 <tcp_slowtmr+0x550>
 800c50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c50e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c514:	6912      	ldr	r2, [r2, #16]
 800c516:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c518:	4610      	mov	r0, r2
 800c51a:	4798      	blx	r3
 800c51c:	4603      	mov	r3, r0
 800c51e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c522:	e002      	b.n	800c52a <tcp_slowtmr+0x556>
 800c524:	2300      	movs	r3, #0
 800c526:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800c52a:	4b13      	ldr	r3, [pc, #76]	; (800c578 <tcp_slowtmr+0x5a4>)
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d000      	beq.n	800c534 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800c532:	e560      	b.n	800bff6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c534:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d102      	bne.n	800c542 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800c53c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c53e:	f003 fb75 	bl	800fc2c <tcp_output>
  while (pcb != NULL) {
 800c542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c544:	2b00      	cmp	r3, #0
 800c546:	f47f ad5c 	bne.w	800c002 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c54a:	2300      	movs	r3, #0
 800c54c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800c54e:	4b0b      	ldr	r3, [pc, #44]	; (800c57c <tcp_slowtmr+0x5a8>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c554:	e067      	b.n	800c626 <tcp_slowtmr+0x652>
 800c556:	bf00      	nop
 800c558:	200076f8 	.word	0x200076f8
 800c55c:	10624dd3 	.word	0x10624dd3
 800c560:	000124f8 	.word	0x000124f8
 800c564:	200076f4 	.word	0x200076f4
 800c568:	080174d0 	.word	0x080174d0
 800c56c:	08017908 	.word	0x08017908
 800c570:	08017514 	.word	0x08017514
 800c574:	08017934 	.word	0x08017934
 800c578:	200076f0 	.word	0x200076f0
 800c57c:	20007704 	.word	0x20007704
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c582:	7d1b      	ldrb	r3, [r3, #20]
 800c584:	2b0a      	cmp	r3, #10
 800c586:	d006      	beq.n	800c596 <tcp_slowtmr+0x5c2>
 800c588:	4b2a      	ldr	r3, [pc, #168]	; (800c634 <tcp_slowtmr+0x660>)
 800c58a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800c58e:	492a      	ldr	r1, [pc, #168]	; (800c638 <tcp_slowtmr+0x664>)
 800c590:	482a      	ldr	r0, [pc, #168]	; (800c63c <tcp_slowtmr+0x668>)
 800c592:	f009 fb5f 	bl	8015c54 <iprintf>
    pcb_remove = 0;
 800c596:	2300      	movs	r3, #0
 800c598:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c59c:	4b28      	ldr	r3, [pc, #160]	; (800c640 <tcp_slowtmr+0x66c>)
 800c59e:	681a      	ldr	r2, [r3, #0]
 800c5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a2:	6a1b      	ldr	r3, [r3, #32]
 800c5a4:	1ad3      	subs	r3, r2, r3
 800c5a6:	2bf0      	cmp	r3, #240	; 0xf0
 800c5a8:	d904      	bls.n	800c5b4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800c5aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c5b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d02f      	beq.n	800c61c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c5bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5be:	f000 fb27 	bl	800cc10 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d010      	beq.n	800c5ea <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c5c8:	4b1e      	ldr	r3, [pc, #120]	; (800c644 <tcp_slowtmr+0x670>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d106      	bne.n	800c5e0 <tcp_slowtmr+0x60c>
 800c5d2:	4b18      	ldr	r3, [pc, #96]	; (800c634 <tcp_slowtmr+0x660>)
 800c5d4:	f240 52af 	movw	r2, #1455	; 0x5af
 800c5d8:	491b      	ldr	r1, [pc, #108]	; (800c648 <tcp_slowtmr+0x674>)
 800c5da:	4818      	ldr	r0, [pc, #96]	; (800c63c <tcp_slowtmr+0x668>)
 800c5dc:	f009 fb3a 	bl	8015c54 <iprintf>
        prev->next = pcb->next;
 800c5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e2:	68da      	ldr	r2, [r3, #12]
 800c5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e6:	60da      	str	r2, [r3, #12]
 800c5e8:	e00f      	b.n	800c60a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c5ea:	4b16      	ldr	r3, [pc, #88]	; (800c644 <tcp_slowtmr+0x670>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d006      	beq.n	800c602 <tcp_slowtmr+0x62e>
 800c5f4:	4b0f      	ldr	r3, [pc, #60]	; (800c634 <tcp_slowtmr+0x660>)
 800c5f6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800c5fa:	4914      	ldr	r1, [pc, #80]	; (800c64c <tcp_slowtmr+0x678>)
 800c5fc:	480f      	ldr	r0, [pc, #60]	; (800c63c <tcp_slowtmr+0x668>)
 800c5fe:	f009 fb29 	bl	8015c54 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c604:	68db      	ldr	r3, [r3, #12]
 800c606:	4a0f      	ldr	r2, [pc, #60]	; (800c644 <tcp_slowtmr+0x670>)
 800c608:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c60c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c614:	69f8      	ldr	r0, [r7, #28]
 800c616:	f7ff f947 	bl	800b8a8 <tcp_free>
 800c61a:	e004      	b.n	800c626 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800c61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c61e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c622:	68db      	ldr	r3, [r3, #12]
 800c624:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d1a9      	bne.n	800c580 <tcp_slowtmr+0x5ac>
    }
  }
}
 800c62c:	bf00      	nop
 800c62e:	3730      	adds	r7, #48	; 0x30
 800c630:	46bd      	mov	sp, r7
 800c632:	bdb0      	pop	{r4, r5, r7, pc}
 800c634:	080174d0 	.word	0x080174d0
 800c638:	08017960 	.word	0x08017960
 800c63c:	08017514 	.word	0x08017514
 800c640:	200076f8 	.word	0x200076f8
 800c644:	20007704 	.word	0x20007704
 800c648:	08017990 	.word	0x08017990
 800c64c:	080179b8 	.word	0x080179b8

0800c650 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c656:	4b2d      	ldr	r3, [pc, #180]	; (800c70c <tcp_fasttmr+0xbc>)
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	3301      	adds	r3, #1
 800c65c:	b2da      	uxtb	r2, r3
 800c65e:	4b2b      	ldr	r3, [pc, #172]	; (800c70c <tcp_fasttmr+0xbc>)
 800c660:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c662:	4b2b      	ldr	r3, [pc, #172]	; (800c710 <tcp_fasttmr+0xc0>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c668:	e048      	b.n	800c6fc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	7f9a      	ldrb	r2, [r3, #30]
 800c66e:	4b27      	ldr	r3, [pc, #156]	; (800c70c <tcp_fasttmr+0xbc>)
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	429a      	cmp	r2, r3
 800c674:	d03f      	beq.n	800c6f6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c676:	4b25      	ldr	r3, [pc, #148]	; (800c70c <tcp_fasttmr+0xbc>)
 800c678:	781a      	ldrb	r2, [r3, #0]
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	8b5b      	ldrh	r3, [r3, #26]
 800c682:	f003 0301 	and.w	r3, r3, #1
 800c686:	2b00      	cmp	r3, #0
 800c688:	d010      	beq.n	800c6ac <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	8b5b      	ldrh	r3, [r3, #26]
 800c68e:	f043 0302 	orr.w	r3, r3, #2
 800c692:	b29a      	uxth	r2, r3
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f003 fac7 	bl	800fc2c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	8b5b      	ldrh	r3, [r3, #26]
 800c6a2:	f023 0303 	bic.w	r3, r3, #3
 800c6a6:	b29a      	uxth	r2, r3
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	8b5b      	ldrh	r3, [r3, #26]
 800c6b0:	f003 0308 	and.w	r3, r3, #8
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d009      	beq.n	800c6cc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	8b5b      	ldrh	r3, [r3, #26]
 800c6bc:	f023 0308 	bic.w	r3, r3, #8
 800c6c0:	b29a      	uxth	r2, r3
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f7ff fa7e 	bl	800bbc8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	68db      	ldr	r3, [r3, #12]
 800c6d0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d00a      	beq.n	800c6f0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c6da:	4b0e      	ldr	r3, [pc, #56]	; (800c714 <tcp_fasttmr+0xc4>)
 800c6dc:	2200      	movs	r2, #0
 800c6de:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f000 f819 	bl	800c718 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c6e6:	4b0b      	ldr	r3, [pc, #44]	; (800c714 <tcp_fasttmr+0xc4>)
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d000      	beq.n	800c6f0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c6ee:	e7b8      	b.n	800c662 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	607b      	str	r3, [r7, #4]
 800c6f4:	e002      	b.n	800c6fc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	68db      	ldr	r3, [r3, #12]
 800c6fa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d1b3      	bne.n	800c66a <tcp_fasttmr+0x1a>
    }
  }
}
 800c702:	bf00      	nop
 800c704:	3708      	adds	r7, #8
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
 800c70a:	bf00      	nop
 800c70c:	20000452 	.word	0x20000452
 800c710:	200076f4 	.word	0x200076f4
 800c714:	200076f0 	.word	0x200076f0

0800c718 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c718:	b590      	push	{r4, r7, lr}
 800c71a:	b085      	sub	sp, #20
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d109      	bne.n	800c73a <tcp_process_refused_data+0x22>
 800c726:	4b37      	ldr	r3, [pc, #220]	; (800c804 <tcp_process_refused_data+0xec>)
 800c728:	f240 6209 	movw	r2, #1545	; 0x609
 800c72c:	4936      	ldr	r1, [pc, #216]	; (800c808 <tcp_process_refused_data+0xf0>)
 800c72e:	4837      	ldr	r0, [pc, #220]	; (800c80c <tcp_process_refused_data+0xf4>)
 800c730:	f009 fa90 	bl	8015c54 <iprintf>
 800c734:	f06f 030f 	mvn.w	r3, #15
 800c738:	e060      	b.n	800c7fc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c73e:	7b5b      	ldrb	r3, [r3, #13]
 800c740:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c746:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c754:	2b00      	cmp	r3, #0
 800c756:	d00b      	beq.n	800c770 <tcp_process_refused_data+0x58>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6918      	ldr	r0, [r3, #16]
 800c762:	2300      	movs	r3, #0
 800c764:	68ba      	ldr	r2, [r7, #8]
 800c766:	6879      	ldr	r1, [r7, #4]
 800c768:	47a0      	blx	r4
 800c76a:	4603      	mov	r3, r0
 800c76c:	73fb      	strb	r3, [r7, #15]
 800c76e:	e007      	b.n	800c780 <tcp_process_refused_data+0x68>
 800c770:	2300      	movs	r3, #0
 800c772:	68ba      	ldr	r2, [r7, #8]
 800c774:	6879      	ldr	r1, [r7, #4]
 800c776:	2000      	movs	r0, #0
 800c778:	f000 f8a2 	bl	800c8c0 <tcp_recv_null>
 800c77c:	4603      	mov	r3, r0
 800c77e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c780:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d12a      	bne.n	800c7de <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c788:	7bbb      	ldrb	r3, [r7, #14]
 800c78a:	f003 0320 	and.w	r3, r3, #32
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d033      	beq.n	800c7fa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c796:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c79a:	d005      	beq.n	800c7a8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	b29a      	uxth	r2, r3
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d00b      	beq.n	800c7ca <tcp_process_refused_data+0xb2>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6918      	ldr	r0, [r3, #16]
 800c7bc:	2300      	movs	r3, #0
 800c7be:	2200      	movs	r2, #0
 800c7c0:	6879      	ldr	r1, [r7, #4]
 800c7c2:	47a0      	blx	r4
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	73fb      	strb	r3, [r7, #15]
 800c7c8:	e001      	b.n	800c7ce <tcp_process_refused_data+0xb6>
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c7ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7d2:	f113 0f0d 	cmn.w	r3, #13
 800c7d6:	d110      	bne.n	800c7fa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c7d8:	f06f 030c 	mvn.w	r3, #12
 800c7dc:	e00e      	b.n	800c7fc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c7de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7e2:	f113 0f0d 	cmn.w	r3, #13
 800c7e6:	d102      	bne.n	800c7ee <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c7e8:	f06f 030c 	mvn.w	r3, #12
 800c7ec:	e006      	b.n	800c7fc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	68ba      	ldr	r2, [r7, #8]
 800c7f2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800c7f4:	f06f 0304 	mvn.w	r3, #4
 800c7f8:	e000      	b.n	800c7fc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800c7fa:	2300      	movs	r3, #0
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3714      	adds	r7, #20
 800c800:	46bd      	mov	sp, r7
 800c802:	bd90      	pop	{r4, r7, pc}
 800c804:	080174d0 	.word	0x080174d0
 800c808:	080179e0 	.word	0x080179e0
 800c80c:	08017514 	.word	0x08017514

0800c810 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b084      	sub	sp, #16
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c818:	e007      	b.n	800c82a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f000 f809 	bl	800c838 <tcp_seg_free>
    seg = next;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d1f4      	bne.n	800c81a <tcp_segs_free+0xa>
  }
}
 800c830:	bf00      	nop
 800c832:	3710      	adds	r7, #16
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d00c      	beq.n	800c860 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d004      	beq.n	800c858 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	685b      	ldr	r3, [r3, #4]
 800c852:	4618      	mov	r0, r3
 800c854:	f7fe fd78 	bl	800b348 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c858:	6879      	ldr	r1, [r7, #4]
 800c85a:	2003      	movs	r0, #3
 800c85c:	f7fd ff74 	bl	800a748 <memp_free>
  }
}
 800c860:	bf00      	nop
 800c862:	3708      	adds	r7, #8
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d106      	bne.n	800c884 <tcp_seg_copy+0x1c>
 800c876:	4b0f      	ldr	r3, [pc, #60]	; (800c8b4 <tcp_seg_copy+0x4c>)
 800c878:	f240 6282 	movw	r2, #1666	; 0x682
 800c87c:	490e      	ldr	r1, [pc, #56]	; (800c8b8 <tcp_seg_copy+0x50>)
 800c87e:	480f      	ldr	r0, [pc, #60]	; (800c8bc <tcp_seg_copy+0x54>)
 800c880:	f009 f9e8 	bl	8015c54 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c884:	2003      	movs	r0, #3
 800c886:	f7fd ff13 	bl	800a6b0 <memp_malloc>
 800c88a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d101      	bne.n	800c896 <tcp_seg_copy+0x2e>
    return NULL;
 800c892:	2300      	movs	r3, #0
 800c894:	e00a      	b.n	800c8ac <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c896:	2210      	movs	r2, #16
 800c898:	6879      	ldr	r1, [r7, #4]
 800c89a:	68f8      	ldr	r0, [r7, #12]
 800c89c:	f009 f91f 	bl	8015ade <memcpy>
  pbuf_ref(cseg->p);
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f7fe fdef 	bl	800b488 <pbuf_ref>
  return cseg;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3710      	adds	r7, #16
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}
 800c8b4:	080174d0 	.word	0x080174d0
 800c8b8:	08017a24 	.word	0x08017a24
 800c8bc:	08017514 	.word	0x08017514

0800c8c0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b084      	sub	sp, #16
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	607a      	str	r2, [r7, #4]
 800c8cc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d109      	bne.n	800c8e8 <tcp_recv_null+0x28>
 800c8d4:	4b12      	ldr	r3, [pc, #72]	; (800c920 <tcp_recv_null+0x60>)
 800c8d6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c8da:	4912      	ldr	r1, [pc, #72]	; (800c924 <tcp_recv_null+0x64>)
 800c8dc:	4812      	ldr	r0, [pc, #72]	; (800c928 <tcp_recv_null+0x68>)
 800c8de:	f009 f9b9 	bl	8015c54 <iprintf>
 800c8e2:	f06f 030f 	mvn.w	r3, #15
 800c8e6:	e016      	b.n	800c916 <tcp_recv_null+0x56>

  if (p != NULL) {
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d009      	beq.n	800c902 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	891b      	ldrh	r3, [r3, #8]
 800c8f2:	4619      	mov	r1, r3
 800c8f4:	68b8      	ldr	r0, [r7, #8]
 800c8f6:	f7ff fb1d 	bl	800bf34 <tcp_recved>
    pbuf_free(p);
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f7fe fd24 	bl	800b348 <pbuf_free>
 800c900:	e008      	b.n	800c914 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c902:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d104      	bne.n	800c914 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c90a:	68b8      	ldr	r0, [r7, #8]
 800c90c:	f7ff f9c2 	bl	800bc94 <tcp_close>
 800c910:	4603      	mov	r3, r0
 800c912:	e000      	b.n	800c916 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c914:	2300      	movs	r3, #0
}
 800c916:	4618      	mov	r0, r3
 800c918:	3710      	adds	r7, #16
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
 800c91e:	bf00      	nop
 800c920:	080174d0 	.word	0x080174d0
 800c924:	08017a40 	.word	0x08017a40
 800c928:	08017514 	.word	0x08017514

0800c92c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b086      	sub	sp, #24
 800c930:	af00      	add	r7, sp, #0
 800c932:	4603      	mov	r3, r0
 800c934:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	db01      	blt.n	800c942 <tcp_kill_prio+0x16>
 800c93e:	79fb      	ldrb	r3, [r7, #7]
 800c940:	e000      	b.n	800c944 <tcp_kill_prio+0x18>
 800c942:	237f      	movs	r3, #127	; 0x7f
 800c944:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c946:	7afb      	ldrb	r3, [r7, #11]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d034      	beq.n	800c9b6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c94c:	7afb      	ldrb	r3, [r7, #11]
 800c94e:	3b01      	subs	r3, #1
 800c950:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c952:	2300      	movs	r3, #0
 800c954:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c956:	2300      	movs	r3, #0
 800c958:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c95a:	4b19      	ldr	r3, [pc, #100]	; (800c9c0 <tcp_kill_prio+0x94>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	617b      	str	r3, [r7, #20]
 800c960:	e01f      	b.n	800c9a2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	7d5b      	ldrb	r3, [r3, #21]
 800c966:	7afa      	ldrb	r2, [r7, #11]
 800c968:	429a      	cmp	r2, r3
 800c96a:	d80c      	bhi.n	800c986 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c970:	7afa      	ldrb	r2, [r7, #11]
 800c972:	429a      	cmp	r2, r3
 800c974:	d112      	bne.n	800c99c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c976:	4b13      	ldr	r3, [pc, #76]	; (800c9c4 <tcp_kill_prio+0x98>)
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	6a1b      	ldr	r3, [r3, #32]
 800c97e:	1ad3      	subs	r3, r2, r3
 800c980:	68fa      	ldr	r2, [r7, #12]
 800c982:	429a      	cmp	r2, r3
 800c984:	d80a      	bhi.n	800c99c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c986:	4b0f      	ldr	r3, [pc, #60]	; (800c9c4 <tcp_kill_prio+0x98>)
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	6a1b      	ldr	r3, [r3, #32]
 800c98e:	1ad3      	subs	r3, r2, r3
 800c990:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	7d5b      	ldrb	r3, [r3, #21]
 800c99a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	68db      	ldr	r3, [r3, #12]
 800c9a0:	617b      	str	r3, [r7, #20]
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d1dc      	bne.n	800c962 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d004      	beq.n	800c9b8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c9ae:	6938      	ldr	r0, [r7, #16]
 800c9b0:	f7ff fa5a 	bl	800be68 <tcp_abort>
 800c9b4:	e000      	b.n	800c9b8 <tcp_kill_prio+0x8c>
    return;
 800c9b6:	bf00      	nop
  }
}
 800c9b8:	3718      	adds	r7, #24
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	200076f4 	.word	0x200076f4
 800c9c4:	200076f8 	.word	0x200076f8

0800c9c8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b086      	sub	sp, #24
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c9d2:	79fb      	ldrb	r3, [r7, #7]
 800c9d4:	2b08      	cmp	r3, #8
 800c9d6:	d009      	beq.n	800c9ec <tcp_kill_state+0x24>
 800c9d8:	79fb      	ldrb	r3, [r7, #7]
 800c9da:	2b09      	cmp	r3, #9
 800c9dc:	d006      	beq.n	800c9ec <tcp_kill_state+0x24>
 800c9de:	4b1a      	ldr	r3, [pc, #104]	; (800ca48 <tcp_kill_state+0x80>)
 800c9e0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800c9e4:	4919      	ldr	r1, [pc, #100]	; (800ca4c <tcp_kill_state+0x84>)
 800c9e6:	481a      	ldr	r0, [pc, #104]	; (800ca50 <tcp_kill_state+0x88>)
 800c9e8:	f009 f934 	bl	8015c54 <iprintf>

  inactivity = 0;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c9f4:	4b17      	ldr	r3, [pc, #92]	; (800ca54 <tcp_kill_state+0x8c>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	617b      	str	r3, [r7, #20]
 800c9fa:	e017      	b.n	800ca2c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	7d1b      	ldrb	r3, [r3, #20]
 800ca00:	79fa      	ldrb	r2, [r7, #7]
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d10f      	bne.n	800ca26 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ca06:	4b14      	ldr	r3, [pc, #80]	; (800ca58 <tcp_kill_state+0x90>)
 800ca08:	681a      	ldr	r2, [r3, #0]
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	6a1b      	ldr	r3, [r3, #32]
 800ca0e:	1ad3      	subs	r3, r2, r3
 800ca10:	68fa      	ldr	r2, [r7, #12]
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d807      	bhi.n	800ca26 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ca16:	4b10      	ldr	r3, [pc, #64]	; (800ca58 <tcp_kill_state+0x90>)
 800ca18:	681a      	ldr	r2, [r3, #0]
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	6a1b      	ldr	r3, [r3, #32]
 800ca1e:	1ad3      	subs	r3, r2, r3
 800ca20:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	68db      	ldr	r3, [r3, #12]
 800ca2a:	617b      	str	r3, [r7, #20]
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d1e4      	bne.n	800c9fc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d003      	beq.n	800ca40 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ca38:	2100      	movs	r1, #0
 800ca3a:	6938      	ldr	r0, [r7, #16]
 800ca3c:	f7ff f956 	bl	800bcec <tcp_abandon>
  }
}
 800ca40:	bf00      	nop
 800ca42:	3718      	adds	r7, #24
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}
 800ca48:	080174d0 	.word	0x080174d0
 800ca4c:	08017a5c 	.word	0x08017a5c
 800ca50:	08017514 	.word	0x08017514
 800ca54:	200076f4 	.word	0x200076f4
 800ca58:	200076f8 	.word	0x200076f8

0800ca5c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ca62:	2300      	movs	r3, #0
 800ca64:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ca66:	2300      	movs	r3, #0
 800ca68:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca6a:	4b12      	ldr	r3, [pc, #72]	; (800cab4 <tcp_kill_timewait+0x58>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	60fb      	str	r3, [r7, #12]
 800ca70:	e012      	b.n	800ca98 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ca72:	4b11      	ldr	r3, [pc, #68]	; (800cab8 <tcp_kill_timewait+0x5c>)
 800ca74:	681a      	ldr	r2, [r3, #0]
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	6a1b      	ldr	r3, [r3, #32]
 800ca7a:	1ad3      	subs	r3, r2, r3
 800ca7c:	687a      	ldr	r2, [r7, #4]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d807      	bhi.n	800ca92 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ca82:	4b0d      	ldr	r3, [pc, #52]	; (800cab8 <tcp_kill_timewait+0x5c>)
 800ca84:	681a      	ldr	r2, [r3, #0]
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	6a1b      	ldr	r3, [r3, #32]
 800ca8a:	1ad3      	subs	r3, r2, r3
 800ca8c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	68db      	ldr	r3, [r3, #12]
 800ca96:	60fb      	str	r3, [r7, #12]
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d1e9      	bne.n	800ca72 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d002      	beq.n	800caaa <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800caa4:	68b8      	ldr	r0, [r7, #8]
 800caa6:	f7ff f9df 	bl	800be68 <tcp_abort>
  }
}
 800caaa:	bf00      	nop
 800caac:	3710      	adds	r7, #16
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	20007704 	.word	0x20007704
 800cab8:	200076f8 	.word	0x200076f8

0800cabc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b082      	sub	sp, #8
 800cac0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800cac2:	4b10      	ldr	r3, [pc, #64]	; (800cb04 <tcp_handle_closepend+0x48>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cac8:	e014      	b.n	800caf4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	68db      	ldr	r3, [r3, #12]
 800cace:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	8b5b      	ldrh	r3, [r3, #26]
 800cad4:	f003 0308 	and.w	r3, r3, #8
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d009      	beq.n	800caf0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	8b5b      	ldrh	r3, [r3, #26]
 800cae0:	f023 0308 	bic.w	r3, r3, #8
 800cae4:	b29a      	uxth	r2, r3
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f7ff f86c 	bl	800bbc8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d1e7      	bne.n	800caca <tcp_handle_closepend+0xe>
  }
}
 800cafa:	bf00      	nop
 800cafc:	3708      	adds	r7, #8
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	200076f4 	.word	0x200076f4

0800cb08 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	4603      	mov	r3, r0
 800cb10:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cb12:	2001      	movs	r0, #1
 800cb14:	f7fd fdcc 	bl	800a6b0 <memp_malloc>
 800cb18:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d126      	bne.n	800cb6e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800cb20:	f7ff ffcc 	bl	800cabc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800cb24:	f7ff ff9a 	bl	800ca5c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cb28:	2001      	movs	r0, #1
 800cb2a:	f7fd fdc1 	bl	800a6b0 <memp_malloc>
 800cb2e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d11b      	bne.n	800cb6e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800cb36:	2009      	movs	r0, #9
 800cb38:	f7ff ff46 	bl	800c9c8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cb3c:	2001      	movs	r0, #1
 800cb3e:	f7fd fdb7 	bl	800a6b0 <memp_malloc>
 800cb42:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d111      	bne.n	800cb6e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800cb4a:	2008      	movs	r0, #8
 800cb4c:	f7ff ff3c 	bl	800c9c8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cb50:	2001      	movs	r0, #1
 800cb52:	f7fd fdad 	bl	800a6b0 <memp_malloc>
 800cb56:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d107      	bne.n	800cb6e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800cb5e:	79fb      	ldrb	r3, [r7, #7]
 800cb60:	4618      	mov	r0, r3
 800cb62:	f7ff fee3 	bl	800c92c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cb66:	2001      	movs	r0, #1
 800cb68:	f7fd fda2 	bl	800a6b0 <memp_malloc>
 800cb6c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d03f      	beq.n	800cbf4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800cb74:	229c      	movs	r2, #156	; 0x9c
 800cb76:	2100      	movs	r1, #0
 800cb78:	68f8      	ldr	r0, [r7, #12]
 800cb7a:	f008 ffbb 	bl	8015af4 <memset>
    pcb->prio = prio;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	79fa      	ldrb	r2, [r7, #7]
 800cb82:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800cb8a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800cb94:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	22ff      	movs	r2, #255	; 0xff
 800cba2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800cbaa:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2206      	movs	r2, #6
 800cbb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	2206      	movs	r2, #6
 800cbb8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cbc0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800cbca:	4b0d      	ldr	r3, [pc, #52]	; (800cc00 <tcp_alloc+0xf8>)
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800cbd2:	4b0c      	ldr	r3, [pc, #48]	; (800cc04 <tcp_alloc+0xfc>)
 800cbd4:	781a      	ldrb	r2, [r3, #0]
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800cbe0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	4a08      	ldr	r2, [pc, #32]	; (800cc08 <tcp_alloc+0x100>)
 800cbe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	4a07      	ldr	r2, [pc, #28]	; (800cc0c <tcp_alloc+0x104>)
 800cbf0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3710      	adds	r7, #16
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	bf00      	nop
 800cc00:	200076f8 	.word	0x200076f8
 800cc04:	20000452 	.word	0x20000452
 800cc08:	0800c8c1 	.word	0x0800c8c1
 800cc0c:	006ddd00 	.word	0x006ddd00

0800cc10 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d107      	bne.n	800cc2e <tcp_pcb_purge+0x1e>
 800cc1e:	4b21      	ldr	r3, [pc, #132]	; (800cca4 <tcp_pcb_purge+0x94>)
 800cc20:	f640 0251 	movw	r2, #2129	; 0x851
 800cc24:	4920      	ldr	r1, [pc, #128]	; (800cca8 <tcp_pcb_purge+0x98>)
 800cc26:	4821      	ldr	r0, [pc, #132]	; (800ccac <tcp_pcb_purge+0x9c>)
 800cc28:	f009 f814 	bl	8015c54 <iprintf>
 800cc2c:	e037      	b.n	800cc9e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	7d1b      	ldrb	r3, [r3, #20]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d033      	beq.n	800cc9e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800cc3a:	2b0a      	cmp	r3, #10
 800cc3c:	d02f      	beq.n	800cc9e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800cc42:	2b01      	cmp	r3, #1
 800cc44:	d02b      	beq.n	800cc9e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d007      	beq.n	800cc5e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7fe fb78 	bl	800b348 <pbuf_free>
      pcb->refused_data = NULL;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d002      	beq.n	800cc6c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f000 f986 	bl	800cf78 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc72:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f7ff fdc9 	bl	800c810 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7ff fdc4 	bl	800c810 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	66da      	str	r2, [r3, #108]	; 0x6c
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800cc9e:	3708      	adds	r7, #8
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}
 800cca4:	080174d0 	.word	0x080174d0
 800cca8:	08017b1c 	.word	0x08017b1c
 800ccac:	08017514 	.word	0x08017514

0800ccb0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b084      	sub	sp, #16
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d106      	bne.n	800ccce <tcp_pcb_remove+0x1e>
 800ccc0:	4b3e      	ldr	r3, [pc, #248]	; (800cdbc <tcp_pcb_remove+0x10c>)
 800ccc2:	f640 0283 	movw	r2, #2179	; 0x883
 800ccc6:	493e      	ldr	r1, [pc, #248]	; (800cdc0 <tcp_pcb_remove+0x110>)
 800ccc8:	483e      	ldr	r0, [pc, #248]	; (800cdc4 <tcp_pcb_remove+0x114>)
 800ccca:	f008 ffc3 	bl	8015c54 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d106      	bne.n	800cce2 <tcp_pcb_remove+0x32>
 800ccd4:	4b39      	ldr	r3, [pc, #228]	; (800cdbc <tcp_pcb_remove+0x10c>)
 800ccd6:	f640 0284 	movw	r2, #2180	; 0x884
 800ccda:	493b      	ldr	r1, [pc, #236]	; (800cdc8 <tcp_pcb_remove+0x118>)
 800ccdc:	4839      	ldr	r0, [pc, #228]	; (800cdc4 <tcp_pcb_remove+0x114>)
 800ccde:	f008 ffb9 	bl	8015c54 <iprintf>

  TCP_RMV(pcblist, pcb);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	683a      	ldr	r2, [r7, #0]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d105      	bne.n	800ccf8 <tcp_pcb_remove+0x48>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	68da      	ldr	r2, [r3, #12]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	601a      	str	r2, [r3, #0]
 800ccf6:	e013      	b.n	800cd20 <tcp_pcb_remove+0x70>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	60fb      	str	r3, [r7, #12]
 800ccfe:	e00c      	b.n	800cd1a <tcp_pcb_remove+0x6a>
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	68db      	ldr	r3, [r3, #12]
 800cd04:	683a      	ldr	r2, [r7, #0]
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d104      	bne.n	800cd14 <tcp_pcb_remove+0x64>
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	68da      	ldr	r2, [r3, #12]
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	60da      	str	r2, [r3, #12]
 800cd12:	e005      	b.n	800cd20 <tcp_pcb_remove+0x70>
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	68db      	ldr	r3, [r3, #12]
 800cd18:	60fb      	str	r3, [r7, #12]
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d1ef      	bne.n	800cd00 <tcp_pcb_remove+0x50>
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	2200      	movs	r2, #0
 800cd24:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800cd26:	6838      	ldr	r0, [r7, #0]
 800cd28:	f7ff ff72 	bl	800cc10 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	7d1b      	ldrb	r3, [r3, #20]
 800cd30:	2b0a      	cmp	r3, #10
 800cd32:	d013      	beq.n	800cd5c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800cd38:	2b01      	cmp	r3, #1
 800cd3a:	d00f      	beq.n	800cd5c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	8b5b      	ldrh	r3, [r3, #26]
 800cd40:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d009      	beq.n	800cd5c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	8b5b      	ldrh	r3, [r3, #26]
 800cd4c:	f043 0302 	orr.w	r3, r3, #2
 800cd50:	b29a      	uxth	r2, r3
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cd56:	6838      	ldr	r0, [r7, #0]
 800cd58:	f002 ff68 	bl	800fc2c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	7d1b      	ldrb	r3, [r3, #20]
 800cd60:	2b01      	cmp	r3, #1
 800cd62:	d020      	beq.n	800cda6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d006      	beq.n	800cd7a <tcp_pcb_remove+0xca>
 800cd6c:	4b13      	ldr	r3, [pc, #76]	; (800cdbc <tcp_pcb_remove+0x10c>)
 800cd6e:	f640 0293 	movw	r2, #2195	; 0x893
 800cd72:	4916      	ldr	r1, [pc, #88]	; (800cdcc <tcp_pcb_remove+0x11c>)
 800cd74:	4813      	ldr	r0, [pc, #76]	; (800cdc4 <tcp_pcb_remove+0x114>)
 800cd76:	f008 ff6d 	bl	8015c54 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d006      	beq.n	800cd90 <tcp_pcb_remove+0xe0>
 800cd82:	4b0e      	ldr	r3, [pc, #56]	; (800cdbc <tcp_pcb_remove+0x10c>)
 800cd84:	f640 0294 	movw	r2, #2196	; 0x894
 800cd88:	4911      	ldr	r1, [pc, #68]	; (800cdd0 <tcp_pcb_remove+0x120>)
 800cd8a:	480e      	ldr	r0, [pc, #56]	; (800cdc4 <tcp_pcb_remove+0x114>)
 800cd8c:	f008 ff62 	bl	8015c54 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d006      	beq.n	800cda6 <tcp_pcb_remove+0xf6>
 800cd98:	4b08      	ldr	r3, [pc, #32]	; (800cdbc <tcp_pcb_remove+0x10c>)
 800cd9a:	f640 0296 	movw	r2, #2198	; 0x896
 800cd9e:	490d      	ldr	r1, [pc, #52]	; (800cdd4 <tcp_pcb_remove+0x124>)
 800cda0:	4808      	ldr	r0, [pc, #32]	; (800cdc4 <tcp_pcb_remove+0x114>)
 800cda2:	f008 ff57 	bl	8015c54 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800cdb2:	bf00      	nop
 800cdb4:	3710      	adds	r7, #16
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	080174d0 	.word	0x080174d0
 800cdc0:	08017b38 	.word	0x08017b38
 800cdc4:	08017514 	.word	0x08017514
 800cdc8:	08017b54 	.word	0x08017b54
 800cdcc:	08017b74 	.word	0x08017b74
 800cdd0:	08017b8c 	.word	0x08017b8c
 800cdd4:	08017ba8 	.word	0x08017ba8

0800cdd8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d106      	bne.n	800cdf4 <tcp_next_iss+0x1c>
 800cde6:	4b0a      	ldr	r3, [pc, #40]	; (800ce10 <tcp_next_iss+0x38>)
 800cde8:	f640 02af 	movw	r2, #2223	; 0x8af
 800cdec:	4909      	ldr	r1, [pc, #36]	; (800ce14 <tcp_next_iss+0x3c>)
 800cdee:	480a      	ldr	r0, [pc, #40]	; (800ce18 <tcp_next_iss+0x40>)
 800cdf0:	f008 ff30 	bl	8015c54 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800cdf4:	4b09      	ldr	r3, [pc, #36]	; (800ce1c <tcp_next_iss+0x44>)
 800cdf6:	681a      	ldr	r2, [r3, #0]
 800cdf8:	4b09      	ldr	r3, [pc, #36]	; (800ce20 <tcp_next_iss+0x48>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4413      	add	r3, r2
 800cdfe:	4a07      	ldr	r2, [pc, #28]	; (800ce1c <tcp_next_iss+0x44>)
 800ce00:	6013      	str	r3, [r2, #0]
  return iss;
 800ce02:	4b06      	ldr	r3, [pc, #24]	; (800ce1c <tcp_next_iss+0x44>)
 800ce04:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3708      	adds	r7, #8
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	bf00      	nop
 800ce10:	080174d0 	.word	0x080174d0
 800ce14:	08017bc0 	.word	0x08017bc0
 800ce18:	08017514 	.word	0x08017514
 800ce1c:	20000014 	.word	0x20000014
 800ce20:	200076f8 	.word	0x200076f8

0800ce24 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b086      	sub	sp, #24
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	60b9      	str	r1, [r7, #8]
 800ce2e:	607a      	str	r2, [r7, #4]
 800ce30:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d106      	bne.n	800ce46 <tcp_eff_send_mss_netif+0x22>
 800ce38:	4b14      	ldr	r3, [pc, #80]	; (800ce8c <tcp_eff_send_mss_netif+0x68>)
 800ce3a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ce3e:	4914      	ldr	r1, [pc, #80]	; (800ce90 <tcp_eff_send_mss_netif+0x6c>)
 800ce40:	4814      	ldr	r0, [pc, #80]	; (800ce94 <tcp_eff_send_mss_netif+0x70>)
 800ce42:	f008 ff07 	bl	8015c54 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d101      	bne.n	800ce50 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ce4c:	89fb      	ldrh	r3, [r7, #14]
 800ce4e:	e019      	b.n	800ce84 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ce54:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ce56:	8afb      	ldrh	r3, [r7, #22]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d012      	beq.n	800ce82 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ce5c:	2328      	movs	r3, #40	; 0x28
 800ce5e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ce60:	8afa      	ldrh	r2, [r7, #22]
 800ce62:	8abb      	ldrh	r3, [r7, #20]
 800ce64:	429a      	cmp	r2, r3
 800ce66:	d904      	bls.n	800ce72 <tcp_eff_send_mss_netif+0x4e>
 800ce68:	8afa      	ldrh	r2, [r7, #22]
 800ce6a:	8abb      	ldrh	r3, [r7, #20]
 800ce6c:	1ad3      	subs	r3, r2, r3
 800ce6e:	b29b      	uxth	r3, r3
 800ce70:	e000      	b.n	800ce74 <tcp_eff_send_mss_netif+0x50>
 800ce72:	2300      	movs	r3, #0
 800ce74:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ce76:	8a7a      	ldrh	r2, [r7, #18]
 800ce78:	89fb      	ldrh	r3, [r7, #14]
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	bf28      	it	cs
 800ce7e:	4613      	movcs	r3, r2
 800ce80:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ce82:	89fb      	ldrh	r3, [r7, #14]
}
 800ce84:	4618      	mov	r0, r3
 800ce86:	3718      	adds	r7, #24
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}
 800ce8c:	080174d0 	.word	0x080174d0
 800ce90:	08017bdc 	.word	0x08017bdc
 800ce94:	08017514 	.word	0x08017514

0800ce98 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b084      	sub	sp, #16
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
 800cea0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d119      	bne.n	800cee0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ceac:	4b10      	ldr	r3, [pc, #64]	; (800cef0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ceae:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ceb2:	4910      	ldr	r1, [pc, #64]	; (800cef4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ceb4:	4810      	ldr	r0, [pc, #64]	; (800cef8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ceb6:	f008 fecd 	bl	8015c54 <iprintf>

  while (pcb != NULL) {
 800ceba:	e011      	b.n	800cee0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681a      	ldr	r2, [r3, #0]
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d108      	bne.n	800ceda <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	68db      	ldr	r3, [r3, #12]
 800cecc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800cece:	68f8      	ldr	r0, [r7, #12]
 800ced0:	f7fe ffca 	bl	800be68 <tcp_abort>
      pcb = next;
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	60fb      	str	r3, [r7, #12]
 800ced8:	e002      	b.n	800cee0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	68db      	ldr	r3, [r3, #12]
 800cede:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d1ea      	bne.n	800cebc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800cee6:	bf00      	nop
 800cee8:	3710      	adds	r7, #16
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}
 800ceee:	bf00      	nop
 800cef0:	080174d0 	.word	0x080174d0
 800cef4:	08017c04 	.word	0x08017c04
 800cef8:	08017514 	.word	0x08017514

0800cefc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b084      	sub	sp, #16
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
 800cf04:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d02a      	beq.n	800cf62 <tcp_netif_ip_addr_changed+0x66>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d026      	beq.n	800cf62 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800cf14:	4b15      	ldr	r3, [pc, #84]	; (800cf6c <tcp_netif_ip_addr_changed+0x70>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	4619      	mov	r1, r3
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f7ff ffbc 	bl	800ce98 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800cf20:	4b13      	ldr	r3, [pc, #76]	; (800cf70 <tcp_netif_ip_addr_changed+0x74>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4619      	mov	r1, r3
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f7ff ffb6 	bl	800ce98 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d017      	beq.n	800cf62 <tcp_netif_ip_addr_changed+0x66>
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d013      	beq.n	800cf62 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cf3a:	4b0e      	ldr	r3, [pc, #56]	; (800cf74 <tcp_netif_ip_addr_changed+0x78>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	60fb      	str	r3, [r7, #12]
 800cf40:	e00c      	b.n	800cf5c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	429a      	cmp	r2, r3
 800cf4c:	d103      	bne.n	800cf56 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	681a      	ldr	r2, [r3, #0]
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	68db      	ldr	r3, [r3, #12]
 800cf5a:	60fb      	str	r3, [r7, #12]
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d1ef      	bne.n	800cf42 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800cf62:	bf00      	nop
 800cf64:	3710      	adds	r7, #16
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}
 800cf6a:	bf00      	nop
 800cf6c:	200076f4 	.word	0x200076f4
 800cf70:	20007700 	.word	0x20007700
 800cf74:	200076fc 	.word	0x200076fc

0800cf78 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d007      	beq.n	800cf98 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f7ff fc3f 	bl	800c810 <tcp_segs_free>
    pcb->ooseq = NULL;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2200      	movs	r2, #0
 800cf96:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800cf98:	bf00      	nop
 800cf9a:	3708      	adds	r7, #8
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800cfa0:	b590      	push	{r4, r7, lr}
 800cfa2:	b08d      	sub	sp, #52	; 0x34
 800cfa4:	af04      	add	r7, sp, #16
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d105      	bne.n	800cfbc <tcp_input+0x1c>
 800cfb0:	4b9b      	ldr	r3, [pc, #620]	; (800d220 <tcp_input+0x280>)
 800cfb2:	2283      	movs	r2, #131	; 0x83
 800cfb4:	499b      	ldr	r1, [pc, #620]	; (800d224 <tcp_input+0x284>)
 800cfb6:	489c      	ldr	r0, [pc, #624]	; (800d228 <tcp_input+0x288>)
 800cfb8:	f008 fe4c 	bl	8015c54 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	685b      	ldr	r3, [r3, #4]
 800cfc0:	4a9a      	ldr	r2, [pc, #616]	; (800d22c <tcp_input+0x28c>)
 800cfc2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	895b      	ldrh	r3, [r3, #10]
 800cfc8:	2b13      	cmp	r3, #19
 800cfca:	f240 83c4 	bls.w	800d756 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cfce:	4b98      	ldr	r3, [pc, #608]	; (800d230 <tcp_input+0x290>)
 800cfd0:	695a      	ldr	r2, [r3, #20]
 800cfd2:	4b97      	ldr	r3, [pc, #604]	; (800d230 <tcp_input+0x290>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	4610      	mov	r0, r2
 800cfda:	f007 fdf1 	bl	8014bc0 <ip4_addr_isbroadcast_u32>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	f040 83ba 	bne.w	800d75a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800cfe6:	4b92      	ldr	r3, [pc, #584]	; (800d230 <tcp_input+0x290>)
 800cfe8:	695b      	ldr	r3, [r3, #20]
 800cfea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cfee:	2be0      	cmp	r3, #224	; 0xe0
 800cff0:	f000 83b3 	beq.w	800d75a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800cff4:	4b8d      	ldr	r3, [pc, #564]	; (800d22c <tcp_input+0x28c>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	899b      	ldrh	r3, [r3, #12]
 800cffa:	b29b      	uxth	r3, r3
 800cffc:	4618      	mov	r0, r3
 800cffe:	f7fc ff02 	bl	8009e06 <lwip_htons>
 800d002:	4603      	mov	r3, r0
 800d004:	0b1b      	lsrs	r3, r3, #12
 800d006:	b29b      	uxth	r3, r3
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	009b      	lsls	r3, r3, #2
 800d00c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d00e:	7cbb      	ldrb	r3, [r7, #18]
 800d010:	2b13      	cmp	r3, #19
 800d012:	f240 83a2 	bls.w	800d75a <tcp_input+0x7ba>
 800d016:	7cbb      	ldrb	r3, [r7, #18]
 800d018:	b29a      	uxth	r2, r3
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	891b      	ldrh	r3, [r3, #8]
 800d01e:	429a      	cmp	r2, r3
 800d020:	f200 839b 	bhi.w	800d75a <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d024:	7cbb      	ldrb	r3, [r7, #18]
 800d026:	b29b      	uxth	r3, r3
 800d028:	3b14      	subs	r3, #20
 800d02a:	b29a      	uxth	r2, r3
 800d02c:	4b81      	ldr	r3, [pc, #516]	; (800d234 <tcp_input+0x294>)
 800d02e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d030:	4b81      	ldr	r3, [pc, #516]	; (800d238 <tcp_input+0x298>)
 800d032:	2200      	movs	r2, #0
 800d034:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	895a      	ldrh	r2, [r3, #10]
 800d03a:	7cbb      	ldrb	r3, [r7, #18]
 800d03c:	b29b      	uxth	r3, r3
 800d03e:	429a      	cmp	r2, r3
 800d040:	d309      	bcc.n	800d056 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d042:	4b7c      	ldr	r3, [pc, #496]	; (800d234 <tcp_input+0x294>)
 800d044:	881a      	ldrh	r2, [r3, #0]
 800d046:	4b7d      	ldr	r3, [pc, #500]	; (800d23c <tcp_input+0x29c>)
 800d048:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d04a:	7cbb      	ldrb	r3, [r7, #18]
 800d04c:	4619      	mov	r1, r3
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f7fe f8f4 	bl	800b23c <pbuf_remove_header>
 800d054:	e04e      	b.n	800d0f4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d105      	bne.n	800d06a <tcp_input+0xca>
 800d05e:	4b70      	ldr	r3, [pc, #448]	; (800d220 <tcp_input+0x280>)
 800d060:	22c2      	movs	r2, #194	; 0xc2
 800d062:	4977      	ldr	r1, [pc, #476]	; (800d240 <tcp_input+0x2a0>)
 800d064:	4870      	ldr	r0, [pc, #448]	; (800d228 <tcp_input+0x288>)
 800d066:	f008 fdf5 	bl	8015c54 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d06a:	2114      	movs	r1, #20
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f7fe f8e5 	bl	800b23c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	895a      	ldrh	r2, [r3, #10]
 800d076:	4b71      	ldr	r3, [pc, #452]	; (800d23c <tcp_input+0x29c>)
 800d078:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d07a:	4b6e      	ldr	r3, [pc, #440]	; (800d234 <tcp_input+0x294>)
 800d07c:	881a      	ldrh	r2, [r3, #0]
 800d07e:	4b6f      	ldr	r3, [pc, #444]	; (800d23c <tcp_input+0x29c>)
 800d080:	881b      	ldrh	r3, [r3, #0]
 800d082:	1ad3      	subs	r3, r2, r3
 800d084:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d086:	4b6d      	ldr	r3, [pc, #436]	; (800d23c <tcp_input+0x29c>)
 800d088:	881b      	ldrh	r3, [r3, #0]
 800d08a:	4619      	mov	r1, r3
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f7fe f8d5 	bl	800b23c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	895b      	ldrh	r3, [r3, #10]
 800d098:	8a3a      	ldrh	r2, [r7, #16]
 800d09a:	429a      	cmp	r2, r3
 800d09c:	f200 835f 	bhi.w	800d75e <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	685b      	ldr	r3, [r3, #4]
 800d0a6:	4a64      	ldr	r2, [pc, #400]	; (800d238 <tcp_input+0x298>)
 800d0a8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	8a3a      	ldrh	r2, [r7, #16]
 800d0b0:	4611      	mov	r1, r2
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7fe f8c2 	bl	800b23c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	891a      	ldrh	r2, [r3, #8]
 800d0bc:	8a3b      	ldrh	r3, [r7, #16]
 800d0be:	1ad3      	subs	r3, r2, r3
 800d0c0:	b29a      	uxth	r2, r3
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	895b      	ldrh	r3, [r3, #10]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d005      	beq.n	800d0da <tcp_input+0x13a>
 800d0ce:	4b54      	ldr	r3, [pc, #336]	; (800d220 <tcp_input+0x280>)
 800d0d0:	22df      	movs	r2, #223	; 0xdf
 800d0d2:	495c      	ldr	r1, [pc, #368]	; (800d244 <tcp_input+0x2a4>)
 800d0d4:	4854      	ldr	r0, [pc, #336]	; (800d228 <tcp_input+0x288>)
 800d0d6:	f008 fdbd 	bl	8015c54 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	891a      	ldrh	r2, [r3, #8]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	891b      	ldrh	r3, [r3, #8]
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d005      	beq.n	800d0f4 <tcp_input+0x154>
 800d0e8:	4b4d      	ldr	r3, [pc, #308]	; (800d220 <tcp_input+0x280>)
 800d0ea:	22e0      	movs	r2, #224	; 0xe0
 800d0ec:	4956      	ldr	r1, [pc, #344]	; (800d248 <tcp_input+0x2a8>)
 800d0ee:	484e      	ldr	r0, [pc, #312]	; (800d228 <tcp_input+0x288>)
 800d0f0:	f008 fdb0 	bl	8015c54 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d0f4:	4b4d      	ldr	r3, [pc, #308]	; (800d22c <tcp_input+0x28c>)
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	881b      	ldrh	r3, [r3, #0]
 800d0fa:	b29a      	uxth	r2, r3
 800d0fc:	4b4b      	ldr	r3, [pc, #300]	; (800d22c <tcp_input+0x28c>)
 800d0fe:	681c      	ldr	r4, [r3, #0]
 800d100:	4610      	mov	r0, r2
 800d102:	f7fc fe80 	bl	8009e06 <lwip_htons>
 800d106:	4603      	mov	r3, r0
 800d108:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d10a:	4b48      	ldr	r3, [pc, #288]	; (800d22c <tcp_input+0x28c>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	885b      	ldrh	r3, [r3, #2]
 800d110:	b29a      	uxth	r2, r3
 800d112:	4b46      	ldr	r3, [pc, #280]	; (800d22c <tcp_input+0x28c>)
 800d114:	681c      	ldr	r4, [r3, #0]
 800d116:	4610      	mov	r0, r2
 800d118:	f7fc fe75 	bl	8009e06 <lwip_htons>
 800d11c:	4603      	mov	r3, r0
 800d11e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d120:	4b42      	ldr	r3, [pc, #264]	; (800d22c <tcp_input+0x28c>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	685a      	ldr	r2, [r3, #4]
 800d126:	4b41      	ldr	r3, [pc, #260]	; (800d22c <tcp_input+0x28c>)
 800d128:	681c      	ldr	r4, [r3, #0]
 800d12a:	4610      	mov	r0, r2
 800d12c:	f7fc fe80 	bl	8009e30 <lwip_htonl>
 800d130:	4603      	mov	r3, r0
 800d132:	6063      	str	r3, [r4, #4]
 800d134:	6863      	ldr	r3, [r4, #4]
 800d136:	4a45      	ldr	r2, [pc, #276]	; (800d24c <tcp_input+0x2ac>)
 800d138:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d13a:	4b3c      	ldr	r3, [pc, #240]	; (800d22c <tcp_input+0x28c>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	689a      	ldr	r2, [r3, #8]
 800d140:	4b3a      	ldr	r3, [pc, #232]	; (800d22c <tcp_input+0x28c>)
 800d142:	681c      	ldr	r4, [r3, #0]
 800d144:	4610      	mov	r0, r2
 800d146:	f7fc fe73 	bl	8009e30 <lwip_htonl>
 800d14a:	4603      	mov	r3, r0
 800d14c:	60a3      	str	r3, [r4, #8]
 800d14e:	68a3      	ldr	r3, [r4, #8]
 800d150:	4a3f      	ldr	r2, [pc, #252]	; (800d250 <tcp_input+0x2b0>)
 800d152:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d154:	4b35      	ldr	r3, [pc, #212]	; (800d22c <tcp_input+0x28c>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	89db      	ldrh	r3, [r3, #14]
 800d15a:	b29a      	uxth	r2, r3
 800d15c:	4b33      	ldr	r3, [pc, #204]	; (800d22c <tcp_input+0x28c>)
 800d15e:	681c      	ldr	r4, [r3, #0]
 800d160:	4610      	mov	r0, r2
 800d162:	f7fc fe50 	bl	8009e06 <lwip_htons>
 800d166:	4603      	mov	r3, r0
 800d168:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d16a:	4b30      	ldr	r3, [pc, #192]	; (800d22c <tcp_input+0x28c>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	899b      	ldrh	r3, [r3, #12]
 800d170:	b29b      	uxth	r3, r3
 800d172:	4618      	mov	r0, r3
 800d174:	f7fc fe47 	bl	8009e06 <lwip_htons>
 800d178:	4603      	mov	r3, r0
 800d17a:	b2db      	uxtb	r3, r3
 800d17c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d180:	b2da      	uxtb	r2, r3
 800d182:	4b34      	ldr	r3, [pc, #208]	; (800d254 <tcp_input+0x2b4>)
 800d184:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	891a      	ldrh	r2, [r3, #8]
 800d18a:	4b33      	ldr	r3, [pc, #204]	; (800d258 <tcp_input+0x2b8>)
 800d18c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d18e:	4b31      	ldr	r3, [pc, #196]	; (800d254 <tcp_input+0x2b4>)
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	f003 0303 	and.w	r3, r3, #3
 800d196:	2b00      	cmp	r3, #0
 800d198:	d00c      	beq.n	800d1b4 <tcp_input+0x214>
    tcplen++;
 800d19a:	4b2f      	ldr	r3, [pc, #188]	; (800d258 <tcp_input+0x2b8>)
 800d19c:	881b      	ldrh	r3, [r3, #0]
 800d19e:	3301      	adds	r3, #1
 800d1a0:	b29a      	uxth	r2, r3
 800d1a2:	4b2d      	ldr	r3, [pc, #180]	; (800d258 <tcp_input+0x2b8>)
 800d1a4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	891a      	ldrh	r2, [r3, #8]
 800d1aa:	4b2b      	ldr	r3, [pc, #172]	; (800d258 <tcp_input+0x2b8>)
 800d1ac:	881b      	ldrh	r3, [r3, #0]
 800d1ae:	429a      	cmp	r2, r3
 800d1b0:	f200 82d7 	bhi.w	800d762 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1b8:	4b28      	ldr	r3, [pc, #160]	; (800d25c <tcp_input+0x2bc>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	61fb      	str	r3, [r7, #28]
 800d1be:	e09d      	b.n	800d2fc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d1c0:	69fb      	ldr	r3, [r7, #28]
 800d1c2:	7d1b      	ldrb	r3, [r3, #20]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d105      	bne.n	800d1d4 <tcp_input+0x234>
 800d1c8:	4b15      	ldr	r3, [pc, #84]	; (800d220 <tcp_input+0x280>)
 800d1ca:	22fb      	movs	r2, #251	; 0xfb
 800d1cc:	4924      	ldr	r1, [pc, #144]	; (800d260 <tcp_input+0x2c0>)
 800d1ce:	4816      	ldr	r0, [pc, #88]	; (800d228 <tcp_input+0x288>)
 800d1d0:	f008 fd40 	bl	8015c54 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d1d4:	69fb      	ldr	r3, [r7, #28]
 800d1d6:	7d1b      	ldrb	r3, [r3, #20]
 800d1d8:	2b0a      	cmp	r3, #10
 800d1da:	d105      	bne.n	800d1e8 <tcp_input+0x248>
 800d1dc:	4b10      	ldr	r3, [pc, #64]	; (800d220 <tcp_input+0x280>)
 800d1de:	22fc      	movs	r2, #252	; 0xfc
 800d1e0:	4920      	ldr	r1, [pc, #128]	; (800d264 <tcp_input+0x2c4>)
 800d1e2:	4811      	ldr	r0, [pc, #68]	; (800d228 <tcp_input+0x288>)
 800d1e4:	f008 fd36 	bl	8015c54 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	7d1b      	ldrb	r3, [r3, #20]
 800d1ec:	2b01      	cmp	r3, #1
 800d1ee:	d105      	bne.n	800d1fc <tcp_input+0x25c>
 800d1f0:	4b0b      	ldr	r3, [pc, #44]	; (800d220 <tcp_input+0x280>)
 800d1f2:	22fd      	movs	r2, #253	; 0xfd
 800d1f4:	491c      	ldr	r1, [pc, #112]	; (800d268 <tcp_input+0x2c8>)
 800d1f6:	480c      	ldr	r0, [pc, #48]	; (800d228 <tcp_input+0x288>)
 800d1f8:	f008 fd2c 	bl	8015c54 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d1fc:	69fb      	ldr	r3, [r7, #28]
 800d1fe:	7a1b      	ldrb	r3, [r3, #8]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d033      	beq.n	800d26c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d204:	69fb      	ldr	r3, [r7, #28]
 800d206:	7a1a      	ldrb	r2, [r3, #8]
 800d208:	4b09      	ldr	r3, [pc, #36]	; (800d230 <tcp_input+0x290>)
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d210:	3301      	adds	r3, #1
 800d212:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d214:	429a      	cmp	r2, r3
 800d216:	d029      	beq.n	800d26c <tcp_input+0x2cc>
      prev = pcb;
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	61bb      	str	r3, [r7, #24]
      continue;
 800d21c:	e06b      	b.n	800d2f6 <tcp_input+0x356>
 800d21e:	bf00      	nop
 800d220:	08017c38 	.word	0x08017c38
 800d224:	08017c6c 	.word	0x08017c6c
 800d228:	08017c84 	.word	0x08017c84
 800d22c:	20000464 	.word	0x20000464
 800d230:	20004190 	.word	0x20004190
 800d234:	20000468 	.word	0x20000468
 800d238:	2000046c 	.word	0x2000046c
 800d23c:	2000046a 	.word	0x2000046a
 800d240:	08017cac 	.word	0x08017cac
 800d244:	08017cbc 	.word	0x08017cbc
 800d248:	08017cc8 	.word	0x08017cc8
 800d24c:	20000474 	.word	0x20000474
 800d250:	20000478 	.word	0x20000478
 800d254:	20000480 	.word	0x20000480
 800d258:	2000047e 	.word	0x2000047e
 800d25c:	200076f4 	.word	0x200076f4
 800d260:	08017ce8 	.word	0x08017ce8
 800d264:	08017d10 	.word	0x08017d10
 800d268:	08017d3c 	.word	0x08017d3c
    }

    if (pcb->remote_port == tcphdr->src &&
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	8b1a      	ldrh	r2, [r3, #24]
 800d270:	4b94      	ldr	r3, [pc, #592]	; (800d4c4 <tcp_input+0x524>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	881b      	ldrh	r3, [r3, #0]
 800d276:	b29b      	uxth	r3, r3
 800d278:	429a      	cmp	r2, r3
 800d27a:	d13a      	bne.n	800d2f2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d27c:	69fb      	ldr	r3, [r7, #28]
 800d27e:	8ada      	ldrh	r2, [r3, #22]
 800d280:	4b90      	ldr	r3, [pc, #576]	; (800d4c4 <tcp_input+0x524>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	885b      	ldrh	r3, [r3, #2]
 800d286:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d288:	429a      	cmp	r2, r3
 800d28a:	d132      	bne.n	800d2f2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d28c:	69fb      	ldr	r3, [r7, #28]
 800d28e:	685a      	ldr	r2, [r3, #4]
 800d290:	4b8d      	ldr	r3, [pc, #564]	; (800d4c8 <tcp_input+0x528>)
 800d292:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d294:	429a      	cmp	r2, r3
 800d296:	d12c      	bne.n	800d2f2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d298:	69fb      	ldr	r3, [r7, #28]
 800d29a:	681a      	ldr	r2, [r3, #0]
 800d29c:	4b8a      	ldr	r3, [pc, #552]	; (800d4c8 <tcp_input+0x528>)
 800d29e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d126      	bne.n	800d2f2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d2a4:	69fb      	ldr	r3, [r7, #28]
 800d2a6:	68db      	ldr	r3, [r3, #12]
 800d2a8:	69fa      	ldr	r2, [r7, #28]
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d106      	bne.n	800d2bc <tcp_input+0x31c>
 800d2ae:	4b87      	ldr	r3, [pc, #540]	; (800d4cc <tcp_input+0x52c>)
 800d2b0:	f240 120d 	movw	r2, #269	; 0x10d
 800d2b4:	4986      	ldr	r1, [pc, #536]	; (800d4d0 <tcp_input+0x530>)
 800d2b6:	4887      	ldr	r0, [pc, #540]	; (800d4d4 <tcp_input+0x534>)
 800d2b8:	f008 fccc 	bl	8015c54 <iprintf>
      if (prev != NULL) {
 800d2bc:	69bb      	ldr	r3, [r7, #24]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d00a      	beq.n	800d2d8 <tcp_input+0x338>
        prev->next = pcb->next;
 800d2c2:	69fb      	ldr	r3, [r7, #28]
 800d2c4:	68da      	ldr	r2, [r3, #12]
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d2ca:	4b83      	ldr	r3, [pc, #524]	; (800d4d8 <tcp_input+0x538>)
 800d2cc:	681a      	ldr	r2, [r3, #0]
 800d2ce:	69fb      	ldr	r3, [r7, #28]
 800d2d0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d2d2:	4a81      	ldr	r2, [pc, #516]	; (800d4d8 <tcp_input+0x538>)
 800d2d4:	69fb      	ldr	r3, [r7, #28]
 800d2d6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d2d8:	69fb      	ldr	r3, [r7, #28]
 800d2da:	68db      	ldr	r3, [r3, #12]
 800d2dc:	69fa      	ldr	r2, [r7, #28]
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d111      	bne.n	800d306 <tcp_input+0x366>
 800d2e2:	4b7a      	ldr	r3, [pc, #488]	; (800d4cc <tcp_input+0x52c>)
 800d2e4:	f240 1215 	movw	r2, #277	; 0x115
 800d2e8:	497c      	ldr	r1, [pc, #496]	; (800d4dc <tcp_input+0x53c>)
 800d2ea:	487a      	ldr	r0, [pc, #488]	; (800d4d4 <tcp_input+0x534>)
 800d2ec:	f008 fcb2 	bl	8015c54 <iprintf>
      break;
 800d2f0:	e009      	b.n	800d306 <tcp_input+0x366>
    }
    prev = pcb;
 800d2f2:	69fb      	ldr	r3, [r7, #28]
 800d2f4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d2f6:	69fb      	ldr	r3, [r7, #28]
 800d2f8:	68db      	ldr	r3, [r3, #12]
 800d2fa:	61fb      	str	r3, [r7, #28]
 800d2fc:	69fb      	ldr	r3, [r7, #28]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	f47f af5e 	bne.w	800d1c0 <tcp_input+0x220>
 800d304:	e000      	b.n	800d308 <tcp_input+0x368>
      break;
 800d306:	bf00      	nop
  }

  if (pcb == NULL) {
 800d308:	69fb      	ldr	r3, [r7, #28]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	f040 8095 	bne.w	800d43a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d310:	4b73      	ldr	r3, [pc, #460]	; (800d4e0 <tcp_input+0x540>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	61fb      	str	r3, [r7, #28]
 800d316:	e03f      	b.n	800d398 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d318:	69fb      	ldr	r3, [r7, #28]
 800d31a:	7d1b      	ldrb	r3, [r3, #20]
 800d31c:	2b0a      	cmp	r3, #10
 800d31e:	d006      	beq.n	800d32e <tcp_input+0x38e>
 800d320:	4b6a      	ldr	r3, [pc, #424]	; (800d4cc <tcp_input+0x52c>)
 800d322:	f240 121f 	movw	r2, #287	; 0x11f
 800d326:	496f      	ldr	r1, [pc, #444]	; (800d4e4 <tcp_input+0x544>)
 800d328:	486a      	ldr	r0, [pc, #424]	; (800d4d4 <tcp_input+0x534>)
 800d32a:	f008 fc93 	bl	8015c54 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d32e:	69fb      	ldr	r3, [r7, #28]
 800d330:	7a1b      	ldrb	r3, [r3, #8]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d009      	beq.n	800d34a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d336:	69fb      	ldr	r3, [r7, #28]
 800d338:	7a1a      	ldrb	r2, [r3, #8]
 800d33a:	4b63      	ldr	r3, [pc, #396]	; (800d4c8 <tcp_input+0x528>)
 800d33c:	685b      	ldr	r3, [r3, #4]
 800d33e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d342:	3301      	adds	r3, #1
 800d344:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d346:	429a      	cmp	r2, r3
 800d348:	d122      	bne.n	800d390 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d34a:	69fb      	ldr	r3, [r7, #28]
 800d34c:	8b1a      	ldrh	r2, [r3, #24]
 800d34e:	4b5d      	ldr	r3, [pc, #372]	; (800d4c4 <tcp_input+0x524>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	881b      	ldrh	r3, [r3, #0]
 800d354:	b29b      	uxth	r3, r3
 800d356:	429a      	cmp	r2, r3
 800d358:	d11b      	bne.n	800d392 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d35a:	69fb      	ldr	r3, [r7, #28]
 800d35c:	8ada      	ldrh	r2, [r3, #22]
 800d35e:	4b59      	ldr	r3, [pc, #356]	; (800d4c4 <tcp_input+0x524>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	885b      	ldrh	r3, [r3, #2]
 800d364:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d366:	429a      	cmp	r2, r3
 800d368:	d113      	bne.n	800d392 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d36a:	69fb      	ldr	r3, [r7, #28]
 800d36c:	685a      	ldr	r2, [r3, #4]
 800d36e:	4b56      	ldr	r3, [pc, #344]	; (800d4c8 <tcp_input+0x528>)
 800d370:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d372:	429a      	cmp	r2, r3
 800d374:	d10d      	bne.n	800d392 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d376:	69fb      	ldr	r3, [r7, #28]
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	4b53      	ldr	r3, [pc, #332]	; (800d4c8 <tcp_input+0x528>)
 800d37c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d37e:	429a      	cmp	r2, r3
 800d380:	d107      	bne.n	800d392 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d382:	69f8      	ldr	r0, [r7, #28]
 800d384:	f000 fb52 	bl	800da2c <tcp_timewait_input>
        }
        pbuf_free(p);
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f7fd ffdd 	bl	800b348 <pbuf_free>
        return;
 800d38e:	e1ee      	b.n	800d76e <tcp_input+0x7ce>
        continue;
 800d390:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d392:	69fb      	ldr	r3, [r7, #28]
 800d394:	68db      	ldr	r3, [r3, #12]
 800d396:	61fb      	str	r3, [r7, #28]
 800d398:	69fb      	ldr	r3, [r7, #28]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d1bc      	bne.n	800d318 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d3a2:	4b51      	ldr	r3, [pc, #324]	; (800d4e8 <tcp_input+0x548>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	617b      	str	r3, [r7, #20]
 800d3a8:	e02a      	b.n	800d400 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	7a1b      	ldrb	r3, [r3, #8]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d00c      	beq.n	800d3cc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	7a1a      	ldrb	r2, [r3, #8]
 800d3b6:	4b44      	ldr	r3, [pc, #272]	; (800d4c8 <tcp_input+0x528>)
 800d3b8:	685b      	ldr	r3, [r3, #4]
 800d3ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d3be:	3301      	adds	r3, #1
 800d3c0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d002      	beq.n	800d3cc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	61bb      	str	r3, [r7, #24]
        continue;
 800d3ca:	e016      	b.n	800d3fa <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	8ada      	ldrh	r2, [r3, #22]
 800d3d0:	4b3c      	ldr	r3, [pc, #240]	; (800d4c4 <tcp_input+0x524>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	885b      	ldrh	r3, [r3, #2]
 800d3d6:	b29b      	uxth	r3, r3
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d10c      	bne.n	800d3f6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	681a      	ldr	r2, [r3, #0]
 800d3e0:	4b39      	ldr	r3, [pc, #228]	; (800d4c8 <tcp_input+0x528>)
 800d3e2:	695b      	ldr	r3, [r3, #20]
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d00f      	beq.n	800d408 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d00d      	beq.n	800d40a <tcp_input+0x46a>
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d009      	beq.n	800d40a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	68db      	ldr	r3, [r3, #12]
 800d3fe:	617b      	str	r3, [r7, #20]
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d1d1      	bne.n	800d3aa <tcp_input+0x40a>
 800d406:	e000      	b.n	800d40a <tcp_input+0x46a>
            break;
 800d408:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d014      	beq.n	800d43a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d410:	69bb      	ldr	r3, [r7, #24]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d00a      	beq.n	800d42c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	68da      	ldr	r2, [r3, #12]
 800d41a:	69bb      	ldr	r3, [r7, #24]
 800d41c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d41e:	4b32      	ldr	r3, [pc, #200]	; (800d4e8 <tcp_input+0x548>)
 800d420:	681a      	ldr	r2, [r3, #0]
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d426:	4a30      	ldr	r2, [pc, #192]	; (800d4e8 <tcp_input+0x548>)
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d42c:	6978      	ldr	r0, [r7, #20]
 800d42e:	f000 f9ff 	bl	800d830 <tcp_listen_input>
      }
      pbuf_free(p);
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f7fd ff88 	bl	800b348 <pbuf_free>
      return;
 800d438:	e199      	b.n	800d76e <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d43a:	69fb      	ldr	r3, [r7, #28]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	f000 8160 	beq.w	800d702 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d442:	4b2a      	ldr	r3, [pc, #168]	; (800d4ec <tcp_input+0x54c>)
 800d444:	2200      	movs	r2, #0
 800d446:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	891a      	ldrh	r2, [r3, #8]
 800d44c:	4b27      	ldr	r3, [pc, #156]	; (800d4ec <tcp_input+0x54c>)
 800d44e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d450:	4a26      	ldr	r2, [pc, #152]	; (800d4ec <tcp_input+0x54c>)
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d456:	4b1b      	ldr	r3, [pc, #108]	; (800d4c4 <tcp_input+0x524>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	4a24      	ldr	r2, [pc, #144]	; (800d4ec <tcp_input+0x54c>)
 800d45c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d45e:	4b24      	ldr	r3, [pc, #144]	; (800d4f0 <tcp_input+0x550>)
 800d460:	2200      	movs	r2, #0
 800d462:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d464:	4b23      	ldr	r3, [pc, #140]	; (800d4f4 <tcp_input+0x554>)
 800d466:	2200      	movs	r2, #0
 800d468:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d46a:	4b23      	ldr	r3, [pc, #140]	; (800d4f8 <tcp_input+0x558>)
 800d46c:	2200      	movs	r2, #0
 800d46e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d470:	4b22      	ldr	r3, [pc, #136]	; (800d4fc <tcp_input+0x55c>)
 800d472:	781b      	ldrb	r3, [r3, #0]
 800d474:	f003 0308 	and.w	r3, r3, #8
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d006      	beq.n	800d48a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	7b5b      	ldrb	r3, [r3, #13]
 800d480:	f043 0301 	orr.w	r3, r3, #1
 800d484:	b2da      	uxtb	r2, r3
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d48a:	69fb      	ldr	r3, [r7, #28]
 800d48c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d038      	beq.n	800d504 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d492:	69f8      	ldr	r0, [r7, #28]
 800d494:	f7ff f940 	bl	800c718 <tcp_process_refused_data>
 800d498:	4603      	mov	r3, r0
 800d49a:	f113 0f0d 	cmn.w	r3, #13
 800d49e:	d007      	beq.n	800d4b0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d4a0:	69fb      	ldr	r3, [r7, #28]
 800d4a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d02d      	beq.n	800d504 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d4a8:	4b15      	ldr	r3, [pc, #84]	; (800d500 <tcp_input+0x560>)
 800d4aa:	881b      	ldrh	r3, [r3, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d029      	beq.n	800d504 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d4b0:	69fb      	ldr	r3, [r7, #28]
 800d4b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	f040 8104 	bne.w	800d6c2 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d4ba:	69f8      	ldr	r0, [r7, #28]
 800d4bc:	f003 f9cc 	bl	8010858 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d4c0:	e0ff      	b.n	800d6c2 <tcp_input+0x722>
 800d4c2:	bf00      	nop
 800d4c4:	20000464 	.word	0x20000464
 800d4c8:	20004190 	.word	0x20004190
 800d4cc:	08017c38 	.word	0x08017c38
 800d4d0:	08017d64 	.word	0x08017d64
 800d4d4:	08017c84 	.word	0x08017c84
 800d4d8:	200076f4 	.word	0x200076f4
 800d4dc:	08017d90 	.word	0x08017d90
 800d4e0:	20007704 	.word	0x20007704
 800d4e4:	08017dbc 	.word	0x08017dbc
 800d4e8:	200076fc 	.word	0x200076fc
 800d4ec:	20000454 	.word	0x20000454
 800d4f0:	20000484 	.word	0x20000484
 800d4f4:	20000481 	.word	0x20000481
 800d4f8:	2000047c 	.word	0x2000047c
 800d4fc:	20000480 	.word	0x20000480
 800d500:	2000047e 	.word	0x2000047e
      }
    }
    tcp_input_pcb = pcb;
 800d504:	4a9b      	ldr	r2, [pc, #620]	; (800d774 <tcp_input+0x7d4>)
 800d506:	69fb      	ldr	r3, [r7, #28]
 800d508:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d50a:	69f8      	ldr	r0, [r7, #28]
 800d50c:	f000 fb0a 	bl	800db24 <tcp_process>
 800d510:	4603      	mov	r3, r0
 800d512:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d514:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d518:	f113 0f0d 	cmn.w	r3, #13
 800d51c:	f000 80d3 	beq.w	800d6c6 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800d520:	4b95      	ldr	r3, [pc, #596]	; (800d778 <tcp_input+0x7d8>)
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	f003 0308 	and.w	r3, r3, #8
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d015      	beq.n	800d558 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d52c:	69fb      	ldr	r3, [r7, #28]
 800d52e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d532:	2b00      	cmp	r3, #0
 800d534:	d008      	beq.n	800d548 <tcp_input+0x5a8>
 800d536:	69fb      	ldr	r3, [r7, #28]
 800d538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d53c:	69fa      	ldr	r2, [r7, #28]
 800d53e:	6912      	ldr	r2, [r2, #16]
 800d540:	f06f 010d 	mvn.w	r1, #13
 800d544:	4610      	mov	r0, r2
 800d546:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d548:	69f9      	ldr	r1, [r7, #28]
 800d54a:	488c      	ldr	r0, [pc, #560]	; (800d77c <tcp_input+0x7dc>)
 800d54c:	f7ff fbb0 	bl	800ccb0 <tcp_pcb_remove>
        tcp_free(pcb);
 800d550:	69f8      	ldr	r0, [r7, #28]
 800d552:	f7fe f9a9 	bl	800b8a8 <tcp_free>
 800d556:	e0c1      	b.n	800d6dc <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800d558:	2300      	movs	r3, #0
 800d55a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d55c:	4b88      	ldr	r3, [pc, #544]	; (800d780 <tcp_input+0x7e0>)
 800d55e:	881b      	ldrh	r3, [r3, #0]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d01d      	beq.n	800d5a0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d564:	4b86      	ldr	r3, [pc, #536]	; (800d780 <tcp_input+0x7e0>)
 800d566:	881b      	ldrh	r3, [r3, #0]
 800d568:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d56a:	69fb      	ldr	r3, [r7, #28]
 800d56c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d570:	2b00      	cmp	r3, #0
 800d572:	d00a      	beq.n	800d58a <tcp_input+0x5ea>
 800d574:	69fb      	ldr	r3, [r7, #28]
 800d576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d57a:	69fa      	ldr	r2, [r7, #28]
 800d57c:	6910      	ldr	r0, [r2, #16]
 800d57e:	89fa      	ldrh	r2, [r7, #14]
 800d580:	69f9      	ldr	r1, [r7, #28]
 800d582:	4798      	blx	r3
 800d584:	4603      	mov	r3, r0
 800d586:	74fb      	strb	r3, [r7, #19]
 800d588:	e001      	b.n	800d58e <tcp_input+0x5ee>
 800d58a:	2300      	movs	r3, #0
 800d58c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d58e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d592:	f113 0f0d 	cmn.w	r3, #13
 800d596:	f000 8098 	beq.w	800d6ca <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d59a:	4b79      	ldr	r3, [pc, #484]	; (800d780 <tcp_input+0x7e0>)
 800d59c:	2200      	movs	r2, #0
 800d59e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d5a0:	69f8      	ldr	r0, [r7, #28]
 800d5a2:	f000 f905 	bl	800d7b0 <tcp_input_delayed_close>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	f040 8090 	bne.w	800d6ce <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d5ae:	4b75      	ldr	r3, [pc, #468]	; (800d784 <tcp_input+0x7e4>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d041      	beq.n	800d63a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d5b6:	69fb      	ldr	r3, [r7, #28]
 800d5b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d006      	beq.n	800d5cc <tcp_input+0x62c>
 800d5be:	4b72      	ldr	r3, [pc, #456]	; (800d788 <tcp_input+0x7e8>)
 800d5c0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d5c4:	4971      	ldr	r1, [pc, #452]	; (800d78c <tcp_input+0x7ec>)
 800d5c6:	4872      	ldr	r0, [pc, #456]	; (800d790 <tcp_input+0x7f0>)
 800d5c8:	f008 fb44 	bl	8015c54 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d5cc:	69fb      	ldr	r3, [r7, #28]
 800d5ce:	8b5b      	ldrh	r3, [r3, #26]
 800d5d0:	f003 0310 	and.w	r3, r3, #16
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d008      	beq.n	800d5ea <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d5d8:	4b6a      	ldr	r3, [pc, #424]	; (800d784 <tcp_input+0x7e4>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f7fd feb3 	bl	800b348 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d5e2:	69f8      	ldr	r0, [r7, #28]
 800d5e4:	f7fe fc40 	bl	800be68 <tcp_abort>
            goto aborted;
 800d5e8:	e078      	b.n	800d6dc <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d5ea:	69fb      	ldr	r3, [r7, #28]
 800d5ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d00c      	beq.n	800d60e <tcp_input+0x66e>
 800d5f4:	69fb      	ldr	r3, [r7, #28]
 800d5f6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d5fa:	69fb      	ldr	r3, [r7, #28]
 800d5fc:	6918      	ldr	r0, [r3, #16]
 800d5fe:	4b61      	ldr	r3, [pc, #388]	; (800d784 <tcp_input+0x7e4>)
 800d600:	681a      	ldr	r2, [r3, #0]
 800d602:	2300      	movs	r3, #0
 800d604:	69f9      	ldr	r1, [r7, #28]
 800d606:	47a0      	blx	r4
 800d608:	4603      	mov	r3, r0
 800d60a:	74fb      	strb	r3, [r7, #19]
 800d60c:	e008      	b.n	800d620 <tcp_input+0x680>
 800d60e:	4b5d      	ldr	r3, [pc, #372]	; (800d784 <tcp_input+0x7e4>)
 800d610:	681a      	ldr	r2, [r3, #0]
 800d612:	2300      	movs	r3, #0
 800d614:	69f9      	ldr	r1, [r7, #28]
 800d616:	2000      	movs	r0, #0
 800d618:	f7ff f952 	bl	800c8c0 <tcp_recv_null>
 800d61c:	4603      	mov	r3, r0
 800d61e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d620:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d624:	f113 0f0d 	cmn.w	r3, #13
 800d628:	d053      	beq.n	800d6d2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d62a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d003      	beq.n	800d63a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d632:	4b54      	ldr	r3, [pc, #336]	; (800d784 <tcp_input+0x7e4>)
 800d634:	681a      	ldr	r2, [r3, #0]
 800d636:	69fb      	ldr	r3, [r7, #28]
 800d638:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d63a:	4b4f      	ldr	r3, [pc, #316]	; (800d778 <tcp_input+0x7d8>)
 800d63c:	781b      	ldrb	r3, [r3, #0]
 800d63e:	f003 0320 	and.w	r3, r3, #32
 800d642:	2b00      	cmp	r3, #0
 800d644:	d030      	beq.n	800d6a8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800d646:	69fb      	ldr	r3, [r7, #28]
 800d648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d009      	beq.n	800d662 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d64e:	69fb      	ldr	r3, [r7, #28]
 800d650:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d652:	7b5a      	ldrb	r2, [r3, #13]
 800d654:	69fb      	ldr	r3, [r7, #28]
 800d656:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d658:	f042 0220 	orr.w	r2, r2, #32
 800d65c:	b2d2      	uxtb	r2, r2
 800d65e:	735a      	strb	r2, [r3, #13]
 800d660:	e022      	b.n	800d6a8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d666:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d66a:	d005      	beq.n	800d678 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800d66c:	69fb      	ldr	r3, [r7, #28]
 800d66e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d670:	3301      	adds	r3, #1
 800d672:	b29a      	uxth	r2, r3
 800d674:	69fb      	ldr	r3, [r7, #28]
 800d676:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d678:	69fb      	ldr	r3, [r7, #28]
 800d67a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d00b      	beq.n	800d69a <tcp_input+0x6fa>
 800d682:	69fb      	ldr	r3, [r7, #28]
 800d684:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d688:	69fb      	ldr	r3, [r7, #28]
 800d68a:	6918      	ldr	r0, [r3, #16]
 800d68c:	2300      	movs	r3, #0
 800d68e:	2200      	movs	r2, #0
 800d690:	69f9      	ldr	r1, [r7, #28]
 800d692:	47a0      	blx	r4
 800d694:	4603      	mov	r3, r0
 800d696:	74fb      	strb	r3, [r7, #19]
 800d698:	e001      	b.n	800d69e <tcp_input+0x6fe>
 800d69a:	2300      	movs	r3, #0
 800d69c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d69e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d6a2:	f113 0f0d 	cmn.w	r3, #13
 800d6a6:	d016      	beq.n	800d6d6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d6a8:	4b32      	ldr	r3, [pc, #200]	; (800d774 <tcp_input+0x7d4>)
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d6ae:	69f8      	ldr	r0, [r7, #28]
 800d6b0:	f000 f87e 	bl	800d7b0 <tcp_input_delayed_close>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d10f      	bne.n	800d6da <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d6ba:	69f8      	ldr	r0, [r7, #28]
 800d6bc:	f002 fab6 	bl	800fc2c <tcp_output>
 800d6c0:	e00c      	b.n	800d6dc <tcp_input+0x73c>
        goto aborted;
 800d6c2:	bf00      	nop
 800d6c4:	e00a      	b.n	800d6dc <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d6c6:	bf00      	nop
 800d6c8:	e008      	b.n	800d6dc <tcp_input+0x73c>
              goto aborted;
 800d6ca:	bf00      	nop
 800d6cc:	e006      	b.n	800d6dc <tcp_input+0x73c>
          goto aborted;
 800d6ce:	bf00      	nop
 800d6d0:	e004      	b.n	800d6dc <tcp_input+0x73c>
            goto aborted;
 800d6d2:	bf00      	nop
 800d6d4:	e002      	b.n	800d6dc <tcp_input+0x73c>
              goto aborted;
 800d6d6:	bf00      	nop
 800d6d8:	e000      	b.n	800d6dc <tcp_input+0x73c>
          goto aborted;
 800d6da:	bf00      	nop
    tcp_input_pcb = NULL;
 800d6dc:	4b25      	ldr	r3, [pc, #148]	; (800d774 <tcp_input+0x7d4>)
 800d6de:	2200      	movs	r2, #0
 800d6e0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d6e2:	4b28      	ldr	r3, [pc, #160]	; (800d784 <tcp_input+0x7e4>)
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d6e8:	4b2a      	ldr	r3, [pc, #168]	; (800d794 <tcp_input+0x7f4>)
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d03d      	beq.n	800d76c <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800d6f0:	4b28      	ldr	r3, [pc, #160]	; (800d794 <tcp_input+0x7f4>)
 800d6f2:	685b      	ldr	r3, [r3, #4]
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7fd fe27 	bl	800b348 <pbuf_free>
      inseg.p = NULL;
 800d6fa:	4b26      	ldr	r3, [pc, #152]	; (800d794 <tcp_input+0x7f4>)
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d700:	e034      	b.n	800d76c <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d702:	4b25      	ldr	r3, [pc, #148]	; (800d798 <tcp_input+0x7f8>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	899b      	ldrh	r3, [r3, #12]
 800d708:	b29b      	uxth	r3, r3
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7fc fb7b 	bl	8009e06 <lwip_htons>
 800d710:	4603      	mov	r3, r0
 800d712:	b2db      	uxtb	r3, r3
 800d714:	f003 0304 	and.w	r3, r3, #4
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d118      	bne.n	800d74e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d71c:	4b1f      	ldr	r3, [pc, #124]	; (800d79c <tcp_input+0x7fc>)
 800d71e:	6819      	ldr	r1, [r3, #0]
 800d720:	4b1f      	ldr	r3, [pc, #124]	; (800d7a0 <tcp_input+0x800>)
 800d722:	881b      	ldrh	r3, [r3, #0]
 800d724:	461a      	mov	r2, r3
 800d726:	4b1f      	ldr	r3, [pc, #124]	; (800d7a4 <tcp_input+0x804>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d72c:	4b1a      	ldr	r3, [pc, #104]	; (800d798 <tcp_input+0x7f8>)
 800d72e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d730:	885b      	ldrh	r3, [r3, #2]
 800d732:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d734:	4a18      	ldr	r2, [pc, #96]	; (800d798 <tcp_input+0x7f8>)
 800d736:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d738:	8812      	ldrh	r2, [r2, #0]
 800d73a:	b292      	uxth	r2, r2
 800d73c:	9202      	str	r2, [sp, #8]
 800d73e:	9301      	str	r3, [sp, #4]
 800d740:	4b19      	ldr	r3, [pc, #100]	; (800d7a8 <tcp_input+0x808>)
 800d742:	9300      	str	r3, [sp, #0]
 800d744:	4b19      	ldr	r3, [pc, #100]	; (800d7ac <tcp_input+0x80c>)
 800d746:	4602      	mov	r2, r0
 800d748:	2000      	movs	r0, #0
 800d74a:	f003 f833 	bl	80107b4 <tcp_rst>
    pbuf_free(p);
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f7fd fdfa 	bl	800b348 <pbuf_free>
  return;
 800d754:	e00a      	b.n	800d76c <tcp_input+0x7cc>
    goto dropped;
 800d756:	bf00      	nop
 800d758:	e004      	b.n	800d764 <tcp_input+0x7c4>
dropped:
 800d75a:	bf00      	nop
 800d75c:	e002      	b.n	800d764 <tcp_input+0x7c4>
      goto dropped;
 800d75e:	bf00      	nop
 800d760:	e000      	b.n	800d764 <tcp_input+0x7c4>
      goto dropped;
 800d762:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f7fd fdef 	bl	800b348 <pbuf_free>
 800d76a:	e000      	b.n	800d76e <tcp_input+0x7ce>
  return;
 800d76c:	bf00      	nop
}
 800d76e:	3724      	adds	r7, #36	; 0x24
 800d770:	46bd      	mov	sp, r7
 800d772:	bd90      	pop	{r4, r7, pc}
 800d774:	20007708 	.word	0x20007708
 800d778:	20000481 	.word	0x20000481
 800d77c:	200076f4 	.word	0x200076f4
 800d780:	2000047c 	.word	0x2000047c
 800d784:	20000484 	.word	0x20000484
 800d788:	08017c38 	.word	0x08017c38
 800d78c:	08017dec 	.word	0x08017dec
 800d790:	08017c84 	.word	0x08017c84
 800d794:	20000454 	.word	0x20000454
 800d798:	20000464 	.word	0x20000464
 800d79c:	20000478 	.word	0x20000478
 800d7a0:	2000047e 	.word	0x2000047e
 800d7a4:	20000474 	.word	0x20000474
 800d7a8:	200041a0 	.word	0x200041a0
 800d7ac:	200041a4 	.word	0x200041a4

0800d7b0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b082      	sub	sp, #8
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d106      	bne.n	800d7cc <tcp_input_delayed_close+0x1c>
 800d7be:	4b17      	ldr	r3, [pc, #92]	; (800d81c <tcp_input_delayed_close+0x6c>)
 800d7c0:	f240 225a 	movw	r2, #602	; 0x25a
 800d7c4:	4916      	ldr	r1, [pc, #88]	; (800d820 <tcp_input_delayed_close+0x70>)
 800d7c6:	4817      	ldr	r0, [pc, #92]	; (800d824 <tcp_input_delayed_close+0x74>)
 800d7c8:	f008 fa44 	bl	8015c54 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d7cc:	4b16      	ldr	r3, [pc, #88]	; (800d828 <tcp_input_delayed_close+0x78>)
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	f003 0310 	and.w	r3, r3, #16
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d01c      	beq.n	800d812 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	8b5b      	ldrh	r3, [r3, #26]
 800d7dc:	f003 0310 	and.w	r3, r3, #16
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d10d      	bne.n	800d800 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d008      	beq.n	800d800 <tcp_input_delayed_close+0x50>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	6912      	ldr	r2, [r2, #16]
 800d7f8:	f06f 010e 	mvn.w	r1, #14
 800d7fc:	4610      	mov	r0, r2
 800d7fe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d800:	6879      	ldr	r1, [r7, #4]
 800d802:	480a      	ldr	r0, [pc, #40]	; (800d82c <tcp_input_delayed_close+0x7c>)
 800d804:	f7ff fa54 	bl	800ccb0 <tcp_pcb_remove>
    tcp_free(pcb);
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f7fe f84d 	bl	800b8a8 <tcp_free>
    return 1;
 800d80e:	2301      	movs	r3, #1
 800d810:	e000      	b.n	800d814 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d812:	2300      	movs	r3, #0
}
 800d814:	4618      	mov	r0, r3
 800d816:	3708      	adds	r7, #8
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	08017c38 	.word	0x08017c38
 800d820:	08017e08 	.word	0x08017e08
 800d824:	08017c84 	.word	0x08017c84
 800d828:	20000481 	.word	0x20000481
 800d82c:	200076f4 	.word	0x200076f4

0800d830 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d830:	b590      	push	{r4, r7, lr}
 800d832:	b08b      	sub	sp, #44	; 0x2c
 800d834:	af04      	add	r7, sp, #16
 800d836:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d838:	4b6f      	ldr	r3, [pc, #444]	; (800d9f8 <tcp_listen_input+0x1c8>)
 800d83a:	781b      	ldrb	r3, [r3, #0]
 800d83c:	f003 0304 	and.w	r3, r3, #4
 800d840:	2b00      	cmp	r3, #0
 800d842:	f040 80d3 	bne.w	800d9ec <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d106      	bne.n	800d85a <tcp_listen_input+0x2a>
 800d84c:	4b6b      	ldr	r3, [pc, #428]	; (800d9fc <tcp_listen_input+0x1cc>)
 800d84e:	f240 2281 	movw	r2, #641	; 0x281
 800d852:	496b      	ldr	r1, [pc, #428]	; (800da00 <tcp_listen_input+0x1d0>)
 800d854:	486b      	ldr	r0, [pc, #428]	; (800da04 <tcp_listen_input+0x1d4>)
 800d856:	f008 f9fd 	bl	8015c54 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d85a:	4b67      	ldr	r3, [pc, #412]	; (800d9f8 <tcp_listen_input+0x1c8>)
 800d85c:	781b      	ldrb	r3, [r3, #0]
 800d85e:	f003 0310 	and.w	r3, r3, #16
 800d862:	2b00      	cmp	r3, #0
 800d864:	d019      	beq.n	800d89a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d866:	4b68      	ldr	r3, [pc, #416]	; (800da08 <tcp_listen_input+0x1d8>)
 800d868:	6819      	ldr	r1, [r3, #0]
 800d86a:	4b68      	ldr	r3, [pc, #416]	; (800da0c <tcp_listen_input+0x1dc>)
 800d86c:	881b      	ldrh	r3, [r3, #0]
 800d86e:	461a      	mov	r2, r3
 800d870:	4b67      	ldr	r3, [pc, #412]	; (800da10 <tcp_listen_input+0x1e0>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d876:	4b67      	ldr	r3, [pc, #412]	; (800da14 <tcp_listen_input+0x1e4>)
 800d878:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d87a:	885b      	ldrh	r3, [r3, #2]
 800d87c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d87e:	4a65      	ldr	r2, [pc, #404]	; (800da14 <tcp_listen_input+0x1e4>)
 800d880:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d882:	8812      	ldrh	r2, [r2, #0]
 800d884:	b292      	uxth	r2, r2
 800d886:	9202      	str	r2, [sp, #8]
 800d888:	9301      	str	r3, [sp, #4]
 800d88a:	4b63      	ldr	r3, [pc, #396]	; (800da18 <tcp_listen_input+0x1e8>)
 800d88c:	9300      	str	r3, [sp, #0]
 800d88e:	4b63      	ldr	r3, [pc, #396]	; (800da1c <tcp_listen_input+0x1ec>)
 800d890:	4602      	mov	r2, r0
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f002 ff8e 	bl	80107b4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d898:	e0aa      	b.n	800d9f0 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800d89a:	4b57      	ldr	r3, [pc, #348]	; (800d9f8 <tcp_listen_input+0x1c8>)
 800d89c:	781b      	ldrb	r3, [r3, #0]
 800d89e:	f003 0302 	and.w	r3, r3, #2
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	f000 80a4 	beq.w	800d9f0 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	7d5b      	ldrb	r3, [r3, #21]
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7ff f92b 	bl	800cb08 <tcp_alloc>
 800d8b2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d111      	bne.n	800d8de <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	699b      	ldr	r3, [r3, #24]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d00a      	beq.n	800d8d8 <tcp_listen_input+0xa8>
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	699b      	ldr	r3, [r3, #24]
 800d8c6:	687a      	ldr	r2, [r7, #4]
 800d8c8:	6910      	ldr	r0, [r2, #16]
 800d8ca:	f04f 32ff 	mov.w	r2, #4294967295
 800d8ce:	2100      	movs	r1, #0
 800d8d0:	4798      	blx	r3
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	73bb      	strb	r3, [r7, #14]
      return;
 800d8d6:	e08c      	b.n	800d9f2 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d8d8:	23f0      	movs	r3, #240	; 0xf0
 800d8da:	73bb      	strb	r3, [r7, #14]
      return;
 800d8dc:	e089      	b.n	800d9f2 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d8de:	4b50      	ldr	r3, [pc, #320]	; (800da20 <tcp_listen_input+0x1f0>)
 800d8e0:	695a      	ldr	r2, [r3, #20]
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d8e6:	4b4e      	ldr	r3, [pc, #312]	; (800da20 <tcp_listen_input+0x1f0>)
 800d8e8:	691a      	ldr	r2, [r3, #16]
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	8ada      	ldrh	r2, [r3, #22]
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d8f6:	4b47      	ldr	r3, [pc, #284]	; (800da14 <tcp_listen_input+0x1e4>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	881b      	ldrh	r3, [r3, #0]
 800d8fc:	b29a      	uxth	r2, r3
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	2203      	movs	r2, #3
 800d906:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d908:	4b41      	ldr	r3, [pc, #260]	; (800da10 <tcp_listen_input+0x1e0>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	1c5a      	adds	r2, r3, #1
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800d91a:	6978      	ldr	r0, [r7, #20]
 800d91c:	f7ff fa5c 	bl	800cdd8 <tcp_next_iss>
 800d920:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	693a      	ldr	r2, [r7, #16]
 800d926:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	693a      	ldr	r2, [r7, #16]
 800d92c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	693a      	ldr	r2, [r7, #16]
 800d932:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	693a      	ldr	r2, [r7, #16]
 800d938:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d93a:	4b35      	ldr	r3, [pc, #212]	; (800da10 <tcp_listen_input+0x1e0>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	1e5a      	subs	r2, r3, #1
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	691a      	ldr	r2, [r3, #16]
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	687a      	ldr	r2, [r7, #4]
 800d950:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	7a5b      	ldrb	r3, [r3, #9]
 800d956:	f003 030c 	and.w	r3, r3, #12
 800d95a:	b2da      	uxtb	r2, r3
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	7a1a      	ldrb	r2, [r3, #8]
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d968:	4b2e      	ldr	r3, [pc, #184]	; (800da24 <tcp_listen_input+0x1f4>)
 800d96a:	681a      	ldr	r2, [r3, #0]
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	60da      	str	r2, [r3, #12]
 800d970:	4a2c      	ldr	r2, [pc, #176]	; (800da24 <tcp_listen_input+0x1f4>)
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	6013      	str	r3, [r2, #0]
 800d976:	f003 f8df 	bl	8010b38 <tcp_timer_needed>
 800d97a:	4b2b      	ldr	r3, [pc, #172]	; (800da28 <tcp_listen_input+0x1f8>)
 800d97c:	2201      	movs	r2, #1
 800d97e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d980:	6978      	ldr	r0, [r7, #20]
 800d982:	f001 fd8f 	bl	800f4a4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d986:	4b23      	ldr	r3, [pc, #140]	; (800da14 <tcp_listen_input+0x1e4>)
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	89db      	ldrh	r3, [r3, #14]
 800d98c:	b29a      	uxth	r2, r3
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	3304      	adds	r3, #4
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f006 fe57 	bl	801465c <ip4_route>
 800d9ae:	4601      	mov	r1, r0
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	3304      	adds	r3, #4
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	f7ff fa34 	bl	800ce24 <tcp_eff_send_mss_netif>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	461a      	mov	r2, r3
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d9c4:	2112      	movs	r1, #18
 800d9c6:	6978      	ldr	r0, [r7, #20]
 800d9c8:	f002 f842 	bl	800fa50 <tcp_enqueue_flags>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d9d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d004      	beq.n	800d9e2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800d9d8:	2100      	movs	r1, #0
 800d9da:	6978      	ldr	r0, [r7, #20]
 800d9dc:	f7fe f986 	bl	800bcec <tcp_abandon>
      return;
 800d9e0:	e007      	b.n	800d9f2 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800d9e2:	6978      	ldr	r0, [r7, #20]
 800d9e4:	f002 f922 	bl	800fc2c <tcp_output>
  return;
 800d9e8:	bf00      	nop
 800d9ea:	e001      	b.n	800d9f0 <tcp_listen_input+0x1c0>
    return;
 800d9ec:	bf00      	nop
 800d9ee:	e000      	b.n	800d9f2 <tcp_listen_input+0x1c2>
  return;
 800d9f0:	bf00      	nop
}
 800d9f2:	371c      	adds	r7, #28
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd90      	pop	{r4, r7, pc}
 800d9f8:	20000480 	.word	0x20000480
 800d9fc:	08017c38 	.word	0x08017c38
 800da00:	08017e30 	.word	0x08017e30
 800da04:	08017c84 	.word	0x08017c84
 800da08:	20000478 	.word	0x20000478
 800da0c:	2000047e 	.word	0x2000047e
 800da10:	20000474 	.word	0x20000474
 800da14:	20000464 	.word	0x20000464
 800da18:	200041a0 	.word	0x200041a0
 800da1c:	200041a4 	.word	0x200041a4
 800da20:	20004190 	.word	0x20004190
 800da24:	200076f4 	.word	0x200076f4
 800da28:	200076f0 	.word	0x200076f0

0800da2c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b086      	sub	sp, #24
 800da30:	af04      	add	r7, sp, #16
 800da32:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800da34:	4b30      	ldr	r3, [pc, #192]	; (800daf8 <tcp_timewait_input+0xcc>)
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	f003 0304 	and.w	r3, r3, #4
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d154      	bne.n	800daea <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d106      	bne.n	800da54 <tcp_timewait_input+0x28>
 800da46:	4b2d      	ldr	r3, [pc, #180]	; (800dafc <tcp_timewait_input+0xd0>)
 800da48:	f240 22ee 	movw	r2, #750	; 0x2ee
 800da4c:	492c      	ldr	r1, [pc, #176]	; (800db00 <tcp_timewait_input+0xd4>)
 800da4e:	482d      	ldr	r0, [pc, #180]	; (800db04 <tcp_timewait_input+0xd8>)
 800da50:	f008 f900 	bl	8015c54 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800da54:	4b28      	ldr	r3, [pc, #160]	; (800daf8 <tcp_timewait_input+0xcc>)
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	f003 0302 	and.w	r3, r3, #2
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d02a      	beq.n	800dab6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800da60:	4b29      	ldr	r3, [pc, #164]	; (800db08 <tcp_timewait_input+0xdc>)
 800da62:	681a      	ldr	r2, [r3, #0]
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da68:	1ad3      	subs	r3, r2, r3
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	db2d      	blt.n	800daca <tcp_timewait_input+0x9e>
 800da6e:	4b26      	ldr	r3, [pc, #152]	; (800db08 <tcp_timewait_input+0xdc>)
 800da70:	681a      	ldr	r2, [r3, #0]
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da76:	6879      	ldr	r1, [r7, #4]
 800da78:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800da7a:	440b      	add	r3, r1
 800da7c:	1ad3      	subs	r3, r2, r3
 800da7e:	2b00      	cmp	r3, #0
 800da80:	dc23      	bgt.n	800daca <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da82:	4b22      	ldr	r3, [pc, #136]	; (800db0c <tcp_timewait_input+0xe0>)
 800da84:	6819      	ldr	r1, [r3, #0]
 800da86:	4b22      	ldr	r3, [pc, #136]	; (800db10 <tcp_timewait_input+0xe4>)
 800da88:	881b      	ldrh	r3, [r3, #0]
 800da8a:	461a      	mov	r2, r3
 800da8c:	4b1e      	ldr	r3, [pc, #120]	; (800db08 <tcp_timewait_input+0xdc>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800da92:	4b20      	ldr	r3, [pc, #128]	; (800db14 <tcp_timewait_input+0xe8>)
 800da94:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da96:	885b      	ldrh	r3, [r3, #2]
 800da98:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800da9a:	4a1e      	ldr	r2, [pc, #120]	; (800db14 <tcp_timewait_input+0xe8>)
 800da9c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da9e:	8812      	ldrh	r2, [r2, #0]
 800daa0:	b292      	uxth	r2, r2
 800daa2:	9202      	str	r2, [sp, #8]
 800daa4:	9301      	str	r3, [sp, #4]
 800daa6:	4b1c      	ldr	r3, [pc, #112]	; (800db18 <tcp_timewait_input+0xec>)
 800daa8:	9300      	str	r3, [sp, #0]
 800daaa:	4b1c      	ldr	r3, [pc, #112]	; (800db1c <tcp_timewait_input+0xf0>)
 800daac:	4602      	mov	r2, r0
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f002 fe80 	bl	80107b4 <tcp_rst>
      return;
 800dab4:	e01c      	b.n	800daf0 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800dab6:	4b10      	ldr	r3, [pc, #64]	; (800daf8 <tcp_timewait_input+0xcc>)
 800dab8:	781b      	ldrb	r3, [r3, #0]
 800daba:	f003 0301 	and.w	r3, r3, #1
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d003      	beq.n	800daca <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800dac2:	4b17      	ldr	r3, [pc, #92]	; (800db20 <tcp_timewait_input+0xf4>)
 800dac4:	681a      	ldr	r2, [r3, #0]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800daca:	4b11      	ldr	r3, [pc, #68]	; (800db10 <tcp_timewait_input+0xe4>)
 800dacc:	881b      	ldrh	r3, [r3, #0]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d00d      	beq.n	800daee <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	8b5b      	ldrh	r3, [r3, #26]
 800dad6:	f043 0302 	orr.w	r3, r3, #2
 800dada:	b29a      	uxth	r2, r3
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f002 f8a3 	bl	800fc2c <tcp_output>
  }
  return;
 800dae6:	bf00      	nop
 800dae8:	e001      	b.n	800daee <tcp_timewait_input+0xc2>
    return;
 800daea:	bf00      	nop
 800daec:	e000      	b.n	800daf0 <tcp_timewait_input+0xc4>
  return;
 800daee:	bf00      	nop
}
 800daf0:	3708      	adds	r7, #8
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
 800daf6:	bf00      	nop
 800daf8:	20000480 	.word	0x20000480
 800dafc:	08017c38 	.word	0x08017c38
 800db00:	08017e50 	.word	0x08017e50
 800db04:	08017c84 	.word	0x08017c84
 800db08:	20000474 	.word	0x20000474
 800db0c:	20000478 	.word	0x20000478
 800db10:	2000047e 	.word	0x2000047e
 800db14:	20000464 	.word	0x20000464
 800db18:	200041a0 	.word	0x200041a0
 800db1c:	200041a4 	.word	0x200041a4
 800db20:	200076f8 	.word	0x200076f8

0800db24 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800db24:	b590      	push	{r4, r7, lr}
 800db26:	b08d      	sub	sp, #52	; 0x34
 800db28:	af04      	add	r7, sp, #16
 800db2a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800db2c:	2300      	movs	r3, #0
 800db2e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800db30:	2300      	movs	r3, #0
 800db32:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d106      	bne.n	800db48 <tcp_process+0x24>
 800db3a:	4ba5      	ldr	r3, [pc, #660]	; (800ddd0 <tcp_process+0x2ac>)
 800db3c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800db40:	49a4      	ldr	r1, [pc, #656]	; (800ddd4 <tcp_process+0x2b0>)
 800db42:	48a5      	ldr	r0, [pc, #660]	; (800ddd8 <tcp_process+0x2b4>)
 800db44:	f008 f886 	bl	8015c54 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800db48:	4ba4      	ldr	r3, [pc, #656]	; (800dddc <tcp_process+0x2b8>)
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	f003 0304 	and.w	r3, r3, #4
 800db50:	2b00      	cmp	r3, #0
 800db52:	d04e      	beq.n	800dbf2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	7d1b      	ldrb	r3, [r3, #20]
 800db58:	2b02      	cmp	r3, #2
 800db5a:	d108      	bne.n	800db6e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800db60:	4b9f      	ldr	r3, [pc, #636]	; (800dde0 <tcp_process+0x2bc>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	429a      	cmp	r2, r3
 800db66:	d123      	bne.n	800dbb0 <tcp_process+0x8c>
        acceptable = 1;
 800db68:	2301      	movs	r3, #1
 800db6a:	76fb      	strb	r3, [r7, #27]
 800db6c:	e020      	b.n	800dbb0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db72:	4b9c      	ldr	r3, [pc, #624]	; (800dde4 <tcp_process+0x2c0>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	429a      	cmp	r2, r3
 800db78:	d102      	bne.n	800db80 <tcp_process+0x5c>
        acceptable = 1;
 800db7a:	2301      	movs	r3, #1
 800db7c:	76fb      	strb	r3, [r7, #27]
 800db7e:	e017      	b.n	800dbb0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800db80:	4b98      	ldr	r3, [pc, #608]	; (800dde4 <tcp_process+0x2c0>)
 800db82:	681a      	ldr	r2, [r3, #0]
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db88:	1ad3      	subs	r3, r2, r3
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	db10      	blt.n	800dbb0 <tcp_process+0x8c>
 800db8e:	4b95      	ldr	r3, [pc, #596]	; (800dde4 <tcp_process+0x2c0>)
 800db90:	681a      	ldr	r2, [r3, #0]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db96:	6879      	ldr	r1, [r7, #4]
 800db98:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800db9a:	440b      	add	r3, r1
 800db9c:	1ad3      	subs	r3, r2, r3
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	dc06      	bgt.n	800dbb0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	8b5b      	ldrh	r3, [r3, #26]
 800dba6:	f043 0302 	orr.w	r3, r3, #2
 800dbaa:	b29a      	uxth	r2, r3
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800dbb0:	7efb      	ldrb	r3, [r7, #27]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d01b      	beq.n	800dbee <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	7d1b      	ldrb	r3, [r3, #20]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d106      	bne.n	800dbcc <tcp_process+0xa8>
 800dbbe:	4b84      	ldr	r3, [pc, #528]	; (800ddd0 <tcp_process+0x2ac>)
 800dbc0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800dbc4:	4988      	ldr	r1, [pc, #544]	; (800dde8 <tcp_process+0x2c4>)
 800dbc6:	4884      	ldr	r0, [pc, #528]	; (800ddd8 <tcp_process+0x2b4>)
 800dbc8:	f008 f844 	bl	8015c54 <iprintf>
      recv_flags |= TF_RESET;
 800dbcc:	4b87      	ldr	r3, [pc, #540]	; (800ddec <tcp_process+0x2c8>)
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	f043 0308 	orr.w	r3, r3, #8
 800dbd4:	b2da      	uxtb	r2, r3
 800dbd6:	4b85      	ldr	r3, [pc, #532]	; (800ddec <tcp_process+0x2c8>)
 800dbd8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	8b5b      	ldrh	r3, [r3, #26]
 800dbde:	f023 0301 	bic.w	r3, r3, #1
 800dbe2:	b29a      	uxth	r2, r3
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800dbe8:	f06f 030d 	mvn.w	r3, #13
 800dbec:	e37a      	b.n	800e2e4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	e378      	b.n	800e2e4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800dbf2:	4b7a      	ldr	r3, [pc, #488]	; (800dddc <tcp_process+0x2b8>)
 800dbf4:	781b      	ldrb	r3, [r3, #0]
 800dbf6:	f003 0302 	and.w	r3, r3, #2
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d010      	beq.n	800dc20 <tcp_process+0xfc>
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	7d1b      	ldrb	r3, [r3, #20]
 800dc02:	2b02      	cmp	r3, #2
 800dc04:	d00c      	beq.n	800dc20 <tcp_process+0xfc>
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	7d1b      	ldrb	r3, [r3, #20]
 800dc0a:	2b03      	cmp	r3, #3
 800dc0c:	d008      	beq.n	800dc20 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	8b5b      	ldrh	r3, [r3, #26]
 800dc12:	f043 0302 	orr.w	r3, r3, #2
 800dc16:	b29a      	uxth	r2, r3
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	e361      	b.n	800e2e4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	8b5b      	ldrh	r3, [r3, #26]
 800dc24:	f003 0310 	and.w	r3, r3, #16
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d103      	bne.n	800dc34 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800dc2c:	4b70      	ldr	r3, [pc, #448]	; (800ddf0 <tcp_process+0x2cc>)
 800dc2e:	681a      	ldr	r2, [r3, #0]
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2200      	movs	r2, #0
 800dc38:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2200      	movs	r2, #0
 800dc40:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800dc44:	6878      	ldr	r0, [r7, #4]
 800dc46:	f001 fc2d 	bl	800f4a4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	7d1b      	ldrb	r3, [r3, #20]
 800dc4e:	3b02      	subs	r3, #2
 800dc50:	2b07      	cmp	r3, #7
 800dc52:	f200 8337 	bhi.w	800e2c4 <tcp_process+0x7a0>
 800dc56:	a201      	add	r2, pc, #4	; (adr r2, 800dc5c <tcp_process+0x138>)
 800dc58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc5c:	0800dc7d 	.word	0x0800dc7d
 800dc60:	0800dead 	.word	0x0800dead
 800dc64:	0800e025 	.word	0x0800e025
 800dc68:	0800e04f 	.word	0x0800e04f
 800dc6c:	0800e173 	.word	0x0800e173
 800dc70:	0800e025 	.word	0x0800e025
 800dc74:	0800e1ff 	.word	0x0800e1ff
 800dc78:	0800e28f 	.word	0x0800e28f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800dc7c:	4b57      	ldr	r3, [pc, #348]	; (800dddc <tcp_process+0x2b8>)
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	f003 0310 	and.w	r3, r3, #16
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	f000 80e4 	beq.w	800de52 <tcp_process+0x32e>
 800dc8a:	4b54      	ldr	r3, [pc, #336]	; (800dddc <tcp_process+0x2b8>)
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	f003 0302 	and.w	r3, r3, #2
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	f000 80dd 	beq.w	800de52 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc9c:	1c5a      	adds	r2, r3, #1
 800dc9e:	4b50      	ldr	r3, [pc, #320]	; (800dde0 <tcp_process+0x2bc>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	f040 80d5 	bne.w	800de52 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800dca8:	4b4e      	ldr	r3, [pc, #312]	; (800dde4 <tcp_process+0x2c0>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	1c5a      	adds	r2, r3, #1
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800dcba:	4b49      	ldr	r3, [pc, #292]	; (800dde0 <tcp_process+0x2bc>)
 800dcbc:	681a      	ldr	r2, [r3, #0]
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800dcc2:	4b4c      	ldr	r3, [pc, #304]	; (800ddf4 <tcp_process+0x2d0>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	89db      	ldrh	r3, [r3, #14]
 800dcc8:	b29a      	uxth	r2, r3
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800dcdc:	4b41      	ldr	r3, [pc, #260]	; (800dde4 <tcp_process+0x2c0>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	1e5a      	subs	r2, r3, #1
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2204      	movs	r2, #4
 800dcea:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	3304      	adds	r3, #4
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f006 fcb1 	bl	801465c <ip4_route>
 800dcfa:	4601      	mov	r1, r0
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	3304      	adds	r3, #4
 800dd00:	461a      	mov	r2, r3
 800dd02:	4620      	mov	r0, r4
 800dd04:	f7ff f88e 	bl	800ce24 <tcp_eff_send_mss_netif>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	461a      	mov	r2, r3
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd14:	009a      	lsls	r2, r3, #2
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd1a:	005b      	lsls	r3, r3, #1
 800dd1c:	f241 111c 	movw	r1, #4380	; 0x111c
 800dd20:	428b      	cmp	r3, r1
 800dd22:	bf38      	it	cc
 800dd24:	460b      	movcc	r3, r1
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d204      	bcs.n	800dd34 <tcp_process+0x210>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd2e:	009b      	lsls	r3, r3, #2
 800dd30:	b29b      	uxth	r3, r3
 800dd32:	e00d      	b.n	800dd50 <tcp_process+0x22c>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd38:	005b      	lsls	r3, r3, #1
 800dd3a:	f241 121c 	movw	r2, #4380	; 0x111c
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d904      	bls.n	800dd4c <tcp_process+0x228>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd46:	005b      	lsls	r3, r3, #1
 800dd48:	b29b      	uxth	r3, r3
 800dd4a:	e001      	b.n	800dd50 <tcp_process+0x22c>
 800dd4c:	f241 131c 	movw	r3, #4380	; 0x111c
 800dd50:	687a      	ldr	r2, [r7, #4]
 800dd52:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d106      	bne.n	800dd6e <tcp_process+0x24a>
 800dd60:	4b1b      	ldr	r3, [pc, #108]	; (800ddd0 <tcp_process+0x2ac>)
 800dd62:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800dd66:	4924      	ldr	r1, [pc, #144]	; (800ddf8 <tcp_process+0x2d4>)
 800dd68:	481b      	ldr	r0, [pc, #108]	; (800ddd8 <tcp_process+0x2b4>)
 800dd6a:	f007 ff73 	bl	8015c54 <iprintf>
        --pcb->snd_queuelen;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dd74:	3b01      	subs	r3, #1
 800dd76:	b29a      	uxth	r2, r3
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd82:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800dd84:	69fb      	ldr	r3, [r7, #28]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d111      	bne.n	800ddae <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd8e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d106      	bne.n	800dda4 <tcp_process+0x280>
 800dd96:	4b0e      	ldr	r3, [pc, #56]	; (800ddd0 <tcp_process+0x2ac>)
 800dd98:	f44f 725d 	mov.w	r2, #884	; 0x374
 800dd9c:	4917      	ldr	r1, [pc, #92]	; (800ddfc <tcp_process+0x2d8>)
 800dd9e:	480e      	ldr	r0, [pc, #56]	; (800ddd8 <tcp_process+0x2b4>)
 800dda0:	f007 ff58 	bl	8015c54 <iprintf>
          pcb->unsent = rseg->next;
 800dda4:	69fb      	ldr	r3, [r7, #28]
 800dda6:	681a      	ldr	r2, [r3, #0]
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	66da      	str	r2, [r3, #108]	; 0x6c
 800ddac:	e003      	b.n	800ddb6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800ddae:	69fb      	ldr	r3, [r7, #28]
 800ddb0:	681a      	ldr	r2, [r3, #0]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800ddb6:	69f8      	ldr	r0, [r7, #28]
 800ddb8:	f7fe fd3e 	bl	800c838 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d11d      	bne.n	800de00 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ddca:	861a      	strh	r2, [r3, #48]	; 0x30
 800ddcc:	e01f      	b.n	800de0e <tcp_process+0x2ea>
 800ddce:	bf00      	nop
 800ddd0:	08017c38 	.word	0x08017c38
 800ddd4:	08017e70 	.word	0x08017e70
 800ddd8:	08017c84 	.word	0x08017c84
 800dddc:	20000480 	.word	0x20000480
 800dde0:	20000478 	.word	0x20000478
 800dde4:	20000474 	.word	0x20000474
 800dde8:	08017e8c 	.word	0x08017e8c
 800ddec:	20000481 	.word	0x20000481
 800ddf0:	200076f8 	.word	0x200076f8
 800ddf4:	20000464 	.word	0x20000464
 800ddf8:	08017eac 	.word	0x08017eac
 800ddfc:	08017ec4 	.word	0x08017ec4
        } else {
          pcb->rtime = 0;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2200      	movs	r2, #0
 800de04:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2200      	movs	r2, #0
 800de0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de14:	2b00      	cmp	r3, #0
 800de16:	d00a      	beq.n	800de2e <tcp_process+0x30a>
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de1e:	687a      	ldr	r2, [r7, #4]
 800de20:	6910      	ldr	r0, [r2, #16]
 800de22:	2200      	movs	r2, #0
 800de24:	6879      	ldr	r1, [r7, #4]
 800de26:	4798      	blx	r3
 800de28:	4603      	mov	r3, r0
 800de2a:	76bb      	strb	r3, [r7, #26]
 800de2c:	e001      	b.n	800de32 <tcp_process+0x30e>
 800de2e:	2300      	movs	r3, #0
 800de30:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800de32:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800de36:	f113 0f0d 	cmn.w	r3, #13
 800de3a:	d102      	bne.n	800de42 <tcp_process+0x31e>
          return ERR_ABRT;
 800de3c:	f06f 030c 	mvn.w	r3, #12
 800de40:	e250      	b.n	800e2e4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	8b5b      	ldrh	r3, [r3, #26]
 800de46:	f043 0302 	orr.w	r3, r3, #2
 800de4a:	b29a      	uxth	r2, r3
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800de50:	e23a      	b.n	800e2c8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800de52:	4b9d      	ldr	r3, [pc, #628]	; (800e0c8 <tcp_process+0x5a4>)
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	f003 0310 	and.w	r3, r3, #16
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	f000 8234 	beq.w	800e2c8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de60:	4b9a      	ldr	r3, [pc, #616]	; (800e0cc <tcp_process+0x5a8>)
 800de62:	6819      	ldr	r1, [r3, #0]
 800de64:	4b9a      	ldr	r3, [pc, #616]	; (800e0d0 <tcp_process+0x5ac>)
 800de66:	881b      	ldrh	r3, [r3, #0]
 800de68:	461a      	mov	r2, r3
 800de6a:	4b9a      	ldr	r3, [pc, #616]	; (800e0d4 <tcp_process+0x5b0>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800de70:	4b99      	ldr	r3, [pc, #612]	; (800e0d8 <tcp_process+0x5b4>)
 800de72:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de74:	885b      	ldrh	r3, [r3, #2]
 800de76:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800de78:	4a97      	ldr	r2, [pc, #604]	; (800e0d8 <tcp_process+0x5b4>)
 800de7a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de7c:	8812      	ldrh	r2, [r2, #0]
 800de7e:	b292      	uxth	r2, r2
 800de80:	9202      	str	r2, [sp, #8]
 800de82:	9301      	str	r3, [sp, #4]
 800de84:	4b95      	ldr	r3, [pc, #596]	; (800e0dc <tcp_process+0x5b8>)
 800de86:	9300      	str	r3, [sp, #0]
 800de88:	4b95      	ldr	r3, [pc, #596]	; (800e0e0 <tcp_process+0x5bc>)
 800de8a:	4602      	mov	r2, r0
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f002 fc91 	bl	80107b4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800de98:	2b05      	cmp	r3, #5
 800de9a:	f200 8215 	bhi.w	800e2c8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2200      	movs	r2, #0
 800dea2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f002 fa51 	bl	801034c <tcp_rexmit_rto>
      break;
 800deaa:	e20d      	b.n	800e2c8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800deac:	4b86      	ldr	r3, [pc, #536]	; (800e0c8 <tcp_process+0x5a4>)
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	f003 0310 	and.w	r3, r3, #16
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	f000 80a1 	beq.w	800dffc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800deba:	4b84      	ldr	r3, [pc, #528]	; (800e0cc <tcp_process+0x5a8>)
 800debc:	681a      	ldr	r2, [r3, #0]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dec2:	1ad3      	subs	r3, r2, r3
 800dec4:	3b01      	subs	r3, #1
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	db7e      	blt.n	800dfc8 <tcp_process+0x4a4>
 800deca:	4b80      	ldr	r3, [pc, #512]	; (800e0cc <tcp_process+0x5a8>)
 800decc:	681a      	ldr	r2, [r3, #0]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ded2:	1ad3      	subs	r3, r2, r3
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	dc77      	bgt.n	800dfc8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2204      	movs	r2, #4
 800dedc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d102      	bne.n	800deec <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800dee6:	23fa      	movs	r3, #250	; 0xfa
 800dee8:	76bb      	strb	r3, [r7, #26]
 800deea:	e01d      	b.n	800df28 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800def0:	699b      	ldr	r3, [r3, #24]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d106      	bne.n	800df04 <tcp_process+0x3e0>
 800def6:	4b7b      	ldr	r3, [pc, #492]	; (800e0e4 <tcp_process+0x5c0>)
 800def8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800defc:	497a      	ldr	r1, [pc, #488]	; (800e0e8 <tcp_process+0x5c4>)
 800defe:	487b      	ldr	r0, [pc, #492]	; (800e0ec <tcp_process+0x5c8>)
 800df00:	f007 fea8 	bl	8015c54 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df08:	699b      	ldr	r3, [r3, #24]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d00a      	beq.n	800df24 <tcp_process+0x400>
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df12:	699b      	ldr	r3, [r3, #24]
 800df14:	687a      	ldr	r2, [r7, #4]
 800df16:	6910      	ldr	r0, [r2, #16]
 800df18:	2200      	movs	r2, #0
 800df1a:	6879      	ldr	r1, [r7, #4]
 800df1c:	4798      	blx	r3
 800df1e:	4603      	mov	r3, r0
 800df20:	76bb      	strb	r3, [r7, #26]
 800df22:	e001      	b.n	800df28 <tcp_process+0x404>
 800df24:	23f0      	movs	r3, #240	; 0xf0
 800df26:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800df28:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d00a      	beq.n	800df46 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800df30:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800df34:	f113 0f0d 	cmn.w	r3, #13
 800df38:	d002      	beq.n	800df40 <tcp_process+0x41c>
              tcp_abort(pcb);
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f7fd ff94 	bl	800be68 <tcp_abort>
            }
            return ERR_ABRT;
 800df40:	f06f 030c 	mvn.w	r3, #12
 800df44:	e1ce      	b.n	800e2e4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f000 fae0 	bl	800e50c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800df4c:	4b68      	ldr	r3, [pc, #416]	; (800e0f0 <tcp_process+0x5cc>)
 800df4e:	881b      	ldrh	r3, [r3, #0]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d005      	beq.n	800df60 <tcp_process+0x43c>
            recv_acked--;
 800df54:	4b66      	ldr	r3, [pc, #408]	; (800e0f0 <tcp_process+0x5cc>)
 800df56:	881b      	ldrh	r3, [r3, #0]
 800df58:	3b01      	subs	r3, #1
 800df5a:	b29a      	uxth	r2, r3
 800df5c:	4b64      	ldr	r3, [pc, #400]	; (800e0f0 <tcp_process+0x5cc>)
 800df5e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df64:	009a      	lsls	r2, r3, #2
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df6a:	005b      	lsls	r3, r3, #1
 800df6c:	f241 111c 	movw	r1, #4380	; 0x111c
 800df70:	428b      	cmp	r3, r1
 800df72:	bf38      	it	cc
 800df74:	460b      	movcc	r3, r1
 800df76:	429a      	cmp	r2, r3
 800df78:	d204      	bcs.n	800df84 <tcp_process+0x460>
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df7e:	009b      	lsls	r3, r3, #2
 800df80:	b29b      	uxth	r3, r3
 800df82:	e00d      	b.n	800dfa0 <tcp_process+0x47c>
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df88:	005b      	lsls	r3, r3, #1
 800df8a:	f241 121c 	movw	r2, #4380	; 0x111c
 800df8e:	4293      	cmp	r3, r2
 800df90:	d904      	bls.n	800df9c <tcp_process+0x478>
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df96:	005b      	lsls	r3, r3, #1
 800df98:	b29b      	uxth	r3, r3
 800df9a:	e001      	b.n	800dfa0 <tcp_process+0x47c>
 800df9c:	f241 131c 	movw	r3, #4380	; 0x111c
 800dfa0:	687a      	ldr	r2, [r7, #4]
 800dfa2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800dfa6:	4b53      	ldr	r3, [pc, #332]	; (800e0f4 <tcp_process+0x5d0>)
 800dfa8:	781b      	ldrb	r3, [r3, #0]
 800dfaa:	f003 0320 	and.w	r3, r3, #32
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d037      	beq.n	800e022 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	8b5b      	ldrh	r3, [r3, #26]
 800dfb6:	f043 0302 	orr.w	r3, r3, #2
 800dfba:	b29a      	uxth	r2, r3
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2207      	movs	r2, #7
 800dfc4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800dfc6:	e02c      	b.n	800e022 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dfc8:	4b40      	ldr	r3, [pc, #256]	; (800e0cc <tcp_process+0x5a8>)
 800dfca:	6819      	ldr	r1, [r3, #0]
 800dfcc:	4b40      	ldr	r3, [pc, #256]	; (800e0d0 <tcp_process+0x5ac>)
 800dfce:	881b      	ldrh	r3, [r3, #0]
 800dfd0:	461a      	mov	r2, r3
 800dfd2:	4b40      	ldr	r3, [pc, #256]	; (800e0d4 <tcp_process+0x5b0>)
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dfd8:	4b3f      	ldr	r3, [pc, #252]	; (800e0d8 <tcp_process+0x5b4>)
 800dfda:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dfdc:	885b      	ldrh	r3, [r3, #2]
 800dfde:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dfe0:	4a3d      	ldr	r2, [pc, #244]	; (800e0d8 <tcp_process+0x5b4>)
 800dfe2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dfe4:	8812      	ldrh	r2, [r2, #0]
 800dfe6:	b292      	uxth	r2, r2
 800dfe8:	9202      	str	r2, [sp, #8]
 800dfea:	9301      	str	r3, [sp, #4]
 800dfec:	4b3b      	ldr	r3, [pc, #236]	; (800e0dc <tcp_process+0x5b8>)
 800dfee:	9300      	str	r3, [sp, #0]
 800dff0:	4b3b      	ldr	r3, [pc, #236]	; (800e0e0 <tcp_process+0x5bc>)
 800dff2:	4602      	mov	r2, r0
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f002 fbdd 	bl	80107b4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800dffa:	e167      	b.n	800e2cc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800dffc:	4b32      	ldr	r3, [pc, #200]	; (800e0c8 <tcp_process+0x5a4>)
 800dffe:	781b      	ldrb	r3, [r3, #0]
 800e000:	f003 0302 	and.w	r3, r3, #2
 800e004:	2b00      	cmp	r3, #0
 800e006:	f000 8161 	beq.w	800e2cc <tcp_process+0x7a8>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e00e:	1e5a      	subs	r2, r3, #1
 800e010:	4b30      	ldr	r3, [pc, #192]	; (800e0d4 <tcp_process+0x5b0>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	429a      	cmp	r2, r3
 800e016:	f040 8159 	bne.w	800e2cc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f002 f9b8 	bl	8010390 <tcp_rexmit>
      break;
 800e020:	e154      	b.n	800e2cc <tcp_process+0x7a8>
 800e022:	e153      	b.n	800e2cc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f000 fa71 	bl	800e50c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e02a:	4b32      	ldr	r3, [pc, #200]	; (800e0f4 <tcp_process+0x5d0>)
 800e02c:	781b      	ldrb	r3, [r3, #0]
 800e02e:	f003 0320 	and.w	r3, r3, #32
 800e032:	2b00      	cmp	r3, #0
 800e034:	f000 814c 	beq.w	800e2d0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	8b5b      	ldrh	r3, [r3, #26]
 800e03c:	f043 0302 	orr.w	r3, r3, #2
 800e040:	b29a      	uxth	r2, r3
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2207      	movs	r2, #7
 800e04a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e04c:	e140      	b.n	800e2d0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f000 fa5c 	bl	800e50c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e054:	4b27      	ldr	r3, [pc, #156]	; (800e0f4 <tcp_process+0x5d0>)
 800e056:	781b      	ldrb	r3, [r3, #0]
 800e058:	f003 0320 	and.w	r3, r3, #32
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d071      	beq.n	800e144 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e060:	4b19      	ldr	r3, [pc, #100]	; (800e0c8 <tcp_process+0x5a4>)
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	f003 0310 	and.w	r3, r3, #16
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d060      	beq.n	800e12e <tcp_process+0x60a>
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e070:	4b16      	ldr	r3, [pc, #88]	; (800e0cc <tcp_process+0x5a8>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	429a      	cmp	r2, r3
 800e076:	d15a      	bne.n	800e12e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d156      	bne.n	800e12e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	8b5b      	ldrh	r3, [r3, #26]
 800e084:	f043 0302 	orr.w	r3, r3, #2
 800e088:	b29a      	uxth	r2, r3
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f7fe fdbe 	bl	800cc10 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e094:	4b18      	ldr	r3, [pc, #96]	; (800e0f8 <tcp_process+0x5d4>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	687a      	ldr	r2, [r7, #4]
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d105      	bne.n	800e0aa <tcp_process+0x586>
 800e09e:	4b16      	ldr	r3, [pc, #88]	; (800e0f8 <tcp_process+0x5d4>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	68db      	ldr	r3, [r3, #12]
 800e0a4:	4a14      	ldr	r2, [pc, #80]	; (800e0f8 <tcp_process+0x5d4>)
 800e0a6:	6013      	str	r3, [r2, #0]
 800e0a8:	e02e      	b.n	800e108 <tcp_process+0x5e4>
 800e0aa:	4b13      	ldr	r3, [pc, #76]	; (800e0f8 <tcp_process+0x5d4>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	617b      	str	r3, [r7, #20]
 800e0b0:	e027      	b.n	800e102 <tcp_process+0x5de>
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	68db      	ldr	r3, [r3, #12]
 800e0b6:	687a      	ldr	r2, [r7, #4]
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d11f      	bne.n	800e0fc <tcp_process+0x5d8>
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	68da      	ldr	r2, [r3, #12]
 800e0c0:	697b      	ldr	r3, [r7, #20]
 800e0c2:	60da      	str	r2, [r3, #12]
 800e0c4:	e020      	b.n	800e108 <tcp_process+0x5e4>
 800e0c6:	bf00      	nop
 800e0c8:	20000480 	.word	0x20000480
 800e0cc:	20000478 	.word	0x20000478
 800e0d0:	2000047e 	.word	0x2000047e
 800e0d4:	20000474 	.word	0x20000474
 800e0d8:	20000464 	.word	0x20000464
 800e0dc:	200041a0 	.word	0x200041a0
 800e0e0:	200041a4 	.word	0x200041a4
 800e0e4:	08017c38 	.word	0x08017c38
 800e0e8:	08017ed8 	.word	0x08017ed8
 800e0ec:	08017c84 	.word	0x08017c84
 800e0f0:	2000047c 	.word	0x2000047c
 800e0f4:	20000481 	.word	0x20000481
 800e0f8:	200076f4 	.word	0x200076f4
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	68db      	ldr	r3, [r3, #12]
 800e100:	617b      	str	r3, [r7, #20]
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d1d4      	bne.n	800e0b2 <tcp_process+0x58e>
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2200      	movs	r2, #0
 800e10c:	60da      	str	r2, [r3, #12]
 800e10e:	4b77      	ldr	r3, [pc, #476]	; (800e2ec <tcp_process+0x7c8>)
 800e110:	2201      	movs	r2, #1
 800e112:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	220a      	movs	r2, #10
 800e118:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e11a:	4b75      	ldr	r3, [pc, #468]	; (800e2f0 <tcp_process+0x7cc>)
 800e11c:	681a      	ldr	r2, [r3, #0]
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	60da      	str	r2, [r3, #12]
 800e122:	4a73      	ldr	r2, [pc, #460]	; (800e2f0 <tcp_process+0x7cc>)
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6013      	str	r3, [r2, #0]
 800e128:	f002 fd06 	bl	8010b38 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e12c:	e0d2      	b.n	800e2d4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	8b5b      	ldrh	r3, [r3, #26]
 800e132:	f043 0302 	orr.w	r3, r3, #2
 800e136:	b29a      	uxth	r2, r3
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2208      	movs	r2, #8
 800e140:	751a      	strb	r2, [r3, #20]
      break;
 800e142:	e0c7      	b.n	800e2d4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e144:	4b6b      	ldr	r3, [pc, #428]	; (800e2f4 <tcp_process+0x7d0>)
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	f003 0310 	and.w	r3, r3, #16
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	f000 80c1 	beq.w	800e2d4 <tcp_process+0x7b0>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e156:	4b68      	ldr	r3, [pc, #416]	; (800e2f8 <tcp_process+0x7d4>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	f040 80ba 	bne.w	800e2d4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e164:	2b00      	cmp	r3, #0
 800e166:	f040 80b5 	bne.w	800e2d4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2206      	movs	r2, #6
 800e16e:	751a      	strb	r2, [r3, #20]
      break;
 800e170:	e0b0      	b.n	800e2d4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f000 f9ca 	bl	800e50c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e178:	4b60      	ldr	r3, [pc, #384]	; (800e2fc <tcp_process+0x7d8>)
 800e17a:	781b      	ldrb	r3, [r3, #0]
 800e17c:	f003 0320 	and.w	r3, r3, #32
 800e180:	2b00      	cmp	r3, #0
 800e182:	f000 80a9 	beq.w	800e2d8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	8b5b      	ldrh	r3, [r3, #26]
 800e18a:	f043 0302 	orr.w	r3, r3, #2
 800e18e:	b29a      	uxth	r2, r3
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f7fe fd3b 	bl	800cc10 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e19a:	4b59      	ldr	r3, [pc, #356]	; (800e300 <tcp_process+0x7dc>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	687a      	ldr	r2, [r7, #4]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d105      	bne.n	800e1b0 <tcp_process+0x68c>
 800e1a4:	4b56      	ldr	r3, [pc, #344]	; (800e300 <tcp_process+0x7dc>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	68db      	ldr	r3, [r3, #12]
 800e1aa:	4a55      	ldr	r2, [pc, #340]	; (800e300 <tcp_process+0x7dc>)
 800e1ac:	6013      	str	r3, [r2, #0]
 800e1ae:	e013      	b.n	800e1d8 <tcp_process+0x6b4>
 800e1b0:	4b53      	ldr	r3, [pc, #332]	; (800e300 <tcp_process+0x7dc>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	613b      	str	r3, [r7, #16]
 800e1b6:	e00c      	b.n	800e1d2 <tcp_process+0x6ae>
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	68db      	ldr	r3, [r3, #12]
 800e1bc:	687a      	ldr	r2, [r7, #4]
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	d104      	bne.n	800e1cc <tcp_process+0x6a8>
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	68da      	ldr	r2, [r3, #12]
 800e1c6:	693b      	ldr	r3, [r7, #16]
 800e1c8:	60da      	str	r2, [r3, #12]
 800e1ca:	e005      	b.n	800e1d8 <tcp_process+0x6b4>
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	68db      	ldr	r3, [r3, #12]
 800e1d0:	613b      	str	r3, [r7, #16]
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d1ef      	bne.n	800e1b8 <tcp_process+0x694>
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	60da      	str	r2, [r3, #12]
 800e1de:	4b43      	ldr	r3, [pc, #268]	; (800e2ec <tcp_process+0x7c8>)
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	220a      	movs	r2, #10
 800e1e8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e1ea:	4b41      	ldr	r3, [pc, #260]	; (800e2f0 <tcp_process+0x7cc>)
 800e1ec:	681a      	ldr	r2, [r3, #0]
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	60da      	str	r2, [r3, #12]
 800e1f2:	4a3f      	ldr	r2, [pc, #252]	; (800e2f0 <tcp_process+0x7cc>)
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	6013      	str	r3, [r2, #0]
 800e1f8:	f002 fc9e 	bl	8010b38 <tcp_timer_needed>
      }
      break;
 800e1fc:	e06c      	b.n	800e2d8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f000 f984 	bl	800e50c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e204:	4b3b      	ldr	r3, [pc, #236]	; (800e2f4 <tcp_process+0x7d0>)
 800e206:	781b      	ldrb	r3, [r3, #0]
 800e208:	f003 0310 	and.w	r3, r3, #16
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d065      	beq.n	800e2dc <tcp_process+0x7b8>
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e214:	4b38      	ldr	r3, [pc, #224]	; (800e2f8 <tcp_process+0x7d4>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	429a      	cmp	r2, r3
 800e21a:	d15f      	bne.n	800e2dc <tcp_process+0x7b8>
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e220:	2b00      	cmp	r3, #0
 800e222:	d15b      	bne.n	800e2dc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f7fe fcf3 	bl	800cc10 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e22a:	4b35      	ldr	r3, [pc, #212]	; (800e300 <tcp_process+0x7dc>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	687a      	ldr	r2, [r7, #4]
 800e230:	429a      	cmp	r2, r3
 800e232:	d105      	bne.n	800e240 <tcp_process+0x71c>
 800e234:	4b32      	ldr	r3, [pc, #200]	; (800e300 <tcp_process+0x7dc>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	68db      	ldr	r3, [r3, #12]
 800e23a:	4a31      	ldr	r2, [pc, #196]	; (800e300 <tcp_process+0x7dc>)
 800e23c:	6013      	str	r3, [r2, #0]
 800e23e:	e013      	b.n	800e268 <tcp_process+0x744>
 800e240:	4b2f      	ldr	r3, [pc, #188]	; (800e300 <tcp_process+0x7dc>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	60fb      	str	r3, [r7, #12]
 800e246:	e00c      	b.n	800e262 <tcp_process+0x73e>
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	68db      	ldr	r3, [r3, #12]
 800e24c:	687a      	ldr	r2, [r7, #4]
 800e24e:	429a      	cmp	r2, r3
 800e250:	d104      	bne.n	800e25c <tcp_process+0x738>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	68da      	ldr	r2, [r3, #12]
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	60da      	str	r2, [r3, #12]
 800e25a:	e005      	b.n	800e268 <tcp_process+0x744>
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	68db      	ldr	r3, [r3, #12]
 800e260:	60fb      	str	r3, [r7, #12]
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d1ef      	bne.n	800e248 <tcp_process+0x724>
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2200      	movs	r2, #0
 800e26c:	60da      	str	r2, [r3, #12]
 800e26e:	4b1f      	ldr	r3, [pc, #124]	; (800e2ec <tcp_process+0x7c8>)
 800e270:	2201      	movs	r2, #1
 800e272:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	220a      	movs	r2, #10
 800e278:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e27a:	4b1d      	ldr	r3, [pc, #116]	; (800e2f0 <tcp_process+0x7cc>)
 800e27c:	681a      	ldr	r2, [r3, #0]
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	60da      	str	r2, [r3, #12]
 800e282:	4a1b      	ldr	r2, [pc, #108]	; (800e2f0 <tcp_process+0x7cc>)
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6013      	str	r3, [r2, #0]
 800e288:	f002 fc56 	bl	8010b38 <tcp_timer_needed>
      }
      break;
 800e28c:	e026      	b.n	800e2dc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f000 f93c 	bl	800e50c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e294:	4b17      	ldr	r3, [pc, #92]	; (800e2f4 <tcp_process+0x7d0>)
 800e296:	781b      	ldrb	r3, [r3, #0]
 800e298:	f003 0310 	and.w	r3, r3, #16
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d01f      	beq.n	800e2e0 <tcp_process+0x7bc>
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e2a4:	4b14      	ldr	r3, [pc, #80]	; (800e2f8 <tcp_process+0x7d4>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	429a      	cmp	r2, r3
 800e2aa:	d119      	bne.n	800e2e0 <tcp_process+0x7bc>
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d115      	bne.n	800e2e0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e2b4:	4b11      	ldr	r3, [pc, #68]	; (800e2fc <tcp_process+0x7d8>)
 800e2b6:	781b      	ldrb	r3, [r3, #0]
 800e2b8:	f043 0310 	orr.w	r3, r3, #16
 800e2bc:	b2da      	uxtb	r2, r3
 800e2be:	4b0f      	ldr	r3, [pc, #60]	; (800e2fc <tcp_process+0x7d8>)
 800e2c0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e2c2:	e00d      	b.n	800e2e0 <tcp_process+0x7bc>
    default:
      break;
 800e2c4:	bf00      	nop
 800e2c6:	e00c      	b.n	800e2e2 <tcp_process+0x7be>
      break;
 800e2c8:	bf00      	nop
 800e2ca:	e00a      	b.n	800e2e2 <tcp_process+0x7be>
      break;
 800e2cc:	bf00      	nop
 800e2ce:	e008      	b.n	800e2e2 <tcp_process+0x7be>
      break;
 800e2d0:	bf00      	nop
 800e2d2:	e006      	b.n	800e2e2 <tcp_process+0x7be>
      break;
 800e2d4:	bf00      	nop
 800e2d6:	e004      	b.n	800e2e2 <tcp_process+0x7be>
      break;
 800e2d8:	bf00      	nop
 800e2da:	e002      	b.n	800e2e2 <tcp_process+0x7be>
      break;
 800e2dc:	bf00      	nop
 800e2de:	e000      	b.n	800e2e2 <tcp_process+0x7be>
      break;
 800e2e0:	bf00      	nop
  }
  return ERR_OK;
 800e2e2:	2300      	movs	r3, #0
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	3724      	adds	r7, #36	; 0x24
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd90      	pop	{r4, r7, pc}
 800e2ec:	200076f0 	.word	0x200076f0
 800e2f0:	20007704 	.word	0x20007704
 800e2f4:	20000480 	.word	0x20000480
 800e2f8:	20000478 	.word	0x20000478
 800e2fc:	20000481 	.word	0x20000481
 800e300:	200076f4 	.word	0x200076f4

0800e304 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e304:	b590      	push	{r4, r7, lr}
 800e306:	b085      	sub	sp, #20
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d106      	bne.n	800e322 <tcp_oos_insert_segment+0x1e>
 800e314:	4b3b      	ldr	r3, [pc, #236]	; (800e404 <tcp_oos_insert_segment+0x100>)
 800e316:	f240 421f 	movw	r2, #1055	; 0x41f
 800e31a:	493b      	ldr	r1, [pc, #236]	; (800e408 <tcp_oos_insert_segment+0x104>)
 800e31c:	483b      	ldr	r0, [pc, #236]	; (800e40c <tcp_oos_insert_segment+0x108>)
 800e31e:	f007 fc99 	bl	8015c54 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	68db      	ldr	r3, [r3, #12]
 800e326:	899b      	ldrh	r3, [r3, #12]
 800e328:	b29b      	uxth	r3, r3
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7fb fd6b 	bl	8009e06 <lwip_htons>
 800e330:	4603      	mov	r3, r0
 800e332:	b2db      	uxtb	r3, r3
 800e334:	f003 0301 	and.w	r3, r3, #1
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d028      	beq.n	800e38e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e33c:	6838      	ldr	r0, [r7, #0]
 800e33e:	f7fe fa67 	bl	800c810 <tcp_segs_free>
    next = NULL;
 800e342:	2300      	movs	r3, #0
 800e344:	603b      	str	r3, [r7, #0]
 800e346:	e056      	b.n	800e3f6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	68db      	ldr	r3, [r3, #12]
 800e34c:	899b      	ldrh	r3, [r3, #12]
 800e34e:	b29b      	uxth	r3, r3
 800e350:	4618      	mov	r0, r3
 800e352:	f7fb fd58 	bl	8009e06 <lwip_htons>
 800e356:	4603      	mov	r3, r0
 800e358:	b2db      	uxtb	r3, r3
 800e35a:	f003 0301 	and.w	r3, r3, #1
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d00d      	beq.n	800e37e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	68db      	ldr	r3, [r3, #12]
 800e366:	899b      	ldrh	r3, [r3, #12]
 800e368:	b29c      	uxth	r4, r3
 800e36a:	2001      	movs	r0, #1
 800e36c:	f7fb fd4b 	bl	8009e06 <lwip_htons>
 800e370:	4603      	mov	r3, r0
 800e372:	461a      	mov	r2, r3
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	68db      	ldr	r3, [r3, #12]
 800e378:	4322      	orrs	r2, r4
 800e37a:	b292      	uxth	r2, r2
 800e37c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e388:	68f8      	ldr	r0, [r7, #12]
 800e38a:	f7fe fa55 	bl	800c838 <tcp_seg_free>
    while (next &&
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d00e      	beq.n	800e3b2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	891b      	ldrh	r3, [r3, #8]
 800e398:	461a      	mov	r2, r3
 800e39a:	4b1d      	ldr	r3, [pc, #116]	; (800e410 <tcp_oos_insert_segment+0x10c>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	441a      	add	r2, r3
 800e3a0:	683b      	ldr	r3, [r7, #0]
 800e3a2:	68db      	ldr	r3, [r3, #12]
 800e3a4:	685b      	ldr	r3, [r3, #4]
 800e3a6:	6839      	ldr	r1, [r7, #0]
 800e3a8:	8909      	ldrh	r1, [r1, #8]
 800e3aa:	440b      	add	r3, r1
 800e3ac:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	daca      	bge.n	800e348 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d01e      	beq.n	800e3f6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	891b      	ldrh	r3, [r3, #8]
 800e3bc:	461a      	mov	r2, r3
 800e3be:	4b14      	ldr	r3, [pc, #80]	; (800e410 <tcp_oos_insert_segment+0x10c>)
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	441a      	add	r2, r3
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	68db      	ldr	r3, [r3, #12]
 800e3c8:	685b      	ldr	r3, [r3, #4]
 800e3ca:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	dd12      	ble.n	800e3f6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	68db      	ldr	r3, [r3, #12]
 800e3d4:	685b      	ldr	r3, [r3, #4]
 800e3d6:	b29a      	uxth	r2, r3
 800e3d8:	4b0d      	ldr	r3, [pc, #52]	; (800e410 <tcp_oos_insert_segment+0x10c>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	b29b      	uxth	r3, r3
 800e3de:	1ad3      	subs	r3, r2, r3
 800e3e0:	b29a      	uxth	r2, r3
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	685a      	ldr	r2, [r3, #4]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	891b      	ldrh	r3, [r3, #8]
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	4610      	mov	r0, r2
 800e3f2:	f7fc fe23 	bl	800b03c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	683a      	ldr	r2, [r7, #0]
 800e3fa:	601a      	str	r2, [r3, #0]
}
 800e3fc:	bf00      	nop
 800e3fe:	3714      	adds	r7, #20
 800e400:	46bd      	mov	sp, r7
 800e402:	bd90      	pop	{r4, r7, pc}
 800e404:	08017c38 	.word	0x08017c38
 800e408:	08017ef8 	.word	0x08017ef8
 800e40c:	08017c84 	.word	0x08017c84
 800e410:	20000474 	.word	0x20000474

0800e414 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e414:	b5b0      	push	{r4, r5, r7, lr}
 800e416:	b086      	sub	sp, #24
 800e418:	af00      	add	r7, sp, #0
 800e41a:	60f8      	str	r0, [r7, #12]
 800e41c:	60b9      	str	r1, [r7, #8]
 800e41e:	607a      	str	r2, [r7, #4]
 800e420:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e422:	e03e      	b.n	800e4a2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e42e:	697b      	ldr	r3, [r7, #20]
 800e430:	685b      	ldr	r3, [r3, #4]
 800e432:	4618      	mov	r0, r3
 800e434:	f7fd f810 	bl	800b458 <pbuf_clen>
 800e438:	4603      	mov	r3, r0
 800e43a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e442:	8a7a      	ldrh	r2, [r7, #18]
 800e444:	429a      	cmp	r2, r3
 800e446:	d906      	bls.n	800e456 <tcp_free_acked_segments+0x42>
 800e448:	4b2a      	ldr	r3, [pc, #168]	; (800e4f4 <tcp_free_acked_segments+0xe0>)
 800e44a:	f240 4257 	movw	r2, #1111	; 0x457
 800e44e:	492a      	ldr	r1, [pc, #168]	; (800e4f8 <tcp_free_acked_segments+0xe4>)
 800e450:	482a      	ldr	r0, [pc, #168]	; (800e4fc <tcp_free_acked_segments+0xe8>)
 800e452:	f007 fbff 	bl	8015c54 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800e45c:	8a7b      	ldrh	r3, [r7, #18]
 800e45e:	1ad3      	subs	r3, r2, r3
 800e460:	b29a      	uxth	r2, r3
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e468:	697b      	ldr	r3, [r7, #20]
 800e46a:	891a      	ldrh	r2, [r3, #8]
 800e46c:	4b24      	ldr	r3, [pc, #144]	; (800e500 <tcp_free_acked_segments+0xec>)
 800e46e:	881b      	ldrh	r3, [r3, #0]
 800e470:	4413      	add	r3, r2
 800e472:	b29a      	uxth	r2, r3
 800e474:	4b22      	ldr	r3, [pc, #136]	; (800e500 <tcp_free_acked_segments+0xec>)
 800e476:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e478:	6978      	ldr	r0, [r7, #20]
 800e47a:	f7fe f9dd 	bl	800c838 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e484:	2b00      	cmp	r3, #0
 800e486:	d00c      	beq.n	800e4a2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d109      	bne.n	800e4a2 <tcp_free_acked_segments+0x8e>
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d106      	bne.n	800e4a2 <tcp_free_acked_segments+0x8e>
 800e494:	4b17      	ldr	r3, [pc, #92]	; (800e4f4 <tcp_free_acked_segments+0xe0>)
 800e496:	f240 4262 	movw	r2, #1122	; 0x462
 800e49a:	491a      	ldr	r1, [pc, #104]	; (800e504 <tcp_free_acked_segments+0xf0>)
 800e49c:	4817      	ldr	r0, [pc, #92]	; (800e4fc <tcp_free_acked_segments+0xe8>)
 800e49e:	f007 fbd9 	bl	8015c54 <iprintf>
  while (seg_list != NULL &&
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d020      	beq.n	800e4ea <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	68db      	ldr	r3, [r3, #12]
 800e4ac:	685b      	ldr	r3, [r3, #4]
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f7fb fcbe 	bl	8009e30 <lwip_htonl>
 800e4b4:	4604      	mov	r4, r0
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	891b      	ldrh	r3, [r3, #8]
 800e4ba:	461d      	mov	r5, r3
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	68db      	ldr	r3, [r3, #12]
 800e4c0:	899b      	ldrh	r3, [r3, #12]
 800e4c2:	b29b      	uxth	r3, r3
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f7fb fc9e 	bl	8009e06 <lwip_htons>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	b2db      	uxtb	r3, r3
 800e4ce:	f003 0303 	and.w	r3, r3, #3
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d001      	beq.n	800e4da <tcp_free_acked_segments+0xc6>
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	e000      	b.n	800e4dc <tcp_free_acked_segments+0xc8>
 800e4da:	2300      	movs	r3, #0
 800e4dc:	442b      	add	r3, r5
 800e4de:	18e2      	adds	r2, r4, r3
 800e4e0:	4b09      	ldr	r3, [pc, #36]	; (800e508 <tcp_free_acked_segments+0xf4>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	dd9c      	ble.n	800e424 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e4ea:	68bb      	ldr	r3, [r7, #8]
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3718      	adds	r7, #24
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bdb0      	pop	{r4, r5, r7, pc}
 800e4f4:	08017c38 	.word	0x08017c38
 800e4f8:	08017f20 	.word	0x08017f20
 800e4fc:	08017c84 	.word	0x08017c84
 800e500:	2000047c 	.word	0x2000047c
 800e504:	08017f48 	.word	0x08017f48
 800e508:	20000478 	.word	0x20000478

0800e50c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e50c:	b5b0      	push	{r4, r5, r7, lr}
 800e50e:	b094      	sub	sp, #80	; 0x50
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e514:	2300      	movs	r3, #0
 800e516:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d106      	bne.n	800e52c <tcp_receive+0x20>
 800e51e:	4ba6      	ldr	r3, [pc, #664]	; (800e7b8 <tcp_receive+0x2ac>)
 800e520:	f240 427b 	movw	r2, #1147	; 0x47b
 800e524:	49a5      	ldr	r1, [pc, #660]	; (800e7bc <tcp_receive+0x2b0>)
 800e526:	48a6      	ldr	r0, [pc, #664]	; (800e7c0 <tcp_receive+0x2b4>)
 800e528:	f007 fb94 	bl	8015c54 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	7d1b      	ldrb	r3, [r3, #20]
 800e530:	2b03      	cmp	r3, #3
 800e532:	d806      	bhi.n	800e542 <tcp_receive+0x36>
 800e534:	4ba0      	ldr	r3, [pc, #640]	; (800e7b8 <tcp_receive+0x2ac>)
 800e536:	f240 427c 	movw	r2, #1148	; 0x47c
 800e53a:	49a2      	ldr	r1, [pc, #648]	; (800e7c4 <tcp_receive+0x2b8>)
 800e53c:	48a0      	ldr	r0, [pc, #640]	; (800e7c0 <tcp_receive+0x2b4>)
 800e53e:	f007 fb89 	bl	8015c54 <iprintf>

  if (flags & TCP_ACK) {
 800e542:	4ba1      	ldr	r3, [pc, #644]	; (800e7c8 <tcp_receive+0x2bc>)
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	f003 0310 	and.w	r3, r3, #16
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	f000 8263 	beq.w	800ea16 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e556:	461a      	mov	r2, r3
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e55c:	4413      	add	r3, r2
 800e55e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e564:	4b99      	ldr	r3, [pc, #612]	; (800e7cc <tcp_receive+0x2c0>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	1ad3      	subs	r3, r2, r3
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	db1b      	blt.n	800e5a6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e572:	4b96      	ldr	r3, [pc, #600]	; (800e7cc <tcp_receive+0x2c0>)
 800e574:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e576:	429a      	cmp	r2, r3
 800e578:	d106      	bne.n	800e588 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e57e:	4b94      	ldr	r3, [pc, #592]	; (800e7d0 <tcp_receive+0x2c4>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	1ad3      	subs	r3, r2, r3
 800e584:	2b00      	cmp	r3, #0
 800e586:	db0e      	blt.n	800e5a6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e58c:	4b90      	ldr	r3, [pc, #576]	; (800e7d0 <tcp_receive+0x2c4>)
 800e58e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e590:	429a      	cmp	r2, r3
 800e592:	d125      	bne.n	800e5e0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e594:	4b8f      	ldr	r3, [pc, #572]	; (800e7d4 <tcp_receive+0x2c8>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	89db      	ldrh	r3, [r3, #14]
 800e59a:	b29a      	uxth	r2, r3
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d91c      	bls.n	800e5e0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e5a6:	4b8b      	ldr	r3, [pc, #556]	; (800e7d4 <tcp_receive+0x2c8>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	89db      	ldrh	r3, [r3, #14]
 800e5ac:	b29a      	uxth	r2, r3
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	d205      	bcs.n	800e5d0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800e5d0:	4b7e      	ldr	r3, [pc, #504]	; (800e7cc <tcp_receive+0x2c0>)
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800e5d8:	4b7d      	ldr	r3, [pc, #500]	; (800e7d0 <tcp_receive+0x2c4>)
 800e5da:	681a      	ldr	r2, [r3, #0]
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e5e0:	4b7b      	ldr	r3, [pc, #492]	; (800e7d0 <tcp_receive+0x2c4>)
 800e5e2:	681a      	ldr	r2, [r3, #0]
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5e8:	1ad3      	subs	r3, r2, r3
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	dc58      	bgt.n	800e6a0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e5ee:	4b7a      	ldr	r3, [pc, #488]	; (800e7d8 <tcp_receive+0x2cc>)
 800e5f0:	881b      	ldrh	r3, [r3, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d14b      	bne.n	800e68e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5fa:	687a      	ldr	r2, [r7, #4]
 800e5fc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800e600:	4413      	add	r3, r2
 800e602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e604:	429a      	cmp	r2, r3
 800e606:	d142      	bne.n	800e68e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e60e:	2b00      	cmp	r3, #0
 800e610:	db3d      	blt.n	800e68e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e616:	4b6e      	ldr	r3, [pc, #440]	; (800e7d0 <tcp_receive+0x2c4>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	429a      	cmp	r2, r3
 800e61c:	d137      	bne.n	800e68e <tcp_receive+0x182>
              found_dupack = 1;
 800e61e:	2301      	movs	r3, #1
 800e620:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e628:	2bff      	cmp	r3, #255	; 0xff
 800e62a:	d007      	beq.n	800e63c <tcp_receive+0x130>
                ++pcb->dupacks;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e632:	3301      	adds	r3, #1
 800e634:	b2da      	uxtb	r2, r3
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e642:	2b03      	cmp	r3, #3
 800e644:	d91b      	bls.n	800e67e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e650:	4413      	add	r3, r2
 800e652:	b29a      	uxth	r2, r3
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d30a      	bcc.n	800e674 <tcp_receive+0x168>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e668:	4413      	add	r3, r2
 800e66a:	b29a      	uxth	r2, r3
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e672:	e004      	b.n	800e67e <tcp_receive+0x172>
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e67a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e684:	2b02      	cmp	r3, #2
 800e686:	d902      	bls.n	800e68e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f001 feed 	bl	8010468 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e68e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e690:	2b00      	cmp	r3, #0
 800e692:	f040 8160 	bne.w	800e956 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2200      	movs	r2, #0
 800e69a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e69e:	e15a      	b.n	800e956 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e6a0:	4b4b      	ldr	r3, [pc, #300]	; (800e7d0 <tcp_receive+0x2c4>)
 800e6a2:	681a      	ldr	r2, [r3, #0]
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6a8:	1ad3      	subs	r3, r2, r3
 800e6aa:	3b01      	subs	r3, #1
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	f2c0 814d 	blt.w	800e94c <tcp_receive+0x440>
 800e6b2:	4b47      	ldr	r3, [pc, #284]	; (800e7d0 <tcp_receive+0x2c4>)
 800e6b4:	681a      	ldr	r2, [r3, #0]
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6ba:	1ad3      	subs	r3, r2, r3
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	f300 8145 	bgt.w	800e94c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	8b5b      	ldrh	r3, [r3, #26]
 800e6c6:	f003 0304 	and.w	r3, r3, #4
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d010      	beq.n	800e6f0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	8b5b      	ldrh	r3, [r3, #26]
 800e6d2:	f023 0304 	bic.w	r3, r3, #4
 800e6d6:	b29a      	uxth	r2, r3
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e6fe:	10db      	asrs	r3, r3, #3
 800e700:	b21b      	sxth	r3, r3
 800e702:	b29a      	uxth	r2, r3
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e70a:	b29b      	uxth	r3, r3
 800e70c:	4413      	add	r3, r2
 800e70e:	b29b      	uxth	r3, r3
 800e710:	b21a      	sxth	r2, r3
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e718:	4b2d      	ldr	r3, [pc, #180]	; (800e7d0 <tcp_receive+0x2c4>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	b29a      	uxth	r2, r3
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e722:	b29b      	uxth	r3, r3
 800e724:	1ad3      	subs	r3, r2, r3
 800e726:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2200      	movs	r2, #0
 800e72c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800e730:	4b27      	ldr	r3, [pc, #156]	; (800e7d0 <tcp_receive+0x2c4>)
 800e732:	681a      	ldr	r2, [r3, #0]
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	7d1b      	ldrb	r3, [r3, #20]
 800e73c:	2b03      	cmp	r3, #3
 800e73e:	f240 8096 	bls.w	800e86e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e74e:	429a      	cmp	r2, r3
 800e750:	d244      	bcs.n	800e7dc <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	8b5b      	ldrh	r3, [r3, #26]
 800e756:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d001      	beq.n	800e762 <tcp_receive+0x256>
 800e75e:	2301      	movs	r3, #1
 800e760:	e000      	b.n	800e764 <tcp_receive+0x258>
 800e762:	2302      	movs	r3, #2
 800e764:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e768:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e76c:	b29a      	uxth	r2, r3
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e772:	fb12 f303 	smulbb	r3, r2, r3
 800e776:	b29b      	uxth	r3, r3
 800e778:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e77a:	4293      	cmp	r3, r2
 800e77c:	bf28      	it	cs
 800e77e:	4613      	movcs	r3, r2
 800e780:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e788:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e78a:	4413      	add	r3, r2
 800e78c:	b29a      	uxth	r2, r3
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e794:	429a      	cmp	r2, r3
 800e796:	d309      	bcc.n	800e7ac <tcp_receive+0x2a0>
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e79e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e7a0:	4413      	add	r3, r2
 800e7a2:	b29a      	uxth	r2, r3
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e7aa:	e060      	b.n	800e86e <tcp_receive+0x362>
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e7b6:	e05a      	b.n	800e86e <tcp_receive+0x362>
 800e7b8:	08017c38 	.word	0x08017c38
 800e7bc:	08017f68 	.word	0x08017f68
 800e7c0:	08017c84 	.word	0x08017c84
 800e7c4:	08017f84 	.word	0x08017f84
 800e7c8:	20000480 	.word	0x20000480
 800e7cc:	20000474 	.word	0x20000474
 800e7d0:	20000478 	.word	0x20000478
 800e7d4:	20000464 	.word	0x20000464
 800e7d8:	2000047e 	.word	0x2000047e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e7e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e7e4:	4413      	add	r3, r2
 800e7e6:	b29a      	uxth	r2, r3
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7ee:	429a      	cmp	r2, r3
 800e7f0:	d309      	bcc.n	800e806 <tcp_receive+0x2fa>
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e7f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e7fa:	4413      	add	r3, r2
 800e7fc:	b29a      	uxth	r2, r3
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e804:	e004      	b.n	800e810 <tcp_receive+0x304>
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e80c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d326      	bcc.n	800e86e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e82c:	1ad3      	subs	r3, r2, r3
 800e82e:	b29a      	uxth	r2, r3
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e840:	4413      	add	r3, r2
 800e842:	b29a      	uxth	r2, r3
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d30a      	bcc.n	800e864 <tcp_receive+0x358>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e858:	4413      	add	r3, r2
 800e85a:	b29a      	uxth	r2, r3
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e862:	e004      	b.n	800e86e <tcp_receive+0x362>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e86a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e876:	4a98      	ldr	r2, [pc, #608]	; (800ead8 <tcp_receive+0x5cc>)
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f7ff fdcb 	bl	800e414 <tcp_free_acked_segments>
 800e87e:	4602      	mov	r2, r0
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e88c:	4a93      	ldr	r2, [pc, #588]	; (800eadc <tcp_receive+0x5d0>)
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f7ff fdc0 	bl	800e414 <tcp_free_acked_segments>
 800e894:	4602      	mov	r2, r0
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d104      	bne.n	800e8ac <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e8a8:	861a      	strh	r2, [r3, #48]	; 0x30
 800e8aa:	e002      	b.n	800e8b2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2200      	movs	r2, #0
 800e8b6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d103      	bne.n	800e8c8 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e8ce:	4b84      	ldr	r3, [pc, #528]	; (800eae0 <tcp_receive+0x5d4>)
 800e8d0:	881b      	ldrh	r3, [r3, #0]
 800e8d2:	4413      	add	r3, r2
 800e8d4:	b29a      	uxth	r2, r3
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	8b5b      	ldrh	r3, [r3, #26]
 800e8e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d035      	beq.n	800e954 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d118      	bne.n	800e922 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d00c      	beq.n	800e912 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e900:	68db      	ldr	r3, [r3, #12]
 800e902:	685b      	ldr	r3, [r3, #4]
 800e904:	4618      	mov	r0, r3
 800e906:	f7fb fa93 	bl	8009e30 <lwip_htonl>
 800e90a:	4603      	mov	r3, r0
 800e90c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e90e:	2b00      	cmp	r3, #0
 800e910:	dc20      	bgt.n	800e954 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	8b5b      	ldrh	r3, [r3, #26]
 800e916:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e91a:	b29a      	uxth	r2, r3
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e920:	e018      	b.n	800e954 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e92a:	68db      	ldr	r3, [r3, #12]
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	4618      	mov	r0, r3
 800e930:	f7fb fa7e 	bl	8009e30 <lwip_htonl>
 800e934:	4603      	mov	r3, r0
 800e936:	1ae3      	subs	r3, r4, r3
 800e938:	2b00      	cmp	r3, #0
 800e93a:	dc0b      	bgt.n	800e954 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	8b5b      	ldrh	r3, [r3, #26]
 800e940:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e944:	b29a      	uxth	r2, r3
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e94a:	e003      	b.n	800e954 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	f001 ff83 	bl	8010858 <tcp_send_empty_ack>
 800e952:	e000      	b.n	800e956 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e954:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d05b      	beq.n	800ea16 <tcp_receive+0x50a>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e962:	4b60      	ldr	r3, [pc, #384]	; (800eae4 <tcp_receive+0x5d8>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	1ad3      	subs	r3, r2, r3
 800e968:	2b00      	cmp	r3, #0
 800e96a:	da54      	bge.n	800ea16 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e96c:	4b5e      	ldr	r3, [pc, #376]	; (800eae8 <tcp_receive+0x5dc>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	b29a      	uxth	r2, r3
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e976:	b29b      	uxth	r3, r3
 800e978:	1ad3      	subs	r3, r2, r3
 800e97a:	b29b      	uxth	r3, r3
 800e97c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e980:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e98a:	10db      	asrs	r3, r3, #3
 800e98c:	b21b      	sxth	r3, r3
 800e98e:	b29b      	uxth	r3, r3
 800e990:	1ad3      	subs	r3, r2, r3
 800e992:	b29b      	uxth	r3, r3
 800e994:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e99e:	b29a      	uxth	r2, r3
 800e9a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e9a4:	4413      	add	r3, r2
 800e9a6:	b29b      	uxth	r3, r3
 800e9a8:	b21a      	sxth	r2, r3
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800e9ae:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	da05      	bge.n	800e9c2 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800e9b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e9ba:	425b      	negs	r3, r3
 800e9bc:	b29b      	uxth	r3, r3
 800e9be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e9c2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e9cc:	109b      	asrs	r3, r3, #2
 800e9ce:	b21b      	sxth	r3, r3
 800e9d0:	b29b      	uxth	r3, r3
 800e9d2:	1ad3      	subs	r3, r2, r3
 800e9d4:	b29b      	uxth	r3, r3
 800e9d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e9e0:	b29a      	uxth	r2, r3
 800e9e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e9e6:	4413      	add	r3, r2
 800e9e8:	b29b      	uxth	r3, r3
 800e9ea:	b21a      	sxth	r2, r3
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e9f6:	10db      	asrs	r3, r3, #3
 800e9f8:	b21b      	sxth	r3, r3
 800e9fa:	b29a      	uxth	r2, r3
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ea02:	b29b      	uxth	r3, r3
 800ea04:	4413      	add	r3, r2
 800ea06:	b29b      	uxth	r3, r3
 800ea08:	b21a      	sxth	r2, r3
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2200      	movs	r2, #0
 800ea14:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ea16:	4b35      	ldr	r3, [pc, #212]	; (800eaec <tcp_receive+0x5e0>)
 800ea18:	881b      	ldrh	r3, [r3, #0]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	f000 84e1 	beq.w	800f3e2 <tcp_receive+0xed6>
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	7d1b      	ldrb	r3, [r3, #20]
 800ea24:	2b06      	cmp	r3, #6
 800ea26:	f200 84dc 	bhi.w	800f3e2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea2e:	4b30      	ldr	r3, [pc, #192]	; (800eaf0 <tcp_receive+0x5e4>)
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	1ad3      	subs	r3, r2, r3
 800ea34:	3b01      	subs	r3, #1
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	f2c0 808e 	blt.w	800eb58 <tcp_receive+0x64c>
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea40:	4b2a      	ldr	r3, [pc, #168]	; (800eaec <tcp_receive+0x5e0>)
 800ea42:	881b      	ldrh	r3, [r3, #0]
 800ea44:	4619      	mov	r1, r3
 800ea46:	4b2a      	ldr	r3, [pc, #168]	; (800eaf0 <tcp_receive+0x5e4>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	440b      	add	r3, r1
 800ea4c:	1ad3      	subs	r3, r2, r3
 800ea4e:	3301      	adds	r3, #1
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	f300 8081 	bgt.w	800eb58 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ea56:	4b27      	ldr	r3, [pc, #156]	; (800eaf4 <tcp_receive+0x5e8>)
 800ea58:	685b      	ldr	r3, [r3, #4]
 800ea5a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea60:	4b23      	ldr	r3, [pc, #140]	; (800eaf0 <tcp_receive+0x5e4>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	1ad3      	subs	r3, r2, r3
 800ea66:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ea68:	4b22      	ldr	r3, [pc, #136]	; (800eaf4 <tcp_receive+0x5e8>)
 800ea6a:	685b      	ldr	r3, [r3, #4]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d106      	bne.n	800ea7e <tcp_receive+0x572>
 800ea70:	4b21      	ldr	r3, [pc, #132]	; (800eaf8 <tcp_receive+0x5ec>)
 800ea72:	f240 5294 	movw	r2, #1428	; 0x594
 800ea76:	4921      	ldr	r1, [pc, #132]	; (800eafc <tcp_receive+0x5f0>)
 800ea78:	4821      	ldr	r0, [pc, #132]	; (800eb00 <tcp_receive+0x5f4>)
 800ea7a:	f007 f8eb 	bl	8015c54 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800ea7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea80:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ea84:	4293      	cmp	r3, r2
 800ea86:	d906      	bls.n	800ea96 <tcp_receive+0x58a>
 800ea88:	4b1b      	ldr	r3, [pc, #108]	; (800eaf8 <tcp_receive+0x5ec>)
 800ea8a:	f240 5295 	movw	r2, #1429	; 0x595
 800ea8e:	491d      	ldr	r1, [pc, #116]	; (800eb04 <tcp_receive+0x5f8>)
 800ea90:	481b      	ldr	r0, [pc, #108]	; (800eb00 <tcp_receive+0x5f4>)
 800ea92:	f007 f8df 	bl	8015c54 <iprintf>
      off = (u16_t)off32;
 800ea96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea98:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ea9c:	4b15      	ldr	r3, [pc, #84]	; (800eaf4 <tcp_receive+0x5e8>)
 800ea9e:	685b      	ldr	r3, [r3, #4]
 800eaa0:	891b      	ldrh	r3, [r3, #8]
 800eaa2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eaa6:	429a      	cmp	r2, r3
 800eaa8:	d906      	bls.n	800eab8 <tcp_receive+0x5ac>
 800eaaa:	4b13      	ldr	r3, [pc, #76]	; (800eaf8 <tcp_receive+0x5ec>)
 800eaac:	f240 5297 	movw	r2, #1431	; 0x597
 800eab0:	4915      	ldr	r1, [pc, #84]	; (800eb08 <tcp_receive+0x5fc>)
 800eab2:	4813      	ldr	r0, [pc, #76]	; (800eb00 <tcp_receive+0x5f4>)
 800eab4:	f007 f8ce 	bl	8015c54 <iprintf>
      inseg.len -= off;
 800eab8:	4b0e      	ldr	r3, [pc, #56]	; (800eaf4 <tcp_receive+0x5e8>)
 800eaba:	891a      	ldrh	r2, [r3, #8]
 800eabc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eac0:	1ad3      	subs	r3, r2, r3
 800eac2:	b29a      	uxth	r2, r3
 800eac4:	4b0b      	ldr	r3, [pc, #44]	; (800eaf4 <tcp_receive+0x5e8>)
 800eac6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800eac8:	4b0a      	ldr	r3, [pc, #40]	; (800eaf4 <tcp_receive+0x5e8>)
 800eaca:	685b      	ldr	r3, [r3, #4]
 800eacc:	891a      	ldrh	r2, [r3, #8]
 800eace:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ead2:	1ad3      	subs	r3, r2, r3
 800ead4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800ead6:	e029      	b.n	800eb2c <tcp_receive+0x620>
 800ead8:	08017fa0 	.word	0x08017fa0
 800eadc:	08017fa8 	.word	0x08017fa8
 800eae0:	2000047c 	.word	0x2000047c
 800eae4:	20000478 	.word	0x20000478
 800eae8:	200076f8 	.word	0x200076f8
 800eaec:	2000047e 	.word	0x2000047e
 800eaf0:	20000474 	.word	0x20000474
 800eaf4:	20000454 	.word	0x20000454
 800eaf8:	08017c38 	.word	0x08017c38
 800eafc:	08017fb0 	.word	0x08017fb0
 800eb00:	08017c84 	.word	0x08017c84
 800eb04:	08017fc0 	.word	0x08017fc0
 800eb08:	08017fd0 	.word	0x08017fd0
        off -= p->len;
 800eb0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb0e:	895b      	ldrh	r3, [r3, #10]
 800eb10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eb14:	1ad3      	subs	r3, r2, r3
 800eb16:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800eb1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb1c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800eb1e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800eb20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb22:	2200      	movs	r2, #0
 800eb24:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800eb26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800eb2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb2e:	895b      	ldrh	r3, [r3, #10]
 800eb30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d8e9      	bhi.n	800eb0c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800eb38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eb3c:	4619      	mov	r1, r3
 800eb3e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800eb40:	f7fc fb7c 	bl	800b23c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb48:	4a91      	ldr	r2, [pc, #580]	; (800ed90 <tcp_receive+0x884>)
 800eb4a:	6013      	str	r3, [r2, #0]
 800eb4c:	4b91      	ldr	r3, [pc, #580]	; (800ed94 <tcp_receive+0x888>)
 800eb4e:	68db      	ldr	r3, [r3, #12]
 800eb50:	4a8f      	ldr	r2, [pc, #572]	; (800ed90 <tcp_receive+0x884>)
 800eb52:	6812      	ldr	r2, [r2, #0]
 800eb54:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800eb56:	e00d      	b.n	800eb74 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800eb58:	4b8d      	ldr	r3, [pc, #564]	; (800ed90 <tcp_receive+0x884>)
 800eb5a:	681a      	ldr	r2, [r3, #0]
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb60:	1ad3      	subs	r3, r2, r3
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	da06      	bge.n	800eb74 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	8b5b      	ldrh	r3, [r3, #26]
 800eb6a:	f043 0302 	orr.w	r3, r3, #2
 800eb6e:	b29a      	uxth	r2, r3
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800eb74:	4b86      	ldr	r3, [pc, #536]	; (800ed90 <tcp_receive+0x884>)
 800eb76:	681a      	ldr	r2, [r3, #0]
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb7c:	1ad3      	subs	r3, r2, r3
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	f2c0 842a 	blt.w	800f3d8 <tcp_receive+0xecc>
 800eb84:	4b82      	ldr	r3, [pc, #520]	; (800ed90 <tcp_receive+0x884>)
 800eb86:	681a      	ldr	r2, [r3, #0]
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb8c:	6879      	ldr	r1, [r7, #4]
 800eb8e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eb90:	440b      	add	r3, r1
 800eb92:	1ad3      	subs	r3, r2, r3
 800eb94:	3301      	adds	r3, #1
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	f300 841e 	bgt.w	800f3d8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eba0:	4b7b      	ldr	r3, [pc, #492]	; (800ed90 <tcp_receive+0x884>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	429a      	cmp	r2, r3
 800eba6:	f040 829a 	bne.w	800f0de <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ebaa:	4b7a      	ldr	r3, [pc, #488]	; (800ed94 <tcp_receive+0x888>)
 800ebac:	891c      	ldrh	r4, [r3, #8]
 800ebae:	4b79      	ldr	r3, [pc, #484]	; (800ed94 <tcp_receive+0x888>)
 800ebb0:	68db      	ldr	r3, [r3, #12]
 800ebb2:	899b      	ldrh	r3, [r3, #12]
 800ebb4:	b29b      	uxth	r3, r3
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f7fb f925 	bl	8009e06 <lwip_htons>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	b2db      	uxtb	r3, r3
 800ebc0:	f003 0303 	and.w	r3, r3, #3
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d001      	beq.n	800ebcc <tcp_receive+0x6c0>
 800ebc8:	2301      	movs	r3, #1
 800ebca:	e000      	b.n	800ebce <tcp_receive+0x6c2>
 800ebcc:	2300      	movs	r3, #0
 800ebce:	4423      	add	r3, r4
 800ebd0:	b29a      	uxth	r2, r3
 800ebd2:	4b71      	ldr	r3, [pc, #452]	; (800ed98 <tcp_receive+0x88c>)
 800ebd4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ebda:	4b6f      	ldr	r3, [pc, #444]	; (800ed98 <tcp_receive+0x88c>)
 800ebdc:	881b      	ldrh	r3, [r3, #0]
 800ebde:	429a      	cmp	r2, r3
 800ebe0:	d275      	bcs.n	800ecce <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ebe2:	4b6c      	ldr	r3, [pc, #432]	; (800ed94 <tcp_receive+0x888>)
 800ebe4:	68db      	ldr	r3, [r3, #12]
 800ebe6:	899b      	ldrh	r3, [r3, #12]
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	4618      	mov	r0, r3
 800ebec:	f7fb f90b 	bl	8009e06 <lwip_htons>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	b2db      	uxtb	r3, r3
 800ebf4:	f003 0301 	and.w	r3, r3, #1
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d01f      	beq.n	800ec3c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ebfc:	4b65      	ldr	r3, [pc, #404]	; (800ed94 <tcp_receive+0x888>)
 800ebfe:	68db      	ldr	r3, [r3, #12]
 800ec00:	899b      	ldrh	r3, [r3, #12]
 800ec02:	b29b      	uxth	r3, r3
 800ec04:	b21b      	sxth	r3, r3
 800ec06:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ec0a:	b21c      	sxth	r4, r3
 800ec0c:	4b61      	ldr	r3, [pc, #388]	; (800ed94 <tcp_receive+0x888>)
 800ec0e:	68db      	ldr	r3, [r3, #12]
 800ec10:	899b      	ldrh	r3, [r3, #12]
 800ec12:	b29b      	uxth	r3, r3
 800ec14:	4618      	mov	r0, r3
 800ec16:	f7fb f8f6 	bl	8009e06 <lwip_htons>
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	b2db      	uxtb	r3, r3
 800ec1e:	b29b      	uxth	r3, r3
 800ec20:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ec24:	b29b      	uxth	r3, r3
 800ec26:	4618      	mov	r0, r3
 800ec28:	f7fb f8ed 	bl	8009e06 <lwip_htons>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	b21b      	sxth	r3, r3
 800ec30:	4323      	orrs	r3, r4
 800ec32:	b21a      	sxth	r2, r3
 800ec34:	4b57      	ldr	r3, [pc, #348]	; (800ed94 <tcp_receive+0x888>)
 800ec36:	68db      	ldr	r3, [r3, #12]
 800ec38:	b292      	uxth	r2, r2
 800ec3a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ec40:	4b54      	ldr	r3, [pc, #336]	; (800ed94 <tcp_receive+0x888>)
 800ec42:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ec44:	4b53      	ldr	r3, [pc, #332]	; (800ed94 <tcp_receive+0x888>)
 800ec46:	68db      	ldr	r3, [r3, #12]
 800ec48:	899b      	ldrh	r3, [r3, #12]
 800ec4a:	b29b      	uxth	r3, r3
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f7fb f8da 	bl	8009e06 <lwip_htons>
 800ec52:	4603      	mov	r3, r0
 800ec54:	b2db      	uxtb	r3, r3
 800ec56:	f003 0302 	and.w	r3, r3, #2
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d005      	beq.n	800ec6a <tcp_receive+0x75e>
            inseg.len -= 1;
 800ec5e:	4b4d      	ldr	r3, [pc, #308]	; (800ed94 <tcp_receive+0x888>)
 800ec60:	891b      	ldrh	r3, [r3, #8]
 800ec62:	3b01      	subs	r3, #1
 800ec64:	b29a      	uxth	r2, r3
 800ec66:	4b4b      	ldr	r3, [pc, #300]	; (800ed94 <tcp_receive+0x888>)
 800ec68:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ec6a:	4b4a      	ldr	r3, [pc, #296]	; (800ed94 <tcp_receive+0x888>)
 800ec6c:	685a      	ldr	r2, [r3, #4]
 800ec6e:	4b49      	ldr	r3, [pc, #292]	; (800ed94 <tcp_receive+0x888>)
 800ec70:	891b      	ldrh	r3, [r3, #8]
 800ec72:	4619      	mov	r1, r3
 800ec74:	4610      	mov	r0, r2
 800ec76:	f7fc f9e1 	bl	800b03c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ec7a:	4b46      	ldr	r3, [pc, #280]	; (800ed94 <tcp_receive+0x888>)
 800ec7c:	891c      	ldrh	r4, [r3, #8]
 800ec7e:	4b45      	ldr	r3, [pc, #276]	; (800ed94 <tcp_receive+0x888>)
 800ec80:	68db      	ldr	r3, [r3, #12]
 800ec82:	899b      	ldrh	r3, [r3, #12]
 800ec84:	b29b      	uxth	r3, r3
 800ec86:	4618      	mov	r0, r3
 800ec88:	f7fb f8bd 	bl	8009e06 <lwip_htons>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	b2db      	uxtb	r3, r3
 800ec90:	f003 0303 	and.w	r3, r3, #3
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d001      	beq.n	800ec9c <tcp_receive+0x790>
 800ec98:	2301      	movs	r3, #1
 800ec9a:	e000      	b.n	800ec9e <tcp_receive+0x792>
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	4423      	add	r3, r4
 800eca0:	b29a      	uxth	r2, r3
 800eca2:	4b3d      	ldr	r3, [pc, #244]	; (800ed98 <tcp_receive+0x88c>)
 800eca4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800eca6:	4b3c      	ldr	r3, [pc, #240]	; (800ed98 <tcp_receive+0x88c>)
 800eca8:	881b      	ldrh	r3, [r3, #0]
 800ecaa:	461a      	mov	r2, r3
 800ecac:	4b38      	ldr	r3, [pc, #224]	; (800ed90 <tcp_receive+0x884>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	441a      	add	r2, r3
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecb6:	6879      	ldr	r1, [r7, #4]
 800ecb8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ecba:	440b      	add	r3, r1
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d006      	beq.n	800ecce <tcp_receive+0x7c2>
 800ecc0:	4b36      	ldr	r3, [pc, #216]	; (800ed9c <tcp_receive+0x890>)
 800ecc2:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800ecc6:	4936      	ldr	r1, [pc, #216]	; (800eda0 <tcp_receive+0x894>)
 800ecc8:	4836      	ldr	r0, [pc, #216]	; (800eda4 <tcp_receive+0x898>)
 800ecca:	f006 ffc3 	bl	8015c54 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	f000 80e7 	beq.w	800eea6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ecd8:	4b2e      	ldr	r3, [pc, #184]	; (800ed94 <tcp_receive+0x888>)
 800ecda:	68db      	ldr	r3, [r3, #12]
 800ecdc:	899b      	ldrh	r3, [r3, #12]
 800ecde:	b29b      	uxth	r3, r3
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7fb f890 	bl	8009e06 <lwip_htons>
 800ece6:	4603      	mov	r3, r0
 800ece8:	b2db      	uxtb	r3, r3
 800ecea:	f003 0301 	and.w	r3, r3, #1
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d010      	beq.n	800ed14 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ecf2:	e00a      	b.n	800ed0a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecf8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecfe:	681a      	ldr	r2, [r3, #0]
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800ed04:	68f8      	ldr	r0, [r7, #12]
 800ed06:	f7fd fd97 	bl	800c838 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d1f0      	bne.n	800ecf4 <tcp_receive+0x7e8>
 800ed12:	e0c8      	b.n	800eea6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed18:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ed1a:	e052      	b.n	800edc2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ed1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed1e:	68db      	ldr	r3, [r3, #12]
 800ed20:	899b      	ldrh	r3, [r3, #12]
 800ed22:	b29b      	uxth	r3, r3
 800ed24:	4618      	mov	r0, r3
 800ed26:	f7fb f86e 	bl	8009e06 <lwip_htons>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	b2db      	uxtb	r3, r3
 800ed2e:	f003 0301 	and.w	r3, r3, #1
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d03d      	beq.n	800edb2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ed36:	4b17      	ldr	r3, [pc, #92]	; (800ed94 <tcp_receive+0x888>)
 800ed38:	68db      	ldr	r3, [r3, #12]
 800ed3a:	899b      	ldrh	r3, [r3, #12]
 800ed3c:	b29b      	uxth	r3, r3
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f7fb f861 	bl	8009e06 <lwip_htons>
 800ed44:	4603      	mov	r3, r0
 800ed46:	b2db      	uxtb	r3, r3
 800ed48:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d130      	bne.n	800edb2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ed50:	4b10      	ldr	r3, [pc, #64]	; (800ed94 <tcp_receive+0x888>)
 800ed52:	68db      	ldr	r3, [r3, #12]
 800ed54:	899b      	ldrh	r3, [r3, #12]
 800ed56:	b29c      	uxth	r4, r3
 800ed58:	2001      	movs	r0, #1
 800ed5a:	f7fb f854 	bl	8009e06 <lwip_htons>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	461a      	mov	r2, r3
 800ed62:	4b0c      	ldr	r3, [pc, #48]	; (800ed94 <tcp_receive+0x888>)
 800ed64:	68db      	ldr	r3, [r3, #12]
 800ed66:	4322      	orrs	r2, r4
 800ed68:	b292      	uxth	r2, r2
 800ed6a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ed6c:	4b09      	ldr	r3, [pc, #36]	; (800ed94 <tcp_receive+0x888>)
 800ed6e:	891c      	ldrh	r4, [r3, #8]
 800ed70:	4b08      	ldr	r3, [pc, #32]	; (800ed94 <tcp_receive+0x888>)
 800ed72:	68db      	ldr	r3, [r3, #12]
 800ed74:	899b      	ldrh	r3, [r3, #12]
 800ed76:	b29b      	uxth	r3, r3
 800ed78:	4618      	mov	r0, r3
 800ed7a:	f7fb f844 	bl	8009e06 <lwip_htons>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	b2db      	uxtb	r3, r3
 800ed82:	f003 0303 	and.w	r3, r3, #3
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d00e      	beq.n	800eda8 <tcp_receive+0x89c>
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	e00d      	b.n	800edaa <tcp_receive+0x89e>
 800ed8e:	bf00      	nop
 800ed90:	20000474 	.word	0x20000474
 800ed94:	20000454 	.word	0x20000454
 800ed98:	2000047e 	.word	0x2000047e
 800ed9c:	08017c38 	.word	0x08017c38
 800eda0:	08017fe0 	.word	0x08017fe0
 800eda4:	08017c84 	.word	0x08017c84
 800eda8:	2300      	movs	r3, #0
 800edaa:	4423      	add	r3, r4
 800edac:	b29a      	uxth	r2, r3
 800edae:	4b98      	ldr	r3, [pc, #608]	; (800f010 <tcp_receive+0xb04>)
 800edb0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800edb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edb4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800edb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800edbc:	6938      	ldr	r0, [r7, #16]
 800edbe:	f7fd fd3b 	bl	800c838 <tcp_seg_free>
            while (next &&
 800edc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d00e      	beq.n	800ede6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800edc8:	4b91      	ldr	r3, [pc, #580]	; (800f010 <tcp_receive+0xb04>)
 800edca:	881b      	ldrh	r3, [r3, #0]
 800edcc:	461a      	mov	r2, r3
 800edce:	4b91      	ldr	r3, [pc, #580]	; (800f014 <tcp_receive+0xb08>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	441a      	add	r2, r3
 800edd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edd6:	68db      	ldr	r3, [r3, #12]
 800edd8:	685b      	ldr	r3, [r3, #4]
 800edda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eddc:	8909      	ldrh	r1, [r1, #8]
 800edde:	440b      	add	r3, r1
 800ede0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	da9a      	bge.n	800ed1c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ede6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d059      	beq.n	800eea0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800edec:	4b88      	ldr	r3, [pc, #544]	; (800f010 <tcp_receive+0xb04>)
 800edee:	881b      	ldrh	r3, [r3, #0]
 800edf0:	461a      	mov	r2, r3
 800edf2:	4b88      	ldr	r3, [pc, #544]	; (800f014 <tcp_receive+0xb08>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	441a      	add	r2, r3
 800edf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edfa:	68db      	ldr	r3, [r3, #12]
 800edfc:	685b      	ldr	r3, [r3, #4]
 800edfe:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	dd4d      	ble.n	800eea0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ee04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee06:	68db      	ldr	r3, [r3, #12]
 800ee08:	685b      	ldr	r3, [r3, #4]
 800ee0a:	b29a      	uxth	r2, r3
 800ee0c:	4b81      	ldr	r3, [pc, #516]	; (800f014 <tcp_receive+0xb08>)
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	b29b      	uxth	r3, r3
 800ee12:	1ad3      	subs	r3, r2, r3
 800ee14:	b29a      	uxth	r2, r3
 800ee16:	4b80      	ldr	r3, [pc, #512]	; (800f018 <tcp_receive+0xb0c>)
 800ee18:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ee1a:	4b7f      	ldr	r3, [pc, #508]	; (800f018 <tcp_receive+0xb0c>)
 800ee1c:	68db      	ldr	r3, [r3, #12]
 800ee1e:	899b      	ldrh	r3, [r3, #12]
 800ee20:	b29b      	uxth	r3, r3
 800ee22:	4618      	mov	r0, r3
 800ee24:	f7fa ffef 	bl	8009e06 <lwip_htons>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	b2db      	uxtb	r3, r3
 800ee2c:	f003 0302 	and.w	r3, r3, #2
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d005      	beq.n	800ee40 <tcp_receive+0x934>
                inseg.len -= 1;
 800ee34:	4b78      	ldr	r3, [pc, #480]	; (800f018 <tcp_receive+0xb0c>)
 800ee36:	891b      	ldrh	r3, [r3, #8]
 800ee38:	3b01      	subs	r3, #1
 800ee3a:	b29a      	uxth	r2, r3
 800ee3c:	4b76      	ldr	r3, [pc, #472]	; (800f018 <tcp_receive+0xb0c>)
 800ee3e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ee40:	4b75      	ldr	r3, [pc, #468]	; (800f018 <tcp_receive+0xb0c>)
 800ee42:	685a      	ldr	r2, [r3, #4]
 800ee44:	4b74      	ldr	r3, [pc, #464]	; (800f018 <tcp_receive+0xb0c>)
 800ee46:	891b      	ldrh	r3, [r3, #8]
 800ee48:	4619      	mov	r1, r3
 800ee4a:	4610      	mov	r0, r2
 800ee4c:	f7fc f8f6 	bl	800b03c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ee50:	4b71      	ldr	r3, [pc, #452]	; (800f018 <tcp_receive+0xb0c>)
 800ee52:	891c      	ldrh	r4, [r3, #8]
 800ee54:	4b70      	ldr	r3, [pc, #448]	; (800f018 <tcp_receive+0xb0c>)
 800ee56:	68db      	ldr	r3, [r3, #12]
 800ee58:	899b      	ldrh	r3, [r3, #12]
 800ee5a:	b29b      	uxth	r3, r3
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f7fa ffd2 	bl	8009e06 <lwip_htons>
 800ee62:	4603      	mov	r3, r0
 800ee64:	b2db      	uxtb	r3, r3
 800ee66:	f003 0303 	and.w	r3, r3, #3
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d001      	beq.n	800ee72 <tcp_receive+0x966>
 800ee6e:	2301      	movs	r3, #1
 800ee70:	e000      	b.n	800ee74 <tcp_receive+0x968>
 800ee72:	2300      	movs	r3, #0
 800ee74:	4423      	add	r3, r4
 800ee76:	b29a      	uxth	r2, r3
 800ee78:	4b65      	ldr	r3, [pc, #404]	; (800f010 <tcp_receive+0xb04>)
 800ee7a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ee7c:	4b64      	ldr	r3, [pc, #400]	; (800f010 <tcp_receive+0xb04>)
 800ee7e:	881b      	ldrh	r3, [r3, #0]
 800ee80:	461a      	mov	r2, r3
 800ee82:	4b64      	ldr	r3, [pc, #400]	; (800f014 <tcp_receive+0xb08>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	441a      	add	r2, r3
 800ee88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee8a:	68db      	ldr	r3, [r3, #12]
 800ee8c:	685b      	ldr	r3, [r3, #4]
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	d006      	beq.n	800eea0 <tcp_receive+0x994>
 800ee92:	4b62      	ldr	r3, [pc, #392]	; (800f01c <tcp_receive+0xb10>)
 800ee94:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800ee98:	4961      	ldr	r1, [pc, #388]	; (800f020 <tcp_receive+0xb14>)
 800ee9a:	4862      	ldr	r0, [pc, #392]	; (800f024 <tcp_receive+0xb18>)
 800ee9c:	f006 feda 	bl	8015c54 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eea4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800eea6:	4b5a      	ldr	r3, [pc, #360]	; (800f010 <tcp_receive+0xb04>)
 800eea8:	881b      	ldrh	r3, [r3, #0]
 800eeaa:	461a      	mov	r2, r3
 800eeac:	4b59      	ldr	r3, [pc, #356]	; (800f014 <tcp_receive+0xb08>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	441a      	add	r2, r3
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eeba:	4b55      	ldr	r3, [pc, #340]	; (800f010 <tcp_receive+0xb04>)
 800eebc:	881b      	ldrh	r3, [r3, #0]
 800eebe:	429a      	cmp	r2, r3
 800eec0:	d206      	bcs.n	800eed0 <tcp_receive+0x9c4>
 800eec2:	4b56      	ldr	r3, [pc, #344]	; (800f01c <tcp_receive+0xb10>)
 800eec4:	f240 6207 	movw	r2, #1543	; 0x607
 800eec8:	4957      	ldr	r1, [pc, #348]	; (800f028 <tcp_receive+0xb1c>)
 800eeca:	4856      	ldr	r0, [pc, #344]	; (800f024 <tcp_receive+0xb18>)
 800eecc:	f006 fec2 	bl	8015c54 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eed4:	4b4e      	ldr	r3, [pc, #312]	; (800f010 <tcp_receive+0xb04>)
 800eed6:	881b      	ldrh	r3, [r3, #0]
 800eed8:	1ad3      	subs	r3, r2, r3
 800eeda:	b29a      	uxth	r2, r3
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800eee0:	6878      	ldr	r0, [r7, #4]
 800eee2:	f7fc ffcd 	bl	800be80 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800eee6:	4b4c      	ldr	r3, [pc, #304]	; (800f018 <tcp_receive+0xb0c>)
 800eee8:	685b      	ldr	r3, [r3, #4]
 800eeea:	891b      	ldrh	r3, [r3, #8]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d006      	beq.n	800eefe <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800eef0:	4b49      	ldr	r3, [pc, #292]	; (800f018 <tcp_receive+0xb0c>)
 800eef2:	685b      	ldr	r3, [r3, #4]
 800eef4:	4a4d      	ldr	r2, [pc, #308]	; (800f02c <tcp_receive+0xb20>)
 800eef6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800eef8:	4b47      	ldr	r3, [pc, #284]	; (800f018 <tcp_receive+0xb0c>)
 800eefa:	2200      	movs	r2, #0
 800eefc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800eefe:	4b46      	ldr	r3, [pc, #280]	; (800f018 <tcp_receive+0xb0c>)
 800ef00:	68db      	ldr	r3, [r3, #12]
 800ef02:	899b      	ldrh	r3, [r3, #12]
 800ef04:	b29b      	uxth	r3, r3
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7fa ff7d 	bl	8009e06 <lwip_htons>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	b2db      	uxtb	r3, r3
 800ef10:	f003 0301 	and.w	r3, r3, #1
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	f000 80b8 	beq.w	800f08a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800ef1a:	4b45      	ldr	r3, [pc, #276]	; (800f030 <tcp_receive+0xb24>)
 800ef1c:	781b      	ldrb	r3, [r3, #0]
 800ef1e:	f043 0320 	orr.w	r3, r3, #32
 800ef22:	b2da      	uxtb	r2, r3
 800ef24:	4b42      	ldr	r3, [pc, #264]	; (800f030 <tcp_receive+0xb24>)
 800ef26:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ef28:	e0af      	b.n	800f08a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef2e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef34:	68db      	ldr	r3, [r3, #12]
 800ef36:	685b      	ldr	r3, [r3, #4]
 800ef38:	4a36      	ldr	r2, [pc, #216]	; (800f014 <tcp_receive+0xb08>)
 800ef3a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	891b      	ldrh	r3, [r3, #8]
 800ef40:	461c      	mov	r4, r3
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	68db      	ldr	r3, [r3, #12]
 800ef46:	899b      	ldrh	r3, [r3, #12]
 800ef48:	b29b      	uxth	r3, r3
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	f7fa ff5b 	bl	8009e06 <lwip_htons>
 800ef50:	4603      	mov	r3, r0
 800ef52:	b2db      	uxtb	r3, r3
 800ef54:	f003 0303 	and.w	r3, r3, #3
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d001      	beq.n	800ef60 <tcp_receive+0xa54>
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	e000      	b.n	800ef62 <tcp_receive+0xa56>
 800ef60:	2300      	movs	r3, #0
 800ef62:	191a      	adds	r2, r3, r4
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef68:	441a      	add	r2, r3
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ef72:	461c      	mov	r4, r3
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	891b      	ldrh	r3, [r3, #8]
 800ef78:	461d      	mov	r5, r3
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	68db      	ldr	r3, [r3, #12]
 800ef7e:	899b      	ldrh	r3, [r3, #12]
 800ef80:	b29b      	uxth	r3, r3
 800ef82:	4618      	mov	r0, r3
 800ef84:	f7fa ff3f 	bl	8009e06 <lwip_htons>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	b2db      	uxtb	r3, r3
 800ef8c:	f003 0303 	and.w	r3, r3, #3
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d001      	beq.n	800ef98 <tcp_receive+0xa8c>
 800ef94:	2301      	movs	r3, #1
 800ef96:	e000      	b.n	800ef9a <tcp_receive+0xa8e>
 800ef98:	2300      	movs	r3, #0
 800ef9a:	442b      	add	r3, r5
 800ef9c:	429c      	cmp	r4, r3
 800ef9e:	d206      	bcs.n	800efae <tcp_receive+0xaa2>
 800efa0:	4b1e      	ldr	r3, [pc, #120]	; (800f01c <tcp_receive+0xb10>)
 800efa2:	f240 622c 	movw	r2, #1580	; 0x62c
 800efa6:	4923      	ldr	r1, [pc, #140]	; (800f034 <tcp_receive+0xb28>)
 800efa8:	481e      	ldr	r0, [pc, #120]	; (800f024 <tcp_receive+0xb18>)
 800efaa:	f006 fe53 	bl	8015c54 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800efae:	68bb      	ldr	r3, [r7, #8]
 800efb0:	891b      	ldrh	r3, [r3, #8]
 800efb2:	461c      	mov	r4, r3
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	68db      	ldr	r3, [r3, #12]
 800efb8:	899b      	ldrh	r3, [r3, #12]
 800efba:	b29b      	uxth	r3, r3
 800efbc:	4618      	mov	r0, r3
 800efbe:	f7fa ff22 	bl	8009e06 <lwip_htons>
 800efc2:	4603      	mov	r3, r0
 800efc4:	b2db      	uxtb	r3, r3
 800efc6:	f003 0303 	and.w	r3, r3, #3
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d001      	beq.n	800efd2 <tcp_receive+0xac6>
 800efce:	2301      	movs	r3, #1
 800efd0:	e000      	b.n	800efd4 <tcp_receive+0xac8>
 800efd2:	2300      	movs	r3, #0
 800efd4:	1919      	adds	r1, r3, r4
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800efda:	b28b      	uxth	r3, r1
 800efdc:	1ad3      	subs	r3, r2, r3
 800efde:	b29a      	uxth	r2, r3
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800efe4:	6878      	ldr	r0, [r7, #4]
 800efe6:	f7fc ff4b 	bl	800be80 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	685b      	ldr	r3, [r3, #4]
 800efee:	891b      	ldrh	r3, [r3, #8]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d028      	beq.n	800f046 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800eff4:	4b0d      	ldr	r3, [pc, #52]	; (800f02c <tcp_receive+0xb20>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d01d      	beq.n	800f038 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800effc:	4b0b      	ldr	r3, [pc, #44]	; (800f02c <tcp_receive+0xb20>)
 800effe:	681a      	ldr	r2, [r3, #0]
 800f000:	68bb      	ldr	r3, [r7, #8]
 800f002:	685b      	ldr	r3, [r3, #4]
 800f004:	4619      	mov	r1, r3
 800f006:	4610      	mov	r0, r2
 800f008:	f7fc fa60 	bl	800b4cc <pbuf_cat>
 800f00c:	e018      	b.n	800f040 <tcp_receive+0xb34>
 800f00e:	bf00      	nop
 800f010:	2000047e 	.word	0x2000047e
 800f014:	20000474 	.word	0x20000474
 800f018:	20000454 	.word	0x20000454
 800f01c:	08017c38 	.word	0x08017c38
 800f020:	08018018 	.word	0x08018018
 800f024:	08017c84 	.word	0x08017c84
 800f028:	08018054 	.word	0x08018054
 800f02c:	20000484 	.word	0x20000484
 800f030:	20000481 	.word	0x20000481
 800f034:	08018074 	.word	0x08018074
            } else {
              recv_data = cseg->p;
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	685b      	ldr	r3, [r3, #4]
 800f03c:	4a70      	ldr	r2, [pc, #448]	; (800f200 <tcp_receive+0xcf4>)
 800f03e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	2200      	movs	r2, #0
 800f044:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f046:	68bb      	ldr	r3, [r7, #8]
 800f048:	68db      	ldr	r3, [r3, #12]
 800f04a:	899b      	ldrh	r3, [r3, #12]
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	4618      	mov	r0, r3
 800f050:	f7fa fed9 	bl	8009e06 <lwip_htons>
 800f054:	4603      	mov	r3, r0
 800f056:	b2db      	uxtb	r3, r3
 800f058:	f003 0301 	and.w	r3, r3, #1
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d00d      	beq.n	800f07c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f060:	4b68      	ldr	r3, [pc, #416]	; (800f204 <tcp_receive+0xcf8>)
 800f062:	781b      	ldrb	r3, [r3, #0]
 800f064:	f043 0320 	orr.w	r3, r3, #32
 800f068:	b2da      	uxtb	r2, r3
 800f06a:	4b66      	ldr	r3, [pc, #408]	; (800f204 <tcp_receive+0xcf8>)
 800f06c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	7d1b      	ldrb	r3, [r3, #20]
 800f072:	2b04      	cmp	r3, #4
 800f074:	d102      	bne.n	800f07c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	2207      	movs	r2, #7
 800f07a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f07c:	68bb      	ldr	r3, [r7, #8]
 800f07e:	681a      	ldr	r2, [r3, #0]
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f084:	68b8      	ldr	r0, [r7, #8]
 800f086:	f7fd fbd7 	bl	800c838 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d008      	beq.n	800f0a4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f096:	68db      	ldr	r3, [r3, #12]
 800f098:	685a      	ldr	r2, [r3, #4]
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	f43f af43 	beq.w	800ef2a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	8b5b      	ldrh	r3, [r3, #26]
 800f0a8:	f003 0301 	and.w	r3, r3, #1
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d00e      	beq.n	800f0ce <tcp_receive+0xbc2>
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	8b5b      	ldrh	r3, [r3, #26]
 800f0b4:	f023 0301 	bic.w	r3, r3, #1
 800f0b8:	b29a      	uxth	r2, r3
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	835a      	strh	r2, [r3, #26]
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	8b5b      	ldrh	r3, [r3, #26]
 800f0c2:	f043 0302 	orr.w	r3, r3, #2
 800f0c6:	b29a      	uxth	r2, r3
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f0cc:	e188      	b.n	800f3e0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	8b5b      	ldrh	r3, [r3, #26]
 800f0d2:	f043 0301 	orr.w	r3, r3, #1
 800f0d6:	b29a      	uxth	r2, r3
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f0dc:	e180      	b.n	800f3e0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d106      	bne.n	800f0f4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f0e6:	4848      	ldr	r0, [pc, #288]	; (800f208 <tcp_receive+0xcfc>)
 800f0e8:	f7fd fbbe 	bl	800c868 <tcp_seg_copy>
 800f0ec:	4602      	mov	r2, r0
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	675a      	str	r2, [r3, #116]	; 0x74
 800f0f2:	e16d      	b.n	800f3d0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0fc:	63bb      	str	r3, [r7, #56]	; 0x38
 800f0fe:	e157      	b.n	800f3b0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800f100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f102:	68db      	ldr	r3, [r3, #12]
 800f104:	685a      	ldr	r2, [r3, #4]
 800f106:	4b41      	ldr	r3, [pc, #260]	; (800f20c <tcp_receive+0xd00>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d11d      	bne.n	800f14a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f10e:	4b3e      	ldr	r3, [pc, #248]	; (800f208 <tcp_receive+0xcfc>)
 800f110:	891a      	ldrh	r2, [r3, #8]
 800f112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f114:	891b      	ldrh	r3, [r3, #8]
 800f116:	429a      	cmp	r2, r3
 800f118:	f240 814f 	bls.w	800f3ba <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f11c:	483a      	ldr	r0, [pc, #232]	; (800f208 <tcp_receive+0xcfc>)
 800f11e:	f7fd fba3 	bl	800c868 <tcp_seg_copy>
 800f122:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	2b00      	cmp	r3, #0
 800f128:	f000 8149 	beq.w	800f3be <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800f12c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d003      	beq.n	800f13a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f134:	697a      	ldr	r2, [r7, #20]
 800f136:	601a      	str	r2, [r3, #0]
 800f138:	e002      	b.n	800f140 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	697a      	ldr	r2, [r7, #20]
 800f13e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f140:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f142:	6978      	ldr	r0, [r7, #20]
 800f144:	f7ff f8de 	bl	800e304 <tcp_oos_insert_segment>
                }
                break;
 800f148:	e139      	b.n	800f3be <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d117      	bne.n	800f180 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f150:	4b2e      	ldr	r3, [pc, #184]	; (800f20c <tcp_receive+0xd00>)
 800f152:	681a      	ldr	r2, [r3, #0]
 800f154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f156:	68db      	ldr	r3, [r3, #12]
 800f158:	685b      	ldr	r3, [r3, #4]
 800f15a:	1ad3      	subs	r3, r2, r3
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	da57      	bge.n	800f210 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f160:	4829      	ldr	r0, [pc, #164]	; (800f208 <tcp_receive+0xcfc>)
 800f162:	f7fd fb81 	bl	800c868 <tcp_seg_copy>
 800f166:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f168:	69bb      	ldr	r3, [r7, #24]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	f000 8129 	beq.w	800f3c2 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	69ba      	ldr	r2, [r7, #24]
 800f174:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f176:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f178:	69b8      	ldr	r0, [r7, #24]
 800f17a:	f7ff f8c3 	bl	800e304 <tcp_oos_insert_segment>
                  }
                  break;
 800f17e:	e120      	b.n	800f3c2 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f180:	4b22      	ldr	r3, [pc, #136]	; (800f20c <tcp_receive+0xd00>)
 800f182:	681a      	ldr	r2, [r3, #0]
 800f184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f186:	68db      	ldr	r3, [r3, #12]
 800f188:	685b      	ldr	r3, [r3, #4]
 800f18a:	1ad3      	subs	r3, r2, r3
 800f18c:	3b01      	subs	r3, #1
 800f18e:	2b00      	cmp	r3, #0
 800f190:	db3e      	blt.n	800f210 <tcp_receive+0xd04>
 800f192:	4b1e      	ldr	r3, [pc, #120]	; (800f20c <tcp_receive+0xd00>)
 800f194:	681a      	ldr	r2, [r3, #0]
 800f196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f198:	68db      	ldr	r3, [r3, #12]
 800f19a:	685b      	ldr	r3, [r3, #4]
 800f19c:	1ad3      	subs	r3, r2, r3
 800f19e:	3301      	adds	r3, #1
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	dc35      	bgt.n	800f210 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f1a4:	4818      	ldr	r0, [pc, #96]	; (800f208 <tcp_receive+0xcfc>)
 800f1a6:	f7fd fb5f 	bl	800c868 <tcp_seg_copy>
 800f1aa:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f1ac:	69fb      	ldr	r3, [r7, #28]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	f000 8109 	beq.w	800f3c6 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1b6:	68db      	ldr	r3, [r3, #12]
 800f1b8:	685b      	ldr	r3, [r3, #4]
 800f1ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1bc:	8912      	ldrh	r2, [r2, #8]
 800f1be:	441a      	add	r2, r3
 800f1c0:	4b12      	ldr	r3, [pc, #72]	; (800f20c <tcp_receive+0xd00>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	1ad3      	subs	r3, r2, r3
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	dd12      	ble.n	800f1f0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f1ca:	4b10      	ldr	r3, [pc, #64]	; (800f20c <tcp_receive+0xd00>)
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	b29a      	uxth	r2, r3
 800f1d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1d2:	68db      	ldr	r3, [r3, #12]
 800f1d4:	685b      	ldr	r3, [r3, #4]
 800f1d6:	b29b      	uxth	r3, r3
 800f1d8:	1ad3      	subs	r3, r2, r3
 800f1da:	b29a      	uxth	r2, r3
 800f1dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1de:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f1e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1e2:	685a      	ldr	r2, [r3, #4]
 800f1e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1e6:	891b      	ldrh	r3, [r3, #8]
 800f1e8:	4619      	mov	r1, r3
 800f1ea:	4610      	mov	r0, r2
 800f1ec:	f7fb ff26 	bl	800b03c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f1f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1f2:	69fa      	ldr	r2, [r7, #28]
 800f1f4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f1f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f1f8:	69f8      	ldr	r0, [r7, #28]
 800f1fa:	f7ff f883 	bl	800e304 <tcp_oos_insert_segment>
                  }
                  break;
 800f1fe:	e0e2      	b.n	800f3c6 <tcp_receive+0xeba>
 800f200:	20000484 	.word	0x20000484
 800f204:	20000481 	.word	0x20000481
 800f208:	20000454 	.word	0x20000454
 800f20c:	20000474 	.word	0x20000474
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f212:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	f040 80c6 	bne.w	800f3aa <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f21e:	4b80      	ldr	r3, [pc, #512]	; (800f420 <tcp_receive+0xf14>)
 800f220:	681a      	ldr	r2, [r3, #0]
 800f222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f224:	68db      	ldr	r3, [r3, #12]
 800f226:	685b      	ldr	r3, [r3, #4]
 800f228:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	f340 80bd 	ble.w	800f3aa <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f232:	68db      	ldr	r3, [r3, #12]
 800f234:	899b      	ldrh	r3, [r3, #12]
 800f236:	b29b      	uxth	r3, r3
 800f238:	4618      	mov	r0, r3
 800f23a:	f7fa fde4 	bl	8009e06 <lwip_htons>
 800f23e:	4603      	mov	r3, r0
 800f240:	b2db      	uxtb	r3, r3
 800f242:	f003 0301 	and.w	r3, r3, #1
 800f246:	2b00      	cmp	r3, #0
 800f248:	f040 80bf 	bne.w	800f3ca <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f24c:	4875      	ldr	r0, [pc, #468]	; (800f424 <tcp_receive+0xf18>)
 800f24e:	f7fd fb0b 	bl	800c868 <tcp_seg_copy>
 800f252:	4602      	mov	r2, r0
 800f254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f256:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	f000 80b6 	beq.w	800f3ce <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f264:	68db      	ldr	r3, [r3, #12]
 800f266:	685b      	ldr	r3, [r3, #4]
 800f268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f26a:	8912      	ldrh	r2, [r2, #8]
 800f26c:	441a      	add	r2, r3
 800f26e:	4b6c      	ldr	r3, [pc, #432]	; (800f420 <tcp_receive+0xf14>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	1ad3      	subs	r3, r2, r3
 800f274:	2b00      	cmp	r3, #0
 800f276:	dd12      	ble.n	800f29e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f278:	4b69      	ldr	r3, [pc, #420]	; (800f420 <tcp_receive+0xf14>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	b29a      	uxth	r2, r3
 800f27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f280:	68db      	ldr	r3, [r3, #12]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	b29b      	uxth	r3, r3
 800f286:	1ad3      	subs	r3, r2, r3
 800f288:	b29a      	uxth	r2, r3
 800f28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f28c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f290:	685a      	ldr	r2, [r3, #4]
 800f292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f294:	891b      	ldrh	r3, [r3, #8]
 800f296:	4619      	mov	r1, r3
 800f298:	4610      	mov	r0, r2
 800f29a:	f7fb fecf 	bl	800b03c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f29e:	4b62      	ldr	r3, [pc, #392]	; (800f428 <tcp_receive+0xf1c>)
 800f2a0:	881b      	ldrh	r3, [r3, #0]
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	4b5e      	ldr	r3, [pc, #376]	; (800f420 <tcp_receive+0xf14>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	441a      	add	r2, r3
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2ae:	6879      	ldr	r1, [r7, #4]
 800f2b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f2b2:	440b      	add	r3, r1
 800f2b4:	1ad3      	subs	r3, r2, r3
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	f340 8089 	ble.w	800f3ce <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	68db      	ldr	r3, [r3, #12]
 800f2c2:	899b      	ldrh	r3, [r3, #12]
 800f2c4:	b29b      	uxth	r3, r3
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7fa fd9d 	bl	8009e06 <lwip_htons>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	b2db      	uxtb	r3, r3
 800f2d0:	f003 0301 	and.w	r3, r3, #1
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d022      	beq.n	800f31e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	68db      	ldr	r3, [r3, #12]
 800f2de:	899b      	ldrh	r3, [r3, #12]
 800f2e0:	b29b      	uxth	r3, r3
 800f2e2:	b21b      	sxth	r3, r3
 800f2e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f2e8:	b21c      	sxth	r4, r3
 800f2ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	68db      	ldr	r3, [r3, #12]
 800f2f0:	899b      	ldrh	r3, [r3, #12]
 800f2f2:	b29b      	uxth	r3, r3
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f7fa fd86 	bl	8009e06 <lwip_htons>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	b2db      	uxtb	r3, r3
 800f2fe:	b29b      	uxth	r3, r3
 800f300:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f304:	b29b      	uxth	r3, r3
 800f306:	4618      	mov	r0, r3
 800f308:	f7fa fd7d 	bl	8009e06 <lwip_htons>
 800f30c:	4603      	mov	r3, r0
 800f30e:	b21b      	sxth	r3, r3
 800f310:	4323      	orrs	r3, r4
 800f312:	b21a      	sxth	r2, r3
 800f314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	68db      	ldr	r3, [r3, #12]
 800f31a:	b292      	uxth	r2, r2
 800f31c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f322:	b29a      	uxth	r2, r3
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f328:	4413      	add	r3, r2
 800f32a:	b299      	uxth	r1, r3
 800f32c:	4b3c      	ldr	r3, [pc, #240]	; (800f420 <tcp_receive+0xf14>)
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	b29a      	uxth	r2, r3
 800f332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	1a8a      	subs	r2, r1, r2
 800f338:	b292      	uxth	r2, r2
 800f33a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	685a      	ldr	r2, [r3, #4]
 800f342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	891b      	ldrh	r3, [r3, #8]
 800f348:	4619      	mov	r1, r3
 800f34a:	4610      	mov	r0, r2
 800f34c:	f7fb fe76 	bl	800b03c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	891c      	ldrh	r4, [r3, #8]
 800f356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	68db      	ldr	r3, [r3, #12]
 800f35c:	899b      	ldrh	r3, [r3, #12]
 800f35e:	b29b      	uxth	r3, r3
 800f360:	4618      	mov	r0, r3
 800f362:	f7fa fd50 	bl	8009e06 <lwip_htons>
 800f366:	4603      	mov	r3, r0
 800f368:	b2db      	uxtb	r3, r3
 800f36a:	f003 0303 	and.w	r3, r3, #3
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d001      	beq.n	800f376 <tcp_receive+0xe6a>
 800f372:	2301      	movs	r3, #1
 800f374:	e000      	b.n	800f378 <tcp_receive+0xe6c>
 800f376:	2300      	movs	r3, #0
 800f378:	4423      	add	r3, r4
 800f37a:	b29a      	uxth	r2, r3
 800f37c:	4b2a      	ldr	r3, [pc, #168]	; (800f428 <tcp_receive+0xf1c>)
 800f37e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f380:	4b29      	ldr	r3, [pc, #164]	; (800f428 <tcp_receive+0xf1c>)
 800f382:	881b      	ldrh	r3, [r3, #0]
 800f384:	461a      	mov	r2, r3
 800f386:	4b26      	ldr	r3, [pc, #152]	; (800f420 <tcp_receive+0xf14>)
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	441a      	add	r2, r3
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f390:	6879      	ldr	r1, [r7, #4]
 800f392:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f394:	440b      	add	r3, r1
 800f396:	429a      	cmp	r2, r3
 800f398:	d019      	beq.n	800f3ce <tcp_receive+0xec2>
 800f39a:	4b24      	ldr	r3, [pc, #144]	; (800f42c <tcp_receive+0xf20>)
 800f39c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800f3a0:	4923      	ldr	r1, [pc, #140]	; (800f430 <tcp_receive+0xf24>)
 800f3a2:	4824      	ldr	r0, [pc, #144]	; (800f434 <tcp_receive+0xf28>)
 800f3a4:	f006 fc56 	bl	8015c54 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f3a8:	e011      	b.n	800f3ce <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800f3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	f47f aea4 	bne.w	800f100 <tcp_receive+0xbf4>
 800f3b8:	e00a      	b.n	800f3d0 <tcp_receive+0xec4>
                break;
 800f3ba:	bf00      	nop
 800f3bc:	e008      	b.n	800f3d0 <tcp_receive+0xec4>
                break;
 800f3be:	bf00      	nop
 800f3c0:	e006      	b.n	800f3d0 <tcp_receive+0xec4>
                  break;
 800f3c2:	bf00      	nop
 800f3c4:	e004      	b.n	800f3d0 <tcp_receive+0xec4>
                  break;
 800f3c6:	bf00      	nop
 800f3c8:	e002      	b.n	800f3d0 <tcp_receive+0xec4>
                  break;
 800f3ca:	bf00      	nop
 800f3cc:	e000      	b.n	800f3d0 <tcp_receive+0xec4>
                break;
 800f3ce:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f001 fa41 	bl	8010858 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f3d6:	e003      	b.n	800f3e0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f001 fa3d 	bl	8010858 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f3de:	e01a      	b.n	800f416 <tcp_receive+0xf0a>
 800f3e0:	e019      	b.n	800f416 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f3e2:	4b0f      	ldr	r3, [pc, #60]	; (800f420 <tcp_receive+0xf14>)
 800f3e4:	681a      	ldr	r2, [r3, #0]
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ea:	1ad3      	subs	r3, r2, r3
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	db0a      	blt.n	800f406 <tcp_receive+0xefa>
 800f3f0:	4b0b      	ldr	r3, [pc, #44]	; (800f420 <tcp_receive+0xf14>)
 800f3f2:	681a      	ldr	r2, [r3, #0]
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3f8:	6879      	ldr	r1, [r7, #4]
 800f3fa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f3fc:	440b      	add	r3, r1
 800f3fe:	1ad3      	subs	r3, r2, r3
 800f400:	3301      	adds	r3, #1
 800f402:	2b00      	cmp	r3, #0
 800f404:	dd07      	ble.n	800f416 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	8b5b      	ldrh	r3, [r3, #26]
 800f40a:	f043 0302 	orr.w	r3, r3, #2
 800f40e:	b29a      	uxth	r2, r3
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f414:	e7ff      	b.n	800f416 <tcp_receive+0xf0a>
 800f416:	bf00      	nop
 800f418:	3750      	adds	r7, #80	; 0x50
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bdb0      	pop	{r4, r5, r7, pc}
 800f41e:	bf00      	nop
 800f420:	20000474 	.word	0x20000474
 800f424:	20000454 	.word	0x20000454
 800f428:	2000047e 	.word	0x2000047e
 800f42c:	08017c38 	.word	0x08017c38
 800f430:	08017fe0 	.word	0x08017fe0
 800f434:	08017c84 	.word	0x08017c84

0800f438 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f438:	b480      	push	{r7}
 800f43a:	b083      	sub	sp, #12
 800f43c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f43e:	4b15      	ldr	r3, [pc, #84]	; (800f494 <tcp_get_next_optbyte+0x5c>)
 800f440:	881b      	ldrh	r3, [r3, #0]
 800f442:	1c5a      	adds	r2, r3, #1
 800f444:	b291      	uxth	r1, r2
 800f446:	4a13      	ldr	r2, [pc, #76]	; (800f494 <tcp_get_next_optbyte+0x5c>)
 800f448:	8011      	strh	r1, [r2, #0]
 800f44a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f44c:	4b12      	ldr	r3, [pc, #72]	; (800f498 <tcp_get_next_optbyte+0x60>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d004      	beq.n	800f45e <tcp_get_next_optbyte+0x26>
 800f454:	4b11      	ldr	r3, [pc, #68]	; (800f49c <tcp_get_next_optbyte+0x64>)
 800f456:	881b      	ldrh	r3, [r3, #0]
 800f458:	88fa      	ldrh	r2, [r7, #6]
 800f45a:	429a      	cmp	r2, r3
 800f45c:	d208      	bcs.n	800f470 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f45e:	4b10      	ldr	r3, [pc, #64]	; (800f4a0 <tcp_get_next_optbyte+0x68>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	3314      	adds	r3, #20
 800f464:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f466:	88fb      	ldrh	r3, [r7, #6]
 800f468:	683a      	ldr	r2, [r7, #0]
 800f46a:	4413      	add	r3, r2
 800f46c:	781b      	ldrb	r3, [r3, #0]
 800f46e:	e00b      	b.n	800f488 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f470:	88fb      	ldrh	r3, [r7, #6]
 800f472:	b2da      	uxtb	r2, r3
 800f474:	4b09      	ldr	r3, [pc, #36]	; (800f49c <tcp_get_next_optbyte+0x64>)
 800f476:	881b      	ldrh	r3, [r3, #0]
 800f478:	b2db      	uxtb	r3, r3
 800f47a:	1ad3      	subs	r3, r2, r3
 800f47c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f47e:	4b06      	ldr	r3, [pc, #24]	; (800f498 <tcp_get_next_optbyte+0x60>)
 800f480:	681a      	ldr	r2, [r3, #0]
 800f482:	797b      	ldrb	r3, [r7, #5]
 800f484:	4413      	add	r3, r2
 800f486:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f488:	4618      	mov	r0, r3
 800f48a:	370c      	adds	r7, #12
 800f48c:	46bd      	mov	sp, r7
 800f48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f492:	4770      	bx	lr
 800f494:	20000470 	.word	0x20000470
 800f498:	2000046c 	.word	0x2000046c
 800f49c:	2000046a 	.word	0x2000046a
 800f4a0:	20000464 	.word	0x20000464

0800f4a4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b084      	sub	sp, #16
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d106      	bne.n	800f4c0 <tcp_parseopt+0x1c>
 800f4b2:	4b31      	ldr	r3, [pc, #196]	; (800f578 <tcp_parseopt+0xd4>)
 800f4b4:	f240 727d 	movw	r2, #1917	; 0x77d
 800f4b8:	4930      	ldr	r1, [pc, #192]	; (800f57c <tcp_parseopt+0xd8>)
 800f4ba:	4831      	ldr	r0, [pc, #196]	; (800f580 <tcp_parseopt+0xdc>)
 800f4bc:	f006 fbca 	bl	8015c54 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f4c0:	4b30      	ldr	r3, [pc, #192]	; (800f584 <tcp_parseopt+0xe0>)
 800f4c2:	881b      	ldrh	r3, [r3, #0]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d053      	beq.n	800f570 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f4c8:	4b2f      	ldr	r3, [pc, #188]	; (800f588 <tcp_parseopt+0xe4>)
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	801a      	strh	r2, [r3, #0]
 800f4ce:	e043      	b.n	800f558 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800f4d0:	f7ff ffb2 	bl	800f438 <tcp_get_next_optbyte>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f4d8:	7bfb      	ldrb	r3, [r7, #15]
 800f4da:	2b01      	cmp	r3, #1
 800f4dc:	d03c      	beq.n	800f558 <tcp_parseopt+0xb4>
 800f4de:	2b02      	cmp	r3, #2
 800f4e0:	d002      	beq.n	800f4e8 <tcp_parseopt+0x44>
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d03f      	beq.n	800f566 <tcp_parseopt+0xc2>
 800f4e6:	e026      	b.n	800f536 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f4e8:	f7ff ffa6 	bl	800f438 <tcp_get_next_optbyte>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	2b04      	cmp	r3, #4
 800f4f0:	d13b      	bne.n	800f56a <tcp_parseopt+0xc6>
 800f4f2:	4b25      	ldr	r3, [pc, #148]	; (800f588 <tcp_parseopt+0xe4>)
 800f4f4:	881b      	ldrh	r3, [r3, #0]
 800f4f6:	3302      	adds	r3, #2
 800f4f8:	4a22      	ldr	r2, [pc, #136]	; (800f584 <tcp_parseopt+0xe0>)
 800f4fa:	8812      	ldrh	r2, [r2, #0]
 800f4fc:	4293      	cmp	r3, r2
 800f4fe:	dc34      	bgt.n	800f56a <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f500:	f7ff ff9a 	bl	800f438 <tcp_get_next_optbyte>
 800f504:	4603      	mov	r3, r0
 800f506:	b29b      	uxth	r3, r3
 800f508:	021b      	lsls	r3, r3, #8
 800f50a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f50c:	f7ff ff94 	bl	800f438 <tcp_get_next_optbyte>
 800f510:	4603      	mov	r3, r0
 800f512:	b29a      	uxth	r2, r3
 800f514:	89bb      	ldrh	r3, [r7, #12]
 800f516:	4313      	orrs	r3, r2
 800f518:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f51a:	89bb      	ldrh	r3, [r7, #12]
 800f51c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f520:	d804      	bhi.n	800f52c <tcp_parseopt+0x88>
 800f522:	89bb      	ldrh	r3, [r7, #12]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d001      	beq.n	800f52c <tcp_parseopt+0x88>
 800f528:	89ba      	ldrh	r2, [r7, #12]
 800f52a:	e001      	b.n	800f530 <tcp_parseopt+0x8c>
 800f52c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800f534:	e010      	b.n	800f558 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f536:	f7ff ff7f 	bl	800f438 <tcp_get_next_optbyte>
 800f53a:	4603      	mov	r3, r0
 800f53c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f53e:	7afb      	ldrb	r3, [r7, #11]
 800f540:	2b01      	cmp	r3, #1
 800f542:	d914      	bls.n	800f56e <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f544:	7afb      	ldrb	r3, [r7, #11]
 800f546:	b29a      	uxth	r2, r3
 800f548:	4b0f      	ldr	r3, [pc, #60]	; (800f588 <tcp_parseopt+0xe4>)
 800f54a:	881b      	ldrh	r3, [r3, #0]
 800f54c:	4413      	add	r3, r2
 800f54e:	b29b      	uxth	r3, r3
 800f550:	3b02      	subs	r3, #2
 800f552:	b29a      	uxth	r2, r3
 800f554:	4b0c      	ldr	r3, [pc, #48]	; (800f588 <tcp_parseopt+0xe4>)
 800f556:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f558:	4b0b      	ldr	r3, [pc, #44]	; (800f588 <tcp_parseopt+0xe4>)
 800f55a:	881a      	ldrh	r2, [r3, #0]
 800f55c:	4b09      	ldr	r3, [pc, #36]	; (800f584 <tcp_parseopt+0xe0>)
 800f55e:	881b      	ldrh	r3, [r3, #0]
 800f560:	429a      	cmp	r2, r3
 800f562:	d3b5      	bcc.n	800f4d0 <tcp_parseopt+0x2c>
 800f564:	e004      	b.n	800f570 <tcp_parseopt+0xcc>
          return;
 800f566:	bf00      	nop
 800f568:	e002      	b.n	800f570 <tcp_parseopt+0xcc>
            return;
 800f56a:	bf00      	nop
 800f56c:	e000      	b.n	800f570 <tcp_parseopt+0xcc>
            return;
 800f56e:	bf00      	nop
      }
    }
  }
}
 800f570:	3710      	adds	r7, #16
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}
 800f576:	bf00      	nop
 800f578:	08017c38 	.word	0x08017c38
 800f57c:	0801809c 	.word	0x0801809c
 800f580:	08017c84 	.word	0x08017c84
 800f584:	20000468 	.word	0x20000468
 800f588:	20000470 	.word	0x20000470

0800f58c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f58c:	b480      	push	{r7}
 800f58e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f590:	4b05      	ldr	r3, [pc, #20]	; (800f5a8 <tcp_trigger_input_pcb_close+0x1c>)
 800f592:	781b      	ldrb	r3, [r3, #0]
 800f594:	f043 0310 	orr.w	r3, r3, #16
 800f598:	b2da      	uxtb	r2, r3
 800f59a:	4b03      	ldr	r3, [pc, #12]	; (800f5a8 <tcp_trigger_input_pcb_close+0x1c>)
 800f59c:	701a      	strb	r2, [r3, #0]
}
 800f59e:	bf00      	nop
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a6:	4770      	bx	lr
 800f5a8:	20000481 	.word	0x20000481

0800f5ac <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b084      	sub	sp, #16
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	60f8      	str	r0, [r7, #12]
 800f5b4:	60b9      	str	r1, [r7, #8]
 800f5b6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d00a      	beq.n	800f5d4 <tcp_route+0x28>
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	7a1b      	ldrb	r3, [r3, #8]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d006      	beq.n	800f5d4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	7a1b      	ldrb	r3, [r3, #8]
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f7fb fb60 	bl	800ac90 <netif_get_by_index>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	e003      	b.n	800f5dc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	f005 f841 	bl	801465c <ip4_route>
 800f5da:	4603      	mov	r3, r0
  }
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	3710      	adds	r7, #16
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}

0800f5e4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f5e4:	b590      	push	{r4, r7, lr}
 800f5e6:	b087      	sub	sp, #28
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	60f8      	str	r0, [r7, #12]
 800f5ec:	60b9      	str	r1, [r7, #8]
 800f5ee:	603b      	str	r3, [r7, #0]
 800f5f0:	4613      	mov	r3, r2
 800f5f2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d105      	bne.n	800f606 <tcp_create_segment+0x22>
 800f5fa:	4b44      	ldr	r3, [pc, #272]	; (800f70c <tcp_create_segment+0x128>)
 800f5fc:	22a3      	movs	r2, #163	; 0xa3
 800f5fe:	4944      	ldr	r1, [pc, #272]	; (800f710 <tcp_create_segment+0x12c>)
 800f600:	4844      	ldr	r0, [pc, #272]	; (800f714 <tcp_create_segment+0x130>)
 800f602:	f006 fb27 	bl	8015c54 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f606:	68bb      	ldr	r3, [r7, #8]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d105      	bne.n	800f618 <tcp_create_segment+0x34>
 800f60c:	4b3f      	ldr	r3, [pc, #252]	; (800f70c <tcp_create_segment+0x128>)
 800f60e:	22a4      	movs	r2, #164	; 0xa4
 800f610:	4941      	ldr	r1, [pc, #260]	; (800f718 <tcp_create_segment+0x134>)
 800f612:	4840      	ldr	r0, [pc, #256]	; (800f714 <tcp_create_segment+0x130>)
 800f614:	f006 fb1e 	bl	8015c54 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f618:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f61c:	009b      	lsls	r3, r3, #2
 800f61e:	b2db      	uxtb	r3, r3
 800f620:	f003 0304 	and.w	r3, r3, #4
 800f624:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f626:	2003      	movs	r0, #3
 800f628:	f7fb f842 	bl	800a6b0 <memp_malloc>
 800f62c:	6138      	str	r0, [r7, #16]
 800f62e:	693b      	ldr	r3, [r7, #16]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d104      	bne.n	800f63e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f634:	68b8      	ldr	r0, [r7, #8]
 800f636:	f7fb fe87 	bl	800b348 <pbuf_free>
    return NULL;
 800f63a:	2300      	movs	r3, #0
 800f63c:	e061      	b.n	800f702 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800f63e:	693b      	ldr	r3, [r7, #16]
 800f640:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f644:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f646:	693b      	ldr	r3, [r7, #16]
 800f648:	2200      	movs	r2, #0
 800f64a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f64c:	693b      	ldr	r3, [r7, #16]
 800f64e:	68ba      	ldr	r2, [r7, #8]
 800f650:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	891a      	ldrh	r2, [r3, #8]
 800f656:	7dfb      	ldrb	r3, [r7, #23]
 800f658:	b29b      	uxth	r3, r3
 800f65a:	429a      	cmp	r2, r3
 800f65c:	d205      	bcs.n	800f66a <tcp_create_segment+0x86>
 800f65e:	4b2b      	ldr	r3, [pc, #172]	; (800f70c <tcp_create_segment+0x128>)
 800f660:	22b0      	movs	r2, #176	; 0xb0
 800f662:	492e      	ldr	r1, [pc, #184]	; (800f71c <tcp_create_segment+0x138>)
 800f664:	482b      	ldr	r0, [pc, #172]	; (800f714 <tcp_create_segment+0x130>)
 800f666:	f006 faf5 	bl	8015c54 <iprintf>
  seg->len = p->tot_len - optlen;
 800f66a:	68bb      	ldr	r3, [r7, #8]
 800f66c:	891a      	ldrh	r2, [r3, #8]
 800f66e:	7dfb      	ldrb	r3, [r7, #23]
 800f670:	b29b      	uxth	r3, r3
 800f672:	1ad3      	subs	r3, r2, r3
 800f674:	b29a      	uxth	r2, r3
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f67a:	2114      	movs	r1, #20
 800f67c:	68b8      	ldr	r0, [r7, #8]
 800f67e:	f7fb fdcd 	bl	800b21c <pbuf_add_header>
 800f682:	4603      	mov	r3, r0
 800f684:	2b00      	cmp	r3, #0
 800f686:	d004      	beq.n	800f692 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f688:	6938      	ldr	r0, [r7, #16]
 800f68a:	f7fd f8d5 	bl	800c838 <tcp_seg_free>
    return NULL;
 800f68e:	2300      	movs	r3, #0
 800f690:	e037      	b.n	800f702 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f692:	693b      	ldr	r3, [r7, #16]
 800f694:	685b      	ldr	r3, [r3, #4]
 800f696:	685a      	ldr	r2, [r3, #4]
 800f698:	693b      	ldr	r3, [r7, #16]
 800f69a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	8ada      	ldrh	r2, [r3, #22]
 800f6a0:	693b      	ldr	r3, [r7, #16]
 800f6a2:	68dc      	ldr	r4, [r3, #12]
 800f6a4:	4610      	mov	r0, r2
 800f6a6:	f7fa fbae 	bl	8009e06 <lwip_htons>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	8b1a      	ldrh	r2, [r3, #24]
 800f6b2:	693b      	ldr	r3, [r7, #16]
 800f6b4:	68dc      	ldr	r4, [r3, #12]
 800f6b6:	4610      	mov	r0, r2
 800f6b8:	f7fa fba5 	bl	8009e06 <lwip_htons>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f6c0:	693b      	ldr	r3, [r7, #16]
 800f6c2:	68dc      	ldr	r4, [r3, #12]
 800f6c4:	6838      	ldr	r0, [r7, #0]
 800f6c6:	f7fa fbb3 	bl	8009e30 <lwip_htonl>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f6ce:	7dfb      	ldrb	r3, [r7, #23]
 800f6d0:	089b      	lsrs	r3, r3, #2
 800f6d2:	b2db      	uxtb	r3, r3
 800f6d4:	b29b      	uxth	r3, r3
 800f6d6:	3305      	adds	r3, #5
 800f6d8:	b29b      	uxth	r3, r3
 800f6da:	031b      	lsls	r3, r3, #12
 800f6dc:	b29a      	uxth	r2, r3
 800f6de:	79fb      	ldrb	r3, [r7, #7]
 800f6e0:	b29b      	uxth	r3, r3
 800f6e2:	4313      	orrs	r3, r2
 800f6e4:	b29a      	uxth	r2, r3
 800f6e6:	693b      	ldr	r3, [r7, #16]
 800f6e8:	68dc      	ldr	r4, [r3, #12]
 800f6ea:	4610      	mov	r0, r2
 800f6ec:	f7fa fb8b 	bl	8009e06 <lwip_htons>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f6f4:	693b      	ldr	r3, [r7, #16]
 800f6f6:	68db      	ldr	r3, [r3, #12]
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	749a      	strb	r2, [r3, #18]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	74da      	strb	r2, [r3, #19]
  return seg;
 800f700:	693b      	ldr	r3, [r7, #16]
}
 800f702:	4618      	mov	r0, r3
 800f704:	371c      	adds	r7, #28
 800f706:	46bd      	mov	sp, r7
 800f708:	bd90      	pop	{r4, r7, pc}
 800f70a:	bf00      	nop
 800f70c:	080180b8 	.word	0x080180b8
 800f710:	080180ec 	.word	0x080180ec
 800f714:	0801810c 	.word	0x0801810c
 800f718:	08018134 	.word	0x08018134
 800f71c:	08018158 	.word	0x08018158

0800f720 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800f720:	b590      	push	{r4, r7, lr}
 800f722:	b08b      	sub	sp, #44	; 0x2c
 800f724:	af02      	add	r7, sp, #8
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	460b      	mov	r3, r1
 800f72a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800f72c:	2300      	movs	r3, #0
 800f72e:	61fb      	str	r3, [r7, #28]
 800f730:	2300      	movs	r3, #0
 800f732:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f734:	2300      	movs	r3, #0
 800f736:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d106      	bne.n	800f74c <tcp_split_unsent_seg+0x2c>
 800f73e:	4b95      	ldr	r3, [pc, #596]	; (800f994 <tcp_split_unsent_seg+0x274>)
 800f740:	f240 324b 	movw	r2, #843	; 0x34b
 800f744:	4994      	ldr	r1, [pc, #592]	; (800f998 <tcp_split_unsent_seg+0x278>)
 800f746:	4895      	ldr	r0, [pc, #596]	; (800f99c <tcp_split_unsent_seg+0x27c>)
 800f748:	f006 fa84 	bl	8015c54 <iprintf>

  useg = pcb->unsent;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f750:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800f752:	697b      	ldr	r3, [r7, #20]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d102      	bne.n	800f75e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800f758:	f04f 33ff 	mov.w	r3, #4294967295
 800f75c:	e116      	b.n	800f98c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800f75e:	887b      	ldrh	r3, [r7, #2]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d109      	bne.n	800f778 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800f764:	4b8b      	ldr	r3, [pc, #556]	; (800f994 <tcp_split_unsent_seg+0x274>)
 800f766:	f240 3253 	movw	r2, #851	; 0x353
 800f76a:	498d      	ldr	r1, [pc, #564]	; (800f9a0 <tcp_split_unsent_seg+0x280>)
 800f76c:	488b      	ldr	r0, [pc, #556]	; (800f99c <tcp_split_unsent_seg+0x27c>)
 800f76e:	f006 fa71 	bl	8015c54 <iprintf>
    return ERR_VAL;
 800f772:	f06f 0305 	mvn.w	r3, #5
 800f776:	e109      	b.n	800f98c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	891b      	ldrh	r3, [r3, #8]
 800f77c:	887a      	ldrh	r2, [r7, #2]
 800f77e:	429a      	cmp	r2, r3
 800f780:	d301      	bcc.n	800f786 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800f782:	2300      	movs	r3, #0
 800f784:	e102      	b.n	800f98c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f78a:	887a      	ldrh	r2, [r7, #2]
 800f78c:	429a      	cmp	r2, r3
 800f78e:	d906      	bls.n	800f79e <tcp_split_unsent_seg+0x7e>
 800f790:	4b80      	ldr	r3, [pc, #512]	; (800f994 <tcp_split_unsent_seg+0x274>)
 800f792:	f240 325b 	movw	r2, #859	; 0x35b
 800f796:	4983      	ldr	r1, [pc, #524]	; (800f9a4 <tcp_split_unsent_seg+0x284>)
 800f798:	4880      	ldr	r0, [pc, #512]	; (800f99c <tcp_split_unsent_seg+0x27c>)
 800f79a:	f006 fa5b 	bl	8015c54 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	891b      	ldrh	r3, [r3, #8]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d106      	bne.n	800f7b4 <tcp_split_unsent_seg+0x94>
 800f7a6:	4b7b      	ldr	r3, [pc, #492]	; (800f994 <tcp_split_unsent_seg+0x274>)
 800f7a8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800f7ac:	497e      	ldr	r1, [pc, #504]	; (800f9a8 <tcp_split_unsent_seg+0x288>)
 800f7ae:	487b      	ldr	r0, [pc, #492]	; (800f99c <tcp_split_unsent_seg+0x27c>)
 800f7b0:	f006 fa50 	bl	8015c54 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800f7b4:	697b      	ldr	r3, [r7, #20]
 800f7b6:	7a9b      	ldrb	r3, [r3, #10]
 800f7b8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f7ba:	7bfb      	ldrb	r3, [r7, #15]
 800f7bc:	009b      	lsls	r3, r3, #2
 800f7be:	b2db      	uxtb	r3, r3
 800f7c0:	f003 0304 	and.w	r3, r3, #4
 800f7c4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	891a      	ldrh	r2, [r3, #8]
 800f7ca:	887b      	ldrh	r3, [r7, #2]
 800f7cc:	1ad3      	subs	r3, r2, r3
 800f7ce:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f7d0:	7bbb      	ldrb	r3, [r7, #14]
 800f7d2:	b29a      	uxth	r2, r3
 800f7d4:	89bb      	ldrh	r3, [r7, #12]
 800f7d6:	4413      	add	r3, r2
 800f7d8:	b29b      	uxth	r3, r3
 800f7da:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f7de:	4619      	mov	r1, r3
 800f7e0:	2036      	movs	r0, #54	; 0x36
 800f7e2:	f7fb fad1 	bl	800ad88 <pbuf_alloc>
 800f7e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	f000 80b7 	beq.w	800f95e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800f7f0:	697b      	ldr	r3, [r7, #20]
 800f7f2:	685b      	ldr	r3, [r3, #4]
 800f7f4:	891a      	ldrh	r2, [r3, #8]
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	891b      	ldrh	r3, [r3, #8]
 800f7fa:	1ad3      	subs	r3, r2, r3
 800f7fc:	b29a      	uxth	r2, r3
 800f7fe:	887b      	ldrh	r3, [r7, #2]
 800f800:	4413      	add	r3, r2
 800f802:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	6858      	ldr	r0, [r3, #4]
 800f808:	693b      	ldr	r3, [r7, #16]
 800f80a:	685a      	ldr	r2, [r3, #4]
 800f80c:	7bbb      	ldrb	r3, [r7, #14]
 800f80e:	18d1      	adds	r1, r2, r3
 800f810:	897b      	ldrh	r3, [r7, #10]
 800f812:	89ba      	ldrh	r2, [r7, #12]
 800f814:	f7fb ff92 	bl	800b73c <pbuf_copy_partial>
 800f818:	4603      	mov	r3, r0
 800f81a:	461a      	mov	r2, r3
 800f81c:	89bb      	ldrh	r3, [r7, #12]
 800f81e:	4293      	cmp	r3, r2
 800f820:	f040 809f 	bne.w	800f962 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f824:	697b      	ldr	r3, [r7, #20]
 800f826:	68db      	ldr	r3, [r3, #12]
 800f828:	899b      	ldrh	r3, [r3, #12]
 800f82a:	b29b      	uxth	r3, r3
 800f82c:	4618      	mov	r0, r3
 800f82e:	f7fa faea 	bl	8009e06 <lwip_htons>
 800f832:	4603      	mov	r3, r0
 800f834:	b2db      	uxtb	r3, r3
 800f836:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f83a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800f83c:	2300      	movs	r3, #0
 800f83e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800f840:	7efb      	ldrb	r3, [r7, #27]
 800f842:	f003 0308 	and.w	r3, r3, #8
 800f846:	2b00      	cmp	r3, #0
 800f848:	d007      	beq.n	800f85a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800f84a:	7efb      	ldrb	r3, [r7, #27]
 800f84c:	f023 0308 	bic.w	r3, r3, #8
 800f850:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800f852:	7ebb      	ldrb	r3, [r7, #26]
 800f854:	f043 0308 	orr.w	r3, r3, #8
 800f858:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800f85a:	7efb      	ldrb	r3, [r7, #27]
 800f85c:	f003 0301 	and.w	r3, r3, #1
 800f860:	2b00      	cmp	r3, #0
 800f862:	d007      	beq.n	800f874 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800f864:	7efb      	ldrb	r3, [r7, #27]
 800f866:	f023 0301 	bic.w	r3, r3, #1
 800f86a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800f86c:	7ebb      	ldrb	r3, [r7, #26]
 800f86e:	f043 0301 	orr.w	r3, r3, #1
 800f872:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	68db      	ldr	r3, [r3, #12]
 800f878:	685b      	ldr	r3, [r3, #4]
 800f87a:	4618      	mov	r0, r3
 800f87c:	f7fa fad8 	bl	8009e30 <lwip_htonl>
 800f880:	4602      	mov	r2, r0
 800f882:	887b      	ldrh	r3, [r7, #2]
 800f884:	18d1      	adds	r1, r2, r3
 800f886:	7eba      	ldrb	r2, [r7, #26]
 800f888:	7bfb      	ldrb	r3, [r7, #15]
 800f88a:	9300      	str	r3, [sp, #0]
 800f88c:	460b      	mov	r3, r1
 800f88e:	6939      	ldr	r1, [r7, #16]
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f7ff fea7 	bl	800f5e4 <tcp_create_segment>
 800f896:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800f898:	69fb      	ldr	r3, [r7, #28]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d063      	beq.n	800f966 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f89e:	697b      	ldr	r3, [r7, #20]
 800f8a0:	685b      	ldr	r3, [r3, #4]
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f7fb fdd8 	bl	800b458 <pbuf_clen>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	461a      	mov	r2, r3
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f8b2:	1a9b      	subs	r3, r3, r2
 800f8b4:	b29a      	uxth	r2, r3
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	6858      	ldr	r0, [r3, #4]
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	685b      	ldr	r3, [r3, #4]
 800f8c4:	891a      	ldrh	r2, [r3, #8]
 800f8c6:	89bb      	ldrh	r3, [r7, #12]
 800f8c8:	1ad3      	subs	r3, r2, r3
 800f8ca:	b29b      	uxth	r3, r3
 800f8cc:	4619      	mov	r1, r3
 800f8ce:	f7fb fbb5 	bl	800b03c <pbuf_realloc>
  useg->len -= remainder;
 800f8d2:	697b      	ldr	r3, [r7, #20]
 800f8d4:	891a      	ldrh	r2, [r3, #8]
 800f8d6:	89bb      	ldrh	r3, [r7, #12]
 800f8d8:	1ad3      	subs	r3, r2, r3
 800f8da:	b29a      	uxth	r2, r3
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f8e0:	697b      	ldr	r3, [r7, #20]
 800f8e2:	68db      	ldr	r3, [r3, #12]
 800f8e4:	899b      	ldrh	r3, [r3, #12]
 800f8e6:	b29c      	uxth	r4, r3
 800f8e8:	7efb      	ldrb	r3, [r7, #27]
 800f8ea:	b29b      	uxth	r3, r3
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f7fa fa8a 	bl	8009e06 <lwip_htons>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	461a      	mov	r2, r3
 800f8f6:	697b      	ldr	r3, [r7, #20]
 800f8f8:	68db      	ldr	r3, [r3, #12]
 800f8fa:	4322      	orrs	r2, r4
 800f8fc:	b292      	uxth	r2, r2
 800f8fe:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	685b      	ldr	r3, [r3, #4]
 800f904:	4618      	mov	r0, r3
 800f906:	f7fb fda7 	bl	800b458 <pbuf_clen>
 800f90a:	4603      	mov	r3, r0
 800f90c:	461a      	mov	r2, r3
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f914:	4413      	add	r3, r2
 800f916:	b29a      	uxth	r2, r3
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f91e:	69fb      	ldr	r3, [r7, #28]
 800f920:	685b      	ldr	r3, [r3, #4]
 800f922:	4618      	mov	r0, r3
 800f924:	f7fb fd98 	bl	800b458 <pbuf_clen>
 800f928:	4603      	mov	r3, r0
 800f92a:	461a      	mov	r2, r3
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f932:	4413      	add	r3, r2
 800f934:	b29a      	uxth	r2, r3
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800f93c:	697b      	ldr	r3, [r7, #20]
 800f93e:	681a      	ldr	r2, [r3, #0]
 800f940:	69fb      	ldr	r3, [r7, #28]
 800f942:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800f944:	697b      	ldr	r3, [r7, #20]
 800f946:	69fa      	ldr	r2, [r7, #28]
 800f948:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800f94a:	69fb      	ldr	r3, [r7, #28]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d103      	bne.n	800f95a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	2200      	movs	r2, #0
 800f956:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800f95a:	2300      	movs	r3, #0
 800f95c:	e016      	b.n	800f98c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800f95e:	bf00      	nop
 800f960:	e002      	b.n	800f968 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f962:	bf00      	nop
 800f964:	e000      	b.n	800f968 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f966:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800f968:	69fb      	ldr	r3, [r7, #28]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d006      	beq.n	800f97c <tcp_split_unsent_seg+0x25c>
 800f96e:	4b09      	ldr	r3, [pc, #36]	; (800f994 <tcp_split_unsent_seg+0x274>)
 800f970:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800f974:	490d      	ldr	r1, [pc, #52]	; (800f9ac <tcp_split_unsent_seg+0x28c>)
 800f976:	4809      	ldr	r0, [pc, #36]	; (800f99c <tcp_split_unsent_seg+0x27c>)
 800f978:	f006 f96c 	bl	8015c54 <iprintf>
  if (p != NULL) {
 800f97c:	693b      	ldr	r3, [r7, #16]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d002      	beq.n	800f988 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800f982:	6938      	ldr	r0, [r7, #16]
 800f984:	f7fb fce0 	bl	800b348 <pbuf_free>
  }

  return ERR_MEM;
 800f988:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f98c:	4618      	mov	r0, r3
 800f98e:	3724      	adds	r7, #36	; 0x24
 800f990:	46bd      	mov	sp, r7
 800f992:	bd90      	pop	{r4, r7, pc}
 800f994:	080180b8 	.word	0x080180b8
 800f998:	0801844c 	.word	0x0801844c
 800f99c:	0801810c 	.word	0x0801810c
 800f9a0:	08018470 	.word	0x08018470
 800f9a4:	08018494 	.word	0x08018494
 800f9a8:	080184a4 	.word	0x080184a4
 800f9ac:	080184b4 	.word	0x080184b4

0800f9b0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f9b0:	b590      	push	{r4, r7, lr}
 800f9b2:	b085      	sub	sp, #20
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d106      	bne.n	800f9cc <tcp_send_fin+0x1c>
 800f9be:	4b21      	ldr	r3, [pc, #132]	; (800fa44 <tcp_send_fin+0x94>)
 800f9c0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800f9c4:	4920      	ldr	r1, [pc, #128]	; (800fa48 <tcp_send_fin+0x98>)
 800f9c6:	4821      	ldr	r0, [pc, #132]	; (800fa4c <tcp_send_fin+0x9c>)
 800f9c8:	f006 f944 	bl	8015c54 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d02e      	beq.n	800fa32 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9d8:	60fb      	str	r3, [r7, #12]
 800f9da:	e002      	b.n	800f9e2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d1f8      	bne.n	800f9dc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	68db      	ldr	r3, [r3, #12]
 800f9ee:	899b      	ldrh	r3, [r3, #12]
 800f9f0:	b29b      	uxth	r3, r3
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	f7fa fa07 	bl	8009e06 <lwip_htons>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	b2db      	uxtb	r3, r3
 800f9fc:	f003 0307 	and.w	r3, r3, #7
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d116      	bne.n	800fa32 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	68db      	ldr	r3, [r3, #12]
 800fa08:	899b      	ldrh	r3, [r3, #12]
 800fa0a:	b29c      	uxth	r4, r3
 800fa0c:	2001      	movs	r0, #1
 800fa0e:	f7fa f9fa 	bl	8009e06 <lwip_htons>
 800fa12:	4603      	mov	r3, r0
 800fa14:	461a      	mov	r2, r3
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	68db      	ldr	r3, [r3, #12]
 800fa1a:	4322      	orrs	r2, r4
 800fa1c:	b292      	uxth	r2, r2
 800fa1e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	8b5b      	ldrh	r3, [r3, #26]
 800fa24:	f043 0320 	orr.w	r3, r3, #32
 800fa28:	b29a      	uxth	r2, r3
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800fa2e:	2300      	movs	r3, #0
 800fa30:	e004      	b.n	800fa3c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800fa32:	2101      	movs	r1, #1
 800fa34:	6878      	ldr	r0, [r7, #4]
 800fa36:	f000 f80b 	bl	800fa50 <tcp_enqueue_flags>
 800fa3a:	4603      	mov	r3, r0
}
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	3714      	adds	r7, #20
 800fa40:	46bd      	mov	sp, r7
 800fa42:	bd90      	pop	{r4, r7, pc}
 800fa44:	080180b8 	.word	0x080180b8
 800fa48:	080184c0 	.word	0x080184c0
 800fa4c:	0801810c 	.word	0x0801810c

0800fa50 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b08a      	sub	sp, #40	; 0x28
 800fa54:	af02      	add	r7, sp, #8
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	460b      	mov	r3, r1
 800fa5a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800fa60:	2300      	movs	r3, #0
 800fa62:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800fa64:	78fb      	ldrb	r3, [r7, #3]
 800fa66:	f003 0303 	and.w	r3, r3, #3
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d106      	bne.n	800fa7c <tcp_enqueue_flags+0x2c>
 800fa6e:	4b67      	ldr	r3, [pc, #412]	; (800fc0c <tcp_enqueue_flags+0x1bc>)
 800fa70:	f240 4212 	movw	r2, #1042	; 0x412
 800fa74:	4966      	ldr	r1, [pc, #408]	; (800fc10 <tcp_enqueue_flags+0x1c0>)
 800fa76:	4867      	ldr	r0, [pc, #412]	; (800fc14 <tcp_enqueue_flags+0x1c4>)
 800fa78:	f006 f8ec 	bl	8015c54 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d106      	bne.n	800fa90 <tcp_enqueue_flags+0x40>
 800fa82:	4b62      	ldr	r3, [pc, #392]	; (800fc0c <tcp_enqueue_flags+0x1bc>)
 800fa84:	f240 4213 	movw	r2, #1043	; 0x413
 800fa88:	4963      	ldr	r1, [pc, #396]	; (800fc18 <tcp_enqueue_flags+0x1c8>)
 800fa8a:	4862      	ldr	r0, [pc, #392]	; (800fc14 <tcp_enqueue_flags+0x1c4>)
 800fa8c:	f006 f8e2 	bl	8015c54 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800fa90:	78fb      	ldrb	r3, [r7, #3]
 800fa92:	f003 0302 	and.w	r3, r3, #2
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d001      	beq.n	800fa9e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fa9e:	7ffb      	ldrb	r3, [r7, #31]
 800faa0:	009b      	lsls	r3, r3, #2
 800faa2:	b2db      	uxtb	r3, r3
 800faa4:	f003 0304 	and.w	r3, r3, #4
 800faa8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800faaa:	7dfb      	ldrb	r3, [r7, #23]
 800faac:	b29b      	uxth	r3, r3
 800faae:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fab2:	4619      	mov	r1, r3
 800fab4:	2036      	movs	r0, #54	; 0x36
 800fab6:	f7fb f967 	bl	800ad88 <pbuf_alloc>
 800faba:	6138      	str	r0, [r7, #16]
 800fabc:	693b      	ldr	r3, [r7, #16]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d109      	bne.n	800fad6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	8b5b      	ldrh	r3, [r3, #26]
 800fac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800faca:	b29a      	uxth	r2, r3
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800fad0:	f04f 33ff 	mov.w	r3, #4294967295
 800fad4:	e095      	b.n	800fc02 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800fad6:	693b      	ldr	r3, [r7, #16]
 800fad8:	895a      	ldrh	r2, [r3, #10]
 800fada:	7dfb      	ldrb	r3, [r7, #23]
 800fadc:	b29b      	uxth	r3, r3
 800fade:	429a      	cmp	r2, r3
 800fae0:	d206      	bcs.n	800faf0 <tcp_enqueue_flags+0xa0>
 800fae2:	4b4a      	ldr	r3, [pc, #296]	; (800fc0c <tcp_enqueue_flags+0x1bc>)
 800fae4:	f240 423a 	movw	r2, #1082	; 0x43a
 800fae8:	494c      	ldr	r1, [pc, #304]	; (800fc1c <tcp_enqueue_flags+0x1cc>)
 800faea:	484a      	ldr	r0, [pc, #296]	; (800fc14 <tcp_enqueue_flags+0x1c4>)
 800faec:	f006 f8b2 	bl	8015c54 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800faf4:	78fa      	ldrb	r2, [r7, #3]
 800faf6:	7ffb      	ldrb	r3, [r7, #31]
 800faf8:	9300      	str	r3, [sp, #0]
 800fafa:	460b      	mov	r3, r1
 800fafc:	6939      	ldr	r1, [r7, #16]
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	f7ff fd70 	bl	800f5e4 <tcp_create_segment>
 800fb04:	60f8      	str	r0, [r7, #12]
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d109      	bne.n	800fb20 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	8b5b      	ldrh	r3, [r3, #26]
 800fb10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb14:	b29a      	uxth	r2, r3
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800fb1a:	f04f 33ff 	mov.w	r3, #4294967295
 800fb1e:	e070      	b.n	800fc02 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	68db      	ldr	r3, [r3, #12]
 800fb24:	f003 0303 	and.w	r3, r3, #3
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d006      	beq.n	800fb3a <tcp_enqueue_flags+0xea>
 800fb2c:	4b37      	ldr	r3, [pc, #220]	; (800fc0c <tcp_enqueue_flags+0x1bc>)
 800fb2e:	f240 4242 	movw	r2, #1090	; 0x442
 800fb32:	493b      	ldr	r1, [pc, #236]	; (800fc20 <tcp_enqueue_flags+0x1d0>)
 800fb34:	4837      	ldr	r0, [pc, #220]	; (800fc14 <tcp_enqueue_flags+0x1c4>)
 800fb36:	f006 f88d 	bl	8015c54 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	891b      	ldrh	r3, [r3, #8]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d006      	beq.n	800fb50 <tcp_enqueue_flags+0x100>
 800fb42:	4b32      	ldr	r3, [pc, #200]	; (800fc0c <tcp_enqueue_flags+0x1bc>)
 800fb44:	f240 4243 	movw	r2, #1091	; 0x443
 800fb48:	4936      	ldr	r1, [pc, #216]	; (800fc24 <tcp_enqueue_flags+0x1d4>)
 800fb4a:	4832      	ldr	r0, [pc, #200]	; (800fc14 <tcp_enqueue_flags+0x1c4>)
 800fb4c:	f006 f882 	bl	8015c54 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d103      	bne.n	800fb60 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	68fa      	ldr	r2, [r7, #12]
 800fb5c:	66da      	str	r2, [r3, #108]	; 0x6c
 800fb5e:	e00d      	b.n	800fb7c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb64:	61bb      	str	r3, [r7, #24]
 800fb66:	e002      	b.n	800fb6e <tcp_enqueue_flags+0x11e>
 800fb68:	69bb      	ldr	r3, [r7, #24]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	61bb      	str	r3, [r7, #24]
 800fb6e:	69bb      	ldr	r3, [r7, #24]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d1f8      	bne.n	800fb68 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800fb76:	69bb      	ldr	r3, [r7, #24]
 800fb78:	68fa      	ldr	r2, [r7, #12]
 800fb7a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2200      	movs	r2, #0
 800fb80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800fb84:	78fb      	ldrb	r3, [r7, #3]
 800fb86:	f003 0302 	and.w	r3, r3, #2
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d104      	bne.n	800fb98 <tcp_enqueue_flags+0x148>
 800fb8e:	78fb      	ldrb	r3, [r7, #3]
 800fb90:	f003 0301 	and.w	r3, r3, #1
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d004      	beq.n	800fba2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fb9c:	1c5a      	adds	r2, r3, #1
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800fba2:	78fb      	ldrb	r3, [r7, #3]
 800fba4:	f003 0301 	and.w	r3, r3, #1
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d006      	beq.n	800fbba <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	8b5b      	ldrh	r3, [r3, #26]
 800fbb0:	f043 0320 	orr.w	r3, r3, #32
 800fbb4:	b29a      	uxth	r2, r3
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	685b      	ldr	r3, [r3, #4]
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f7fb fc4a 	bl	800b458 <pbuf_clen>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	461a      	mov	r2, r3
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fbce:	4413      	add	r3, r2
 800fbd0:	b29a      	uxth	r2, r3
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d00e      	beq.n	800fc00 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d10a      	bne.n	800fc00 <tcp_enqueue_flags+0x1b0>
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d106      	bne.n	800fc00 <tcp_enqueue_flags+0x1b0>
 800fbf2:	4b06      	ldr	r3, [pc, #24]	; (800fc0c <tcp_enqueue_flags+0x1bc>)
 800fbf4:	f240 4266 	movw	r2, #1126	; 0x466
 800fbf8:	490b      	ldr	r1, [pc, #44]	; (800fc28 <tcp_enqueue_flags+0x1d8>)
 800fbfa:	4806      	ldr	r0, [pc, #24]	; (800fc14 <tcp_enqueue_flags+0x1c4>)
 800fbfc:	f006 f82a 	bl	8015c54 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800fc00:	2300      	movs	r3, #0
}
 800fc02:	4618      	mov	r0, r3
 800fc04:	3720      	adds	r7, #32
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}
 800fc0a:	bf00      	nop
 800fc0c:	080180b8 	.word	0x080180b8
 800fc10:	080184dc 	.word	0x080184dc
 800fc14:	0801810c 	.word	0x0801810c
 800fc18:	08018534 	.word	0x08018534
 800fc1c:	08018554 	.word	0x08018554
 800fc20:	08018590 	.word	0x08018590
 800fc24:	080185a8 	.word	0x080185a8
 800fc28:	080185d4 	.word	0x080185d4

0800fc2c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800fc2c:	b5b0      	push	{r4, r5, r7, lr}
 800fc2e:	b08a      	sub	sp, #40	; 0x28
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d106      	bne.n	800fc48 <tcp_output+0x1c>
 800fc3a:	4ba0      	ldr	r3, [pc, #640]	; (800febc <tcp_output+0x290>)
 800fc3c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800fc40:	499f      	ldr	r1, [pc, #636]	; (800fec0 <tcp_output+0x294>)
 800fc42:	48a0      	ldr	r0, [pc, #640]	; (800fec4 <tcp_output+0x298>)
 800fc44:	f006 f806 	bl	8015c54 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	7d1b      	ldrb	r3, [r3, #20]
 800fc4c:	2b01      	cmp	r3, #1
 800fc4e:	d106      	bne.n	800fc5e <tcp_output+0x32>
 800fc50:	4b9a      	ldr	r3, [pc, #616]	; (800febc <tcp_output+0x290>)
 800fc52:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800fc56:	499c      	ldr	r1, [pc, #624]	; (800fec8 <tcp_output+0x29c>)
 800fc58:	489a      	ldr	r0, [pc, #616]	; (800fec4 <tcp_output+0x298>)
 800fc5a:	f005 fffb 	bl	8015c54 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800fc5e:	4b9b      	ldr	r3, [pc, #620]	; (800fecc <tcp_output+0x2a0>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	687a      	ldr	r2, [r7, #4]
 800fc64:	429a      	cmp	r2, r3
 800fc66:	d101      	bne.n	800fc6c <tcp_output+0x40>
    return ERR_OK;
 800fc68:	2300      	movs	r3, #0
 800fc6a:	e1d2      	b.n	8010012 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	d203      	bcs.n	800fc84 <tcp_output+0x58>
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fc82:	e002      	b.n	800fc8a <tcp_output+0x5e>
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc8a:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc90:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800fc92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d10b      	bne.n	800fcb0 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	8b5b      	ldrh	r3, [r3, #26]
 800fc9c:	f003 0302 	and.w	r3, r3, #2
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	f000 81a9 	beq.w	800fff8 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 800fca6:	6878      	ldr	r0, [r7, #4]
 800fca8:	f000 fdd6 	bl	8010858 <tcp_send_empty_ack>
 800fcac:	4603      	mov	r3, r0
 800fcae:	e1b0      	b.n	8010012 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800fcb0:	6879      	ldr	r1, [r7, #4]
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	3304      	adds	r3, #4
 800fcb6:	461a      	mov	r2, r3
 800fcb8:	6878      	ldr	r0, [r7, #4]
 800fcba:	f7ff fc77 	bl	800f5ac <tcp_route>
 800fcbe:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800fcc0:	697b      	ldr	r3, [r7, #20]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d102      	bne.n	800fccc <tcp_output+0xa0>
    return ERR_RTE;
 800fcc6:	f06f 0303 	mvn.w	r3, #3
 800fcca:	e1a2      	b.n	8010012 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d003      	beq.n	800fcda <tcp_output+0xae>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d111      	bne.n	800fcfe <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800fcda:	697b      	ldr	r3, [r7, #20]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d002      	beq.n	800fce6 <tcp_output+0xba>
 800fce0:	697b      	ldr	r3, [r7, #20]
 800fce2:	3304      	adds	r3, #4
 800fce4:	e000      	b.n	800fce8 <tcp_output+0xbc>
 800fce6:	2300      	movs	r3, #0
 800fce8:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800fcea:	693b      	ldr	r3, [r7, #16]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d102      	bne.n	800fcf6 <tcp_output+0xca>
      return ERR_RTE;
 800fcf0:	f06f 0303 	mvn.w	r3, #3
 800fcf4:	e18d      	b.n	8010012 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800fcf6:	693b      	ldr	r3, [r7, #16]
 800fcf8:	681a      	ldr	r2, [r3, #0]
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800fcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd00:	68db      	ldr	r3, [r3, #12]
 800fd02:	685b      	ldr	r3, [r3, #4]
 800fd04:	4618      	mov	r0, r3
 800fd06:	f7fa f893 	bl	8009e30 <lwip_htonl>
 800fd0a:	4602      	mov	r2, r0
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd10:	1ad3      	subs	r3, r2, r3
 800fd12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd14:	8912      	ldrh	r2, [r2, #8]
 800fd16:	4413      	add	r3, r2
 800fd18:	69ba      	ldr	r2, [r7, #24]
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d227      	bcs.n	800fd6e <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fd24:	461a      	mov	r2, r3
 800fd26:	69bb      	ldr	r3, [r7, #24]
 800fd28:	4293      	cmp	r3, r2
 800fd2a:	d114      	bne.n	800fd56 <tcp_output+0x12a>
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d110      	bne.n	800fd56 <tcp_output+0x12a>
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d10b      	bne.n	800fd56 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	2200      	movs	r2, #0
 800fd42:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2201      	movs	r2, #1
 800fd4a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	2200      	movs	r2, #0
 800fd52:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	8b5b      	ldrh	r3, [r3, #26]
 800fd5a:	f003 0302 	and.w	r3, r3, #2
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	f000 814c 	beq.w	800fffc <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 800fd64:	6878      	ldr	r0, [r7, #4]
 800fd66:	f000 fd77 	bl	8010858 <tcp_send_empty_ack>
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	e151      	b.n	8010012 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	2200      	movs	r2, #0
 800fd72:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd7a:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800fd7c:	6a3b      	ldr	r3, [r7, #32]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	f000 811b 	beq.w	800ffba <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 800fd84:	e002      	b.n	800fd8c <tcp_output+0x160>
 800fd86:	6a3b      	ldr	r3, [r7, #32]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	623b      	str	r3, [r7, #32]
 800fd8c:	6a3b      	ldr	r3, [r7, #32]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d1f8      	bne.n	800fd86 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800fd94:	e111      	b.n	800ffba <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800fd96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd98:	68db      	ldr	r3, [r3, #12]
 800fd9a:	899b      	ldrh	r3, [r3, #12]
 800fd9c:	b29b      	uxth	r3, r3
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f7fa f831 	bl	8009e06 <lwip_htons>
 800fda4:	4603      	mov	r3, r0
 800fda6:	b2db      	uxtb	r3, r3
 800fda8:	f003 0304 	and.w	r3, r3, #4
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d006      	beq.n	800fdbe <tcp_output+0x192>
 800fdb0:	4b42      	ldr	r3, [pc, #264]	; (800febc <tcp_output+0x290>)
 800fdb2:	f240 5237 	movw	r2, #1335	; 0x537
 800fdb6:	4946      	ldr	r1, [pc, #280]	; (800fed0 <tcp_output+0x2a4>)
 800fdb8:	4842      	ldr	r0, [pc, #264]	; (800fec4 <tcp_output+0x298>)
 800fdba:	f005 ff4b 	bl	8015c54 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d01f      	beq.n	800fe06 <tcp_output+0x1da>
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	8b5b      	ldrh	r3, [r3, #26]
 800fdca:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d119      	bne.n	800fe06 <tcp_output+0x1da>
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d00b      	beq.n	800fdf2 <tcp_output+0x1c6>
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d110      	bne.n	800fe06 <tcp_output+0x1da>
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fde8:	891a      	ldrh	r2, [r3, #8]
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fdee:	429a      	cmp	r2, r3
 800fdf0:	d209      	bcs.n	800fe06 <tcp_output+0x1da>
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d004      	beq.n	800fe06 <tcp_output+0x1da>
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe02:	2b08      	cmp	r3, #8
 800fe04:	d901      	bls.n	800fe0a <tcp_output+0x1de>
 800fe06:	2301      	movs	r3, #1
 800fe08:	e000      	b.n	800fe0c <tcp_output+0x1e0>
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d106      	bne.n	800fe1e <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	8b5b      	ldrh	r3, [r3, #26]
 800fe14:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	f000 80e3 	beq.w	800ffe4 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	7d1b      	ldrb	r3, [r3, #20]
 800fe22:	2b02      	cmp	r3, #2
 800fe24:	d00d      	beq.n	800fe42 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800fe26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe28:	68db      	ldr	r3, [r3, #12]
 800fe2a:	899b      	ldrh	r3, [r3, #12]
 800fe2c:	b29c      	uxth	r4, r3
 800fe2e:	2010      	movs	r0, #16
 800fe30:	f7f9 ffe9 	bl	8009e06 <lwip_htons>
 800fe34:	4603      	mov	r3, r0
 800fe36:	461a      	mov	r2, r3
 800fe38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe3a:	68db      	ldr	r3, [r3, #12]
 800fe3c:	4322      	orrs	r2, r4
 800fe3e:	b292      	uxth	r2, r2
 800fe40:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800fe42:	697a      	ldr	r2, [r7, #20]
 800fe44:	6879      	ldr	r1, [r7, #4]
 800fe46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe48:	f000 f908 	bl	801005c <tcp_output_segment>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800fe50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d009      	beq.n	800fe6c <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	8b5b      	ldrh	r3, [r3, #26]
 800fe5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe60:	b29a      	uxth	r2, r3
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	835a      	strh	r2, [r3, #26]
      return err;
 800fe66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe6a:	e0d2      	b.n	8010012 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800fe6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe6e:	681a      	ldr	r2, [r3, #0]
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	7d1b      	ldrb	r3, [r3, #20]
 800fe78:	2b02      	cmp	r3, #2
 800fe7a:	d006      	beq.n	800fe8a <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	8b5b      	ldrh	r3, [r3, #26]
 800fe80:	f023 0303 	bic.w	r3, r3, #3
 800fe84:	b29a      	uxth	r2, r3
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fe8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe8c:	68db      	ldr	r3, [r3, #12]
 800fe8e:	685b      	ldr	r3, [r3, #4]
 800fe90:	4618      	mov	r0, r3
 800fe92:	f7f9 ffcd 	bl	8009e30 <lwip_htonl>
 800fe96:	4604      	mov	r4, r0
 800fe98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe9a:	891b      	ldrh	r3, [r3, #8]
 800fe9c:	461d      	mov	r5, r3
 800fe9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea0:	68db      	ldr	r3, [r3, #12]
 800fea2:	899b      	ldrh	r3, [r3, #12]
 800fea4:	b29b      	uxth	r3, r3
 800fea6:	4618      	mov	r0, r3
 800fea8:	f7f9 ffad 	bl	8009e06 <lwip_htons>
 800feac:	4603      	mov	r3, r0
 800feae:	b2db      	uxtb	r3, r3
 800feb0:	f003 0303 	and.w	r3, r3, #3
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d00d      	beq.n	800fed4 <tcp_output+0x2a8>
 800feb8:	2301      	movs	r3, #1
 800feba:	e00c      	b.n	800fed6 <tcp_output+0x2aa>
 800febc:	080180b8 	.word	0x080180b8
 800fec0:	080185fc 	.word	0x080185fc
 800fec4:	0801810c 	.word	0x0801810c
 800fec8:	08018614 	.word	0x08018614
 800fecc:	20007708 	.word	0x20007708
 800fed0:	0801863c 	.word	0x0801863c
 800fed4:	2300      	movs	r3, #0
 800fed6:	442b      	add	r3, r5
 800fed8:	4423      	add	r3, r4
 800feda:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	1ad3      	subs	r3, r2, r3
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	da02      	bge.n	800feee <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	68ba      	ldr	r2, [r7, #8]
 800feec:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800feee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef0:	891b      	ldrh	r3, [r3, #8]
 800fef2:	461c      	mov	r4, r3
 800fef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef6:	68db      	ldr	r3, [r3, #12]
 800fef8:	899b      	ldrh	r3, [r3, #12]
 800fefa:	b29b      	uxth	r3, r3
 800fefc:	4618      	mov	r0, r3
 800fefe:	f7f9 ff82 	bl	8009e06 <lwip_htons>
 800ff02:	4603      	mov	r3, r0
 800ff04:	b2db      	uxtb	r3, r3
 800ff06:	f003 0303 	and.w	r3, r3, #3
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d001      	beq.n	800ff12 <tcp_output+0x2e6>
 800ff0e:	2301      	movs	r3, #1
 800ff10:	e000      	b.n	800ff14 <tcp_output+0x2e8>
 800ff12:	2300      	movs	r3, #0
 800ff14:	4423      	add	r3, r4
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d049      	beq.n	800ffae <tcp_output+0x382>
      seg->next = NULL;
 800ff1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d105      	bne.n	800ff34 <tcp_output+0x308>
        pcb->unacked = seg;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff2c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800ff2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff30:	623b      	str	r3, [r7, #32]
 800ff32:	e03f      	b.n	800ffb4 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ff34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff36:	68db      	ldr	r3, [r3, #12]
 800ff38:	685b      	ldr	r3, [r3, #4]
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f7f9 ff78 	bl	8009e30 <lwip_htonl>
 800ff40:	4604      	mov	r4, r0
 800ff42:	6a3b      	ldr	r3, [r7, #32]
 800ff44:	68db      	ldr	r3, [r3, #12]
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f7f9 ff71 	bl	8009e30 <lwip_htonl>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	1ae3      	subs	r3, r4, r3
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	da24      	bge.n	800ffa0 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	3370      	adds	r3, #112	; 0x70
 800ff5a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ff5c:	e002      	b.n	800ff64 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ff5e:	69fb      	ldr	r3, [r7, #28]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ff64:	69fb      	ldr	r3, [r7, #28]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d011      	beq.n	800ff90 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ff6c:	69fb      	ldr	r3, [r7, #28]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	68db      	ldr	r3, [r3, #12]
 800ff72:	685b      	ldr	r3, [r3, #4]
 800ff74:	4618      	mov	r0, r3
 800ff76:	f7f9 ff5b 	bl	8009e30 <lwip_htonl>
 800ff7a:	4604      	mov	r4, r0
 800ff7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff7e:	68db      	ldr	r3, [r3, #12]
 800ff80:	685b      	ldr	r3, [r3, #4]
 800ff82:	4618      	mov	r0, r3
 800ff84:	f7f9 ff54 	bl	8009e30 <lwip_htonl>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	dbe6      	blt.n	800ff5e <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 800ff90:	69fb      	ldr	r3, [r7, #28]
 800ff92:	681a      	ldr	r2, [r3, #0]
 800ff94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff96:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ff98:	69fb      	ldr	r3, [r7, #28]
 800ff9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff9c:	601a      	str	r2, [r3, #0]
 800ff9e:	e009      	b.n	800ffb4 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ffa0:	6a3b      	ldr	r3, [r7, #32]
 800ffa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffa4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ffa6:	6a3b      	ldr	r3, [r7, #32]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	623b      	str	r3, [r7, #32]
 800ffac:	e002      	b.n	800ffb4 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ffae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ffb0:	f7fc fc42 	bl	800c838 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffb8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800ffba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d012      	beq.n	800ffe6 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ffc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc2:	68db      	ldr	r3, [r3, #12]
 800ffc4:	685b      	ldr	r3, [r3, #4]
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f7f9 ff32 	bl	8009e30 <lwip_htonl>
 800ffcc:	4602      	mov	r2, r0
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffd2:	1ad3      	subs	r3, r2, r3
 800ffd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffd6:	8912      	ldrh	r2, [r2, #8]
 800ffd8:	4413      	add	r3, r2
  while (seg != NULL &&
 800ffda:	69ba      	ldr	r2, [r7, #24]
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	f4bf aeda 	bcs.w	800fd96 <tcp_output+0x16a>
 800ffe2:	e000      	b.n	800ffe6 <tcp_output+0x3ba>
      break;
 800ffe4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d108      	bne.n	8010000 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2200      	movs	r2, #0
 800fff2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800fff6:	e004      	b.n	8010002 <tcp_output+0x3d6>
    goto output_done;
 800fff8:	bf00      	nop
 800fffa:	e002      	b.n	8010002 <tcp_output+0x3d6>
    goto output_done;
 800fffc:	bf00      	nop
 800fffe:	e000      	b.n	8010002 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010000:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	8b5b      	ldrh	r3, [r3, #26]
 8010006:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801000a:	b29a      	uxth	r2, r3
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010010:	2300      	movs	r3, #0
}
 8010012:	4618      	mov	r0, r3
 8010014:	3728      	adds	r7, #40	; 0x28
 8010016:	46bd      	mov	sp, r7
 8010018:	bdb0      	pop	{r4, r5, r7, pc}
 801001a:	bf00      	nop

0801001c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b082      	sub	sp, #8
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d106      	bne.n	8010038 <tcp_output_segment_busy+0x1c>
 801002a:	4b09      	ldr	r3, [pc, #36]	; (8010050 <tcp_output_segment_busy+0x34>)
 801002c:	f240 529a 	movw	r2, #1434	; 0x59a
 8010030:	4908      	ldr	r1, [pc, #32]	; (8010054 <tcp_output_segment_busy+0x38>)
 8010032:	4809      	ldr	r0, [pc, #36]	; (8010058 <tcp_output_segment_busy+0x3c>)
 8010034:	f005 fe0e 	bl	8015c54 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	685b      	ldr	r3, [r3, #4]
 801003c:	7b9b      	ldrb	r3, [r3, #14]
 801003e:	2b01      	cmp	r3, #1
 8010040:	d001      	beq.n	8010046 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010042:	2301      	movs	r3, #1
 8010044:	e000      	b.n	8010048 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010046:	2300      	movs	r3, #0
}
 8010048:	4618      	mov	r0, r3
 801004a:	3708      	adds	r7, #8
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}
 8010050:	080180b8 	.word	0x080180b8
 8010054:	08018654 	.word	0x08018654
 8010058:	0801810c 	.word	0x0801810c

0801005c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801005c:	b5b0      	push	{r4, r5, r7, lr}
 801005e:	b08c      	sub	sp, #48	; 0x30
 8010060:	af04      	add	r7, sp, #16
 8010062:	60f8      	str	r0, [r7, #12]
 8010064:	60b9      	str	r1, [r7, #8]
 8010066:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d106      	bne.n	801007c <tcp_output_segment+0x20>
 801006e:	4b64      	ldr	r3, [pc, #400]	; (8010200 <tcp_output_segment+0x1a4>)
 8010070:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010074:	4963      	ldr	r1, [pc, #396]	; (8010204 <tcp_output_segment+0x1a8>)
 8010076:	4864      	ldr	r0, [pc, #400]	; (8010208 <tcp_output_segment+0x1ac>)
 8010078:	f005 fdec 	bl	8015c54 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d106      	bne.n	8010090 <tcp_output_segment+0x34>
 8010082:	4b5f      	ldr	r3, [pc, #380]	; (8010200 <tcp_output_segment+0x1a4>)
 8010084:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010088:	4960      	ldr	r1, [pc, #384]	; (801020c <tcp_output_segment+0x1b0>)
 801008a:	485f      	ldr	r0, [pc, #380]	; (8010208 <tcp_output_segment+0x1ac>)
 801008c:	f005 fde2 	bl	8015c54 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d106      	bne.n	80100a4 <tcp_output_segment+0x48>
 8010096:	4b5a      	ldr	r3, [pc, #360]	; (8010200 <tcp_output_segment+0x1a4>)
 8010098:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801009c:	495c      	ldr	r1, [pc, #368]	; (8010210 <tcp_output_segment+0x1b4>)
 801009e:	485a      	ldr	r0, [pc, #360]	; (8010208 <tcp_output_segment+0x1ac>)
 80100a0:	f005 fdd8 	bl	8015c54 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80100a4:	68f8      	ldr	r0, [r7, #12]
 80100a6:	f7ff ffb9 	bl	801001c <tcp_output_segment_busy>
 80100aa:	4603      	mov	r3, r0
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d001      	beq.n	80100b4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80100b0:	2300      	movs	r3, #0
 80100b2:	e0a0      	b.n	80101f6 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80100b4:	68bb      	ldr	r3, [r7, #8]
 80100b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	68dc      	ldr	r4, [r3, #12]
 80100bc:	4610      	mov	r0, r2
 80100be:	f7f9 feb7 	bl	8009e30 <lwip_htonl>
 80100c2:	4603      	mov	r3, r0
 80100c4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80100c6:	68bb      	ldr	r3, [r7, #8]
 80100c8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	68dc      	ldr	r4, [r3, #12]
 80100ce:	4610      	mov	r0, r2
 80100d0:	f7f9 fe99 	bl	8009e06 <lwip_htons>
 80100d4:	4603      	mov	r3, r0
 80100d6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80100d8:	68bb      	ldr	r3, [r7, #8]
 80100da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100dc:	68ba      	ldr	r2, [r7, #8]
 80100de:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80100e0:	441a      	add	r2, r3
 80100e2:	68bb      	ldr	r3, [r7, #8]
 80100e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	68db      	ldr	r3, [r3, #12]
 80100ea:	3314      	adds	r3, #20
 80100ec:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	7a9b      	ldrb	r3, [r3, #10]
 80100f2:	f003 0301 	and.w	r3, r3, #1
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d015      	beq.n	8010126 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	3304      	adds	r3, #4
 80100fe:	461a      	mov	r2, r3
 8010100:	6879      	ldr	r1, [r7, #4]
 8010102:	f44f 7006 	mov.w	r0, #536	; 0x218
 8010106:	f7fc fe8d 	bl	800ce24 <tcp_eff_send_mss_netif>
 801010a:	4603      	mov	r3, r0
 801010c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801010e:	8b7b      	ldrh	r3, [r7, #26]
 8010110:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010114:	4618      	mov	r0, r3
 8010116:	f7f9 fe8b 	bl	8009e30 <lwip_htonl>
 801011a:	4602      	mov	r2, r0
 801011c:	69fb      	ldr	r3, [r7, #28]
 801011e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010120:	69fb      	ldr	r3, [r7, #28]
 8010122:	3304      	adds	r3, #4
 8010124:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010126:	68bb      	ldr	r3, [r7, #8]
 8010128:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801012c:	2b00      	cmp	r3, #0
 801012e:	da02      	bge.n	8010136 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010130:	68bb      	ldr	r3, [r7, #8]
 8010132:	2200      	movs	r2, #0
 8010134:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010136:	68bb      	ldr	r3, [r7, #8]
 8010138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801013a:	2b00      	cmp	r3, #0
 801013c:	d10c      	bne.n	8010158 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801013e:	4b35      	ldr	r3, [pc, #212]	; (8010214 <tcp_output_segment+0x1b8>)
 8010140:	681a      	ldr	r2, [r3, #0]
 8010142:	68bb      	ldr	r3, [r7, #8]
 8010144:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	68db      	ldr	r3, [r3, #12]
 801014a:	685b      	ldr	r3, [r3, #4]
 801014c:	4618      	mov	r0, r3
 801014e:	f7f9 fe6f 	bl	8009e30 <lwip_htonl>
 8010152:	4602      	mov	r2, r0
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	68db      	ldr	r3, [r3, #12]
 801015c:	461a      	mov	r2, r3
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	685b      	ldr	r3, [r3, #4]
 8010162:	685b      	ldr	r3, [r3, #4]
 8010164:	1ad3      	subs	r3, r2, r3
 8010166:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	685b      	ldr	r3, [r3, #4]
 801016c:	8959      	ldrh	r1, [r3, #10]
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	685b      	ldr	r3, [r3, #4]
 8010172:	8b3a      	ldrh	r2, [r7, #24]
 8010174:	1a8a      	subs	r2, r1, r2
 8010176:	b292      	uxth	r2, r2
 8010178:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	685b      	ldr	r3, [r3, #4]
 801017e:	8919      	ldrh	r1, [r3, #8]
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	685b      	ldr	r3, [r3, #4]
 8010184:	8b3a      	ldrh	r2, [r7, #24]
 8010186:	1a8a      	subs	r2, r1, r2
 8010188:	b292      	uxth	r2, r2
 801018a:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	685b      	ldr	r3, [r3, #4]
 8010190:	68fa      	ldr	r2, [r7, #12]
 8010192:	68d2      	ldr	r2, [r2, #12]
 8010194:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	68db      	ldr	r3, [r3, #12]
 801019a:	2200      	movs	r2, #0
 801019c:	741a      	strb	r2, [r3, #16]
 801019e:	2200      	movs	r2, #0
 80101a0:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	68db      	ldr	r3, [r3, #12]
 80101a6:	f103 0214 	add.w	r2, r3, #20
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	7a9b      	ldrb	r3, [r3, #10]
 80101ae:	009b      	lsls	r3, r3, #2
 80101b0:	f003 0304 	and.w	r3, r3, #4
 80101b4:	4413      	add	r3, r2
 80101b6:	69fa      	ldr	r2, [r7, #28]
 80101b8:	429a      	cmp	r2, r3
 80101ba:	d006      	beq.n	80101ca <tcp_output_segment+0x16e>
 80101bc:	4b10      	ldr	r3, [pc, #64]	; (8010200 <tcp_output_segment+0x1a4>)
 80101be:	f240 621c 	movw	r2, #1564	; 0x61c
 80101c2:	4915      	ldr	r1, [pc, #84]	; (8010218 <tcp_output_segment+0x1bc>)
 80101c4:	4810      	ldr	r0, [pc, #64]	; (8010208 <tcp_output_segment+0x1ac>)
 80101c6:	f005 fd45 	bl	8015c54 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	6858      	ldr	r0, [r3, #4]
 80101ce:	68b9      	ldr	r1, [r7, #8]
 80101d0:	68bb      	ldr	r3, [r7, #8]
 80101d2:	1d1c      	adds	r4, r3, #4
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	7add      	ldrb	r5, [r3, #11]
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	7a9b      	ldrb	r3, [r3, #10]
 80101dc:	687a      	ldr	r2, [r7, #4]
 80101de:	9202      	str	r2, [sp, #8]
 80101e0:	2206      	movs	r2, #6
 80101e2:	9201      	str	r2, [sp, #4]
 80101e4:	9300      	str	r3, [sp, #0]
 80101e6:	462b      	mov	r3, r5
 80101e8:	4622      	mov	r2, r4
 80101ea:	f004 fc11 	bl	8014a10 <ip4_output_if>
 80101ee:	4603      	mov	r3, r0
 80101f0:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80101f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3720      	adds	r7, #32
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bdb0      	pop	{r4, r5, r7, pc}
 80101fe:	bf00      	nop
 8010200:	080180b8 	.word	0x080180b8
 8010204:	0801867c 	.word	0x0801867c
 8010208:	0801810c 	.word	0x0801810c
 801020c:	0801869c 	.word	0x0801869c
 8010210:	080186bc 	.word	0x080186bc
 8010214:	200076f8 	.word	0x200076f8
 8010218:	080186e0 	.word	0x080186e0

0801021c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801021c:	b5b0      	push	{r4, r5, r7, lr}
 801021e:	b084      	sub	sp, #16
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d106      	bne.n	8010238 <tcp_rexmit_rto_prepare+0x1c>
 801022a:	4b31      	ldr	r3, [pc, #196]	; (80102f0 <tcp_rexmit_rto_prepare+0xd4>)
 801022c:	f240 6263 	movw	r2, #1635	; 0x663
 8010230:	4930      	ldr	r1, [pc, #192]	; (80102f4 <tcp_rexmit_rto_prepare+0xd8>)
 8010232:	4831      	ldr	r0, [pc, #196]	; (80102f8 <tcp_rexmit_rto_prepare+0xdc>)
 8010234:	f005 fd0e 	bl	8015c54 <iprintf>

  if (pcb->unacked == NULL) {
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801023c:	2b00      	cmp	r3, #0
 801023e:	d102      	bne.n	8010246 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010240:	f06f 0305 	mvn.w	r3, #5
 8010244:	e050      	b.n	80102e8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801024a:	60fb      	str	r3, [r7, #12]
 801024c:	e00b      	b.n	8010266 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801024e:	68f8      	ldr	r0, [r7, #12]
 8010250:	f7ff fee4 	bl	801001c <tcp_output_segment_busy>
 8010254:	4603      	mov	r3, r0
 8010256:	2b00      	cmp	r3, #0
 8010258:	d002      	beq.n	8010260 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801025a:	f06f 0305 	mvn.w	r3, #5
 801025e:	e043      	b.n	80102e8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	60fb      	str	r3, [r7, #12]
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d1ef      	bne.n	801024e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801026e:	68f8      	ldr	r0, [r7, #12]
 8010270:	f7ff fed4 	bl	801001c <tcp_output_segment_busy>
 8010274:	4603      	mov	r3, r0
 8010276:	2b00      	cmp	r3, #0
 8010278:	d002      	beq.n	8010280 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801027a:	f06f 0305 	mvn.w	r3, #5
 801027e:	e033      	b.n	80102e8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2200      	movs	r2, #0
 8010294:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	8b5b      	ldrh	r3, [r3, #26]
 801029a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801029e:	b29a      	uxth	r2, r3
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	68db      	ldr	r3, [r3, #12]
 80102a8:	685b      	ldr	r3, [r3, #4]
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7f9 fdc0 	bl	8009e30 <lwip_htonl>
 80102b0:	4604      	mov	r4, r0
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	891b      	ldrh	r3, [r3, #8]
 80102b6:	461d      	mov	r5, r3
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	68db      	ldr	r3, [r3, #12]
 80102bc:	899b      	ldrh	r3, [r3, #12]
 80102be:	b29b      	uxth	r3, r3
 80102c0:	4618      	mov	r0, r3
 80102c2:	f7f9 fda0 	bl	8009e06 <lwip_htons>
 80102c6:	4603      	mov	r3, r0
 80102c8:	b2db      	uxtb	r3, r3
 80102ca:	f003 0303 	and.w	r3, r3, #3
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d001      	beq.n	80102d6 <tcp_rexmit_rto_prepare+0xba>
 80102d2:	2301      	movs	r3, #1
 80102d4:	e000      	b.n	80102d8 <tcp_rexmit_rto_prepare+0xbc>
 80102d6:	2300      	movs	r3, #0
 80102d8:	442b      	add	r3, r5
 80102da:	18e2      	adds	r2, r4, r3
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	2200      	movs	r2, #0
 80102e4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80102e6:	2300      	movs	r3, #0
}
 80102e8:	4618      	mov	r0, r3
 80102ea:	3710      	adds	r7, #16
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bdb0      	pop	{r4, r5, r7, pc}
 80102f0:	080180b8 	.word	0x080180b8
 80102f4:	080186f4 	.word	0x080186f4
 80102f8:	0801810c 	.word	0x0801810c

080102fc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b082      	sub	sp, #8
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d106      	bne.n	8010318 <tcp_rexmit_rto_commit+0x1c>
 801030a:	4b0d      	ldr	r3, [pc, #52]	; (8010340 <tcp_rexmit_rto_commit+0x44>)
 801030c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010310:	490c      	ldr	r1, [pc, #48]	; (8010344 <tcp_rexmit_rto_commit+0x48>)
 8010312:	480d      	ldr	r0, [pc, #52]	; (8010348 <tcp_rexmit_rto_commit+0x4c>)
 8010314:	f005 fc9e 	bl	8015c54 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801031e:	2bff      	cmp	r3, #255	; 0xff
 8010320:	d007      	beq.n	8010332 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010328:	3301      	adds	r3, #1
 801032a:	b2da      	uxtb	r2, r3
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8010332:	6878      	ldr	r0, [r7, #4]
 8010334:	f7ff fc7a 	bl	800fc2c <tcp_output>
}
 8010338:	bf00      	nop
 801033a:	3708      	adds	r7, #8
 801033c:	46bd      	mov	sp, r7
 801033e:	bd80      	pop	{r7, pc}
 8010340:	080180b8 	.word	0x080180b8
 8010344:	08018718 	.word	0x08018718
 8010348:	0801810c 	.word	0x0801810c

0801034c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b082      	sub	sp, #8
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d106      	bne.n	8010368 <tcp_rexmit_rto+0x1c>
 801035a:	4b0a      	ldr	r3, [pc, #40]	; (8010384 <tcp_rexmit_rto+0x38>)
 801035c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010360:	4909      	ldr	r1, [pc, #36]	; (8010388 <tcp_rexmit_rto+0x3c>)
 8010362:	480a      	ldr	r0, [pc, #40]	; (801038c <tcp_rexmit_rto+0x40>)
 8010364:	f005 fc76 	bl	8015c54 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	f7ff ff57 	bl	801021c <tcp_rexmit_rto_prepare>
 801036e:	4603      	mov	r3, r0
 8010370:	2b00      	cmp	r3, #0
 8010372:	d102      	bne.n	801037a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010374:	6878      	ldr	r0, [r7, #4]
 8010376:	f7ff ffc1 	bl	80102fc <tcp_rexmit_rto_commit>
  }
}
 801037a:	bf00      	nop
 801037c:	3708      	adds	r7, #8
 801037e:	46bd      	mov	sp, r7
 8010380:	bd80      	pop	{r7, pc}
 8010382:	bf00      	nop
 8010384:	080180b8 	.word	0x080180b8
 8010388:	0801873c 	.word	0x0801873c
 801038c:	0801810c 	.word	0x0801810c

08010390 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010390:	b590      	push	{r4, r7, lr}
 8010392:	b085      	sub	sp, #20
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d106      	bne.n	80103ac <tcp_rexmit+0x1c>
 801039e:	4b2f      	ldr	r3, [pc, #188]	; (801045c <tcp_rexmit+0xcc>)
 80103a0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80103a4:	492e      	ldr	r1, [pc, #184]	; (8010460 <tcp_rexmit+0xd0>)
 80103a6:	482f      	ldr	r0, [pc, #188]	; (8010464 <tcp_rexmit+0xd4>)
 80103a8:	f005 fc54 	bl	8015c54 <iprintf>

  if (pcb->unacked == NULL) {
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d102      	bne.n	80103ba <tcp_rexmit+0x2a>
    return ERR_VAL;
 80103b4:	f06f 0305 	mvn.w	r3, #5
 80103b8:	e04c      	b.n	8010454 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103be:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80103c0:	68b8      	ldr	r0, [r7, #8]
 80103c2:	f7ff fe2b 	bl	801001c <tcp_output_segment_busy>
 80103c6:	4603      	mov	r3, r0
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d002      	beq.n	80103d2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80103cc:	f06f 0305 	mvn.w	r3, #5
 80103d0:	e040      	b.n	8010454 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80103d2:	68bb      	ldr	r3, [r7, #8]
 80103d4:	681a      	ldr	r2, [r3, #0]
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	336c      	adds	r3, #108	; 0x6c
 80103de:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80103e0:	e002      	b.n	80103e8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d011      	beq.n	8010414 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	68db      	ldr	r3, [r3, #12]
 80103f6:	685b      	ldr	r3, [r3, #4]
 80103f8:	4618      	mov	r0, r3
 80103fa:	f7f9 fd19 	bl	8009e30 <lwip_htonl>
 80103fe:	4604      	mov	r4, r0
 8010400:	68bb      	ldr	r3, [r7, #8]
 8010402:	68db      	ldr	r3, [r3, #12]
 8010404:	685b      	ldr	r3, [r3, #4]
 8010406:	4618      	mov	r0, r3
 8010408:	f7f9 fd12 	bl	8009e30 <lwip_htonl>
 801040c:	4603      	mov	r3, r0
 801040e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010410:	2b00      	cmp	r3, #0
 8010412:	dbe6      	blt.n	80103e2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	681a      	ldr	r2, [r3, #0]
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	68ba      	ldr	r2, [r7, #8]
 8010420:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d103      	bne.n	8010432 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	2200      	movs	r2, #0
 801042e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010438:	2bff      	cmp	r3, #255	; 0xff
 801043a:	d007      	beq.n	801044c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010442:	3301      	adds	r3, #1
 8010444:	b2da      	uxtb	r2, r3
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2200      	movs	r2, #0
 8010450:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010452:	2300      	movs	r3, #0
}
 8010454:	4618      	mov	r0, r3
 8010456:	3714      	adds	r7, #20
 8010458:	46bd      	mov	sp, r7
 801045a:	bd90      	pop	{r4, r7, pc}
 801045c:	080180b8 	.word	0x080180b8
 8010460:	08018758 	.word	0x08018758
 8010464:	0801810c 	.word	0x0801810c

08010468 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	b082      	sub	sp, #8
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d106      	bne.n	8010484 <tcp_rexmit_fast+0x1c>
 8010476:	4b2e      	ldr	r3, [pc, #184]	; (8010530 <tcp_rexmit_fast+0xc8>)
 8010478:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801047c:	492d      	ldr	r1, [pc, #180]	; (8010534 <tcp_rexmit_fast+0xcc>)
 801047e:	482e      	ldr	r0, [pc, #184]	; (8010538 <tcp_rexmit_fast+0xd0>)
 8010480:	f005 fbe8 	bl	8015c54 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010488:	2b00      	cmp	r3, #0
 801048a:	d04d      	beq.n	8010528 <tcp_rexmit_fast+0xc0>
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	8b5b      	ldrh	r3, [r3, #26]
 8010490:	f003 0304 	and.w	r3, r3, #4
 8010494:	2b00      	cmp	r3, #0
 8010496:	d147      	bne.n	8010528 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010498:	6878      	ldr	r0, [r7, #4]
 801049a:	f7ff ff79 	bl	8010390 <tcp_rexmit>
 801049e:	4603      	mov	r3, r0
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d141      	bne.n	8010528 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80104b0:	429a      	cmp	r2, r3
 80104b2:	d207      	bcs.n	80104c4 <tcp_rexmit_fast+0x5c>
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80104ba:	0fda      	lsrs	r2, r3, #31
 80104bc:	4413      	add	r3, r2
 80104be:	105b      	asrs	r3, r3, #1
 80104c0:	b29b      	uxth	r3, r3
 80104c2:	e006      	b.n	80104d2 <tcp_rexmit_fast+0x6a>
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80104ca:	0fda      	lsrs	r2, r3, #31
 80104cc:	4413      	add	r3, r2
 80104ce:	105b      	asrs	r3, r3, #1
 80104d0:	b29b      	uxth	r3, r3
 80104d2:	687a      	ldr	r2, [r7, #4]
 80104d4:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80104de:	461a      	mov	r2, r3
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104e4:	005b      	lsls	r3, r3, #1
 80104e6:	429a      	cmp	r2, r3
 80104e8:	d206      	bcs.n	80104f8 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104ee:	005b      	lsls	r3, r3, #1
 80104f0:	b29a      	uxth	r2, r3
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010502:	4619      	mov	r1, r3
 8010504:	0049      	lsls	r1, r1, #1
 8010506:	440b      	add	r3, r1
 8010508:	b29b      	uxth	r3, r3
 801050a:	4413      	add	r3, r2
 801050c:	b29a      	uxth	r2, r3
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	8b5b      	ldrh	r3, [r3, #26]
 8010518:	f043 0304 	orr.w	r3, r3, #4
 801051c:	b29a      	uxth	r2, r3
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	2200      	movs	r2, #0
 8010526:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010528:	bf00      	nop
 801052a:	3708      	adds	r7, #8
 801052c:	46bd      	mov	sp, r7
 801052e:	bd80      	pop	{r7, pc}
 8010530:	080180b8 	.word	0x080180b8
 8010534:	08018770 	.word	0x08018770
 8010538:	0801810c 	.word	0x0801810c

0801053c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b086      	sub	sp, #24
 8010540:	af00      	add	r7, sp, #0
 8010542:	60f8      	str	r0, [r7, #12]
 8010544:	607b      	str	r3, [r7, #4]
 8010546:	460b      	mov	r3, r1
 8010548:	817b      	strh	r3, [r7, #10]
 801054a:	4613      	mov	r3, r2
 801054c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801054e:	897a      	ldrh	r2, [r7, #10]
 8010550:	893b      	ldrh	r3, [r7, #8]
 8010552:	4413      	add	r3, r2
 8010554:	b29b      	uxth	r3, r3
 8010556:	3314      	adds	r3, #20
 8010558:	b29b      	uxth	r3, r3
 801055a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801055e:	4619      	mov	r1, r3
 8010560:	2022      	movs	r0, #34	; 0x22
 8010562:	f7fa fc11 	bl	800ad88 <pbuf_alloc>
 8010566:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010568:	697b      	ldr	r3, [r7, #20]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d04e      	beq.n	801060c <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	895b      	ldrh	r3, [r3, #10]
 8010572:	461a      	mov	r2, r3
 8010574:	897b      	ldrh	r3, [r7, #10]
 8010576:	3314      	adds	r3, #20
 8010578:	429a      	cmp	r2, r3
 801057a:	da06      	bge.n	801058a <tcp_output_alloc_header_common+0x4e>
 801057c:	4b26      	ldr	r3, [pc, #152]	; (8010618 <tcp_output_alloc_header_common+0xdc>)
 801057e:	f240 7224 	movw	r2, #1828	; 0x724
 8010582:	4926      	ldr	r1, [pc, #152]	; (801061c <tcp_output_alloc_header_common+0xe0>)
 8010584:	4826      	ldr	r0, [pc, #152]	; (8010620 <tcp_output_alloc_header_common+0xe4>)
 8010586:	f005 fb65 	bl	8015c54 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801058a:	697b      	ldr	r3, [r7, #20]
 801058c:	685b      	ldr	r3, [r3, #4]
 801058e:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010590:	8c3b      	ldrh	r3, [r7, #32]
 8010592:	4618      	mov	r0, r3
 8010594:	f7f9 fc37 	bl	8009e06 <lwip_htons>
 8010598:	4603      	mov	r3, r0
 801059a:	461a      	mov	r2, r3
 801059c:	693b      	ldr	r3, [r7, #16]
 801059e:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80105a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80105a2:	4618      	mov	r0, r3
 80105a4:	f7f9 fc2f 	bl	8009e06 <lwip_htons>
 80105a8:	4603      	mov	r3, r0
 80105aa:	461a      	mov	r2, r3
 80105ac:	693b      	ldr	r3, [r7, #16]
 80105ae:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80105b0:	693b      	ldr	r3, [r7, #16]
 80105b2:	687a      	ldr	r2, [r7, #4]
 80105b4:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80105b6:	68f8      	ldr	r0, [r7, #12]
 80105b8:	f7f9 fc3a 	bl	8009e30 <lwip_htonl>
 80105bc:	4602      	mov	r2, r0
 80105be:	693b      	ldr	r3, [r7, #16]
 80105c0:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80105c2:	897b      	ldrh	r3, [r7, #10]
 80105c4:	089b      	lsrs	r3, r3, #2
 80105c6:	b29b      	uxth	r3, r3
 80105c8:	3305      	adds	r3, #5
 80105ca:	b29b      	uxth	r3, r3
 80105cc:	031b      	lsls	r3, r3, #12
 80105ce:	b29a      	uxth	r2, r3
 80105d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80105d4:	b29b      	uxth	r3, r3
 80105d6:	4313      	orrs	r3, r2
 80105d8:	b29b      	uxth	r3, r3
 80105da:	4618      	mov	r0, r3
 80105dc:	f7f9 fc13 	bl	8009e06 <lwip_htons>
 80105e0:	4603      	mov	r3, r0
 80105e2:	461a      	mov	r2, r3
 80105e4:	693b      	ldr	r3, [r7, #16]
 80105e6:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80105e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80105ea:	4618      	mov	r0, r3
 80105ec:	f7f9 fc0b 	bl	8009e06 <lwip_htons>
 80105f0:	4603      	mov	r3, r0
 80105f2:	461a      	mov	r2, r3
 80105f4:	693b      	ldr	r3, [r7, #16]
 80105f6:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80105f8:	693b      	ldr	r3, [r7, #16]
 80105fa:	2200      	movs	r2, #0
 80105fc:	741a      	strb	r2, [r3, #16]
 80105fe:	2200      	movs	r2, #0
 8010600:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010602:	693b      	ldr	r3, [r7, #16]
 8010604:	2200      	movs	r2, #0
 8010606:	749a      	strb	r2, [r3, #18]
 8010608:	2200      	movs	r2, #0
 801060a:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801060c:	697b      	ldr	r3, [r7, #20]
}
 801060e:	4618      	mov	r0, r3
 8010610:	3718      	adds	r7, #24
 8010612:	46bd      	mov	sp, r7
 8010614:	bd80      	pop	{r7, pc}
 8010616:	bf00      	nop
 8010618:	080180b8 	.word	0x080180b8
 801061c:	08018790 	.word	0x08018790
 8010620:	0801810c 	.word	0x0801810c

08010624 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010624:	b5b0      	push	{r4, r5, r7, lr}
 8010626:	b08a      	sub	sp, #40	; 0x28
 8010628:	af04      	add	r7, sp, #16
 801062a:	60f8      	str	r0, [r7, #12]
 801062c:	607b      	str	r3, [r7, #4]
 801062e:	460b      	mov	r3, r1
 8010630:	817b      	strh	r3, [r7, #10]
 8010632:	4613      	mov	r3, r2
 8010634:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d106      	bne.n	801064a <tcp_output_alloc_header+0x26>
 801063c:	4b15      	ldr	r3, [pc, #84]	; (8010694 <tcp_output_alloc_header+0x70>)
 801063e:	f240 7242 	movw	r2, #1858	; 0x742
 8010642:	4915      	ldr	r1, [pc, #84]	; (8010698 <tcp_output_alloc_header+0x74>)
 8010644:	4815      	ldr	r0, [pc, #84]	; (801069c <tcp_output_alloc_header+0x78>)
 8010646:	f005 fb05 	bl	8015c54 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	8adb      	ldrh	r3, [r3, #22]
 8010652:	68fa      	ldr	r2, [r7, #12]
 8010654:	8b12      	ldrh	r2, [r2, #24]
 8010656:	68f9      	ldr	r1, [r7, #12]
 8010658:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801065a:	893d      	ldrh	r5, [r7, #8]
 801065c:	897c      	ldrh	r4, [r7, #10]
 801065e:	9103      	str	r1, [sp, #12]
 8010660:	2110      	movs	r1, #16
 8010662:	9102      	str	r1, [sp, #8]
 8010664:	9201      	str	r2, [sp, #4]
 8010666:	9300      	str	r3, [sp, #0]
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	462a      	mov	r2, r5
 801066c:	4621      	mov	r1, r4
 801066e:	f7ff ff65 	bl	801053c <tcp_output_alloc_header_common>
 8010672:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010674:	697b      	ldr	r3, [r7, #20]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d006      	beq.n	8010688 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801067e:	68fa      	ldr	r2, [r7, #12]
 8010680:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010682:	441a      	add	r2, r3
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010688:	697b      	ldr	r3, [r7, #20]
}
 801068a:	4618      	mov	r0, r3
 801068c:	3718      	adds	r7, #24
 801068e:	46bd      	mov	sp, r7
 8010690:	bdb0      	pop	{r4, r5, r7, pc}
 8010692:	bf00      	nop
 8010694:	080180b8 	.word	0x080180b8
 8010698:	080187c0 	.word	0x080187c0
 801069c:	0801810c 	.word	0x0801810c

080106a0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b088      	sub	sp, #32
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	60f8      	str	r0, [r7, #12]
 80106a8:	60b9      	str	r1, [r7, #8]
 80106aa:	4611      	mov	r1, r2
 80106ac:	461a      	mov	r2, r3
 80106ae:	460b      	mov	r3, r1
 80106b0:	71fb      	strb	r3, [r7, #7]
 80106b2:	4613      	mov	r3, r2
 80106b4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80106b6:	2300      	movs	r3, #0
 80106b8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d106      	bne.n	80106ce <tcp_output_fill_options+0x2e>
 80106c0:	4b13      	ldr	r3, [pc, #76]	; (8010710 <tcp_output_fill_options+0x70>)
 80106c2:	f240 7256 	movw	r2, #1878	; 0x756
 80106c6:	4913      	ldr	r1, [pc, #76]	; (8010714 <tcp_output_fill_options+0x74>)
 80106c8:	4813      	ldr	r0, [pc, #76]	; (8010718 <tcp_output_fill_options+0x78>)
 80106ca:	f005 fac3 	bl	8015c54 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80106ce:	68bb      	ldr	r3, [r7, #8]
 80106d0:	685b      	ldr	r3, [r3, #4]
 80106d2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80106d4:	69bb      	ldr	r3, [r7, #24]
 80106d6:	3314      	adds	r3, #20
 80106d8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80106da:	69bb      	ldr	r3, [r7, #24]
 80106dc:	f103 0214 	add.w	r2, r3, #20
 80106e0:	8bfb      	ldrh	r3, [r7, #30]
 80106e2:	009b      	lsls	r3, r3, #2
 80106e4:	4619      	mov	r1, r3
 80106e6:	79fb      	ldrb	r3, [r7, #7]
 80106e8:	009b      	lsls	r3, r3, #2
 80106ea:	f003 0304 	and.w	r3, r3, #4
 80106ee:	440b      	add	r3, r1
 80106f0:	4413      	add	r3, r2
 80106f2:	697a      	ldr	r2, [r7, #20]
 80106f4:	429a      	cmp	r2, r3
 80106f6:	d006      	beq.n	8010706 <tcp_output_fill_options+0x66>
 80106f8:	4b05      	ldr	r3, [pc, #20]	; (8010710 <tcp_output_fill_options+0x70>)
 80106fa:	f240 7275 	movw	r2, #1909	; 0x775
 80106fe:	4907      	ldr	r1, [pc, #28]	; (801071c <tcp_output_fill_options+0x7c>)
 8010700:	4805      	ldr	r0, [pc, #20]	; (8010718 <tcp_output_fill_options+0x78>)
 8010702:	f005 faa7 	bl	8015c54 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010706:	bf00      	nop
 8010708:	3720      	adds	r7, #32
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}
 801070e:	bf00      	nop
 8010710:	080180b8 	.word	0x080180b8
 8010714:	080187e8 	.word	0x080187e8
 8010718:	0801810c 	.word	0x0801810c
 801071c:	080186e0 	.word	0x080186e0

08010720 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b08a      	sub	sp, #40	; 0x28
 8010724:	af04      	add	r7, sp, #16
 8010726:	60f8      	str	r0, [r7, #12]
 8010728:	60b9      	str	r1, [r7, #8]
 801072a:	607a      	str	r2, [r7, #4]
 801072c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801072e:	68bb      	ldr	r3, [r7, #8]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d106      	bne.n	8010742 <tcp_output_control_segment+0x22>
 8010734:	4b1c      	ldr	r3, [pc, #112]	; (80107a8 <tcp_output_control_segment+0x88>)
 8010736:	f240 7287 	movw	r2, #1927	; 0x787
 801073a:	491c      	ldr	r1, [pc, #112]	; (80107ac <tcp_output_control_segment+0x8c>)
 801073c:	481c      	ldr	r0, [pc, #112]	; (80107b0 <tcp_output_control_segment+0x90>)
 801073e:	f005 fa89 	bl	8015c54 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010742:	683a      	ldr	r2, [r7, #0]
 8010744:	6879      	ldr	r1, [r7, #4]
 8010746:	68f8      	ldr	r0, [r7, #12]
 8010748:	f7fe ff30 	bl	800f5ac <tcp_route>
 801074c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801074e:	693b      	ldr	r3, [r7, #16]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d102      	bne.n	801075a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010754:	23fc      	movs	r3, #252	; 0xfc
 8010756:	75fb      	strb	r3, [r7, #23]
 8010758:	e01c      	b.n	8010794 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d006      	beq.n	801076e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	7adb      	ldrb	r3, [r3, #11]
 8010764:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	7a9b      	ldrb	r3, [r3, #10]
 801076a:	757b      	strb	r3, [r7, #21]
 801076c:	e003      	b.n	8010776 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801076e:	23ff      	movs	r3, #255	; 0xff
 8010770:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010772:	2300      	movs	r3, #0
 8010774:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010776:	7dba      	ldrb	r2, [r7, #22]
 8010778:	693b      	ldr	r3, [r7, #16]
 801077a:	9302      	str	r3, [sp, #8]
 801077c:	2306      	movs	r3, #6
 801077e:	9301      	str	r3, [sp, #4]
 8010780:	7d7b      	ldrb	r3, [r7, #21]
 8010782:	9300      	str	r3, [sp, #0]
 8010784:	4613      	mov	r3, r2
 8010786:	683a      	ldr	r2, [r7, #0]
 8010788:	6879      	ldr	r1, [r7, #4]
 801078a:	68b8      	ldr	r0, [r7, #8]
 801078c:	f004 f940 	bl	8014a10 <ip4_output_if>
 8010790:	4603      	mov	r3, r0
 8010792:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010794:	68b8      	ldr	r0, [r7, #8]
 8010796:	f7fa fdd7 	bl	800b348 <pbuf_free>
  return err;
 801079a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801079e:	4618      	mov	r0, r3
 80107a0:	3718      	adds	r7, #24
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd80      	pop	{r7, pc}
 80107a6:	bf00      	nop
 80107a8:	080180b8 	.word	0x080180b8
 80107ac:	08018810 	.word	0x08018810
 80107b0:	0801810c 	.word	0x0801810c

080107b4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80107b4:	b590      	push	{r4, r7, lr}
 80107b6:	b08b      	sub	sp, #44	; 0x2c
 80107b8:	af04      	add	r7, sp, #16
 80107ba:	60f8      	str	r0, [r7, #12]
 80107bc:	60b9      	str	r1, [r7, #8]
 80107be:	607a      	str	r2, [r7, #4]
 80107c0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80107c2:	683b      	ldr	r3, [r7, #0]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d106      	bne.n	80107d6 <tcp_rst+0x22>
 80107c8:	4b1f      	ldr	r3, [pc, #124]	; (8010848 <tcp_rst+0x94>)
 80107ca:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80107ce:	491f      	ldr	r1, [pc, #124]	; (801084c <tcp_rst+0x98>)
 80107d0:	481f      	ldr	r0, [pc, #124]	; (8010850 <tcp_rst+0x9c>)
 80107d2:	f005 fa3f 	bl	8015c54 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80107d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d106      	bne.n	80107ea <tcp_rst+0x36>
 80107dc:	4b1a      	ldr	r3, [pc, #104]	; (8010848 <tcp_rst+0x94>)
 80107de:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80107e2:	491c      	ldr	r1, [pc, #112]	; (8010854 <tcp_rst+0xa0>)
 80107e4:	481a      	ldr	r0, [pc, #104]	; (8010850 <tcp_rst+0x9c>)
 80107e6:	f005 fa35 	bl	8015c54 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80107ea:	2300      	movs	r3, #0
 80107ec:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80107ee:	f246 0308 	movw	r3, #24584	; 0x6008
 80107f2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80107f4:	7dfb      	ldrb	r3, [r7, #23]
 80107f6:	b29c      	uxth	r4, r3
 80107f8:	68b8      	ldr	r0, [r7, #8]
 80107fa:	f7f9 fb19 	bl	8009e30 <lwip_htonl>
 80107fe:	4602      	mov	r2, r0
 8010800:	8abb      	ldrh	r3, [r7, #20]
 8010802:	9303      	str	r3, [sp, #12]
 8010804:	2314      	movs	r3, #20
 8010806:	9302      	str	r3, [sp, #8]
 8010808:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801080a:	9301      	str	r3, [sp, #4]
 801080c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801080e:	9300      	str	r3, [sp, #0]
 8010810:	4613      	mov	r3, r2
 8010812:	2200      	movs	r2, #0
 8010814:	4621      	mov	r1, r4
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	f7ff fe90 	bl	801053c <tcp_output_alloc_header_common>
 801081c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801081e:	693b      	ldr	r3, [r7, #16]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d00c      	beq.n	801083e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010824:	7dfb      	ldrb	r3, [r7, #23]
 8010826:	2200      	movs	r2, #0
 8010828:	6939      	ldr	r1, [r7, #16]
 801082a:	68f8      	ldr	r0, [r7, #12]
 801082c:	f7ff ff38 	bl	80106a0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010832:	683a      	ldr	r2, [r7, #0]
 8010834:	6939      	ldr	r1, [r7, #16]
 8010836:	68f8      	ldr	r0, [r7, #12]
 8010838:	f7ff ff72 	bl	8010720 <tcp_output_control_segment>
 801083c:	e000      	b.n	8010840 <tcp_rst+0x8c>
    return;
 801083e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010840:	371c      	adds	r7, #28
 8010842:	46bd      	mov	sp, r7
 8010844:	bd90      	pop	{r4, r7, pc}
 8010846:	bf00      	nop
 8010848:	080180b8 	.word	0x080180b8
 801084c:	0801883c 	.word	0x0801883c
 8010850:	0801810c 	.word	0x0801810c
 8010854:	08018858 	.word	0x08018858

08010858 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010858:	b590      	push	{r4, r7, lr}
 801085a:	b087      	sub	sp, #28
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010860:	2300      	movs	r3, #0
 8010862:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010864:	2300      	movs	r3, #0
 8010866:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d106      	bne.n	801087c <tcp_send_empty_ack+0x24>
 801086e:	4b28      	ldr	r3, [pc, #160]	; (8010910 <tcp_send_empty_ack+0xb8>)
 8010870:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8010874:	4927      	ldr	r1, [pc, #156]	; (8010914 <tcp_send_empty_ack+0xbc>)
 8010876:	4828      	ldr	r0, [pc, #160]	; (8010918 <tcp_send_empty_ack+0xc0>)
 8010878:	f005 f9ec 	bl	8015c54 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801087c:	7dfb      	ldrb	r3, [r7, #23]
 801087e:	009b      	lsls	r3, r3, #2
 8010880:	b2db      	uxtb	r3, r3
 8010882:	f003 0304 	and.w	r3, r3, #4
 8010886:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010888:	7d7b      	ldrb	r3, [r7, #21]
 801088a:	b29c      	uxth	r4, r3
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010890:	4618      	mov	r0, r3
 8010892:	f7f9 facd 	bl	8009e30 <lwip_htonl>
 8010896:	4603      	mov	r3, r0
 8010898:	2200      	movs	r2, #0
 801089a:	4621      	mov	r1, r4
 801089c:	6878      	ldr	r0, [r7, #4]
 801089e:	f7ff fec1 	bl	8010624 <tcp_output_alloc_header>
 80108a2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d109      	bne.n	80108be <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	8b5b      	ldrh	r3, [r3, #26]
 80108ae:	f043 0303 	orr.w	r3, r3, #3
 80108b2:	b29a      	uxth	r2, r3
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80108b8:	f06f 0301 	mvn.w	r3, #1
 80108bc:	e023      	b.n	8010906 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80108be:	7dbb      	ldrb	r3, [r7, #22]
 80108c0:	7dfa      	ldrb	r2, [r7, #23]
 80108c2:	6939      	ldr	r1, [r7, #16]
 80108c4:	6878      	ldr	r0, [r7, #4]
 80108c6:	f7ff feeb 	bl	80106a0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80108ca:	687a      	ldr	r2, [r7, #4]
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	3304      	adds	r3, #4
 80108d0:	6939      	ldr	r1, [r7, #16]
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f7ff ff24 	bl	8010720 <tcp_output_control_segment>
 80108d8:	4603      	mov	r3, r0
 80108da:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80108dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d007      	beq.n	80108f4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	8b5b      	ldrh	r3, [r3, #26]
 80108e8:	f043 0303 	orr.w	r3, r3, #3
 80108ec:	b29a      	uxth	r2, r3
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	835a      	strh	r2, [r3, #26]
 80108f2:	e006      	b.n	8010902 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	8b5b      	ldrh	r3, [r3, #26]
 80108f8:	f023 0303 	bic.w	r3, r3, #3
 80108fc:	b29a      	uxth	r2, r3
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8010902:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010906:	4618      	mov	r0, r3
 8010908:	371c      	adds	r7, #28
 801090a:	46bd      	mov	sp, r7
 801090c:	bd90      	pop	{r4, r7, pc}
 801090e:	bf00      	nop
 8010910:	080180b8 	.word	0x080180b8
 8010914:	08018874 	.word	0x08018874
 8010918:	0801810c 	.word	0x0801810c

0801091c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801091c:	b590      	push	{r4, r7, lr}
 801091e:	b087      	sub	sp, #28
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010924:	2300      	movs	r3, #0
 8010926:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d106      	bne.n	801093c <tcp_keepalive+0x20>
 801092e:	4b18      	ldr	r3, [pc, #96]	; (8010990 <tcp_keepalive+0x74>)
 8010930:	f640 0224 	movw	r2, #2084	; 0x824
 8010934:	4917      	ldr	r1, [pc, #92]	; (8010994 <tcp_keepalive+0x78>)
 8010936:	4818      	ldr	r0, [pc, #96]	; (8010998 <tcp_keepalive+0x7c>)
 8010938:	f005 f98c 	bl	8015c54 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801093c:	7dfb      	ldrb	r3, [r7, #23]
 801093e:	b29c      	uxth	r4, r3
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010944:	3b01      	subs	r3, #1
 8010946:	4618      	mov	r0, r3
 8010948:	f7f9 fa72 	bl	8009e30 <lwip_htonl>
 801094c:	4603      	mov	r3, r0
 801094e:	2200      	movs	r2, #0
 8010950:	4621      	mov	r1, r4
 8010952:	6878      	ldr	r0, [r7, #4]
 8010954:	f7ff fe66 	bl	8010624 <tcp_output_alloc_header>
 8010958:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801095a:	693b      	ldr	r3, [r7, #16]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d102      	bne.n	8010966 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010960:	f04f 33ff 	mov.w	r3, #4294967295
 8010964:	e010      	b.n	8010988 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010966:	7dfb      	ldrb	r3, [r7, #23]
 8010968:	2200      	movs	r2, #0
 801096a:	6939      	ldr	r1, [r7, #16]
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	f7ff fe97 	bl	80106a0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010972:	687a      	ldr	r2, [r7, #4]
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	3304      	adds	r3, #4
 8010978:	6939      	ldr	r1, [r7, #16]
 801097a:	6878      	ldr	r0, [r7, #4]
 801097c:	f7ff fed0 	bl	8010720 <tcp_output_control_segment>
 8010980:	4603      	mov	r3, r0
 8010982:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010984:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010988:	4618      	mov	r0, r3
 801098a:	371c      	adds	r7, #28
 801098c:	46bd      	mov	sp, r7
 801098e:	bd90      	pop	{r4, r7, pc}
 8010990:	080180b8 	.word	0x080180b8
 8010994:	08018894 	.word	0x08018894
 8010998:	0801810c 	.word	0x0801810c

0801099c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801099c:	b590      	push	{r4, r7, lr}
 801099e:	b08b      	sub	sp, #44	; 0x2c
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80109a4:	2300      	movs	r3, #0
 80109a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d106      	bne.n	80109be <tcp_zero_window_probe+0x22>
 80109b0:	4b4c      	ldr	r3, [pc, #304]	; (8010ae4 <tcp_zero_window_probe+0x148>)
 80109b2:	f640 024f 	movw	r2, #2127	; 0x84f
 80109b6:	494c      	ldr	r1, [pc, #304]	; (8010ae8 <tcp_zero_window_probe+0x14c>)
 80109b8:	484c      	ldr	r0, [pc, #304]	; (8010aec <tcp_zero_window_probe+0x150>)
 80109ba:	f005 f94b 	bl	8015c54 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109c2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80109c4:	6a3b      	ldr	r3, [r7, #32]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d101      	bne.n	80109ce <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80109ca:	2300      	movs	r3, #0
 80109cc:	e086      	b.n	8010adc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80109d4:	2bff      	cmp	r3, #255	; 0xff
 80109d6:	d007      	beq.n	80109e8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80109de:	3301      	adds	r3, #1
 80109e0:	b2da      	uxtb	r2, r3
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80109e8:	6a3b      	ldr	r3, [r7, #32]
 80109ea:	68db      	ldr	r3, [r3, #12]
 80109ec:	899b      	ldrh	r3, [r3, #12]
 80109ee:	b29b      	uxth	r3, r3
 80109f0:	4618      	mov	r0, r3
 80109f2:	f7f9 fa08 	bl	8009e06 <lwip_htons>
 80109f6:	4603      	mov	r3, r0
 80109f8:	b2db      	uxtb	r3, r3
 80109fa:	f003 0301 	and.w	r3, r3, #1
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d005      	beq.n	8010a0e <tcp_zero_window_probe+0x72>
 8010a02:	6a3b      	ldr	r3, [r7, #32]
 8010a04:	891b      	ldrh	r3, [r3, #8]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d101      	bne.n	8010a0e <tcp_zero_window_probe+0x72>
 8010a0a:	2301      	movs	r3, #1
 8010a0c:	e000      	b.n	8010a10 <tcp_zero_window_probe+0x74>
 8010a0e:	2300      	movs	r3, #0
 8010a10:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8010a12:	7ffb      	ldrb	r3, [r7, #31]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	bf0c      	ite	eq
 8010a18:	2301      	moveq	r3, #1
 8010a1a:	2300      	movne	r3, #0
 8010a1c:	b2db      	uxtb	r3, r3
 8010a1e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a24:	b299      	uxth	r1, r3
 8010a26:	6a3b      	ldr	r3, [r7, #32]
 8010a28:	68db      	ldr	r3, [r3, #12]
 8010a2a:	685b      	ldr	r3, [r3, #4]
 8010a2c:	8bba      	ldrh	r2, [r7, #28]
 8010a2e:	6878      	ldr	r0, [r7, #4]
 8010a30:	f7ff fdf8 	bl	8010624 <tcp_output_alloc_header>
 8010a34:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8010a36:	69bb      	ldr	r3, [r7, #24]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d102      	bne.n	8010a42 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8010a40:	e04c      	b.n	8010adc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010a42:	69bb      	ldr	r3, [r7, #24]
 8010a44:	685b      	ldr	r3, [r3, #4]
 8010a46:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010a48:	7ffb      	ldrb	r3, [r7, #31]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d011      	beq.n	8010a72 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010a4e:	697b      	ldr	r3, [r7, #20]
 8010a50:	899b      	ldrh	r3, [r3, #12]
 8010a52:	b29b      	uxth	r3, r3
 8010a54:	b21b      	sxth	r3, r3
 8010a56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010a5a:	b21c      	sxth	r4, r3
 8010a5c:	2011      	movs	r0, #17
 8010a5e:	f7f9 f9d2 	bl	8009e06 <lwip_htons>
 8010a62:	4603      	mov	r3, r0
 8010a64:	b21b      	sxth	r3, r3
 8010a66:	4323      	orrs	r3, r4
 8010a68:	b21b      	sxth	r3, r3
 8010a6a:	b29a      	uxth	r2, r3
 8010a6c:	697b      	ldr	r3, [r7, #20]
 8010a6e:	819a      	strh	r2, [r3, #12]
 8010a70:	e010      	b.n	8010a94 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8010a72:	69bb      	ldr	r3, [r7, #24]
 8010a74:	685b      	ldr	r3, [r3, #4]
 8010a76:	3314      	adds	r3, #20
 8010a78:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010a7a:	6a3b      	ldr	r3, [r7, #32]
 8010a7c:	6858      	ldr	r0, [r3, #4]
 8010a7e:	6a3b      	ldr	r3, [r7, #32]
 8010a80:	685b      	ldr	r3, [r3, #4]
 8010a82:	891a      	ldrh	r2, [r3, #8]
 8010a84:	6a3b      	ldr	r3, [r7, #32]
 8010a86:	891b      	ldrh	r3, [r3, #8]
 8010a88:	1ad3      	subs	r3, r2, r3
 8010a8a:	b29b      	uxth	r3, r3
 8010a8c:	2201      	movs	r2, #1
 8010a8e:	6939      	ldr	r1, [r7, #16]
 8010a90:	f7fa fe54 	bl	800b73c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010a94:	6a3b      	ldr	r3, [r7, #32]
 8010a96:	68db      	ldr	r3, [r3, #12]
 8010a98:	685b      	ldr	r3, [r3, #4]
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f7f9 f9c8 	bl	8009e30 <lwip_htonl>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	3301      	adds	r3, #1
 8010aa4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	1ad3      	subs	r3, r2, r3
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	da02      	bge.n	8010ab8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	68fa      	ldr	r2, [r7, #12]
 8010ab6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010abc:	2200      	movs	r2, #0
 8010abe:	69b9      	ldr	r1, [r7, #24]
 8010ac0:	6878      	ldr	r0, [r7, #4]
 8010ac2:	f7ff fded 	bl	80106a0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010ac6:	687a      	ldr	r2, [r7, #4]
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	3304      	adds	r3, #4
 8010acc:	69b9      	ldr	r1, [r7, #24]
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	f7ff fe26 	bl	8010720 <tcp_output_control_segment>
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010ad8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	372c      	adds	r7, #44	; 0x2c
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd90      	pop	{r4, r7, pc}
 8010ae4:	080180b8 	.word	0x080180b8
 8010ae8:	080188b0 	.word	0x080188b0
 8010aec:	0801810c 	.word	0x0801810c

08010af0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b082      	sub	sp, #8
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010af8:	f7fa ff0e 	bl	800b918 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010afc:	4b0a      	ldr	r3, [pc, #40]	; (8010b28 <tcpip_tcp_timer+0x38>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d103      	bne.n	8010b0c <tcpip_tcp_timer+0x1c>
 8010b04:	4b09      	ldr	r3, [pc, #36]	; (8010b2c <tcpip_tcp_timer+0x3c>)
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d005      	beq.n	8010b18 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	4908      	ldr	r1, [pc, #32]	; (8010b30 <tcpip_tcp_timer+0x40>)
 8010b10:	20fa      	movs	r0, #250	; 0xfa
 8010b12:	f000 f8f1 	bl	8010cf8 <sys_timeout>
 8010b16:	e002      	b.n	8010b1e <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010b18:	4b06      	ldr	r3, [pc, #24]	; (8010b34 <tcpip_tcp_timer+0x44>)
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	601a      	str	r2, [r3, #0]
  }
}
 8010b1e:	bf00      	nop
 8010b20:	3708      	adds	r7, #8
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bd80      	pop	{r7, pc}
 8010b26:	bf00      	nop
 8010b28:	200076f4 	.word	0x200076f4
 8010b2c:	20007704 	.word	0x20007704
 8010b30:	08010af1 	.word	0x08010af1
 8010b34:	20000490 	.word	0x20000490

08010b38 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010b3c:	4b0a      	ldr	r3, [pc, #40]	; (8010b68 <tcp_timer_needed+0x30>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d10f      	bne.n	8010b64 <tcp_timer_needed+0x2c>
 8010b44:	4b09      	ldr	r3, [pc, #36]	; (8010b6c <tcp_timer_needed+0x34>)
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d103      	bne.n	8010b54 <tcp_timer_needed+0x1c>
 8010b4c:	4b08      	ldr	r3, [pc, #32]	; (8010b70 <tcp_timer_needed+0x38>)
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d007      	beq.n	8010b64 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8010b54:	4b04      	ldr	r3, [pc, #16]	; (8010b68 <tcp_timer_needed+0x30>)
 8010b56:	2201      	movs	r2, #1
 8010b58:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	4905      	ldr	r1, [pc, #20]	; (8010b74 <tcp_timer_needed+0x3c>)
 8010b5e:	20fa      	movs	r0, #250	; 0xfa
 8010b60:	f000 f8ca 	bl	8010cf8 <sys_timeout>
  }
}
 8010b64:	bf00      	nop
 8010b66:	bd80      	pop	{r7, pc}
 8010b68:	20000490 	.word	0x20000490
 8010b6c:	200076f4 	.word	0x200076f4
 8010b70:	20007704 	.word	0x20007704
 8010b74:	08010af1 	.word	0x08010af1

08010b78 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b086      	sub	sp, #24
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	60f8      	str	r0, [r7, #12]
 8010b80:	60b9      	str	r1, [r7, #8]
 8010b82:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010b84:	2006      	movs	r0, #6
 8010b86:	f7f9 fd93 	bl	800a6b0 <memp_malloc>
 8010b8a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010b8c:	693b      	ldr	r3, [r7, #16]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d109      	bne.n	8010ba6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010b92:	693b      	ldr	r3, [r7, #16]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d151      	bne.n	8010c3c <sys_timeout_abs+0xc4>
 8010b98:	4b2a      	ldr	r3, [pc, #168]	; (8010c44 <sys_timeout_abs+0xcc>)
 8010b9a:	22be      	movs	r2, #190	; 0xbe
 8010b9c:	492a      	ldr	r1, [pc, #168]	; (8010c48 <sys_timeout_abs+0xd0>)
 8010b9e:	482b      	ldr	r0, [pc, #172]	; (8010c4c <sys_timeout_abs+0xd4>)
 8010ba0:	f005 f858 	bl	8015c54 <iprintf>
    return;
 8010ba4:	e04a      	b.n	8010c3c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8010ba6:	693b      	ldr	r3, [r7, #16]
 8010ba8:	2200      	movs	r2, #0
 8010baa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8010bac:	693b      	ldr	r3, [r7, #16]
 8010bae:	68ba      	ldr	r2, [r7, #8]
 8010bb0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8010bb2:	693b      	ldr	r3, [r7, #16]
 8010bb4:	687a      	ldr	r2, [r7, #4]
 8010bb6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010bb8:	693b      	ldr	r3, [r7, #16]
 8010bba:	68fa      	ldr	r2, [r7, #12]
 8010bbc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010bbe:	4b24      	ldr	r3, [pc, #144]	; (8010c50 <sys_timeout_abs+0xd8>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d103      	bne.n	8010bce <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8010bc6:	4a22      	ldr	r2, [pc, #136]	; (8010c50 <sys_timeout_abs+0xd8>)
 8010bc8:	693b      	ldr	r3, [r7, #16]
 8010bca:	6013      	str	r3, [r2, #0]
    return;
 8010bcc:	e037      	b.n	8010c3e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8010bce:	693b      	ldr	r3, [r7, #16]
 8010bd0:	685a      	ldr	r2, [r3, #4]
 8010bd2:	4b1f      	ldr	r3, [pc, #124]	; (8010c50 <sys_timeout_abs+0xd8>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	685b      	ldr	r3, [r3, #4]
 8010bd8:	1ad3      	subs	r3, r2, r3
 8010bda:	0fdb      	lsrs	r3, r3, #31
 8010bdc:	f003 0301 	and.w	r3, r3, #1
 8010be0:	b2db      	uxtb	r3, r3
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d007      	beq.n	8010bf6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8010be6:	4b1a      	ldr	r3, [pc, #104]	; (8010c50 <sys_timeout_abs+0xd8>)
 8010be8:	681a      	ldr	r2, [r3, #0]
 8010bea:	693b      	ldr	r3, [r7, #16]
 8010bec:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010bee:	4a18      	ldr	r2, [pc, #96]	; (8010c50 <sys_timeout_abs+0xd8>)
 8010bf0:	693b      	ldr	r3, [r7, #16]
 8010bf2:	6013      	str	r3, [r2, #0]
 8010bf4:	e023      	b.n	8010c3e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8010bf6:	4b16      	ldr	r3, [pc, #88]	; (8010c50 <sys_timeout_abs+0xd8>)
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	617b      	str	r3, [r7, #20]
 8010bfc:	e01a      	b.n	8010c34 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010bfe:	697b      	ldr	r3, [r7, #20]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d00b      	beq.n	8010c1e <sys_timeout_abs+0xa6>
 8010c06:	693b      	ldr	r3, [r7, #16]
 8010c08:	685a      	ldr	r2, [r3, #4]
 8010c0a:	697b      	ldr	r3, [r7, #20]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	685b      	ldr	r3, [r3, #4]
 8010c10:	1ad3      	subs	r3, r2, r3
 8010c12:	0fdb      	lsrs	r3, r3, #31
 8010c14:	f003 0301 	and.w	r3, r3, #1
 8010c18:	b2db      	uxtb	r3, r3
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d007      	beq.n	8010c2e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8010c1e:	697b      	ldr	r3, [r7, #20]
 8010c20:	681a      	ldr	r2, [r3, #0]
 8010c22:	693b      	ldr	r3, [r7, #16]
 8010c24:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010c26:	697b      	ldr	r3, [r7, #20]
 8010c28:	693a      	ldr	r2, [r7, #16]
 8010c2a:	601a      	str	r2, [r3, #0]
        break;
 8010c2c:	e007      	b.n	8010c3e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010c2e:	697b      	ldr	r3, [r7, #20]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	617b      	str	r3, [r7, #20]
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d1e1      	bne.n	8010bfe <sys_timeout_abs+0x86>
 8010c3a:	e000      	b.n	8010c3e <sys_timeout_abs+0xc6>
    return;
 8010c3c:	bf00      	nop
      }
    }
  }
}
 8010c3e:	3718      	adds	r7, #24
 8010c40:	46bd      	mov	sp, r7
 8010c42:	bd80      	pop	{r7, pc}
 8010c44:	080188d4 	.word	0x080188d4
 8010c48:	08018908 	.word	0x08018908
 8010c4c:	08018948 	.word	0x08018948
 8010c50:	20000488 	.word	0x20000488

08010c54 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b086      	sub	sp, #24
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010c60:	697b      	ldr	r3, [r7, #20]
 8010c62:	685b      	ldr	r3, [r3, #4]
 8010c64:	4798      	blx	r3

  now = sys_now();
 8010c66:	f7f9 f8c7 	bl	8009df8 <sys_now>
 8010c6a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010c6c:	697b      	ldr	r3, [r7, #20]
 8010c6e:	681a      	ldr	r2, [r3, #0]
 8010c70:	4b0f      	ldr	r3, [pc, #60]	; (8010cb0 <lwip_cyclic_timer+0x5c>)
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	4413      	add	r3, r2
 8010c76:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010c78:	68fa      	ldr	r2, [r7, #12]
 8010c7a:	693b      	ldr	r3, [r7, #16]
 8010c7c:	1ad3      	subs	r3, r2, r3
 8010c7e:	0fdb      	lsrs	r3, r3, #31
 8010c80:	f003 0301 	and.w	r3, r3, #1
 8010c84:	b2db      	uxtb	r3, r3
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d009      	beq.n	8010c9e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	681a      	ldr	r2, [r3, #0]
 8010c8e:	693b      	ldr	r3, [r7, #16]
 8010c90:	4413      	add	r3, r2
 8010c92:	687a      	ldr	r2, [r7, #4]
 8010c94:	4907      	ldr	r1, [pc, #28]	; (8010cb4 <lwip_cyclic_timer+0x60>)
 8010c96:	4618      	mov	r0, r3
 8010c98:	f7ff ff6e 	bl	8010b78 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010c9c:	e004      	b.n	8010ca8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010c9e:	687a      	ldr	r2, [r7, #4]
 8010ca0:	4904      	ldr	r1, [pc, #16]	; (8010cb4 <lwip_cyclic_timer+0x60>)
 8010ca2:	68f8      	ldr	r0, [r7, #12]
 8010ca4:	f7ff ff68 	bl	8010b78 <sys_timeout_abs>
}
 8010ca8:	bf00      	nop
 8010caa:	3718      	adds	r7, #24
 8010cac:	46bd      	mov	sp, r7
 8010cae:	bd80      	pop	{r7, pc}
 8010cb0:	2000048c 	.word	0x2000048c
 8010cb4:	08010c55 	.word	0x08010c55

08010cb8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b082      	sub	sp, #8
 8010cbc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010cbe:	2301      	movs	r3, #1
 8010cc0:	607b      	str	r3, [r7, #4]
 8010cc2:	e00e      	b.n	8010ce2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010cc4:	4a0a      	ldr	r2, [pc, #40]	; (8010cf0 <sys_timeouts_init+0x38>)
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	00db      	lsls	r3, r3, #3
 8010cd0:	4a07      	ldr	r2, [pc, #28]	; (8010cf0 <sys_timeouts_init+0x38>)
 8010cd2:	4413      	add	r3, r2
 8010cd4:	461a      	mov	r2, r3
 8010cd6:	4907      	ldr	r1, [pc, #28]	; (8010cf4 <sys_timeouts_init+0x3c>)
 8010cd8:	f000 f80e 	bl	8010cf8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	3301      	adds	r3, #1
 8010ce0:	607b      	str	r3, [r7, #4]
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	2b04      	cmp	r3, #4
 8010ce6:	d9ed      	bls.n	8010cc4 <sys_timeouts_init+0xc>
  }
}
 8010ce8:	bf00      	nop
 8010cea:	3708      	adds	r7, #8
 8010cec:	46bd      	mov	sp, r7
 8010cee:	bd80      	pop	{r7, pc}
 8010cf0:	080281fc 	.word	0x080281fc
 8010cf4:	08010c55 	.word	0x08010c55

08010cf8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b086      	sub	sp, #24
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	60f8      	str	r0, [r7, #12]
 8010d00:	60b9      	str	r1, [r7, #8]
 8010d02:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d0a:	d306      	bcc.n	8010d1a <sys_timeout+0x22>
 8010d0c:	4b0a      	ldr	r3, [pc, #40]	; (8010d38 <sys_timeout+0x40>)
 8010d0e:	f240 1229 	movw	r2, #297	; 0x129
 8010d12:	490a      	ldr	r1, [pc, #40]	; (8010d3c <sys_timeout+0x44>)
 8010d14:	480a      	ldr	r0, [pc, #40]	; (8010d40 <sys_timeout+0x48>)
 8010d16:	f004 ff9d 	bl	8015c54 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010d1a:	f7f9 f86d 	bl	8009df8 <sys_now>
 8010d1e:	4602      	mov	r2, r0
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	4413      	add	r3, r2
 8010d24:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010d26:	687a      	ldr	r2, [r7, #4]
 8010d28:	68b9      	ldr	r1, [r7, #8]
 8010d2a:	6978      	ldr	r0, [r7, #20]
 8010d2c:	f7ff ff24 	bl	8010b78 <sys_timeout_abs>
#endif
}
 8010d30:	bf00      	nop
 8010d32:	3718      	adds	r7, #24
 8010d34:	46bd      	mov	sp, r7
 8010d36:	bd80      	pop	{r7, pc}
 8010d38:	080188d4 	.word	0x080188d4
 8010d3c:	08018970 	.word	0x08018970
 8010d40:	08018948 	.word	0x08018948

08010d44 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b084      	sub	sp, #16
 8010d48:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8010d4a:	f7f9 f855 	bl	8009df8 <sys_now>
 8010d4e:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8010d50:	4b1a      	ldr	r3, [pc, #104]	; (8010dbc <sys_check_timeouts+0x78>)
 8010d52:	781b      	ldrb	r3, [r3, #0]
 8010d54:	b2db      	uxtb	r3, r3
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d001      	beq.n	8010d5e <sys_check_timeouts+0x1a>
 8010d5a:	f7f9 ffbf 	bl	800acdc <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8010d5e:	4b18      	ldr	r3, [pc, #96]	; (8010dc0 <sys_check_timeouts+0x7c>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8010d64:	68bb      	ldr	r3, [r7, #8]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d022      	beq.n	8010db0 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8010d6a:	68bb      	ldr	r3, [r7, #8]
 8010d6c:	685b      	ldr	r3, [r3, #4]
 8010d6e:	68fa      	ldr	r2, [r7, #12]
 8010d70:	1ad3      	subs	r3, r2, r3
 8010d72:	0fdb      	lsrs	r3, r3, #31
 8010d74:	f003 0301 	and.w	r3, r3, #1
 8010d78:	b2db      	uxtb	r3, r3
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d11a      	bne.n	8010db4 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8010d7e:	68bb      	ldr	r3, [r7, #8]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	4a0f      	ldr	r2, [pc, #60]	; (8010dc0 <sys_check_timeouts+0x7c>)
 8010d84:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8010d86:	68bb      	ldr	r3, [r7, #8]
 8010d88:	689b      	ldr	r3, [r3, #8]
 8010d8a:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8010d8c:	68bb      	ldr	r3, [r7, #8]
 8010d8e:	68db      	ldr	r3, [r3, #12]
 8010d90:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8010d92:	68bb      	ldr	r3, [r7, #8]
 8010d94:	685b      	ldr	r3, [r3, #4]
 8010d96:	4a0b      	ldr	r2, [pc, #44]	; (8010dc4 <sys_check_timeouts+0x80>)
 8010d98:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010d9a:	68b9      	ldr	r1, [r7, #8]
 8010d9c:	2006      	movs	r0, #6
 8010d9e:	f7f9 fcd3 	bl	800a748 <memp_free>
    if (handler != NULL) {
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d0d3      	beq.n	8010d50 <sys_check_timeouts+0xc>
      handler(arg);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	6838      	ldr	r0, [r7, #0]
 8010dac:	4798      	blx	r3
  do {
 8010dae:	e7cf      	b.n	8010d50 <sys_check_timeouts+0xc>
      return;
 8010db0:	bf00      	nop
 8010db2:	e000      	b.n	8010db6 <sys_check_timeouts+0x72>
      return;
 8010db4:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8010db6:	3710      	adds	r7, #16
 8010db8:	46bd      	mov	sp, r7
 8010dba:	bd80      	pop	{r7, pc}
 8010dbc:	200076ec 	.word	0x200076ec
 8010dc0:	20000488 	.word	0x20000488
 8010dc4:	2000048c 	.word	0x2000048c

08010dc8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010dcc:	f004 ff5a 	bl	8015c84 <rand>
 8010dd0:	4603      	mov	r3, r0
 8010dd2:	b29b      	uxth	r3, r3
 8010dd4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010dd8:	b29b      	uxth	r3, r3
 8010dda:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010dde:	b29a      	uxth	r2, r3
 8010de0:	4b01      	ldr	r3, [pc, #4]	; (8010de8 <udp_init+0x20>)
 8010de2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010de4:	bf00      	nop
 8010de6:	bd80      	pop	{r7, pc}
 8010de8:	20000018 	.word	0x20000018

08010dec <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8010dec:	b480      	push	{r7}
 8010dee:	b083      	sub	sp, #12
 8010df0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8010df2:	2300      	movs	r3, #0
 8010df4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8010df6:	4b17      	ldr	r3, [pc, #92]	; (8010e54 <udp_new_port+0x68>)
 8010df8:	881b      	ldrh	r3, [r3, #0]
 8010dfa:	1c5a      	adds	r2, r3, #1
 8010dfc:	b291      	uxth	r1, r2
 8010dfe:	4a15      	ldr	r2, [pc, #84]	; (8010e54 <udp_new_port+0x68>)
 8010e00:	8011      	strh	r1, [r2, #0]
 8010e02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e06:	4293      	cmp	r3, r2
 8010e08:	d103      	bne.n	8010e12 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8010e0a:	4b12      	ldr	r3, [pc, #72]	; (8010e54 <udp_new_port+0x68>)
 8010e0c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8010e10:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e12:	4b11      	ldr	r3, [pc, #68]	; (8010e58 <udp_new_port+0x6c>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	603b      	str	r3, [r7, #0]
 8010e18:	e011      	b.n	8010e3e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8010e1a:	683b      	ldr	r3, [r7, #0]
 8010e1c:	8a5a      	ldrh	r2, [r3, #18]
 8010e1e:	4b0d      	ldr	r3, [pc, #52]	; (8010e54 <udp_new_port+0x68>)
 8010e20:	881b      	ldrh	r3, [r3, #0]
 8010e22:	429a      	cmp	r2, r3
 8010e24:	d108      	bne.n	8010e38 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8010e26:	88fb      	ldrh	r3, [r7, #6]
 8010e28:	3301      	adds	r3, #1
 8010e2a:	80fb      	strh	r3, [r7, #6]
 8010e2c:	88fb      	ldrh	r3, [r7, #6]
 8010e2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010e32:	d3e0      	bcc.n	8010df6 <udp_new_port+0xa>
        return 0;
 8010e34:	2300      	movs	r3, #0
 8010e36:	e007      	b.n	8010e48 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e38:	683b      	ldr	r3, [r7, #0]
 8010e3a:	68db      	ldr	r3, [r3, #12]
 8010e3c:	603b      	str	r3, [r7, #0]
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d1ea      	bne.n	8010e1a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8010e44:	4b03      	ldr	r3, [pc, #12]	; (8010e54 <udp_new_port+0x68>)
 8010e46:	881b      	ldrh	r3, [r3, #0]
}
 8010e48:	4618      	mov	r0, r3
 8010e4a:	370c      	adds	r7, #12
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e52:	4770      	bx	lr
 8010e54:	20000018 	.word	0x20000018
 8010e58:	2000770c 	.word	0x2000770c

08010e5c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b084      	sub	sp, #16
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	60f8      	str	r0, [r7, #12]
 8010e64:	60b9      	str	r1, [r7, #8]
 8010e66:	4613      	mov	r3, r2
 8010e68:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d105      	bne.n	8010e7c <udp_input_local_match+0x20>
 8010e70:	4b27      	ldr	r3, [pc, #156]	; (8010f10 <udp_input_local_match+0xb4>)
 8010e72:	2287      	movs	r2, #135	; 0x87
 8010e74:	4927      	ldr	r1, [pc, #156]	; (8010f14 <udp_input_local_match+0xb8>)
 8010e76:	4828      	ldr	r0, [pc, #160]	; (8010f18 <udp_input_local_match+0xbc>)
 8010e78:	f004 feec 	bl	8015c54 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010e7c:	68bb      	ldr	r3, [r7, #8]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d105      	bne.n	8010e8e <udp_input_local_match+0x32>
 8010e82:	4b23      	ldr	r3, [pc, #140]	; (8010f10 <udp_input_local_match+0xb4>)
 8010e84:	2288      	movs	r2, #136	; 0x88
 8010e86:	4925      	ldr	r1, [pc, #148]	; (8010f1c <udp_input_local_match+0xc0>)
 8010e88:	4823      	ldr	r0, [pc, #140]	; (8010f18 <udp_input_local_match+0xbc>)
 8010e8a:	f004 fee3 	bl	8015c54 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	7a1b      	ldrb	r3, [r3, #8]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d00b      	beq.n	8010eae <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	7a1a      	ldrb	r2, [r3, #8]
 8010e9a:	4b21      	ldr	r3, [pc, #132]	; (8010f20 <udp_input_local_match+0xc4>)
 8010e9c:	685b      	ldr	r3, [r3, #4]
 8010e9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010ea2:	3301      	adds	r3, #1
 8010ea4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010ea6:	429a      	cmp	r2, r3
 8010ea8:	d001      	beq.n	8010eae <udp_input_local_match+0x52>
    return 0;
 8010eaa:	2300      	movs	r3, #0
 8010eac:	e02b      	b.n	8010f06 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8010eae:	79fb      	ldrb	r3, [r7, #7]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d018      	beq.n	8010ee6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d013      	beq.n	8010ee2 <udp_input_local_match+0x86>
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d00f      	beq.n	8010ee2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010ec2:	4b17      	ldr	r3, [pc, #92]	; (8010f20 <udp_input_local_match+0xc4>)
 8010ec4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eca:	d00a      	beq.n	8010ee2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	681a      	ldr	r2, [r3, #0]
 8010ed0:	4b13      	ldr	r3, [pc, #76]	; (8010f20 <udp_input_local_match+0xc4>)
 8010ed2:	695b      	ldr	r3, [r3, #20]
 8010ed4:	405a      	eors	r2, r3
 8010ed6:	68bb      	ldr	r3, [r7, #8]
 8010ed8:	3308      	adds	r3, #8
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d110      	bne.n	8010f04 <udp_input_local_match+0xa8>
          return 1;
 8010ee2:	2301      	movs	r3, #1
 8010ee4:	e00f      	b.n	8010f06 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d009      	beq.n	8010f00 <udp_input_local_match+0xa4>
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d005      	beq.n	8010f00 <udp_input_local_match+0xa4>
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	681a      	ldr	r2, [r3, #0]
 8010ef8:	4b09      	ldr	r3, [pc, #36]	; (8010f20 <udp_input_local_match+0xc4>)
 8010efa:	695b      	ldr	r3, [r3, #20]
 8010efc:	429a      	cmp	r2, r3
 8010efe:	d101      	bne.n	8010f04 <udp_input_local_match+0xa8>
        return 1;
 8010f00:	2301      	movs	r3, #1
 8010f02:	e000      	b.n	8010f06 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8010f04:	2300      	movs	r3, #0
}
 8010f06:	4618      	mov	r0, r3
 8010f08:	3710      	adds	r7, #16
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}
 8010f0e:	bf00      	nop
 8010f10:	080189bc 	.word	0x080189bc
 8010f14:	080189ec 	.word	0x080189ec
 8010f18:	08018a10 	.word	0x08018a10
 8010f1c:	08018a38 	.word	0x08018a38
 8010f20:	20004190 	.word	0x20004190

08010f24 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010f24:	b590      	push	{r4, r7, lr}
 8010f26:	b08d      	sub	sp, #52	; 0x34
 8010f28:	af02      	add	r7, sp, #8
 8010f2a:	6078      	str	r0, [r7, #4]
 8010f2c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8010f2e:	2300      	movs	r3, #0
 8010f30:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d105      	bne.n	8010f44 <udp_input+0x20>
 8010f38:	4b7c      	ldr	r3, [pc, #496]	; (801112c <udp_input+0x208>)
 8010f3a:	22cf      	movs	r2, #207	; 0xcf
 8010f3c:	497c      	ldr	r1, [pc, #496]	; (8011130 <udp_input+0x20c>)
 8010f3e:	487d      	ldr	r0, [pc, #500]	; (8011134 <udp_input+0x210>)
 8010f40:	f004 fe88 	bl	8015c54 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010f44:	683b      	ldr	r3, [r7, #0]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d105      	bne.n	8010f56 <udp_input+0x32>
 8010f4a:	4b78      	ldr	r3, [pc, #480]	; (801112c <udp_input+0x208>)
 8010f4c:	22d0      	movs	r2, #208	; 0xd0
 8010f4e:	497a      	ldr	r1, [pc, #488]	; (8011138 <udp_input+0x214>)
 8010f50:	4878      	ldr	r0, [pc, #480]	; (8011134 <udp_input+0x210>)
 8010f52:	f004 fe7f 	bl	8015c54 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	895b      	ldrh	r3, [r3, #10]
 8010f5a:	2b07      	cmp	r3, #7
 8010f5c:	d803      	bhi.n	8010f66 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	f7fa f9f2 	bl	800b348 <pbuf_free>
    goto end;
 8010f64:	e0de      	b.n	8011124 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	685b      	ldr	r3, [r3, #4]
 8010f6a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010f6c:	4b73      	ldr	r3, [pc, #460]	; (801113c <udp_input+0x218>)
 8010f6e:	695a      	ldr	r2, [r3, #20]
 8010f70:	4b72      	ldr	r3, [pc, #456]	; (801113c <udp_input+0x218>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	4619      	mov	r1, r3
 8010f76:	4610      	mov	r0, r2
 8010f78:	f003 fe22 	bl	8014bc0 <ip4_addr_isbroadcast_u32>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010f80:	697b      	ldr	r3, [r7, #20]
 8010f82:	881b      	ldrh	r3, [r3, #0]
 8010f84:	b29b      	uxth	r3, r3
 8010f86:	4618      	mov	r0, r3
 8010f88:	f7f8 ff3d 	bl	8009e06 <lwip_htons>
 8010f8c:	4603      	mov	r3, r0
 8010f8e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010f90:	697b      	ldr	r3, [r7, #20]
 8010f92:	885b      	ldrh	r3, [r3, #2]
 8010f94:	b29b      	uxth	r3, r3
 8010f96:	4618      	mov	r0, r3
 8010f98:	f7f8 ff35 	bl	8009e06 <lwip_htons>
 8010f9c:	4603      	mov	r3, r0
 8010f9e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010fa8:	2300      	movs	r3, #0
 8010faa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010fac:	4b64      	ldr	r3, [pc, #400]	; (8011140 <udp_input+0x21c>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8010fb2:	e054      	b.n	801105e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb6:	8a5b      	ldrh	r3, [r3, #18]
 8010fb8:	89fa      	ldrh	r2, [r7, #14]
 8010fba:	429a      	cmp	r2, r3
 8010fbc:	d14a      	bne.n	8011054 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010fbe:	7cfb      	ldrb	r3, [r7, #19]
 8010fc0:	461a      	mov	r2, r3
 8010fc2:	6839      	ldr	r1, [r7, #0]
 8010fc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010fc6:	f7ff ff49 	bl	8010e5c <udp_input_local_match>
 8010fca:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d041      	beq.n	8011054 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd2:	7c1b      	ldrb	r3, [r3, #16]
 8010fd4:	f003 0304 	and.w	r3, r3, #4
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d11d      	bne.n	8011018 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8010fdc:	69fb      	ldr	r3, [r7, #28]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d102      	bne.n	8010fe8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8010fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fe4:	61fb      	str	r3, [r7, #28]
 8010fe6:	e017      	b.n	8011018 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010fe8:	7cfb      	ldrb	r3, [r7, #19]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d014      	beq.n	8011018 <udp_input+0xf4>
 8010fee:	4b53      	ldr	r3, [pc, #332]	; (801113c <udp_input+0x218>)
 8010ff0:	695b      	ldr	r3, [r3, #20]
 8010ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ff6:	d10f      	bne.n	8011018 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010ff8:	69fb      	ldr	r3, [r7, #28]
 8010ffa:	681a      	ldr	r2, [r3, #0]
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	3304      	adds	r3, #4
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	429a      	cmp	r2, r3
 8011004:	d008      	beq.n	8011018 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011008:	681a      	ldr	r2, [r3, #0]
 801100a:	683b      	ldr	r3, [r7, #0]
 801100c:	3304      	adds	r3, #4
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	429a      	cmp	r2, r3
 8011012:	d101      	bne.n	8011018 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011016:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801101a:	8a9b      	ldrh	r3, [r3, #20]
 801101c:	8a3a      	ldrh	r2, [r7, #16]
 801101e:	429a      	cmp	r2, r3
 8011020:	d118      	bne.n	8011054 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011024:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011026:	2b00      	cmp	r3, #0
 8011028:	d005      	beq.n	8011036 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801102c:	685a      	ldr	r2, [r3, #4]
 801102e:	4b43      	ldr	r3, [pc, #268]	; (801113c <udp_input+0x218>)
 8011030:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011032:	429a      	cmp	r2, r3
 8011034:	d10e      	bne.n	8011054 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011036:	6a3b      	ldr	r3, [r7, #32]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d014      	beq.n	8011066 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801103c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801103e:	68da      	ldr	r2, [r3, #12]
 8011040:	6a3b      	ldr	r3, [r7, #32]
 8011042:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011044:	4b3e      	ldr	r3, [pc, #248]	; (8011140 <udp_input+0x21c>)
 8011046:	681a      	ldr	r2, [r3, #0]
 8011048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801104a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801104c:	4a3c      	ldr	r2, [pc, #240]	; (8011140 <udp_input+0x21c>)
 801104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011050:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011052:	e008      	b.n	8011066 <udp_input+0x142>
      }
    }

    prev = pcb;
 8011054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011056:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801105a:	68db      	ldr	r3, [r3, #12]
 801105c:	627b      	str	r3, [r7, #36]	; 0x24
 801105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011060:	2b00      	cmp	r3, #0
 8011062:	d1a7      	bne.n	8010fb4 <udp_input+0x90>
 8011064:	e000      	b.n	8011068 <udp_input+0x144>
        break;
 8011066:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801106a:	2b00      	cmp	r3, #0
 801106c:	d101      	bne.n	8011072 <udp_input+0x14e>
    pcb = uncon_pcb;
 801106e:	69fb      	ldr	r3, [r7, #28]
 8011070:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011074:	2b00      	cmp	r3, #0
 8011076:	d002      	beq.n	801107e <udp_input+0x15a>
    for_us = 1;
 8011078:	2301      	movs	r3, #1
 801107a:	76fb      	strb	r3, [r7, #27]
 801107c:	e00a      	b.n	8011094 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801107e:	683b      	ldr	r3, [r7, #0]
 8011080:	3304      	adds	r3, #4
 8011082:	681a      	ldr	r2, [r3, #0]
 8011084:	4b2d      	ldr	r3, [pc, #180]	; (801113c <udp_input+0x218>)
 8011086:	695b      	ldr	r3, [r3, #20]
 8011088:	429a      	cmp	r2, r3
 801108a:	bf0c      	ite	eq
 801108c:	2301      	moveq	r3, #1
 801108e:	2300      	movne	r3, #0
 8011090:	b2db      	uxtb	r3, r3
 8011092:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011094:	7efb      	ldrb	r3, [r7, #27]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d041      	beq.n	801111e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801109a:	2108      	movs	r1, #8
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	f7fa f8cd 	bl	800b23c <pbuf_remove_header>
 80110a2:	4603      	mov	r3, r0
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d00a      	beq.n	80110be <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80110a8:	4b20      	ldr	r3, [pc, #128]	; (801112c <udp_input+0x208>)
 80110aa:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80110ae:	4925      	ldr	r1, [pc, #148]	; (8011144 <udp_input+0x220>)
 80110b0:	4820      	ldr	r0, [pc, #128]	; (8011134 <udp_input+0x210>)
 80110b2:	f004 fdcf 	bl	8015c54 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	f7fa f946 	bl	800b348 <pbuf_free>
      goto end;
 80110bc:	e032      	b.n	8011124 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80110be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d012      	beq.n	80110ea <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80110c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110c6:	699b      	ldr	r3, [r3, #24]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d00a      	beq.n	80110e2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80110cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ce:	699c      	ldr	r4, [r3, #24]
 80110d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d2:	69d8      	ldr	r0, [r3, #28]
 80110d4:	8a3b      	ldrh	r3, [r7, #16]
 80110d6:	9300      	str	r3, [sp, #0]
 80110d8:	4b1b      	ldr	r3, [pc, #108]	; (8011148 <udp_input+0x224>)
 80110da:	687a      	ldr	r2, [r7, #4]
 80110dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80110de:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80110e0:	e021      	b.n	8011126 <udp_input+0x202>
        pbuf_free(p);
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	f7fa f930 	bl	800b348 <pbuf_free>
        goto end;
 80110e8:	e01c      	b.n	8011124 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80110ea:	7cfb      	ldrb	r3, [r7, #19]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d112      	bne.n	8011116 <udp_input+0x1f2>
 80110f0:	4b12      	ldr	r3, [pc, #72]	; (801113c <udp_input+0x218>)
 80110f2:	695b      	ldr	r3, [r3, #20]
 80110f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80110f8:	2be0      	cmp	r3, #224	; 0xe0
 80110fa:	d00c      	beq.n	8011116 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80110fc:	4b0f      	ldr	r3, [pc, #60]	; (801113c <udp_input+0x218>)
 80110fe:	899b      	ldrh	r3, [r3, #12]
 8011100:	3308      	adds	r3, #8
 8011102:	b29b      	uxth	r3, r3
 8011104:	b21b      	sxth	r3, r3
 8011106:	4619      	mov	r1, r3
 8011108:	6878      	ldr	r0, [r7, #4]
 801110a:	f7fa f90a 	bl	800b322 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801110e:	2103      	movs	r1, #3
 8011110:	6878      	ldr	r0, [r7, #4]
 8011112:	f003 fa19 	bl	8014548 <icmp_dest_unreach>
      pbuf_free(p);
 8011116:	6878      	ldr	r0, [r7, #4]
 8011118:	f7fa f916 	bl	800b348 <pbuf_free>
  return;
 801111c:	e003      	b.n	8011126 <udp_input+0x202>
    pbuf_free(p);
 801111e:	6878      	ldr	r0, [r7, #4]
 8011120:	f7fa f912 	bl	800b348 <pbuf_free>
  return;
 8011124:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011126:	372c      	adds	r7, #44	; 0x2c
 8011128:	46bd      	mov	sp, r7
 801112a:	bd90      	pop	{r4, r7, pc}
 801112c:	080189bc 	.word	0x080189bc
 8011130:	08018a60 	.word	0x08018a60
 8011134:	08018a10 	.word	0x08018a10
 8011138:	08018a78 	.word	0x08018a78
 801113c:	20004190 	.word	0x20004190
 8011140:	2000770c 	.word	0x2000770c
 8011144:	08018a94 	.word	0x08018a94
 8011148:	200041a0 	.word	0x200041a0

0801114c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b088      	sub	sp, #32
 8011150:	af02      	add	r7, sp, #8
 8011152:	60f8      	str	r0, [r7, #12]
 8011154:	60b9      	str	r1, [r7, #8]
 8011156:	607a      	str	r2, [r7, #4]
 8011158:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d109      	bne.n	8011174 <udp_sendto+0x28>
 8011160:	4b23      	ldr	r3, [pc, #140]	; (80111f0 <udp_sendto+0xa4>)
 8011162:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011166:	4923      	ldr	r1, [pc, #140]	; (80111f4 <udp_sendto+0xa8>)
 8011168:	4823      	ldr	r0, [pc, #140]	; (80111f8 <udp_sendto+0xac>)
 801116a:	f004 fd73 	bl	8015c54 <iprintf>
 801116e:	f06f 030f 	mvn.w	r3, #15
 8011172:	e038      	b.n	80111e6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8011174:	68bb      	ldr	r3, [r7, #8]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d109      	bne.n	801118e <udp_sendto+0x42>
 801117a:	4b1d      	ldr	r3, [pc, #116]	; (80111f0 <udp_sendto+0xa4>)
 801117c:	f240 2219 	movw	r2, #537	; 0x219
 8011180:	491e      	ldr	r1, [pc, #120]	; (80111fc <udp_sendto+0xb0>)
 8011182:	481d      	ldr	r0, [pc, #116]	; (80111f8 <udp_sendto+0xac>)
 8011184:	f004 fd66 	bl	8015c54 <iprintf>
 8011188:	f06f 030f 	mvn.w	r3, #15
 801118c:	e02b      	b.n	80111e6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d109      	bne.n	80111a8 <udp_sendto+0x5c>
 8011194:	4b16      	ldr	r3, [pc, #88]	; (80111f0 <udp_sendto+0xa4>)
 8011196:	f240 221a 	movw	r2, #538	; 0x21a
 801119a:	4919      	ldr	r1, [pc, #100]	; (8011200 <udp_sendto+0xb4>)
 801119c:	4816      	ldr	r0, [pc, #88]	; (80111f8 <udp_sendto+0xac>)
 801119e:	f004 fd59 	bl	8015c54 <iprintf>
 80111a2:	f06f 030f 	mvn.w	r3, #15
 80111a6:	e01e      	b.n	80111e6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	7a1b      	ldrb	r3, [r3, #8]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d006      	beq.n	80111be <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	7a1b      	ldrb	r3, [r3, #8]
 80111b4:	4618      	mov	r0, r3
 80111b6:	f7f9 fd6b 	bl	800ac90 <netif_get_by_index>
 80111ba:	6178      	str	r0, [r7, #20]
 80111bc:	e003      	b.n	80111c6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80111be:	6878      	ldr	r0, [r7, #4]
 80111c0:	f003 fa4c 	bl	801465c <ip4_route>
 80111c4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80111c6:	697b      	ldr	r3, [r7, #20]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d102      	bne.n	80111d2 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80111cc:	f06f 0303 	mvn.w	r3, #3
 80111d0:	e009      	b.n	80111e6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80111d2:	887a      	ldrh	r2, [r7, #2]
 80111d4:	697b      	ldr	r3, [r7, #20]
 80111d6:	9300      	str	r3, [sp, #0]
 80111d8:	4613      	mov	r3, r2
 80111da:	687a      	ldr	r2, [r7, #4]
 80111dc:	68b9      	ldr	r1, [r7, #8]
 80111de:	68f8      	ldr	r0, [r7, #12]
 80111e0:	f000 f810 	bl	8011204 <udp_sendto_if>
 80111e4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80111e6:	4618      	mov	r0, r3
 80111e8:	3718      	adds	r7, #24
 80111ea:	46bd      	mov	sp, r7
 80111ec:	bd80      	pop	{r7, pc}
 80111ee:	bf00      	nop
 80111f0:	080189bc 	.word	0x080189bc
 80111f4:	08018ae0 	.word	0x08018ae0
 80111f8:	08018a10 	.word	0x08018a10
 80111fc:	08018af8 	.word	0x08018af8
 8011200:	08018b14 	.word	0x08018b14

08011204 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b088      	sub	sp, #32
 8011208:	af02      	add	r7, sp, #8
 801120a:	60f8      	str	r0, [r7, #12]
 801120c:	60b9      	str	r1, [r7, #8]
 801120e:	607a      	str	r2, [r7, #4]
 8011210:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d109      	bne.n	801122c <udp_sendto_if+0x28>
 8011218:	4b2e      	ldr	r3, [pc, #184]	; (80112d4 <udp_sendto_if+0xd0>)
 801121a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801121e:	492e      	ldr	r1, [pc, #184]	; (80112d8 <udp_sendto_if+0xd4>)
 8011220:	482e      	ldr	r0, [pc, #184]	; (80112dc <udp_sendto_if+0xd8>)
 8011222:	f004 fd17 	bl	8015c54 <iprintf>
 8011226:	f06f 030f 	mvn.w	r3, #15
 801122a:	e04f      	b.n	80112cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801122c:	68bb      	ldr	r3, [r7, #8]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d109      	bne.n	8011246 <udp_sendto_if+0x42>
 8011232:	4b28      	ldr	r3, [pc, #160]	; (80112d4 <udp_sendto_if+0xd0>)
 8011234:	f240 2281 	movw	r2, #641	; 0x281
 8011238:	4929      	ldr	r1, [pc, #164]	; (80112e0 <udp_sendto_if+0xdc>)
 801123a:	4828      	ldr	r0, [pc, #160]	; (80112dc <udp_sendto_if+0xd8>)
 801123c:	f004 fd0a 	bl	8015c54 <iprintf>
 8011240:	f06f 030f 	mvn.w	r3, #15
 8011244:	e042      	b.n	80112cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d109      	bne.n	8011260 <udp_sendto_if+0x5c>
 801124c:	4b21      	ldr	r3, [pc, #132]	; (80112d4 <udp_sendto_if+0xd0>)
 801124e:	f240 2282 	movw	r2, #642	; 0x282
 8011252:	4924      	ldr	r1, [pc, #144]	; (80112e4 <udp_sendto_if+0xe0>)
 8011254:	4821      	ldr	r0, [pc, #132]	; (80112dc <udp_sendto_if+0xd8>)
 8011256:	f004 fcfd 	bl	8015c54 <iprintf>
 801125a:	f06f 030f 	mvn.w	r3, #15
 801125e:	e035      	b.n	80112cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011260:	6a3b      	ldr	r3, [r7, #32]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d109      	bne.n	801127a <udp_sendto_if+0x76>
 8011266:	4b1b      	ldr	r3, [pc, #108]	; (80112d4 <udp_sendto_if+0xd0>)
 8011268:	f240 2283 	movw	r2, #643	; 0x283
 801126c:	491e      	ldr	r1, [pc, #120]	; (80112e8 <udp_sendto_if+0xe4>)
 801126e:	481b      	ldr	r0, [pc, #108]	; (80112dc <udp_sendto_if+0xd8>)
 8011270:	f004 fcf0 	bl	8015c54 <iprintf>
 8011274:	f06f 030f 	mvn.w	r3, #15
 8011278:	e028      	b.n	80112cc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d009      	beq.n	8011294 <udp_sendto_if+0x90>
 8011280:	68fb      	ldr	r3, [r7, #12]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d005      	beq.n	8011294 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011290:	2be0      	cmp	r3, #224	; 0xe0
 8011292:	d103      	bne.n	801129c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8011294:	6a3b      	ldr	r3, [r7, #32]
 8011296:	3304      	adds	r3, #4
 8011298:	617b      	str	r3, [r7, #20]
 801129a:	e00b      	b.n	80112b4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	681a      	ldr	r2, [r3, #0]
 80112a0:	6a3b      	ldr	r3, [r7, #32]
 80112a2:	3304      	adds	r3, #4
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	429a      	cmp	r2, r3
 80112a8:	d002      	beq.n	80112b0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80112aa:	f06f 0303 	mvn.w	r3, #3
 80112ae:	e00d      	b.n	80112cc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80112b4:	887a      	ldrh	r2, [r7, #2]
 80112b6:	697b      	ldr	r3, [r7, #20]
 80112b8:	9301      	str	r3, [sp, #4]
 80112ba:	6a3b      	ldr	r3, [r7, #32]
 80112bc:	9300      	str	r3, [sp, #0]
 80112be:	4613      	mov	r3, r2
 80112c0:	687a      	ldr	r2, [r7, #4]
 80112c2:	68b9      	ldr	r1, [r7, #8]
 80112c4:	68f8      	ldr	r0, [r7, #12]
 80112c6:	f000 f811 	bl	80112ec <udp_sendto_if_src>
 80112ca:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80112cc:	4618      	mov	r0, r3
 80112ce:	3718      	adds	r7, #24
 80112d0:	46bd      	mov	sp, r7
 80112d2:	bd80      	pop	{r7, pc}
 80112d4:	080189bc 	.word	0x080189bc
 80112d8:	08018b30 	.word	0x08018b30
 80112dc:	08018a10 	.word	0x08018a10
 80112e0:	08018b4c 	.word	0x08018b4c
 80112e4:	08018b68 	.word	0x08018b68
 80112e8:	08018b88 	.word	0x08018b88

080112ec <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b08c      	sub	sp, #48	; 0x30
 80112f0:	af04      	add	r7, sp, #16
 80112f2:	60f8      	str	r0, [r7, #12]
 80112f4:	60b9      	str	r1, [r7, #8]
 80112f6:	607a      	str	r2, [r7, #4]
 80112f8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d109      	bne.n	8011314 <udp_sendto_if_src+0x28>
 8011300:	4b65      	ldr	r3, [pc, #404]	; (8011498 <udp_sendto_if_src+0x1ac>)
 8011302:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011306:	4965      	ldr	r1, [pc, #404]	; (801149c <udp_sendto_if_src+0x1b0>)
 8011308:	4865      	ldr	r0, [pc, #404]	; (80114a0 <udp_sendto_if_src+0x1b4>)
 801130a:	f004 fca3 	bl	8015c54 <iprintf>
 801130e:	f06f 030f 	mvn.w	r3, #15
 8011312:	e0bc      	b.n	801148e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8011314:	68bb      	ldr	r3, [r7, #8]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d109      	bne.n	801132e <udp_sendto_if_src+0x42>
 801131a:	4b5f      	ldr	r3, [pc, #380]	; (8011498 <udp_sendto_if_src+0x1ac>)
 801131c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8011320:	4960      	ldr	r1, [pc, #384]	; (80114a4 <udp_sendto_if_src+0x1b8>)
 8011322:	485f      	ldr	r0, [pc, #380]	; (80114a0 <udp_sendto_if_src+0x1b4>)
 8011324:	f004 fc96 	bl	8015c54 <iprintf>
 8011328:	f06f 030f 	mvn.w	r3, #15
 801132c:	e0af      	b.n	801148e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	2b00      	cmp	r3, #0
 8011332:	d109      	bne.n	8011348 <udp_sendto_if_src+0x5c>
 8011334:	4b58      	ldr	r3, [pc, #352]	; (8011498 <udp_sendto_if_src+0x1ac>)
 8011336:	f240 22d3 	movw	r2, #723	; 0x2d3
 801133a:	495b      	ldr	r1, [pc, #364]	; (80114a8 <udp_sendto_if_src+0x1bc>)
 801133c:	4858      	ldr	r0, [pc, #352]	; (80114a0 <udp_sendto_if_src+0x1b4>)
 801133e:	f004 fc89 	bl	8015c54 <iprintf>
 8011342:	f06f 030f 	mvn.w	r3, #15
 8011346:	e0a2      	b.n	801148e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8011348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801134a:	2b00      	cmp	r3, #0
 801134c:	d109      	bne.n	8011362 <udp_sendto_if_src+0x76>
 801134e:	4b52      	ldr	r3, [pc, #328]	; (8011498 <udp_sendto_if_src+0x1ac>)
 8011350:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8011354:	4955      	ldr	r1, [pc, #340]	; (80114ac <udp_sendto_if_src+0x1c0>)
 8011356:	4852      	ldr	r0, [pc, #328]	; (80114a0 <udp_sendto_if_src+0x1b4>)
 8011358:	f004 fc7c 	bl	8015c54 <iprintf>
 801135c:	f06f 030f 	mvn.w	r3, #15
 8011360:	e095      	b.n	801148e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8011362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011364:	2b00      	cmp	r3, #0
 8011366:	d109      	bne.n	801137c <udp_sendto_if_src+0x90>
 8011368:	4b4b      	ldr	r3, [pc, #300]	; (8011498 <udp_sendto_if_src+0x1ac>)
 801136a:	f240 22d5 	movw	r2, #725	; 0x2d5
 801136e:	4950      	ldr	r1, [pc, #320]	; (80114b0 <udp_sendto_if_src+0x1c4>)
 8011370:	484b      	ldr	r0, [pc, #300]	; (80114a0 <udp_sendto_if_src+0x1b4>)
 8011372:	f004 fc6f 	bl	8015c54 <iprintf>
 8011376:	f06f 030f 	mvn.w	r3, #15
 801137a:	e088      	b.n	801148e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	8a5b      	ldrh	r3, [r3, #18]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d10f      	bne.n	80113a4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011384:	68f9      	ldr	r1, [r7, #12]
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	8a5b      	ldrh	r3, [r3, #18]
 801138a:	461a      	mov	r2, r3
 801138c:	68f8      	ldr	r0, [r7, #12]
 801138e:	f000 f893 	bl	80114b8 <udp_bind>
 8011392:	4603      	mov	r3, r0
 8011394:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8011396:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d002      	beq.n	80113a4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801139e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80113a2:	e074      	b.n	801148e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80113a4:	68bb      	ldr	r3, [r7, #8]
 80113a6:	891b      	ldrh	r3, [r3, #8]
 80113a8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80113ac:	4293      	cmp	r3, r2
 80113ae:	d902      	bls.n	80113b6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80113b0:	f04f 33ff 	mov.w	r3, #4294967295
 80113b4:	e06b      	b.n	801148e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80113b6:	2108      	movs	r1, #8
 80113b8:	68b8      	ldr	r0, [r7, #8]
 80113ba:	f7f9 ff2f 	bl	800b21c <pbuf_add_header>
 80113be:	4603      	mov	r3, r0
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d015      	beq.n	80113f0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80113c4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80113c8:	2108      	movs	r1, #8
 80113ca:	2022      	movs	r0, #34	; 0x22
 80113cc:	f7f9 fcdc 	bl	800ad88 <pbuf_alloc>
 80113d0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80113d2:	69fb      	ldr	r3, [r7, #28]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d102      	bne.n	80113de <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80113d8:	f04f 33ff 	mov.w	r3, #4294967295
 80113dc:	e057      	b.n	801148e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	891b      	ldrh	r3, [r3, #8]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d006      	beq.n	80113f4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80113e6:	68b9      	ldr	r1, [r7, #8]
 80113e8:	69f8      	ldr	r0, [r7, #28]
 80113ea:	f7fa f8c5 	bl	800b578 <pbuf_chain>
 80113ee:	e001      	b.n	80113f4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80113f4:	69fb      	ldr	r3, [r7, #28]
 80113f6:	895b      	ldrh	r3, [r3, #10]
 80113f8:	2b07      	cmp	r3, #7
 80113fa:	d806      	bhi.n	801140a <udp_sendto_if_src+0x11e>
 80113fc:	4b26      	ldr	r3, [pc, #152]	; (8011498 <udp_sendto_if_src+0x1ac>)
 80113fe:	f240 320e 	movw	r2, #782	; 0x30e
 8011402:	492c      	ldr	r1, [pc, #176]	; (80114b4 <udp_sendto_if_src+0x1c8>)
 8011404:	4826      	ldr	r0, [pc, #152]	; (80114a0 <udp_sendto_if_src+0x1b4>)
 8011406:	f004 fc25 	bl	8015c54 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801140a:	69fb      	ldr	r3, [r7, #28]
 801140c:	685b      	ldr	r3, [r3, #4]
 801140e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	8a5b      	ldrh	r3, [r3, #18]
 8011414:	4618      	mov	r0, r3
 8011416:	f7f8 fcf6 	bl	8009e06 <lwip_htons>
 801141a:	4603      	mov	r3, r0
 801141c:	461a      	mov	r2, r3
 801141e:	697b      	ldr	r3, [r7, #20]
 8011420:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8011422:	887b      	ldrh	r3, [r7, #2]
 8011424:	4618      	mov	r0, r3
 8011426:	f7f8 fcee 	bl	8009e06 <lwip_htons>
 801142a:	4603      	mov	r3, r0
 801142c:	461a      	mov	r2, r3
 801142e:	697b      	ldr	r3, [r7, #20]
 8011430:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8011432:	697b      	ldr	r3, [r7, #20]
 8011434:	2200      	movs	r2, #0
 8011436:	719a      	strb	r2, [r3, #6]
 8011438:	2200      	movs	r2, #0
 801143a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801143c:	69fb      	ldr	r3, [r7, #28]
 801143e:	891b      	ldrh	r3, [r3, #8]
 8011440:	4618      	mov	r0, r3
 8011442:	f7f8 fce0 	bl	8009e06 <lwip_htons>
 8011446:	4603      	mov	r3, r0
 8011448:	461a      	mov	r2, r3
 801144a:	697b      	ldr	r3, [r7, #20]
 801144c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801144e:	2311      	movs	r3, #17
 8011450:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	7adb      	ldrb	r3, [r3, #11]
 8011456:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	7a9b      	ldrb	r3, [r3, #10]
 801145c:	7cb9      	ldrb	r1, [r7, #18]
 801145e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011460:	9202      	str	r2, [sp, #8]
 8011462:	7cfa      	ldrb	r2, [r7, #19]
 8011464:	9201      	str	r2, [sp, #4]
 8011466:	9300      	str	r3, [sp, #0]
 8011468:	460b      	mov	r3, r1
 801146a:	687a      	ldr	r2, [r7, #4]
 801146c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801146e:	69f8      	ldr	r0, [r7, #28]
 8011470:	f003 faf8 	bl	8014a64 <ip4_output_if_src>
 8011474:	4603      	mov	r3, r0
 8011476:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8011478:	69fa      	ldr	r2, [r7, #28]
 801147a:	68bb      	ldr	r3, [r7, #8]
 801147c:	429a      	cmp	r2, r3
 801147e:	d004      	beq.n	801148a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8011480:	69f8      	ldr	r0, [r7, #28]
 8011482:	f7f9 ff61 	bl	800b348 <pbuf_free>
    q = NULL;
 8011486:	2300      	movs	r3, #0
 8011488:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801148a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801148e:	4618      	mov	r0, r3
 8011490:	3720      	adds	r7, #32
 8011492:	46bd      	mov	sp, r7
 8011494:	bd80      	pop	{r7, pc}
 8011496:	bf00      	nop
 8011498:	080189bc 	.word	0x080189bc
 801149c:	08018ba8 	.word	0x08018ba8
 80114a0:	08018a10 	.word	0x08018a10
 80114a4:	08018bc8 	.word	0x08018bc8
 80114a8:	08018be8 	.word	0x08018be8
 80114ac:	08018c0c 	.word	0x08018c0c
 80114b0:	08018c30 	.word	0x08018c30
 80114b4:	08018c54 	.word	0x08018c54

080114b8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b086      	sub	sp, #24
 80114bc:	af00      	add	r7, sp, #0
 80114be:	60f8      	str	r0, [r7, #12]
 80114c0:	60b9      	str	r1, [r7, #8]
 80114c2:	4613      	mov	r3, r2
 80114c4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80114c6:	68bb      	ldr	r3, [r7, #8]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d101      	bne.n	80114d0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80114cc:	4b39      	ldr	r3, [pc, #228]	; (80115b4 <udp_bind+0xfc>)
 80114ce:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d109      	bne.n	80114ea <udp_bind+0x32>
 80114d6:	4b38      	ldr	r3, [pc, #224]	; (80115b8 <udp_bind+0x100>)
 80114d8:	f240 32b7 	movw	r2, #951	; 0x3b7
 80114dc:	4937      	ldr	r1, [pc, #220]	; (80115bc <udp_bind+0x104>)
 80114de:	4838      	ldr	r0, [pc, #224]	; (80115c0 <udp_bind+0x108>)
 80114e0:	f004 fbb8 	bl	8015c54 <iprintf>
 80114e4:	f06f 030f 	mvn.w	r3, #15
 80114e8:	e060      	b.n	80115ac <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80114ea:	2300      	movs	r3, #0
 80114ec:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80114ee:	4b35      	ldr	r3, [pc, #212]	; (80115c4 <udp_bind+0x10c>)
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	617b      	str	r3, [r7, #20]
 80114f4:	e009      	b.n	801150a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80114f6:	68fa      	ldr	r2, [r7, #12]
 80114f8:	697b      	ldr	r3, [r7, #20]
 80114fa:	429a      	cmp	r2, r3
 80114fc:	d102      	bne.n	8011504 <udp_bind+0x4c>
      rebind = 1;
 80114fe:	2301      	movs	r3, #1
 8011500:	74fb      	strb	r3, [r7, #19]
      break;
 8011502:	e005      	b.n	8011510 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011504:	697b      	ldr	r3, [r7, #20]
 8011506:	68db      	ldr	r3, [r3, #12]
 8011508:	617b      	str	r3, [r7, #20]
 801150a:	697b      	ldr	r3, [r7, #20]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d1f2      	bne.n	80114f6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8011510:	88fb      	ldrh	r3, [r7, #6]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d109      	bne.n	801152a <udp_bind+0x72>
    port = udp_new_port();
 8011516:	f7ff fc69 	bl	8010dec <udp_new_port>
 801151a:	4603      	mov	r3, r0
 801151c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801151e:	88fb      	ldrh	r3, [r7, #6]
 8011520:	2b00      	cmp	r3, #0
 8011522:	d12c      	bne.n	801157e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011524:	f06f 0307 	mvn.w	r3, #7
 8011528:	e040      	b.n	80115ac <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801152a:	4b26      	ldr	r3, [pc, #152]	; (80115c4 <udp_bind+0x10c>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	617b      	str	r3, [r7, #20]
 8011530:	e022      	b.n	8011578 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8011532:	68fa      	ldr	r2, [r7, #12]
 8011534:	697b      	ldr	r3, [r7, #20]
 8011536:	429a      	cmp	r2, r3
 8011538:	d01b      	beq.n	8011572 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801153a:	697b      	ldr	r3, [r7, #20]
 801153c:	8a5b      	ldrh	r3, [r3, #18]
 801153e:	88fa      	ldrh	r2, [r7, #6]
 8011540:	429a      	cmp	r2, r3
 8011542:	d116      	bne.n	8011572 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011544:	697b      	ldr	r3, [r7, #20]
 8011546:	681a      	ldr	r2, [r3, #0]
 8011548:	68bb      	ldr	r3, [r7, #8]
 801154a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801154c:	429a      	cmp	r2, r3
 801154e:	d00d      	beq.n	801156c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011550:	68bb      	ldr	r3, [r7, #8]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d00a      	beq.n	801156c <udp_bind+0xb4>
 8011556:	68bb      	ldr	r3, [r7, #8]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d006      	beq.n	801156c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801155e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011560:	2b00      	cmp	r3, #0
 8011562:	d003      	beq.n	801156c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011564:	697b      	ldr	r3, [r7, #20]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d102      	bne.n	8011572 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801156c:	f06f 0307 	mvn.w	r3, #7
 8011570:	e01c      	b.n	80115ac <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011572:	697b      	ldr	r3, [r7, #20]
 8011574:	68db      	ldr	r3, [r3, #12]
 8011576:	617b      	str	r3, [r7, #20]
 8011578:	697b      	ldr	r3, [r7, #20]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d1d9      	bne.n	8011532 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801157e:	68bb      	ldr	r3, [r7, #8]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d002      	beq.n	801158a <udp_bind+0xd2>
 8011584:	68bb      	ldr	r3, [r7, #8]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	e000      	b.n	801158c <udp_bind+0xd4>
 801158a:	2300      	movs	r3, #0
 801158c:	68fa      	ldr	r2, [r7, #12]
 801158e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	88fa      	ldrh	r2, [r7, #6]
 8011594:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8011596:	7cfb      	ldrb	r3, [r7, #19]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d106      	bne.n	80115aa <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801159c:	4b09      	ldr	r3, [pc, #36]	; (80115c4 <udp_bind+0x10c>)
 801159e:	681a      	ldr	r2, [r3, #0]
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80115a4:	4a07      	ldr	r2, [pc, #28]	; (80115c4 <udp_bind+0x10c>)
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80115aa:	2300      	movs	r3, #0
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	3718      	adds	r7, #24
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd80      	pop	{r7, pc}
 80115b4:	08028224 	.word	0x08028224
 80115b8:	080189bc 	.word	0x080189bc
 80115bc:	08018c84 	.word	0x08018c84
 80115c0:	08018a10 	.word	0x08018a10
 80115c4:	2000770c 	.word	0x2000770c

080115c8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b086      	sub	sp, #24
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	60f8      	str	r0, [r7, #12]
 80115d0:	60b9      	str	r1, [r7, #8]
 80115d2:	4613      	mov	r3, r2
 80115d4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d109      	bne.n	80115f0 <udp_connect+0x28>
 80115dc:	4b2c      	ldr	r3, [pc, #176]	; (8011690 <udp_connect+0xc8>)
 80115de:	f240 4235 	movw	r2, #1077	; 0x435
 80115e2:	492c      	ldr	r1, [pc, #176]	; (8011694 <udp_connect+0xcc>)
 80115e4:	482c      	ldr	r0, [pc, #176]	; (8011698 <udp_connect+0xd0>)
 80115e6:	f004 fb35 	bl	8015c54 <iprintf>
 80115ea:	f06f 030f 	mvn.w	r3, #15
 80115ee:	e04b      	b.n	8011688 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80115f0:	68bb      	ldr	r3, [r7, #8]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d109      	bne.n	801160a <udp_connect+0x42>
 80115f6:	4b26      	ldr	r3, [pc, #152]	; (8011690 <udp_connect+0xc8>)
 80115f8:	f240 4236 	movw	r2, #1078	; 0x436
 80115fc:	4927      	ldr	r1, [pc, #156]	; (801169c <udp_connect+0xd4>)
 80115fe:	4826      	ldr	r0, [pc, #152]	; (8011698 <udp_connect+0xd0>)
 8011600:	f004 fb28 	bl	8015c54 <iprintf>
 8011604:	f06f 030f 	mvn.w	r3, #15
 8011608:	e03e      	b.n	8011688 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	8a5b      	ldrh	r3, [r3, #18]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d10f      	bne.n	8011632 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011612:	68f9      	ldr	r1, [r7, #12]
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	8a5b      	ldrh	r3, [r3, #18]
 8011618:	461a      	mov	r2, r3
 801161a:	68f8      	ldr	r0, [r7, #12]
 801161c:	f7ff ff4c 	bl	80114b8 <udp_bind>
 8011620:	4603      	mov	r3, r0
 8011622:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011624:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d002      	beq.n	8011632 <udp_connect+0x6a>
      return err;
 801162c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011630:	e02a      	b.n	8011688 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8011632:	68bb      	ldr	r3, [r7, #8]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d002      	beq.n	801163e <udp_connect+0x76>
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	e000      	b.n	8011640 <udp_connect+0x78>
 801163e:	2300      	movs	r3, #0
 8011640:	68fa      	ldr	r2, [r7, #12]
 8011642:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	88fa      	ldrh	r2, [r7, #6]
 8011648:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	7c1b      	ldrb	r3, [r3, #16]
 801164e:	f043 0304 	orr.w	r3, r3, #4
 8011652:	b2da      	uxtb	r2, r3
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011658:	4b11      	ldr	r3, [pc, #68]	; (80116a0 <udp_connect+0xd8>)
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	617b      	str	r3, [r7, #20]
 801165e:	e008      	b.n	8011672 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8011660:	68fa      	ldr	r2, [r7, #12]
 8011662:	697b      	ldr	r3, [r7, #20]
 8011664:	429a      	cmp	r2, r3
 8011666:	d101      	bne.n	801166c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8011668:	2300      	movs	r3, #0
 801166a:	e00d      	b.n	8011688 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801166c:	697b      	ldr	r3, [r7, #20]
 801166e:	68db      	ldr	r3, [r3, #12]
 8011670:	617b      	str	r3, [r7, #20]
 8011672:	697b      	ldr	r3, [r7, #20]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d1f3      	bne.n	8011660 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8011678:	4b09      	ldr	r3, [pc, #36]	; (80116a0 <udp_connect+0xd8>)
 801167a:	681a      	ldr	r2, [r3, #0]
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8011680:	4a07      	ldr	r2, [pc, #28]	; (80116a0 <udp_connect+0xd8>)
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8011686:	2300      	movs	r3, #0
}
 8011688:	4618      	mov	r0, r3
 801168a:	3718      	adds	r7, #24
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}
 8011690:	080189bc 	.word	0x080189bc
 8011694:	08018c9c 	.word	0x08018c9c
 8011698:	08018a10 	.word	0x08018a10
 801169c:	08018cb8 	.word	0x08018cb8
 80116a0:	2000770c 	.word	0x2000770c

080116a4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b084      	sub	sp, #16
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	60f8      	str	r0, [r7, #12]
 80116ac:	60b9      	str	r1, [r7, #8]
 80116ae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d107      	bne.n	80116c6 <udp_recv+0x22>
 80116b6:	4b08      	ldr	r3, [pc, #32]	; (80116d8 <udp_recv+0x34>)
 80116b8:	f240 428a 	movw	r2, #1162	; 0x48a
 80116bc:	4907      	ldr	r1, [pc, #28]	; (80116dc <udp_recv+0x38>)
 80116be:	4808      	ldr	r0, [pc, #32]	; (80116e0 <udp_recv+0x3c>)
 80116c0:	f004 fac8 	bl	8015c54 <iprintf>
 80116c4:	e005      	b.n	80116d2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	68ba      	ldr	r2, [r7, #8]
 80116ca:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	687a      	ldr	r2, [r7, #4]
 80116d0:	61da      	str	r2, [r3, #28]
}
 80116d2:	3710      	adds	r7, #16
 80116d4:	46bd      	mov	sp, r7
 80116d6:	bd80      	pop	{r7, pc}
 80116d8:	080189bc 	.word	0x080189bc
 80116dc:	08018cf0 	.word	0x08018cf0
 80116e0:	08018a10 	.word	0x08018a10

080116e4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b084      	sub	sp, #16
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d107      	bne.n	8011702 <udp_remove+0x1e>
 80116f2:	4b19      	ldr	r3, [pc, #100]	; (8011758 <udp_remove+0x74>)
 80116f4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80116f8:	4918      	ldr	r1, [pc, #96]	; (801175c <udp_remove+0x78>)
 80116fa:	4819      	ldr	r0, [pc, #100]	; (8011760 <udp_remove+0x7c>)
 80116fc:	f004 faaa 	bl	8015c54 <iprintf>
 8011700:	e026      	b.n	8011750 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8011702:	4b18      	ldr	r3, [pc, #96]	; (8011764 <udp_remove+0x80>)
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	687a      	ldr	r2, [r7, #4]
 8011708:	429a      	cmp	r2, r3
 801170a:	d105      	bne.n	8011718 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801170c:	4b15      	ldr	r3, [pc, #84]	; (8011764 <udp_remove+0x80>)
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	68db      	ldr	r3, [r3, #12]
 8011712:	4a14      	ldr	r2, [pc, #80]	; (8011764 <udp_remove+0x80>)
 8011714:	6013      	str	r3, [r2, #0]
 8011716:	e017      	b.n	8011748 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011718:	4b12      	ldr	r3, [pc, #72]	; (8011764 <udp_remove+0x80>)
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	60fb      	str	r3, [r7, #12]
 801171e:	e010      	b.n	8011742 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	68db      	ldr	r3, [r3, #12]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d009      	beq.n	801173c <udp_remove+0x58>
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	68db      	ldr	r3, [r3, #12]
 801172c:	687a      	ldr	r2, [r7, #4]
 801172e:	429a      	cmp	r2, r3
 8011730:	d104      	bne.n	801173c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	68da      	ldr	r2, [r3, #12]
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	60da      	str	r2, [r3, #12]
        break;
 801173a:	e005      	b.n	8011748 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	68db      	ldr	r3, [r3, #12]
 8011740:	60fb      	str	r3, [r7, #12]
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d1eb      	bne.n	8011720 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8011748:	6879      	ldr	r1, [r7, #4]
 801174a:	2000      	movs	r0, #0
 801174c:	f7f8 fffc 	bl	800a748 <memp_free>
}
 8011750:	3710      	adds	r7, #16
 8011752:	46bd      	mov	sp, r7
 8011754:	bd80      	pop	{r7, pc}
 8011756:	bf00      	nop
 8011758:	080189bc 	.word	0x080189bc
 801175c:	08018d08 	.word	0x08018d08
 8011760:	08018a10 	.word	0x08018a10
 8011764:	2000770c 	.word	0x2000770c

08011768 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b082      	sub	sp, #8
 801176c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801176e:	2000      	movs	r0, #0
 8011770:	f7f8 ff9e 	bl	800a6b0 <memp_malloc>
 8011774:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d007      	beq.n	801178c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801177c:	2220      	movs	r2, #32
 801177e:	2100      	movs	r1, #0
 8011780:	6878      	ldr	r0, [r7, #4]
 8011782:	f004 f9b7 	bl	8015af4 <memset>
    pcb->ttl = UDP_TTL;
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	22ff      	movs	r2, #255	; 0xff
 801178a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801178c:	687b      	ldr	r3, [r7, #4]
}
 801178e:	4618      	mov	r0, r3
 8011790:	3708      	adds	r7, #8
 8011792:	46bd      	mov	sp, r7
 8011794:	bd80      	pop	{r7, pc}
	...

08011798 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011798:	b480      	push	{r7}
 801179a:	b085      	sub	sp, #20
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
 80117a0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d01e      	beq.n	80117e6 <udp_netif_ip_addr_changed+0x4e>
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d01a      	beq.n	80117e6 <udp_netif_ip_addr_changed+0x4e>
 80117b0:	683b      	ldr	r3, [r7, #0]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d017      	beq.n	80117e6 <udp_netif_ip_addr_changed+0x4e>
 80117b6:	683b      	ldr	r3, [r7, #0]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d013      	beq.n	80117e6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80117be:	4b0d      	ldr	r3, [pc, #52]	; (80117f4 <udp_netif_ip_addr_changed+0x5c>)
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	60fb      	str	r3, [r7, #12]
 80117c4:	e00c      	b.n	80117e0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	681a      	ldr	r2, [r3, #0]
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	429a      	cmp	r2, r3
 80117d0:	d103      	bne.n	80117da <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80117d2:	683b      	ldr	r3, [r7, #0]
 80117d4:	681a      	ldr	r2, [r3, #0]
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	68db      	ldr	r3, [r3, #12]
 80117de:	60fb      	str	r3, [r7, #12]
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d1ef      	bne.n	80117c6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80117e6:	bf00      	nop
 80117e8:	3714      	adds	r7, #20
 80117ea:	46bd      	mov	sp, r7
 80117ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f0:	4770      	bx	lr
 80117f2:	bf00      	nop
 80117f4:	2000770c 	.word	0x2000770c

080117f8 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80117fc:	4b20      	ldr	r3, [pc, #128]	; (8011880 <dhcp_inc_pcb_refcount+0x88>)
 80117fe:	781b      	ldrb	r3, [r3, #0]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d133      	bne.n	801186c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8011804:	4b1f      	ldr	r3, [pc, #124]	; (8011884 <dhcp_inc_pcb_refcount+0x8c>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d005      	beq.n	8011818 <dhcp_inc_pcb_refcount+0x20>
 801180c:	4b1e      	ldr	r3, [pc, #120]	; (8011888 <dhcp_inc_pcb_refcount+0x90>)
 801180e:	22e5      	movs	r2, #229	; 0xe5
 8011810:	491e      	ldr	r1, [pc, #120]	; (801188c <dhcp_inc_pcb_refcount+0x94>)
 8011812:	481f      	ldr	r0, [pc, #124]	; (8011890 <dhcp_inc_pcb_refcount+0x98>)
 8011814:	f004 fa1e 	bl	8015c54 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8011818:	f7ff ffa6 	bl	8011768 <udp_new>
 801181c:	4602      	mov	r2, r0
 801181e:	4b19      	ldr	r3, [pc, #100]	; (8011884 <dhcp_inc_pcb_refcount+0x8c>)
 8011820:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 8011822:	4b18      	ldr	r3, [pc, #96]	; (8011884 <dhcp_inc_pcb_refcount+0x8c>)
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d102      	bne.n	8011830 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801182a:	f04f 33ff 	mov.w	r3, #4294967295
 801182e:	e024      	b.n	801187a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8011830:	4b14      	ldr	r3, [pc, #80]	; (8011884 <dhcp_inc_pcb_refcount+0x8c>)
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	7a5a      	ldrb	r2, [r3, #9]
 8011836:	4b13      	ldr	r3, [pc, #76]	; (8011884 <dhcp_inc_pcb_refcount+0x8c>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	f042 0220 	orr.w	r2, r2, #32
 801183e:	b2d2      	uxtb	r2, r2
 8011840:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8011842:	4b10      	ldr	r3, [pc, #64]	; (8011884 <dhcp_inc_pcb_refcount+0x8c>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	2244      	movs	r2, #68	; 0x44
 8011848:	4912      	ldr	r1, [pc, #72]	; (8011894 <dhcp_inc_pcb_refcount+0x9c>)
 801184a:	4618      	mov	r0, r3
 801184c:	f7ff fe34 	bl	80114b8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8011850:	4b0c      	ldr	r3, [pc, #48]	; (8011884 <dhcp_inc_pcb_refcount+0x8c>)
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	2243      	movs	r2, #67	; 0x43
 8011856:	490f      	ldr	r1, [pc, #60]	; (8011894 <dhcp_inc_pcb_refcount+0x9c>)
 8011858:	4618      	mov	r0, r3
 801185a:	f7ff feb5 	bl	80115c8 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801185e:	4b09      	ldr	r3, [pc, #36]	; (8011884 <dhcp_inc_pcb_refcount+0x8c>)
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	2200      	movs	r2, #0
 8011864:	490c      	ldr	r1, [pc, #48]	; (8011898 <dhcp_inc_pcb_refcount+0xa0>)
 8011866:	4618      	mov	r0, r3
 8011868:	f7ff ff1c 	bl	80116a4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 801186c:	4b04      	ldr	r3, [pc, #16]	; (8011880 <dhcp_inc_pcb_refcount+0x88>)
 801186e:	781b      	ldrb	r3, [r3, #0]
 8011870:	3301      	adds	r3, #1
 8011872:	b2da      	uxtb	r2, r3
 8011874:	4b02      	ldr	r3, [pc, #8]	; (8011880 <dhcp_inc_pcb_refcount+0x88>)
 8011876:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8011878:	2300      	movs	r3, #0
}
 801187a:	4618      	mov	r0, r3
 801187c:	bd80      	pop	{r7, pc}
 801187e:	bf00      	nop
 8011880:	20000498 	.word	0x20000498
 8011884:	20000494 	.word	0x20000494
 8011888:	08018d20 	.word	0x08018d20
 801188c:	08018d58 	.word	0x08018d58
 8011890:	08018d80 	.word	0x08018d80
 8011894:	08028224 	.word	0x08028224
 8011898:	080130b5 	.word	0x080130b5

0801189c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80118a0:	4b0e      	ldr	r3, [pc, #56]	; (80118dc <dhcp_dec_pcb_refcount+0x40>)
 80118a2:	781b      	ldrb	r3, [r3, #0]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d105      	bne.n	80118b4 <dhcp_dec_pcb_refcount+0x18>
 80118a8:	4b0d      	ldr	r3, [pc, #52]	; (80118e0 <dhcp_dec_pcb_refcount+0x44>)
 80118aa:	22ff      	movs	r2, #255	; 0xff
 80118ac:	490d      	ldr	r1, [pc, #52]	; (80118e4 <dhcp_dec_pcb_refcount+0x48>)
 80118ae:	480e      	ldr	r0, [pc, #56]	; (80118e8 <dhcp_dec_pcb_refcount+0x4c>)
 80118b0:	f004 f9d0 	bl	8015c54 <iprintf>
  dhcp_pcb_refcount--;
 80118b4:	4b09      	ldr	r3, [pc, #36]	; (80118dc <dhcp_dec_pcb_refcount+0x40>)
 80118b6:	781b      	ldrb	r3, [r3, #0]
 80118b8:	3b01      	subs	r3, #1
 80118ba:	b2da      	uxtb	r2, r3
 80118bc:	4b07      	ldr	r3, [pc, #28]	; (80118dc <dhcp_dec_pcb_refcount+0x40>)
 80118be:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80118c0:	4b06      	ldr	r3, [pc, #24]	; (80118dc <dhcp_dec_pcb_refcount+0x40>)
 80118c2:	781b      	ldrb	r3, [r3, #0]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d107      	bne.n	80118d8 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80118c8:	4b08      	ldr	r3, [pc, #32]	; (80118ec <dhcp_dec_pcb_refcount+0x50>)
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	4618      	mov	r0, r3
 80118ce:	f7ff ff09 	bl	80116e4 <udp_remove>
    dhcp_pcb = NULL;
 80118d2:	4b06      	ldr	r3, [pc, #24]	; (80118ec <dhcp_dec_pcb_refcount+0x50>)
 80118d4:	2200      	movs	r2, #0
 80118d6:	601a      	str	r2, [r3, #0]
  }
}
 80118d8:	bf00      	nop
 80118da:	bd80      	pop	{r7, pc}
 80118dc:	20000498 	.word	0x20000498
 80118e0:	08018d20 	.word	0x08018d20
 80118e4:	08018da8 	.word	0x08018da8
 80118e8:	08018d80 	.word	0x08018d80
 80118ec:	20000494 	.word	0x20000494

080118f0 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b084      	sub	sp, #16
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	6a1b      	ldr	r3, [r3, #32]
 80118fc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80118fe:	210c      	movs	r1, #12
 8011900:	68f8      	ldr	r0, [r7, #12]
 8011902:	f001 f819 	bl	8012938 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8011906:	4b06      	ldr	r3, [pc, #24]	; (8011920 <dhcp_handle_nak+0x30>)
 8011908:	4a05      	ldr	r2, [pc, #20]	; (8011920 <dhcp_handle_nak+0x30>)
 801190a:	4905      	ldr	r1, [pc, #20]	; (8011920 <dhcp_handle_nak+0x30>)
 801190c:	6878      	ldr	r0, [r7, #4]
 801190e:	f7f9 f8b9 	bl	800aa84 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8011912:	6878      	ldr	r0, [r7, #4]
 8011914:	f000 fc0c 	bl	8012130 <dhcp_discover>
}
 8011918:	bf00      	nop
 801191a:	3710      	adds	r7, #16
 801191c:	46bd      	mov	sp, r7
 801191e:	bd80      	pop	{r7, pc}
 8011920:	08028224 	.word	0x08028224

08011924 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b084      	sub	sp, #16
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	6a1b      	ldr	r3, [r3, #32]
 8011930:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8011932:	2108      	movs	r1, #8
 8011934:	68f8      	ldr	r0, [r7, #12]
 8011936:	f000 ffff 	bl	8012938 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	331c      	adds	r3, #28
 801193e:	2200      	movs	r2, #0
 8011940:	4619      	mov	r1, r3
 8011942:	6878      	ldr	r0, [r7, #4]
 8011944:	f002 fafe 	bl	8013f44 <etharp_query>
 8011948:	4603      	mov	r3, r0
 801194a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	799b      	ldrb	r3, [r3, #6]
 8011950:	2bff      	cmp	r3, #255	; 0xff
 8011952:	d005      	beq.n	8011960 <dhcp_check+0x3c>
    dhcp->tries++;
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	799b      	ldrb	r3, [r3, #6]
 8011958:	3301      	adds	r3, #1
 801195a:	b2da      	uxtb	r2, r3
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8011960:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8011964:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011966:	893b      	ldrh	r3, [r7, #8]
 8011968:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801196c:	4a06      	ldr	r2, [pc, #24]	; (8011988 <dhcp_check+0x64>)
 801196e:	fb82 1203 	smull	r1, r2, r2, r3
 8011972:	1152      	asrs	r2, r2, #5
 8011974:	17db      	asrs	r3, r3, #31
 8011976:	1ad3      	subs	r3, r2, r3
 8011978:	b29a      	uxth	r2, r3
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801197e:	bf00      	nop
 8011980:	3710      	adds	r7, #16
 8011982:	46bd      	mov	sp, r7
 8011984:	bd80      	pop	{r7, pc}
 8011986:	bf00      	nop
 8011988:	10624dd3 	.word	0x10624dd3

0801198c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b084      	sub	sp, #16
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
 8011994:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	6a1b      	ldr	r3, [r3, #32]
 801199a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801199c:	4b0c      	ldr	r3, [pc, #48]	; (80119d0 <dhcp_handle_offer+0x44>)
 801199e:	789b      	ldrb	r3, [r3, #2]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d011      	beq.n	80119c8 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	2200      	movs	r2, #0
 80119a8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80119aa:	4b0a      	ldr	r3, [pc, #40]	; (80119d4 <dhcp_handle_offer+0x48>)
 80119ac:	689b      	ldr	r3, [r3, #8]
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7f8 fa3e 	bl	8009e30 <lwip_htonl>
 80119b4:	4602      	mov	r2, r0
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	691a      	ldr	r2, [r3, #16]
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80119c2:	6878      	ldr	r0, [r7, #4]
 80119c4:	f000 f808 	bl	80119d8 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80119c8:	bf00      	nop
 80119ca:	3710      	adds	r7, #16
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd80      	pop	{r7, pc}
 80119d0:	20007710 	.word	0x20007710
 80119d4:	20007718 	.word	0x20007718

080119d8 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80119d8:	b5b0      	push	{r4, r5, r7, lr}
 80119da:	b08a      	sub	sp, #40	; 0x28
 80119dc:	af02      	add	r7, sp, #8
 80119de:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d109      	bne.n	80119fa <dhcp_select+0x22>
 80119e6:	4b71      	ldr	r3, [pc, #452]	; (8011bac <dhcp_select+0x1d4>)
 80119e8:	f240 1277 	movw	r2, #375	; 0x177
 80119ec:	4970      	ldr	r1, [pc, #448]	; (8011bb0 <dhcp_select+0x1d8>)
 80119ee:	4871      	ldr	r0, [pc, #452]	; (8011bb4 <dhcp_select+0x1dc>)
 80119f0:	f004 f930 	bl	8015c54 <iprintf>
 80119f4:	f06f 030f 	mvn.w	r3, #15
 80119f8:	e0d3      	b.n	8011ba2 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	6a1b      	ldr	r3, [r3, #32]
 80119fe:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8011a00:	69bb      	ldr	r3, [r7, #24]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d109      	bne.n	8011a1a <dhcp_select+0x42>
 8011a06:	4b69      	ldr	r3, [pc, #420]	; (8011bac <dhcp_select+0x1d4>)
 8011a08:	f240 1279 	movw	r2, #377	; 0x179
 8011a0c:	496a      	ldr	r1, [pc, #424]	; (8011bb8 <dhcp_select+0x1e0>)
 8011a0e:	4869      	ldr	r0, [pc, #420]	; (8011bb4 <dhcp_select+0x1dc>)
 8011a10:	f004 f920 	bl	8015c54 <iprintf>
 8011a14:	f06f 0305 	mvn.w	r3, #5
 8011a18:	e0c3      	b.n	8011ba2 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8011a1a:	2101      	movs	r1, #1
 8011a1c:	69b8      	ldr	r0, [r7, #24]
 8011a1e:	f000 ff8b 	bl	8012938 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011a22:	f107 030c 	add.w	r3, r7, #12
 8011a26:	2203      	movs	r2, #3
 8011a28:	69b9      	ldr	r1, [r7, #24]
 8011a2a:	6878      	ldr	r0, [r7, #4]
 8011a2c:	f001 fc0e 	bl	801324c <dhcp_create_msg>
 8011a30:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011a32:	697b      	ldr	r3, [r7, #20]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	f000 8085 	beq.w	8011b44 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011a3a:	697b      	ldr	r3, [r7, #20]
 8011a3c:	685b      	ldr	r3, [r3, #4]
 8011a3e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011a40:	89b8      	ldrh	r0, [r7, #12]
 8011a42:	693b      	ldr	r3, [r7, #16]
 8011a44:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011a48:	2302      	movs	r3, #2
 8011a4a:	2239      	movs	r2, #57	; 0x39
 8011a4c:	f000 ff8e 	bl	801296c <dhcp_option>
 8011a50:	4603      	mov	r3, r0
 8011a52:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011a54:	89b8      	ldrh	r0, [r7, #12]
 8011a56:	693b      	ldr	r3, [r7, #16]
 8011a58:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011a60:	461a      	mov	r2, r3
 8011a62:	f000 ffdd 	bl	8012a20 <dhcp_option_short>
 8011a66:	4603      	mov	r3, r0
 8011a68:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8011a6a:	89b8      	ldrh	r0, [r7, #12]
 8011a6c:	693b      	ldr	r3, [r7, #16]
 8011a6e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011a72:	2304      	movs	r3, #4
 8011a74:	2232      	movs	r2, #50	; 0x32
 8011a76:	f000 ff79 	bl	801296c <dhcp_option>
 8011a7a:	4603      	mov	r3, r0
 8011a7c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8011a7e:	89bc      	ldrh	r4, [r7, #12]
 8011a80:	693b      	ldr	r3, [r7, #16]
 8011a82:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011a86:	69bb      	ldr	r3, [r7, #24]
 8011a88:	69db      	ldr	r3, [r3, #28]
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f7f8 f9d0 	bl	8009e30 <lwip_htonl>
 8011a90:	4603      	mov	r3, r0
 8011a92:	461a      	mov	r2, r3
 8011a94:	4629      	mov	r1, r5
 8011a96:	4620      	mov	r0, r4
 8011a98:	f000 fff4 	bl	8012a84 <dhcp_option_long>
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8011aa0:	89b8      	ldrh	r0, [r7, #12]
 8011aa2:	693b      	ldr	r3, [r7, #16]
 8011aa4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011aa8:	2304      	movs	r3, #4
 8011aaa:	2236      	movs	r2, #54	; 0x36
 8011aac:	f000 ff5e 	bl	801296c <dhcp_option>
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8011ab4:	89bc      	ldrh	r4, [r7, #12]
 8011ab6:	693b      	ldr	r3, [r7, #16]
 8011ab8:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011abc:	69bb      	ldr	r3, [r7, #24]
 8011abe:	699b      	ldr	r3, [r3, #24]
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f7f8 f9b5 	bl	8009e30 <lwip_htonl>
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	461a      	mov	r2, r3
 8011aca:	4629      	mov	r1, r5
 8011acc:	4620      	mov	r0, r4
 8011ace:	f000 ffd9 	bl	8012a84 <dhcp_option_long>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011ad6:	89b8      	ldrh	r0, [r7, #12]
 8011ad8:	693b      	ldr	r3, [r7, #16]
 8011ada:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011ade:	2303      	movs	r3, #3
 8011ae0:	2237      	movs	r2, #55	; 0x37
 8011ae2:	f000 ff43 	bl	801296c <dhcp_option>
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011aea:	2300      	movs	r3, #0
 8011aec:	77bb      	strb	r3, [r7, #30]
 8011aee:	e00e      	b.n	8011b0e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011af0:	89b8      	ldrh	r0, [r7, #12]
 8011af2:	693b      	ldr	r3, [r7, #16]
 8011af4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011af8:	7fbb      	ldrb	r3, [r7, #30]
 8011afa:	4a30      	ldr	r2, [pc, #192]	; (8011bbc <dhcp_select+0x1e4>)
 8011afc:	5cd3      	ldrb	r3, [r2, r3]
 8011afe:	461a      	mov	r2, r3
 8011b00:	f000 ff68 	bl	80129d4 <dhcp_option_byte>
 8011b04:	4603      	mov	r3, r0
 8011b06:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011b08:	7fbb      	ldrb	r3, [r7, #30]
 8011b0a:	3301      	adds	r3, #1
 8011b0c:	77bb      	strb	r3, [r7, #30]
 8011b0e:	7fbb      	ldrb	r3, [r7, #30]
 8011b10:	2b02      	cmp	r3, #2
 8011b12:	d9ed      	bls.n	8011af0 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011b14:	89b8      	ldrh	r0, [r7, #12]
 8011b16:	693b      	ldr	r3, [r7, #16]
 8011b18:	33f0      	adds	r3, #240	; 0xf0
 8011b1a:	697a      	ldr	r2, [r7, #20]
 8011b1c:	4619      	mov	r1, r3
 8011b1e:	f001 fc6b 	bl	80133f8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8011b22:	4b27      	ldr	r3, [pc, #156]	; (8011bc0 <dhcp_select+0x1e8>)
 8011b24:	6818      	ldr	r0, [r3, #0]
 8011b26:	4b27      	ldr	r3, [pc, #156]	; (8011bc4 <dhcp_select+0x1ec>)
 8011b28:	9301      	str	r3, [sp, #4]
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	9300      	str	r3, [sp, #0]
 8011b2e:	2343      	movs	r3, #67	; 0x43
 8011b30:	4a25      	ldr	r2, [pc, #148]	; (8011bc8 <dhcp_select+0x1f0>)
 8011b32:	6979      	ldr	r1, [r7, #20]
 8011b34:	f7ff fbda 	bl	80112ec <udp_sendto_if_src>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011b3c:	6978      	ldr	r0, [r7, #20]
 8011b3e:	f7f9 fc03 	bl	800b348 <pbuf_free>
 8011b42:	e001      	b.n	8011b48 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011b44:	23ff      	movs	r3, #255	; 0xff
 8011b46:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011b48:	69bb      	ldr	r3, [r7, #24]
 8011b4a:	799b      	ldrb	r3, [r3, #6]
 8011b4c:	2bff      	cmp	r3, #255	; 0xff
 8011b4e:	d005      	beq.n	8011b5c <dhcp_select+0x184>
    dhcp->tries++;
 8011b50:	69bb      	ldr	r3, [r7, #24]
 8011b52:	799b      	ldrb	r3, [r3, #6]
 8011b54:	3301      	adds	r3, #1
 8011b56:	b2da      	uxtb	r2, r3
 8011b58:	69bb      	ldr	r3, [r7, #24]
 8011b5a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8011b5c:	69bb      	ldr	r3, [r7, #24]
 8011b5e:	799b      	ldrb	r3, [r3, #6]
 8011b60:	2b05      	cmp	r3, #5
 8011b62:	d80d      	bhi.n	8011b80 <dhcp_select+0x1a8>
 8011b64:	69bb      	ldr	r3, [r7, #24]
 8011b66:	799b      	ldrb	r3, [r3, #6]
 8011b68:	461a      	mov	r2, r3
 8011b6a:	2301      	movs	r3, #1
 8011b6c:	4093      	lsls	r3, r2
 8011b6e:	b29b      	uxth	r3, r3
 8011b70:	461a      	mov	r2, r3
 8011b72:	0152      	lsls	r2, r2, #5
 8011b74:	1ad2      	subs	r2, r2, r3
 8011b76:	0092      	lsls	r2, r2, #2
 8011b78:	4413      	add	r3, r2
 8011b7a:	00db      	lsls	r3, r3, #3
 8011b7c:	b29b      	uxth	r3, r3
 8011b7e:	e001      	b.n	8011b84 <dhcp_select+0x1ac>
 8011b80:	f64e 2360 	movw	r3, #60000	; 0xea60
 8011b84:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011b86:	89fb      	ldrh	r3, [r7, #14]
 8011b88:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011b8c:	4a0f      	ldr	r2, [pc, #60]	; (8011bcc <dhcp_select+0x1f4>)
 8011b8e:	fb82 1203 	smull	r1, r2, r2, r3
 8011b92:	1152      	asrs	r2, r2, #5
 8011b94:	17db      	asrs	r3, r3, #31
 8011b96:	1ad3      	subs	r3, r2, r3
 8011b98:	b29a      	uxth	r2, r3
 8011b9a:	69bb      	ldr	r3, [r7, #24]
 8011b9c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011b9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	3720      	adds	r7, #32
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	bdb0      	pop	{r4, r5, r7, pc}
 8011baa:	bf00      	nop
 8011bac:	08018d20 	.word	0x08018d20
 8011bb0:	08018dcc 	.word	0x08018dcc
 8011bb4:	08018d80 	.word	0x08018d80
 8011bb8:	08018de8 	.word	0x08018de8
 8011bbc:	2000001c 	.word	0x2000001c
 8011bc0:	20000494 	.word	0x20000494
 8011bc4:	08028224 	.word	0x08028224
 8011bc8:	08028228 	.word	0x08028228
 8011bcc:	10624dd3 	.word	0x10624dd3

08011bd0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b082      	sub	sp, #8
 8011bd4:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8011bd6:	4b27      	ldr	r3, [pc, #156]	; (8011c74 <dhcp_coarse_tmr+0xa4>)
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	607b      	str	r3, [r7, #4]
 8011bdc:	e042      	b.n	8011c64 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	6a1b      	ldr	r3, [r3, #32]
 8011be2:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8011be4:	683b      	ldr	r3, [r7, #0]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d039      	beq.n	8011c5e <dhcp_coarse_tmr+0x8e>
 8011bea:	683b      	ldr	r3, [r7, #0]
 8011bec:	795b      	ldrb	r3, [r3, #5]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d035      	beq.n	8011c5e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	8a9b      	ldrh	r3, [r3, #20]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d012      	beq.n	8011c20 <dhcp_coarse_tmr+0x50>
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	8a5b      	ldrh	r3, [r3, #18]
 8011bfe:	3301      	adds	r3, #1
 8011c00:	b29a      	uxth	r2, r3
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	825a      	strh	r2, [r3, #18]
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	8a5a      	ldrh	r2, [r3, #18]
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	8a9b      	ldrh	r3, [r3, #20]
 8011c0e:	429a      	cmp	r2, r3
 8011c10:	d106      	bne.n	8011c20 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8011c12:	6878      	ldr	r0, [r7, #4]
 8011c14:	f000 fdf6 	bl	8012804 <dhcp_release_and_stop>
        dhcp_start(netif);
 8011c18:	6878      	ldr	r0, [r7, #4]
 8011c1a:	f000 f969 	bl	8011ef0 <dhcp_start>
 8011c1e:	e01e      	b.n	8011c5e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8011c20:	683b      	ldr	r3, [r7, #0]
 8011c22:	8a1b      	ldrh	r3, [r3, #16]
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d00b      	beq.n	8011c40 <dhcp_coarse_tmr+0x70>
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	8a1b      	ldrh	r3, [r3, #16]
 8011c2c:	1e5a      	subs	r2, r3, #1
 8011c2e:	b291      	uxth	r1, r2
 8011c30:	683a      	ldr	r2, [r7, #0]
 8011c32:	8211      	strh	r1, [r2, #16]
 8011c34:	2b01      	cmp	r3, #1
 8011c36:	d103      	bne.n	8011c40 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8011c38:	6878      	ldr	r0, [r7, #4]
 8011c3a:	f000 f8c6 	bl	8011dca <dhcp_t2_timeout>
 8011c3e:	e00e      	b.n	8011c5e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	89db      	ldrh	r3, [r3, #14]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d00a      	beq.n	8011c5e <dhcp_coarse_tmr+0x8e>
 8011c48:	683b      	ldr	r3, [r7, #0]
 8011c4a:	89db      	ldrh	r3, [r3, #14]
 8011c4c:	1e5a      	subs	r2, r3, #1
 8011c4e:	b291      	uxth	r1, r2
 8011c50:	683a      	ldr	r2, [r7, #0]
 8011c52:	81d1      	strh	r1, [r2, #14]
 8011c54:	2b01      	cmp	r3, #1
 8011c56:	d102      	bne.n	8011c5e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8011c58:	6878      	ldr	r0, [r7, #4]
 8011c5a:	f000 f888 	bl	8011d6e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	607b      	str	r3, [r7, #4]
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d1b9      	bne.n	8011bde <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8011c6a:	bf00      	nop
 8011c6c:	3708      	adds	r7, #8
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}
 8011c72:	bf00      	nop
 8011c74:	200076e4 	.word	0x200076e4

08011c78 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b082      	sub	sp, #8
 8011c7c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8011c7e:	4b16      	ldr	r3, [pc, #88]	; (8011cd8 <dhcp_fine_tmr+0x60>)
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	607b      	str	r3, [r7, #4]
 8011c84:	e020      	b.n	8011cc8 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	6a1b      	ldr	r3, [r3, #32]
 8011c8a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8011c8c:	683b      	ldr	r3, [r7, #0]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d017      	beq.n	8011cc2 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8011c92:	683b      	ldr	r3, [r7, #0]
 8011c94:	891b      	ldrh	r3, [r3, #8]
 8011c96:	2b01      	cmp	r3, #1
 8011c98:	d906      	bls.n	8011ca8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8011c9a:	683b      	ldr	r3, [r7, #0]
 8011c9c:	891b      	ldrh	r3, [r3, #8]
 8011c9e:	3b01      	subs	r3, #1
 8011ca0:	b29a      	uxth	r2, r3
 8011ca2:	683b      	ldr	r3, [r7, #0]
 8011ca4:	811a      	strh	r2, [r3, #8]
 8011ca6:	e00c      	b.n	8011cc2 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8011ca8:	683b      	ldr	r3, [r7, #0]
 8011caa:	891b      	ldrh	r3, [r3, #8]
 8011cac:	2b01      	cmp	r3, #1
 8011cae:	d108      	bne.n	8011cc2 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8011cb0:	683b      	ldr	r3, [r7, #0]
 8011cb2:	891b      	ldrh	r3, [r3, #8]
 8011cb4:	3b01      	subs	r3, #1
 8011cb6:	b29a      	uxth	r2, r3
 8011cb8:	683b      	ldr	r3, [r7, #0]
 8011cba:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8011cbc:	6878      	ldr	r0, [r7, #4]
 8011cbe:	f000 f80d 	bl	8011cdc <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	607b      	str	r3, [r7, #4]
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d1db      	bne.n	8011c86 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8011cce:	bf00      	nop
 8011cd0:	3708      	adds	r7, #8
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	bd80      	pop	{r7, pc}
 8011cd6:	bf00      	nop
 8011cd8:	200076e4 	.word	0x200076e4

08011cdc <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b084      	sub	sp, #16
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	6a1b      	ldr	r3, [r3, #32]
 8011ce8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	795b      	ldrb	r3, [r3, #5]
 8011cee:	2b0c      	cmp	r3, #12
 8011cf0:	d003      	beq.n	8011cfa <dhcp_timeout+0x1e>
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	795b      	ldrb	r3, [r3, #5]
 8011cf6:	2b06      	cmp	r3, #6
 8011cf8:	d103      	bne.n	8011d02 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	f000 fa18 	bl	8012130 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8011d00:	e031      	b.n	8011d66 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	795b      	ldrb	r3, [r3, #5]
 8011d06:	2b01      	cmp	r3, #1
 8011d08:	d10e      	bne.n	8011d28 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	799b      	ldrb	r3, [r3, #6]
 8011d0e:	2b05      	cmp	r3, #5
 8011d10:	d803      	bhi.n	8011d1a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8011d12:	6878      	ldr	r0, [r7, #4]
 8011d14:	f7ff fe60 	bl	80119d8 <dhcp_select>
}
 8011d18:	e025      	b.n	8011d66 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8011d1a:	6878      	ldr	r0, [r7, #4]
 8011d1c:	f000 fd72 	bl	8012804 <dhcp_release_and_stop>
      dhcp_start(netif);
 8011d20:	6878      	ldr	r0, [r7, #4]
 8011d22:	f000 f8e5 	bl	8011ef0 <dhcp_start>
}
 8011d26:	e01e      	b.n	8011d66 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	795b      	ldrb	r3, [r3, #5]
 8011d2c:	2b08      	cmp	r3, #8
 8011d2e:	d10b      	bne.n	8011d48 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	799b      	ldrb	r3, [r3, #6]
 8011d34:	2b01      	cmp	r3, #1
 8011d36:	d803      	bhi.n	8011d40 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8011d38:	6878      	ldr	r0, [r7, #4]
 8011d3a:	f7ff fdf3 	bl	8011924 <dhcp_check>
}
 8011d3e:	e012      	b.n	8011d66 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8011d40:	6878      	ldr	r0, [r7, #4]
 8011d42:	f000 fa97 	bl	8012274 <dhcp_bind>
}
 8011d46:	e00e      	b.n	8011d66 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	795b      	ldrb	r3, [r3, #5]
 8011d4c:	2b03      	cmp	r3, #3
 8011d4e:	d10a      	bne.n	8011d66 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	799b      	ldrb	r3, [r3, #6]
 8011d54:	2b01      	cmp	r3, #1
 8011d56:	d803      	bhi.n	8011d60 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8011d58:	6878      	ldr	r0, [r7, #4]
 8011d5a:	f000 fc9d 	bl	8012698 <dhcp_reboot>
}
 8011d5e:	e002      	b.n	8011d66 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8011d60:	6878      	ldr	r0, [r7, #4]
 8011d62:	f000 f9e5 	bl	8012130 <dhcp_discover>
}
 8011d66:	bf00      	nop
 8011d68:	3710      	adds	r7, #16
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	bd80      	pop	{r7, pc}

08011d6e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8011d6e:	b580      	push	{r7, lr}
 8011d70:	b084      	sub	sp, #16
 8011d72:	af00      	add	r7, sp, #0
 8011d74:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	6a1b      	ldr	r3, [r3, #32]
 8011d7a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	795b      	ldrb	r3, [r3, #5]
 8011d80:	2b01      	cmp	r3, #1
 8011d82:	d007      	beq.n	8011d94 <dhcp_t1_timeout+0x26>
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	795b      	ldrb	r3, [r3, #5]
 8011d88:	2b0a      	cmp	r3, #10
 8011d8a:	d003      	beq.n	8011d94 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011d90:	2b05      	cmp	r3, #5
 8011d92:	d116      	bne.n	8011dc2 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8011d94:	6878      	ldr	r0, [r7, #4]
 8011d96:	f000 fb47 	bl	8012428 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	899b      	ldrh	r3, [r3, #12]
 8011d9e:	461a      	mov	r2, r3
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	8a5b      	ldrh	r3, [r3, #18]
 8011da4:	1ad3      	subs	r3, r2, r3
 8011da6:	2b01      	cmp	r3, #1
 8011da8:	dd0b      	ble.n	8011dc2 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	899b      	ldrh	r3, [r3, #12]
 8011dae:	461a      	mov	r2, r3
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	8a5b      	ldrh	r3, [r3, #18]
 8011db4:	1ad3      	subs	r3, r2, r3
 8011db6:	0fda      	lsrs	r2, r3, #31
 8011db8:	4413      	add	r3, r2
 8011dba:	105b      	asrs	r3, r3, #1
 8011dbc:	b29a      	uxth	r2, r3
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8011dc2:	bf00      	nop
 8011dc4:	3710      	adds	r7, #16
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	bd80      	pop	{r7, pc}

08011dca <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8011dca:	b580      	push	{r7, lr}
 8011dcc:	b084      	sub	sp, #16
 8011dce:	af00      	add	r7, sp, #0
 8011dd0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	6a1b      	ldr	r3, [r3, #32]
 8011dd6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	795b      	ldrb	r3, [r3, #5]
 8011ddc:	2b01      	cmp	r3, #1
 8011dde:	d00b      	beq.n	8011df8 <dhcp_t2_timeout+0x2e>
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	795b      	ldrb	r3, [r3, #5]
 8011de4:	2b0a      	cmp	r3, #10
 8011de6:	d007      	beq.n	8011df8 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011dec:	2b05      	cmp	r3, #5
 8011dee:	d003      	beq.n	8011df8 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	795b      	ldrb	r3, [r3, #5]
 8011df4:	2b04      	cmp	r3, #4
 8011df6:	d116      	bne.n	8011e26 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8011df8:	6878      	ldr	r0, [r7, #4]
 8011dfa:	f000 fbb1 	bl	8012560 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	8a9b      	ldrh	r3, [r3, #20]
 8011e02:	461a      	mov	r2, r3
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	8a5b      	ldrh	r3, [r3, #18]
 8011e08:	1ad3      	subs	r3, r2, r3
 8011e0a:	2b01      	cmp	r3, #1
 8011e0c:	dd0b      	ble.n	8011e26 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	8a9b      	ldrh	r3, [r3, #20]
 8011e12:	461a      	mov	r2, r3
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	8a5b      	ldrh	r3, [r3, #18]
 8011e18:	1ad3      	subs	r3, r2, r3
 8011e1a:	0fda      	lsrs	r2, r3, #31
 8011e1c:	4413      	add	r3, r2
 8011e1e:	105b      	asrs	r3, r3, #1
 8011e20:	b29a      	uxth	r2, r3
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8011e26:	bf00      	nop
 8011e28:	3710      	adds	r7, #16
 8011e2a:	46bd      	mov	sp, r7
 8011e2c:	bd80      	pop	{r7, pc}
	...

08011e30 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b084      	sub	sp, #16
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
 8011e38:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	6a1b      	ldr	r3, [r3, #32]
 8011e3e:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	2200      	movs	r2, #0
 8011e44:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	2200      	movs	r2, #0
 8011e4a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8011e4c:	4b26      	ldr	r3, [pc, #152]	; (8011ee8 <dhcp_handle_ack+0xb8>)
 8011e4e:	78db      	ldrb	r3, [r3, #3]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d003      	beq.n	8011e5c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8011e54:	4b25      	ldr	r3, [pc, #148]	; (8011eec <dhcp_handle_ack+0xbc>)
 8011e56:	68da      	ldr	r2, [r3, #12]
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8011e5c:	4b22      	ldr	r3, [pc, #136]	; (8011ee8 <dhcp_handle_ack+0xb8>)
 8011e5e:	791b      	ldrb	r3, [r3, #4]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d004      	beq.n	8011e6e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8011e64:	4b21      	ldr	r3, [pc, #132]	; (8011eec <dhcp_handle_ack+0xbc>)
 8011e66:	691a      	ldr	r2, [r3, #16]
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8011e6c:	e004      	b.n	8011e78 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e72:	085a      	lsrs	r2, r3, #1
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8011e78:	4b1b      	ldr	r3, [pc, #108]	; (8011ee8 <dhcp_handle_ack+0xb8>)
 8011e7a:	795b      	ldrb	r3, [r3, #5]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d004      	beq.n	8011e8a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8011e80:	4b1a      	ldr	r3, [pc, #104]	; (8011eec <dhcp_handle_ack+0xbc>)
 8011e82:	695a      	ldr	r2, [r3, #20]
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	631a      	str	r2, [r3, #48]	; 0x30
 8011e88:	e007      	b.n	8011e9a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011e8e:	4613      	mov	r3, r2
 8011e90:	00db      	lsls	r3, r3, #3
 8011e92:	1a9b      	subs	r3, r3, r2
 8011e94:	08da      	lsrs	r2, r3, #3
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8011e9a:	683b      	ldr	r3, [r7, #0]
 8011e9c:	691a      	ldr	r2, [r3, #16]
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8011ea2:	4b11      	ldr	r3, [pc, #68]	; (8011ee8 <dhcp_handle_ack+0xb8>)
 8011ea4:	799b      	ldrb	r3, [r3, #6]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d00b      	beq.n	8011ec2 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8011eaa:	4b10      	ldr	r3, [pc, #64]	; (8011eec <dhcp_handle_ack+0xbc>)
 8011eac:	699b      	ldr	r3, [r3, #24]
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f7f7 ffbe 	bl	8009e30 <lwip_htonl>
 8011eb4:	4602      	mov	r2, r0
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	2201      	movs	r2, #1
 8011ebe:	71da      	strb	r2, [r3, #7]
 8011ec0:	e002      	b.n	8011ec8 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8011ec8:	4b07      	ldr	r3, [pc, #28]	; (8011ee8 <dhcp_handle_ack+0xb8>)
 8011eca:	79db      	ldrb	r3, [r3, #7]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d007      	beq.n	8011ee0 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8011ed0:	4b06      	ldr	r3, [pc, #24]	; (8011eec <dhcp_handle_ack+0xbc>)
 8011ed2:	69db      	ldr	r3, [r3, #28]
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	f7f7 ffab 	bl	8009e30 <lwip_htonl>
 8011eda:	4602      	mov	r2, r0
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8011ee0:	bf00      	nop
 8011ee2:	3710      	adds	r7, #16
 8011ee4:	46bd      	mov	sp, r7
 8011ee6:	bd80      	pop	{r7, pc}
 8011ee8:	20007710 	.word	0x20007710
 8011eec:	20007718 	.word	0x20007718

08011ef0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b084      	sub	sp, #16
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d109      	bne.n	8011f12 <dhcp_start+0x22>
 8011efe:	4b37      	ldr	r3, [pc, #220]	; (8011fdc <dhcp_start+0xec>)
 8011f00:	f240 22e7 	movw	r2, #743	; 0x2e7
 8011f04:	4936      	ldr	r1, [pc, #216]	; (8011fe0 <dhcp_start+0xf0>)
 8011f06:	4837      	ldr	r0, [pc, #220]	; (8011fe4 <dhcp_start+0xf4>)
 8011f08:	f003 fea4 	bl	8015c54 <iprintf>
 8011f0c:	f06f 030f 	mvn.w	r3, #15
 8011f10:	e060      	b.n	8011fd4 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f18:	f003 0301 	and.w	r3, r3, #1
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d109      	bne.n	8011f34 <dhcp_start+0x44>
 8011f20:	4b2e      	ldr	r3, [pc, #184]	; (8011fdc <dhcp_start+0xec>)
 8011f22:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8011f26:	4930      	ldr	r1, [pc, #192]	; (8011fe8 <dhcp_start+0xf8>)
 8011f28:	482e      	ldr	r0, [pc, #184]	; (8011fe4 <dhcp_start+0xf4>)
 8011f2a:	f003 fe93 	bl	8015c54 <iprintf>
 8011f2e:	f06f 030f 	mvn.w	r3, #15
 8011f32:	e04f      	b.n	8011fd4 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	6a1b      	ldr	r3, [r3, #32]
 8011f38:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011f3e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8011f42:	d202      	bcs.n	8011f4a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8011f44:	f04f 33ff 	mov.w	r3, #4294967295
 8011f48:	e044      	b.n	8011fd4 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d10d      	bne.n	8011f6c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8011f50:	2034      	movs	r0, #52	; 0x34
 8011f52:	f7f8 fa3f 	bl	800a3d4 <mem_malloc>
 8011f56:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d102      	bne.n	8011f64 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8011f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8011f62:	e037      	b.n	8011fd4 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	68fa      	ldr	r2, [r7, #12]
 8011f68:	621a      	str	r2, [r3, #32]
 8011f6a:	e005      	b.n	8011f78 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	791b      	ldrb	r3, [r3, #4]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d001      	beq.n	8011f78 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8011f74:	f7ff fc92 	bl	801189c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8011f78:	2234      	movs	r2, #52	; 0x34
 8011f7a:	2100      	movs	r1, #0
 8011f7c:	68f8      	ldr	r0, [r7, #12]
 8011f7e:	f003 fdb9 	bl	8015af4 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8011f82:	f7ff fc39 	bl	80117f8 <dhcp_inc_pcb_refcount>
 8011f86:	4603      	mov	r3, r0
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d002      	beq.n	8011f92 <dhcp_start+0xa2>
    return ERR_MEM;
 8011f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8011f90:	e020      	b.n	8011fd4 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	2201      	movs	r2, #1
 8011f96:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011f9e:	f003 0304 	and.w	r3, r3, #4
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d105      	bne.n	8011fb2 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8011fa6:	2102      	movs	r1, #2
 8011fa8:	68f8      	ldr	r0, [r7, #12]
 8011faa:	f000 fcc5 	bl	8012938 <dhcp_set_state>
    return ERR_OK;
 8011fae:	2300      	movs	r3, #0
 8011fb0:	e010      	b.n	8011fd4 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8011fb2:	6878      	ldr	r0, [r7, #4]
 8011fb4:	f000 f8bc 	bl	8012130 <dhcp_discover>
 8011fb8:	4603      	mov	r3, r0
 8011fba:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8011fbc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d005      	beq.n	8011fd0 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8011fc4:	6878      	ldr	r0, [r7, #4]
 8011fc6:	f000 fc1d 	bl	8012804 <dhcp_release_and_stop>
    return ERR_MEM;
 8011fca:	f04f 33ff 	mov.w	r3, #4294967295
 8011fce:	e001      	b.n	8011fd4 <dhcp_start+0xe4>
  }
  return result;
 8011fd0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	3710      	adds	r7, #16
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	bd80      	pop	{r7, pc}
 8011fdc:	08018d20 	.word	0x08018d20
 8011fe0:	08018e04 	.word	0x08018e04
 8011fe4:	08018d80 	.word	0x08018d80
 8011fe8:	08018e48 	.word	0x08018e48

08011fec <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b084      	sub	sp, #16
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
 8011ff4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d107      	bne.n	801200c <dhcp_arp_reply+0x20>
 8011ffc:	4b0e      	ldr	r3, [pc, #56]	; (8012038 <dhcp_arp_reply+0x4c>)
 8011ffe:	f240 328b 	movw	r2, #907	; 0x38b
 8012002:	490e      	ldr	r1, [pc, #56]	; (801203c <dhcp_arp_reply+0x50>)
 8012004:	480e      	ldr	r0, [pc, #56]	; (8012040 <dhcp_arp_reply+0x54>)
 8012006:	f003 fe25 	bl	8015c54 <iprintf>
 801200a:	e012      	b.n	8012032 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	6a1b      	ldr	r3, [r3, #32]
 8012010:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d00c      	beq.n	8012032 <dhcp_arp_reply+0x46>
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	795b      	ldrb	r3, [r3, #5]
 801201c:	2b08      	cmp	r3, #8
 801201e:	d108      	bne.n	8012032 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8012020:	683b      	ldr	r3, [r7, #0]
 8012022:	681a      	ldr	r2, [r3, #0]
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	69db      	ldr	r3, [r3, #28]
 8012028:	429a      	cmp	r2, r3
 801202a:	d102      	bne.n	8012032 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	f000 f809 	bl	8012044 <dhcp_decline>
    }
  }
}
 8012032:	3710      	adds	r7, #16
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}
 8012038:	08018d20 	.word	0x08018d20
 801203c:	08018e04 	.word	0x08018e04
 8012040:	08018d80 	.word	0x08018d80

08012044 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8012044:	b5b0      	push	{r4, r5, r7, lr}
 8012046:	b08a      	sub	sp, #40	; 0x28
 8012048:	af02      	add	r7, sp, #8
 801204a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	6a1b      	ldr	r3, [r3, #32]
 8012050:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012052:	210c      	movs	r1, #12
 8012054:	69b8      	ldr	r0, [r7, #24]
 8012056:	f000 fc6f 	bl	8012938 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801205a:	f107 030c 	add.w	r3, r7, #12
 801205e:	2204      	movs	r2, #4
 8012060:	69b9      	ldr	r1, [r7, #24]
 8012062:	6878      	ldr	r0, [r7, #4]
 8012064:	f001 f8f2 	bl	801324c <dhcp_create_msg>
 8012068:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801206a:	697b      	ldr	r3, [r7, #20]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d035      	beq.n	80120dc <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012070:	697b      	ldr	r3, [r7, #20]
 8012072:	685b      	ldr	r3, [r3, #4]
 8012074:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012076:	89b8      	ldrh	r0, [r7, #12]
 8012078:	693b      	ldr	r3, [r7, #16]
 801207a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801207e:	2304      	movs	r3, #4
 8012080:	2232      	movs	r2, #50	; 0x32
 8012082:	f000 fc73 	bl	801296c <dhcp_option>
 8012086:	4603      	mov	r3, r0
 8012088:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801208a:	89bc      	ldrh	r4, [r7, #12]
 801208c:	693b      	ldr	r3, [r7, #16]
 801208e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012092:	69bb      	ldr	r3, [r7, #24]
 8012094:	69db      	ldr	r3, [r3, #28]
 8012096:	4618      	mov	r0, r3
 8012098:	f7f7 feca 	bl	8009e30 <lwip_htonl>
 801209c:	4603      	mov	r3, r0
 801209e:	461a      	mov	r2, r3
 80120a0:	4629      	mov	r1, r5
 80120a2:	4620      	mov	r0, r4
 80120a4:	f000 fcee 	bl	8012a84 <dhcp_option_long>
 80120a8:	4603      	mov	r3, r0
 80120aa:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80120ac:	89b8      	ldrh	r0, [r7, #12]
 80120ae:	693b      	ldr	r3, [r7, #16]
 80120b0:	33f0      	adds	r3, #240	; 0xf0
 80120b2:	697a      	ldr	r2, [r7, #20]
 80120b4:	4619      	mov	r1, r3
 80120b6:	f001 f99f 	bl	80133f8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80120ba:	4b19      	ldr	r3, [pc, #100]	; (8012120 <dhcp_decline+0xdc>)
 80120bc:	6818      	ldr	r0, [r3, #0]
 80120be:	4b19      	ldr	r3, [pc, #100]	; (8012124 <dhcp_decline+0xe0>)
 80120c0:	9301      	str	r3, [sp, #4]
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	9300      	str	r3, [sp, #0]
 80120c6:	2343      	movs	r3, #67	; 0x43
 80120c8:	4a17      	ldr	r2, [pc, #92]	; (8012128 <dhcp_decline+0xe4>)
 80120ca:	6979      	ldr	r1, [r7, #20]
 80120cc:	f7ff f90e 	bl	80112ec <udp_sendto_if_src>
 80120d0:	4603      	mov	r3, r0
 80120d2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80120d4:	6978      	ldr	r0, [r7, #20]
 80120d6:	f7f9 f937 	bl	800b348 <pbuf_free>
 80120da:	e001      	b.n	80120e0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80120dc:	23ff      	movs	r3, #255	; 0xff
 80120de:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80120e0:	69bb      	ldr	r3, [r7, #24]
 80120e2:	799b      	ldrb	r3, [r3, #6]
 80120e4:	2bff      	cmp	r3, #255	; 0xff
 80120e6:	d005      	beq.n	80120f4 <dhcp_decline+0xb0>
    dhcp->tries++;
 80120e8:	69bb      	ldr	r3, [r7, #24]
 80120ea:	799b      	ldrb	r3, [r3, #6]
 80120ec:	3301      	adds	r3, #1
 80120ee:	b2da      	uxtb	r2, r3
 80120f0:	69bb      	ldr	r3, [r7, #24]
 80120f2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80120f4:	f242 7310 	movw	r3, #10000	; 0x2710
 80120f8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80120fa:	89fb      	ldrh	r3, [r7, #14]
 80120fc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012100:	4a0a      	ldr	r2, [pc, #40]	; (801212c <dhcp_decline+0xe8>)
 8012102:	fb82 1203 	smull	r1, r2, r2, r3
 8012106:	1152      	asrs	r2, r2, #5
 8012108:	17db      	asrs	r3, r3, #31
 801210a:	1ad3      	subs	r3, r2, r3
 801210c:	b29a      	uxth	r2, r3
 801210e:	69bb      	ldr	r3, [r7, #24]
 8012110:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012112:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012116:	4618      	mov	r0, r3
 8012118:	3720      	adds	r7, #32
 801211a:	46bd      	mov	sp, r7
 801211c:	bdb0      	pop	{r4, r5, r7, pc}
 801211e:	bf00      	nop
 8012120:	20000494 	.word	0x20000494
 8012124:	08028224 	.word	0x08028224
 8012128:	08028228 	.word	0x08028228
 801212c:	10624dd3 	.word	0x10624dd3

08012130 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b08a      	sub	sp, #40	; 0x28
 8012134:	af02      	add	r7, sp, #8
 8012136:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6a1b      	ldr	r3, [r3, #32]
 801213c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801213e:	2300      	movs	r3, #0
 8012140:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8012142:	69bb      	ldr	r3, [r7, #24]
 8012144:	2200      	movs	r2, #0
 8012146:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8012148:	2106      	movs	r1, #6
 801214a:	69b8      	ldr	r0, [r7, #24]
 801214c:	f000 fbf4 	bl	8012938 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8012150:	f107 0308 	add.w	r3, r7, #8
 8012154:	2201      	movs	r2, #1
 8012156:	69b9      	ldr	r1, [r7, #24]
 8012158:	6878      	ldr	r0, [r7, #4]
 801215a:	f001 f877 	bl	801324c <dhcp_create_msg>
 801215e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8012160:	693b      	ldr	r3, [r7, #16]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d04b      	beq.n	80121fe <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012166:	693b      	ldr	r3, [r7, #16]
 8012168:	685b      	ldr	r3, [r3, #4]
 801216a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801216c:	8938      	ldrh	r0, [r7, #8]
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012174:	2302      	movs	r3, #2
 8012176:	2239      	movs	r2, #57	; 0x39
 8012178:	f000 fbf8 	bl	801296c <dhcp_option>
 801217c:	4603      	mov	r3, r0
 801217e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012180:	8938      	ldrh	r0, [r7, #8]
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801218c:	461a      	mov	r2, r3
 801218e:	f000 fc47 	bl	8012a20 <dhcp_option_short>
 8012192:	4603      	mov	r3, r0
 8012194:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012196:	8938      	ldrh	r0, [r7, #8]
 8012198:	68fb      	ldr	r3, [r7, #12]
 801219a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801219e:	2303      	movs	r3, #3
 80121a0:	2237      	movs	r2, #55	; 0x37
 80121a2:	f000 fbe3 	bl	801296c <dhcp_option>
 80121a6:	4603      	mov	r3, r0
 80121a8:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80121aa:	2300      	movs	r3, #0
 80121ac:	77fb      	strb	r3, [r7, #31]
 80121ae:	e00e      	b.n	80121ce <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80121b0:	8938      	ldrh	r0, [r7, #8]
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80121b8:	7ffb      	ldrb	r3, [r7, #31]
 80121ba:	4a29      	ldr	r2, [pc, #164]	; (8012260 <dhcp_discover+0x130>)
 80121bc:	5cd3      	ldrb	r3, [r2, r3]
 80121be:	461a      	mov	r2, r3
 80121c0:	f000 fc08 	bl	80129d4 <dhcp_option_byte>
 80121c4:	4603      	mov	r3, r0
 80121c6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80121c8:	7ffb      	ldrb	r3, [r7, #31]
 80121ca:	3301      	adds	r3, #1
 80121cc:	77fb      	strb	r3, [r7, #31]
 80121ce:	7ffb      	ldrb	r3, [r7, #31]
 80121d0:	2b02      	cmp	r3, #2
 80121d2:	d9ed      	bls.n	80121b0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80121d4:	8938      	ldrh	r0, [r7, #8]
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	33f0      	adds	r3, #240	; 0xf0
 80121da:	693a      	ldr	r2, [r7, #16]
 80121dc:	4619      	mov	r1, r3
 80121de:	f001 f90b 	bl	80133f8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80121e2:	4b20      	ldr	r3, [pc, #128]	; (8012264 <dhcp_discover+0x134>)
 80121e4:	6818      	ldr	r0, [r3, #0]
 80121e6:	4b20      	ldr	r3, [pc, #128]	; (8012268 <dhcp_discover+0x138>)
 80121e8:	9301      	str	r3, [sp, #4]
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	9300      	str	r3, [sp, #0]
 80121ee:	2343      	movs	r3, #67	; 0x43
 80121f0:	4a1e      	ldr	r2, [pc, #120]	; (801226c <dhcp_discover+0x13c>)
 80121f2:	6939      	ldr	r1, [r7, #16]
 80121f4:	f7ff f87a 	bl	80112ec <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80121f8:	6938      	ldr	r0, [r7, #16]
 80121fa:	f7f9 f8a5 	bl	800b348 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80121fe:	69bb      	ldr	r3, [r7, #24]
 8012200:	799b      	ldrb	r3, [r3, #6]
 8012202:	2bff      	cmp	r3, #255	; 0xff
 8012204:	d005      	beq.n	8012212 <dhcp_discover+0xe2>
    dhcp->tries++;
 8012206:	69bb      	ldr	r3, [r7, #24]
 8012208:	799b      	ldrb	r3, [r3, #6]
 801220a:	3301      	adds	r3, #1
 801220c:	b2da      	uxtb	r2, r3
 801220e:	69bb      	ldr	r3, [r7, #24]
 8012210:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012212:	69bb      	ldr	r3, [r7, #24]
 8012214:	799b      	ldrb	r3, [r3, #6]
 8012216:	2b05      	cmp	r3, #5
 8012218:	d80d      	bhi.n	8012236 <dhcp_discover+0x106>
 801221a:	69bb      	ldr	r3, [r7, #24]
 801221c:	799b      	ldrb	r3, [r3, #6]
 801221e:	461a      	mov	r2, r3
 8012220:	2301      	movs	r3, #1
 8012222:	4093      	lsls	r3, r2
 8012224:	b29b      	uxth	r3, r3
 8012226:	461a      	mov	r2, r3
 8012228:	0152      	lsls	r2, r2, #5
 801222a:	1ad2      	subs	r2, r2, r3
 801222c:	0092      	lsls	r2, r2, #2
 801222e:	4413      	add	r3, r2
 8012230:	00db      	lsls	r3, r3, #3
 8012232:	b29b      	uxth	r3, r3
 8012234:	e001      	b.n	801223a <dhcp_discover+0x10a>
 8012236:	f64e 2360 	movw	r3, #60000	; 0xea60
 801223a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801223c:	897b      	ldrh	r3, [r7, #10]
 801223e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012242:	4a0b      	ldr	r2, [pc, #44]	; (8012270 <dhcp_discover+0x140>)
 8012244:	fb82 1203 	smull	r1, r2, r2, r3
 8012248:	1152      	asrs	r2, r2, #5
 801224a:	17db      	asrs	r3, r3, #31
 801224c:	1ad3      	subs	r3, r2, r3
 801224e:	b29a      	uxth	r2, r3
 8012250:	69bb      	ldr	r3, [r7, #24]
 8012252:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012254:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012258:	4618      	mov	r0, r3
 801225a:	3720      	adds	r7, #32
 801225c:	46bd      	mov	sp, r7
 801225e:	bd80      	pop	{r7, pc}
 8012260:	2000001c 	.word	0x2000001c
 8012264:	20000494 	.word	0x20000494
 8012268:	08028224 	.word	0x08028224
 801226c:	08028228 	.word	0x08028228
 8012270:	10624dd3 	.word	0x10624dd3

08012274 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b088      	sub	sp, #32
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d107      	bne.n	8012292 <dhcp_bind+0x1e>
 8012282:	4b64      	ldr	r3, [pc, #400]	; (8012414 <dhcp_bind+0x1a0>)
 8012284:	f240 4215 	movw	r2, #1045	; 0x415
 8012288:	4963      	ldr	r1, [pc, #396]	; (8012418 <dhcp_bind+0x1a4>)
 801228a:	4864      	ldr	r0, [pc, #400]	; (801241c <dhcp_bind+0x1a8>)
 801228c:	f003 fce2 	bl	8015c54 <iprintf>
 8012290:	e0bc      	b.n	801240c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	6a1b      	ldr	r3, [r3, #32]
 8012296:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8012298:	69bb      	ldr	r3, [r7, #24]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d107      	bne.n	80122ae <dhcp_bind+0x3a>
 801229e:	4b5d      	ldr	r3, [pc, #372]	; (8012414 <dhcp_bind+0x1a0>)
 80122a0:	f240 4217 	movw	r2, #1047	; 0x417
 80122a4:	495e      	ldr	r1, [pc, #376]	; (8012420 <dhcp_bind+0x1ac>)
 80122a6:	485d      	ldr	r0, [pc, #372]	; (801241c <dhcp_bind+0x1a8>)
 80122a8:	f003 fcd4 	bl	8015c54 <iprintf>
 80122ac:	e0ae      	b.n	801240c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80122ae:	69bb      	ldr	r3, [r7, #24]
 80122b0:	2200      	movs	r2, #0
 80122b2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80122b4:	69bb      	ldr	r3, [r7, #24]
 80122b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122bc:	d019      	beq.n	80122f2 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80122be:	69bb      	ldr	r3, [r7, #24]
 80122c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122c2:	331e      	adds	r3, #30
 80122c4:	4a57      	ldr	r2, [pc, #348]	; (8012424 <dhcp_bind+0x1b0>)
 80122c6:	fba2 2303 	umull	r2, r3, r2, r3
 80122ca:	095b      	lsrs	r3, r3, #5
 80122cc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80122ce:	69fb      	ldr	r3, [r7, #28]
 80122d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80122d4:	d302      	bcc.n	80122dc <dhcp_bind+0x68>
      timeout = 0xffff;
 80122d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80122da:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80122dc:	69fb      	ldr	r3, [r7, #28]
 80122de:	b29a      	uxth	r2, r3
 80122e0:	69bb      	ldr	r3, [r7, #24]
 80122e2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80122e4:	69bb      	ldr	r3, [r7, #24]
 80122e6:	8a9b      	ldrh	r3, [r3, #20]
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d102      	bne.n	80122f2 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80122ec:	69bb      	ldr	r3, [r7, #24]
 80122ee:	2201      	movs	r2, #1
 80122f0:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80122f2:	69bb      	ldr	r3, [r7, #24]
 80122f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122fa:	d01d      	beq.n	8012338 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80122fc:	69bb      	ldr	r3, [r7, #24]
 80122fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012300:	331e      	adds	r3, #30
 8012302:	4a48      	ldr	r2, [pc, #288]	; (8012424 <dhcp_bind+0x1b0>)
 8012304:	fba2 2303 	umull	r2, r3, r2, r3
 8012308:	095b      	lsrs	r3, r3, #5
 801230a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801230c:	69fb      	ldr	r3, [r7, #28]
 801230e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012312:	d302      	bcc.n	801231a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8012314:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012318:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801231a:	69fb      	ldr	r3, [r7, #28]
 801231c:	b29a      	uxth	r2, r3
 801231e:	69bb      	ldr	r3, [r7, #24]
 8012320:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8012322:	69bb      	ldr	r3, [r7, #24]
 8012324:	895b      	ldrh	r3, [r3, #10]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d102      	bne.n	8012330 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801232a:	69bb      	ldr	r3, [r7, #24]
 801232c:	2201      	movs	r2, #1
 801232e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8012330:	69bb      	ldr	r3, [r7, #24]
 8012332:	895a      	ldrh	r2, [r3, #10]
 8012334:	69bb      	ldr	r3, [r7, #24]
 8012336:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8012338:	69bb      	ldr	r3, [r7, #24]
 801233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801233c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012340:	d01d      	beq.n	801237e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012342:	69bb      	ldr	r3, [r7, #24]
 8012344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012346:	331e      	adds	r3, #30
 8012348:	4a36      	ldr	r2, [pc, #216]	; (8012424 <dhcp_bind+0x1b0>)
 801234a:	fba2 2303 	umull	r2, r3, r2, r3
 801234e:	095b      	lsrs	r3, r3, #5
 8012350:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012352:	69fb      	ldr	r3, [r7, #28]
 8012354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012358:	d302      	bcc.n	8012360 <dhcp_bind+0xec>
      timeout = 0xffff;
 801235a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801235e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8012360:	69fb      	ldr	r3, [r7, #28]
 8012362:	b29a      	uxth	r2, r3
 8012364:	69bb      	ldr	r3, [r7, #24]
 8012366:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8012368:	69bb      	ldr	r3, [r7, #24]
 801236a:	899b      	ldrh	r3, [r3, #12]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d102      	bne.n	8012376 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8012370:	69bb      	ldr	r3, [r7, #24]
 8012372:	2201      	movs	r2, #1
 8012374:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8012376:	69bb      	ldr	r3, [r7, #24]
 8012378:	899a      	ldrh	r2, [r3, #12]
 801237a:	69bb      	ldr	r3, [r7, #24]
 801237c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801237e:	69bb      	ldr	r3, [r7, #24]
 8012380:	895a      	ldrh	r2, [r3, #10]
 8012382:	69bb      	ldr	r3, [r7, #24]
 8012384:	899b      	ldrh	r3, [r3, #12]
 8012386:	429a      	cmp	r2, r3
 8012388:	d306      	bcc.n	8012398 <dhcp_bind+0x124>
 801238a:	69bb      	ldr	r3, [r7, #24]
 801238c:	899b      	ldrh	r3, [r3, #12]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d002      	beq.n	8012398 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8012392:	69bb      	ldr	r3, [r7, #24]
 8012394:	2200      	movs	r2, #0
 8012396:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8012398:	69bb      	ldr	r3, [r7, #24]
 801239a:	79db      	ldrb	r3, [r3, #7]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d003      	beq.n	80123a8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80123a0:	69bb      	ldr	r3, [r7, #24]
 80123a2:	6a1b      	ldr	r3, [r3, #32]
 80123a4:	613b      	str	r3, [r7, #16]
 80123a6:	e014      	b.n	80123d2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80123a8:	69bb      	ldr	r3, [r7, #24]
 80123aa:	331c      	adds	r3, #28
 80123ac:	781b      	ldrb	r3, [r3, #0]
 80123ae:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80123b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	db02      	blt.n	80123be <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80123b8:	23ff      	movs	r3, #255	; 0xff
 80123ba:	613b      	str	r3, [r7, #16]
 80123bc:	e009      	b.n	80123d2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80123be:	7dfb      	ldrb	r3, [r7, #23]
 80123c0:	2bbf      	cmp	r3, #191	; 0xbf
 80123c2:	d903      	bls.n	80123cc <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80123c4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80123c8:	613b      	str	r3, [r7, #16]
 80123ca:	e002      	b.n	80123d2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80123cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80123d0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80123d2:	69bb      	ldr	r3, [r7, #24]
 80123d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123d6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d108      	bne.n	80123f0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80123de:	69bb      	ldr	r3, [r7, #24]
 80123e0:	69da      	ldr	r2, [r3, #28]
 80123e2:	693b      	ldr	r3, [r7, #16]
 80123e4:	4013      	ands	r3, r2
 80123e6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80123ee:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80123f0:	210a      	movs	r1, #10
 80123f2:	69b8      	ldr	r0, [r7, #24]
 80123f4:	f000 faa0 	bl	8012938 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80123f8:	69bb      	ldr	r3, [r7, #24]
 80123fa:	f103 011c 	add.w	r1, r3, #28
 80123fe:	f107 030c 	add.w	r3, r7, #12
 8012402:	f107 0210 	add.w	r2, r7, #16
 8012406:	6878      	ldr	r0, [r7, #4]
 8012408:	f7f8 fb3c 	bl	800aa84 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801240c:	3720      	adds	r7, #32
 801240e:	46bd      	mov	sp, r7
 8012410:	bd80      	pop	{r7, pc}
 8012412:	bf00      	nop
 8012414:	08018d20 	.word	0x08018d20
 8012418:	08018e80 	.word	0x08018e80
 801241c:	08018d80 	.word	0x08018d80
 8012420:	08018e9c 	.word	0x08018e9c
 8012424:	88888889 	.word	0x88888889

08012428 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b08a      	sub	sp, #40	; 0x28
 801242c:	af02      	add	r7, sp, #8
 801242e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	6a1b      	ldr	r3, [r3, #32]
 8012434:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8012436:	2105      	movs	r1, #5
 8012438:	69b8      	ldr	r0, [r7, #24]
 801243a:	f000 fa7d 	bl	8012938 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801243e:	f107 030c 	add.w	r3, r7, #12
 8012442:	2203      	movs	r2, #3
 8012444:	69b9      	ldr	r1, [r7, #24]
 8012446:	6878      	ldr	r0, [r7, #4]
 8012448:	f000 ff00 	bl	801324c <dhcp_create_msg>
 801244c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801244e:	697b      	ldr	r3, [r7, #20]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d04e      	beq.n	80124f2 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012454:	697b      	ldr	r3, [r7, #20]
 8012456:	685b      	ldr	r3, [r3, #4]
 8012458:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801245a:	89b8      	ldrh	r0, [r7, #12]
 801245c:	693b      	ldr	r3, [r7, #16]
 801245e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012462:	2302      	movs	r3, #2
 8012464:	2239      	movs	r2, #57	; 0x39
 8012466:	f000 fa81 	bl	801296c <dhcp_option>
 801246a:	4603      	mov	r3, r0
 801246c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801246e:	89b8      	ldrh	r0, [r7, #12]
 8012470:	693b      	ldr	r3, [r7, #16]
 8012472:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801247a:	461a      	mov	r2, r3
 801247c:	f000 fad0 	bl	8012a20 <dhcp_option_short>
 8012480:	4603      	mov	r3, r0
 8012482:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012484:	89b8      	ldrh	r0, [r7, #12]
 8012486:	693b      	ldr	r3, [r7, #16]
 8012488:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801248c:	2303      	movs	r3, #3
 801248e:	2237      	movs	r2, #55	; 0x37
 8012490:	f000 fa6c 	bl	801296c <dhcp_option>
 8012494:	4603      	mov	r3, r0
 8012496:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012498:	2300      	movs	r3, #0
 801249a:	77bb      	strb	r3, [r7, #30]
 801249c:	e00e      	b.n	80124bc <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801249e:	89b8      	ldrh	r0, [r7, #12]
 80124a0:	693b      	ldr	r3, [r7, #16]
 80124a2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80124a6:	7fbb      	ldrb	r3, [r7, #30]
 80124a8:	4a2a      	ldr	r2, [pc, #168]	; (8012554 <dhcp_renew+0x12c>)
 80124aa:	5cd3      	ldrb	r3, [r2, r3]
 80124ac:	461a      	mov	r2, r3
 80124ae:	f000 fa91 	bl	80129d4 <dhcp_option_byte>
 80124b2:	4603      	mov	r3, r0
 80124b4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80124b6:	7fbb      	ldrb	r3, [r7, #30]
 80124b8:	3301      	adds	r3, #1
 80124ba:	77bb      	strb	r3, [r7, #30]
 80124bc:	7fbb      	ldrb	r3, [r7, #30]
 80124be:	2b02      	cmp	r3, #2
 80124c0:	d9ed      	bls.n	801249e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80124c2:	89b8      	ldrh	r0, [r7, #12]
 80124c4:	693b      	ldr	r3, [r7, #16]
 80124c6:	33f0      	adds	r3, #240	; 0xf0
 80124c8:	697a      	ldr	r2, [r7, #20]
 80124ca:	4619      	mov	r1, r3
 80124cc:	f000 ff94 	bl	80133f8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80124d0:	4b21      	ldr	r3, [pc, #132]	; (8012558 <dhcp_renew+0x130>)
 80124d2:	6818      	ldr	r0, [r3, #0]
 80124d4:	69bb      	ldr	r3, [r7, #24]
 80124d6:	f103 0218 	add.w	r2, r3, #24
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	9300      	str	r3, [sp, #0]
 80124de:	2343      	movs	r3, #67	; 0x43
 80124e0:	6979      	ldr	r1, [r7, #20]
 80124e2:	f7fe fe8f 	bl	8011204 <udp_sendto_if>
 80124e6:	4603      	mov	r3, r0
 80124e8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80124ea:	6978      	ldr	r0, [r7, #20]
 80124ec:	f7f8 ff2c 	bl	800b348 <pbuf_free>
 80124f0:	e001      	b.n	80124f6 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80124f2:	23ff      	movs	r3, #255	; 0xff
 80124f4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80124f6:	69bb      	ldr	r3, [r7, #24]
 80124f8:	799b      	ldrb	r3, [r3, #6]
 80124fa:	2bff      	cmp	r3, #255	; 0xff
 80124fc:	d005      	beq.n	801250a <dhcp_renew+0xe2>
    dhcp->tries++;
 80124fe:	69bb      	ldr	r3, [r7, #24]
 8012500:	799b      	ldrb	r3, [r3, #6]
 8012502:	3301      	adds	r3, #1
 8012504:	b2da      	uxtb	r2, r3
 8012506:	69bb      	ldr	r3, [r7, #24]
 8012508:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801250a:	69bb      	ldr	r3, [r7, #24]
 801250c:	799b      	ldrb	r3, [r3, #6]
 801250e:	2b09      	cmp	r3, #9
 8012510:	d80a      	bhi.n	8012528 <dhcp_renew+0x100>
 8012512:	69bb      	ldr	r3, [r7, #24]
 8012514:	799b      	ldrb	r3, [r3, #6]
 8012516:	b29b      	uxth	r3, r3
 8012518:	461a      	mov	r2, r3
 801251a:	0152      	lsls	r2, r2, #5
 801251c:	1ad2      	subs	r2, r2, r3
 801251e:	0092      	lsls	r2, r2, #2
 8012520:	4413      	add	r3, r2
 8012522:	011b      	lsls	r3, r3, #4
 8012524:	b29b      	uxth	r3, r3
 8012526:	e001      	b.n	801252c <dhcp_renew+0x104>
 8012528:	f644 6320 	movw	r3, #20000	; 0x4e20
 801252c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801252e:	89fb      	ldrh	r3, [r7, #14]
 8012530:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012534:	4a09      	ldr	r2, [pc, #36]	; (801255c <dhcp_renew+0x134>)
 8012536:	fb82 1203 	smull	r1, r2, r2, r3
 801253a:	1152      	asrs	r2, r2, #5
 801253c:	17db      	asrs	r3, r3, #31
 801253e:	1ad3      	subs	r3, r2, r3
 8012540:	b29a      	uxth	r2, r3
 8012542:	69bb      	ldr	r3, [r7, #24]
 8012544:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012546:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801254a:	4618      	mov	r0, r3
 801254c:	3720      	adds	r7, #32
 801254e:	46bd      	mov	sp, r7
 8012550:	bd80      	pop	{r7, pc}
 8012552:	bf00      	nop
 8012554:	2000001c 	.word	0x2000001c
 8012558:	20000494 	.word	0x20000494
 801255c:	10624dd3 	.word	0x10624dd3

08012560 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8012560:	b580      	push	{r7, lr}
 8012562:	b08a      	sub	sp, #40	; 0x28
 8012564:	af02      	add	r7, sp, #8
 8012566:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	6a1b      	ldr	r3, [r3, #32]
 801256c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801256e:	2104      	movs	r1, #4
 8012570:	69b8      	ldr	r0, [r7, #24]
 8012572:	f000 f9e1 	bl	8012938 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012576:	f107 030c 	add.w	r3, r7, #12
 801257a:	2203      	movs	r2, #3
 801257c:	69b9      	ldr	r1, [r7, #24]
 801257e:	6878      	ldr	r0, [r7, #4]
 8012580:	f000 fe64 	bl	801324c <dhcp_create_msg>
 8012584:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012586:	697b      	ldr	r3, [r7, #20]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d04c      	beq.n	8012626 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801258c:	697b      	ldr	r3, [r7, #20]
 801258e:	685b      	ldr	r3, [r3, #4]
 8012590:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012592:	89b8      	ldrh	r0, [r7, #12]
 8012594:	693b      	ldr	r3, [r7, #16]
 8012596:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801259a:	2302      	movs	r3, #2
 801259c:	2239      	movs	r2, #57	; 0x39
 801259e:	f000 f9e5 	bl	801296c <dhcp_option>
 80125a2:	4603      	mov	r3, r0
 80125a4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80125a6:	89b8      	ldrh	r0, [r7, #12]
 80125a8:	693b      	ldr	r3, [r7, #16]
 80125aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80125b2:	461a      	mov	r2, r3
 80125b4:	f000 fa34 	bl	8012a20 <dhcp_option_short>
 80125b8:	4603      	mov	r3, r0
 80125ba:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80125bc:	89b8      	ldrh	r0, [r7, #12]
 80125be:	693b      	ldr	r3, [r7, #16]
 80125c0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80125c4:	2303      	movs	r3, #3
 80125c6:	2237      	movs	r2, #55	; 0x37
 80125c8:	f000 f9d0 	bl	801296c <dhcp_option>
 80125cc:	4603      	mov	r3, r0
 80125ce:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80125d0:	2300      	movs	r3, #0
 80125d2:	77bb      	strb	r3, [r7, #30]
 80125d4:	e00e      	b.n	80125f4 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80125d6:	89b8      	ldrh	r0, [r7, #12]
 80125d8:	693b      	ldr	r3, [r7, #16]
 80125da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80125de:	7fbb      	ldrb	r3, [r7, #30]
 80125e0:	4a29      	ldr	r2, [pc, #164]	; (8012688 <dhcp_rebind+0x128>)
 80125e2:	5cd3      	ldrb	r3, [r2, r3]
 80125e4:	461a      	mov	r2, r3
 80125e6:	f000 f9f5 	bl	80129d4 <dhcp_option_byte>
 80125ea:	4603      	mov	r3, r0
 80125ec:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80125ee:	7fbb      	ldrb	r3, [r7, #30]
 80125f0:	3301      	adds	r3, #1
 80125f2:	77bb      	strb	r3, [r7, #30]
 80125f4:	7fbb      	ldrb	r3, [r7, #30]
 80125f6:	2b02      	cmp	r3, #2
 80125f8:	d9ed      	bls.n	80125d6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80125fa:	89b8      	ldrh	r0, [r7, #12]
 80125fc:	693b      	ldr	r3, [r7, #16]
 80125fe:	33f0      	adds	r3, #240	; 0xf0
 8012600:	697a      	ldr	r2, [r7, #20]
 8012602:	4619      	mov	r1, r3
 8012604:	f000 fef8 	bl	80133f8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012608:	4b20      	ldr	r3, [pc, #128]	; (801268c <dhcp_rebind+0x12c>)
 801260a:	6818      	ldr	r0, [r3, #0]
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	9300      	str	r3, [sp, #0]
 8012610:	2343      	movs	r3, #67	; 0x43
 8012612:	4a1f      	ldr	r2, [pc, #124]	; (8012690 <dhcp_rebind+0x130>)
 8012614:	6979      	ldr	r1, [r7, #20]
 8012616:	f7fe fdf5 	bl	8011204 <udp_sendto_if>
 801261a:	4603      	mov	r3, r0
 801261c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801261e:	6978      	ldr	r0, [r7, #20]
 8012620:	f7f8 fe92 	bl	800b348 <pbuf_free>
 8012624:	e001      	b.n	801262a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012626:	23ff      	movs	r3, #255	; 0xff
 8012628:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801262a:	69bb      	ldr	r3, [r7, #24]
 801262c:	799b      	ldrb	r3, [r3, #6]
 801262e:	2bff      	cmp	r3, #255	; 0xff
 8012630:	d005      	beq.n	801263e <dhcp_rebind+0xde>
    dhcp->tries++;
 8012632:	69bb      	ldr	r3, [r7, #24]
 8012634:	799b      	ldrb	r3, [r3, #6]
 8012636:	3301      	adds	r3, #1
 8012638:	b2da      	uxtb	r2, r3
 801263a:	69bb      	ldr	r3, [r7, #24]
 801263c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801263e:	69bb      	ldr	r3, [r7, #24]
 8012640:	799b      	ldrb	r3, [r3, #6]
 8012642:	2b09      	cmp	r3, #9
 8012644:	d80a      	bhi.n	801265c <dhcp_rebind+0xfc>
 8012646:	69bb      	ldr	r3, [r7, #24]
 8012648:	799b      	ldrb	r3, [r3, #6]
 801264a:	b29b      	uxth	r3, r3
 801264c:	461a      	mov	r2, r3
 801264e:	0152      	lsls	r2, r2, #5
 8012650:	1ad2      	subs	r2, r2, r3
 8012652:	0092      	lsls	r2, r2, #2
 8012654:	4413      	add	r3, r2
 8012656:	00db      	lsls	r3, r3, #3
 8012658:	b29b      	uxth	r3, r3
 801265a:	e001      	b.n	8012660 <dhcp_rebind+0x100>
 801265c:	f242 7310 	movw	r3, #10000	; 0x2710
 8012660:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012662:	89fb      	ldrh	r3, [r7, #14]
 8012664:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012668:	4a0a      	ldr	r2, [pc, #40]	; (8012694 <dhcp_rebind+0x134>)
 801266a:	fb82 1203 	smull	r1, r2, r2, r3
 801266e:	1152      	asrs	r2, r2, #5
 8012670:	17db      	asrs	r3, r3, #31
 8012672:	1ad3      	subs	r3, r2, r3
 8012674:	b29a      	uxth	r2, r3
 8012676:	69bb      	ldr	r3, [r7, #24]
 8012678:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801267a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801267e:	4618      	mov	r0, r3
 8012680:	3720      	adds	r7, #32
 8012682:	46bd      	mov	sp, r7
 8012684:	bd80      	pop	{r7, pc}
 8012686:	bf00      	nop
 8012688:	2000001c 	.word	0x2000001c
 801268c:	20000494 	.word	0x20000494
 8012690:	08028228 	.word	0x08028228
 8012694:	10624dd3 	.word	0x10624dd3

08012698 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8012698:	b5b0      	push	{r4, r5, r7, lr}
 801269a:	b08a      	sub	sp, #40	; 0x28
 801269c:	af02      	add	r7, sp, #8
 801269e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	6a1b      	ldr	r3, [r3, #32]
 80126a4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80126a6:	2103      	movs	r1, #3
 80126a8:	69b8      	ldr	r0, [r7, #24]
 80126aa:	f000 f945 	bl	8012938 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80126ae:	f107 030c 	add.w	r3, r7, #12
 80126b2:	2203      	movs	r2, #3
 80126b4:	69b9      	ldr	r1, [r7, #24]
 80126b6:	6878      	ldr	r0, [r7, #4]
 80126b8:	f000 fdc8 	bl	801324c <dhcp_create_msg>
 80126bc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80126be:	697b      	ldr	r3, [r7, #20]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d066      	beq.n	8012792 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80126c4:	697b      	ldr	r3, [r7, #20]
 80126c6:	685b      	ldr	r3, [r3, #4]
 80126c8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80126ca:	89b8      	ldrh	r0, [r7, #12]
 80126cc:	693b      	ldr	r3, [r7, #16]
 80126ce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80126d2:	2302      	movs	r3, #2
 80126d4:	2239      	movs	r2, #57	; 0x39
 80126d6:	f000 f949 	bl	801296c <dhcp_option>
 80126da:	4603      	mov	r3, r0
 80126dc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80126de:	89b8      	ldrh	r0, [r7, #12]
 80126e0:	693b      	ldr	r3, [r7, #16]
 80126e2:	33f0      	adds	r3, #240	; 0xf0
 80126e4:	f44f 7210 	mov.w	r2, #576	; 0x240
 80126e8:	4619      	mov	r1, r3
 80126ea:	f000 f999 	bl	8012a20 <dhcp_option_short>
 80126ee:	4603      	mov	r3, r0
 80126f0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80126f2:	89b8      	ldrh	r0, [r7, #12]
 80126f4:	693b      	ldr	r3, [r7, #16]
 80126f6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80126fa:	2304      	movs	r3, #4
 80126fc:	2232      	movs	r2, #50	; 0x32
 80126fe:	f000 f935 	bl	801296c <dhcp_option>
 8012702:	4603      	mov	r3, r0
 8012704:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012706:	89bc      	ldrh	r4, [r7, #12]
 8012708:	693b      	ldr	r3, [r7, #16]
 801270a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801270e:	69bb      	ldr	r3, [r7, #24]
 8012710:	69db      	ldr	r3, [r3, #28]
 8012712:	4618      	mov	r0, r3
 8012714:	f7f7 fb8c 	bl	8009e30 <lwip_htonl>
 8012718:	4603      	mov	r3, r0
 801271a:	461a      	mov	r2, r3
 801271c:	4629      	mov	r1, r5
 801271e:	4620      	mov	r0, r4
 8012720:	f000 f9b0 	bl	8012a84 <dhcp_option_long>
 8012724:	4603      	mov	r3, r0
 8012726:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012728:	89b8      	ldrh	r0, [r7, #12]
 801272a:	693b      	ldr	r3, [r7, #16]
 801272c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012730:	2303      	movs	r3, #3
 8012732:	2237      	movs	r2, #55	; 0x37
 8012734:	f000 f91a 	bl	801296c <dhcp_option>
 8012738:	4603      	mov	r3, r0
 801273a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801273c:	2300      	movs	r3, #0
 801273e:	77bb      	strb	r3, [r7, #30]
 8012740:	e00e      	b.n	8012760 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012742:	89b8      	ldrh	r0, [r7, #12]
 8012744:	693b      	ldr	r3, [r7, #16]
 8012746:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801274a:	7fbb      	ldrb	r3, [r7, #30]
 801274c:	4a29      	ldr	r2, [pc, #164]	; (80127f4 <dhcp_reboot+0x15c>)
 801274e:	5cd3      	ldrb	r3, [r2, r3]
 8012750:	461a      	mov	r2, r3
 8012752:	f000 f93f 	bl	80129d4 <dhcp_option_byte>
 8012756:	4603      	mov	r3, r0
 8012758:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801275a:	7fbb      	ldrb	r3, [r7, #30]
 801275c:	3301      	adds	r3, #1
 801275e:	77bb      	strb	r3, [r7, #30]
 8012760:	7fbb      	ldrb	r3, [r7, #30]
 8012762:	2b02      	cmp	r3, #2
 8012764:	d9ed      	bls.n	8012742 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012766:	89b8      	ldrh	r0, [r7, #12]
 8012768:	693b      	ldr	r3, [r7, #16]
 801276a:	33f0      	adds	r3, #240	; 0xf0
 801276c:	697a      	ldr	r2, [r7, #20]
 801276e:	4619      	mov	r1, r3
 8012770:	f000 fe42 	bl	80133f8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012774:	4b20      	ldr	r3, [pc, #128]	; (80127f8 <dhcp_reboot+0x160>)
 8012776:	6818      	ldr	r0, [r3, #0]
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	9300      	str	r3, [sp, #0]
 801277c:	2343      	movs	r3, #67	; 0x43
 801277e:	4a1f      	ldr	r2, [pc, #124]	; (80127fc <dhcp_reboot+0x164>)
 8012780:	6979      	ldr	r1, [r7, #20]
 8012782:	f7fe fd3f 	bl	8011204 <udp_sendto_if>
 8012786:	4603      	mov	r3, r0
 8012788:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801278a:	6978      	ldr	r0, [r7, #20]
 801278c:	f7f8 fddc 	bl	800b348 <pbuf_free>
 8012790:	e001      	b.n	8012796 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012792:	23ff      	movs	r3, #255	; 0xff
 8012794:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012796:	69bb      	ldr	r3, [r7, #24]
 8012798:	799b      	ldrb	r3, [r3, #6]
 801279a:	2bff      	cmp	r3, #255	; 0xff
 801279c:	d005      	beq.n	80127aa <dhcp_reboot+0x112>
    dhcp->tries++;
 801279e:	69bb      	ldr	r3, [r7, #24]
 80127a0:	799b      	ldrb	r3, [r3, #6]
 80127a2:	3301      	adds	r3, #1
 80127a4:	b2da      	uxtb	r2, r3
 80127a6:	69bb      	ldr	r3, [r7, #24]
 80127a8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80127aa:	69bb      	ldr	r3, [r7, #24]
 80127ac:	799b      	ldrb	r3, [r3, #6]
 80127ae:	2b09      	cmp	r3, #9
 80127b0:	d80a      	bhi.n	80127c8 <dhcp_reboot+0x130>
 80127b2:	69bb      	ldr	r3, [r7, #24]
 80127b4:	799b      	ldrb	r3, [r3, #6]
 80127b6:	b29b      	uxth	r3, r3
 80127b8:	461a      	mov	r2, r3
 80127ba:	0152      	lsls	r2, r2, #5
 80127bc:	1ad2      	subs	r2, r2, r3
 80127be:	0092      	lsls	r2, r2, #2
 80127c0:	4413      	add	r3, r2
 80127c2:	00db      	lsls	r3, r3, #3
 80127c4:	b29b      	uxth	r3, r3
 80127c6:	e001      	b.n	80127cc <dhcp_reboot+0x134>
 80127c8:	f242 7310 	movw	r3, #10000	; 0x2710
 80127cc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80127ce:	89fb      	ldrh	r3, [r7, #14]
 80127d0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80127d4:	4a0a      	ldr	r2, [pc, #40]	; (8012800 <dhcp_reboot+0x168>)
 80127d6:	fb82 1203 	smull	r1, r2, r2, r3
 80127da:	1152      	asrs	r2, r2, #5
 80127dc:	17db      	asrs	r3, r3, #31
 80127de:	1ad3      	subs	r3, r2, r3
 80127e0:	b29a      	uxth	r2, r3
 80127e2:	69bb      	ldr	r3, [r7, #24]
 80127e4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80127e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80127ea:	4618      	mov	r0, r3
 80127ec:	3720      	adds	r7, #32
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bdb0      	pop	{r4, r5, r7, pc}
 80127f2:	bf00      	nop
 80127f4:	2000001c 	.word	0x2000001c
 80127f8:	20000494 	.word	0x20000494
 80127fc:	08028228 	.word	0x08028228
 8012800:	10624dd3 	.word	0x10624dd3

08012804 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8012804:	b5b0      	push	{r4, r5, r7, lr}
 8012806:	b08a      	sub	sp, #40	; 0x28
 8012808:	af02      	add	r7, sp, #8
 801280a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	6a1b      	ldr	r3, [r3, #32]
 8012810:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8012812:	69fb      	ldr	r3, [r7, #28]
 8012814:	2b00      	cmp	r3, #0
 8012816:	f000 8084 	beq.w	8012922 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801281a:	69fb      	ldr	r3, [r7, #28]
 801281c:	795b      	ldrb	r3, [r3, #5]
 801281e:	2b00      	cmp	r3, #0
 8012820:	f000 8081 	beq.w	8012926 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8012824:	69fb      	ldr	r3, [r7, #28]
 8012826:	699b      	ldr	r3, [r3, #24]
 8012828:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801282a:	69fb      	ldr	r3, [r7, #28]
 801282c:	2200      	movs	r2, #0
 801282e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8012830:	69fb      	ldr	r3, [r7, #28]
 8012832:	2200      	movs	r2, #0
 8012834:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8012836:	69fb      	ldr	r3, [r7, #28]
 8012838:	2200      	movs	r2, #0
 801283a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801283c:	69fb      	ldr	r3, [r7, #28]
 801283e:	2200      	movs	r2, #0
 8012840:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8012842:	69fb      	ldr	r3, [r7, #28]
 8012844:	2200      	movs	r2, #0
 8012846:	631a      	str	r2, [r3, #48]	; 0x30
 8012848:	69fb      	ldr	r3, [r7, #28]
 801284a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801284c:	69fb      	ldr	r3, [r7, #28]
 801284e:	62da      	str	r2, [r3, #44]	; 0x2c
 8012850:	69fb      	ldr	r3, [r7, #28]
 8012852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012854:	69fb      	ldr	r3, [r7, #28]
 8012856:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8012858:	69fb      	ldr	r3, [r7, #28]
 801285a:	2200      	movs	r2, #0
 801285c:	829a      	strh	r2, [r3, #20]
 801285e:	69fb      	ldr	r3, [r7, #28]
 8012860:	8a9a      	ldrh	r2, [r3, #20]
 8012862:	69fb      	ldr	r3, [r7, #28]
 8012864:	825a      	strh	r2, [r3, #18]
 8012866:	69fb      	ldr	r3, [r7, #28]
 8012868:	8a5a      	ldrh	r2, [r3, #18]
 801286a:	69fb      	ldr	r3, [r7, #28]
 801286c:	821a      	strh	r2, [r3, #16]
 801286e:	69fb      	ldr	r3, [r7, #28]
 8012870:	8a1a      	ldrh	r2, [r3, #16]
 8012872:	69fb      	ldr	r3, [r7, #28]
 8012874:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8012876:	6878      	ldr	r0, [r7, #4]
 8012878:	f000 fdec 	bl	8013454 <dhcp_supplied_address>
 801287c:	4603      	mov	r3, r0
 801287e:	2b00      	cmp	r3, #0
 8012880:	d03b      	beq.n	80128fa <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8012882:	f107 030e 	add.w	r3, r7, #14
 8012886:	2207      	movs	r2, #7
 8012888:	69f9      	ldr	r1, [r7, #28]
 801288a:	6878      	ldr	r0, [r7, #4]
 801288c:	f000 fcde 	bl	801324c <dhcp_create_msg>
 8012890:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8012892:	69bb      	ldr	r3, [r7, #24]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d030      	beq.n	80128fa <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012898:	69bb      	ldr	r3, [r7, #24]
 801289a:	685b      	ldr	r3, [r3, #4]
 801289c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801289e:	89f8      	ldrh	r0, [r7, #14]
 80128a0:	697b      	ldr	r3, [r7, #20]
 80128a2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80128a6:	2304      	movs	r3, #4
 80128a8:	2236      	movs	r2, #54	; 0x36
 80128aa:	f000 f85f 	bl	801296c <dhcp_option>
 80128ae:	4603      	mov	r3, r0
 80128b0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80128b2:	89fc      	ldrh	r4, [r7, #14]
 80128b4:	697b      	ldr	r3, [r7, #20]
 80128b6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80128ba:	693b      	ldr	r3, [r7, #16]
 80128bc:	4618      	mov	r0, r3
 80128be:	f7f7 fab7 	bl	8009e30 <lwip_htonl>
 80128c2:	4603      	mov	r3, r0
 80128c4:	461a      	mov	r2, r3
 80128c6:	4629      	mov	r1, r5
 80128c8:	4620      	mov	r0, r4
 80128ca:	f000 f8db 	bl	8012a84 <dhcp_option_long>
 80128ce:	4603      	mov	r3, r0
 80128d0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80128d2:	89f8      	ldrh	r0, [r7, #14]
 80128d4:	697b      	ldr	r3, [r7, #20]
 80128d6:	33f0      	adds	r3, #240	; 0xf0
 80128d8:	69ba      	ldr	r2, [r7, #24]
 80128da:	4619      	mov	r1, r3
 80128dc:	f000 fd8c 	bl	80133f8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80128e0:	4b13      	ldr	r3, [pc, #76]	; (8012930 <dhcp_release_and_stop+0x12c>)
 80128e2:	6818      	ldr	r0, [r3, #0]
 80128e4:	f107 0210 	add.w	r2, r7, #16
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	9300      	str	r3, [sp, #0]
 80128ec:	2343      	movs	r3, #67	; 0x43
 80128ee:	69b9      	ldr	r1, [r7, #24]
 80128f0:	f7fe fc88 	bl	8011204 <udp_sendto_if>
      pbuf_free(p_out);
 80128f4:	69b8      	ldr	r0, [r7, #24]
 80128f6:	f7f8 fd27 	bl	800b348 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80128fa:	4b0e      	ldr	r3, [pc, #56]	; (8012934 <dhcp_release_and_stop+0x130>)
 80128fc:	4a0d      	ldr	r2, [pc, #52]	; (8012934 <dhcp_release_and_stop+0x130>)
 80128fe:	490d      	ldr	r1, [pc, #52]	; (8012934 <dhcp_release_and_stop+0x130>)
 8012900:	6878      	ldr	r0, [r7, #4]
 8012902:	f7f8 f8bf 	bl	800aa84 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8012906:	2100      	movs	r1, #0
 8012908:	69f8      	ldr	r0, [r7, #28]
 801290a:	f000 f815 	bl	8012938 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801290e:	69fb      	ldr	r3, [r7, #28]
 8012910:	791b      	ldrb	r3, [r3, #4]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d008      	beq.n	8012928 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8012916:	f7fe ffc1 	bl	801189c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801291a:	69fb      	ldr	r3, [r7, #28]
 801291c:	2200      	movs	r2, #0
 801291e:	711a      	strb	r2, [r3, #4]
 8012920:	e002      	b.n	8012928 <dhcp_release_and_stop+0x124>
    return;
 8012922:	bf00      	nop
 8012924:	e000      	b.n	8012928 <dhcp_release_and_stop+0x124>
    return;
 8012926:	bf00      	nop
  }
}
 8012928:	3720      	adds	r7, #32
 801292a:	46bd      	mov	sp, r7
 801292c:	bdb0      	pop	{r4, r5, r7, pc}
 801292e:	bf00      	nop
 8012930:	20000494 	.word	0x20000494
 8012934:	08028224 	.word	0x08028224

08012938 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8012938:	b480      	push	{r7}
 801293a:	b083      	sub	sp, #12
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
 8012940:	460b      	mov	r3, r1
 8012942:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	795b      	ldrb	r3, [r3, #5]
 8012948:	78fa      	ldrb	r2, [r7, #3]
 801294a:	429a      	cmp	r2, r3
 801294c:	d008      	beq.n	8012960 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	78fa      	ldrb	r2, [r7, #3]
 8012952:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	2200      	movs	r2, #0
 8012958:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	2200      	movs	r2, #0
 801295e:	811a      	strh	r2, [r3, #8]
  }
}
 8012960:	bf00      	nop
 8012962:	370c      	adds	r7, #12
 8012964:	46bd      	mov	sp, r7
 8012966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296a:	4770      	bx	lr

0801296c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801296c:	b580      	push	{r7, lr}
 801296e:	b082      	sub	sp, #8
 8012970:	af00      	add	r7, sp, #0
 8012972:	6039      	str	r1, [r7, #0]
 8012974:	4611      	mov	r1, r2
 8012976:	461a      	mov	r2, r3
 8012978:	4603      	mov	r3, r0
 801297a:	80fb      	strh	r3, [r7, #6]
 801297c:	460b      	mov	r3, r1
 801297e:	717b      	strb	r3, [r7, #5]
 8012980:	4613      	mov	r3, r2
 8012982:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8012984:	88fa      	ldrh	r2, [r7, #6]
 8012986:	793b      	ldrb	r3, [r7, #4]
 8012988:	4413      	add	r3, r2
 801298a:	3302      	adds	r3, #2
 801298c:	2b44      	cmp	r3, #68	; 0x44
 801298e:	d906      	bls.n	801299e <dhcp_option+0x32>
 8012990:	4b0d      	ldr	r3, [pc, #52]	; (80129c8 <dhcp_option+0x5c>)
 8012992:	f240 529a 	movw	r2, #1434	; 0x59a
 8012996:	490d      	ldr	r1, [pc, #52]	; (80129cc <dhcp_option+0x60>)
 8012998:	480d      	ldr	r0, [pc, #52]	; (80129d0 <dhcp_option+0x64>)
 801299a:	f003 f95b 	bl	8015c54 <iprintf>
  options[options_out_len++] = option_type;
 801299e:	88fb      	ldrh	r3, [r7, #6]
 80129a0:	1c5a      	adds	r2, r3, #1
 80129a2:	80fa      	strh	r2, [r7, #6]
 80129a4:	461a      	mov	r2, r3
 80129a6:	683b      	ldr	r3, [r7, #0]
 80129a8:	4413      	add	r3, r2
 80129aa:	797a      	ldrb	r2, [r7, #5]
 80129ac:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80129ae:	88fb      	ldrh	r3, [r7, #6]
 80129b0:	1c5a      	adds	r2, r3, #1
 80129b2:	80fa      	strh	r2, [r7, #6]
 80129b4:	461a      	mov	r2, r3
 80129b6:	683b      	ldr	r3, [r7, #0]
 80129b8:	4413      	add	r3, r2
 80129ba:	793a      	ldrb	r2, [r7, #4]
 80129bc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80129be:	88fb      	ldrh	r3, [r7, #6]
}
 80129c0:	4618      	mov	r0, r3
 80129c2:	3708      	adds	r7, #8
 80129c4:	46bd      	mov	sp, r7
 80129c6:	bd80      	pop	{r7, pc}
 80129c8:	08018d20 	.word	0x08018d20
 80129cc:	08018eb4 	.word	0x08018eb4
 80129d0:	08018d80 	.word	0x08018d80

080129d4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b082      	sub	sp, #8
 80129d8:	af00      	add	r7, sp, #0
 80129da:	4603      	mov	r3, r0
 80129dc:	6039      	str	r1, [r7, #0]
 80129de:	80fb      	strh	r3, [r7, #6]
 80129e0:	4613      	mov	r3, r2
 80129e2:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80129e4:	88fb      	ldrh	r3, [r7, #6]
 80129e6:	2b43      	cmp	r3, #67	; 0x43
 80129e8:	d906      	bls.n	80129f8 <dhcp_option_byte+0x24>
 80129ea:	4b0a      	ldr	r3, [pc, #40]	; (8012a14 <dhcp_option_byte+0x40>)
 80129ec:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80129f0:	4909      	ldr	r1, [pc, #36]	; (8012a18 <dhcp_option_byte+0x44>)
 80129f2:	480a      	ldr	r0, [pc, #40]	; (8012a1c <dhcp_option_byte+0x48>)
 80129f4:	f003 f92e 	bl	8015c54 <iprintf>
  options[options_out_len++] = value;
 80129f8:	88fb      	ldrh	r3, [r7, #6]
 80129fa:	1c5a      	adds	r2, r3, #1
 80129fc:	80fa      	strh	r2, [r7, #6]
 80129fe:	461a      	mov	r2, r3
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	4413      	add	r3, r2
 8012a04:	797a      	ldrb	r2, [r7, #5]
 8012a06:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8012a08:	88fb      	ldrh	r3, [r7, #6]
}
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	3708      	adds	r7, #8
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}
 8012a12:	bf00      	nop
 8012a14:	08018d20 	.word	0x08018d20
 8012a18:	08018ef8 	.word	0x08018ef8
 8012a1c:	08018d80 	.word	0x08018d80

08012a20 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b082      	sub	sp, #8
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	4603      	mov	r3, r0
 8012a28:	6039      	str	r1, [r7, #0]
 8012a2a:	80fb      	strh	r3, [r7, #6]
 8012a2c:	4613      	mov	r3, r2
 8012a2e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8012a30:	88fb      	ldrh	r3, [r7, #6]
 8012a32:	3302      	adds	r3, #2
 8012a34:	2b44      	cmp	r3, #68	; 0x44
 8012a36:	d906      	bls.n	8012a46 <dhcp_option_short+0x26>
 8012a38:	4b0f      	ldr	r3, [pc, #60]	; (8012a78 <dhcp_option_short+0x58>)
 8012a3a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8012a3e:	490f      	ldr	r1, [pc, #60]	; (8012a7c <dhcp_option_short+0x5c>)
 8012a40:	480f      	ldr	r0, [pc, #60]	; (8012a80 <dhcp_option_short+0x60>)
 8012a42:	f003 f907 	bl	8015c54 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8012a46:	88bb      	ldrh	r3, [r7, #4]
 8012a48:	0a1b      	lsrs	r3, r3, #8
 8012a4a:	b29a      	uxth	r2, r3
 8012a4c:	88fb      	ldrh	r3, [r7, #6]
 8012a4e:	1c59      	adds	r1, r3, #1
 8012a50:	80f9      	strh	r1, [r7, #6]
 8012a52:	4619      	mov	r1, r3
 8012a54:	683b      	ldr	r3, [r7, #0]
 8012a56:	440b      	add	r3, r1
 8012a58:	b2d2      	uxtb	r2, r2
 8012a5a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8012a5c:	88fb      	ldrh	r3, [r7, #6]
 8012a5e:	1c5a      	adds	r2, r3, #1
 8012a60:	80fa      	strh	r2, [r7, #6]
 8012a62:	461a      	mov	r2, r3
 8012a64:	683b      	ldr	r3, [r7, #0]
 8012a66:	4413      	add	r3, r2
 8012a68:	88ba      	ldrh	r2, [r7, #4]
 8012a6a:	b2d2      	uxtb	r2, r2
 8012a6c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8012a6e:	88fb      	ldrh	r3, [r7, #6]
}
 8012a70:	4618      	mov	r0, r3
 8012a72:	3708      	adds	r7, #8
 8012a74:	46bd      	mov	sp, r7
 8012a76:	bd80      	pop	{r7, pc}
 8012a78:	08018d20 	.word	0x08018d20
 8012a7c:	08018f30 	.word	0x08018f30
 8012a80:	08018d80 	.word	0x08018d80

08012a84 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8012a84:	b580      	push	{r7, lr}
 8012a86:	b084      	sub	sp, #16
 8012a88:	af00      	add	r7, sp, #0
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	60b9      	str	r1, [r7, #8]
 8012a8e:	607a      	str	r2, [r7, #4]
 8012a90:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8012a92:	89fb      	ldrh	r3, [r7, #14]
 8012a94:	3304      	adds	r3, #4
 8012a96:	2b44      	cmp	r3, #68	; 0x44
 8012a98:	d906      	bls.n	8012aa8 <dhcp_option_long+0x24>
 8012a9a:	4b19      	ldr	r3, [pc, #100]	; (8012b00 <dhcp_option_long+0x7c>)
 8012a9c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8012aa0:	4918      	ldr	r1, [pc, #96]	; (8012b04 <dhcp_option_long+0x80>)
 8012aa2:	4819      	ldr	r0, [pc, #100]	; (8012b08 <dhcp_option_long+0x84>)
 8012aa4:	f003 f8d6 	bl	8015c54 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	0e1a      	lsrs	r2, r3, #24
 8012aac:	89fb      	ldrh	r3, [r7, #14]
 8012aae:	1c59      	adds	r1, r3, #1
 8012ab0:	81f9      	strh	r1, [r7, #14]
 8012ab2:	4619      	mov	r1, r3
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	440b      	add	r3, r1
 8012ab8:	b2d2      	uxtb	r2, r2
 8012aba:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	0c1a      	lsrs	r2, r3, #16
 8012ac0:	89fb      	ldrh	r3, [r7, #14]
 8012ac2:	1c59      	adds	r1, r3, #1
 8012ac4:	81f9      	strh	r1, [r7, #14]
 8012ac6:	4619      	mov	r1, r3
 8012ac8:	68bb      	ldr	r3, [r7, #8]
 8012aca:	440b      	add	r3, r1
 8012acc:	b2d2      	uxtb	r2, r2
 8012ace:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	0a1a      	lsrs	r2, r3, #8
 8012ad4:	89fb      	ldrh	r3, [r7, #14]
 8012ad6:	1c59      	adds	r1, r3, #1
 8012ad8:	81f9      	strh	r1, [r7, #14]
 8012ada:	4619      	mov	r1, r3
 8012adc:	68bb      	ldr	r3, [r7, #8]
 8012ade:	440b      	add	r3, r1
 8012ae0:	b2d2      	uxtb	r2, r2
 8012ae2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8012ae4:	89fb      	ldrh	r3, [r7, #14]
 8012ae6:	1c5a      	adds	r2, r3, #1
 8012ae8:	81fa      	strh	r2, [r7, #14]
 8012aea:	461a      	mov	r2, r3
 8012aec:	68bb      	ldr	r3, [r7, #8]
 8012aee:	4413      	add	r3, r2
 8012af0:	687a      	ldr	r2, [r7, #4]
 8012af2:	b2d2      	uxtb	r2, r2
 8012af4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8012af6:	89fb      	ldrh	r3, [r7, #14]
}
 8012af8:	4618      	mov	r0, r3
 8012afa:	3710      	adds	r7, #16
 8012afc:	46bd      	mov	sp, r7
 8012afe:	bd80      	pop	{r7, pc}
 8012b00:	08018d20 	.word	0x08018d20
 8012b04:	08018f6c 	.word	0x08018f6c
 8012b08:	08018d80 	.word	0x08018d80

08012b0c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b090      	sub	sp, #64	; 0x40
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
 8012b14:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8012b16:	2300      	movs	r3, #0
 8012b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8012b1e:	2208      	movs	r2, #8
 8012b20:	2100      	movs	r1, #0
 8012b22:	48be      	ldr	r0, [pc, #760]	; (8012e1c <dhcp_parse_reply+0x310>)
 8012b24:	f002 ffe6 	bl	8015af4 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	895b      	ldrh	r3, [r3, #10]
 8012b2c:	2b2b      	cmp	r3, #43	; 0x2b
 8012b2e:	d802      	bhi.n	8012b36 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8012b30:	f06f 0301 	mvn.w	r3, #1
 8012b34:	e2a8      	b.n	8013088 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	685b      	ldr	r3, [r3, #4]
 8012b3a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8012b3c:	23f0      	movs	r3, #240	; 0xf0
 8012b3e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	891b      	ldrh	r3, [r3, #8]
 8012b44:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8012b4a:	e00c      	b.n	8012b66 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8012b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b4e:	895b      	ldrh	r3, [r3, #10]
 8012b50:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012b52:	1ad3      	subs	r3, r2, r3
 8012b54:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8012b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b58:	895b      	ldrh	r3, [r3, #10]
 8012b5a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8012b5c:	1ad3      	subs	r3, r2, r3
 8012b5e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8012b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8012b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d004      	beq.n	8012b76 <dhcp_parse_reply+0x6a>
 8012b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b6e:	895b      	ldrh	r3, [r3, #10]
 8012b70:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012b72:	429a      	cmp	r2, r3
 8012b74:	d2ea      	bcs.n	8012b4c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8012b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d102      	bne.n	8012b82 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8012b7c:	f06f 0301 	mvn.w	r3, #1
 8012b80:	e282      	b.n	8013088 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8012b82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012b84:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8012b86:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012b88:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8012b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b8c:	685b      	ldr	r3, [r3, #4]
 8012b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8012b90:	e23a      	b.n	8013008 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8012b92:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012b94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012b96:	4413      	add	r3, r2
 8012b98:	781b      	ldrb	r3, [r3, #0]
 8012b9a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8012ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8012ba6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8012ba8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012baa:	3302      	adds	r3, #2
 8012bac:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8012bae:	8bfa      	ldrh	r2, [r7, #30]
 8012bb0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012bb2:	429a      	cmp	r2, r3
 8012bb4:	d202      	bcs.n	8012bbc <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8012bb6:	f06f 0301 	mvn.w	r3, #1
 8012bba:	e265      	b.n	8013088 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8012bbc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012bbe:	3301      	adds	r3, #1
 8012bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012bc2:	8952      	ldrh	r2, [r2, #10]
 8012bc4:	4293      	cmp	r3, r2
 8012bc6:	da07      	bge.n	8012bd8 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8012bc8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012bca:	3301      	adds	r3, #1
 8012bcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012bce:	4413      	add	r3, r2
 8012bd0:	781b      	ldrb	r3, [r3, #0]
 8012bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012bd6:	e00b      	b.n	8012bf0 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8012bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d004      	beq.n	8012bea <dhcp_parse_reply+0xde>
 8012be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	685b      	ldr	r3, [r3, #4]
 8012be6:	781b      	ldrb	r3, [r3, #0]
 8012be8:	e000      	b.n	8012bec <dhcp_parse_reply+0xe0>
 8012bea:	2300      	movs	r3, #0
 8012bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8012bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012bf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8012bf8:	7dfb      	ldrb	r3, [r7, #23]
 8012bfa:	2b3b      	cmp	r3, #59	; 0x3b
 8012bfc:	f200 812d 	bhi.w	8012e5a <dhcp_parse_reply+0x34e>
 8012c00:	a201      	add	r2, pc, #4	; (adr r2, 8012c08 <dhcp_parse_reply+0xfc>)
 8012c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c06:	bf00      	nop
 8012c08:	08012cf9 	.word	0x08012cf9
 8012c0c:	08012d09 	.word	0x08012d09
 8012c10:	08012e5b 	.word	0x08012e5b
 8012c14:	08012d2b 	.word	0x08012d2b
 8012c18:	08012e5b 	.word	0x08012e5b
 8012c1c:	08012e5b 	.word	0x08012e5b
 8012c20:	08012e5b 	.word	0x08012e5b
 8012c24:	08012e5b 	.word	0x08012e5b
 8012c28:	08012e5b 	.word	0x08012e5b
 8012c2c:	08012e5b 	.word	0x08012e5b
 8012c30:	08012e5b 	.word	0x08012e5b
 8012c34:	08012e5b 	.word	0x08012e5b
 8012c38:	08012e5b 	.word	0x08012e5b
 8012c3c:	08012e5b 	.word	0x08012e5b
 8012c40:	08012e5b 	.word	0x08012e5b
 8012c44:	08012e5b 	.word	0x08012e5b
 8012c48:	08012e5b 	.word	0x08012e5b
 8012c4c:	08012e5b 	.word	0x08012e5b
 8012c50:	08012e5b 	.word	0x08012e5b
 8012c54:	08012e5b 	.word	0x08012e5b
 8012c58:	08012e5b 	.word	0x08012e5b
 8012c5c:	08012e5b 	.word	0x08012e5b
 8012c60:	08012e5b 	.word	0x08012e5b
 8012c64:	08012e5b 	.word	0x08012e5b
 8012c68:	08012e5b 	.word	0x08012e5b
 8012c6c:	08012e5b 	.word	0x08012e5b
 8012c70:	08012e5b 	.word	0x08012e5b
 8012c74:	08012e5b 	.word	0x08012e5b
 8012c78:	08012e5b 	.word	0x08012e5b
 8012c7c:	08012e5b 	.word	0x08012e5b
 8012c80:	08012e5b 	.word	0x08012e5b
 8012c84:	08012e5b 	.word	0x08012e5b
 8012c88:	08012e5b 	.word	0x08012e5b
 8012c8c:	08012e5b 	.word	0x08012e5b
 8012c90:	08012e5b 	.word	0x08012e5b
 8012c94:	08012e5b 	.word	0x08012e5b
 8012c98:	08012e5b 	.word	0x08012e5b
 8012c9c:	08012e5b 	.word	0x08012e5b
 8012ca0:	08012e5b 	.word	0x08012e5b
 8012ca4:	08012e5b 	.word	0x08012e5b
 8012ca8:	08012e5b 	.word	0x08012e5b
 8012cac:	08012e5b 	.word	0x08012e5b
 8012cb0:	08012e5b 	.word	0x08012e5b
 8012cb4:	08012e5b 	.word	0x08012e5b
 8012cb8:	08012e5b 	.word	0x08012e5b
 8012cbc:	08012e5b 	.word	0x08012e5b
 8012cc0:	08012e5b 	.word	0x08012e5b
 8012cc4:	08012e5b 	.word	0x08012e5b
 8012cc8:	08012e5b 	.word	0x08012e5b
 8012ccc:	08012e5b 	.word	0x08012e5b
 8012cd0:	08012e5b 	.word	0x08012e5b
 8012cd4:	08012d57 	.word	0x08012d57
 8012cd8:	08012d79 	.word	0x08012d79
 8012cdc:	08012db5 	.word	0x08012db5
 8012ce0:	08012dd7 	.word	0x08012dd7
 8012ce4:	08012e5b 	.word	0x08012e5b
 8012ce8:	08012e5b 	.word	0x08012e5b
 8012cec:	08012e5b 	.word	0x08012e5b
 8012cf0:	08012df9 	.word	0x08012df9
 8012cf4:	08012e39 	.word	0x08012e39
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8012d06:	e0ac      	b.n	8012e62 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d0c:	2b04      	cmp	r3, #4
 8012d0e:	d009      	beq.n	8012d24 <dhcp_parse_reply+0x218>
 8012d10:	4b43      	ldr	r3, [pc, #268]	; (8012e20 <dhcp_parse_reply+0x314>)
 8012d12:	f240 622e 	movw	r2, #1582	; 0x62e
 8012d16:	4943      	ldr	r1, [pc, #268]	; (8012e24 <dhcp_parse_reply+0x318>)
 8012d18:	4843      	ldr	r0, [pc, #268]	; (8012e28 <dhcp_parse_reply+0x31c>)
 8012d1a:	f002 ff9b 	bl	8015c54 <iprintf>
 8012d1e:	f06f 0305 	mvn.w	r3, #5
 8012d22:	e1b1      	b.n	8013088 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8012d24:	2306      	movs	r3, #6
 8012d26:	623b      	str	r3, [r7, #32]
        break;
 8012d28:	e09b      	b.n	8012e62 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8012d2a:	2304      	movs	r3, #4
 8012d2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8012d30:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012d34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012d38:	429a      	cmp	r2, r3
 8012d3a:	d209      	bcs.n	8012d50 <dhcp_parse_reply+0x244>
 8012d3c:	4b38      	ldr	r3, [pc, #224]	; (8012e20 <dhcp_parse_reply+0x314>)
 8012d3e:	f240 6233 	movw	r2, #1587	; 0x633
 8012d42:	493a      	ldr	r1, [pc, #232]	; (8012e2c <dhcp_parse_reply+0x320>)
 8012d44:	4838      	ldr	r0, [pc, #224]	; (8012e28 <dhcp_parse_reply+0x31c>)
 8012d46:	f002 ff85 	bl	8015c54 <iprintf>
 8012d4a:	f06f 0305 	mvn.w	r3, #5
 8012d4e:	e19b      	b.n	8013088 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8012d50:	2307      	movs	r3, #7
 8012d52:	623b      	str	r3, [r7, #32]
        break;
 8012d54:	e085      	b.n	8012e62 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012d56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d5a:	2b04      	cmp	r3, #4
 8012d5c:	d009      	beq.n	8012d72 <dhcp_parse_reply+0x266>
 8012d5e:	4b30      	ldr	r3, [pc, #192]	; (8012e20 <dhcp_parse_reply+0x314>)
 8012d60:	f240 6241 	movw	r2, #1601	; 0x641
 8012d64:	492f      	ldr	r1, [pc, #188]	; (8012e24 <dhcp_parse_reply+0x318>)
 8012d66:	4830      	ldr	r0, [pc, #192]	; (8012e28 <dhcp_parse_reply+0x31c>)
 8012d68:	f002 ff74 	bl	8015c54 <iprintf>
 8012d6c:	f06f 0305 	mvn.w	r3, #5
 8012d70:	e18a      	b.n	8013088 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8012d72:	2303      	movs	r3, #3
 8012d74:	623b      	str	r3, [r7, #32]
        break;
 8012d76:	e074      	b.n	8012e62 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8012d78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d7c:	2b01      	cmp	r3, #1
 8012d7e:	d009      	beq.n	8012d94 <dhcp_parse_reply+0x288>
 8012d80:	4b27      	ldr	r3, [pc, #156]	; (8012e20 <dhcp_parse_reply+0x314>)
 8012d82:	f240 624f 	movw	r2, #1615	; 0x64f
 8012d86:	492a      	ldr	r1, [pc, #168]	; (8012e30 <dhcp_parse_reply+0x324>)
 8012d88:	4827      	ldr	r0, [pc, #156]	; (8012e28 <dhcp_parse_reply+0x31c>)
 8012d8a:	f002 ff63 	bl	8015c54 <iprintf>
 8012d8e:	f06f 0305 	mvn.w	r3, #5
 8012d92:	e179      	b.n	8013088 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8012d94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012d96:	2bf0      	cmp	r3, #240	; 0xf0
 8012d98:	d009      	beq.n	8012dae <dhcp_parse_reply+0x2a2>
 8012d9a:	4b21      	ldr	r3, [pc, #132]	; (8012e20 <dhcp_parse_reply+0x314>)
 8012d9c:	f240 6251 	movw	r2, #1617	; 0x651
 8012da0:	4924      	ldr	r1, [pc, #144]	; (8012e34 <dhcp_parse_reply+0x328>)
 8012da2:	4821      	ldr	r0, [pc, #132]	; (8012e28 <dhcp_parse_reply+0x31c>)
 8012da4:	f002 ff56 	bl	8015c54 <iprintf>
 8012da8:	f06f 0305 	mvn.w	r3, #5
 8012dac:	e16c      	b.n	8013088 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8012dae:	2300      	movs	r3, #0
 8012db0:	623b      	str	r3, [r7, #32]
        break;
 8012db2:	e056      	b.n	8012e62 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8012db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012db8:	2b01      	cmp	r3, #1
 8012dba:	d009      	beq.n	8012dd0 <dhcp_parse_reply+0x2c4>
 8012dbc:	4b18      	ldr	r3, [pc, #96]	; (8012e20 <dhcp_parse_reply+0x314>)
 8012dbe:	f240 6255 	movw	r2, #1621	; 0x655
 8012dc2:	491b      	ldr	r1, [pc, #108]	; (8012e30 <dhcp_parse_reply+0x324>)
 8012dc4:	4818      	ldr	r0, [pc, #96]	; (8012e28 <dhcp_parse_reply+0x31c>)
 8012dc6:	f002 ff45 	bl	8015c54 <iprintf>
 8012dca:	f06f 0305 	mvn.w	r3, #5
 8012dce:	e15b      	b.n	8013088 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8012dd0:	2301      	movs	r3, #1
 8012dd2:	623b      	str	r3, [r7, #32]
        break;
 8012dd4:	e045      	b.n	8012e62 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012dda:	2b04      	cmp	r3, #4
 8012ddc:	d009      	beq.n	8012df2 <dhcp_parse_reply+0x2e6>
 8012dde:	4b10      	ldr	r3, [pc, #64]	; (8012e20 <dhcp_parse_reply+0x314>)
 8012de0:	f240 6259 	movw	r2, #1625	; 0x659
 8012de4:	490f      	ldr	r1, [pc, #60]	; (8012e24 <dhcp_parse_reply+0x318>)
 8012de6:	4810      	ldr	r0, [pc, #64]	; (8012e28 <dhcp_parse_reply+0x31c>)
 8012de8:	f002 ff34 	bl	8015c54 <iprintf>
 8012dec:	f06f 0305 	mvn.w	r3, #5
 8012df0:	e14a      	b.n	8013088 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8012df2:	2302      	movs	r3, #2
 8012df4:	623b      	str	r3, [r7, #32]
        break;
 8012df6:	e034      	b.n	8012e62 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012df8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012dfc:	2b04      	cmp	r3, #4
 8012dfe:	d009      	beq.n	8012e14 <dhcp_parse_reply+0x308>
 8012e00:	4b07      	ldr	r3, [pc, #28]	; (8012e20 <dhcp_parse_reply+0x314>)
 8012e02:	f240 625d 	movw	r2, #1629	; 0x65d
 8012e06:	4907      	ldr	r1, [pc, #28]	; (8012e24 <dhcp_parse_reply+0x318>)
 8012e08:	4807      	ldr	r0, [pc, #28]	; (8012e28 <dhcp_parse_reply+0x31c>)
 8012e0a:	f002 ff23 	bl	8015c54 <iprintf>
 8012e0e:	f06f 0305 	mvn.w	r3, #5
 8012e12:	e139      	b.n	8013088 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8012e14:	2304      	movs	r3, #4
 8012e16:	623b      	str	r3, [r7, #32]
        break;
 8012e18:	e023      	b.n	8012e62 <dhcp_parse_reply+0x356>
 8012e1a:	bf00      	nop
 8012e1c:	20007710 	.word	0x20007710
 8012e20:	08018d20 	.word	0x08018d20
 8012e24:	08018fa8 	.word	0x08018fa8
 8012e28:	08018d80 	.word	0x08018d80
 8012e2c:	08018fb4 	.word	0x08018fb4
 8012e30:	08018fc8 	.word	0x08018fc8
 8012e34:	08018fd4 	.word	0x08018fd4
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012e38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e3c:	2b04      	cmp	r3, #4
 8012e3e:	d009      	beq.n	8012e54 <dhcp_parse_reply+0x348>
 8012e40:	4b93      	ldr	r3, [pc, #588]	; (8013090 <dhcp_parse_reply+0x584>)
 8012e42:	f240 6261 	movw	r2, #1633	; 0x661
 8012e46:	4993      	ldr	r1, [pc, #588]	; (8013094 <dhcp_parse_reply+0x588>)
 8012e48:	4893      	ldr	r0, [pc, #588]	; (8013098 <dhcp_parse_reply+0x58c>)
 8012e4a:	f002 ff03 	bl	8015c54 <iprintf>
 8012e4e:	f06f 0305 	mvn.w	r3, #5
 8012e52:	e119      	b.n	8013088 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8012e54:	2305      	movs	r3, #5
 8012e56:	623b      	str	r3, [r7, #32]
        break;
 8012e58:	e003      	b.n	8012e62 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8012e5a:	2300      	movs	r3, #0
 8012e5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8012e60:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8012e62:	7dfb      	ldrb	r3, [r7, #23]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d103      	bne.n	8012e70 <dhcp_parse_reply+0x364>
      offset++;
 8012e68:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012e6a:	3301      	adds	r3, #1
 8012e6c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8012e6e:	e0a1      	b.n	8012fb4 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8012e70:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012e72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e76:	4413      	add	r3, r2
 8012e78:	3302      	adds	r3, #2
 8012e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012e7e:	db02      	blt.n	8012e86 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8012e80:	f06f 0301 	mvn.w	r3, #1
 8012e84:	e100      	b.n	8013088 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8012e86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e8a:	b29a      	uxth	r2, r3
 8012e8c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012e8e:	4413      	add	r3, r2
 8012e90:	b29b      	uxth	r3, r3
 8012e92:	3302      	adds	r3, #2
 8012e94:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8012e96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	f000 808a 	beq.w	8012fb4 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8012ea4:	6a3b      	ldr	r3, [r7, #32]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	db02      	blt.n	8012eb0 <dhcp_parse_reply+0x3a4>
 8012eaa:	6a3b      	ldr	r3, [r7, #32]
 8012eac:	2b07      	cmp	r3, #7
 8012eae:	dd06      	ble.n	8012ebe <dhcp_parse_reply+0x3b2>
 8012eb0:	4b77      	ldr	r3, [pc, #476]	; (8013090 <dhcp_parse_reply+0x584>)
 8012eb2:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8012eb6:	4979      	ldr	r1, [pc, #484]	; (801309c <dhcp_parse_reply+0x590>)
 8012eb8:	4877      	ldr	r0, [pc, #476]	; (8013098 <dhcp_parse_reply+0x58c>)
 8012eba:	f002 fecb 	bl	8015c54 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8012ebe:	4a78      	ldr	r2, [pc, #480]	; (80130a0 <dhcp_parse_reply+0x594>)
 8012ec0:	6a3b      	ldr	r3, [r7, #32]
 8012ec2:	4413      	add	r3, r2
 8012ec4:	781b      	ldrb	r3, [r3, #0]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d174      	bne.n	8012fb4 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8012eca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012ece:	2b04      	cmp	r3, #4
 8012ed0:	bf28      	it	cs
 8012ed2:	2304      	movcs	r3, #4
 8012ed4:	b2db      	uxtb	r3, r3
 8012ed6:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8012ed8:	8bfb      	ldrh	r3, [r7, #30]
 8012eda:	8aba      	ldrh	r2, [r7, #20]
 8012edc:	f107 0108 	add.w	r1, r7, #8
 8012ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ee2:	f7f8 fc2b 	bl	800b73c <pbuf_copy_partial>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	461a      	mov	r2, r3
 8012eea:	8abb      	ldrh	r3, [r7, #20]
 8012eec:	4293      	cmp	r3, r2
 8012eee:	d002      	beq.n	8012ef6 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8012ef0:	f06f 0301 	mvn.w	r3, #1
 8012ef4:	e0c8      	b.n	8013088 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8012ef6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012efa:	2b04      	cmp	r3, #4
 8012efc:	d933      	bls.n	8012f66 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8012efe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012f02:	f003 0303 	and.w	r3, r3, #3
 8012f06:	b2db      	uxtb	r3, r3
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d009      	beq.n	8012f20 <dhcp_parse_reply+0x414>
 8012f0c:	4b60      	ldr	r3, [pc, #384]	; (8013090 <dhcp_parse_reply+0x584>)
 8012f0e:	f240 6281 	movw	r2, #1665	; 0x681
 8012f12:	4964      	ldr	r1, [pc, #400]	; (80130a4 <dhcp_parse_reply+0x598>)
 8012f14:	4860      	ldr	r0, [pc, #384]	; (8013098 <dhcp_parse_reply+0x58c>)
 8012f16:	f002 fe9d 	bl	8015c54 <iprintf>
 8012f1a:	f06f 0305 	mvn.w	r3, #5
 8012f1e:	e0b3      	b.n	8013088 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8012f20:	4a5f      	ldr	r2, [pc, #380]	; (80130a0 <dhcp_parse_reply+0x594>)
 8012f22:	6a3b      	ldr	r3, [r7, #32]
 8012f24:	4413      	add	r3, r2
 8012f26:	2201      	movs	r2, #1
 8012f28:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8012f2a:	68bb      	ldr	r3, [r7, #8]
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	f7f6 ff7f 	bl	8009e30 <lwip_htonl>
 8012f32:	4601      	mov	r1, r0
 8012f34:	4a5c      	ldr	r2, [pc, #368]	; (80130a8 <dhcp_parse_reply+0x59c>)
 8012f36:	6a3b      	ldr	r3, [r7, #32]
 8012f38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8012f3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012f40:	3b04      	subs	r3, #4
 8012f42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8012f46:	8bfb      	ldrh	r3, [r7, #30]
 8012f48:	3304      	adds	r3, #4
 8012f4a:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8012f4c:	8a7a      	ldrh	r2, [r7, #18]
 8012f4e:	8bfb      	ldrh	r3, [r7, #30]
 8012f50:	429a      	cmp	r2, r3
 8012f52:	d202      	bcs.n	8012f5a <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8012f54:	f06f 0301 	mvn.w	r3, #1
 8012f58:	e096      	b.n	8013088 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8012f5a:	8a7b      	ldrh	r3, [r7, #18]
 8012f5c:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8012f5e:	6a3b      	ldr	r3, [r7, #32]
 8012f60:	3301      	adds	r3, #1
 8012f62:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8012f64:	e79e      	b.n	8012ea4 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8012f66:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012f6a:	2b04      	cmp	r3, #4
 8012f6c:	d106      	bne.n	8012f7c <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8012f6e:	68bb      	ldr	r3, [r7, #8]
 8012f70:	4618      	mov	r0, r3
 8012f72:	f7f6 ff5d 	bl	8009e30 <lwip_htonl>
 8012f76:	4603      	mov	r3, r0
 8012f78:	60bb      	str	r3, [r7, #8]
 8012f7a:	e011      	b.n	8012fa0 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8012f7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012f80:	2b01      	cmp	r3, #1
 8012f82:	d009      	beq.n	8012f98 <dhcp_parse_reply+0x48c>
 8012f84:	4b42      	ldr	r3, [pc, #264]	; (8013090 <dhcp_parse_reply+0x584>)
 8012f86:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8012f8a:	4948      	ldr	r1, [pc, #288]	; (80130ac <dhcp_parse_reply+0x5a0>)
 8012f8c:	4842      	ldr	r0, [pc, #264]	; (8013098 <dhcp_parse_reply+0x58c>)
 8012f8e:	f002 fe61 	bl	8015c54 <iprintf>
 8012f92:	f06f 0305 	mvn.w	r3, #5
 8012f96:	e077      	b.n	8013088 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8012f98:	f107 0308 	add.w	r3, r7, #8
 8012f9c:	781b      	ldrb	r3, [r3, #0]
 8012f9e:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8012fa0:	4a3f      	ldr	r2, [pc, #252]	; (80130a0 <dhcp_parse_reply+0x594>)
 8012fa2:	6a3b      	ldr	r3, [r7, #32]
 8012fa4:	4413      	add	r3, r2
 8012fa6:	2201      	movs	r2, #1
 8012fa8:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8012faa:	68ba      	ldr	r2, [r7, #8]
 8012fac:	493e      	ldr	r1, [pc, #248]	; (80130a8 <dhcp_parse_reply+0x59c>)
 8012fae:	6a3b      	ldr	r3, [r7, #32]
 8012fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8012fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fb6:	895b      	ldrh	r3, [r3, #10]
 8012fb8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012fba:	429a      	cmp	r2, r3
 8012fbc:	d324      	bcc.n	8013008 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8012fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fc0:	895b      	ldrh	r3, [r3, #10]
 8012fc2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012fc4:	1ad3      	subs	r3, r2, r3
 8012fc6:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8012fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fca:	895b      	ldrh	r3, [r3, #10]
 8012fcc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8012fce:	1ad3      	subs	r3, r2, r3
 8012fd0:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8012fd2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012fd4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012fd6:	429a      	cmp	r2, r3
 8012fd8:	d213      	bcs.n	8013002 <dhcp_parse_reply+0x4f6>
        q = q->next;
 8012fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8012fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d109      	bne.n	8012ffa <dhcp_parse_reply+0x4ee>
 8012fe6:	4b2a      	ldr	r3, [pc, #168]	; (8013090 <dhcp_parse_reply+0x584>)
 8012fe8:	f240 629d 	movw	r2, #1693	; 0x69d
 8012fec:	4930      	ldr	r1, [pc, #192]	; (80130b0 <dhcp_parse_reply+0x5a4>)
 8012fee:	482a      	ldr	r0, [pc, #168]	; (8013098 <dhcp_parse_reply+0x58c>)
 8012ff0:	f002 fe30 	bl	8015c54 <iprintf>
 8012ff4:	f06f 0305 	mvn.w	r3, #5
 8012ff8:	e046      	b.n	8013088 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8012ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ffc:	685b      	ldr	r3, [r3, #4]
 8012ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013000:	e002      	b.n	8013008 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8013002:	f06f 0301 	mvn.w	r3, #1
 8013006:	e03f      	b.n	8013088 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801300a:	2b00      	cmp	r3, #0
 801300c:	d00a      	beq.n	8013024 <dhcp_parse_reply+0x518>
 801300e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013010:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013012:	429a      	cmp	r2, r3
 8013014:	d206      	bcs.n	8013024 <dhcp_parse_reply+0x518>
 8013016:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013018:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801301a:	4413      	add	r3, r2
 801301c:	781b      	ldrb	r3, [r3, #0]
 801301e:	2bff      	cmp	r3, #255	; 0xff
 8013020:	f47f adb7 	bne.w	8012b92 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8013024:	4b1e      	ldr	r3, [pc, #120]	; (80130a0 <dhcp_parse_reply+0x594>)
 8013026:	781b      	ldrb	r3, [r3, #0]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d018      	beq.n	801305e <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801302c:	4b1e      	ldr	r3, [pc, #120]	; (80130a8 <dhcp_parse_reply+0x59c>)
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8013032:	4b1b      	ldr	r3, [pc, #108]	; (80130a0 <dhcp_parse_reply+0x594>)
 8013034:	2200      	movs	r2, #0
 8013036:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	2b01      	cmp	r3, #1
 801303c:	d102      	bne.n	8013044 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 801303e:	2301      	movs	r3, #1
 8013040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013042:	e00c      	b.n	801305e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	2b02      	cmp	r3, #2
 8013048:	d102      	bne.n	8013050 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 801304a:	2301      	movs	r3, #1
 801304c:	62bb      	str	r3, [r7, #40]	; 0x28
 801304e:	e006      	b.n	801305e <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	2b03      	cmp	r3, #3
 8013054:	d103      	bne.n	801305e <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8013056:	2301      	movs	r3, #1
 8013058:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801305a:	2301      	movs	r3, #1
 801305c:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801305e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013060:	2b00      	cmp	r3, #0
 8013062:	d006      	beq.n	8013072 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8013064:	2300      	movs	r3, #0
 8013066:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8013068:	236c      	movs	r3, #108	; 0x6c
 801306a:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801306c:	23ec      	movs	r3, #236	; 0xec
 801306e:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8013070:	e569      	b.n	8012b46 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8013072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013074:	2b00      	cmp	r3, #0
 8013076:	d006      	beq.n	8013086 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8013078:	2300      	movs	r3, #0
 801307a:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801307c:	232c      	movs	r3, #44	; 0x2c
 801307e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8013080:	236c      	movs	r3, #108	; 0x6c
 8013082:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8013084:	e55f      	b.n	8012b46 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8013086:	2300      	movs	r3, #0
}
 8013088:	4618      	mov	r0, r3
 801308a:	3740      	adds	r7, #64	; 0x40
 801308c:	46bd      	mov	sp, r7
 801308e:	bd80      	pop	{r7, pc}
 8013090:	08018d20 	.word	0x08018d20
 8013094:	08018fa8 	.word	0x08018fa8
 8013098:	08018d80 	.word	0x08018d80
 801309c:	08018fec 	.word	0x08018fec
 80130a0:	20007710 	.word	0x20007710
 80130a4:	08019000 	.word	0x08019000
 80130a8:	20007718 	.word	0x20007718
 80130ac:	08019018 	.word	0x08019018
 80130b0:	0801902c 	.word	0x0801902c

080130b4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b08a      	sub	sp, #40	; 0x28
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	60f8      	str	r0, [r7, #12]
 80130bc:	60b9      	str	r1, [r7, #8]
 80130be:	607a      	str	r2, [r7, #4]
 80130c0:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80130c2:	4b5f      	ldr	r3, [pc, #380]	; (8013240 <dhcp_recv+0x18c>)
 80130c4:	685b      	ldr	r3, [r3, #4]
 80130c6:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80130c8:	6a3b      	ldr	r3, [r7, #32]
 80130ca:	6a1b      	ldr	r3, [r3, #32]
 80130cc:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	685b      	ldr	r3, [r3, #4]
 80130d2:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80130d4:	69fb      	ldr	r3, [r7, #28]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	f000 809d 	beq.w	8013216 <dhcp_recv+0x162>
 80130dc:	69fb      	ldr	r3, [r7, #28]
 80130de:	791b      	ldrb	r3, [r3, #4]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	f000 8098 	beq.w	8013216 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	895b      	ldrh	r3, [r3, #10]
 80130ea:	2b2b      	cmp	r3, #43	; 0x2b
 80130ec:	f240 8095 	bls.w	801321a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80130f0:	69bb      	ldr	r3, [r7, #24]
 80130f2:	781b      	ldrb	r3, [r3, #0]
 80130f4:	2b02      	cmp	r3, #2
 80130f6:	f040 8092 	bne.w	801321e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80130fa:	2300      	movs	r3, #0
 80130fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013100:	e012      	b.n	8013128 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8013102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013106:	6a3a      	ldr	r2, [r7, #32]
 8013108:	4413      	add	r3, r2
 801310a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 801310e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013112:	69b9      	ldr	r1, [r7, #24]
 8013114:	440b      	add	r3, r1
 8013116:	7f1b      	ldrb	r3, [r3, #28]
 8013118:	429a      	cmp	r2, r3
 801311a:	f040 8082 	bne.w	8013222 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801311e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013122:	3301      	adds	r3, #1
 8013124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013128:	6a3b      	ldr	r3, [r7, #32]
 801312a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801312e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013132:	429a      	cmp	r2, r3
 8013134:	d203      	bcs.n	801313e <dhcp_recv+0x8a>
 8013136:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801313a:	2b05      	cmp	r3, #5
 801313c:	d9e1      	bls.n	8013102 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801313e:	69bb      	ldr	r3, [r7, #24]
 8013140:	685b      	ldr	r3, [r3, #4]
 8013142:	4618      	mov	r0, r3
 8013144:	f7f6 fe74 	bl	8009e30 <lwip_htonl>
 8013148:	4602      	mov	r2, r0
 801314a:	69fb      	ldr	r3, [r7, #28]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	429a      	cmp	r2, r3
 8013150:	d169      	bne.n	8013226 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8013152:	69f9      	ldr	r1, [r7, #28]
 8013154:	6878      	ldr	r0, [r7, #4]
 8013156:	f7ff fcd9 	bl	8012b0c <dhcp_parse_reply>
 801315a:	4603      	mov	r3, r0
 801315c:	2b00      	cmp	r3, #0
 801315e:	d164      	bne.n	801322a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8013160:	4b38      	ldr	r3, [pc, #224]	; (8013244 <dhcp_recv+0x190>)
 8013162:	785b      	ldrb	r3, [r3, #1]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d062      	beq.n	801322e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	685b      	ldr	r3, [r3, #4]
 801316c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801316e:	4b36      	ldr	r3, [pc, #216]	; (8013248 <dhcp_recv+0x194>)
 8013170:	685b      	ldr	r3, [r3, #4]
 8013172:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8013174:	7cfb      	ldrb	r3, [r7, #19]
 8013176:	2b05      	cmp	r3, #5
 8013178:	d12a      	bne.n	80131d0 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801317a:	69fb      	ldr	r3, [r7, #28]
 801317c:	795b      	ldrb	r3, [r3, #5]
 801317e:	2b01      	cmp	r3, #1
 8013180:	d112      	bne.n	80131a8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8013182:	6979      	ldr	r1, [r7, #20]
 8013184:	6a38      	ldr	r0, [r7, #32]
 8013186:	f7fe fe53 	bl	8011e30 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801318a:	6a3b      	ldr	r3, [r7, #32]
 801318c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013190:	f003 0308 	and.w	r3, r3, #8
 8013194:	2b00      	cmp	r3, #0
 8013196:	d003      	beq.n	80131a0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8013198:	6a38      	ldr	r0, [r7, #32]
 801319a:	f7fe fbc3 	bl	8011924 <dhcp_check>
 801319e:	e047      	b.n	8013230 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80131a0:	6a38      	ldr	r0, [r7, #32]
 80131a2:	f7ff f867 	bl	8012274 <dhcp_bind>
 80131a6:	e043      	b.n	8013230 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80131a8:	69fb      	ldr	r3, [r7, #28]
 80131aa:	795b      	ldrb	r3, [r3, #5]
 80131ac:	2b03      	cmp	r3, #3
 80131ae:	d007      	beq.n	80131c0 <dhcp_recv+0x10c>
 80131b0:	69fb      	ldr	r3, [r7, #28]
 80131b2:	795b      	ldrb	r3, [r3, #5]
 80131b4:	2b04      	cmp	r3, #4
 80131b6:	d003      	beq.n	80131c0 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80131b8:	69fb      	ldr	r3, [r7, #28]
 80131ba:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80131bc:	2b05      	cmp	r3, #5
 80131be:	d137      	bne.n	8013230 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 80131c0:	6979      	ldr	r1, [r7, #20]
 80131c2:	6a38      	ldr	r0, [r7, #32]
 80131c4:	f7fe fe34 	bl	8011e30 <dhcp_handle_ack>
      dhcp_bind(netif);
 80131c8:	6a38      	ldr	r0, [r7, #32]
 80131ca:	f7ff f853 	bl	8012274 <dhcp_bind>
 80131ce:	e02f      	b.n	8013230 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80131d0:	7cfb      	ldrb	r3, [r7, #19]
 80131d2:	2b06      	cmp	r3, #6
 80131d4:	d113      	bne.n	80131fe <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80131d6:	69fb      	ldr	r3, [r7, #28]
 80131d8:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80131da:	2b03      	cmp	r3, #3
 80131dc:	d00b      	beq.n	80131f6 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80131de:	69fb      	ldr	r3, [r7, #28]
 80131e0:	795b      	ldrb	r3, [r3, #5]
 80131e2:	2b01      	cmp	r3, #1
 80131e4:	d007      	beq.n	80131f6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80131e6:	69fb      	ldr	r3, [r7, #28]
 80131e8:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80131ea:	2b04      	cmp	r3, #4
 80131ec:	d003      	beq.n	80131f6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80131ee:	69fb      	ldr	r3, [r7, #28]
 80131f0:	795b      	ldrb	r3, [r3, #5]
 80131f2:	2b05      	cmp	r3, #5
 80131f4:	d103      	bne.n	80131fe <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80131f6:	6a38      	ldr	r0, [r7, #32]
 80131f8:	f7fe fb7a 	bl	80118f0 <dhcp_handle_nak>
 80131fc:	e018      	b.n	8013230 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80131fe:	7cfb      	ldrb	r3, [r7, #19]
 8013200:	2b02      	cmp	r3, #2
 8013202:	d108      	bne.n	8013216 <dhcp_recv+0x162>
 8013204:	69fb      	ldr	r3, [r7, #28]
 8013206:	795b      	ldrb	r3, [r3, #5]
 8013208:	2b06      	cmp	r3, #6
 801320a:	d104      	bne.n	8013216 <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801320c:	6979      	ldr	r1, [r7, #20]
 801320e:	6a38      	ldr	r0, [r7, #32]
 8013210:	f7fe fbbc 	bl	801198c <dhcp_handle_offer>
 8013214:	e00c      	b.n	8013230 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 8013216:	bf00      	nop
 8013218:	e00a      	b.n	8013230 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801321a:	bf00      	nop
 801321c:	e008      	b.n	8013230 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801321e:	bf00      	nop
 8013220:	e006      	b.n	8013230 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 8013222:	bf00      	nop
 8013224:	e004      	b.n	8013230 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8013226:	bf00      	nop
 8013228:	e002      	b.n	8013230 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801322a:	bf00      	nop
 801322c:	e000      	b.n	8013230 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801322e:	bf00      	nop
  pbuf_free(p);
 8013230:	6878      	ldr	r0, [r7, #4]
 8013232:	f7f8 f889 	bl	800b348 <pbuf_free>
}
 8013236:	bf00      	nop
 8013238:	3728      	adds	r7, #40	; 0x28
 801323a:	46bd      	mov	sp, r7
 801323c:	bd80      	pop	{r7, pc}
 801323e:	bf00      	nop
 8013240:	20004190 	.word	0x20004190
 8013244:	20007710 	.word	0x20007710
 8013248:	20007718 	.word	0x20007718

0801324c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801324c:	b580      	push	{r7, lr}
 801324e:	b088      	sub	sp, #32
 8013250:	af00      	add	r7, sp, #0
 8013252:	60f8      	str	r0, [r7, #12]
 8013254:	60b9      	str	r1, [r7, #8]
 8013256:	603b      	str	r3, [r7, #0]
 8013258:	4613      	mov	r3, r2
 801325a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d108      	bne.n	8013274 <dhcp_create_msg+0x28>
 8013262:	4b5f      	ldr	r3, [pc, #380]	; (80133e0 <dhcp_create_msg+0x194>)
 8013264:	f240 7269 	movw	r2, #1897	; 0x769
 8013268:	495e      	ldr	r1, [pc, #376]	; (80133e4 <dhcp_create_msg+0x198>)
 801326a:	485f      	ldr	r0, [pc, #380]	; (80133e8 <dhcp_create_msg+0x19c>)
 801326c:	f002 fcf2 	bl	8015c54 <iprintf>
 8013270:	2300      	movs	r3, #0
 8013272:	e0b1      	b.n	80133d8 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8013274:	68bb      	ldr	r3, [r7, #8]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d108      	bne.n	801328c <dhcp_create_msg+0x40>
 801327a:	4b59      	ldr	r3, [pc, #356]	; (80133e0 <dhcp_create_msg+0x194>)
 801327c:	f240 726a 	movw	r2, #1898	; 0x76a
 8013280:	495a      	ldr	r1, [pc, #360]	; (80133ec <dhcp_create_msg+0x1a0>)
 8013282:	4859      	ldr	r0, [pc, #356]	; (80133e8 <dhcp_create_msg+0x19c>)
 8013284:	f002 fce6 	bl	8015c54 <iprintf>
 8013288:	2300      	movs	r3, #0
 801328a:	e0a5      	b.n	80133d8 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801328c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013290:	f44f 719a 	mov.w	r1, #308	; 0x134
 8013294:	2036      	movs	r0, #54	; 0x36
 8013296:	f7f7 fd77 	bl	800ad88 <pbuf_alloc>
 801329a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801329c:	69bb      	ldr	r3, [r7, #24]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d101      	bne.n	80132a6 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80132a2:	2300      	movs	r3, #0
 80132a4:	e098      	b.n	80133d8 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80132a6:	69bb      	ldr	r3, [r7, #24]
 80132a8:	895b      	ldrh	r3, [r3, #10]
 80132aa:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80132ae:	d206      	bcs.n	80132be <dhcp_create_msg+0x72>
 80132b0:	4b4b      	ldr	r3, [pc, #300]	; (80133e0 <dhcp_create_msg+0x194>)
 80132b2:	f240 7272 	movw	r2, #1906	; 0x772
 80132b6:	494e      	ldr	r1, [pc, #312]	; (80133f0 <dhcp_create_msg+0x1a4>)
 80132b8:	484b      	ldr	r0, [pc, #300]	; (80133e8 <dhcp_create_msg+0x19c>)
 80132ba:	f002 fccb 	bl	8015c54 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80132be:	79fb      	ldrb	r3, [r7, #7]
 80132c0:	2b03      	cmp	r3, #3
 80132c2:	d103      	bne.n	80132cc <dhcp_create_msg+0x80>
 80132c4:	68bb      	ldr	r3, [r7, #8]
 80132c6:	795b      	ldrb	r3, [r3, #5]
 80132c8:	2b03      	cmp	r3, #3
 80132ca:	d10d      	bne.n	80132e8 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80132cc:	68bb      	ldr	r3, [r7, #8]
 80132ce:	799b      	ldrb	r3, [r3, #6]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d105      	bne.n	80132e0 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80132d4:	f002 fcd6 	bl	8015c84 <rand>
 80132d8:	4603      	mov	r3, r0
 80132da:	461a      	mov	r2, r3
 80132dc:	4b45      	ldr	r3, [pc, #276]	; (80133f4 <dhcp_create_msg+0x1a8>)
 80132de:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80132e0:	4b44      	ldr	r3, [pc, #272]	; (80133f4 <dhcp_create_msg+0x1a8>)
 80132e2:	681a      	ldr	r2, [r3, #0]
 80132e4:	68bb      	ldr	r3, [r7, #8]
 80132e6:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80132e8:	69bb      	ldr	r3, [r7, #24]
 80132ea:	685b      	ldr	r3, [r3, #4]
 80132ec:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80132ee:	f44f 729a 	mov.w	r2, #308	; 0x134
 80132f2:	2100      	movs	r1, #0
 80132f4:	6978      	ldr	r0, [r7, #20]
 80132f6:	f002 fbfd 	bl	8015af4 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80132fa:	697b      	ldr	r3, [r7, #20]
 80132fc:	2201      	movs	r2, #1
 80132fe:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8013300:	697b      	ldr	r3, [r7, #20]
 8013302:	2201      	movs	r2, #1
 8013304:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801330c:	697b      	ldr	r3, [r7, #20]
 801330e:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8013310:	68bb      	ldr	r3, [r7, #8]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	4618      	mov	r0, r3
 8013316:	f7f6 fd8b 	bl	8009e30 <lwip_htonl>
 801331a:	4602      	mov	r2, r0
 801331c:	697b      	ldr	r3, [r7, #20]
 801331e:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8013320:	79fb      	ldrb	r3, [r7, #7]
 8013322:	2b08      	cmp	r3, #8
 8013324:	d010      	beq.n	8013348 <dhcp_create_msg+0xfc>
 8013326:	79fb      	ldrb	r3, [r7, #7]
 8013328:	2b04      	cmp	r3, #4
 801332a:	d00d      	beq.n	8013348 <dhcp_create_msg+0xfc>
 801332c:	79fb      	ldrb	r3, [r7, #7]
 801332e:	2b07      	cmp	r3, #7
 8013330:	d00a      	beq.n	8013348 <dhcp_create_msg+0xfc>
 8013332:	79fb      	ldrb	r3, [r7, #7]
 8013334:	2b03      	cmp	r3, #3
 8013336:	d10c      	bne.n	8013352 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8013338:	68bb      	ldr	r3, [r7, #8]
 801333a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801333c:	2b05      	cmp	r3, #5
 801333e:	d003      	beq.n	8013348 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8013340:	68bb      	ldr	r3, [r7, #8]
 8013342:	795b      	ldrb	r3, [r3, #5]
 8013344:	2b04      	cmp	r3, #4
 8013346:	d104      	bne.n	8013352 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	3304      	adds	r3, #4
 801334c:	681a      	ldr	r2, [r3, #0]
 801334e:	697b      	ldr	r3, [r7, #20]
 8013350:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013352:	2300      	movs	r3, #0
 8013354:	83fb      	strh	r3, [r7, #30]
 8013356:	e00c      	b.n	8013372 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8013358:	8bfa      	ldrh	r2, [r7, #30]
 801335a:	8bfb      	ldrh	r3, [r7, #30]
 801335c:	68f9      	ldr	r1, [r7, #12]
 801335e:	440a      	add	r2, r1
 8013360:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
 8013364:	697a      	ldr	r2, [r7, #20]
 8013366:	4413      	add	r3, r2
 8013368:	460a      	mov	r2, r1
 801336a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801336c:	8bfb      	ldrh	r3, [r7, #30]
 801336e:	3301      	adds	r3, #1
 8013370:	83fb      	strh	r3, [r7, #30]
 8013372:	8bfb      	ldrh	r3, [r7, #30]
 8013374:	2b05      	cmp	r3, #5
 8013376:	d9ef      	bls.n	8013358 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8013378:	697b      	ldr	r3, [r7, #20]
 801337a:	2200      	movs	r2, #0
 801337c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8013380:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8013384:	2200      	movs	r2, #0
 8013386:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801338a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801338e:	2200      	movs	r2, #0
 8013390:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8013394:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8013398:	2200      	movs	r2, #0
 801339a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801339e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80133a2:	697b      	ldr	r3, [r7, #20]
 80133a4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80133a8:	2301      	movs	r3, #1
 80133aa:	2235      	movs	r2, #53	; 0x35
 80133ac:	2000      	movs	r0, #0
 80133ae:	f7ff fadd 	bl	801296c <dhcp_option>
 80133b2:	4603      	mov	r3, r0
 80133b4:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80133b6:	697b      	ldr	r3, [r7, #20]
 80133b8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80133bc:	79fa      	ldrb	r2, [r7, #7]
 80133be:	8a7b      	ldrh	r3, [r7, #18]
 80133c0:	4618      	mov	r0, r3
 80133c2:	f7ff fb07 	bl	80129d4 <dhcp_option_byte>
 80133c6:	4603      	mov	r3, r0
 80133c8:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80133ca:	683b      	ldr	r3, [r7, #0]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d002      	beq.n	80133d6 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80133d0:	683b      	ldr	r3, [r7, #0]
 80133d2:	8a7a      	ldrh	r2, [r7, #18]
 80133d4:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80133d6:	69bb      	ldr	r3, [r7, #24]
}
 80133d8:	4618      	mov	r0, r3
 80133da:	3720      	adds	r7, #32
 80133dc:	46bd      	mov	sp, r7
 80133de:	bd80      	pop	{r7, pc}
 80133e0:	08018d20 	.word	0x08018d20
 80133e4:	08019040 	.word	0x08019040
 80133e8:	08018d80 	.word	0x08018d80
 80133ec:	08019060 	.word	0x08019060
 80133f0:	08019080 	.word	0x08019080
 80133f4:	2000049c 	.word	0x2000049c

080133f8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80133f8:	b580      	push	{r7, lr}
 80133fa:	b084      	sub	sp, #16
 80133fc:	af00      	add	r7, sp, #0
 80133fe:	4603      	mov	r3, r0
 8013400:	60b9      	str	r1, [r7, #8]
 8013402:	607a      	str	r2, [r7, #4]
 8013404:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8013406:	89fb      	ldrh	r3, [r7, #14]
 8013408:	1c5a      	adds	r2, r3, #1
 801340a:	81fa      	strh	r2, [r7, #14]
 801340c:	461a      	mov	r2, r3
 801340e:	68bb      	ldr	r3, [r7, #8]
 8013410:	4413      	add	r3, r2
 8013412:	22ff      	movs	r2, #255	; 0xff
 8013414:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8013416:	e007      	b.n	8013428 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8013418:	89fb      	ldrh	r3, [r7, #14]
 801341a:	1c5a      	adds	r2, r3, #1
 801341c:	81fa      	strh	r2, [r7, #14]
 801341e:	461a      	mov	r2, r3
 8013420:	68bb      	ldr	r3, [r7, #8]
 8013422:	4413      	add	r3, r2
 8013424:	2200      	movs	r2, #0
 8013426:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8013428:	89fb      	ldrh	r3, [r7, #14]
 801342a:	2b43      	cmp	r3, #67	; 0x43
 801342c:	d904      	bls.n	8013438 <dhcp_option_trailer+0x40>
 801342e:	89fb      	ldrh	r3, [r7, #14]
 8013430:	f003 0303 	and.w	r3, r3, #3
 8013434:	2b00      	cmp	r3, #0
 8013436:	d002      	beq.n	801343e <dhcp_option_trailer+0x46>
 8013438:	89fb      	ldrh	r3, [r7, #14]
 801343a:	2b43      	cmp	r3, #67	; 0x43
 801343c:	d9ec      	bls.n	8013418 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801343e:	89fb      	ldrh	r3, [r7, #14]
 8013440:	33f0      	adds	r3, #240	; 0xf0
 8013442:	b29b      	uxth	r3, r3
 8013444:	4619      	mov	r1, r3
 8013446:	6878      	ldr	r0, [r7, #4]
 8013448:	f7f7 fdf8 	bl	800b03c <pbuf_realloc>
}
 801344c:	bf00      	nop
 801344e:	3710      	adds	r7, #16
 8013450:	46bd      	mov	sp, r7
 8013452:	bd80      	pop	{r7, pc}

08013454 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8013454:	b480      	push	{r7}
 8013456:	b085      	sub	sp, #20
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d017      	beq.n	8013492 <dhcp_supplied_address+0x3e>
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	6a1b      	ldr	r3, [r3, #32]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d013      	beq.n	8013492 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	6a1b      	ldr	r3, [r3, #32]
 801346e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	795b      	ldrb	r3, [r3, #5]
 8013474:	2b0a      	cmp	r3, #10
 8013476:	d007      	beq.n	8013488 <dhcp_supplied_address+0x34>
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	795b      	ldrb	r3, [r3, #5]
 801347c:	2b05      	cmp	r3, #5
 801347e:	d003      	beq.n	8013488 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8013484:	2b04      	cmp	r3, #4
 8013486:	d101      	bne.n	801348c <dhcp_supplied_address+0x38>
 8013488:	2301      	movs	r3, #1
 801348a:	e000      	b.n	801348e <dhcp_supplied_address+0x3a>
 801348c:	2300      	movs	r3, #0
 801348e:	b2db      	uxtb	r3, r3
 8013490:	e000      	b.n	8013494 <dhcp_supplied_address+0x40>
  }
  return 0;
 8013492:	2300      	movs	r3, #0
}
 8013494:	4618      	mov	r0, r3
 8013496:	3714      	adds	r7, #20
 8013498:	46bd      	mov	sp, r7
 801349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349e:	4770      	bx	lr

080134a0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b082      	sub	sp, #8
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80134a8:	4915      	ldr	r1, [pc, #84]	; (8013500 <etharp_free_entry+0x60>)
 80134aa:	687a      	ldr	r2, [r7, #4]
 80134ac:	4613      	mov	r3, r2
 80134ae:	005b      	lsls	r3, r3, #1
 80134b0:	4413      	add	r3, r2
 80134b2:	00db      	lsls	r3, r3, #3
 80134b4:	440b      	add	r3, r1
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d013      	beq.n	80134e4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80134bc:	4910      	ldr	r1, [pc, #64]	; (8013500 <etharp_free_entry+0x60>)
 80134be:	687a      	ldr	r2, [r7, #4]
 80134c0:	4613      	mov	r3, r2
 80134c2:	005b      	lsls	r3, r3, #1
 80134c4:	4413      	add	r3, r2
 80134c6:	00db      	lsls	r3, r3, #3
 80134c8:	440b      	add	r3, r1
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	4618      	mov	r0, r3
 80134ce:	f7f7 ff3b 	bl	800b348 <pbuf_free>
    arp_table[i].q = NULL;
 80134d2:	490b      	ldr	r1, [pc, #44]	; (8013500 <etharp_free_entry+0x60>)
 80134d4:	687a      	ldr	r2, [r7, #4]
 80134d6:	4613      	mov	r3, r2
 80134d8:	005b      	lsls	r3, r3, #1
 80134da:	4413      	add	r3, r2
 80134dc:	00db      	lsls	r3, r3, #3
 80134de:	440b      	add	r3, r1
 80134e0:	2200      	movs	r2, #0
 80134e2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80134e4:	4906      	ldr	r1, [pc, #24]	; (8013500 <etharp_free_entry+0x60>)
 80134e6:	687a      	ldr	r2, [r7, #4]
 80134e8:	4613      	mov	r3, r2
 80134ea:	005b      	lsls	r3, r3, #1
 80134ec:	4413      	add	r3, r2
 80134ee:	00db      	lsls	r3, r3, #3
 80134f0:	440b      	add	r3, r1
 80134f2:	3314      	adds	r3, #20
 80134f4:	2200      	movs	r2, #0
 80134f6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80134f8:	bf00      	nop
 80134fa:	3708      	adds	r7, #8
 80134fc:	46bd      	mov	sp, r7
 80134fe:	bd80      	pop	{r7, pc}
 8013500:	200004a0 	.word	0x200004a0

08013504 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013504:	b580      	push	{r7, lr}
 8013506:	b082      	sub	sp, #8
 8013508:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801350a:	2300      	movs	r3, #0
 801350c:	607b      	str	r3, [r7, #4]
 801350e:	e096      	b.n	801363e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013510:	494f      	ldr	r1, [pc, #316]	; (8013650 <etharp_tmr+0x14c>)
 8013512:	687a      	ldr	r2, [r7, #4]
 8013514:	4613      	mov	r3, r2
 8013516:	005b      	lsls	r3, r3, #1
 8013518:	4413      	add	r3, r2
 801351a:	00db      	lsls	r3, r3, #3
 801351c:	440b      	add	r3, r1
 801351e:	3314      	adds	r3, #20
 8013520:	781b      	ldrb	r3, [r3, #0]
 8013522:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013524:	78fb      	ldrb	r3, [r7, #3]
 8013526:	2b00      	cmp	r3, #0
 8013528:	f000 8086 	beq.w	8013638 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801352c:	4948      	ldr	r1, [pc, #288]	; (8013650 <etharp_tmr+0x14c>)
 801352e:	687a      	ldr	r2, [r7, #4]
 8013530:	4613      	mov	r3, r2
 8013532:	005b      	lsls	r3, r3, #1
 8013534:	4413      	add	r3, r2
 8013536:	00db      	lsls	r3, r3, #3
 8013538:	440b      	add	r3, r1
 801353a:	3312      	adds	r3, #18
 801353c:	881b      	ldrh	r3, [r3, #0]
 801353e:	3301      	adds	r3, #1
 8013540:	b298      	uxth	r0, r3
 8013542:	4943      	ldr	r1, [pc, #268]	; (8013650 <etharp_tmr+0x14c>)
 8013544:	687a      	ldr	r2, [r7, #4]
 8013546:	4613      	mov	r3, r2
 8013548:	005b      	lsls	r3, r3, #1
 801354a:	4413      	add	r3, r2
 801354c:	00db      	lsls	r3, r3, #3
 801354e:	440b      	add	r3, r1
 8013550:	3312      	adds	r3, #18
 8013552:	4602      	mov	r2, r0
 8013554:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013556:	493e      	ldr	r1, [pc, #248]	; (8013650 <etharp_tmr+0x14c>)
 8013558:	687a      	ldr	r2, [r7, #4]
 801355a:	4613      	mov	r3, r2
 801355c:	005b      	lsls	r3, r3, #1
 801355e:	4413      	add	r3, r2
 8013560:	00db      	lsls	r3, r3, #3
 8013562:	440b      	add	r3, r1
 8013564:	3312      	adds	r3, #18
 8013566:	881b      	ldrh	r3, [r3, #0]
 8013568:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801356c:	d215      	bcs.n	801359a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801356e:	4938      	ldr	r1, [pc, #224]	; (8013650 <etharp_tmr+0x14c>)
 8013570:	687a      	ldr	r2, [r7, #4]
 8013572:	4613      	mov	r3, r2
 8013574:	005b      	lsls	r3, r3, #1
 8013576:	4413      	add	r3, r2
 8013578:	00db      	lsls	r3, r3, #3
 801357a:	440b      	add	r3, r1
 801357c:	3314      	adds	r3, #20
 801357e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013580:	2b01      	cmp	r3, #1
 8013582:	d10e      	bne.n	80135a2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013584:	4932      	ldr	r1, [pc, #200]	; (8013650 <etharp_tmr+0x14c>)
 8013586:	687a      	ldr	r2, [r7, #4]
 8013588:	4613      	mov	r3, r2
 801358a:	005b      	lsls	r3, r3, #1
 801358c:	4413      	add	r3, r2
 801358e:	00db      	lsls	r3, r3, #3
 8013590:	440b      	add	r3, r1
 8013592:	3312      	adds	r3, #18
 8013594:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013596:	2b04      	cmp	r3, #4
 8013598:	d903      	bls.n	80135a2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801359a:	6878      	ldr	r0, [r7, #4]
 801359c:	f7ff ff80 	bl	80134a0 <etharp_free_entry>
 80135a0:	e04a      	b.n	8013638 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80135a2:	492b      	ldr	r1, [pc, #172]	; (8013650 <etharp_tmr+0x14c>)
 80135a4:	687a      	ldr	r2, [r7, #4]
 80135a6:	4613      	mov	r3, r2
 80135a8:	005b      	lsls	r3, r3, #1
 80135aa:	4413      	add	r3, r2
 80135ac:	00db      	lsls	r3, r3, #3
 80135ae:	440b      	add	r3, r1
 80135b0:	3314      	adds	r3, #20
 80135b2:	781b      	ldrb	r3, [r3, #0]
 80135b4:	2b03      	cmp	r3, #3
 80135b6:	d10a      	bne.n	80135ce <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80135b8:	4925      	ldr	r1, [pc, #148]	; (8013650 <etharp_tmr+0x14c>)
 80135ba:	687a      	ldr	r2, [r7, #4]
 80135bc:	4613      	mov	r3, r2
 80135be:	005b      	lsls	r3, r3, #1
 80135c0:	4413      	add	r3, r2
 80135c2:	00db      	lsls	r3, r3, #3
 80135c4:	440b      	add	r3, r1
 80135c6:	3314      	adds	r3, #20
 80135c8:	2204      	movs	r2, #4
 80135ca:	701a      	strb	r2, [r3, #0]
 80135cc:	e034      	b.n	8013638 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80135ce:	4920      	ldr	r1, [pc, #128]	; (8013650 <etharp_tmr+0x14c>)
 80135d0:	687a      	ldr	r2, [r7, #4]
 80135d2:	4613      	mov	r3, r2
 80135d4:	005b      	lsls	r3, r3, #1
 80135d6:	4413      	add	r3, r2
 80135d8:	00db      	lsls	r3, r3, #3
 80135da:	440b      	add	r3, r1
 80135dc:	3314      	adds	r3, #20
 80135de:	781b      	ldrb	r3, [r3, #0]
 80135e0:	2b04      	cmp	r3, #4
 80135e2:	d10a      	bne.n	80135fa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80135e4:	491a      	ldr	r1, [pc, #104]	; (8013650 <etharp_tmr+0x14c>)
 80135e6:	687a      	ldr	r2, [r7, #4]
 80135e8:	4613      	mov	r3, r2
 80135ea:	005b      	lsls	r3, r3, #1
 80135ec:	4413      	add	r3, r2
 80135ee:	00db      	lsls	r3, r3, #3
 80135f0:	440b      	add	r3, r1
 80135f2:	3314      	adds	r3, #20
 80135f4:	2202      	movs	r2, #2
 80135f6:	701a      	strb	r2, [r3, #0]
 80135f8:	e01e      	b.n	8013638 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80135fa:	4915      	ldr	r1, [pc, #84]	; (8013650 <etharp_tmr+0x14c>)
 80135fc:	687a      	ldr	r2, [r7, #4]
 80135fe:	4613      	mov	r3, r2
 8013600:	005b      	lsls	r3, r3, #1
 8013602:	4413      	add	r3, r2
 8013604:	00db      	lsls	r3, r3, #3
 8013606:	440b      	add	r3, r1
 8013608:	3314      	adds	r3, #20
 801360a:	781b      	ldrb	r3, [r3, #0]
 801360c:	2b01      	cmp	r3, #1
 801360e:	d113      	bne.n	8013638 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013610:	490f      	ldr	r1, [pc, #60]	; (8013650 <etharp_tmr+0x14c>)
 8013612:	687a      	ldr	r2, [r7, #4]
 8013614:	4613      	mov	r3, r2
 8013616:	005b      	lsls	r3, r3, #1
 8013618:	4413      	add	r3, r2
 801361a:	00db      	lsls	r3, r3, #3
 801361c:	440b      	add	r3, r1
 801361e:	3308      	adds	r3, #8
 8013620:	6818      	ldr	r0, [r3, #0]
 8013622:	687a      	ldr	r2, [r7, #4]
 8013624:	4613      	mov	r3, r2
 8013626:	005b      	lsls	r3, r3, #1
 8013628:	4413      	add	r3, r2
 801362a:	00db      	lsls	r3, r3, #3
 801362c:	4a08      	ldr	r2, [pc, #32]	; (8013650 <etharp_tmr+0x14c>)
 801362e:	4413      	add	r3, r2
 8013630:	3304      	adds	r3, #4
 8013632:	4619      	mov	r1, r3
 8013634:	f000 fe72 	bl	801431c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	3301      	adds	r3, #1
 801363c:	607b      	str	r3, [r7, #4]
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	2b09      	cmp	r3, #9
 8013642:	f77f af65 	ble.w	8013510 <etharp_tmr+0xc>
      }
    }
  }
}
 8013646:	bf00      	nop
 8013648:	3708      	adds	r7, #8
 801364a:	46bd      	mov	sp, r7
 801364c:	bd80      	pop	{r7, pc}
 801364e:	bf00      	nop
 8013650:	200004a0 	.word	0x200004a0

08013654 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b08a      	sub	sp, #40	; 0x28
 8013658:	af00      	add	r7, sp, #0
 801365a:	60f8      	str	r0, [r7, #12]
 801365c:	460b      	mov	r3, r1
 801365e:	607a      	str	r2, [r7, #4]
 8013660:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013662:	230a      	movs	r3, #10
 8013664:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013666:	230a      	movs	r3, #10
 8013668:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801366a:	230a      	movs	r3, #10
 801366c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801366e:	2300      	movs	r3, #0
 8013670:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013672:	230a      	movs	r3, #10
 8013674:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013676:	2300      	movs	r3, #0
 8013678:	83bb      	strh	r3, [r7, #28]
 801367a:	2300      	movs	r3, #0
 801367c:	837b      	strh	r3, [r7, #26]
 801367e:	2300      	movs	r3, #0
 8013680:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013682:	2300      	movs	r3, #0
 8013684:	843b      	strh	r3, [r7, #32]
 8013686:	e0ae      	b.n	80137e6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013688:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801368c:	49a6      	ldr	r1, [pc, #664]	; (8013928 <etharp_find_entry+0x2d4>)
 801368e:	4613      	mov	r3, r2
 8013690:	005b      	lsls	r3, r3, #1
 8013692:	4413      	add	r3, r2
 8013694:	00db      	lsls	r3, r3, #3
 8013696:	440b      	add	r3, r1
 8013698:	3314      	adds	r3, #20
 801369a:	781b      	ldrb	r3, [r3, #0]
 801369c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801369e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80136a2:	2b0a      	cmp	r3, #10
 80136a4:	d105      	bne.n	80136b2 <etharp_find_entry+0x5e>
 80136a6:	7dfb      	ldrb	r3, [r7, #23]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d102      	bne.n	80136b2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80136ac:	8c3b      	ldrh	r3, [r7, #32]
 80136ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80136b0:	e095      	b.n	80137de <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80136b2:	7dfb      	ldrb	r3, [r7, #23]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	f000 8092 	beq.w	80137de <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80136ba:	7dfb      	ldrb	r3, [r7, #23]
 80136bc:	2b01      	cmp	r3, #1
 80136be:	d009      	beq.n	80136d4 <etharp_find_entry+0x80>
 80136c0:	7dfb      	ldrb	r3, [r7, #23]
 80136c2:	2b01      	cmp	r3, #1
 80136c4:	d806      	bhi.n	80136d4 <etharp_find_entry+0x80>
 80136c6:	4b99      	ldr	r3, [pc, #612]	; (801392c <etharp_find_entry+0x2d8>)
 80136c8:	f44f 7292 	mov.w	r2, #292	; 0x124
 80136cc:	4998      	ldr	r1, [pc, #608]	; (8013930 <etharp_find_entry+0x2dc>)
 80136ce:	4899      	ldr	r0, [pc, #612]	; (8013934 <etharp_find_entry+0x2e0>)
 80136d0:	f002 fac0 	bl	8015c54 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d020      	beq.n	801371c <etharp_find_entry+0xc8>
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	6819      	ldr	r1, [r3, #0]
 80136de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80136e2:	4891      	ldr	r0, [pc, #580]	; (8013928 <etharp_find_entry+0x2d4>)
 80136e4:	4613      	mov	r3, r2
 80136e6:	005b      	lsls	r3, r3, #1
 80136e8:	4413      	add	r3, r2
 80136ea:	00db      	lsls	r3, r3, #3
 80136ec:	4403      	add	r3, r0
 80136ee:	3304      	adds	r3, #4
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	4299      	cmp	r1, r3
 80136f4:	d112      	bne.n	801371c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d00c      	beq.n	8013716 <etharp_find_entry+0xc2>
 80136fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013700:	4989      	ldr	r1, [pc, #548]	; (8013928 <etharp_find_entry+0x2d4>)
 8013702:	4613      	mov	r3, r2
 8013704:	005b      	lsls	r3, r3, #1
 8013706:	4413      	add	r3, r2
 8013708:	00db      	lsls	r3, r3, #3
 801370a:	440b      	add	r3, r1
 801370c:	3308      	adds	r3, #8
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	687a      	ldr	r2, [r7, #4]
 8013712:	429a      	cmp	r2, r3
 8013714:	d102      	bne.n	801371c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013716:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801371a:	e100      	b.n	801391e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801371c:	7dfb      	ldrb	r3, [r7, #23]
 801371e:	2b01      	cmp	r3, #1
 8013720:	d140      	bne.n	80137a4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013722:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013726:	4980      	ldr	r1, [pc, #512]	; (8013928 <etharp_find_entry+0x2d4>)
 8013728:	4613      	mov	r3, r2
 801372a:	005b      	lsls	r3, r3, #1
 801372c:	4413      	add	r3, r2
 801372e:	00db      	lsls	r3, r3, #3
 8013730:	440b      	add	r3, r1
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d01a      	beq.n	801376e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013738:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801373c:	497a      	ldr	r1, [pc, #488]	; (8013928 <etharp_find_entry+0x2d4>)
 801373e:	4613      	mov	r3, r2
 8013740:	005b      	lsls	r3, r3, #1
 8013742:	4413      	add	r3, r2
 8013744:	00db      	lsls	r3, r3, #3
 8013746:	440b      	add	r3, r1
 8013748:	3312      	adds	r3, #18
 801374a:	881b      	ldrh	r3, [r3, #0]
 801374c:	8bba      	ldrh	r2, [r7, #28]
 801374e:	429a      	cmp	r2, r3
 8013750:	d845      	bhi.n	80137de <etharp_find_entry+0x18a>
            old_queue = i;
 8013752:	8c3b      	ldrh	r3, [r7, #32]
 8013754:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013756:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801375a:	4973      	ldr	r1, [pc, #460]	; (8013928 <etharp_find_entry+0x2d4>)
 801375c:	4613      	mov	r3, r2
 801375e:	005b      	lsls	r3, r3, #1
 8013760:	4413      	add	r3, r2
 8013762:	00db      	lsls	r3, r3, #3
 8013764:	440b      	add	r3, r1
 8013766:	3312      	adds	r3, #18
 8013768:	881b      	ldrh	r3, [r3, #0]
 801376a:	83bb      	strh	r3, [r7, #28]
 801376c:	e037      	b.n	80137de <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801376e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013772:	496d      	ldr	r1, [pc, #436]	; (8013928 <etharp_find_entry+0x2d4>)
 8013774:	4613      	mov	r3, r2
 8013776:	005b      	lsls	r3, r3, #1
 8013778:	4413      	add	r3, r2
 801377a:	00db      	lsls	r3, r3, #3
 801377c:	440b      	add	r3, r1
 801377e:	3312      	adds	r3, #18
 8013780:	881b      	ldrh	r3, [r3, #0]
 8013782:	8b7a      	ldrh	r2, [r7, #26]
 8013784:	429a      	cmp	r2, r3
 8013786:	d82a      	bhi.n	80137de <etharp_find_entry+0x18a>
            old_pending = i;
 8013788:	8c3b      	ldrh	r3, [r7, #32]
 801378a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801378c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013790:	4965      	ldr	r1, [pc, #404]	; (8013928 <etharp_find_entry+0x2d4>)
 8013792:	4613      	mov	r3, r2
 8013794:	005b      	lsls	r3, r3, #1
 8013796:	4413      	add	r3, r2
 8013798:	00db      	lsls	r3, r3, #3
 801379a:	440b      	add	r3, r1
 801379c:	3312      	adds	r3, #18
 801379e:	881b      	ldrh	r3, [r3, #0]
 80137a0:	837b      	strh	r3, [r7, #26]
 80137a2:	e01c      	b.n	80137de <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80137a4:	7dfb      	ldrb	r3, [r7, #23]
 80137a6:	2b01      	cmp	r3, #1
 80137a8:	d919      	bls.n	80137de <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80137aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80137ae:	495e      	ldr	r1, [pc, #376]	; (8013928 <etharp_find_entry+0x2d4>)
 80137b0:	4613      	mov	r3, r2
 80137b2:	005b      	lsls	r3, r3, #1
 80137b4:	4413      	add	r3, r2
 80137b6:	00db      	lsls	r3, r3, #3
 80137b8:	440b      	add	r3, r1
 80137ba:	3312      	adds	r3, #18
 80137bc:	881b      	ldrh	r3, [r3, #0]
 80137be:	8b3a      	ldrh	r2, [r7, #24]
 80137c0:	429a      	cmp	r2, r3
 80137c2:	d80c      	bhi.n	80137de <etharp_find_entry+0x18a>
            old_stable = i;
 80137c4:	8c3b      	ldrh	r3, [r7, #32]
 80137c6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80137c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80137cc:	4956      	ldr	r1, [pc, #344]	; (8013928 <etharp_find_entry+0x2d4>)
 80137ce:	4613      	mov	r3, r2
 80137d0:	005b      	lsls	r3, r3, #1
 80137d2:	4413      	add	r3, r2
 80137d4:	00db      	lsls	r3, r3, #3
 80137d6:	440b      	add	r3, r1
 80137d8:	3312      	adds	r3, #18
 80137da:	881b      	ldrh	r3, [r3, #0]
 80137dc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80137de:	8c3b      	ldrh	r3, [r7, #32]
 80137e0:	3301      	adds	r3, #1
 80137e2:	b29b      	uxth	r3, r3
 80137e4:	843b      	strh	r3, [r7, #32]
 80137e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80137ea:	2b09      	cmp	r3, #9
 80137ec:	f77f af4c 	ble.w	8013688 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80137f0:	7afb      	ldrb	r3, [r7, #11]
 80137f2:	f003 0302 	and.w	r3, r3, #2
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d108      	bne.n	801380c <etharp_find_entry+0x1b8>
 80137fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80137fe:	2b0a      	cmp	r3, #10
 8013800:	d107      	bne.n	8013812 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013802:	7afb      	ldrb	r3, [r7, #11]
 8013804:	f003 0301 	and.w	r3, r3, #1
 8013808:	2b00      	cmp	r3, #0
 801380a:	d102      	bne.n	8013812 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801380c:	f04f 33ff 	mov.w	r3, #4294967295
 8013810:	e085      	b.n	801391e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013812:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013816:	2b09      	cmp	r3, #9
 8013818:	dc02      	bgt.n	8013820 <etharp_find_entry+0x1cc>
    i = empty;
 801381a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801381c:	843b      	strh	r3, [r7, #32]
 801381e:	e039      	b.n	8013894 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013820:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8013824:	2b09      	cmp	r3, #9
 8013826:	dc14      	bgt.n	8013852 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013828:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801382a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801382c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013830:	493d      	ldr	r1, [pc, #244]	; (8013928 <etharp_find_entry+0x2d4>)
 8013832:	4613      	mov	r3, r2
 8013834:	005b      	lsls	r3, r3, #1
 8013836:	4413      	add	r3, r2
 8013838:	00db      	lsls	r3, r3, #3
 801383a:	440b      	add	r3, r1
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d018      	beq.n	8013874 <etharp_find_entry+0x220>
 8013842:	4b3a      	ldr	r3, [pc, #232]	; (801392c <etharp_find_entry+0x2d8>)
 8013844:	f240 126d 	movw	r2, #365	; 0x16d
 8013848:	493b      	ldr	r1, [pc, #236]	; (8013938 <etharp_find_entry+0x2e4>)
 801384a:	483a      	ldr	r0, [pc, #232]	; (8013934 <etharp_find_entry+0x2e0>)
 801384c:	f002 fa02 	bl	8015c54 <iprintf>
 8013850:	e010      	b.n	8013874 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013852:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013856:	2b09      	cmp	r3, #9
 8013858:	dc02      	bgt.n	8013860 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801385a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801385c:	843b      	strh	r3, [r7, #32]
 801385e:	e009      	b.n	8013874 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013860:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013864:	2b09      	cmp	r3, #9
 8013866:	dc02      	bgt.n	801386e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013868:	8bfb      	ldrh	r3, [r7, #30]
 801386a:	843b      	strh	r3, [r7, #32]
 801386c:	e002      	b.n	8013874 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801386e:	f04f 33ff 	mov.w	r3, #4294967295
 8013872:	e054      	b.n	801391e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013874:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013878:	2b09      	cmp	r3, #9
 801387a:	dd06      	ble.n	801388a <etharp_find_entry+0x236>
 801387c:	4b2b      	ldr	r3, [pc, #172]	; (801392c <etharp_find_entry+0x2d8>)
 801387e:	f240 127f 	movw	r2, #383	; 0x17f
 8013882:	492e      	ldr	r1, [pc, #184]	; (801393c <etharp_find_entry+0x2e8>)
 8013884:	482b      	ldr	r0, [pc, #172]	; (8013934 <etharp_find_entry+0x2e0>)
 8013886:	f002 f9e5 	bl	8015c54 <iprintf>
    etharp_free_entry(i);
 801388a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801388e:	4618      	mov	r0, r3
 8013890:	f7ff fe06 	bl	80134a0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013894:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013898:	2b09      	cmp	r3, #9
 801389a:	dd06      	ble.n	80138aa <etharp_find_entry+0x256>
 801389c:	4b23      	ldr	r3, [pc, #140]	; (801392c <etharp_find_entry+0x2d8>)
 801389e:	f240 1283 	movw	r2, #387	; 0x183
 80138a2:	4926      	ldr	r1, [pc, #152]	; (801393c <etharp_find_entry+0x2e8>)
 80138a4:	4823      	ldr	r0, [pc, #140]	; (8013934 <etharp_find_entry+0x2e0>)
 80138a6:	f002 f9d5 	bl	8015c54 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80138aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138ae:	491e      	ldr	r1, [pc, #120]	; (8013928 <etharp_find_entry+0x2d4>)
 80138b0:	4613      	mov	r3, r2
 80138b2:	005b      	lsls	r3, r3, #1
 80138b4:	4413      	add	r3, r2
 80138b6:	00db      	lsls	r3, r3, #3
 80138b8:	440b      	add	r3, r1
 80138ba:	3314      	adds	r3, #20
 80138bc:	781b      	ldrb	r3, [r3, #0]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d006      	beq.n	80138d0 <etharp_find_entry+0x27c>
 80138c2:	4b1a      	ldr	r3, [pc, #104]	; (801392c <etharp_find_entry+0x2d8>)
 80138c4:	f240 1285 	movw	r2, #389	; 0x185
 80138c8:	491d      	ldr	r1, [pc, #116]	; (8013940 <etharp_find_entry+0x2ec>)
 80138ca:	481a      	ldr	r0, [pc, #104]	; (8013934 <etharp_find_entry+0x2e0>)
 80138cc:	f002 f9c2 	bl	8015c54 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d00b      	beq.n	80138ee <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80138d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	6819      	ldr	r1, [r3, #0]
 80138de:	4812      	ldr	r0, [pc, #72]	; (8013928 <etharp_find_entry+0x2d4>)
 80138e0:	4613      	mov	r3, r2
 80138e2:	005b      	lsls	r3, r3, #1
 80138e4:	4413      	add	r3, r2
 80138e6:	00db      	lsls	r3, r3, #3
 80138e8:	4403      	add	r3, r0
 80138ea:	3304      	adds	r3, #4
 80138ec:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80138ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138f2:	490d      	ldr	r1, [pc, #52]	; (8013928 <etharp_find_entry+0x2d4>)
 80138f4:	4613      	mov	r3, r2
 80138f6:	005b      	lsls	r3, r3, #1
 80138f8:	4413      	add	r3, r2
 80138fa:	00db      	lsls	r3, r3, #3
 80138fc:	440b      	add	r3, r1
 80138fe:	3312      	adds	r3, #18
 8013900:	2200      	movs	r2, #0
 8013902:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013904:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013908:	4907      	ldr	r1, [pc, #28]	; (8013928 <etharp_find_entry+0x2d4>)
 801390a:	4613      	mov	r3, r2
 801390c:	005b      	lsls	r3, r3, #1
 801390e:	4413      	add	r3, r2
 8013910:	00db      	lsls	r3, r3, #3
 8013912:	440b      	add	r3, r1
 8013914:	3308      	adds	r3, #8
 8013916:	687a      	ldr	r2, [r7, #4]
 8013918:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801391a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801391e:	4618      	mov	r0, r3
 8013920:	3728      	adds	r7, #40	; 0x28
 8013922:	46bd      	mov	sp, r7
 8013924:	bd80      	pop	{r7, pc}
 8013926:	bf00      	nop
 8013928:	200004a0 	.word	0x200004a0
 801392c:	080190c0 	.word	0x080190c0
 8013930:	080190f8 	.word	0x080190f8
 8013934:	08019138 	.word	0x08019138
 8013938:	08019160 	.word	0x08019160
 801393c:	08019178 	.word	0x08019178
 8013940:	0801918c 	.word	0x0801918c

08013944 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013944:	b580      	push	{r7, lr}
 8013946:	b088      	sub	sp, #32
 8013948:	af02      	add	r7, sp, #8
 801394a:	60f8      	str	r0, [r7, #12]
 801394c:	60b9      	str	r1, [r7, #8]
 801394e:	607a      	str	r2, [r7, #4]
 8013950:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013958:	2b06      	cmp	r3, #6
 801395a:	d006      	beq.n	801396a <etharp_update_arp_entry+0x26>
 801395c:	4b48      	ldr	r3, [pc, #288]	; (8013a80 <etharp_update_arp_entry+0x13c>)
 801395e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8013962:	4948      	ldr	r1, [pc, #288]	; (8013a84 <etharp_update_arp_entry+0x140>)
 8013964:	4848      	ldr	r0, [pc, #288]	; (8013a88 <etharp_update_arp_entry+0x144>)
 8013966:	f002 f975 	bl	8015c54 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801396a:	68bb      	ldr	r3, [r7, #8]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d012      	beq.n	8013996 <etharp_update_arp_entry+0x52>
 8013970:	68bb      	ldr	r3, [r7, #8]
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d00e      	beq.n	8013996 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013978:	68bb      	ldr	r3, [r7, #8]
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	68f9      	ldr	r1, [r7, #12]
 801397e:	4618      	mov	r0, r3
 8013980:	f001 f91e 	bl	8014bc0 <ip4_addr_isbroadcast_u32>
 8013984:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013986:	2b00      	cmp	r3, #0
 8013988:	d105      	bne.n	8013996 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801398a:	68bb      	ldr	r3, [r7, #8]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013992:	2be0      	cmp	r3, #224	; 0xe0
 8013994:	d102      	bne.n	801399c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013996:	f06f 030f 	mvn.w	r3, #15
 801399a:	e06c      	b.n	8013a76 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801399c:	78fb      	ldrb	r3, [r7, #3]
 801399e:	68fa      	ldr	r2, [r7, #12]
 80139a0:	4619      	mov	r1, r3
 80139a2:	68b8      	ldr	r0, [r7, #8]
 80139a4:	f7ff fe56 	bl	8013654 <etharp_find_entry>
 80139a8:	4603      	mov	r3, r0
 80139aa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80139ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	da02      	bge.n	80139ba <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80139b4:	8afb      	ldrh	r3, [r7, #22]
 80139b6:	b25b      	sxtb	r3, r3
 80139b8:	e05d      	b.n	8013a76 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80139ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80139be:	4933      	ldr	r1, [pc, #204]	; (8013a8c <etharp_update_arp_entry+0x148>)
 80139c0:	4613      	mov	r3, r2
 80139c2:	005b      	lsls	r3, r3, #1
 80139c4:	4413      	add	r3, r2
 80139c6:	00db      	lsls	r3, r3, #3
 80139c8:	440b      	add	r3, r1
 80139ca:	3314      	adds	r3, #20
 80139cc:	2202      	movs	r2, #2
 80139ce:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80139d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80139d4:	492d      	ldr	r1, [pc, #180]	; (8013a8c <etharp_update_arp_entry+0x148>)
 80139d6:	4613      	mov	r3, r2
 80139d8:	005b      	lsls	r3, r3, #1
 80139da:	4413      	add	r3, r2
 80139dc:	00db      	lsls	r3, r3, #3
 80139de:	440b      	add	r3, r1
 80139e0:	3308      	adds	r3, #8
 80139e2:	68fa      	ldr	r2, [r7, #12]
 80139e4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80139e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80139ea:	4613      	mov	r3, r2
 80139ec:	005b      	lsls	r3, r3, #1
 80139ee:	4413      	add	r3, r2
 80139f0:	00db      	lsls	r3, r3, #3
 80139f2:	3308      	adds	r3, #8
 80139f4:	4a25      	ldr	r2, [pc, #148]	; (8013a8c <etharp_update_arp_entry+0x148>)
 80139f6:	4413      	add	r3, r2
 80139f8:	3304      	adds	r3, #4
 80139fa:	2206      	movs	r2, #6
 80139fc:	6879      	ldr	r1, [r7, #4]
 80139fe:	4618      	mov	r0, r3
 8013a00:	f002 f86d 	bl	8015ade <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013a04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013a08:	4920      	ldr	r1, [pc, #128]	; (8013a8c <etharp_update_arp_entry+0x148>)
 8013a0a:	4613      	mov	r3, r2
 8013a0c:	005b      	lsls	r3, r3, #1
 8013a0e:	4413      	add	r3, r2
 8013a10:	00db      	lsls	r3, r3, #3
 8013a12:	440b      	add	r3, r1
 8013a14:	3312      	adds	r3, #18
 8013a16:	2200      	movs	r2, #0
 8013a18:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013a1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013a1e:	491b      	ldr	r1, [pc, #108]	; (8013a8c <etharp_update_arp_entry+0x148>)
 8013a20:	4613      	mov	r3, r2
 8013a22:	005b      	lsls	r3, r3, #1
 8013a24:	4413      	add	r3, r2
 8013a26:	00db      	lsls	r3, r3, #3
 8013a28:	440b      	add	r3, r1
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d021      	beq.n	8013a74 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013a30:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013a34:	4915      	ldr	r1, [pc, #84]	; (8013a8c <etharp_update_arp_entry+0x148>)
 8013a36:	4613      	mov	r3, r2
 8013a38:	005b      	lsls	r3, r3, #1
 8013a3a:	4413      	add	r3, r2
 8013a3c:	00db      	lsls	r3, r3, #3
 8013a3e:	440b      	add	r3, r1
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013a44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013a48:	4910      	ldr	r1, [pc, #64]	; (8013a8c <etharp_update_arp_entry+0x148>)
 8013a4a:	4613      	mov	r3, r2
 8013a4c:	005b      	lsls	r3, r3, #1
 8013a4e:	4413      	add	r3, r2
 8013a50:	00db      	lsls	r3, r3, #3
 8013a52:	440b      	add	r3, r1
 8013a54:	2200      	movs	r2, #0
 8013a56:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013a5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013a62:	9300      	str	r3, [sp, #0]
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	6939      	ldr	r1, [r7, #16]
 8013a68:	68f8      	ldr	r0, [r7, #12]
 8013a6a:	f001 ffad 	bl	80159c8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013a6e:	6938      	ldr	r0, [r7, #16]
 8013a70:	f7f7 fc6a 	bl	800b348 <pbuf_free>
  }
  return ERR_OK;
 8013a74:	2300      	movs	r3, #0
}
 8013a76:	4618      	mov	r0, r3
 8013a78:	3718      	adds	r7, #24
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	bd80      	pop	{r7, pc}
 8013a7e:	bf00      	nop
 8013a80:	080190c0 	.word	0x080190c0
 8013a84:	080191b8 	.word	0x080191b8
 8013a88:	08019138 	.word	0x08019138
 8013a8c:	200004a0 	.word	0x200004a0

08013a90 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b084      	sub	sp, #16
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013a98:	2300      	movs	r3, #0
 8013a9a:	60fb      	str	r3, [r7, #12]
 8013a9c:	e01e      	b.n	8013adc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013a9e:	4913      	ldr	r1, [pc, #76]	; (8013aec <etharp_cleanup_netif+0x5c>)
 8013aa0:	68fa      	ldr	r2, [r7, #12]
 8013aa2:	4613      	mov	r3, r2
 8013aa4:	005b      	lsls	r3, r3, #1
 8013aa6:	4413      	add	r3, r2
 8013aa8:	00db      	lsls	r3, r3, #3
 8013aaa:	440b      	add	r3, r1
 8013aac:	3314      	adds	r3, #20
 8013aae:	781b      	ldrb	r3, [r3, #0]
 8013ab0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013ab2:	7afb      	ldrb	r3, [r7, #11]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d00e      	beq.n	8013ad6 <etharp_cleanup_netif+0x46>
 8013ab8:	490c      	ldr	r1, [pc, #48]	; (8013aec <etharp_cleanup_netif+0x5c>)
 8013aba:	68fa      	ldr	r2, [r7, #12]
 8013abc:	4613      	mov	r3, r2
 8013abe:	005b      	lsls	r3, r3, #1
 8013ac0:	4413      	add	r3, r2
 8013ac2:	00db      	lsls	r3, r3, #3
 8013ac4:	440b      	add	r3, r1
 8013ac6:	3308      	adds	r3, #8
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	687a      	ldr	r2, [r7, #4]
 8013acc:	429a      	cmp	r2, r3
 8013ace:	d102      	bne.n	8013ad6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013ad0:	68f8      	ldr	r0, [r7, #12]
 8013ad2:	f7ff fce5 	bl	80134a0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	3301      	adds	r3, #1
 8013ada:	60fb      	str	r3, [r7, #12]
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	2b09      	cmp	r3, #9
 8013ae0:	dddd      	ble.n	8013a9e <etharp_cleanup_netif+0xe>
    }
  }
}
 8013ae2:	bf00      	nop
 8013ae4:	3710      	adds	r7, #16
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bd80      	pop	{r7, pc}
 8013aea:	bf00      	nop
 8013aec:	200004a0 	.word	0x200004a0

08013af0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013af0:	b5b0      	push	{r4, r5, r7, lr}
 8013af2:	b08a      	sub	sp, #40	; 0x28
 8013af4:	af04      	add	r7, sp, #16
 8013af6:	6078      	str	r0, [r7, #4]
 8013af8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013afa:	683b      	ldr	r3, [r7, #0]
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d107      	bne.n	8013b10 <etharp_input+0x20>
 8013b00:	4b3f      	ldr	r3, [pc, #252]	; (8013c00 <etharp_input+0x110>)
 8013b02:	f240 228a 	movw	r2, #650	; 0x28a
 8013b06:	493f      	ldr	r1, [pc, #252]	; (8013c04 <etharp_input+0x114>)
 8013b08:	483f      	ldr	r0, [pc, #252]	; (8013c08 <etharp_input+0x118>)
 8013b0a:	f002 f8a3 	bl	8015c54 <iprintf>
 8013b0e:	e074      	b.n	8013bfa <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	685b      	ldr	r3, [r3, #4]
 8013b14:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013b16:	693b      	ldr	r3, [r7, #16]
 8013b18:	881b      	ldrh	r3, [r3, #0]
 8013b1a:	b29b      	uxth	r3, r3
 8013b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b20:	d10c      	bne.n	8013b3c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013b22:	693b      	ldr	r3, [r7, #16]
 8013b24:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013b26:	2b06      	cmp	r3, #6
 8013b28:	d108      	bne.n	8013b3c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013b2a:	693b      	ldr	r3, [r7, #16]
 8013b2c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013b2e:	2b04      	cmp	r3, #4
 8013b30:	d104      	bne.n	8013b3c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013b32:	693b      	ldr	r3, [r7, #16]
 8013b34:	885b      	ldrh	r3, [r3, #2]
 8013b36:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013b38:	2b08      	cmp	r3, #8
 8013b3a:	d003      	beq.n	8013b44 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013b3c:	6878      	ldr	r0, [r7, #4]
 8013b3e:	f7f7 fc03 	bl	800b348 <pbuf_free>
    return;
 8013b42:	e05a      	b.n	8013bfa <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013b44:	693b      	ldr	r3, [r7, #16]
 8013b46:	330e      	adds	r3, #14
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013b4c:	693b      	ldr	r3, [r7, #16]
 8013b4e:	3318      	adds	r3, #24
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013b54:	683b      	ldr	r3, [r7, #0]
 8013b56:	3304      	adds	r3, #4
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d102      	bne.n	8013b64 <etharp_input+0x74>
    for_us = 0;
 8013b5e:	2300      	movs	r3, #0
 8013b60:	75fb      	strb	r3, [r7, #23]
 8013b62:	e009      	b.n	8013b78 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013b64:	68ba      	ldr	r2, [r7, #8]
 8013b66:	683b      	ldr	r3, [r7, #0]
 8013b68:	3304      	adds	r3, #4
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	429a      	cmp	r2, r3
 8013b6e:	bf0c      	ite	eq
 8013b70:	2301      	moveq	r3, #1
 8013b72:	2300      	movne	r3, #0
 8013b74:	b2db      	uxtb	r3, r3
 8013b76:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013b78:	693b      	ldr	r3, [r7, #16]
 8013b7a:	f103 0208 	add.w	r2, r3, #8
 8013b7e:	7dfb      	ldrb	r3, [r7, #23]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d001      	beq.n	8013b88 <etharp_input+0x98>
 8013b84:	2301      	movs	r3, #1
 8013b86:	e000      	b.n	8013b8a <etharp_input+0x9a>
 8013b88:	2302      	movs	r3, #2
 8013b8a:	f107 010c 	add.w	r1, r7, #12
 8013b8e:	6838      	ldr	r0, [r7, #0]
 8013b90:	f7ff fed8 	bl	8013944 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013b94:	693b      	ldr	r3, [r7, #16]
 8013b96:	88db      	ldrh	r3, [r3, #6]
 8013b98:	b29b      	uxth	r3, r3
 8013b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b9e:	d003      	beq.n	8013ba8 <etharp_input+0xb8>
 8013ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013ba4:	d01e      	beq.n	8013be4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013ba6:	e025      	b.n	8013bf4 <etharp_input+0x104>
      if (for_us) {
 8013ba8:	7dfb      	ldrb	r3, [r7, #23]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d021      	beq.n	8013bf2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013bae:	683b      	ldr	r3, [r7, #0]
 8013bb0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013bb4:	693b      	ldr	r3, [r7, #16]
 8013bb6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013bba:	683b      	ldr	r3, [r7, #0]
 8013bbc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8013bc0:	683b      	ldr	r3, [r7, #0]
 8013bc2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013bc4:	693a      	ldr	r2, [r7, #16]
 8013bc6:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013bc8:	2102      	movs	r1, #2
 8013bca:	9103      	str	r1, [sp, #12]
 8013bcc:	f107 010c 	add.w	r1, r7, #12
 8013bd0:	9102      	str	r1, [sp, #8]
 8013bd2:	9201      	str	r2, [sp, #4]
 8013bd4:	9300      	str	r3, [sp, #0]
 8013bd6:	462b      	mov	r3, r5
 8013bd8:	4622      	mov	r2, r4
 8013bda:	4601      	mov	r1, r0
 8013bdc:	6838      	ldr	r0, [r7, #0]
 8013bde:	f000 faef 	bl	80141c0 <etharp_raw>
      break;
 8013be2:	e006      	b.n	8013bf2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8013be4:	f107 030c 	add.w	r3, r7, #12
 8013be8:	4619      	mov	r1, r3
 8013bea:	6838      	ldr	r0, [r7, #0]
 8013bec:	f7fe f9fe 	bl	8011fec <dhcp_arp_reply>
      break;
 8013bf0:	e000      	b.n	8013bf4 <etharp_input+0x104>
      break;
 8013bf2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013bf4:	6878      	ldr	r0, [r7, #4]
 8013bf6:	f7f7 fba7 	bl	800b348 <pbuf_free>
}
 8013bfa:	3718      	adds	r7, #24
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	bdb0      	pop	{r4, r5, r7, pc}
 8013c00:	080190c0 	.word	0x080190c0
 8013c04:	08019210 	.word	0x08019210
 8013c08:	08019138 	.word	0x08019138

08013c0c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b086      	sub	sp, #24
 8013c10:	af02      	add	r7, sp, #8
 8013c12:	60f8      	str	r0, [r7, #12]
 8013c14:	60b9      	str	r1, [r7, #8]
 8013c16:	4613      	mov	r3, r2
 8013c18:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013c1a:	79fa      	ldrb	r2, [r7, #7]
 8013c1c:	4944      	ldr	r1, [pc, #272]	; (8013d30 <etharp_output_to_arp_index+0x124>)
 8013c1e:	4613      	mov	r3, r2
 8013c20:	005b      	lsls	r3, r3, #1
 8013c22:	4413      	add	r3, r2
 8013c24:	00db      	lsls	r3, r3, #3
 8013c26:	440b      	add	r3, r1
 8013c28:	3314      	adds	r3, #20
 8013c2a:	781b      	ldrb	r3, [r3, #0]
 8013c2c:	2b01      	cmp	r3, #1
 8013c2e:	d806      	bhi.n	8013c3e <etharp_output_to_arp_index+0x32>
 8013c30:	4b40      	ldr	r3, [pc, #256]	; (8013d34 <etharp_output_to_arp_index+0x128>)
 8013c32:	f240 22ef 	movw	r2, #751	; 0x2ef
 8013c36:	4940      	ldr	r1, [pc, #256]	; (8013d38 <etharp_output_to_arp_index+0x12c>)
 8013c38:	4840      	ldr	r0, [pc, #256]	; (8013d3c <etharp_output_to_arp_index+0x130>)
 8013c3a:	f002 f80b 	bl	8015c54 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013c3e:	79fa      	ldrb	r2, [r7, #7]
 8013c40:	493b      	ldr	r1, [pc, #236]	; (8013d30 <etharp_output_to_arp_index+0x124>)
 8013c42:	4613      	mov	r3, r2
 8013c44:	005b      	lsls	r3, r3, #1
 8013c46:	4413      	add	r3, r2
 8013c48:	00db      	lsls	r3, r3, #3
 8013c4a:	440b      	add	r3, r1
 8013c4c:	3314      	adds	r3, #20
 8013c4e:	781b      	ldrb	r3, [r3, #0]
 8013c50:	2b02      	cmp	r3, #2
 8013c52:	d153      	bne.n	8013cfc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013c54:	79fa      	ldrb	r2, [r7, #7]
 8013c56:	4936      	ldr	r1, [pc, #216]	; (8013d30 <etharp_output_to_arp_index+0x124>)
 8013c58:	4613      	mov	r3, r2
 8013c5a:	005b      	lsls	r3, r3, #1
 8013c5c:	4413      	add	r3, r2
 8013c5e:	00db      	lsls	r3, r3, #3
 8013c60:	440b      	add	r3, r1
 8013c62:	3312      	adds	r3, #18
 8013c64:	881b      	ldrh	r3, [r3, #0]
 8013c66:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8013c6a:	d919      	bls.n	8013ca0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013c6c:	79fa      	ldrb	r2, [r7, #7]
 8013c6e:	4613      	mov	r3, r2
 8013c70:	005b      	lsls	r3, r3, #1
 8013c72:	4413      	add	r3, r2
 8013c74:	00db      	lsls	r3, r3, #3
 8013c76:	4a2e      	ldr	r2, [pc, #184]	; (8013d30 <etharp_output_to_arp_index+0x124>)
 8013c78:	4413      	add	r3, r2
 8013c7a:	3304      	adds	r3, #4
 8013c7c:	4619      	mov	r1, r3
 8013c7e:	68f8      	ldr	r0, [r7, #12]
 8013c80:	f000 fb4c 	bl	801431c <etharp_request>
 8013c84:	4603      	mov	r3, r0
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d138      	bne.n	8013cfc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013c8a:	79fa      	ldrb	r2, [r7, #7]
 8013c8c:	4928      	ldr	r1, [pc, #160]	; (8013d30 <etharp_output_to_arp_index+0x124>)
 8013c8e:	4613      	mov	r3, r2
 8013c90:	005b      	lsls	r3, r3, #1
 8013c92:	4413      	add	r3, r2
 8013c94:	00db      	lsls	r3, r3, #3
 8013c96:	440b      	add	r3, r1
 8013c98:	3314      	adds	r3, #20
 8013c9a:	2203      	movs	r2, #3
 8013c9c:	701a      	strb	r2, [r3, #0]
 8013c9e:	e02d      	b.n	8013cfc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013ca0:	79fa      	ldrb	r2, [r7, #7]
 8013ca2:	4923      	ldr	r1, [pc, #140]	; (8013d30 <etharp_output_to_arp_index+0x124>)
 8013ca4:	4613      	mov	r3, r2
 8013ca6:	005b      	lsls	r3, r3, #1
 8013ca8:	4413      	add	r3, r2
 8013caa:	00db      	lsls	r3, r3, #3
 8013cac:	440b      	add	r3, r1
 8013cae:	3312      	adds	r3, #18
 8013cb0:	881b      	ldrh	r3, [r3, #0]
 8013cb2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013cb6:	d321      	bcc.n	8013cfc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013cb8:	79fa      	ldrb	r2, [r7, #7]
 8013cba:	4613      	mov	r3, r2
 8013cbc:	005b      	lsls	r3, r3, #1
 8013cbe:	4413      	add	r3, r2
 8013cc0:	00db      	lsls	r3, r3, #3
 8013cc2:	4a1b      	ldr	r2, [pc, #108]	; (8013d30 <etharp_output_to_arp_index+0x124>)
 8013cc4:	4413      	add	r3, r2
 8013cc6:	1d19      	adds	r1, r3, #4
 8013cc8:	79fa      	ldrb	r2, [r7, #7]
 8013cca:	4613      	mov	r3, r2
 8013ccc:	005b      	lsls	r3, r3, #1
 8013cce:	4413      	add	r3, r2
 8013cd0:	00db      	lsls	r3, r3, #3
 8013cd2:	3308      	adds	r3, #8
 8013cd4:	4a16      	ldr	r2, [pc, #88]	; (8013d30 <etharp_output_to_arp_index+0x124>)
 8013cd6:	4413      	add	r3, r2
 8013cd8:	3304      	adds	r3, #4
 8013cda:	461a      	mov	r2, r3
 8013cdc:	68f8      	ldr	r0, [r7, #12]
 8013cde:	f000 fafb 	bl	80142d8 <etharp_request_dst>
 8013ce2:	4603      	mov	r3, r0
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d109      	bne.n	8013cfc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013ce8:	79fa      	ldrb	r2, [r7, #7]
 8013cea:	4911      	ldr	r1, [pc, #68]	; (8013d30 <etharp_output_to_arp_index+0x124>)
 8013cec:	4613      	mov	r3, r2
 8013cee:	005b      	lsls	r3, r3, #1
 8013cf0:	4413      	add	r3, r2
 8013cf2:	00db      	lsls	r3, r3, #3
 8013cf4:	440b      	add	r3, r1
 8013cf6:	3314      	adds	r3, #20
 8013cf8:	2203      	movs	r2, #3
 8013cfa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8013d02:	79fa      	ldrb	r2, [r7, #7]
 8013d04:	4613      	mov	r3, r2
 8013d06:	005b      	lsls	r3, r3, #1
 8013d08:	4413      	add	r3, r2
 8013d0a:	00db      	lsls	r3, r3, #3
 8013d0c:	3308      	adds	r3, #8
 8013d0e:	4a08      	ldr	r2, [pc, #32]	; (8013d30 <etharp_output_to_arp_index+0x124>)
 8013d10:	4413      	add	r3, r2
 8013d12:	1d1a      	adds	r2, r3, #4
 8013d14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013d18:	9300      	str	r3, [sp, #0]
 8013d1a:	4613      	mov	r3, r2
 8013d1c:	460a      	mov	r2, r1
 8013d1e:	68b9      	ldr	r1, [r7, #8]
 8013d20:	68f8      	ldr	r0, [r7, #12]
 8013d22:	f001 fe51 	bl	80159c8 <ethernet_output>
 8013d26:	4603      	mov	r3, r0
}
 8013d28:	4618      	mov	r0, r3
 8013d2a:	3710      	adds	r7, #16
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	bd80      	pop	{r7, pc}
 8013d30:	200004a0 	.word	0x200004a0
 8013d34:	080190c0 	.word	0x080190c0
 8013d38:	08019230 	.word	0x08019230
 8013d3c:	08019138 	.word	0x08019138

08013d40 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b08a      	sub	sp, #40	; 0x28
 8013d44:	af02      	add	r7, sp, #8
 8013d46:	60f8      	str	r0, [r7, #12]
 8013d48:	60b9      	str	r1, [r7, #8]
 8013d4a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d106      	bne.n	8013d64 <etharp_output+0x24>
 8013d56:	4b73      	ldr	r3, [pc, #460]	; (8013f24 <etharp_output+0x1e4>)
 8013d58:	f240 321e 	movw	r2, #798	; 0x31e
 8013d5c:	4972      	ldr	r1, [pc, #456]	; (8013f28 <etharp_output+0x1e8>)
 8013d5e:	4873      	ldr	r0, [pc, #460]	; (8013f2c <etharp_output+0x1ec>)
 8013d60:	f001 ff78 	bl	8015c54 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013d64:	68bb      	ldr	r3, [r7, #8]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d106      	bne.n	8013d78 <etharp_output+0x38>
 8013d6a:	4b6e      	ldr	r3, [pc, #440]	; (8013f24 <etharp_output+0x1e4>)
 8013d6c:	f240 321f 	movw	r2, #799	; 0x31f
 8013d70:	496f      	ldr	r1, [pc, #444]	; (8013f30 <etharp_output+0x1f0>)
 8013d72:	486e      	ldr	r0, [pc, #440]	; (8013f2c <etharp_output+0x1ec>)
 8013d74:	f001 ff6e 	bl	8015c54 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d106      	bne.n	8013d8c <etharp_output+0x4c>
 8013d7e:	4b69      	ldr	r3, [pc, #420]	; (8013f24 <etharp_output+0x1e4>)
 8013d80:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013d84:	496b      	ldr	r1, [pc, #428]	; (8013f34 <etharp_output+0x1f4>)
 8013d86:	4869      	ldr	r0, [pc, #420]	; (8013f2c <etharp_output+0x1ec>)
 8013d88:	f001 ff64 	bl	8015c54 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	68f9      	ldr	r1, [r7, #12]
 8013d92:	4618      	mov	r0, r3
 8013d94:	f000 ff14 	bl	8014bc0 <ip4_addr_isbroadcast_u32>
 8013d98:	4603      	mov	r3, r0
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d002      	beq.n	8013da4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013d9e:	4b66      	ldr	r3, [pc, #408]	; (8013f38 <etharp_output+0x1f8>)
 8013da0:	61fb      	str	r3, [r7, #28]
 8013da2:	e0af      	b.n	8013f04 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013dac:	2be0      	cmp	r3, #224	; 0xe0
 8013dae:	d118      	bne.n	8013de2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013db0:	2301      	movs	r3, #1
 8013db2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013db4:	2300      	movs	r3, #0
 8013db6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013db8:	235e      	movs	r3, #94	; 0x5e
 8013dba:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	3301      	adds	r3, #1
 8013dc0:	781b      	ldrb	r3, [r3, #0]
 8013dc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013dc6:	b2db      	uxtb	r3, r3
 8013dc8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	3302      	adds	r3, #2
 8013dce:	781b      	ldrb	r3, [r3, #0]
 8013dd0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	3303      	adds	r3, #3
 8013dd6:	781b      	ldrb	r3, [r3, #0]
 8013dd8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8013dda:	f107 0310 	add.w	r3, r7, #16
 8013dde:	61fb      	str	r3, [r7, #28]
 8013de0:	e090      	b.n	8013f04 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	681a      	ldr	r2, [r3, #0]
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	3304      	adds	r3, #4
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	405a      	eors	r2, r3
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	3308      	adds	r3, #8
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	4013      	ands	r3, r2
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d012      	beq.n	8013e20 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013e00:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013e04:	4293      	cmp	r3, r2
 8013e06:	d00b      	beq.n	8013e20 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	330c      	adds	r3, #12
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d003      	beq.n	8013e1a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	330c      	adds	r3, #12
 8013e16:	61bb      	str	r3, [r7, #24]
 8013e18:	e002      	b.n	8013e20 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8013e1a:	f06f 0303 	mvn.w	r3, #3
 8013e1e:	e07d      	b.n	8013f1c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013e20:	4b46      	ldr	r3, [pc, #280]	; (8013f3c <etharp_output+0x1fc>)
 8013e22:	781b      	ldrb	r3, [r3, #0]
 8013e24:	4619      	mov	r1, r3
 8013e26:	4a46      	ldr	r2, [pc, #280]	; (8013f40 <etharp_output+0x200>)
 8013e28:	460b      	mov	r3, r1
 8013e2a:	005b      	lsls	r3, r3, #1
 8013e2c:	440b      	add	r3, r1
 8013e2e:	00db      	lsls	r3, r3, #3
 8013e30:	4413      	add	r3, r2
 8013e32:	3314      	adds	r3, #20
 8013e34:	781b      	ldrb	r3, [r3, #0]
 8013e36:	2b01      	cmp	r3, #1
 8013e38:	d925      	bls.n	8013e86 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013e3a:	4b40      	ldr	r3, [pc, #256]	; (8013f3c <etharp_output+0x1fc>)
 8013e3c:	781b      	ldrb	r3, [r3, #0]
 8013e3e:	4619      	mov	r1, r3
 8013e40:	4a3f      	ldr	r2, [pc, #252]	; (8013f40 <etharp_output+0x200>)
 8013e42:	460b      	mov	r3, r1
 8013e44:	005b      	lsls	r3, r3, #1
 8013e46:	440b      	add	r3, r1
 8013e48:	00db      	lsls	r3, r3, #3
 8013e4a:	4413      	add	r3, r2
 8013e4c:	3308      	adds	r3, #8
 8013e4e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013e50:	68fa      	ldr	r2, [r7, #12]
 8013e52:	429a      	cmp	r2, r3
 8013e54:	d117      	bne.n	8013e86 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8013e56:	69bb      	ldr	r3, [r7, #24]
 8013e58:	681a      	ldr	r2, [r3, #0]
 8013e5a:	4b38      	ldr	r3, [pc, #224]	; (8013f3c <etharp_output+0x1fc>)
 8013e5c:	781b      	ldrb	r3, [r3, #0]
 8013e5e:	4618      	mov	r0, r3
 8013e60:	4937      	ldr	r1, [pc, #220]	; (8013f40 <etharp_output+0x200>)
 8013e62:	4603      	mov	r3, r0
 8013e64:	005b      	lsls	r3, r3, #1
 8013e66:	4403      	add	r3, r0
 8013e68:	00db      	lsls	r3, r3, #3
 8013e6a:	440b      	add	r3, r1
 8013e6c:	3304      	adds	r3, #4
 8013e6e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013e70:	429a      	cmp	r2, r3
 8013e72:	d108      	bne.n	8013e86 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013e74:	4b31      	ldr	r3, [pc, #196]	; (8013f3c <etharp_output+0x1fc>)
 8013e76:	781b      	ldrb	r3, [r3, #0]
 8013e78:	461a      	mov	r2, r3
 8013e7a:	68b9      	ldr	r1, [r7, #8]
 8013e7c:	68f8      	ldr	r0, [r7, #12]
 8013e7e:	f7ff fec5 	bl	8013c0c <etharp_output_to_arp_index>
 8013e82:	4603      	mov	r3, r0
 8013e84:	e04a      	b.n	8013f1c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013e86:	2300      	movs	r3, #0
 8013e88:	75fb      	strb	r3, [r7, #23]
 8013e8a:	e031      	b.n	8013ef0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013e8c:	7dfa      	ldrb	r2, [r7, #23]
 8013e8e:	492c      	ldr	r1, [pc, #176]	; (8013f40 <etharp_output+0x200>)
 8013e90:	4613      	mov	r3, r2
 8013e92:	005b      	lsls	r3, r3, #1
 8013e94:	4413      	add	r3, r2
 8013e96:	00db      	lsls	r3, r3, #3
 8013e98:	440b      	add	r3, r1
 8013e9a:	3314      	adds	r3, #20
 8013e9c:	781b      	ldrb	r3, [r3, #0]
 8013e9e:	2b01      	cmp	r3, #1
 8013ea0:	d923      	bls.n	8013eea <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013ea2:	7dfa      	ldrb	r2, [r7, #23]
 8013ea4:	4926      	ldr	r1, [pc, #152]	; (8013f40 <etharp_output+0x200>)
 8013ea6:	4613      	mov	r3, r2
 8013ea8:	005b      	lsls	r3, r3, #1
 8013eaa:	4413      	add	r3, r2
 8013eac:	00db      	lsls	r3, r3, #3
 8013eae:	440b      	add	r3, r1
 8013eb0:	3308      	adds	r3, #8
 8013eb2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013eb4:	68fa      	ldr	r2, [r7, #12]
 8013eb6:	429a      	cmp	r2, r3
 8013eb8:	d117      	bne.n	8013eea <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013eba:	69bb      	ldr	r3, [r7, #24]
 8013ebc:	6819      	ldr	r1, [r3, #0]
 8013ebe:	7dfa      	ldrb	r2, [r7, #23]
 8013ec0:	481f      	ldr	r0, [pc, #124]	; (8013f40 <etharp_output+0x200>)
 8013ec2:	4613      	mov	r3, r2
 8013ec4:	005b      	lsls	r3, r3, #1
 8013ec6:	4413      	add	r3, r2
 8013ec8:	00db      	lsls	r3, r3, #3
 8013eca:	4403      	add	r3, r0
 8013ecc:	3304      	adds	r3, #4
 8013ece:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013ed0:	4299      	cmp	r1, r3
 8013ed2:	d10a      	bne.n	8013eea <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013ed4:	4a19      	ldr	r2, [pc, #100]	; (8013f3c <etharp_output+0x1fc>)
 8013ed6:	7dfb      	ldrb	r3, [r7, #23]
 8013ed8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013eda:	7dfb      	ldrb	r3, [r7, #23]
 8013edc:	461a      	mov	r2, r3
 8013ede:	68b9      	ldr	r1, [r7, #8]
 8013ee0:	68f8      	ldr	r0, [r7, #12]
 8013ee2:	f7ff fe93 	bl	8013c0c <etharp_output_to_arp_index>
 8013ee6:	4603      	mov	r3, r0
 8013ee8:	e018      	b.n	8013f1c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013eea:	7dfb      	ldrb	r3, [r7, #23]
 8013eec:	3301      	adds	r3, #1
 8013eee:	75fb      	strb	r3, [r7, #23]
 8013ef0:	7dfb      	ldrb	r3, [r7, #23]
 8013ef2:	2b09      	cmp	r3, #9
 8013ef4:	d9ca      	bls.n	8013e8c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013ef6:	68ba      	ldr	r2, [r7, #8]
 8013ef8:	69b9      	ldr	r1, [r7, #24]
 8013efa:	68f8      	ldr	r0, [r7, #12]
 8013efc:	f000 f822 	bl	8013f44 <etharp_query>
 8013f00:	4603      	mov	r3, r0
 8013f02:	e00b      	b.n	8013f1c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013f0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013f0e:	9300      	str	r3, [sp, #0]
 8013f10:	69fb      	ldr	r3, [r7, #28]
 8013f12:	68b9      	ldr	r1, [r7, #8]
 8013f14:	68f8      	ldr	r0, [r7, #12]
 8013f16:	f001 fd57 	bl	80159c8 <ethernet_output>
 8013f1a:	4603      	mov	r3, r0
}
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	3720      	adds	r7, #32
 8013f20:	46bd      	mov	sp, r7
 8013f22:	bd80      	pop	{r7, pc}
 8013f24:	080190c0 	.word	0x080190c0
 8013f28:	08019210 	.word	0x08019210
 8013f2c:	08019138 	.word	0x08019138
 8013f30:	08019260 	.word	0x08019260
 8013f34:	08019200 	.word	0x08019200
 8013f38:	0802822c 	.word	0x0802822c
 8013f3c:	20000590 	.word	0x20000590
 8013f40:	200004a0 	.word	0x200004a0

08013f44 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013f44:	b580      	push	{r7, lr}
 8013f46:	b08c      	sub	sp, #48	; 0x30
 8013f48:	af02      	add	r7, sp, #8
 8013f4a:	60f8      	str	r0, [r7, #12]
 8013f4c:	60b9      	str	r1, [r7, #8]
 8013f4e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	3326      	adds	r3, #38	; 0x26
 8013f54:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013f56:	23ff      	movs	r3, #255	; 0xff
 8013f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013f60:	68bb      	ldr	r3, [r7, #8]
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	68f9      	ldr	r1, [r7, #12]
 8013f66:	4618      	mov	r0, r3
 8013f68:	f000 fe2a 	bl	8014bc0 <ip4_addr_isbroadcast_u32>
 8013f6c:	4603      	mov	r3, r0
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d10c      	bne.n	8013f8c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013f72:	68bb      	ldr	r3, [r7, #8]
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013f7a:	2be0      	cmp	r3, #224	; 0xe0
 8013f7c:	d006      	beq.n	8013f8c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013f7e:	68bb      	ldr	r3, [r7, #8]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d003      	beq.n	8013f8c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013f84:	68bb      	ldr	r3, [r7, #8]
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d102      	bne.n	8013f92 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013f8c:	f06f 030f 	mvn.w	r3, #15
 8013f90:	e102      	b.n	8014198 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013f92:	68fa      	ldr	r2, [r7, #12]
 8013f94:	2101      	movs	r1, #1
 8013f96:	68b8      	ldr	r0, [r7, #8]
 8013f98:	f7ff fb5c 	bl	8013654 <etharp_find_entry>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013fa0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	da02      	bge.n	8013fae <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013fa8:	8a7b      	ldrh	r3, [r7, #18]
 8013faa:	b25b      	sxtb	r3, r3
 8013fac:	e0f4      	b.n	8014198 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013fae:	8a7b      	ldrh	r3, [r7, #18]
 8013fb0:	2b7e      	cmp	r3, #126	; 0x7e
 8013fb2:	d906      	bls.n	8013fc2 <etharp_query+0x7e>
 8013fb4:	4b7a      	ldr	r3, [pc, #488]	; (80141a0 <etharp_query+0x25c>)
 8013fb6:	f240 32c1 	movw	r2, #961	; 0x3c1
 8013fba:	497a      	ldr	r1, [pc, #488]	; (80141a4 <etharp_query+0x260>)
 8013fbc:	487a      	ldr	r0, [pc, #488]	; (80141a8 <etharp_query+0x264>)
 8013fbe:	f001 fe49 	bl	8015c54 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013fc2:	8a7b      	ldrh	r3, [r7, #18]
 8013fc4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013fc6:	7c7a      	ldrb	r2, [r7, #17]
 8013fc8:	4978      	ldr	r1, [pc, #480]	; (80141ac <etharp_query+0x268>)
 8013fca:	4613      	mov	r3, r2
 8013fcc:	005b      	lsls	r3, r3, #1
 8013fce:	4413      	add	r3, r2
 8013fd0:	00db      	lsls	r3, r3, #3
 8013fd2:	440b      	add	r3, r1
 8013fd4:	3314      	adds	r3, #20
 8013fd6:	781b      	ldrb	r3, [r3, #0]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d115      	bne.n	8014008 <etharp_query+0xc4>
    is_new_entry = 1;
 8013fdc:	2301      	movs	r3, #1
 8013fde:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013fe0:	7c7a      	ldrb	r2, [r7, #17]
 8013fe2:	4972      	ldr	r1, [pc, #456]	; (80141ac <etharp_query+0x268>)
 8013fe4:	4613      	mov	r3, r2
 8013fe6:	005b      	lsls	r3, r3, #1
 8013fe8:	4413      	add	r3, r2
 8013fea:	00db      	lsls	r3, r3, #3
 8013fec:	440b      	add	r3, r1
 8013fee:	3314      	adds	r3, #20
 8013ff0:	2201      	movs	r2, #1
 8013ff2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013ff4:	7c7a      	ldrb	r2, [r7, #17]
 8013ff6:	496d      	ldr	r1, [pc, #436]	; (80141ac <etharp_query+0x268>)
 8013ff8:	4613      	mov	r3, r2
 8013ffa:	005b      	lsls	r3, r3, #1
 8013ffc:	4413      	add	r3, r2
 8013ffe:	00db      	lsls	r3, r3, #3
 8014000:	440b      	add	r3, r1
 8014002:	3308      	adds	r3, #8
 8014004:	68fa      	ldr	r2, [r7, #12]
 8014006:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014008:	7c7a      	ldrb	r2, [r7, #17]
 801400a:	4968      	ldr	r1, [pc, #416]	; (80141ac <etharp_query+0x268>)
 801400c:	4613      	mov	r3, r2
 801400e:	005b      	lsls	r3, r3, #1
 8014010:	4413      	add	r3, r2
 8014012:	00db      	lsls	r3, r3, #3
 8014014:	440b      	add	r3, r1
 8014016:	3314      	adds	r3, #20
 8014018:	781b      	ldrb	r3, [r3, #0]
 801401a:	2b01      	cmp	r3, #1
 801401c:	d011      	beq.n	8014042 <etharp_query+0xfe>
 801401e:	7c7a      	ldrb	r2, [r7, #17]
 8014020:	4962      	ldr	r1, [pc, #392]	; (80141ac <etharp_query+0x268>)
 8014022:	4613      	mov	r3, r2
 8014024:	005b      	lsls	r3, r3, #1
 8014026:	4413      	add	r3, r2
 8014028:	00db      	lsls	r3, r3, #3
 801402a:	440b      	add	r3, r1
 801402c:	3314      	adds	r3, #20
 801402e:	781b      	ldrb	r3, [r3, #0]
 8014030:	2b01      	cmp	r3, #1
 8014032:	d806      	bhi.n	8014042 <etharp_query+0xfe>
 8014034:	4b5a      	ldr	r3, [pc, #360]	; (80141a0 <etharp_query+0x25c>)
 8014036:	f240 32cf 	movw	r2, #975	; 0x3cf
 801403a:	495d      	ldr	r1, [pc, #372]	; (80141b0 <etharp_query+0x26c>)
 801403c:	485a      	ldr	r0, [pc, #360]	; (80141a8 <etharp_query+0x264>)
 801403e:	f001 fe09 	bl	8015c54 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014042:	6a3b      	ldr	r3, [r7, #32]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d102      	bne.n	801404e <etharp_query+0x10a>
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d10c      	bne.n	8014068 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801404e:	68b9      	ldr	r1, [r7, #8]
 8014050:	68f8      	ldr	r0, [r7, #12]
 8014052:	f000 f963 	bl	801431c <etharp_request>
 8014056:	4603      	mov	r3, r0
 8014058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d102      	bne.n	8014068 <etharp_query+0x124>
      return result;
 8014062:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014066:	e097      	b.n	8014198 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	2b00      	cmp	r3, #0
 801406c:	d106      	bne.n	801407c <etharp_query+0x138>
 801406e:	4b4c      	ldr	r3, [pc, #304]	; (80141a0 <etharp_query+0x25c>)
 8014070:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014074:	494f      	ldr	r1, [pc, #316]	; (80141b4 <etharp_query+0x270>)
 8014076:	484c      	ldr	r0, [pc, #304]	; (80141a8 <etharp_query+0x264>)
 8014078:	f001 fdec 	bl	8015c54 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801407c:	7c7a      	ldrb	r2, [r7, #17]
 801407e:	494b      	ldr	r1, [pc, #300]	; (80141ac <etharp_query+0x268>)
 8014080:	4613      	mov	r3, r2
 8014082:	005b      	lsls	r3, r3, #1
 8014084:	4413      	add	r3, r2
 8014086:	00db      	lsls	r3, r3, #3
 8014088:	440b      	add	r3, r1
 801408a:	3314      	adds	r3, #20
 801408c:	781b      	ldrb	r3, [r3, #0]
 801408e:	2b01      	cmp	r3, #1
 8014090:	d918      	bls.n	80140c4 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014092:	4a49      	ldr	r2, [pc, #292]	; (80141b8 <etharp_query+0x274>)
 8014094:	7c7b      	ldrb	r3, [r7, #17]
 8014096:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014098:	7c7a      	ldrb	r2, [r7, #17]
 801409a:	4613      	mov	r3, r2
 801409c:	005b      	lsls	r3, r3, #1
 801409e:	4413      	add	r3, r2
 80140a0:	00db      	lsls	r3, r3, #3
 80140a2:	3308      	adds	r3, #8
 80140a4:	4a41      	ldr	r2, [pc, #260]	; (80141ac <etharp_query+0x268>)
 80140a6:	4413      	add	r3, r2
 80140a8:	1d1a      	adds	r2, r3, #4
 80140aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80140ae:	9300      	str	r3, [sp, #0]
 80140b0:	4613      	mov	r3, r2
 80140b2:	697a      	ldr	r2, [r7, #20]
 80140b4:	6879      	ldr	r1, [r7, #4]
 80140b6:	68f8      	ldr	r0, [r7, #12]
 80140b8:	f001 fc86 	bl	80159c8 <ethernet_output>
 80140bc:	4603      	mov	r3, r0
 80140be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80140c2:	e067      	b.n	8014194 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80140c4:	7c7a      	ldrb	r2, [r7, #17]
 80140c6:	4939      	ldr	r1, [pc, #228]	; (80141ac <etharp_query+0x268>)
 80140c8:	4613      	mov	r3, r2
 80140ca:	005b      	lsls	r3, r3, #1
 80140cc:	4413      	add	r3, r2
 80140ce:	00db      	lsls	r3, r3, #3
 80140d0:	440b      	add	r3, r1
 80140d2:	3314      	adds	r3, #20
 80140d4:	781b      	ldrb	r3, [r3, #0]
 80140d6:	2b01      	cmp	r3, #1
 80140d8:	d15c      	bne.n	8014194 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80140da:	2300      	movs	r3, #0
 80140dc:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	61fb      	str	r3, [r7, #28]
    while (p) {
 80140e2:	e01c      	b.n	801411e <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80140e4:	69fb      	ldr	r3, [r7, #28]
 80140e6:	895a      	ldrh	r2, [r3, #10]
 80140e8:	69fb      	ldr	r3, [r7, #28]
 80140ea:	891b      	ldrh	r3, [r3, #8]
 80140ec:	429a      	cmp	r2, r3
 80140ee:	d10a      	bne.n	8014106 <etharp_query+0x1c2>
 80140f0:	69fb      	ldr	r3, [r7, #28]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d006      	beq.n	8014106 <etharp_query+0x1c2>
 80140f8:	4b29      	ldr	r3, [pc, #164]	; (80141a0 <etharp_query+0x25c>)
 80140fa:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80140fe:	492f      	ldr	r1, [pc, #188]	; (80141bc <etharp_query+0x278>)
 8014100:	4829      	ldr	r0, [pc, #164]	; (80141a8 <etharp_query+0x264>)
 8014102:	f001 fda7 	bl	8015c54 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014106:	69fb      	ldr	r3, [r7, #28]
 8014108:	7b1b      	ldrb	r3, [r3, #12]
 801410a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801410e:	2b00      	cmp	r3, #0
 8014110:	d002      	beq.n	8014118 <etharp_query+0x1d4>
        copy_needed = 1;
 8014112:	2301      	movs	r3, #1
 8014114:	61bb      	str	r3, [r7, #24]
        break;
 8014116:	e005      	b.n	8014124 <etharp_query+0x1e0>
      }
      p = p->next;
 8014118:	69fb      	ldr	r3, [r7, #28]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801411e:	69fb      	ldr	r3, [r7, #28]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d1df      	bne.n	80140e4 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8014124:	69bb      	ldr	r3, [r7, #24]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d007      	beq.n	801413a <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801412a:	687a      	ldr	r2, [r7, #4]
 801412c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014130:	200e      	movs	r0, #14
 8014132:	f7f7 fb75 	bl	800b820 <pbuf_clone>
 8014136:	61f8      	str	r0, [r7, #28]
 8014138:	e004      	b.n	8014144 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801413e:	69f8      	ldr	r0, [r7, #28]
 8014140:	f7f7 f9a2 	bl	800b488 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014144:	69fb      	ldr	r3, [r7, #28]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d021      	beq.n	801418e <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801414a:	7c7a      	ldrb	r2, [r7, #17]
 801414c:	4917      	ldr	r1, [pc, #92]	; (80141ac <etharp_query+0x268>)
 801414e:	4613      	mov	r3, r2
 8014150:	005b      	lsls	r3, r3, #1
 8014152:	4413      	add	r3, r2
 8014154:	00db      	lsls	r3, r3, #3
 8014156:	440b      	add	r3, r1
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	2b00      	cmp	r3, #0
 801415c:	d00a      	beq.n	8014174 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801415e:	7c7a      	ldrb	r2, [r7, #17]
 8014160:	4912      	ldr	r1, [pc, #72]	; (80141ac <etharp_query+0x268>)
 8014162:	4613      	mov	r3, r2
 8014164:	005b      	lsls	r3, r3, #1
 8014166:	4413      	add	r3, r2
 8014168:	00db      	lsls	r3, r3, #3
 801416a:	440b      	add	r3, r1
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	4618      	mov	r0, r3
 8014170:	f7f7 f8ea 	bl	800b348 <pbuf_free>
      }
      arp_table[i].q = p;
 8014174:	7c7a      	ldrb	r2, [r7, #17]
 8014176:	490d      	ldr	r1, [pc, #52]	; (80141ac <etharp_query+0x268>)
 8014178:	4613      	mov	r3, r2
 801417a:	005b      	lsls	r3, r3, #1
 801417c:	4413      	add	r3, r2
 801417e:	00db      	lsls	r3, r3, #3
 8014180:	440b      	add	r3, r1
 8014182:	69fa      	ldr	r2, [r7, #28]
 8014184:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014186:	2300      	movs	r3, #0
 8014188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801418c:	e002      	b.n	8014194 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801418e:	23ff      	movs	r3, #255	; 0xff
 8014190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014194:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014198:	4618      	mov	r0, r3
 801419a:	3728      	adds	r7, #40	; 0x28
 801419c:	46bd      	mov	sp, r7
 801419e:	bd80      	pop	{r7, pc}
 80141a0:	080190c0 	.word	0x080190c0
 80141a4:	0801926c 	.word	0x0801926c
 80141a8:	08019138 	.word	0x08019138
 80141ac:	200004a0 	.word	0x200004a0
 80141b0:	0801927c 	.word	0x0801927c
 80141b4:	08019260 	.word	0x08019260
 80141b8:	20000590 	.word	0x20000590
 80141bc:	080192a4 	.word	0x080192a4

080141c0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b08a      	sub	sp, #40	; 0x28
 80141c4:	af02      	add	r7, sp, #8
 80141c6:	60f8      	str	r0, [r7, #12]
 80141c8:	60b9      	str	r1, [r7, #8]
 80141ca:	607a      	str	r2, [r7, #4]
 80141cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80141ce:	2300      	movs	r3, #0
 80141d0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d106      	bne.n	80141e6 <etharp_raw+0x26>
 80141d8:	4b3a      	ldr	r3, [pc, #232]	; (80142c4 <etharp_raw+0x104>)
 80141da:	f240 4257 	movw	r2, #1111	; 0x457
 80141de:	493a      	ldr	r1, [pc, #232]	; (80142c8 <etharp_raw+0x108>)
 80141e0:	483a      	ldr	r0, [pc, #232]	; (80142cc <etharp_raw+0x10c>)
 80141e2:	f001 fd37 	bl	8015c54 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80141e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80141ea:	211c      	movs	r1, #28
 80141ec:	200e      	movs	r0, #14
 80141ee:	f7f6 fdcb 	bl	800ad88 <pbuf_alloc>
 80141f2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80141f4:	69bb      	ldr	r3, [r7, #24]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d102      	bne.n	8014200 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80141fa:	f04f 33ff 	mov.w	r3, #4294967295
 80141fe:	e05d      	b.n	80142bc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014200:	69bb      	ldr	r3, [r7, #24]
 8014202:	895b      	ldrh	r3, [r3, #10]
 8014204:	2b1b      	cmp	r3, #27
 8014206:	d806      	bhi.n	8014216 <etharp_raw+0x56>
 8014208:	4b2e      	ldr	r3, [pc, #184]	; (80142c4 <etharp_raw+0x104>)
 801420a:	f240 4263 	movw	r2, #1123	; 0x463
 801420e:	4930      	ldr	r1, [pc, #192]	; (80142d0 <etharp_raw+0x110>)
 8014210:	482e      	ldr	r0, [pc, #184]	; (80142cc <etharp_raw+0x10c>)
 8014212:	f001 fd1f 	bl	8015c54 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014216:	69bb      	ldr	r3, [r7, #24]
 8014218:	685b      	ldr	r3, [r3, #4]
 801421a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801421c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801421e:	4618      	mov	r0, r3
 8014220:	f7f5 fdf1 	bl	8009e06 <lwip_htons>
 8014224:	4603      	mov	r3, r0
 8014226:	461a      	mov	r2, r3
 8014228:	697b      	ldr	r3, [r7, #20]
 801422a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014232:	2b06      	cmp	r3, #6
 8014234:	d006      	beq.n	8014244 <etharp_raw+0x84>
 8014236:	4b23      	ldr	r3, [pc, #140]	; (80142c4 <etharp_raw+0x104>)
 8014238:	f240 426a 	movw	r2, #1130	; 0x46a
 801423c:	4925      	ldr	r1, [pc, #148]	; (80142d4 <etharp_raw+0x114>)
 801423e:	4823      	ldr	r0, [pc, #140]	; (80142cc <etharp_raw+0x10c>)
 8014240:	f001 fd08 	bl	8015c54 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014244:	697b      	ldr	r3, [r7, #20]
 8014246:	3308      	adds	r3, #8
 8014248:	2206      	movs	r2, #6
 801424a:	6839      	ldr	r1, [r7, #0]
 801424c:	4618      	mov	r0, r3
 801424e:	f001 fc46 	bl	8015ade <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014252:	697b      	ldr	r3, [r7, #20]
 8014254:	3312      	adds	r3, #18
 8014256:	2206      	movs	r2, #6
 8014258:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801425a:	4618      	mov	r0, r3
 801425c:	f001 fc3f 	bl	8015ade <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014260:	697b      	ldr	r3, [r7, #20]
 8014262:	330e      	adds	r3, #14
 8014264:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014266:	6812      	ldr	r2, [r2, #0]
 8014268:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801426a:	697b      	ldr	r3, [r7, #20]
 801426c:	3318      	adds	r3, #24
 801426e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014270:	6812      	ldr	r2, [r2, #0]
 8014272:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014274:	697b      	ldr	r3, [r7, #20]
 8014276:	2200      	movs	r2, #0
 8014278:	701a      	strb	r2, [r3, #0]
 801427a:	2200      	movs	r2, #0
 801427c:	f042 0201 	orr.w	r2, r2, #1
 8014280:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014282:	697b      	ldr	r3, [r7, #20]
 8014284:	2200      	movs	r2, #0
 8014286:	f042 0208 	orr.w	r2, r2, #8
 801428a:	709a      	strb	r2, [r3, #2]
 801428c:	2200      	movs	r2, #0
 801428e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014290:	697b      	ldr	r3, [r7, #20]
 8014292:	2206      	movs	r2, #6
 8014294:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014296:	697b      	ldr	r3, [r7, #20]
 8014298:	2204      	movs	r2, #4
 801429a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801429c:	f640 0306 	movw	r3, #2054	; 0x806
 80142a0:	9300      	str	r3, [sp, #0]
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	68ba      	ldr	r2, [r7, #8]
 80142a6:	69b9      	ldr	r1, [r7, #24]
 80142a8:	68f8      	ldr	r0, [r7, #12]
 80142aa:	f001 fb8d 	bl	80159c8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80142ae:	69b8      	ldr	r0, [r7, #24]
 80142b0:	f7f7 f84a 	bl	800b348 <pbuf_free>
  p = NULL;
 80142b4:	2300      	movs	r3, #0
 80142b6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80142b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80142bc:	4618      	mov	r0, r3
 80142be:	3720      	adds	r7, #32
 80142c0:	46bd      	mov	sp, r7
 80142c2:	bd80      	pop	{r7, pc}
 80142c4:	080190c0 	.word	0x080190c0
 80142c8:	08019210 	.word	0x08019210
 80142cc:	08019138 	.word	0x08019138
 80142d0:	080192c0 	.word	0x080192c0
 80142d4:	080192f4 	.word	0x080192f4

080142d8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80142d8:	b580      	push	{r7, lr}
 80142da:	b088      	sub	sp, #32
 80142dc:	af04      	add	r7, sp, #16
 80142de:	60f8      	str	r0, [r7, #12]
 80142e0:	60b9      	str	r1, [r7, #8]
 80142e2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80142f4:	2201      	movs	r2, #1
 80142f6:	9203      	str	r2, [sp, #12]
 80142f8:	68ba      	ldr	r2, [r7, #8]
 80142fa:	9202      	str	r2, [sp, #8]
 80142fc:	4a06      	ldr	r2, [pc, #24]	; (8014318 <etharp_request_dst+0x40>)
 80142fe:	9201      	str	r2, [sp, #4]
 8014300:	9300      	str	r3, [sp, #0]
 8014302:	4603      	mov	r3, r0
 8014304:	687a      	ldr	r2, [r7, #4]
 8014306:	68f8      	ldr	r0, [r7, #12]
 8014308:	f7ff ff5a 	bl	80141c0 <etharp_raw>
 801430c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801430e:	4618      	mov	r0, r3
 8014310:	3710      	adds	r7, #16
 8014312:	46bd      	mov	sp, r7
 8014314:	bd80      	pop	{r7, pc}
 8014316:	bf00      	nop
 8014318:	08028234 	.word	0x08028234

0801431c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801431c:	b580      	push	{r7, lr}
 801431e:	b082      	sub	sp, #8
 8014320:	af00      	add	r7, sp, #0
 8014322:	6078      	str	r0, [r7, #4]
 8014324:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014326:	4a05      	ldr	r2, [pc, #20]	; (801433c <etharp_request+0x20>)
 8014328:	6839      	ldr	r1, [r7, #0]
 801432a:	6878      	ldr	r0, [r7, #4]
 801432c:	f7ff ffd4 	bl	80142d8 <etharp_request_dst>
 8014330:	4603      	mov	r3, r0
}
 8014332:	4618      	mov	r0, r3
 8014334:	3708      	adds	r7, #8
 8014336:	46bd      	mov	sp, r7
 8014338:	bd80      	pop	{r7, pc}
 801433a:	bf00      	nop
 801433c:	0802822c 	.word	0x0802822c

08014340 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014340:	b580      	push	{r7, lr}
 8014342:	b08e      	sub	sp, #56	; 0x38
 8014344:	af04      	add	r7, sp, #16
 8014346:	6078      	str	r0, [r7, #4]
 8014348:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801434a:	4b79      	ldr	r3, [pc, #484]	; (8014530 <icmp_input+0x1f0>)
 801434c:	689b      	ldr	r3, [r3, #8]
 801434e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014352:	781b      	ldrb	r3, [r3, #0]
 8014354:	f003 030f 	and.w	r3, r3, #15
 8014358:	b2db      	uxtb	r3, r3
 801435a:	009b      	lsls	r3, r3, #2
 801435c:	b2db      	uxtb	r3, r3
 801435e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014360:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014362:	2b13      	cmp	r3, #19
 8014364:	f240 80cd 	bls.w	8014502 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	895b      	ldrh	r3, [r3, #10]
 801436c:	2b03      	cmp	r3, #3
 801436e:	f240 80ca 	bls.w	8014506 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	685b      	ldr	r3, [r3, #4]
 8014376:	781b      	ldrb	r3, [r3, #0]
 8014378:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801437c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014380:	2b00      	cmp	r3, #0
 8014382:	f000 80b7 	beq.w	80144f4 <icmp_input+0x1b4>
 8014386:	2b08      	cmp	r3, #8
 8014388:	f040 80b7 	bne.w	80144fa <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801438c:	4b69      	ldr	r3, [pc, #420]	; (8014534 <icmp_input+0x1f4>)
 801438e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014390:	4b67      	ldr	r3, [pc, #412]	; (8014530 <icmp_input+0x1f0>)
 8014392:	695b      	ldr	r3, [r3, #20]
 8014394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014398:	2be0      	cmp	r3, #224	; 0xe0
 801439a:	f000 80bb 	beq.w	8014514 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801439e:	4b64      	ldr	r3, [pc, #400]	; (8014530 <icmp_input+0x1f0>)
 80143a0:	695a      	ldr	r2, [r3, #20]
 80143a2:	4b63      	ldr	r3, [pc, #396]	; (8014530 <icmp_input+0x1f0>)
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	4619      	mov	r1, r3
 80143a8:	4610      	mov	r0, r2
 80143aa:	f000 fc09 	bl	8014bc0 <ip4_addr_isbroadcast_u32>
 80143ae:	4603      	mov	r3, r0
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	f040 80b1 	bne.w	8014518 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	891b      	ldrh	r3, [r3, #8]
 80143ba:	2b07      	cmp	r3, #7
 80143bc:	f240 80a5 	bls.w	801450a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80143c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80143c2:	330e      	adds	r3, #14
 80143c4:	4619      	mov	r1, r3
 80143c6:	6878      	ldr	r0, [r7, #4]
 80143c8:	f7f6 ff28 	bl	800b21c <pbuf_add_header>
 80143cc:	4603      	mov	r3, r0
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d04b      	beq.n	801446a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	891a      	ldrh	r2, [r3, #8]
 80143d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80143d8:	4413      	add	r3, r2
 80143da:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	891b      	ldrh	r3, [r3, #8]
 80143e0:	8b7a      	ldrh	r2, [r7, #26]
 80143e2:	429a      	cmp	r2, r3
 80143e4:	f0c0 809a 	bcc.w	801451c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80143e8:	8b7b      	ldrh	r3, [r7, #26]
 80143ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80143ee:	4619      	mov	r1, r3
 80143f0:	200e      	movs	r0, #14
 80143f2:	f7f6 fcc9 	bl	800ad88 <pbuf_alloc>
 80143f6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80143f8:	697b      	ldr	r3, [r7, #20]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	f000 8090 	beq.w	8014520 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014400:	697b      	ldr	r3, [r7, #20]
 8014402:	895b      	ldrh	r3, [r3, #10]
 8014404:	461a      	mov	r2, r3
 8014406:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014408:	3308      	adds	r3, #8
 801440a:	429a      	cmp	r2, r3
 801440c:	d203      	bcs.n	8014416 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801440e:	6978      	ldr	r0, [r7, #20]
 8014410:	f7f6 ff9a 	bl	800b348 <pbuf_free>
          goto icmperr;
 8014414:	e085      	b.n	8014522 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014416:	697b      	ldr	r3, [r7, #20]
 8014418:	685b      	ldr	r3, [r3, #4]
 801441a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801441c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801441e:	4618      	mov	r0, r3
 8014420:	f001 fb5d 	bl	8015ade <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014424:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014426:	4619      	mov	r1, r3
 8014428:	6978      	ldr	r0, [r7, #20]
 801442a:	f7f6 ff07 	bl	800b23c <pbuf_remove_header>
 801442e:	4603      	mov	r3, r0
 8014430:	2b00      	cmp	r3, #0
 8014432:	d009      	beq.n	8014448 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014434:	4b40      	ldr	r3, [pc, #256]	; (8014538 <icmp_input+0x1f8>)
 8014436:	22b6      	movs	r2, #182	; 0xb6
 8014438:	4940      	ldr	r1, [pc, #256]	; (801453c <icmp_input+0x1fc>)
 801443a:	4841      	ldr	r0, [pc, #260]	; (8014540 <icmp_input+0x200>)
 801443c:	f001 fc0a 	bl	8015c54 <iprintf>
          pbuf_free(r);
 8014440:	6978      	ldr	r0, [r7, #20]
 8014442:	f7f6 ff81 	bl	800b348 <pbuf_free>
          goto icmperr;
 8014446:	e06c      	b.n	8014522 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014448:	6879      	ldr	r1, [r7, #4]
 801444a:	6978      	ldr	r0, [r7, #20]
 801444c:	f7f7 f8a4 	bl	800b598 <pbuf_copy>
 8014450:	4603      	mov	r3, r0
 8014452:	2b00      	cmp	r3, #0
 8014454:	d003      	beq.n	801445e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014456:	6978      	ldr	r0, [r7, #20]
 8014458:	f7f6 ff76 	bl	800b348 <pbuf_free>
          goto icmperr;
 801445c:	e061      	b.n	8014522 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801445e:	6878      	ldr	r0, [r7, #4]
 8014460:	f7f6 ff72 	bl	800b348 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014464:	697b      	ldr	r3, [r7, #20]
 8014466:	607b      	str	r3, [r7, #4]
 8014468:	e00f      	b.n	801448a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801446a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801446c:	330e      	adds	r3, #14
 801446e:	4619      	mov	r1, r3
 8014470:	6878      	ldr	r0, [r7, #4]
 8014472:	f7f6 fee3 	bl	800b23c <pbuf_remove_header>
 8014476:	4603      	mov	r3, r0
 8014478:	2b00      	cmp	r3, #0
 801447a:	d006      	beq.n	801448a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801447c:	4b2e      	ldr	r3, [pc, #184]	; (8014538 <icmp_input+0x1f8>)
 801447e:	22c7      	movs	r2, #199	; 0xc7
 8014480:	4930      	ldr	r1, [pc, #192]	; (8014544 <icmp_input+0x204>)
 8014482:	482f      	ldr	r0, [pc, #188]	; (8014540 <icmp_input+0x200>)
 8014484:	f001 fbe6 	bl	8015c54 <iprintf>
          goto icmperr;
 8014488:	e04b      	b.n	8014522 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	685b      	ldr	r3, [r3, #4]
 801448e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014490:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014492:	4619      	mov	r1, r3
 8014494:	6878      	ldr	r0, [r7, #4]
 8014496:	f7f6 fec1 	bl	800b21c <pbuf_add_header>
 801449a:	4603      	mov	r3, r0
 801449c:	2b00      	cmp	r3, #0
 801449e:	d12b      	bne.n	80144f8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	685b      	ldr	r3, [r3, #4]
 80144a4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80144a6:	69fb      	ldr	r3, [r7, #28]
 80144a8:	681a      	ldr	r2, [r3, #0]
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80144ae:	4b20      	ldr	r3, [pc, #128]	; (8014530 <icmp_input+0x1f0>)
 80144b0:	691a      	ldr	r2, [r3, #16]
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80144b6:	693b      	ldr	r3, [r7, #16]
 80144b8:	2200      	movs	r2, #0
 80144ba:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80144bc:	693b      	ldr	r3, [r7, #16]
 80144be:	2200      	movs	r2, #0
 80144c0:	709a      	strb	r2, [r3, #2]
 80144c2:	2200      	movs	r2, #0
 80144c4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	22ff      	movs	r2, #255	; 0xff
 80144ca:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	2200      	movs	r2, #0
 80144d0:	729a      	strb	r2, [r3, #10]
 80144d2:	2200      	movs	r2, #0
 80144d4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80144d6:	683b      	ldr	r3, [r7, #0]
 80144d8:	9302      	str	r3, [sp, #8]
 80144da:	2301      	movs	r3, #1
 80144dc:	9301      	str	r3, [sp, #4]
 80144de:	2300      	movs	r3, #0
 80144e0:	9300      	str	r3, [sp, #0]
 80144e2:	23ff      	movs	r3, #255	; 0xff
 80144e4:	2200      	movs	r2, #0
 80144e6:	69f9      	ldr	r1, [r7, #28]
 80144e8:	6878      	ldr	r0, [r7, #4]
 80144ea:	f000 fa91 	bl	8014a10 <ip4_output_if>
 80144ee:	4603      	mov	r3, r0
 80144f0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80144f2:	e001      	b.n	80144f8 <icmp_input+0x1b8>
      break;
 80144f4:	bf00      	nop
 80144f6:	e000      	b.n	80144fa <icmp_input+0x1ba>
      break;
 80144f8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80144fa:	6878      	ldr	r0, [r7, #4]
 80144fc:	f7f6 ff24 	bl	800b348 <pbuf_free>
  return;
 8014500:	e013      	b.n	801452a <icmp_input+0x1ea>
    goto lenerr;
 8014502:	bf00      	nop
 8014504:	e002      	b.n	801450c <icmp_input+0x1cc>
    goto lenerr;
 8014506:	bf00      	nop
 8014508:	e000      	b.n	801450c <icmp_input+0x1cc>
        goto lenerr;
 801450a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801450c:	6878      	ldr	r0, [r7, #4]
 801450e:	f7f6 ff1b 	bl	800b348 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014512:	e00a      	b.n	801452a <icmp_input+0x1ea>
        goto icmperr;
 8014514:	bf00      	nop
 8014516:	e004      	b.n	8014522 <icmp_input+0x1e2>
        goto icmperr;
 8014518:	bf00      	nop
 801451a:	e002      	b.n	8014522 <icmp_input+0x1e2>
          goto icmperr;
 801451c:	bf00      	nop
 801451e:	e000      	b.n	8014522 <icmp_input+0x1e2>
          goto icmperr;
 8014520:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014522:	6878      	ldr	r0, [r7, #4]
 8014524:	f7f6 ff10 	bl	800b348 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014528:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801452a:	3728      	adds	r7, #40	; 0x28
 801452c:	46bd      	mov	sp, r7
 801452e:	bd80      	pop	{r7, pc}
 8014530:	20004190 	.word	0x20004190
 8014534:	200041a4 	.word	0x200041a4
 8014538:	08019338 	.word	0x08019338
 801453c:	08019370 	.word	0x08019370
 8014540:	080193a8 	.word	0x080193a8
 8014544:	080193d0 	.word	0x080193d0

08014548 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014548:	b580      	push	{r7, lr}
 801454a:	b082      	sub	sp, #8
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
 8014550:	460b      	mov	r3, r1
 8014552:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014554:	78fb      	ldrb	r3, [r7, #3]
 8014556:	461a      	mov	r2, r3
 8014558:	2103      	movs	r1, #3
 801455a:	6878      	ldr	r0, [r7, #4]
 801455c:	f000 f814 	bl	8014588 <icmp_send_response>
}
 8014560:	bf00      	nop
 8014562:	3708      	adds	r7, #8
 8014564:	46bd      	mov	sp, r7
 8014566:	bd80      	pop	{r7, pc}

08014568 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014568:	b580      	push	{r7, lr}
 801456a:	b082      	sub	sp, #8
 801456c:	af00      	add	r7, sp, #0
 801456e:	6078      	str	r0, [r7, #4]
 8014570:	460b      	mov	r3, r1
 8014572:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014574:	78fb      	ldrb	r3, [r7, #3]
 8014576:	461a      	mov	r2, r3
 8014578:	210b      	movs	r1, #11
 801457a:	6878      	ldr	r0, [r7, #4]
 801457c:	f000 f804 	bl	8014588 <icmp_send_response>
}
 8014580:	bf00      	nop
 8014582:	3708      	adds	r7, #8
 8014584:	46bd      	mov	sp, r7
 8014586:	bd80      	pop	{r7, pc}

08014588 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014588:	b580      	push	{r7, lr}
 801458a:	b08c      	sub	sp, #48	; 0x30
 801458c:	af04      	add	r7, sp, #16
 801458e:	6078      	str	r0, [r7, #4]
 8014590:	460b      	mov	r3, r1
 8014592:	70fb      	strb	r3, [r7, #3]
 8014594:	4613      	mov	r3, r2
 8014596:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014598:	f44f 7220 	mov.w	r2, #640	; 0x280
 801459c:	2124      	movs	r1, #36	; 0x24
 801459e:	2022      	movs	r0, #34	; 0x22
 80145a0:	f7f6 fbf2 	bl	800ad88 <pbuf_alloc>
 80145a4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80145a6:	69fb      	ldr	r3, [r7, #28]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d04c      	beq.n	8014646 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80145ac:	69fb      	ldr	r3, [r7, #28]
 80145ae:	895b      	ldrh	r3, [r3, #10]
 80145b0:	2b23      	cmp	r3, #35	; 0x23
 80145b2:	d806      	bhi.n	80145c2 <icmp_send_response+0x3a>
 80145b4:	4b26      	ldr	r3, [pc, #152]	; (8014650 <icmp_send_response+0xc8>)
 80145b6:	f240 1269 	movw	r2, #361	; 0x169
 80145ba:	4926      	ldr	r1, [pc, #152]	; (8014654 <icmp_send_response+0xcc>)
 80145bc:	4826      	ldr	r0, [pc, #152]	; (8014658 <icmp_send_response+0xd0>)
 80145be:	f001 fb49 	bl	8015c54 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	685b      	ldr	r3, [r3, #4]
 80145c6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80145c8:	69fb      	ldr	r3, [r7, #28]
 80145ca:	685b      	ldr	r3, [r3, #4]
 80145cc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80145ce:	697b      	ldr	r3, [r7, #20]
 80145d0:	78fa      	ldrb	r2, [r7, #3]
 80145d2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80145d4:	697b      	ldr	r3, [r7, #20]
 80145d6:	78ba      	ldrb	r2, [r7, #2]
 80145d8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80145da:	697b      	ldr	r3, [r7, #20]
 80145dc:	2200      	movs	r2, #0
 80145de:	711a      	strb	r2, [r3, #4]
 80145e0:	2200      	movs	r2, #0
 80145e2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80145e4:	697b      	ldr	r3, [r7, #20]
 80145e6:	2200      	movs	r2, #0
 80145e8:	719a      	strb	r2, [r3, #6]
 80145ea:	2200      	movs	r2, #0
 80145ec:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80145ee:	69fb      	ldr	r3, [r7, #28]
 80145f0:	685b      	ldr	r3, [r3, #4]
 80145f2:	f103 0008 	add.w	r0, r3, #8
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	685b      	ldr	r3, [r3, #4]
 80145fa:	221c      	movs	r2, #28
 80145fc:	4619      	mov	r1, r3
 80145fe:	f001 fa6e 	bl	8015ade <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014602:	69bb      	ldr	r3, [r7, #24]
 8014604:	68db      	ldr	r3, [r3, #12]
 8014606:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014608:	f107 030c 	add.w	r3, r7, #12
 801460c:	4618      	mov	r0, r3
 801460e:	f000 f825 	bl	801465c <ip4_route>
 8014612:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014614:	693b      	ldr	r3, [r7, #16]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d011      	beq.n	801463e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801461a:	697b      	ldr	r3, [r7, #20]
 801461c:	2200      	movs	r2, #0
 801461e:	709a      	strb	r2, [r3, #2]
 8014620:	2200      	movs	r2, #0
 8014622:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014624:	f107 020c 	add.w	r2, r7, #12
 8014628:	693b      	ldr	r3, [r7, #16]
 801462a:	9302      	str	r3, [sp, #8]
 801462c:	2301      	movs	r3, #1
 801462e:	9301      	str	r3, [sp, #4]
 8014630:	2300      	movs	r3, #0
 8014632:	9300      	str	r3, [sp, #0]
 8014634:	23ff      	movs	r3, #255	; 0xff
 8014636:	2100      	movs	r1, #0
 8014638:	69f8      	ldr	r0, [r7, #28]
 801463a:	f000 f9e9 	bl	8014a10 <ip4_output_if>
  }
  pbuf_free(q);
 801463e:	69f8      	ldr	r0, [r7, #28]
 8014640:	f7f6 fe82 	bl	800b348 <pbuf_free>
 8014644:	e000      	b.n	8014648 <icmp_send_response+0xc0>
    return;
 8014646:	bf00      	nop
}
 8014648:	3720      	adds	r7, #32
 801464a:	46bd      	mov	sp, r7
 801464c:	bd80      	pop	{r7, pc}
 801464e:	bf00      	nop
 8014650:	08019338 	.word	0x08019338
 8014654:	08019404 	.word	0x08019404
 8014658:	080193a8 	.word	0x080193a8

0801465c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801465c:	b480      	push	{r7}
 801465e:	b085      	sub	sp, #20
 8014660:	af00      	add	r7, sp, #0
 8014662:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014664:	4b33      	ldr	r3, [pc, #204]	; (8014734 <ip4_route+0xd8>)
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	60fb      	str	r3, [r7, #12]
 801466a:	e036      	b.n	80146da <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014672:	f003 0301 	and.w	r3, r3, #1
 8014676:	b2db      	uxtb	r3, r3
 8014678:	2b00      	cmp	r3, #0
 801467a:	d02b      	beq.n	80146d4 <ip4_route+0x78>
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014682:	089b      	lsrs	r3, r3, #2
 8014684:	f003 0301 	and.w	r3, r3, #1
 8014688:	b2db      	uxtb	r3, r3
 801468a:	2b00      	cmp	r3, #0
 801468c:	d022      	beq.n	80146d4 <ip4_route+0x78>
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	3304      	adds	r3, #4
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d01d      	beq.n	80146d4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	681a      	ldr	r2, [r3, #0]
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	3304      	adds	r3, #4
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	405a      	eors	r2, r3
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	3308      	adds	r3, #8
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	4013      	ands	r3, r2
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d101      	bne.n	80146b4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	e038      	b.n	8014726 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80146ba:	f003 0302 	and.w	r3, r3, #2
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d108      	bne.n	80146d4 <ip4_route+0x78>
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	681a      	ldr	r2, [r3, #0]
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	330c      	adds	r3, #12
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	429a      	cmp	r2, r3
 80146ce:	d101      	bne.n	80146d4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	e028      	b.n	8014726 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	60fb      	str	r3, [r7, #12]
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d1c5      	bne.n	801466c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80146e0:	4b15      	ldr	r3, [pc, #84]	; (8014738 <ip4_route+0xdc>)
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d01a      	beq.n	801471e <ip4_route+0xc2>
 80146e8:	4b13      	ldr	r3, [pc, #76]	; (8014738 <ip4_route+0xdc>)
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80146f0:	f003 0301 	and.w	r3, r3, #1
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d012      	beq.n	801471e <ip4_route+0xc2>
 80146f8:	4b0f      	ldr	r3, [pc, #60]	; (8014738 <ip4_route+0xdc>)
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014700:	f003 0304 	and.w	r3, r3, #4
 8014704:	2b00      	cmp	r3, #0
 8014706:	d00a      	beq.n	801471e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014708:	4b0b      	ldr	r3, [pc, #44]	; (8014738 <ip4_route+0xdc>)
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	3304      	adds	r3, #4
 801470e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014710:	2b00      	cmp	r3, #0
 8014712:	d004      	beq.n	801471e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	b2db      	uxtb	r3, r3
 801471a:	2b7f      	cmp	r3, #127	; 0x7f
 801471c:	d101      	bne.n	8014722 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801471e:	2300      	movs	r3, #0
 8014720:	e001      	b.n	8014726 <ip4_route+0xca>
  }

  return netif_default;
 8014722:	4b05      	ldr	r3, [pc, #20]	; (8014738 <ip4_route+0xdc>)
 8014724:	681b      	ldr	r3, [r3, #0]
}
 8014726:	4618      	mov	r0, r3
 8014728:	3714      	adds	r7, #20
 801472a:	46bd      	mov	sp, r7
 801472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014730:	4770      	bx	lr
 8014732:	bf00      	nop
 8014734:	200076e4 	.word	0x200076e4
 8014738:	200076e8 	.word	0x200076e8

0801473c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b082      	sub	sp, #8
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801474a:	f003 0301 	and.w	r3, r3, #1
 801474e:	b2db      	uxtb	r3, r3
 8014750:	2b00      	cmp	r3, #0
 8014752:	d016      	beq.n	8014782 <ip4_input_accept+0x46>
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	3304      	adds	r3, #4
 8014758:	681b      	ldr	r3, [r3, #0]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d011      	beq.n	8014782 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801475e:	4b0b      	ldr	r3, [pc, #44]	; (801478c <ip4_input_accept+0x50>)
 8014760:	695a      	ldr	r2, [r3, #20]
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	3304      	adds	r3, #4
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	429a      	cmp	r2, r3
 801476a:	d008      	beq.n	801477e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801476c:	4b07      	ldr	r3, [pc, #28]	; (801478c <ip4_input_accept+0x50>)
 801476e:	695b      	ldr	r3, [r3, #20]
 8014770:	6879      	ldr	r1, [r7, #4]
 8014772:	4618      	mov	r0, r3
 8014774:	f000 fa24 	bl	8014bc0 <ip4_addr_isbroadcast_u32>
 8014778:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801477a:	2b00      	cmp	r3, #0
 801477c:	d001      	beq.n	8014782 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801477e:	2301      	movs	r3, #1
 8014780:	e000      	b.n	8014784 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014782:	2300      	movs	r3, #0
}
 8014784:	4618      	mov	r0, r3
 8014786:	3708      	adds	r7, #8
 8014788:	46bd      	mov	sp, r7
 801478a:	bd80      	pop	{r7, pc}
 801478c:	20004190 	.word	0x20004190

08014790 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014790:	b580      	push	{r7, lr}
 8014792:	b088      	sub	sp, #32
 8014794:	af00      	add	r7, sp, #0
 8014796:	6078      	str	r0, [r7, #4]
 8014798:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801479a:	2301      	movs	r3, #1
 801479c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	685b      	ldr	r3, [r3, #4]
 80147a2:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80147a4:	69fb      	ldr	r3, [r7, #28]
 80147a6:	781b      	ldrb	r3, [r3, #0]
 80147a8:	091b      	lsrs	r3, r3, #4
 80147aa:	b2db      	uxtb	r3, r3
 80147ac:	2b04      	cmp	r3, #4
 80147ae:	d004      	beq.n	80147ba <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80147b0:	6878      	ldr	r0, [r7, #4]
 80147b2:	f7f6 fdc9 	bl	800b348 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80147b6:	2300      	movs	r3, #0
 80147b8:	e121      	b.n	80149fe <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80147ba:	69fb      	ldr	r3, [r7, #28]
 80147bc:	781b      	ldrb	r3, [r3, #0]
 80147be:	f003 030f 	and.w	r3, r3, #15
 80147c2:	b2db      	uxtb	r3, r3
 80147c4:	009b      	lsls	r3, r3, #2
 80147c6:	b2db      	uxtb	r3, r3
 80147c8:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80147ca:	69fb      	ldr	r3, [r7, #28]
 80147cc:	885b      	ldrh	r3, [r3, #2]
 80147ce:	b29b      	uxth	r3, r3
 80147d0:	4618      	mov	r0, r3
 80147d2:	f7f5 fb18 	bl	8009e06 <lwip_htons>
 80147d6:	4603      	mov	r3, r0
 80147d8:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	891b      	ldrh	r3, [r3, #8]
 80147de:	8a3a      	ldrh	r2, [r7, #16]
 80147e0:	429a      	cmp	r2, r3
 80147e2:	d204      	bcs.n	80147ee <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80147e4:	8a3b      	ldrh	r3, [r7, #16]
 80147e6:	4619      	mov	r1, r3
 80147e8:	6878      	ldr	r0, [r7, #4]
 80147ea:	f7f6 fc27 	bl	800b03c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	895b      	ldrh	r3, [r3, #10]
 80147f2:	8a7a      	ldrh	r2, [r7, #18]
 80147f4:	429a      	cmp	r2, r3
 80147f6:	d807      	bhi.n	8014808 <ip4_input+0x78>
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	891b      	ldrh	r3, [r3, #8]
 80147fc:	8a3a      	ldrh	r2, [r7, #16]
 80147fe:	429a      	cmp	r2, r3
 8014800:	d802      	bhi.n	8014808 <ip4_input+0x78>
 8014802:	8a7b      	ldrh	r3, [r7, #18]
 8014804:	2b13      	cmp	r3, #19
 8014806:	d804      	bhi.n	8014812 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014808:	6878      	ldr	r0, [r7, #4]
 801480a:	f7f6 fd9d 	bl	800b348 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801480e:	2300      	movs	r3, #0
 8014810:	e0f5      	b.n	80149fe <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014812:	69fb      	ldr	r3, [r7, #28]
 8014814:	691b      	ldr	r3, [r3, #16]
 8014816:	4a7c      	ldr	r2, [pc, #496]	; (8014a08 <ip4_input+0x278>)
 8014818:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801481a:	69fb      	ldr	r3, [r7, #28]
 801481c:	68db      	ldr	r3, [r3, #12]
 801481e:	4a7a      	ldr	r2, [pc, #488]	; (8014a08 <ip4_input+0x278>)
 8014820:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014822:	4b79      	ldr	r3, [pc, #484]	; (8014a08 <ip4_input+0x278>)
 8014824:	695b      	ldr	r3, [r3, #20]
 8014826:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801482a:	2be0      	cmp	r3, #224	; 0xe0
 801482c:	d112      	bne.n	8014854 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801482e:	683b      	ldr	r3, [r7, #0]
 8014830:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014834:	f003 0301 	and.w	r3, r3, #1
 8014838:	b2db      	uxtb	r3, r3
 801483a:	2b00      	cmp	r3, #0
 801483c:	d007      	beq.n	801484e <ip4_input+0xbe>
 801483e:	683b      	ldr	r3, [r7, #0]
 8014840:	3304      	adds	r3, #4
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d002      	beq.n	801484e <ip4_input+0xbe>
      netif = inp;
 8014848:	683b      	ldr	r3, [r7, #0]
 801484a:	61bb      	str	r3, [r7, #24]
 801484c:	e02a      	b.n	80148a4 <ip4_input+0x114>
    } else {
      netif = NULL;
 801484e:	2300      	movs	r3, #0
 8014850:	61bb      	str	r3, [r7, #24]
 8014852:	e027      	b.n	80148a4 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014854:	6838      	ldr	r0, [r7, #0]
 8014856:	f7ff ff71 	bl	801473c <ip4_input_accept>
 801485a:	4603      	mov	r3, r0
 801485c:	2b00      	cmp	r3, #0
 801485e:	d002      	beq.n	8014866 <ip4_input+0xd6>
      netif = inp;
 8014860:	683b      	ldr	r3, [r7, #0]
 8014862:	61bb      	str	r3, [r7, #24]
 8014864:	e01e      	b.n	80148a4 <ip4_input+0x114>
    } else {
      netif = NULL;
 8014866:	2300      	movs	r3, #0
 8014868:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801486a:	4b67      	ldr	r3, [pc, #412]	; (8014a08 <ip4_input+0x278>)
 801486c:	695b      	ldr	r3, [r3, #20]
 801486e:	b2db      	uxtb	r3, r3
 8014870:	2b7f      	cmp	r3, #127	; 0x7f
 8014872:	d017      	beq.n	80148a4 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014874:	4b65      	ldr	r3, [pc, #404]	; (8014a0c <ip4_input+0x27c>)
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	61bb      	str	r3, [r7, #24]
 801487a:	e00e      	b.n	801489a <ip4_input+0x10a>
          if (netif == inp) {
 801487c:	69ba      	ldr	r2, [r7, #24]
 801487e:	683b      	ldr	r3, [r7, #0]
 8014880:	429a      	cmp	r2, r3
 8014882:	d006      	beq.n	8014892 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014884:	69b8      	ldr	r0, [r7, #24]
 8014886:	f7ff ff59 	bl	801473c <ip4_input_accept>
 801488a:	4603      	mov	r3, r0
 801488c:	2b00      	cmp	r3, #0
 801488e:	d108      	bne.n	80148a2 <ip4_input+0x112>
 8014890:	e000      	b.n	8014894 <ip4_input+0x104>
            continue;
 8014892:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014894:	69bb      	ldr	r3, [r7, #24]
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	61bb      	str	r3, [r7, #24]
 801489a:	69bb      	ldr	r3, [r7, #24]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d1ed      	bne.n	801487c <ip4_input+0xec>
 80148a0:	e000      	b.n	80148a4 <ip4_input+0x114>
            break;
 80148a2:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80148a4:	69bb      	ldr	r3, [r7, #24]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d111      	bne.n	80148ce <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80148aa:	69fb      	ldr	r3, [r7, #28]
 80148ac:	7a5b      	ldrb	r3, [r3, #9]
 80148ae:	2b11      	cmp	r3, #17
 80148b0:	d10d      	bne.n	80148ce <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80148b2:	8a7b      	ldrh	r3, [r7, #18]
 80148b4:	69fa      	ldr	r2, [r7, #28]
 80148b6:	4413      	add	r3, r2
 80148b8:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	885b      	ldrh	r3, [r3, #2]
 80148be:	b29b      	uxth	r3, r3
 80148c0:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80148c4:	d103      	bne.n	80148ce <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80148c6:	683b      	ldr	r3, [r7, #0]
 80148c8:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80148ca:	2300      	movs	r3, #0
 80148cc:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80148ce:	697b      	ldr	r3, [r7, #20]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d017      	beq.n	8014904 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80148d4:	4b4c      	ldr	r3, [pc, #304]	; (8014a08 <ip4_input+0x278>)
 80148d6:	691b      	ldr	r3, [r3, #16]
 80148d8:	2b00      	cmp	r3, #0
 80148da:	d013      	beq.n	8014904 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80148dc:	4b4a      	ldr	r3, [pc, #296]	; (8014a08 <ip4_input+0x278>)
 80148de:	691b      	ldr	r3, [r3, #16]
 80148e0:	6839      	ldr	r1, [r7, #0]
 80148e2:	4618      	mov	r0, r3
 80148e4:	f000 f96c 	bl	8014bc0 <ip4_addr_isbroadcast_u32>
 80148e8:	4603      	mov	r3, r0
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d105      	bne.n	80148fa <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80148ee:	4b46      	ldr	r3, [pc, #280]	; (8014a08 <ip4_input+0x278>)
 80148f0:	691b      	ldr	r3, [r3, #16]
 80148f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80148f6:	2be0      	cmp	r3, #224	; 0xe0
 80148f8:	d104      	bne.n	8014904 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80148fa:	6878      	ldr	r0, [r7, #4]
 80148fc:	f7f6 fd24 	bl	800b348 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014900:	2300      	movs	r3, #0
 8014902:	e07c      	b.n	80149fe <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014904:	69bb      	ldr	r3, [r7, #24]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d104      	bne.n	8014914 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801490a:	6878      	ldr	r0, [r7, #4]
 801490c:	f7f6 fd1c 	bl	800b348 <pbuf_free>
    return ERR_OK;
 8014910:	2300      	movs	r3, #0
 8014912:	e074      	b.n	80149fe <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014914:	69fb      	ldr	r3, [r7, #28]
 8014916:	88db      	ldrh	r3, [r3, #6]
 8014918:	b29b      	uxth	r3, r3
 801491a:	461a      	mov	r2, r3
 801491c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8014920:	4013      	ands	r3, r2
 8014922:	2b00      	cmp	r3, #0
 8014924:	d00b      	beq.n	801493e <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014926:	6878      	ldr	r0, [r7, #4]
 8014928:	f000 fc90 	bl	801524c <ip4_reass>
 801492c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d101      	bne.n	8014938 <ip4_input+0x1a8>
      return ERR_OK;
 8014934:	2300      	movs	r3, #0
 8014936:	e062      	b.n	80149fe <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	685b      	ldr	r3, [r3, #4]
 801493c:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801493e:	4a32      	ldr	r2, [pc, #200]	; (8014a08 <ip4_input+0x278>)
 8014940:	69bb      	ldr	r3, [r7, #24]
 8014942:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014944:	4a30      	ldr	r2, [pc, #192]	; (8014a08 <ip4_input+0x278>)
 8014946:	683b      	ldr	r3, [r7, #0]
 8014948:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801494a:	4a2f      	ldr	r2, [pc, #188]	; (8014a08 <ip4_input+0x278>)
 801494c:	69fb      	ldr	r3, [r7, #28]
 801494e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014950:	69fb      	ldr	r3, [r7, #28]
 8014952:	781b      	ldrb	r3, [r3, #0]
 8014954:	f003 030f 	and.w	r3, r3, #15
 8014958:	b2db      	uxtb	r3, r3
 801495a:	009b      	lsls	r3, r3, #2
 801495c:	b2db      	uxtb	r3, r3
 801495e:	b29a      	uxth	r2, r3
 8014960:	4b29      	ldr	r3, [pc, #164]	; (8014a08 <ip4_input+0x278>)
 8014962:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014964:	8a7b      	ldrh	r3, [r7, #18]
 8014966:	4619      	mov	r1, r3
 8014968:	6878      	ldr	r0, [r7, #4]
 801496a:	f7f6 fc67 	bl	800b23c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801496e:	69fb      	ldr	r3, [r7, #28]
 8014970:	7a5b      	ldrb	r3, [r3, #9]
 8014972:	2b06      	cmp	r3, #6
 8014974:	d009      	beq.n	801498a <ip4_input+0x1fa>
 8014976:	2b11      	cmp	r3, #17
 8014978:	d002      	beq.n	8014980 <ip4_input+0x1f0>
 801497a:	2b01      	cmp	r3, #1
 801497c:	d00a      	beq.n	8014994 <ip4_input+0x204>
 801497e:	e00e      	b.n	801499e <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014980:	6839      	ldr	r1, [r7, #0]
 8014982:	6878      	ldr	r0, [r7, #4]
 8014984:	f7fc face 	bl	8010f24 <udp_input>
        break;
 8014988:	e026      	b.n	80149d8 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801498a:	6839      	ldr	r1, [r7, #0]
 801498c:	6878      	ldr	r0, [r7, #4]
 801498e:	f7f8 fb07 	bl	800cfa0 <tcp_input>
        break;
 8014992:	e021      	b.n	80149d8 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014994:	6839      	ldr	r1, [r7, #0]
 8014996:	6878      	ldr	r0, [r7, #4]
 8014998:	f7ff fcd2 	bl	8014340 <icmp_input>
        break;
 801499c:	e01c      	b.n	80149d8 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801499e:	4b1a      	ldr	r3, [pc, #104]	; (8014a08 <ip4_input+0x278>)
 80149a0:	695b      	ldr	r3, [r3, #20]
 80149a2:	69b9      	ldr	r1, [r7, #24]
 80149a4:	4618      	mov	r0, r3
 80149a6:	f000 f90b 	bl	8014bc0 <ip4_addr_isbroadcast_u32>
 80149aa:	4603      	mov	r3, r0
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d10f      	bne.n	80149d0 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80149b0:	4b15      	ldr	r3, [pc, #84]	; (8014a08 <ip4_input+0x278>)
 80149b2:	695b      	ldr	r3, [r3, #20]
 80149b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80149b8:	2be0      	cmp	r3, #224	; 0xe0
 80149ba:	d009      	beq.n	80149d0 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80149bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80149c0:	4619      	mov	r1, r3
 80149c2:	6878      	ldr	r0, [r7, #4]
 80149c4:	f7f6 fcad 	bl	800b322 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80149c8:	2102      	movs	r1, #2
 80149ca:	6878      	ldr	r0, [r7, #4]
 80149cc:	f7ff fdbc 	bl	8014548 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80149d0:	6878      	ldr	r0, [r7, #4]
 80149d2:	f7f6 fcb9 	bl	800b348 <pbuf_free>
        break;
 80149d6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80149d8:	4b0b      	ldr	r3, [pc, #44]	; (8014a08 <ip4_input+0x278>)
 80149da:	2200      	movs	r2, #0
 80149dc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80149de:	4b0a      	ldr	r3, [pc, #40]	; (8014a08 <ip4_input+0x278>)
 80149e0:	2200      	movs	r2, #0
 80149e2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80149e4:	4b08      	ldr	r3, [pc, #32]	; (8014a08 <ip4_input+0x278>)
 80149e6:	2200      	movs	r2, #0
 80149e8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80149ea:	4b07      	ldr	r3, [pc, #28]	; (8014a08 <ip4_input+0x278>)
 80149ec:	2200      	movs	r2, #0
 80149ee:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80149f0:	4b05      	ldr	r3, [pc, #20]	; (8014a08 <ip4_input+0x278>)
 80149f2:	2200      	movs	r2, #0
 80149f4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80149f6:	4b04      	ldr	r3, [pc, #16]	; (8014a08 <ip4_input+0x278>)
 80149f8:	2200      	movs	r2, #0
 80149fa:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80149fc:	2300      	movs	r3, #0
}
 80149fe:	4618      	mov	r0, r3
 8014a00:	3720      	adds	r7, #32
 8014a02:	46bd      	mov	sp, r7
 8014a04:	bd80      	pop	{r7, pc}
 8014a06:	bf00      	nop
 8014a08:	20004190 	.word	0x20004190
 8014a0c:	200076e4 	.word	0x200076e4

08014a10 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b08a      	sub	sp, #40	; 0x28
 8014a14:	af04      	add	r7, sp, #16
 8014a16:	60f8      	str	r0, [r7, #12]
 8014a18:	60b9      	str	r1, [r7, #8]
 8014a1a:	607a      	str	r2, [r7, #4]
 8014a1c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014a1e:	68bb      	ldr	r3, [r7, #8]
 8014a20:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d009      	beq.n	8014a3c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014a28:	68bb      	ldr	r3, [r7, #8]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d003      	beq.n	8014a36 <ip4_output_if+0x26>
 8014a2e:	68bb      	ldr	r3, [r7, #8]
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d102      	bne.n	8014a3c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a38:	3304      	adds	r3, #4
 8014a3a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014a3c:	78fa      	ldrb	r2, [r7, #3]
 8014a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a40:	9302      	str	r3, [sp, #8]
 8014a42:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014a46:	9301      	str	r3, [sp, #4]
 8014a48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014a4c:	9300      	str	r3, [sp, #0]
 8014a4e:	4613      	mov	r3, r2
 8014a50:	687a      	ldr	r2, [r7, #4]
 8014a52:	6979      	ldr	r1, [r7, #20]
 8014a54:	68f8      	ldr	r0, [r7, #12]
 8014a56:	f000 f805 	bl	8014a64 <ip4_output_if_src>
 8014a5a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	3718      	adds	r7, #24
 8014a60:	46bd      	mov	sp, r7
 8014a62:	bd80      	pop	{r7, pc}

08014a64 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b088      	sub	sp, #32
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	60f8      	str	r0, [r7, #12]
 8014a6c:	60b9      	str	r1, [r7, #8]
 8014a6e:	607a      	str	r2, [r7, #4]
 8014a70:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	7b9b      	ldrb	r3, [r3, #14]
 8014a76:	2b01      	cmp	r3, #1
 8014a78:	d006      	beq.n	8014a88 <ip4_output_if_src+0x24>
 8014a7a:	4b4b      	ldr	r3, [pc, #300]	; (8014ba8 <ip4_output_if_src+0x144>)
 8014a7c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8014a80:	494a      	ldr	r1, [pc, #296]	; (8014bac <ip4_output_if_src+0x148>)
 8014a82:	484b      	ldr	r0, [pc, #300]	; (8014bb0 <ip4_output_if_src+0x14c>)
 8014a84:	f001 f8e6 	bl	8015c54 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d060      	beq.n	8014b50 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8014a8e:	2314      	movs	r3, #20
 8014a90:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014a92:	2114      	movs	r1, #20
 8014a94:	68f8      	ldr	r0, [r7, #12]
 8014a96:	f7f6 fbc1 	bl	800b21c <pbuf_add_header>
 8014a9a:	4603      	mov	r3, r0
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d002      	beq.n	8014aa6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014aa0:	f06f 0301 	mvn.w	r3, #1
 8014aa4:	e07c      	b.n	8014ba0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	685b      	ldr	r3, [r3, #4]
 8014aaa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	895b      	ldrh	r3, [r3, #10]
 8014ab0:	2b13      	cmp	r3, #19
 8014ab2:	d806      	bhi.n	8014ac2 <ip4_output_if_src+0x5e>
 8014ab4:	4b3c      	ldr	r3, [pc, #240]	; (8014ba8 <ip4_output_if_src+0x144>)
 8014ab6:	f240 3289 	movw	r2, #905	; 0x389
 8014aba:	493e      	ldr	r1, [pc, #248]	; (8014bb4 <ip4_output_if_src+0x150>)
 8014abc:	483c      	ldr	r0, [pc, #240]	; (8014bb0 <ip4_output_if_src+0x14c>)
 8014abe:	f001 f8c9 	bl	8015c54 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8014ac2:	69fb      	ldr	r3, [r7, #28]
 8014ac4:	78fa      	ldrb	r2, [r7, #3]
 8014ac6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014ac8:	69fb      	ldr	r3, [r7, #28]
 8014aca:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8014ace:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	681a      	ldr	r2, [r3, #0]
 8014ad4:	69fb      	ldr	r3, [r7, #28]
 8014ad6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014ad8:	8b7b      	ldrh	r3, [r7, #26]
 8014ada:	089b      	lsrs	r3, r3, #2
 8014adc:	b29b      	uxth	r3, r3
 8014ade:	b2db      	uxtb	r3, r3
 8014ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ae4:	b2da      	uxtb	r2, r3
 8014ae6:	69fb      	ldr	r3, [r7, #28]
 8014ae8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014aea:	69fb      	ldr	r3, [r7, #28]
 8014aec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014af0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	891b      	ldrh	r3, [r3, #8]
 8014af6:	4618      	mov	r0, r3
 8014af8:	f7f5 f985 	bl	8009e06 <lwip_htons>
 8014afc:	4603      	mov	r3, r0
 8014afe:	461a      	mov	r2, r3
 8014b00:	69fb      	ldr	r3, [r7, #28]
 8014b02:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014b04:	69fb      	ldr	r3, [r7, #28]
 8014b06:	2200      	movs	r2, #0
 8014b08:	719a      	strb	r2, [r3, #6]
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014b0e:	4b2a      	ldr	r3, [pc, #168]	; (8014bb8 <ip4_output_if_src+0x154>)
 8014b10:	881b      	ldrh	r3, [r3, #0]
 8014b12:	4618      	mov	r0, r3
 8014b14:	f7f5 f977 	bl	8009e06 <lwip_htons>
 8014b18:	4603      	mov	r3, r0
 8014b1a:	461a      	mov	r2, r3
 8014b1c:	69fb      	ldr	r3, [r7, #28]
 8014b1e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014b20:	4b25      	ldr	r3, [pc, #148]	; (8014bb8 <ip4_output_if_src+0x154>)
 8014b22:	881b      	ldrh	r3, [r3, #0]
 8014b24:	3301      	adds	r3, #1
 8014b26:	b29a      	uxth	r2, r3
 8014b28:	4b23      	ldr	r3, [pc, #140]	; (8014bb8 <ip4_output_if_src+0x154>)
 8014b2a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014b2c:	68bb      	ldr	r3, [r7, #8]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d104      	bne.n	8014b3c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014b32:	4b22      	ldr	r3, [pc, #136]	; (8014bbc <ip4_output_if_src+0x158>)
 8014b34:	681a      	ldr	r2, [r3, #0]
 8014b36:	69fb      	ldr	r3, [r7, #28]
 8014b38:	60da      	str	r2, [r3, #12]
 8014b3a:	e003      	b.n	8014b44 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014b3c:	68bb      	ldr	r3, [r7, #8]
 8014b3e:	681a      	ldr	r2, [r3, #0]
 8014b40:	69fb      	ldr	r3, [r7, #28]
 8014b42:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014b44:	69fb      	ldr	r3, [r7, #28]
 8014b46:	2200      	movs	r2, #0
 8014b48:	729a      	strb	r2, [r3, #10]
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	72da      	strb	r2, [r3, #11]
 8014b4e:	e00f      	b.n	8014b70 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	895b      	ldrh	r3, [r3, #10]
 8014b54:	2b13      	cmp	r3, #19
 8014b56:	d802      	bhi.n	8014b5e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014b58:	f06f 0301 	mvn.w	r3, #1
 8014b5c:	e020      	b.n	8014ba0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	685b      	ldr	r3, [r3, #4]
 8014b62:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014b64:	69fb      	ldr	r3, [r7, #28]
 8014b66:	691b      	ldr	r3, [r3, #16]
 8014b68:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8014b6a:	f107 0314 	add.w	r3, r7, #20
 8014b6e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d00c      	beq.n	8014b92 <ip4_output_if_src+0x12e>
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	891a      	ldrh	r2, [r3, #8]
 8014b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b7e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014b80:	429a      	cmp	r2, r3
 8014b82:	d906      	bls.n	8014b92 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014b84:	687a      	ldr	r2, [r7, #4]
 8014b86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014b88:	68f8      	ldr	r0, [r7, #12]
 8014b8a:	f000 fd4b 	bl	8015624 <ip4_frag>
 8014b8e:	4603      	mov	r3, r0
 8014b90:	e006      	b.n	8014ba0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8014b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b94:	695b      	ldr	r3, [r3, #20]
 8014b96:	687a      	ldr	r2, [r7, #4]
 8014b98:	68f9      	ldr	r1, [r7, #12]
 8014b9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014b9c:	4798      	blx	r3
 8014b9e:	4603      	mov	r3, r0
}
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	3720      	adds	r7, #32
 8014ba4:	46bd      	mov	sp, r7
 8014ba6:	bd80      	pop	{r7, pc}
 8014ba8:	08019430 	.word	0x08019430
 8014bac:	08019464 	.word	0x08019464
 8014bb0:	08019470 	.word	0x08019470
 8014bb4:	08019498 	.word	0x08019498
 8014bb8:	20000592 	.word	0x20000592
 8014bbc:	08028224 	.word	0x08028224

08014bc0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014bc0:	b480      	push	{r7}
 8014bc2:	b085      	sub	sp, #20
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
 8014bc8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bd4:	d002      	beq.n	8014bdc <ip4_addr_isbroadcast_u32+0x1c>
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d101      	bne.n	8014be0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014bdc:	2301      	movs	r3, #1
 8014bde:	e02a      	b.n	8014c36 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014be0:	683b      	ldr	r3, [r7, #0]
 8014be2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014be6:	f003 0302 	and.w	r3, r3, #2
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d101      	bne.n	8014bf2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014bee:	2300      	movs	r3, #0
 8014bf0:	e021      	b.n	8014c36 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014bf2:	683b      	ldr	r3, [r7, #0]
 8014bf4:	3304      	adds	r3, #4
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	687a      	ldr	r2, [r7, #4]
 8014bfa:	429a      	cmp	r2, r3
 8014bfc:	d101      	bne.n	8014c02 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014bfe:	2300      	movs	r3, #0
 8014c00:	e019      	b.n	8014c36 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014c02:	68fa      	ldr	r2, [r7, #12]
 8014c04:	683b      	ldr	r3, [r7, #0]
 8014c06:	3304      	adds	r3, #4
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	405a      	eors	r2, r3
 8014c0c:	683b      	ldr	r3, [r7, #0]
 8014c0e:	3308      	adds	r3, #8
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	4013      	ands	r3, r2
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d10d      	bne.n	8014c34 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014c18:	683b      	ldr	r3, [r7, #0]
 8014c1a:	3308      	adds	r3, #8
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	43da      	mvns	r2, r3
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014c24:	683b      	ldr	r3, [r7, #0]
 8014c26:	3308      	adds	r3, #8
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014c2c:	429a      	cmp	r2, r3
 8014c2e:	d101      	bne.n	8014c34 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014c30:	2301      	movs	r3, #1
 8014c32:	e000      	b.n	8014c36 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014c34:	2300      	movs	r3, #0
  }
}
 8014c36:	4618      	mov	r0, r3
 8014c38:	3714      	adds	r7, #20
 8014c3a:	46bd      	mov	sp, r7
 8014c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c40:	4770      	bx	lr
	...

08014c44 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b084      	sub	sp, #16
 8014c48:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014c4e:	4b12      	ldr	r3, [pc, #72]	; (8014c98 <ip_reass_tmr+0x54>)
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014c54:	e018      	b.n	8014c88 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	7fdb      	ldrb	r3, [r3, #31]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d00b      	beq.n	8014c76 <ip_reass_tmr+0x32>
      r->timer--;
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	7fdb      	ldrb	r3, [r3, #31]
 8014c62:	3b01      	subs	r3, #1
 8014c64:	b2da      	uxtb	r2, r3
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	60fb      	str	r3, [r7, #12]
 8014c74:	e008      	b.n	8014c88 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014c80:	68b9      	ldr	r1, [r7, #8]
 8014c82:	6878      	ldr	r0, [r7, #4]
 8014c84:	f000 f80a 	bl	8014c9c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d1e3      	bne.n	8014c56 <ip_reass_tmr+0x12>
    }
  }
}
 8014c8e:	bf00      	nop
 8014c90:	3710      	adds	r7, #16
 8014c92:	46bd      	mov	sp, r7
 8014c94:	bd80      	pop	{r7, pc}
 8014c96:	bf00      	nop
 8014c98:	20000594 	.word	0x20000594

08014c9c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014c9c:	b580      	push	{r7, lr}
 8014c9e:	b088      	sub	sp, #32
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	6078      	str	r0, [r7, #4]
 8014ca4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014caa:	683a      	ldr	r2, [r7, #0]
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	429a      	cmp	r2, r3
 8014cb0:	d105      	bne.n	8014cbe <ip_reass_free_complete_datagram+0x22>
 8014cb2:	4b45      	ldr	r3, [pc, #276]	; (8014dc8 <ip_reass_free_complete_datagram+0x12c>)
 8014cb4:	22ab      	movs	r2, #171	; 0xab
 8014cb6:	4945      	ldr	r1, [pc, #276]	; (8014dcc <ip_reass_free_complete_datagram+0x130>)
 8014cb8:	4845      	ldr	r0, [pc, #276]	; (8014dd0 <ip_reass_free_complete_datagram+0x134>)
 8014cba:	f000 ffcb 	bl	8015c54 <iprintf>
  if (prev != NULL) {
 8014cbe:	683b      	ldr	r3, [r7, #0]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d00a      	beq.n	8014cda <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014cc4:	683b      	ldr	r3, [r7, #0]
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	687a      	ldr	r2, [r7, #4]
 8014cca:	429a      	cmp	r2, r3
 8014ccc:	d005      	beq.n	8014cda <ip_reass_free_complete_datagram+0x3e>
 8014cce:	4b3e      	ldr	r3, [pc, #248]	; (8014dc8 <ip_reass_free_complete_datagram+0x12c>)
 8014cd0:	22ad      	movs	r2, #173	; 0xad
 8014cd2:	4940      	ldr	r1, [pc, #256]	; (8014dd4 <ip_reass_free_complete_datagram+0x138>)
 8014cd4:	483e      	ldr	r0, [pc, #248]	; (8014dd0 <ip_reass_free_complete_datagram+0x134>)
 8014cd6:	f000 ffbd 	bl	8015c54 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	685b      	ldr	r3, [r3, #4]
 8014cde:	685b      	ldr	r3, [r3, #4]
 8014ce0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014ce2:	697b      	ldr	r3, [r7, #20]
 8014ce4:	889b      	ldrh	r3, [r3, #4]
 8014ce6:	b29b      	uxth	r3, r3
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d12a      	bne.n	8014d42 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	685b      	ldr	r3, [r3, #4]
 8014cf0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014cf2:	697b      	ldr	r3, [r7, #20]
 8014cf4:	681a      	ldr	r2, [r3, #0]
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014cfa:	69bb      	ldr	r3, [r7, #24]
 8014cfc:	6858      	ldr	r0, [r3, #4]
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	3308      	adds	r3, #8
 8014d02:	2214      	movs	r2, #20
 8014d04:	4619      	mov	r1, r3
 8014d06:	f000 feea 	bl	8015ade <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014d0a:	2101      	movs	r1, #1
 8014d0c:	69b8      	ldr	r0, [r7, #24]
 8014d0e:	f7ff fc2b 	bl	8014568 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014d12:	69b8      	ldr	r0, [r7, #24]
 8014d14:	f7f6 fba0 	bl	800b458 <pbuf_clen>
 8014d18:	4603      	mov	r3, r0
 8014d1a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014d1c:	8bfa      	ldrh	r2, [r7, #30]
 8014d1e:	8a7b      	ldrh	r3, [r7, #18]
 8014d20:	4413      	add	r3, r2
 8014d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014d26:	db05      	blt.n	8014d34 <ip_reass_free_complete_datagram+0x98>
 8014d28:	4b27      	ldr	r3, [pc, #156]	; (8014dc8 <ip_reass_free_complete_datagram+0x12c>)
 8014d2a:	22bc      	movs	r2, #188	; 0xbc
 8014d2c:	492a      	ldr	r1, [pc, #168]	; (8014dd8 <ip_reass_free_complete_datagram+0x13c>)
 8014d2e:	4828      	ldr	r0, [pc, #160]	; (8014dd0 <ip_reass_free_complete_datagram+0x134>)
 8014d30:	f000 ff90 	bl	8015c54 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014d34:	8bfa      	ldrh	r2, [r7, #30]
 8014d36:	8a7b      	ldrh	r3, [r7, #18]
 8014d38:	4413      	add	r3, r2
 8014d3a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014d3c:	69b8      	ldr	r0, [r7, #24]
 8014d3e:	f7f6 fb03 	bl	800b348 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	685b      	ldr	r3, [r3, #4]
 8014d46:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014d48:	e01f      	b.n	8014d8a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014d4a:	69bb      	ldr	r3, [r7, #24]
 8014d4c:	685b      	ldr	r3, [r3, #4]
 8014d4e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014d50:	69bb      	ldr	r3, [r7, #24]
 8014d52:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014d54:	697b      	ldr	r3, [r7, #20]
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014d5a:	68f8      	ldr	r0, [r7, #12]
 8014d5c:	f7f6 fb7c 	bl	800b458 <pbuf_clen>
 8014d60:	4603      	mov	r3, r0
 8014d62:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014d64:	8bfa      	ldrh	r2, [r7, #30]
 8014d66:	8a7b      	ldrh	r3, [r7, #18]
 8014d68:	4413      	add	r3, r2
 8014d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014d6e:	db05      	blt.n	8014d7c <ip_reass_free_complete_datagram+0xe0>
 8014d70:	4b15      	ldr	r3, [pc, #84]	; (8014dc8 <ip_reass_free_complete_datagram+0x12c>)
 8014d72:	22cc      	movs	r2, #204	; 0xcc
 8014d74:	4918      	ldr	r1, [pc, #96]	; (8014dd8 <ip_reass_free_complete_datagram+0x13c>)
 8014d76:	4816      	ldr	r0, [pc, #88]	; (8014dd0 <ip_reass_free_complete_datagram+0x134>)
 8014d78:	f000 ff6c 	bl	8015c54 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014d7c:	8bfa      	ldrh	r2, [r7, #30]
 8014d7e:	8a7b      	ldrh	r3, [r7, #18]
 8014d80:	4413      	add	r3, r2
 8014d82:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014d84:	68f8      	ldr	r0, [r7, #12]
 8014d86:	f7f6 fadf 	bl	800b348 <pbuf_free>
  while (p != NULL) {
 8014d8a:	69bb      	ldr	r3, [r7, #24]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d1dc      	bne.n	8014d4a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014d90:	6839      	ldr	r1, [r7, #0]
 8014d92:	6878      	ldr	r0, [r7, #4]
 8014d94:	f000 f8c2 	bl	8014f1c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014d98:	4b10      	ldr	r3, [pc, #64]	; (8014ddc <ip_reass_free_complete_datagram+0x140>)
 8014d9a:	881b      	ldrh	r3, [r3, #0]
 8014d9c:	8bfa      	ldrh	r2, [r7, #30]
 8014d9e:	429a      	cmp	r2, r3
 8014da0:	d905      	bls.n	8014dae <ip_reass_free_complete_datagram+0x112>
 8014da2:	4b09      	ldr	r3, [pc, #36]	; (8014dc8 <ip_reass_free_complete_datagram+0x12c>)
 8014da4:	22d2      	movs	r2, #210	; 0xd2
 8014da6:	490e      	ldr	r1, [pc, #56]	; (8014de0 <ip_reass_free_complete_datagram+0x144>)
 8014da8:	4809      	ldr	r0, [pc, #36]	; (8014dd0 <ip_reass_free_complete_datagram+0x134>)
 8014daa:	f000 ff53 	bl	8015c54 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014dae:	4b0b      	ldr	r3, [pc, #44]	; (8014ddc <ip_reass_free_complete_datagram+0x140>)
 8014db0:	881a      	ldrh	r2, [r3, #0]
 8014db2:	8bfb      	ldrh	r3, [r7, #30]
 8014db4:	1ad3      	subs	r3, r2, r3
 8014db6:	b29a      	uxth	r2, r3
 8014db8:	4b08      	ldr	r3, [pc, #32]	; (8014ddc <ip_reass_free_complete_datagram+0x140>)
 8014dba:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014dbc:	8bfb      	ldrh	r3, [r7, #30]
}
 8014dbe:	4618      	mov	r0, r3
 8014dc0:	3720      	adds	r7, #32
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	bd80      	pop	{r7, pc}
 8014dc6:	bf00      	nop
 8014dc8:	080194c8 	.word	0x080194c8
 8014dcc:	08019504 	.word	0x08019504
 8014dd0:	08019510 	.word	0x08019510
 8014dd4:	08019538 	.word	0x08019538
 8014dd8:	0801954c 	.word	0x0801954c
 8014ddc:	20000598 	.word	0x20000598
 8014de0:	0801956c 	.word	0x0801956c

08014de4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b08a      	sub	sp, #40	; 0x28
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
 8014dec:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014dee:	2300      	movs	r3, #0
 8014df0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014df2:	2300      	movs	r3, #0
 8014df4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014df6:	2300      	movs	r3, #0
 8014df8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014dfe:	2300      	movs	r3, #0
 8014e00:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014e02:	4b28      	ldr	r3, [pc, #160]	; (8014ea4 <ip_reass_remove_oldest_datagram+0xc0>)
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014e08:	e030      	b.n	8014e6c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e0c:	695a      	ldr	r2, [r3, #20]
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	68db      	ldr	r3, [r3, #12]
 8014e12:	429a      	cmp	r2, r3
 8014e14:	d10c      	bne.n	8014e30 <ip_reass_remove_oldest_datagram+0x4c>
 8014e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e18:	699a      	ldr	r2, [r3, #24]
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	691b      	ldr	r3, [r3, #16]
 8014e1e:	429a      	cmp	r2, r3
 8014e20:	d106      	bne.n	8014e30 <ip_reass_remove_oldest_datagram+0x4c>
 8014e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e24:	899a      	ldrh	r2, [r3, #12]
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	889b      	ldrh	r3, [r3, #4]
 8014e2a:	b29b      	uxth	r3, r3
 8014e2c:	429a      	cmp	r2, r3
 8014e2e:	d014      	beq.n	8014e5a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014e30:	693b      	ldr	r3, [r7, #16]
 8014e32:	3301      	adds	r3, #1
 8014e34:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014e36:	6a3b      	ldr	r3, [r7, #32]
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d104      	bne.n	8014e46 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e3e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014e40:	69fb      	ldr	r3, [r7, #28]
 8014e42:	61bb      	str	r3, [r7, #24]
 8014e44:	e009      	b.n	8014e5a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8014e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e48:	7fda      	ldrb	r2, [r3, #31]
 8014e4a:	6a3b      	ldr	r3, [r7, #32]
 8014e4c:	7fdb      	ldrb	r3, [r3, #31]
 8014e4e:	429a      	cmp	r2, r3
 8014e50:	d803      	bhi.n	8014e5a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e54:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014e56:	69fb      	ldr	r3, [r7, #28]
 8014e58:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d001      	beq.n	8014e66 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e64:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8014e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d1cb      	bne.n	8014e0a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014e72:	6a3b      	ldr	r3, [r7, #32]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d008      	beq.n	8014e8a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014e78:	69b9      	ldr	r1, [r7, #24]
 8014e7a:	6a38      	ldr	r0, [r7, #32]
 8014e7c:	f7ff ff0e 	bl	8014c9c <ip_reass_free_complete_datagram>
 8014e80:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8014e82:	697a      	ldr	r2, [r7, #20]
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	4413      	add	r3, r2
 8014e88:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014e8a:	697a      	ldr	r2, [r7, #20]
 8014e8c:	683b      	ldr	r3, [r7, #0]
 8014e8e:	429a      	cmp	r2, r3
 8014e90:	da02      	bge.n	8014e98 <ip_reass_remove_oldest_datagram+0xb4>
 8014e92:	693b      	ldr	r3, [r7, #16]
 8014e94:	2b01      	cmp	r3, #1
 8014e96:	dcac      	bgt.n	8014df2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014e98:	697b      	ldr	r3, [r7, #20]
}
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	3728      	adds	r7, #40	; 0x28
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	bd80      	pop	{r7, pc}
 8014ea2:	bf00      	nop
 8014ea4:	20000594 	.word	0x20000594

08014ea8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b084      	sub	sp, #16
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	6078      	str	r0, [r7, #4]
 8014eb0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014eb2:	2004      	movs	r0, #4
 8014eb4:	f7f5 fbfc 	bl	800a6b0 <memp_malloc>
 8014eb8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014eba:	68fb      	ldr	r3, [r7, #12]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d110      	bne.n	8014ee2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014ec0:	6839      	ldr	r1, [r7, #0]
 8014ec2:	6878      	ldr	r0, [r7, #4]
 8014ec4:	f7ff ff8e 	bl	8014de4 <ip_reass_remove_oldest_datagram>
 8014ec8:	4602      	mov	r2, r0
 8014eca:	683b      	ldr	r3, [r7, #0]
 8014ecc:	4293      	cmp	r3, r2
 8014ece:	dc03      	bgt.n	8014ed8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014ed0:	2004      	movs	r0, #4
 8014ed2:	f7f5 fbed 	bl	800a6b0 <memp_malloc>
 8014ed6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d101      	bne.n	8014ee2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014ede:	2300      	movs	r3, #0
 8014ee0:	e016      	b.n	8014f10 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014ee2:	2220      	movs	r2, #32
 8014ee4:	2100      	movs	r1, #0
 8014ee6:	68f8      	ldr	r0, [r7, #12]
 8014ee8:	f000 fe04 	bl	8015af4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	220f      	movs	r2, #15
 8014ef0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014ef2:	4b09      	ldr	r3, [pc, #36]	; (8014f18 <ip_reass_enqueue_new_datagram+0x70>)
 8014ef4:	681a      	ldr	r2, [r3, #0]
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014efa:	4a07      	ldr	r2, [pc, #28]	; (8014f18 <ip_reass_enqueue_new_datagram+0x70>)
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	3308      	adds	r3, #8
 8014f04:	2214      	movs	r2, #20
 8014f06:	6879      	ldr	r1, [r7, #4]
 8014f08:	4618      	mov	r0, r3
 8014f0a:	f000 fde8 	bl	8015ade <memcpy>
  return ipr;
 8014f0e:	68fb      	ldr	r3, [r7, #12]
}
 8014f10:	4618      	mov	r0, r3
 8014f12:	3710      	adds	r7, #16
 8014f14:	46bd      	mov	sp, r7
 8014f16:	bd80      	pop	{r7, pc}
 8014f18:	20000594 	.word	0x20000594

08014f1c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014f1c:	b580      	push	{r7, lr}
 8014f1e:	b082      	sub	sp, #8
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	6078      	str	r0, [r7, #4]
 8014f24:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8014f26:	4b10      	ldr	r3, [pc, #64]	; (8014f68 <ip_reass_dequeue_datagram+0x4c>)
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	687a      	ldr	r2, [r7, #4]
 8014f2c:	429a      	cmp	r2, r3
 8014f2e:	d104      	bne.n	8014f3a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	4a0c      	ldr	r2, [pc, #48]	; (8014f68 <ip_reass_dequeue_datagram+0x4c>)
 8014f36:	6013      	str	r3, [r2, #0]
 8014f38:	e00d      	b.n	8014f56 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8014f3a:	683b      	ldr	r3, [r7, #0]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d106      	bne.n	8014f4e <ip_reass_dequeue_datagram+0x32>
 8014f40:	4b0a      	ldr	r3, [pc, #40]	; (8014f6c <ip_reass_dequeue_datagram+0x50>)
 8014f42:	f240 1245 	movw	r2, #325	; 0x145
 8014f46:	490a      	ldr	r1, [pc, #40]	; (8014f70 <ip_reass_dequeue_datagram+0x54>)
 8014f48:	480a      	ldr	r0, [pc, #40]	; (8014f74 <ip_reass_dequeue_datagram+0x58>)
 8014f4a:	f000 fe83 	bl	8015c54 <iprintf>
    prev->next = ipr->next;
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	681a      	ldr	r2, [r3, #0]
 8014f52:	683b      	ldr	r3, [r7, #0]
 8014f54:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8014f56:	6879      	ldr	r1, [r7, #4]
 8014f58:	2004      	movs	r0, #4
 8014f5a:	f7f5 fbf5 	bl	800a748 <memp_free>
}
 8014f5e:	bf00      	nop
 8014f60:	3708      	adds	r7, #8
 8014f62:	46bd      	mov	sp, r7
 8014f64:	bd80      	pop	{r7, pc}
 8014f66:	bf00      	nop
 8014f68:	20000594 	.word	0x20000594
 8014f6c:	080194c8 	.word	0x080194c8
 8014f70:	08019590 	.word	0x08019590
 8014f74:	08019510 	.word	0x08019510

08014f78 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014f78:	b580      	push	{r7, lr}
 8014f7a:	b08c      	sub	sp, #48	; 0x30
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	60f8      	str	r0, [r7, #12]
 8014f80:	60b9      	str	r1, [r7, #8]
 8014f82:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014f84:	2300      	movs	r3, #0
 8014f86:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014f88:	2301      	movs	r3, #1
 8014f8a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014f8c:	68bb      	ldr	r3, [r7, #8]
 8014f8e:	685b      	ldr	r3, [r3, #4]
 8014f90:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014f92:	69fb      	ldr	r3, [r7, #28]
 8014f94:	885b      	ldrh	r3, [r3, #2]
 8014f96:	b29b      	uxth	r3, r3
 8014f98:	4618      	mov	r0, r3
 8014f9a:	f7f4 ff34 	bl	8009e06 <lwip_htons>
 8014f9e:	4603      	mov	r3, r0
 8014fa0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8014fa2:	69fb      	ldr	r3, [r7, #28]
 8014fa4:	781b      	ldrb	r3, [r3, #0]
 8014fa6:	f003 030f 	and.w	r3, r3, #15
 8014faa:	b2db      	uxtb	r3, r3
 8014fac:	009b      	lsls	r3, r3, #2
 8014fae:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014fb0:	7e7b      	ldrb	r3, [r7, #25]
 8014fb2:	b29b      	uxth	r3, r3
 8014fb4:	8b7a      	ldrh	r2, [r7, #26]
 8014fb6:	429a      	cmp	r2, r3
 8014fb8:	d202      	bcs.n	8014fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014fba:	f04f 33ff 	mov.w	r3, #4294967295
 8014fbe:	e135      	b.n	801522c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014fc0:	7e7b      	ldrb	r3, [r7, #25]
 8014fc2:	b29b      	uxth	r3, r3
 8014fc4:	8b7a      	ldrh	r2, [r7, #26]
 8014fc6:	1ad3      	subs	r3, r2, r3
 8014fc8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014fca:	69fb      	ldr	r3, [r7, #28]
 8014fcc:	88db      	ldrh	r3, [r3, #6]
 8014fce:	b29b      	uxth	r3, r3
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	f7f4 ff18 	bl	8009e06 <lwip_htons>
 8014fd6:	4603      	mov	r3, r0
 8014fd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014fdc:	b29b      	uxth	r3, r3
 8014fde:	00db      	lsls	r3, r3, #3
 8014fe0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8014fe2:	68bb      	ldr	r3, [r7, #8]
 8014fe4:	685b      	ldr	r3, [r3, #4]
 8014fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fea:	2200      	movs	r2, #0
 8014fec:	701a      	strb	r2, [r3, #0]
 8014fee:	2200      	movs	r2, #0
 8014ff0:	705a      	strb	r2, [r3, #1]
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	709a      	strb	r2, [r3, #2]
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ffc:	8afa      	ldrh	r2, [r7, #22]
 8014ffe:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015000:	8afa      	ldrh	r2, [r7, #22]
 8015002:	8b7b      	ldrh	r3, [r7, #26]
 8015004:	4413      	add	r3, r2
 8015006:	b29a      	uxth	r2, r3
 8015008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801500a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801500c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801500e:	88db      	ldrh	r3, [r3, #6]
 8015010:	b29b      	uxth	r3, r3
 8015012:	8afa      	ldrh	r2, [r7, #22]
 8015014:	429a      	cmp	r2, r3
 8015016:	d902      	bls.n	801501e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015018:	f04f 33ff 	mov.w	r3, #4294967295
 801501c:	e106      	b.n	801522c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	685b      	ldr	r3, [r3, #4]
 8015022:	627b      	str	r3, [r7, #36]	; 0x24
 8015024:	e068      	b.n	80150f8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015028:	685b      	ldr	r3, [r3, #4]
 801502a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801502c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801502e:	889b      	ldrh	r3, [r3, #4]
 8015030:	b29a      	uxth	r2, r3
 8015032:	693b      	ldr	r3, [r7, #16]
 8015034:	889b      	ldrh	r3, [r3, #4]
 8015036:	b29b      	uxth	r3, r3
 8015038:	429a      	cmp	r2, r3
 801503a:	d235      	bcs.n	80150a8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801503c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801503e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015040:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015044:	2b00      	cmp	r3, #0
 8015046:	d020      	beq.n	801508a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801504a:	889b      	ldrh	r3, [r3, #4]
 801504c:	b29a      	uxth	r2, r3
 801504e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015050:	88db      	ldrh	r3, [r3, #6]
 8015052:	b29b      	uxth	r3, r3
 8015054:	429a      	cmp	r2, r3
 8015056:	d307      	bcc.n	8015068 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801505a:	88db      	ldrh	r3, [r3, #6]
 801505c:	b29a      	uxth	r2, r3
 801505e:	693b      	ldr	r3, [r7, #16]
 8015060:	889b      	ldrh	r3, [r3, #4]
 8015062:	b29b      	uxth	r3, r3
 8015064:	429a      	cmp	r2, r3
 8015066:	d902      	bls.n	801506e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015068:	f04f 33ff 	mov.w	r3, #4294967295
 801506c:	e0de      	b.n	801522c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801506e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015070:	68ba      	ldr	r2, [r7, #8]
 8015072:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015076:	88db      	ldrh	r3, [r3, #6]
 8015078:	b29a      	uxth	r2, r3
 801507a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801507c:	889b      	ldrh	r3, [r3, #4]
 801507e:	b29b      	uxth	r3, r3
 8015080:	429a      	cmp	r2, r3
 8015082:	d03d      	beq.n	8015100 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015084:	2300      	movs	r3, #0
 8015086:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015088:	e03a      	b.n	8015100 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801508a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801508c:	88db      	ldrh	r3, [r3, #6]
 801508e:	b29a      	uxth	r2, r3
 8015090:	693b      	ldr	r3, [r7, #16]
 8015092:	889b      	ldrh	r3, [r3, #4]
 8015094:	b29b      	uxth	r3, r3
 8015096:	429a      	cmp	r2, r3
 8015098:	d902      	bls.n	80150a0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801509a:	f04f 33ff 	mov.w	r3, #4294967295
 801509e:	e0c5      	b.n	801522c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	68ba      	ldr	r2, [r7, #8]
 80150a4:	605a      	str	r2, [r3, #4]
      break;
 80150a6:	e02b      	b.n	8015100 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80150a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150aa:	889b      	ldrh	r3, [r3, #4]
 80150ac:	b29a      	uxth	r2, r3
 80150ae:	693b      	ldr	r3, [r7, #16]
 80150b0:	889b      	ldrh	r3, [r3, #4]
 80150b2:	b29b      	uxth	r3, r3
 80150b4:	429a      	cmp	r2, r3
 80150b6:	d102      	bne.n	80150be <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80150b8:	f04f 33ff 	mov.w	r3, #4294967295
 80150bc:	e0b6      	b.n	801522c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80150be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150c0:	889b      	ldrh	r3, [r3, #4]
 80150c2:	b29a      	uxth	r2, r3
 80150c4:	693b      	ldr	r3, [r7, #16]
 80150c6:	88db      	ldrh	r3, [r3, #6]
 80150c8:	b29b      	uxth	r3, r3
 80150ca:	429a      	cmp	r2, r3
 80150cc:	d202      	bcs.n	80150d4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80150ce:	f04f 33ff 	mov.w	r3, #4294967295
 80150d2:	e0ab      	b.n	801522c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80150d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d009      	beq.n	80150ee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80150da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150dc:	88db      	ldrh	r3, [r3, #6]
 80150de:	b29a      	uxth	r2, r3
 80150e0:	693b      	ldr	r3, [r7, #16]
 80150e2:	889b      	ldrh	r3, [r3, #4]
 80150e4:	b29b      	uxth	r3, r3
 80150e6:	429a      	cmp	r2, r3
 80150e8:	d001      	beq.n	80150ee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80150ea:	2300      	movs	r3, #0
 80150ec:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80150ee:	693b      	ldr	r3, [r7, #16]
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80150f4:	693b      	ldr	r3, [r7, #16]
 80150f6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80150f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d193      	bne.n	8015026 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80150fe:	e000      	b.n	8015102 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015100:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015104:	2b00      	cmp	r3, #0
 8015106:	d12d      	bne.n	8015164 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801510a:	2b00      	cmp	r3, #0
 801510c:	d01c      	beq.n	8015148 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801510e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015110:	88db      	ldrh	r3, [r3, #6]
 8015112:	b29a      	uxth	r2, r3
 8015114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015116:	889b      	ldrh	r3, [r3, #4]
 8015118:	b29b      	uxth	r3, r3
 801511a:	429a      	cmp	r2, r3
 801511c:	d906      	bls.n	801512c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801511e:	4b45      	ldr	r3, [pc, #276]	; (8015234 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015120:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015124:	4944      	ldr	r1, [pc, #272]	; (8015238 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015126:	4845      	ldr	r0, [pc, #276]	; (801523c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015128:	f000 fd94 	bl	8015c54 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801512c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801512e:	68ba      	ldr	r2, [r7, #8]
 8015130:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015134:	88db      	ldrh	r3, [r3, #6]
 8015136:	b29a      	uxth	r2, r3
 8015138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801513a:	889b      	ldrh	r3, [r3, #4]
 801513c:	b29b      	uxth	r3, r3
 801513e:	429a      	cmp	r2, r3
 8015140:	d010      	beq.n	8015164 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015142:	2300      	movs	r3, #0
 8015144:	623b      	str	r3, [r7, #32]
 8015146:	e00d      	b.n	8015164 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	685b      	ldr	r3, [r3, #4]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d006      	beq.n	801515e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015150:	4b38      	ldr	r3, [pc, #224]	; (8015234 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015152:	f240 12bf 	movw	r2, #447	; 0x1bf
 8015156:	493a      	ldr	r1, [pc, #232]	; (8015240 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015158:	4838      	ldr	r0, [pc, #224]	; (801523c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801515a:	f000 fd7b 	bl	8015c54 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	68ba      	ldr	r2, [r7, #8]
 8015162:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	2b00      	cmp	r3, #0
 8015168:	d105      	bne.n	8015176 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	7f9b      	ldrb	r3, [r3, #30]
 801516e:	f003 0301 	and.w	r3, r3, #1
 8015172:	2b00      	cmp	r3, #0
 8015174:	d059      	beq.n	801522a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015176:	6a3b      	ldr	r3, [r7, #32]
 8015178:	2b00      	cmp	r3, #0
 801517a:	d04f      	beq.n	801521c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	685b      	ldr	r3, [r3, #4]
 8015180:	2b00      	cmp	r3, #0
 8015182:	d006      	beq.n	8015192 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	685b      	ldr	r3, [r3, #4]
 8015188:	685b      	ldr	r3, [r3, #4]
 801518a:	889b      	ldrh	r3, [r3, #4]
 801518c:	b29b      	uxth	r3, r3
 801518e:	2b00      	cmp	r3, #0
 8015190:	d002      	beq.n	8015198 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015192:	2300      	movs	r3, #0
 8015194:	623b      	str	r3, [r7, #32]
 8015196:	e041      	b.n	801521c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801519a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801519c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80151a2:	e012      	b.n	80151ca <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80151a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151a6:	685b      	ldr	r3, [r3, #4]
 80151a8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80151aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151ac:	88db      	ldrh	r3, [r3, #6]
 80151ae:	b29a      	uxth	r2, r3
 80151b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151b2:	889b      	ldrh	r3, [r3, #4]
 80151b4:	b29b      	uxth	r3, r3
 80151b6:	429a      	cmp	r2, r3
 80151b8:	d002      	beq.n	80151c0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80151ba:	2300      	movs	r3, #0
 80151bc:	623b      	str	r3, [r7, #32]
            break;
 80151be:	e007      	b.n	80151d0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80151c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151c2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80151c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80151ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d1e9      	bne.n	80151a4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80151d0:	6a3b      	ldr	r3, [r7, #32]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d022      	beq.n	801521c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	685b      	ldr	r3, [r3, #4]
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d106      	bne.n	80151ec <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80151de:	4b15      	ldr	r3, [pc, #84]	; (8015234 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80151e0:	f240 12df 	movw	r2, #479	; 0x1df
 80151e4:	4917      	ldr	r1, [pc, #92]	; (8015244 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80151e6:	4815      	ldr	r0, [pc, #84]	; (801523c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80151e8:	f000 fd34 	bl	8015c54 <iprintf>
          LWIP_ASSERT("sanity check",
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	685b      	ldr	r3, [r3, #4]
 80151f0:	685b      	ldr	r3, [r3, #4]
 80151f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80151f4:	429a      	cmp	r2, r3
 80151f6:	d106      	bne.n	8015206 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80151f8:	4b0e      	ldr	r3, [pc, #56]	; (8015234 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80151fa:	f240 12e1 	movw	r2, #481	; 0x1e1
 80151fe:	4911      	ldr	r1, [pc, #68]	; (8015244 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015200:	480e      	ldr	r0, [pc, #56]	; (801523c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015202:	f000 fd27 	bl	8015c54 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d006      	beq.n	801521c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801520e:	4b09      	ldr	r3, [pc, #36]	; (8015234 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015210:	f240 12e3 	movw	r2, #483	; 0x1e3
 8015214:	490c      	ldr	r1, [pc, #48]	; (8015248 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015216:	4809      	ldr	r0, [pc, #36]	; (801523c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015218:	f000 fd1c 	bl	8015c54 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801521c:	6a3b      	ldr	r3, [r7, #32]
 801521e:	2b00      	cmp	r3, #0
 8015220:	bf14      	ite	ne
 8015222:	2301      	movne	r3, #1
 8015224:	2300      	moveq	r3, #0
 8015226:	b2db      	uxtb	r3, r3
 8015228:	e000      	b.n	801522c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801522a:	2300      	movs	r3, #0
}
 801522c:	4618      	mov	r0, r3
 801522e:	3730      	adds	r7, #48	; 0x30
 8015230:	46bd      	mov	sp, r7
 8015232:	bd80      	pop	{r7, pc}
 8015234:	080194c8 	.word	0x080194c8
 8015238:	080195ac 	.word	0x080195ac
 801523c:	08019510 	.word	0x08019510
 8015240:	080195cc 	.word	0x080195cc
 8015244:	08019604 	.word	0x08019604
 8015248:	08019614 	.word	0x08019614

0801524c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801524c:	b580      	push	{r7, lr}
 801524e:	b08e      	sub	sp, #56	; 0x38
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	685b      	ldr	r3, [r3, #4]
 8015258:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801525a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801525c:	781b      	ldrb	r3, [r3, #0]
 801525e:	f003 030f 	and.w	r3, r3, #15
 8015262:	b2db      	uxtb	r3, r3
 8015264:	009b      	lsls	r3, r3, #2
 8015266:	b2db      	uxtb	r3, r3
 8015268:	2b14      	cmp	r3, #20
 801526a:	f040 8167 	bne.w	801553c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801526e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015270:	88db      	ldrh	r3, [r3, #6]
 8015272:	b29b      	uxth	r3, r3
 8015274:	4618      	mov	r0, r3
 8015276:	f7f4 fdc6 	bl	8009e06 <lwip_htons>
 801527a:	4603      	mov	r3, r0
 801527c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015280:	b29b      	uxth	r3, r3
 8015282:	00db      	lsls	r3, r3, #3
 8015284:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015288:	885b      	ldrh	r3, [r3, #2]
 801528a:	b29b      	uxth	r3, r3
 801528c:	4618      	mov	r0, r3
 801528e:	f7f4 fdba 	bl	8009e06 <lwip_htons>
 8015292:	4603      	mov	r3, r0
 8015294:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015298:	781b      	ldrb	r3, [r3, #0]
 801529a:	f003 030f 	and.w	r3, r3, #15
 801529e:	b2db      	uxtb	r3, r3
 80152a0:	009b      	lsls	r3, r3, #2
 80152a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80152a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80152aa:	b29b      	uxth	r3, r3
 80152ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80152ae:	429a      	cmp	r2, r3
 80152b0:	f0c0 8146 	bcc.w	8015540 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80152b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80152b8:	b29b      	uxth	r3, r3
 80152ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80152bc:	1ad3      	subs	r3, r2, r3
 80152be:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80152c0:	6878      	ldr	r0, [r7, #4]
 80152c2:	f7f6 f8c9 	bl	800b458 <pbuf_clen>
 80152c6:	4603      	mov	r3, r0
 80152c8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80152ca:	4ba3      	ldr	r3, [pc, #652]	; (8015558 <ip4_reass+0x30c>)
 80152cc:	881b      	ldrh	r3, [r3, #0]
 80152ce:	461a      	mov	r2, r3
 80152d0:	8c3b      	ldrh	r3, [r7, #32]
 80152d2:	4413      	add	r3, r2
 80152d4:	2b0a      	cmp	r3, #10
 80152d6:	dd10      	ble.n	80152fa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80152d8:	8c3b      	ldrh	r3, [r7, #32]
 80152da:	4619      	mov	r1, r3
 80152dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80152de:	f7ff fd81 	bl	8014de4 <ip_reass_remove_oldest_datagram>
 80152e2:	4603      	mov	r3, r0
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	f000 812d 	beq.w	8015544 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80152ea:	4b9b      	ldr	r3, [pc, #620]	; (8015558 <ip4_reass+0x30c>)
 80152ec:	881b      	ldrh	r3, [r3, #0]
 80152ee:	461a      	mov	r2, r3
 80152f0:	8c3b      	ldrh	r3, [r7, #32]
 80152f2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80152f4:	2b0a      	cmp	r3, #10
 80152f6:	f300 8125 	bgt.w	8015544 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80152fa:	4b98      	ldr	r3, [pc, #608]	; (801555c <ip4_reass+0x310>)
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	633b      	str	r3, [r7, #48]	; 0x30
 8015300:	e015      	b.n	801532e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015304:	695a      	ldr	r2, [r3, #20]
 8015306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015308:	68db      	ldr	r3, [r3, #12]
 801530a:	429a      	cmp	r2, r3
 801530c:	d10c      	bne.n	8015328 <ip4_reass+0xdc>
 801530e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015310:	699a      	ldr	r2, [r3, #24]
 8015312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015314:	691b      	ldr	r3, [r3, #16]
 8015316:	429a      	cmp	r2, r3
 8015318:	d106      	bne.n	8015328 <ip4_reass+0xdc>
 801531a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801531c:	899a      	ldrh	r2, [r3, #12]
 801531e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015320:	889b      	ldrh	r3, [r3, #4]
 8015322:	b29b      	uxth	r3, r3
 8015324:	429a      	cmp	r2, r3
 8015326:	d006      	beq.n	8015336 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	633b      	str	r3, [r7, #48]	; 0x30
 801532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015330:	2b00      	cmp	r3, #0
 8015332:	d1e6      	bne.n	8015302 <ip4_reass+0xb6>
 8015334:	e000      	b.n	8015338 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015336:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801533a:	2b00      	cmp	r3, #0
 801533c:	d109      	bne.n	8015352 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801533e:	8c3b      	ldrh	r3, [r7, #32]
 8015340:	4619      	mov	r1, r3
 8015342:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015344:	f7ff fdb0 	bl	8014ea8 <ip_reass_enqueue_new_datagram>
 8015348:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801534a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801534c:	2b00      	cmp	r3, #0
 801534e:	d11c      	bne.n	801538a <ip4_reass+0x13e>
      goto nullreturn;
 8015350:	e0f9      	b.n	8015546 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015354:	88db      	ldrh	r3, [r3, #6]
 8015356:	b29b      	uxth	r3, r3
 8015358:	4618      	mov	r0, r3
 801535a:	f7f4 fd54 	bl	8009e06 <lwip_htons>
 801535e:	4603      	mov	r3, r0
 8015360:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015364:	2b00      	cmp	r3, #0
 8015366:	d110      	bne.n	801538a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801536a:	89db      	ldrh	r3, [r3, #14]
 801536c:	4618      	mov	r0, r3
 801536e:	f7f4 fd4a 	bl	8009e06 <lwip_htons>
 8015372:	4603      	mov	r3, r0
 8015374:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015378:	2b00      	cmp	r3, #0
 801537a:	d006      	beq.n	801538a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801537e:	3308      	adds	r3, #8
 8015380:	2214      	movs	r2, #20
 8015382:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015384:	4618      	mov	r0, r3
 8015386:	f000 fbaa 	bl	8015ade <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801538a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801538c:	88db      	ldrh	r3, [r3, #6]
 801538e:	b29b      	uxth	r3, r3
 8015390:	f003 0320 	and.w	r3, r3, #32
 8015394:	2b00      	cmp	r3, #0
 8015396:	bf0c      	ite	eq
 8015398:	2301      	moveq	r3, #1
 801539a:	2300      	movne	r3, #0
 801539c:	b2db      	uxtb	r3, r3
 801539e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80153a0:	69fb      	ldr	r3, [r7, #28]
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d00e      	beq.n	80153c4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80153a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80153a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80153aa:	4413      	add	r3, r2
 80153ac:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80153ae:	8b7a      	ldrh	r2, [r7, #26]
 80153b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80153b2:	429a      	cmp	r2, r3
 80153b4:	f0c0 80a0 	bcc.w	80154f8 <ip4_reass+0x2ac>
 80153b8:	8b7b      	ldrh	r3, [r7, #26]
 80153ba:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80153be:	4293      	cmp	r3, r2
 80153c0:	f200 809a 	bhi.w	80154f8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80153c4:	69fa      	ldr	r2, [r7, #28]
 80153c6:	6879      	ldr	r1, [r7, #4]
 80153c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80153ca:	f7ff fdd5 	bl	8014f78 <ip_reass_chain_frag_into_datagram_and_validate>
 80153ce:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80153d0:	697b      	ldr	r3, [r7, #20]
 80153d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153d6:	f000 8091 	beq.w	80154fc <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80153da:	4b5f      	ldr	r3, [pc, #380]	; (8015558 <ip4_reass+0x30c>)
 80153dc:	881a      	ldrh	r2, [r3, #0]
 80153de:	8c3b      	ldrh	r3, [r7, #32]
 80153e0:	4413      	add	r3, r2
 80153e2:	b29a      	uxth	r2, r3
 80153e4:	4b5c      	ldr	r3, [pc, #368]	; (8015558 <ip4_reass+0x30c>)
 80153e6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80153e8:	69fb      	ldr	r3, [r7, #28]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d00d      	beq.n	801540a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80153ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80153f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80153f2:	4413      	add	r3, r2
 80153f4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80153f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153f8:	8a7a      	ldrh	r2, [r7, #18]
 80153fa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80153fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153fe:	7f9b      	ldrb	r3, [r3, #30]
 8015400:	f043 0301 	orr.w	r3, r3, #1
 8015404:	b2da      	uxtb	r2, r3
 8015406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015408:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801540a:	697b      	ldr	r3, [r7, #20]
 801540c:	2b01      	cmp	r3, #1
 801540e:	d171      	bne.n	80154f4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015412:	8b9b      	ldrh	r3, [r3, #28]
 8015414:	3314      	adds	r3, #20
 8015416:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801541a:	685b      	ldr	r3, [r3, #4]
 801541c:	685b      	ldr	r3, [r3, #4]
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015424:	685b      	ldr	r3, [r3, #4]
 8015426:	685b      	ldr	r3, [r3, #4]
 8015428:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801542c:	3308      	adds	r3, #8
 801542e:	2214      	movs	r2, #20
 8015430:	4619      	mov	r1, r3
 8015432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015434:	f000 fb53 	bl	8015ade <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015438:	8a3b      	ldrh	r3, [r7, #16]
 801543a:	4618      	mov	r0, r3
 801543c:	f7f4 fce3 	bl	8009e06 <lwip_htons>
 8015440:	4603      	mov	r3, r0
 8015442:	461a      	mov	r2, r3
 8015444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015446:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801544a:	2200      	movs	r2, #0
 801544c:	719a      	strb	r2, [r3, #6]
 801544e:	2200      	movs	r2, #0
 8015450:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015454:	2200      	movs	r2, #0
 8015456:	729a      	strb	r2, [r3, #10]
 8015458:	2200      	movs	r2, #0
 801545a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801545c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801545e:	685b      	ldr	r3, [r3, #4]
 8015460:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015462:	e00d      	b.n	8015480 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015466:	685b      	ldr	r3, [r3, #4]
 8015468:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801546a:	2114      	movs	r1, #20
 801546c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801546e:	f7f5 fee5 	bl	800b23c <pbuf_remove_header>
      pbuf_cat(p, r);
 8015472:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015474:	6878      	ldr	r0, [r7, #4]
 8015476:	f7f6 f829 	bl	800b4cc <pbuf_cat>
      r = iprh->next_pbuf;
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015482:	2b00      	cmp	r3, #0
 8015484:	d1ee      	bne.n	8015464 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015486:	4b35      	ldr	r3, [pc, #212]	; (801555c <ip4_reass+0x310>)
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801548c:	429a      	cmp	r2, r3
 801548e:	d102      	bne.n	8015496 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015490:	2300      	movs	r3, #0
 8015492:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015494:	e010      	b.n	80154b8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015496:	4b31      	ldr	r3, [pc, #196]	; (801555c <ip4_reass+0x310>)
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801549c:	e007      	b.n	80154ae <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801549e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80154a4:	429a      	cmp	r2, r3
 80154a6:	d006      	beq.n	80154b6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80154a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80154ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d1f4      	bne.n	801549e <ip4_reass+0x252>
 80154b4:	e000      	b.n	80154b8 <ip4_reass+0x26c>
          break;
 80154b6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80154b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80154ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80154bc:	f7ff fd2e 	bl	8014f1c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80154c0:	6878      	ldr	r0, [r7, #4]
 80154c2:	f7f5 ffc9 	bl	800b458 <pbuf_clen>
 80154c6:	4603      	mov	r3, r0
 80154c8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80154ca:	4b23      	ldr	r3, [pc, #140]	; (8015558 <ip4_reass+0x30c>)
 80154cc:	881b      	ldrh	r3, [r3, #0]
 80154ce:	8c3a      	ldrh	r2, [r7, #32]
 80154d0:	429a      	cmp	r2, r3
 80154d2:	d906      	bls.n	80154e2 <ip4_reass+0x296>
 80154d4:	4b22      	ldr	r3, [pc, #136]	; (8015560 <ip4_reass+0x314>)
 80154d6:	f240 229b 	movw	r2, #667	; 0x29b
 80154da:	4922      	ldr	r1, [pc, #136]	; (8015564 <ip4_reass+0x318>)
 80154dc:	4822      	ldr	r0, [pc, #136]	; (8015568 <ip4_reass+0x31c>)
 80154de:	f000 fbb9 	bl	8015c54 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80154e2:	4b1d      	ldr	r3, [pc, #116]	; (8015558 <ip4_reass+0x30c>)
 80154e4:	881a      	ldrh	r2, [r3, #0]
 80154e6:	8c3b      	ldrh	r3, [r7, #32]
 80154e8:	1ad3      	subs	r3, r2, r3
 80154ea:	b29a      	uxth	r2, r3
 80154ec:	4b1a      	ldr	r3, [pc, #104]	; (8015558 <ip4_reass+0x30c>)
 80154ee:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	e02c      	b.n	801554e <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80154f4:	2300      	movs	r3, #0
 80154f6:	e02a      	b.n	801554e <ip4_reass+0x302>

nullreturn_ipr:
 80154f8:	bf00      	nop
 80154fa:	e000      	b.n	80154fe <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80154fc:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80154fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015500:	2b00      	cmp	r3, #0
 8015502:	d106      	bne.n	8015512 <ip4_reass+0x2c6>
 8015504:	4b16      	ldr	r3, [pc, #88]	; (8015560 <ip4_reass+0x314>)
 8015506:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801550a:	4918      	ldr	r1, [pc, #96]	; (801556c <ip4_reass+0x320>)
 801550c:	4816      	ldr	r0, [pc, #88]	; (8015568 <ip4_reass+0x31c>)
 801550e:	f000 fba1 	bl	8015c54 <iprintf>
  if (ipr->p == NULL) {
 8015512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015514:	685b      	ldr	r3, [r3, #4]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d114      	bne.n	8015544 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801551a:	4b10      	ldr	r3, [pc, #64]	; (801555c <ip4_reass+0x310>)
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015520:	429a      	cmp	r2, r3
 8015522:	d006      	beq.n	8015532 <ip4_reass+0x2e6>
 8015524:	4b0e      	ldr	r3, [pc, #56]	; (8015560 <ip4_reass+0x314>)
 8015526:	f240 22ab 	movw	r2, #683	; 0x2ab
 801552a:	4911      	ldr	r1, [pc, #68]	; (8015570 <ip4_reass+0x324>)
 801552c:	480e      	ldr	r0, [pc, #56]	; (8015568 <ip4_reass+0x31c>)
 801552e:	f000 fb91 	bl	8015c54 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015532:	2100      	movs	r1, #0
 8015534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015536:	f7ff fcf1 	bl	8014f1c <ip_reass_dequeue_datagram>
 801553a:	e004      	b.n	8015546 <ip4_reass+0x2fa>
    goto nullreturn;
 801553c:	bf00      	nop
 801553e:	e002      	b.n	8015546 <ip4_reass+0x2fa>
    goto nullreturn;
 8015540:	bf00      	nop
 8015542:	e000      	b.n	8015546 <ip4_reass+0x2fa>
  }

nullreturn:
 8015544:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015546:	6878      	ldr	r0, [r7, #4]
 8015548:	f7f5 fefe 	bl	800b348 <pbuf_free>
  return NULL;
 801554c:	2300      	movs	r3, #0
}
 801554e:	4618      	mov	r0, r3
 8015550:	3738      	adds	r7, #56	; 0x38
 8015552:	46bd      	mov	sp, r7
 8015554:	bd80      	pop	{r7, pc}
 8015556:	bf00      	nop
 8015558:	20000598 	.word	0x20000598
 801555c:	20000594 	.word	0x20000594
 8015560:	080194c8 	.word	0x080194c8
 8015564:	08019638 	.word	0x08019638
 8015568:	08019510 	.word	0x08019510
 801556c:	08019654 	.word	0x08019654
 8015570:	08019660 	.word	0x08019660

08015574 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015574:	b580      	push	{r7, lr}
 8015576:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015578:	2005      	movs	r0, #5
 801557a:	f7f5 f899 	bl	800a6b0 <memp_malloc>
 801557e:	4603      	mov	r3, r0
}
 8015580:	4618      	mov	r0, r3
 8015582:	bd80      	pop	{r7, pc}

08015584 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015584:	b580      	push	{r7, lr}
 8015586:	b082      	sub	sp, #8
 8015588:	af00      	add	r7, sp, #0
 801558a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	2b00      	cmp	r3, #0
 8015590:	d106      	bne.n	80155a0 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015592:	4b07      	ldr	r3, [pc, #28]	; (80155b0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015594:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015598:	4906      	ldr	r1, [pc, #24]	; (80155b4 <ip_frag_free_pbuf_custom_ref+0x30>)
 801559a:	4807      	ldr	r0, [pc, #28]	; (80155b8 <ip_frag_free_pbuf_custom_ref+0x34>)
 801559c:	f000 fb5a 	bl	8015c54 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80155a0:	6879      	ldr	r1, [r7, #4]
 80155a2:	2005      	movs	r0, #5
 80155a4:	f7f5 f8d0 	bl	800a748 <memp_free>
}
 80155a8:	bf00      	nop
 80155aa:	3708      	adds	r7, #8
 80155ac:	46bd      	mov	sp, r7
 80155ae:	bd80      	pop	{r7, pc}
 80155b0:	080194c8 	.word	0x080194c8
 80155b4:	08019680 	.word	0x08019680
 80155b8:	08019510 	.word	0x08019510

080155bc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b084      	sub	sp, #16
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80155c8:	68fb      	ldr	r3, [r7, #12]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d106      	bne.n	80155dc <ipfrag_free_pbuf_custom+0x20>
 80155ce:	4b11      	ldr	r3, [pc, #68]	; (8015614 <ipfrag_free_pbuf_custom+0x58>)
 80155d0:	f240 22ce 	movw	r2, #718	; 0x2ce
 80155d4:	4910      	ldr	r1, [pc, #64]	; (8015618 <ipfrag_free_pbuf_custom+0x5c>)
 80155d6:	4811      	ldr	r0, [pc, #68]	; (801561c <ipfrag_free_pbuf_custom+0x60>)
 80155d8:	f000 fb3c 	bl	8015c54 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80155dc:	68fa      	ldr	r2, [r7, #12]
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	429a      	cmp	r2, r3
 80155e2:	d006      	beq.n	80155f2 <ipfrag_free_pbuf_custom+0x36>
 80155e4:	4b0b      	ldr	r3, [pc, #44]	; (8015614 <ipfrag_free_pbuf_custom+0x58>)
 80155e6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80155ea:	490d      	ldr	r1, [pc, #52]	; (8015620 <ipfrag_free_pbuf_custom+0x64>)
 80155ec:	480b      	ldr	r0, [pc, #44]	; (801561c <ipfrag_free_pbuf_custom+0x60>)
 80155ee:	f000 fb31 	bl	8015c54 <iprintf>
  if (pcr->original != NULL) {
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	695b      	ldr	r3, [r3, #20]
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d004      	beq.n	8015604 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	695b      	ldr	r3, [r3, #20]
 80155fe:	4618      	mov	r0, r3
 8015600:	f7f5 fea2 	bl	800b348 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015604:	68f8      	ldr	r0, [r7, #12]
 8015606:	f7ff ffbd 	bl	8015584 <ip_frag_free_pbuf_custom_ref>
}
 801560a:	bf00      	nop
 801560c:	3710      	adds	r7, #16
 801560e:	46bd      	mov	sp, r7
 8015610:	bd80      	pop	{r7, pc}
 8015612:	bf00      	nop
 8015614:	080194c8 	.word	0x080194c8
 8015618:	0801968c 	.word	0x0801968c
 801561c:	08019510 	.word	0x08019510
 8015620:	08019698 	.word	0x08019698

08015624 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015624:	b580      	push	{r7, lr}
 8015626:	b094      	sub	sp, #80	; 0x50
 8015628:	af02      	add	r7, sp, #8
 801562a:	60f8      	str	r0, [r7, #12]
 801562c:	60b9      	str	r1, [r7, #8]
 801562e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015630:	2300      	movs	r3, #0
 8015632:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015636:	68bb      	ldr	r3, [r7, #8]
 8015638:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801563a:	3b14      	subs	r3, #20
 801563c:	2b00      	cmp	r3, #0
 801563e:	da00      	bge.n	8015642 <ip4_frag+0x1e>
 8015640:	3307      	adds	r3, #7
 8015642:	10db      	asrs	r3, r3, #3
 8015644:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015646:	2314      	movs	r3, #20
 8015648:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	685b      	ldr	r3, [r3, #4]
 801564e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015652:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015656:	781b      	ldrb	r3, [r3, #0]
 8015658:	f003 030f 	and.w	r3, r3, #15
 801565c:	b2db      	uxtb	r3, r3
 801565e:	009b      	lsls	r3, r3, #2
 8015660:	b2db      	uxtb	r3, r3
 8015662:	2b14      	cmp	r3, #20
 8015664:	d002      	beq.n	801566c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015666:	f06f 0305 	mvn.w	r3, #5
 801566a:	e10f      	b.n	801588c <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	895b      	ldrh	r3, [r3, #10]
 8015670:	2b13      	cmp	r3, #19
 8015672:	d809      	bhi.n	8015688 <ip4_frag+0x64>
 8015674:	4b87      	ldr	r3, [pc, #540]	; (8015894 <ip4_frag+0x270>)
 8015676:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801567a:	4987      	ldr	r1, [pc, #540]	; (8015898 <ip4_frag+0x274>)
 801567c:	4887      	ldr	r0, [pc, #540]	; (801589c <ip4_frag+0x278>)
 801567e:	f000 fae9 	bl	8015c54 <iprintf>
 8015682:	f06f 0305 	mvn.w	r3, #5
 8015686:	e101      	b.n	801588c <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801568a:	88db      	ldrh	r3, [r3, #6]
 801568c:	b29b      	uxth	r3, r3
 801568e:	4618      	mov	r0, r3
 8015690:	f7f4 fbb9 	bl	8009e06 <lwip_htons>
 8015694:	4603      	mov	r3, r0
 8015696:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015698:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801569a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801569e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80156a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80156a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80156a8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80156aa:	68fb      	ldr	r3, [r7, #12]
 80156ac:	891b      	ldrh	r3, [r3, #8]
 80156ae:	3b14      	subs	r3, #20
 80156b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80156b4:	e0e0      	b.n	8015878 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80156b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80156b8:	00db      	lsls	r3, r3, #3
 80156ba:	b29b      	uxth	r3, r3
 80156bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80156c0:	4293      	cmp	r3, r2
 80156c2:	bf28      	it	cs
 80156c4:	4613      	movcs	r3, r2
 80156c6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80156c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80156cc:	2114      	movs	r1, #20
 80156ce:	200e      	movs	r0, #14
 80156d0:	f7f5 fb5a 	bl	800ad88 <pbuf_alloc>
 80156d4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80156d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156d8:	2b00      	cmp	r3, #0
 80156da:	f000 80d4 	beq.w	8015886 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80156de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156e0:	895b      	ldrh	r3, [r3, #10]
 80156e2:	2b13      	cmp	r3, #19
 80156e4:	d806      	bhi.n	80156f4 <ip4_frag+0xd0>
 80156e6:	4b6b      	ldr	r3, [pc, #428]	; (8015894 <ip4_frag+0x270>)
 80156e8:	f240 3225 	movw	r2, #805	; 0x325
 80156ec:	496c      	ldr	r1, [pc, #432]	; (80158a0 <ip4_frag+0x27c>)
 80156ee:	486b      	ldr	r0, [pc, #428]	; (801589c <ip4_frag+0x278>)
 80156f0:	f000 fab0 	bl	8015c54 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80156f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156f6:	685b      	ldr	r3, [r3, #4]
 80156f8:	2214      	movs	r2, #20
 80156fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80156fc:	4618      	mov	r0, r3
 80156fe:	f000 f9ee 	bl	8015ade <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015704:	685b      	ldr	r3, [r3, #4]
 8015706:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015708:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801570a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801570e:	e064      	b.n	80157da <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	895a      	ldrh	r2, [r3, #10]
 8015714:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015716:	1ad3      	subs	r3, r2, r3
 8015718:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	895b      	ldrh	r3, [r3, #10]
 801571e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015720:	429a      	cmp	r2, r3
 8015722:	d906      	bls.n	8015732 <ip4_frag+0x10e>
 8015724:	4b5b      	ldr	r3, [pc, #364]	; (8015894 <ip4_frag+0x270>)
 8015726:	f240 322d 	movw	r2, #813	; 0x32d
 801572a:	495e      	ldr	r1, [pc, #376]	; (80158a4 <ip4_frag+0x280>)
 801572c:	485b      	ldr	r0, [pc, #364]	; (801589c <ip4_frag+0x278>)
 801572e:	f000 fa91 	bl	8015c54 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015732:	8bfa      	ldrh	r2, [r7, #30]
 8015734:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015738:	4293      	cmp	r3, r2
 801573a:	bf28      	it	cs
 801573c:	4613      	movcs	r3, r2
 801573e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015742:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015746:	2b00      	cmp	r3, #0
 8015748:	d105      	bne.n	8015756 <ip4_frag+0x132>
        poff = 0;
 801574a:	2300      	movs	r3, #0
 801574c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	60fb      	str	r3, [r7, #12]
        continue;
 8015754:	e041      	b.n	80157da <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015756:	f7ff ff0d 	bl	8015574 <ip_frag_alloc_pbuf_custom_ref>
 801575a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801575c:	69bb      	ldr	r3, [r7, #24]
 801575e:	2b00      	cmp	r3, #0
 8015760:	d103      	bne.n	801576a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015762:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015764:	f7f5 fdf0 	bl	800b348 <pbuf_free>
        goto memerr;
 8015768:	e08e      	b.n	8015888 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801576a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015770:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015772:	4413      	add	r3, r2
 8015774:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8015778:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801577c:	9201      	str	r2, [sp, #4]
 801577e:	9300      	str	r3, [sp, #0]
 8015780:	4603      	mov	r3, r0
 8015782:	2241      	movs	r2, #65	; 0x41
 8015784:	2000      	movs	r0, #0
 8015786:	f7f5 fc25 	bl	800afd4 <pbuf_alloced_custom>
 801578a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801578c:	697b      	ldr	r3, [r7, #20]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d106      	bne.n	80157a0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015792:	69b8      	ldr	r0, [r7, #24]
 8015794:	f7ff fef6 	bl	8015584 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801579a:	f7f5 fdd5 	bl	800b348 <pbuf_free>
        goto memerr;
 801579e:	e073      	b.n	8015888 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 80157a0:	68f8      	ldr	r0, [r7, #12]
 80157a2:	f7f5 fe71 	bl	800b488 <pbuf_ref>
      pcr->original = p;
 80157a6:	69bb      	ldr	r3, [r7, #24]
 80157a8:	68fa      	ldr	r2, [r7, #12]
 80157aa:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80157ac:	69bb      	ldr	r3, [r7, #24]
 80157ae:	4a3e      	ldr	r2, [pc, #248]	; (80158a8 <ip4_frag+0x284>)
 80157b0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80157b2:	6979      	ldr	r1, [r7, #20]
 80157b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80157b6:	f7f5 fe89 	bl	800b4cc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80157ba:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80157be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80157c2:	1ad3      	subs	r3, r2, r3
 80157c4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80157c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d004      	beq.n	80157da <ip4_frag+0x1b6>
        poff = 0;
 80157d0:	2300      	movs	r3, #0
 80157d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80157da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d196      	bne.n	8015710 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80157e2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80157e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80157e8:	4413      	add	r3, r2
 80157ea:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80157ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80157f0:	68bb      	ldr	r3, [r7, #8]
 80157f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80157f4:	3b14      	subs	r3, #20
 80157f6:	429a      	cmp	r2, r3
 80157f8:	bfd4      	ite	le
 80157fa:	2301      	movle	r3, #1
 80157fc:	2300      	movgt	r3, #0
 80157fe:	b2db      	uxtb	r3, r3
 8015800:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015802:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015806:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801580a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801580c:	6a3b      	ldr	r3, [r7, #32]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d002      	beq.n	8015818 <ip4_frag+0x1f4>
 8015812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015814:	2b00      	cmp	r3, #0
 8015816:	d003      	beq.n	8015820 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015818:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801581a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801581e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015820:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015822:	4618      	mov	r0, r3
 8015824:	f7f4 faef 	bl	8009e06 <lwip_htons>
 8015828:	4603      	mov	r3, r0
 801582a:	461a      	mov	r2, r3
 801582c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801582e:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015830:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015832:	3314      	adds	r3, #20
 8015834:	b29b      	uxth	r3, r3
 8015836:	4618      	mov	r0, r3
 8015838:	f7f4 fae5 	bl	8009e06 <lwip_htons>
 801583c:	4603      	mov	r3, r0
 801583e:	461a      	mov	r2, r3
 8015840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015842:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015846:	2200      	movs	r2, #0
 8015848:	729a      	strb	r2, [r3, #10]
 801584a:	2200      	movs	r2, #0
 801584c:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801584e:	68bb      	ldr	r3, [r7, #8]
 8015850:	695b      	ldr	r3, [r3, #20]
 8015852:	687a      	ldr	r2, [r7, #4]
 8015854:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015856:	68b8      	ldr	r0, [r7, #8]
 8015858:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801585a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801585c:	f7f5 fd74 	bl	800b348 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015860:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015864:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015866:	1ad3      	subs	r3, r2, r3
 8015868:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801586c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015870:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015872:	4413      	add	r3, r2
 8015874:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8015878:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801587c:	2b00      	cmp	r3, #0
 801587e:	f47f af1a 	bne.w	80156b6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015882:	2300      	movs	r3, #0
 8015884:	e002      	b.n	801588c <ip4_frag+0x268>
      goto memerr;
 8015886:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015888:	f04f 33ff 	mov.w	r3, #4294967295
}
 801588c:	4618      	mov	r0, r3
 801588e:	3748      	adds	r7, #72	; 0x48
 8015890:	46bd      	mov	sp, r7
 8015892:	bd80      	pop	{r7, pc}
 8015894:	080194c8 	.word	0x080194c8
 8015898:	080196a4 	.word	0x080196a4
 801589c:	08019510 	.word	0x08019510
 80158a0:	080196c0 	.word	0x080196c0
 80158a4:	080196e0 	.word	0x080196e0
 80158a8:	080155bd 	.word	0x080155bd

080158ac <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80158ac:	b580      	push	{r7, lr}
 80158ae:	b086      	sub	sp, #24
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	6078      	str	r0, [r7, #4]
 80158b4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80158b6:	230e      	movs	r3, #14
 80158b8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	895b      	ldrh	r3, [r3, #10]
 80158be:	2b0e      	cmp	r3, #14
 80158c0:	d96e      	bls.n	80159a0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	7bdb      	ldrb	r3, [r3, #15]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d106      	bne.n	80158d8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80158ca:	683b      	ldr	r3, [r7, #0]
 80158cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80158d0:	3301      	adds	r3, #1
 80158d2:	b2da      	uxtb	r2, r3
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	685b      	ldr	r3, [r3, #4]
 80158dc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80158de:	693b      	ldr	r3, [r7, #16]
 80158e0:	7b1a      	ldrb	r2, [r3, #12]
 80158e2:	7b5b      	ldrb	r3, [r3, #13]
 80158e4:	021b      	lsls	r3, r3, #8
 80158e6:	4313      	orrs	r3, r2
 80158e8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80158ea:	693b      	ldr	r3, [r7, #16]
 80158ec:	781b      	ldrb	r3, [r3, #0]
 80158ee:	f003 0301 	and.w	r3, r3, #1
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d023      	beq.n	801593e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80158f6:	693b      	ldr	r3, [r7, #16]
 80158f8:	781b      	ldrb	r3, [r3, #0]
 80158fa:	2b01      	cmp	r3, #1
 80158fc:	d10f      	bne.n	801591e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80158fe:	693b      	ldr	r3, [r7, #16]
 8015900:	785b      	ldrb	r3, [r3, #1]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d11b      	bne.n	801593e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015906:	693b      	ldr	r3, [r7, #16]
 8015908:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801590a:	2b5e      	cmp	r3, #94	; 0x5e
 801590c:	d117      	bne.n	801593e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	7b5b      	ldrb	r3, [r3, #13]
 8015912:	f043 0310 	orr.w	r3, r3, #16
 8015916:	b2da      	uxtb	r2, r3
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	735a      	strb	r2, [r3, #13]
 801591c:	e00f      	b.n	801593e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801591e:	693b      	ldr	r3, [r7, #16]
 8015920:	2206      	movs	r2, #6
 8015922:	4928      	ldr	r1, [pc, #160]	; (80159c4 <ethernet_input+0x118>)
 8015924:	4618      	mov	r0, r3
 8015926:	f000 f8cb 	bl	8015ac0 <memcmp>
 801592a:	4603      	mov	r3, r0
 801592c:	2b00      	cmp	r3, #0
 801592e:	d106      	bne.n	801593e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	7b5b      	ldrb	r3, [r3, #13]
 8015934:	f043 0308 	orr.w	r3, r3, #8
 8015938:	b2da      	uxtb	r2, r3
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801593e:	89fb      	ldrh	r3, [r7, #14]
 8015940:	2b08      	cmp	r3, #8
 8015942:	d003      	beq.n	801594c <ethernet_input+0xa0>
 8015944:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8015948:	d014      	beq.n	8015974 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801594a:	e032      	b.n	80159b2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801594c:	683b      	ldr	r3, [r7, #0]
 801594e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015952:	f003 0308 	and.w	r3, r3, #8
 8015956:	2b00      	cmp	r3, #0
 8015958:	d024      	beq.n	80159a4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801595a:	8afb      	ldrh	r3, [r7, #22]
 801595c:	4619      	mov	r1, r3
 801595e:	6878      	ldr	r0, [r7, #4]
 8015960:	f7f5 fc6c 	bl	800b23c <pbuf_remove_header>
 8015964:	4603      	mov	r3, r0
 8015966:	2b00      	cmp	r3, #0
 8015968:	d11e      	bne.n	80159a8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801596a:	6839      	ldr	r1, [r7, #0]
 801596c:	6878      	ldr	r0, [r7, #4]
 801596e:	f7fe ff0f 	bl	8014790 <ip4_input>
      break;
 8015972:	e013      	b.n	801599c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015974:	683b      	ldr	r3, [r7, #0]
 8015976:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801597a:	f003 0308 	and.w	r3, r3, #8
 801597e:	2b00      	cmp	r3, #0
 8015980:	d014      	beq.n	80159ac <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015982:	8afb      	ldrh	r3, [r7, #22]
 8015984:	4619      	mov	r1, r3
 8015986:	6878      	ldr	r0, [r7, #4]
 8015988:	f7f5 fc58 	bl	800b23c <pbuf_remove_header>
 801598c:	4603      	mov	r3, r0
 801598e:	2b00      	cmp	r3, #0
 8015990:	d10e      	bne.n	80159b0 <ethernet_input+0x104>
        etharp_input(p, netif);
 8015992:	6839      	ldr	r1, [r7, #0]
 8015994:	6878      	ldr	r0, [r7, #4]
 8015996:	f7fe f8ab 	bl	8013af0 <etharp_input>
      break;
 801599a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801599c:	2300      	movs	r3, #0
 801599e:	e00c      	b.n	80159ba <ethernet_input+0x10e>
    goto free_and_return;
 80159a0:	bf00      	nop
 80159a2:	e006      	b.n	80159b2 <ethernet_input+0x106>
        goto free_and_return;
 80159a4:	bf00      	nop
 80159a6:	e004      	b.n	80159b2 <ethernet_input+0x106>
        goto free_and_return;
 80159a8:	bf00      	nop
 80159aa:	e002      	b.n	80159b2 <ethernet_input+0x106>
        goto free_and_return;
 80159ac:	bf00      	nop
 80159ae:	e000      	b.n	80159b2 <ethernet_input+0x106>
        goto free_and_return;
 80159b0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80159b2:	6878      	ldr	r0, [r7, #4]
 80159b4:	f7f5 fcc8 	bl	800b348 <pbuf_free>
  return ERR_OK;
 80159b8:	2300      	movs	r3, #0
}
 80159ba:	4618      	mov	r0, r3
 80159bc:	3718      	adds	r7, #24
 80159be:	46bd      	mov	sp, r7
 80159c0:	bd80      	pop	{r7, pc}
 80159c2:	bf00      	nop
 80159c4:	0802822c 	.word	0x0802822c

080159c8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b086      	sub	sp, #24
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	60f8      	str	r0, [r7, #12]
 80159d0:	60b9      	str	r1, [r7, #8]
 80159d2:	607a      	str	r2, [r7, #4]
 80159d4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80159d6:	8c3b      	ldrh	r3, [r7, #32]
 80159d8:	4618      	mov	r0, r3
 80159da:	f7f4 fa14 	bl	8009e06 <lwip_htons>
 80159de:	4603      	mov	r3, r0
 80159e0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80159e2:	210e      	movs	r1, #14
 80159e4:	68b8      	ldr	r0, [r7, #8]
 80159e6:	f7f5 fc19 	bl	800b21c <pbuf_add_header>
 80159ea:	4603      	mov	r3, r0
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d125      	bne.n	8015a3c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80159f0:	68bb      	ldr	r3, [r7, #8]
 80159f2:	685b      	ldr	r3, [r3, #4]
 80159f4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80159f6:	693b      	ldr	r3, [r7, #16]
 80159f8:	8afa      	ldrh	r2, [r7, #22]
 80159fa:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80159fc:	693b      	ldr	r3, [r7, #16]
 80159fe:	2206      	movs	r2, #6
 8015a00:	6839      	ldr	r1, [r7, #0]
 8015a02:	4618      	mov	r0, r3
 8015a04:	f000 f86b 	bl	8015ade <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015a08:	693b      	ldr	r3, [r7, #16]
 8015a0a:	3306      	adds	r3, #6
 8015a0c:	2206      	movs	r2, #6
 8015a0e:	6879      	ldr	r1, [r7, #4]
 8015a10:	4618      	mov	r0, r3
 8015a12:	f000 f864 	bl	8015ade <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015a1c:	2b06      	cmp	r3, #6
 8015a1e:	d006      	beq.n	8015a2e <ethernet_output+0x66>
 8015a20:	4b0a      	ldr	r3, [pc, #40]	; (8015a4c <ethernet_output+0x84>)
 8015a22:	f240 1233 	movw	r2, #307	; 0x133
 8015a26:	490a      	ldr	r1, [pc, #40]	; (8015a50 <ethernet_output+0x88>)
 8015a28:	480a      	ldr	r0, [pc, #40]	; (8015a54 <ethernet_output+0x8c>)
 8015a2a:	f000 f913 	bl	8015c54 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	699b      	ldr	r3, [r3, #24]
 8015a32:	68b9      	ldr	r1, [r7, #8]
 8015a34:	68f8      	ldr	r0, [r7, #12]
 8015a36:	4798      	blx	r3
 8015a38:	4603      	mov	r3, r0
 8015a3a:	e002      	b.n	8015a42 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015a3c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015a3e:	f06f 0301 	mvn.w	r3, #1
}
 8015a42:	4618      	mov	r0, r3
 8015a44:	3718      	adds	r7, #24
 8015a46:	46bd      	mov	sp, r7
 8015a48:	bd80      	pop	{r7, pc}
 8015a4a:	bf00      	nop
 8015a4c:	080196f0 	.word	0x080196f0
 8015a50:	08019728 	.word	0x08019728
 8015a54:	0801975c 	.word	0x0801975c

08015a58 <__libc_init_array>:
 8015a58:	b570      	push	{r4, r5, r6, lr}
 8015a5a:	4e0d      	ldr	r6, [pc, #52]	; (8015a90 <__libc_init_array+0x38>)
 8015a5c:	4c0d      	ldr	r4, [pc, #52]	; (8015a94 <__libc_init_array+0x3c>)
 8015a5e:	1ba4      	subs	r4, r4, r6
 8015a60:	10a4      	asrs	r4, r4, #2
 8015a62:	2500      	movs	r5, #0
 8015a64:	42a5      	cmp	r5, r4
 8015a66:	d109      	bne.n	8015a7c <__libc_init_array+0x24>
 8015a68:	4e0b      	ldr	r6, [pc, #44]	; (8015a98 <__libc_init_array+0x40>)
 8015a6a:	4c0c      	ldr	r4, [pc, #48]	; (8015a9c <__libc_init_array+0x44>)
 8015a6c:	f000 ff62 	bl	8016934 <_init>
 8015a70:	1ba4      	subs	r4, r4, r6
 8015a72:	10a4      	asrs	r4, r4, #2
 8015a74:	2500      	movs	r5, #0
 8015a76:	42a5      	cmp	r5, r4
 8015a78:	d105      	bne.n	8015a86 <__libc_init_array+0x2e>
 8015a7a:	bd70      	pop	{r4, r5, r6, pc}
 8015a7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015a80:	4798      	blx	r3
 8015a82:	3501      	adds	r5, #1
 8015a84:	e7ee      	b.n	8015a64 <__libc_init_array+0xc>
 8015a86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015a8a:	4798      	blx	r3
 8015a8c:	3501      	adds	r5, #1
 8015a8e:	e7f2      	b.n	8015a76 <__libc_init_array+0x1e>
 8015a90:	080282dc 	.word	0x080282dc
 8015a94:	080282dc 	.word	0x080282dc
 8015a98:	080282dc 	.word	0x080282dc
 8015a9c:	080282e0 	.word	0x080282e0

08015aa0 <malloc>:
 8015aa0:	4b02      	ldr	r3, [pc, #8]	; (8015aac <malloc+0xc>)
 8015aa2:	4601      	mov	r1, r0
 8015aa4:	6818      	ldr	r0, [r3, #0]
 8015aa6:	f000 b87b 	b.w	8015ba0 <_malloc_r>
 8015aaa:	bf00      	nop
 8015aac:	20000020 	.word	0x20000020

08015ab0 <free>:
 8015ab0:	4b02      	ldr	r3, [pc, #8]	; (8015abc <free+0xc>)
 8015ab2:	4601      	mov	r1, r0
 8015ab4:	6818      	ldr	r0, [r3, #0]
 8015ab6:	f000 b825 	b.w	8015b04 <_free_r>
 8015aba:	bf00      	nop
 8015abc:	20000020 	.word	0x20000020

08015ac0 <memcmp>:
 8015ac0:	b530      	push	{r4, r5, lr}
 8015ac2:	2400      	movs	r4, #0
 8015ac4:	42a2      	cmp	r2, r4
 8015ac6:	d101      	bne.n	8015acc <memcmp+0xc>
 8015ac8:	2000      	movs	r0, #0
 8015aca:	e007      	b.n	8015adc <memcmp+0x1c>
 8015acc:	5d03      	ldrb	r3, [r0, r4]
 8015ace:	3401      	adds	r4, #1
 8015ad0:	190d      	adds	r5, r1, r4
 8015ad2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8015ad6:	42ab      	cmp	r3, r5
 8015ad8:	d0f4      	beq.n	8015ac4 <memcmp+0x4>
 8015ada:	1b58      	subs	r0, r3, r5
 8015adc:	bd30      	pop	{r4, r5, pc}

08015ade <memcpy>:
 8015ade:	b510      	push	{r4, lr}
 8015ae0:	1e43      	subs	r3, r0, #1
 8015ae2:	440a      	add	r2, r1
 8015ae4:	4291      	cmp	r1, r2
 8015ae6:	d100      	bne.n	8015aea <memcpy+0xc>
 8015ae8:	bd10      	pop	{r4, pc}
 8015aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015aee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015af2:	e7f7      	b.n	8015ae4 <memcpy+0x6>

08015af4 <memset>:
 8015af4:	4402      	add	r2, r0
 8015af6:	4603      	mov	r3, r0
 8015af8:	4293      	cmp	r3, r2
 8015afa:	d100      	bne.n	8015afe <memset+0xa>
 8015afc:	4770      	bx	lr
 8015afe:	f803 1b01 	strb.w	r1, [r3], #1
 8015b02:	e7f9      	b.n	8015af8 <memset+0x4>

08015b04 <_free_r>:
 8015b04:	b538      	push	{r3, r4, r5, lr}
 8015b06:	4605      	mov	r5, r0
 8015b08:	2900      	cmp	r1, #0
 8015b0a:	d045      	beq.n	8015b98 <_free_r+0x94>
 8015b0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015b10:	1f0c      	subs	r4, r1, #4
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	bfb8      	it	lt
 8015b16:	18e4      	addlt	r4, r4, r3
 8015b18:	f000 f9c2 	bl	8015ea0 <__malloc_lock>
 8015b1c:	4a1f      	ldr	r2, [pc, #124]	; (8015b9c <_free_r+0x98>)
 8015b1e:	6813      	ldr	r3, [r2, #0]
 8015b20:	4610      	mov	r0, r2
 8015b22:	b933      	cbnz	r3, 8015b32 <_free_r+0x2e>
 8015b24:	6063      	str	r3, [r4, #4]
 8015b26:	6014      	str	r4, [r2, #0]
 8015b28:	4628      	mov	r0, r5
 8015b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015b2e:	f000 b9b8 	b.w	8015ea2 <__malloc_unlock>
 8015b32:	42a3      	cmp	r3, r4
 8015b34:	d90c      	bls.n	8015b50 <_free_r+0x4c>
 8015b36:	6821      	ldr	r1, [r4, #0]
 8015b38:	1862      	adds	r2, r4, r1
 8015b3a:	4293      	cmp	r3, r2
 8015b3c:	bf04      	itt	eq
 8015b3e:	681a      	ldreq	r2, [r3, #0]
 8015b40:	685b      	ldreq	r3, [r3, #4]
 8015b42:	6063      	str	r3, [r4, #4]
 8015b44:	bf04      	itt	eq
 8015b46:	1852      	addeq	r2, r2, r1
 8015b48:	6022      	streq	r2, [r4, #0]
 8015b4a:	6004      	str	r4, [r0, #0]
 8015b4c:	e7ec      	b.n	8015b28 <_free_r+0x24>
 8015b4e:	4613      	mov	r3, r2
 8015b50:	685a      	ldr	r2, [r3, #4]
 8015b52:	b10a      	cbz	r2, 8015b58 <_free_r+0x54>
 8015b54:	42a2      	cmp	r2, r4
 8015b56:	d9fa      	bls.n	8015b4e <_free_r+0x4a>
 8015b58:	6819      	ldr	r1, [r3, #0]
 8015b5a:	1858      	adds	r0, r3, r1
 8015b5c:	42a0      	cmp	r0, r4
 8015b5e:	d10b      	bne.n	8015b78 <_free_r+0x74>
 8015b60:	6820      	ldr	r0, [r4, #0]
 8015b62:	4401      	add	r1, r0
 8015b64:	1858      	adds	r0, r3, r1
 8015b66:	4282      	cmp	r2, r0
 8015b68:	6019      	str	r1, [r3, #0]
 8015b6a:	d1dd      	bne.n	8015b28 <_free_r+0x24>
 8015b6c:	6810      	ldr	r0, [r2, #0]
 8015b6e:	6852      	ldr	r2, [r2, #4]
 8015b70:	605a      	str	r2, [r3, #4]
 8015b72:	4401      	add	r1, r0
 8015b74:	6019      	str	r1, [r3, #0]
 8015b76:	e7d7      	b.n	8015b28 <_free_r+0x24>
 8015b78:	d902      	bls.n	8015b80 <_free_r+0x7c>
 8015b7a:	230c      	movs	r3, #12
 8015b7c:	602b      	str	r3, [r5, #0]
 8015b7e:	e7d3      	b.n	8015b28 <_free_r+0x24>
 8015b80:	6820      	ldr	r0, [r4, #0]
 8015b82:	1821      	adds	r1, r4, r0
 8015b84:	428a      	cmp	r2, r1
 8015b86:	bf04      	itt	eq
 8015b88:	6811      	ldreq	r1, [r2, #0]
 8015b8a:	6852      	ldreq	r2, [r2, #4]
 8015b8c:	6062      	str	r2, [r4, #4]
 8015b8e:	bf04      	itt	eq
 8015b90:	1809      	addeq	r1, r1, r0
 8015b92:	6021      	streq	r1, [r4, #0]
 8015b94:	605c      	str	r4, [r3, #4]
 8015b96:	e7c7      	b.n	8015b28 <_free_r+0x24>
 8015b98:	bd38      	pop	{r3, r4, r5, pc}
 8015b9a:	bf00      	nop
 8015b9c:	2000059c 	.word	0x2000059c

08015ba0 <_malloc_r>:
 8015ba0:	b570      	push	{r4, r5, r6, lr}
 8015ba2:	1ccd      	adds	r5, r1, #3
 8015ba4:	f025 0503 	bic.w	r5, r5, #3
 8015ba8:	3508      	adds	r5, #8
 8015baa:	2d0c      	cmp	r5, #12
 8015bac:	bf38      	it	cc
 8015bae:	250c      	movcc	r5, #12
 8015bb0:	2d00      	cmp	r5, #0
 8015bb2:	4606      	mov	r6, r0
 8015bb4:	db01      	blt.n	8015bba <_malloc_r+0x1a>
 8015bb6:	42a9      	cmp	r1, r5
 8015bb8:	d903      	bls.n	8015bc2 <_malloc_r+0x22>
 8015bba:	230c      	movs	r3, #12
 8015bbc:	6033      	str	r3, [r6, #0]
 8015bbe:	2000      	movs	r0, #0
 8015bc0:	bd70      	pop	{r4, r5, r6, pc}
 8015bc2:	f000 f96d 	bl	8015ea0 <__malloc_lock>
 8015bc6:	4a21      	ldr	r2, [pc, #132]	; (8015c4c <_malloc_r+0xac>)
 8015bc8:	6814      	ldr	r4, [r2, #0]
 8015bca:	4621      	mov	r1, r4
 8015bcc:	b991      	cbnz	r1, 8015bf4 <_malloc_r+0x54>
 8015bce:	4c20      	ldr	r4, [pc, #128]	; (8015c50 <_malloc_r+0xb0>)
 8015bd0:	6823      	ldr	r3, [r4, #0]
 8015bd2:	b91b      	cbnz	r3, 8015bdc <_malloc_r+0x3c>
 8015bd4:	4630      	mov	r0, r6
 8015bd6:	f000 f889 	bl	8015cec <_sbrk_r>
 8015bda:	6020      	str	r0, [r4, #0]
 8015bdc:	4629      	mov	r1, r5
 8015bde:	4630      	mov	r0, r6
 8015be0:	f000 f884 	bl	8015cec <_sbrk_r>
 8015be4:	1c43      	adds	r3, r0, #1
 8015be6:	d124      	bne.n	8015c32 <_malloc_r+0x92>
 8015be8:	230c      	movs	r3, #12
 8015bea:	6033      	str	r3, [r6, #0]
 8015bec:	4630      	mov	r0, r6
 8015bee:	f000 f958 	bl	8015ea2 <__malloc_unlock>
 8015bf2:	e7e4      	b.n	8015bbe <_malloc_r+0x1e>
 8015bf4:	680b      	ldr	r3, [r1, #0]
 8015bf6:	1b5b      	subs	r3, r3, r5
 8015bf8:	d418      	bmi.n	8015c2c <_malloc_r+0x8c>
 8015bfa:	2b0b      	cmp	r3, #11
 8015bfc:	d90f      	bls.n	8015c1e <_malloc_r+0x7e>
 8015bfe:	600b      	str	r3, [r1, #0]
 8015c00:	50cd      	str	r5, [r1, r3]
 8015c02:	18cc      	adds	r4, r1, r3
 8015c04:	4630      	mov	r0, r6
 8015c06:	f000 f94c 	bl	8015ea2 <__malloc_unlock>
 8015c0a:	f104 000b 	add.w	r0, r4, #11
 8015c0e:	1d23      	adds	r3, r4, #4
 8015c10:	f020 0007 	bic.w	r0, r0, #7
 8015c14:	1ac3      	subs	r3, r0, r3
 8015c16:	d0d3      	beq.n	8015bc0 <_malloc_r+0x20>
 8015c18:	425a      	negs	r2, r3
 8015c1a:	50e2      	str	r2, [r4, r3]
 8015c1c:	e7d0      	b.n	8015bc0 <_malloc_r+0x20>
 8015c1e:	428c      	cmp	r4, r1
 8015c20:	684b      	ldr	r3, [r1, #4]
 8015c22:	bf16      	itet	ne
 8015c24:	6063      	strne	r3, [r4, #4]
 8015c26:	6013      	streq	r3, [r2, #0]
 8015c28:	460c      	movne	r4, r1
 8015c2a:	e7eb      	b.n	8015c04 <_malloc_r+0x64>
 8015c2c:	460c      	mov	r4, r1
 8015c2e:	6849      	ldr	r1, [r1, #4]
 8015c30:	e7cc      	b.n	8015bcc <_malloc_r+0x2c>
 8015c32:	1cc4      	adds	r4, r0, #3
 8015c34:	f024 0403 	bic.w	r4, r4, #3
 8015c38:	42a0      	cmp	r0, r4
 8015c3a:	d005      	beq.n	8015c48 <_malloc_r+0xa8>
 8015c3c:	1a21      	subs	r1, r4, r0
 8015c3e:	4630      	mov	r0, r6
 8015c40:	f000 f854 	bl	8015cec <_sbrk_r>
 8015c44:	3001      	adds	r0, #1
 8015c46:	d0cf      	beq.n	8015be8 <_malloc_r+0x48>
 8015c48:	6025      	str	r5, [r4, #0]
 8015c4a:	e7db      	b.n	8015c04 <_malloc_r+0x64>
 8015c4c:	2000059c 	.word	0x2000059c
 8015c50:	200005a0 	.word	0x200005a0

08015c54 <iprintf>:
 8015c54:	b40f      	push	{r0, r1, r2, r3}
 8015c56:	4b0a      	ldr	r3, [pc, #40]	; (8015c80 <iprintf+0x2c>)
 8015c58:	b513      	push	{r0, r1, r4, lr}
 8015c5a:	681c      	ldr	r4, [r3, #0]
 8015c5c:	b124      	cbz	r4, 8015c68 <iprintf+0x14>
 8015c5e:	69a3      	ldr	r3, [r4, #24]
 8015c60:	b913      	cbnz	r3, 8015c68 <iprintf+0x14>
 8015c62:	4620      	mov	r0, r4
 8015c64:	f000 f892 	bl	8015d8c <__sinit>
 8015c68:	ab05      	add	r3, sp, #20
 8015c6a:	9a04      	ldr	r2, [sp, #16]
 8015c6c:	68a1      	ldr	r1, [r4, #8]
 8015c6e:	9301      	str	r3, [sp, #4]
 8015c70:	4620      	mov	r0, r4
 8015c72:	f000 f941 	bl	8015ef8 <_vfiprintf_r>
 8015c76:	b002      	add	sp, #8
 8015c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015c7c:	b004      	add	sp, #16
 8015c7e:	4770      	bx	lr
 8015c80:	20000020 	.word	0x20000020

08015c84 <rand>:
 8015c84:	b538      	push	{r3, r4, r5, lr}
 8015c86:	4b13      	ldr	r3, [pc, #76]	; (8015cd4 <rand+0x50>)
 8015c88:	681c      	ldr	r4, [r3, #0]
 8015c8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015c8c:	b97b      	cbnz	r3, 8015cae <rand+0x2a>
 8015c8e:	2018      	movs	r0, #24
 8015c90:	f7ff ff06 	bl	8015aa0 <malloc>
 8015c94:	4a10      	ldr	r2, [pc, #64]	; (8015cd8 <rand+0x54>)
 8015c96:	4b11      	ldr	r3, [pc, #68]	; (8015cdc <rand+0x58>)
 8015c98:	63a0      	str	r0, [r4, #56]	; 0x38
 8015c9a:	e9c0 2300 	strd	r2, r3, [r0]
 8015c9e:	4b10      	ldr	r3, [pc, #64]	; (8015ce0 <rand+0x5c>)
 8015ca0:	6083      	str	r3, [r0, #8]
 8015ca2:	230b      	movs	r3, #11
 8015ca4:	8183      	strh	r3, [r0, #12]
 8015ca6:	2201      	movs	r2, #1
 8015ca8:	2300      	movs	r3, #0
 8015caa:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8015cae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015cb0:	480c      	ldr	r0, [pc, #48]	; (8015ce4 <rand+0x60>)
 8015cb2:	690a      	ldr	r2, [r1, #16]
 8015cb4:	694b      	ldr	r3, [r1, #20]
 8015cb6:	4c0c      	ldr	r4, [pc, #48]	; (8015ce8 <rand+0x64>)
 8015cb8:	4350      	muls	r0, r2
 8015cba:	fb04 0003 	mla	r0, r4, r3, r0
 8015cbe:	fba2 2304 	umull	r2, r3, r2, r4
 8015cc2:	4403      	add	r3, r0
 8015cc4:	1c54      	adds	r4, r2, #1
 8015cc6:	f143 0500 	adc.w	r5, r3, #0
 8015cca:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8015cce:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8015cd2:	bd38      	pop	{r3, r4, r5, pc}
 8015cd4:	20000020 	.word	0x20000020
 8015cd8:	abcd330e 	.word	0xabcd330e
 8015cdc:	e66d1234 	.word	0xe66d1234
 8015ce0:	0005deec 	.word	0x0005deec
 8015ce4:	5851f42d 	.word	0x5851f42d
 8015ce8:	4c957f2d 	.word	0x4c957f2d

08015cec <_sbrk_r>:
 8015cec:	b538      	push	{r3, r4, r5, lr}
 8015cee:	4c06      	ldr	r4, [pc, #24]	; (8015d08 <_sbrk_r+0x1c>)
 8015cf0:	2300      	movs	r3, #0
 8015cf2:	4605      	mov	r5, r0
 8015cf4:	4608      	mov	r0, r1
 8015cf6:	6023      	str	r3, [r4, #0]
 8015cf8:	f7f0 fd28 	bl	800674c <_sbrk>
 8015cfc:	1c43      	adds	r3, r0, #1
 8015cfe:	d102      	bne.n	8015d06 <_sbrk_r+0x1a>
 8015d00:	6823      	ldr	r3, [r4, #0]
 8015d02:	b103      	cbz	r3, 8015d06 <_sbrk_r+0x1a>
 8015d04:	602b      	str	r3, [r5, #0]
 8015d06:	bd38      	pop	{r3, r4, r5, pc}
 8015d08:	20007738 	.word	0x20007738

08015d0c <std>:
 8015d0c:	2300      	movs	r3, #0
 8015d0e:	b510      	push	{r4, lr}
 8015d10:	4604      	mov	r4, r0
 8015d12:	e9c0 3300 	strd	r3, r3, [r0]
 8015d16:	6083      	str	r3, [r0, #8]
 8015d18:	8181      	strh	r1, [r0, #12]
 8015d1a:	6643      	str	r3, [r0, #100]	; 0x64
 8015d1c:	81c2      	strh	r2, [r0, #14]
 8015d1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015d22:	6183      	str	r3, [r0, #24]
 8015d24:	4619      	mov	r1, r3
 8015d26:	2208      	movs	r2, #8
 8015d28:	305c      	adds	r0, #92	; 0x5c
 8015d2a:	f7ff fee3 	bl	8015af4 <memset>
 8015d2e:	4b05      	ldr	r3, [pc, #20]	; (8015d44 <std+0x38>)
 8015d30:	6263      	str	r3, [r4, #36]	; 0x24
 8015d32:	4b05      	ldr	r3, [pc, #20]	; (8015d48 <std+0x3c>)
 8015d34:	62a3      	str	r3, [r4, #40]	; 0x28
 8015d36:	4b05      	ldr	r3, [pc, #20]	; (8015d4c <std+0x40>)
 8015d38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015d3a:	4b05      	ldr	r3, [pc, #20]	; (8015d50 <std+0x44>)
 8015d3c:	6224      	str	r4, [r4, #32]
 8015d3e:	6323      	str	r3, [r4, #48]	; 0x30
 8015d40:	bd10      	pop	{r4, pc}
 8015d42:	bf00      	nop
 8015d44:	08016435 	.word	0x08016435
 8015d48:	08016457 	.word	0x08016457
 8015d4c:	0801648f 	.word	0x0801648f
 8015d50:	080164b3 	.word	0x080164b3

08015d54 <_cleanup_r>:
 8015d54:	4901      	ldr	r1, [pc, #4]	; (8015d5c <_cleanup_r+0x8>)
 8015d56:	f000 b885 	b.w	8015e64 <_fwalk_reent>
 8015d5a:	bf00      	nop
 8015d5c:	0801678d 	.word	0x0801678d

08015d60 <__sfmoreglue>:
 8015d60:	b570      	push	{r4, r5, r6, lr}
 8015d62:	1e4a      	subs	r2, r1, #1
 8015d64:	2568      	movs	r5, #104	; 0x68
 8015d66:	4355      	muls	r5, r2
 8015d68:	460e      	mov	r6, r1
 8015d6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015d6e:	f7ff ff17 	bl	8015ba0 <_malloc_r>
 8015d72:	4604      	mov	r4, r0
 8015d74:	b140      	cbz	r0, 8015d88 <__sfmoreglue+0x28>
 8015d76:	2100      	movs	r1, #0
 8015d78:	e9c0 1600 	strd	r1, r6, [r0]
 8015d7c:	300c      	adds	r0, #12
 8015d7e:	60a0      	str	r0, [r4, #8]
 8015d80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015d84:	f7ff feb6 	bl	8015af4 <memset>
 8015d88:	4620      	mov	r0, r4
 8015d8a:	bd70      	pop	{r4, r5, r6, pc}

08015d8c <__sinit>:
 8015d8c:	6983      	ldr	r3, [r0, #24]
 8015d8e:	b510      	push	{r4, lr}
 8015d90:	4604      	mov	r4, r0
 8015d92:	bb33      	cbnz	r3, 8015de2 <__sinit+0x56>
 8015d94:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015d98:	6503      	str	r3, [r0, #80]	; 0x50
 8015d9a:	4b12      	ldr	r3, [pc, #72]	; (8015de4 <__sinit+0x58>)
 8015d9c:	4a12      	ldr	r2, [pc, #72]	; (8015de8 <__sinit+0x5c>)
 8015d9e:	681b      	ldr	r3, [r3, #0]
 8015da0:	6282      	str	r2, [r0, #40]	; 0x28
 8015da2:	4298      	cmp	r0, r3
 8015da4:	bf04      	itt	eq
 8015da6:	2301      	moveq	r3, #1
 8015da8:	6183      	streq	r3, [r0, #24]
 8015daa:	f000 f81f 	bl	8015dec <__sfp>
 8015dae:	6060      	str	r0, [r4, #4]
 8015db0:	4620      	mov	r0, r4
 8015db2:	f000 f81b 	bl	8015dec <__sfp>
 8015db6:	60a0      	str	r0, [r4, #8]
 8015db8:	4620      	mov	r0, r4
 8015dba:	f000 f817 	bl	8015dec <__sfp>
 8015dbe:	2200      	movs	r2, #0
 8015dc0:	60e0      	str	r0, [r4, #12]
 8015dc2:	2104      	movs	r1, #4
 8015dc4:	6860      	ldr	r0, [r4, #4]
 8015dc6:	f7ff ffa1 	bl	8015d0c <std>
 8015dca:	2201      	movs	r2, #1
 8015dcc:	2109      	movs	r1, #9
 8015dce:	68a0      	ldr	r0, [r4, #8]
 8015dd0:	f7ff ff9c 	bl	8015d0c <std>
 8015dd4:	2202      	movs	r2, #2
 8015dd6:	2112      	movs	r1, #18
 8015dd8:	68e0      	ldr	r0, [r4, #12]
 8015dda:	f7ff ff97 	bl	8015d0c <std>
 8015dde:	2301      	movs	r3, #1
 8015de0:	61a3      	str	r3, [r4, #24]
 8015de2:	bd10      	pop	{r4, pc}
 8015de4:	0802823c 	.word	0x0802823c
 8015de8:	08015d55 	.word	0x08015d55

08015dec <__sfp>:
 8015dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015dee:	4b1b      	ldr	r3, [pc, #108]	; (8015e5c <__sfp+0x70>)
 8015df0:	681e      	ldr	r6, [r3, #0]
 8015df2:	69b3      	ldr	r3, [r6, #24]
 8015df4:	4607      	mov	r7, r0
 8015df6:	b913      	cbnz	r3, 8015dfe <__sfp+0x12>
 8015df8:	4630      	mov	r0, r6
 8015dfa:	f7ff ffc7 	bl	8015d8c <__sinit>
 8015dfe:	3648      	adds	r6, #72	; 0x48
 8015e00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015e04:	3b01      	subs	r3, #1
 8015e06:	d503      	bpl.n	8015e10 <__sfp+0x24>
 8015e08:	6833      	ldr	r3, [r6, #0]
 8015e0a:	b133      	cbz	r3, 8015e1a <__sfp+0x2e>
 8015e0c:	6836      	ldr	r6, [r6, #0]
 8015e0e:	e7f7      	b.n	8015e00 <__sfp+0x14>
 8015e10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015e14:	b16d      	cbz	r5, 8015e32 <__sfp+0x46>
 8015e16:	3468      	adds	r4, #104	; 0x68
 8015e18:	e7f4      	b.n	8015e04 <__sfp+0x18>
 8015e1a:	2104      	movs	r1, #4
 8015e1c:	4638      	mov	r0, r7
 8015e1e:	f7ff ff9f 	bl	8015d60 <__sfmoreglue>
 8015e22:	6030      	str	r0, [r6, #0]
 8015e24:	2800      	cmp	r0, #0
 8015e26:	d1f1      	bne.n	8015e0c <__sfp+0x20>
 8015e28:	230c      	movs	r3, #12
 8015e2a:	603b      	str	r3, [r7, #0]
 8015e2c:	4604      	mov	r4, r0
 8015e2e:	4620      	mov	r0, r4
 8015e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e32:	4b0b      	ldr	r3, [pc, #44]	; (8015e60 <__sfp+0x74>)
 8015e34:	6665      	str	r5, [r4, #100]	; 0x64
 8015e36:	e9c4 5500 	strd	r5, r5, [r4]
 8015e3a:	60a5      	str	r5, [r4, #8]
 8015e3c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015e40:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015e44:	2208      	movs	r2, #8
 8015e46:	4629      	mov	r1, r5
 8015e48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015e4c:	f7ff fe52 	bl	8015af4 <memset>
 8015e50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015e54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015e58:	e7e9      	b.n	8015e2e <__sfp+0x42>
 8015e5a:	bf00      	nop
 8015e5c:	0802823c 	.word	0x0802823c
 8015e60:	ffff0001 	.word	0xffff0001

08015e64 <_fwalk_reent>:
 8015e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e68:	4680      	mov	r8, r0
 8015e6a:	4689      	mov	r9, r1
 8015e6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015e70:	2600      	movs	r6, #0
 8015e72:	b914      	cbnz	r4, 8015e7a <_fwalk_reent+0x16>
 8015e74:	4630      	mov	r0, r6
 8015e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015e7a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8015e7e:	3f01      	subs	r7, #1
 8015e80:	d501      	bpl.n	8015e86 <_fwalk_reent+0x22>
 8015e82:	6824      	ldr	r4, [r4, #0]
 8015e84:	e7f5      	b.n	8015e72 <_fwalk_reent+0xe>
 8015e86:	89ab      	ldrh	r3, [r5, #12]
 8015e88:	2b01      	cmp	r3, #1
 8015e8a:	d907      	bls.n	8015e9c <_fwalk_reent+0x38>
 8015e8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015e90:	3301      	adds	r3, #1
 8015e92:	d003      	beq.n	8015e9c <_fwalk_reent+0x38>
 8015e94:	4629      	mov	r1, r5
 8015e96:	4640      	mov	r0, r8
 8015e98:	47c8      	blx	r9
 8015e9a:	4306      	orrs	r6, r0
 8015e9c:	3568      	adds	r5, #104	; 0x68
 8015e9e:	e7ee      	b.n	8015e7e <_fwalk_reent+0x1a>

08015ea0 <__malloc_lock>:
 8015ea0:	4770      	bx	lr

08015ea2 <__malloc_unlock>:
 8015ea2:	4770      	bx	lr

08015ea4 <__sfputc_r>:
 8015ea4:	6893      	ldr	r3, [r2, #8]
 8015ea6:	3b01      	subs	r3, #1
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	b410      	push	{r4}
 8015eac:	6093      	str	r3, [r2, #8]
 8015eae:	da08      	bge.n	8015ec2 <__sfputc_r+0x1e>
 8015eb0:	6994      	ldr	r4, [r2, #24]
 8015eb2:	42a3      	cmp	r3, r4
 8015eb4:	db01      	blt.n	8015eba <__sfputc_r+0x16>
 8015eb6:	290a      	cmp	r1, #10
 8015eb8:	d103      	bne.n	8015ec2 <__sfputc_r+0x1e>
 8015eba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ebe:	f000 bafd 	b.w	80164bc <__swbuf_r>
 8015ec2:	6813      	ldr	r3, [r2, #0]
 8015ec4:	1c58      	adds	r0, r3, #1
 8015ec6:	6010      	str	r0, [r2, #0]
 8015ec8:	7019      	strb	r1, [r3, #0]
 8015eca:	4608      	mov	r0, r1
 8015ecc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ed0:	4770      	bx	lr

08015ed2 <__sfputs_r>:
 8015ed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ed4:	4606      	mov	r6, r0
 8015ed6:	460f      	mov	r7, r1
 8015ed8:	4614      	mov	r4, r2
 8015eda:	18d5      	adds	r5, r2, r3
 8015edc:	42ac      	cmp	r4, r5
 8015ede:	d101      	bne.n	8015ee4 <__sfputs_r+0x12>
 8015ee0:	2000      	movs	r0, #0
 8015ee2:	e007      	b.n	8015ef4 <__sfputs_r+0x22>
 8015ee4:	463a      	mov	r2, r7
 8015ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015eea:	4630      	mov	r0, r6
 8015eec:	f7ff ffda 	bl	8015ea4 <__sfputc_r>
 8015ef0:	1c43      	adds	r3, r0, #1
 8015ef2:	d1f3      	bne.n	8015edc <__sfputs_r+0xa>
 8015ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015ef8 <_vfiprintf_r>:
 8015ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015efc:	460c      	mov	r4, r1
 8015efe:	b09d      	sub	sp, #116	; 0x74
 8015f00:	4617      	mov	r7, r2
 8015f02:	461d      	mov	r5, r3
 8015f04:	4606      	mov	r6, r0
 8015f06:	b118      	cbz	r0, 8015f10 <_vfiprintf_r+0x18>
 8015f08:	6983      	ldr	r3, [r0, #24]
 8015f0a:	b90b      	cbnz	r3, 8015f10 <_vfiprintf_r+0x18>
 8015f0c:	f7ff ff3e 	bl	8015d8c <__sinit>
 8015f10:	4b7c      	ldr	r3, [pc, #496]	; (8016104 <_vfiprintf_r+0x20c>)
 8015f12:	429c      	cmp	r4, r3
 8015f14:	d158      	bne.n	8015fc8 <_vfiprintf_r+0xd0>
 8015f16:	6874      	ldr	r4, [r6, #4]
 8015f18:	89a3      	ldrh	r3, [r4, #12]
 8015f1a:	0718      	lsls	r0, r3, #28
 8015f1c:	d55e      	bpl.n	8015fdc <_vfiprintf_r+0xe4>
 8015f1e:	6923      	ldr	r3, [r4, #16]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d05b      	beq.n	8015fdc <_vfiprintf_r+0xe4>
 8015f24:	2300      	movs	r3, #0
 8015f26:	9309      	str	r3, [sp, #36]	; 0x24
 8015f28:	2320      	movs	r3, #32
 8015f2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015f2e:	2330      	movs	r3, #48	; 0x30
 8015f30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015f34:	9503      	str	r5, [sp, #12]
 8015f36:	f04f 0b01 	mov.w	fp, #1
 8015f3a:	46b8      	mov	r8, r7
 8015f3c:	4645      	mov	r5, r8
 8015f3e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015f42:	b10b      	cbz	r3, 8015f48 <_vfiprintf_r+0x50>
 8015f44:	2b25      	cmp	r3, #37	; 0x25
 8015f46:	d154      	bne.n	8015ff2 <_vfiprintf_r+0xfa>
 8015f48:	ebb8 0a07 	subs.w	sl, r8, r7
 8015f4c:	d00b      	beq.n	8015f66 <_vfiprintf_r+0x6e>
 8015f4e:	4653      	mov	r3, sl
 8015f50:	463a      	mov	r2, r7
 8015f52:	4621      	mov	r1, r4
 8015f54:	4630      	mov	r0, r6
 8015f56:	f7ff ffbc 	bl	8015ed2 <__sfputs_r>
 8015f5a:	3001      	adds	r0, #1
 8015f5c:	f000 80c2 	beq.w	80160e4 <_vfiprintf_r+0x1ec>
 8015f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f62:	4453      	add	r3, sl
 8015f64:	9309      	str	r3, [sp, #36]	; 0x24
 8015f66:	f898 3000 	ldrb.w	r3, [r8]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	f000 80ba 	beq.w	80160e4 <_vfiprintf_r+0x1ec>
 8015f70:	2300      	movs	r3, #0
 8015f72:	f04f 32ff 	mov.w	r2, #4294967295
 8015f76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015f7a:	9304      	str	r3, [sp, #16]
 8015f7c:	9307      	str	r3, [sp, #28]
 8015f7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015f82:	931a      	str	r3, [sp, #104]	; 0x68
 8015f84:	46a8      	mov	r8, r5
 8015f86:	2205      	movs	r2, #5
 8015f88:	f818 1b01 	ldrb.w	r1, [r8], #1
 8015f8c:	485e      	ldr	r0, [pc, #376]	; (8016108 <_vfiprintf_r+0x210>)
 8015f8e:	f7ea f91f 	bl	80001d0 <memchr>
 8015f92:	9b04      	ldr	r3, [sp, #16]
 8015f94:	bb78      	cbnz	r0, 8015ff6 <_vfiprintf_r+0xfe>
 8015f96:	06d9      	lsls	r1, r3, #27
 8015f98:	bf44      	itt	mi
 8015f9a:	2220      	movmi	r2, #32
 8015f9c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015fa0:	071a      	lsls	r2, r3, #28
 8015fa2:	bf44      	itt	mi
 8015fa4:	222b      	movmi	r2, #43	; 0x2b
 8015fa6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015faa:	782a      	ldrb	r2, [r5, #0]
 8015fac:	2a2a      	cmp	r2, #42	; 0x2a
 8015fae:	d02a      	beq.n	8016006 <_vfiprintf_r+0x10e>
 8015fb0:	9a07      	ldr	r2, [sp, #28]
 8015fb2:	46a8      	mov	r8, r5
 8015fb4:	2000      	movs	r0, #0
 8015fb6:	250a      	movs	r5, #10
 8015fb8:	4641      	mov	r1, r8
 8015fba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015fbe:	3b30      	subs	r3, #48	; 0x30
 8015fc0:	2b09      	cmp	r3, #9
 8015fc2:	d969      	bls.n	8016098 <_vfiprintf_r+0x1a0>
 8015fc4:	b360      	cbz	r0, 8016020 <_vfiprintf_r+0x128>
 8015fc6:	e024      	b.n	8016012 <_vfiprintf_r+0x11a>
 8015fc8:	4b50      	ldr	r3, [pc, #320]	; (801610c <_vfiprintf_r+0x214>)
 8015fca:	429c      	cmp	r4, r3
 8015fcc:	d101      	bne.n	8015fd2 <_vfiprintf_r+0xda>
 8015fce:	68b4      	ldr	r4, [r6, #8]
 8015fd0:	e7a2      	b.n	8015f18 <_vfiprintf_r+0x20>
 8015fd2:	4b4f      	ldr	r3, [pc, #316]	; (8016110 <_vfiprintf_r+0x218>)
 8015fd4:	429c      	cmp	r4, r3
 8015fd6:	bf08      	it	eq
 8015fd8:	68f4      	ldreq	r4, [r6, #12]
 8015fda:	e79d      	b.n	8015f18 <_vfiprintf_r+0x20>
 8015fdc:	4621      	mov	r1, r4
 8015fde:	4630      	mov	r0, r6
 8015fe0:	f000 fad0 	bl	8016584 <__swsetup_r>
 8015fe4:	2800      	cmp	r0, #0
 8015fe6:	d09d      	beq.n	8015f24 <_vfiprintf_r+0x2c>
 8015fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8015fec:	b01d      	add	sp, #116	; 0x74
 8015fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ff2:	46a8      	mov	r8, r5
 8015ff4:	e7a2      	b.n	8015f3c <_vfiprintf_r+0x44>
 8015ff6:	4a44      	ldr	r2, [pc, #272]	; (8016108 <_vfiprintf_r+0x210>)
 8015ff8:	1a80      	subs	r0, r0, r2
 8015ffa:	fa0b f000 	lsl.w	r0, fp, r0
 8015ffe:	4318      	orrs	r0, r3
 8016000:	9004      	str	r0, [sp, #16]
 8016002:	4645      	mov	r5, r8
 8016004:	e7be      	b.n	8015f84 <_vfiprintf_r+0x8c>
 8016006:	9a03      	ldr	r2, [sp, #12]
 8016008:	1d11      	adds	r1, r2, #4
 801600a:	6812      	ldr	r2, [r2, #0]
 801600c:	9103      	str	r1, [sp, #12]
 801600e:	2a00      	cmp	r2, #0
 8016010:	db01      	blt.n	8016016 <_vfiprintf_r+0x11e>
 8016012:	9207      	str	r2, [sp, #28]
 8016014:	e004      	b.n	8016020 <_vfiprintf_r+0x128>
 8016016:	4252      	negs	r2, r2
 8016018:	f043 0302 	orr.w	r3, r3, #2
 801601c:	9207      	str	r2, [sp, #28]
 801601e:	9304      	str	r3, [sp, #16]
 8016020:	f898 3000 	ldrb.w	r3, [r8]
 8016024:	2b2e      	cmp	r3, #46	; 0x2e
 8016026:	d10e      	bne.n	8016046 <_vfiprintf_r+0x14e>
 8016028:	f898 3001 	ldrb.w	r3, [r8, #1]
 801602c:	2b2a      	cmp	r3, #42	; 0x2a
 801602e:	d138      	bne.n	80160a2 <_vfiprintf_r+0x1aa>
 8016030:	9b03      	ldr	r3, [sp, #12]
 8016032:	1d1a      	adds	r2, r3, #4
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	9203      	str	r2, [sp, #12]
 8016038:	2b00      	cmp	r3, #0
 801603a:	bfb8      	it	lt
 801603c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016040:	f108 0802 	add.w	r8, r8, #2
 8016044:	9305      	str	r3, [sp, #20]
 8016046:	4d33      	ldr	r5, [pc, #204]	; (8016114 <_vfiprintf_r+0x21c>)
 8016048:	f898 1000 	ldrb.w	r1, [r8]
 801604c:	2203      	movs	r2, #3
 801604e:	4628      	mov	r0, r5
 8016050:	f7ea f8be 	bl	80001d0 <memchr>
 8016054:	b140      	cbz	r0, 8016068 <_vfiprintf_r+0x170>
 8016056:	2340      	movs	r3, #64	; 0x40
 8016058:	1b40      	subs	r0, r0, r5
 801605a:	fa03 f000 	lsl.w	r0, r3, r0
 801605e:	9b04      	ldr	r3, [sp, #16]
 8016060:	4303      	orrs	r3, r0
 8016062:	f108 0801 	add.w	r8, r8, #1
 8016066:	9304      	str	r3, [sp, #16]
 8016068:	f898 1000 	ldrb.w	r1, [r8]
 801606c:	482a      	ldr	r0, [pc, #168]	; (8016118 <_vfiprintf_r+0x220>)
 801606e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016072:	2206      	movs	r2, #6
 8016074:	f108 0701 	add.w	r7, r8, #1
 8016078:	f7ea f8aa 	bl	80001d0 <memchr>
 801607c:	2800      	cmp	r0, #0
 801607e:	d037      	beq.n	80160f0 <_vfiprintf_r+0x1f8>
 8016080:	4b26      	ldr	r3, [pc, #152]	; (801611c <_vfiprintf_r+0x224>)
 8016082:	bb1b      	cbnz	r3, 80160cc <_vfiprintf_r+0x1d4>
 8016084:	9b03      	ldr	r3, [sp, #12]
 8016086:	3307      	adds	r3, #7
 8016088:	f023 0307 	bic.w	r3, r3, #7
 801608c:	3308      	adds	r3, #8
 801608e:	9303      	str	r3, [sp, #12]
 8016090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016092:	444b      	add	r3, r9
 8016094:	9309      	str	r3, [sp, #36]	; 0x24
 8016096:	e750      	b.n	8015f3a <_vfiprintf_r+0x42>
 8016098:	fb05 3202 	mla	r2, r5, r2, r3
 801609c:	2001      	movs	r0, #1
 801609e:	4688      	mov	r8, r1
 80160a0:	e78a      	b.n	8015fb8 <_vfiprintf_r+0xc0>
 80160a2:	2300      	movs	r3, #0
 80160a4:	f108 0801 	add.w	r8, r8, #1
 80160a8:	9305      	str	r3, [sp, #20]
 80160aa:	4619      	mov	r1, r3
 80160ac:	250a      	movs	r5, #10
 80160ae:	4640      	mov	r0, r8
 80160b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80160b4:	3a30      	subs	r2, #48	; 0x30
 80160b6:	2a09      	cmp	r2, #9
 80160b8:	d903      	bls.n	80160c2 <_vfiprintf_r+0x1ca>
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d0c3      	beq.n	8016046 <_vfiprintf_r+0x14e>
 80160be:	9105      	str	r1, [sp, #20]
 80160c0:	e7c1      	b.n	8016046 <_vfiprintf_r+0x14e>
 80160c2:	fb05 2101 	mla	r1, r5, r1, r2
 80160c6:	2301      	movs	r3, #1
 80160c8:	4680      	mov	r8, r0
 80160ca:	e7f0      	b.n	80160ae <_vfiprintf_r+0x1b6>
 80160cc:	ab03      	add	r3, sp, #12
 80160ce:	9300      	str	r3, [sp, #0]
 80160d0:	4622      	mov	r2, r4
 80160d2:	4b13      	ldr	r3, [pc, #76]	; (8016120 <_vfiprintf_r+0x228>)
 80160d4:	a904      	add	r1, sp, #16
 80160d6:	4630      	mov	r0, r6
 80160d8:	f3af 8000 	nop.w
 80160dc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80160e0:	4681      	mov	r9, r0
 80160e2:	d1d5      	bne.n	8016090 <_vfiprintf_r+0x198>
 80160e4:	89a3      	ldrh	r3, [r4, #12]
 80160e6:	065b      	lsls	r3, r3, #25
 80160e8:	f53f af7e 	bmi.w	8015fe8 <_vfiprintf_r+0xf0>
 80160ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80160ee:	e77d      	b.n	8015fec <_vfiprintf_r+0xf4>
 80160f0:	ab03      	add	r3, sp, #12
 80160f2:	9300      	str	r3, [sp, #0]
 80160f4:	4622      	mov	r2, r4
 80160f6:	4b0a      	ldr	r3, [pc, #40]	; (8016120 <_vfiprintf_r+0x228>)
 80160f8:	a904      	add	r1, sp, #16
 80160fa:	4630      	mov	r0, r6
 80160fc:	f000 f888 	bl	8016210 <_printf_i>
 8016100:	e7ec      	b.n	80160dc <_vfiprintf_r+0x1e4>
 8016102:	bf00      	nop
 8016104:	08028260 	.word	0x08028260
 8016108:	080282a0 	.word	0x080282a0
 801610c:	08028280 	.word	0x08028280
 8016110:	08028240 	.word	0x08028240
 8016114:	080282a6 	.word	0x080282a6
 8016118:	080282aa 	.word	0x080282aa
 801611c:	00000000 	.word	0x00000000
 8016120:	08015ed3 	.word	0x08015ed3

08016124 <_printf_common>:
 8016124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016128:	4691      	mov	r9, r2
 801612a:	461f      	mov	r7, r3
 801612c:	688a      	ldr	r2, [r1, #8]
 801612e:	690b      	ldr	r3, [r1, #16]
 8016130:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016134:	4293      	cmp	r3, r2
 8016136:	bfb8      	it	lt
 8016138:	4613      	movlt	r3, r2
 801613a:	f8c9 3000 	str.w	r3, [r9]
 801613e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016142:	4606      	mov	r6, r0
 8016144:	460c      	mov	r4, r1
 8016146:	b112      	cbz	r2, 801614e <_printf_common+0x2a>
 8016148:	3301      	adds	r3, #1
 801614a:	f8c9 3000 	str.w	r3, [r9]
 801614e:	6823      	ldr	r3, [r4, #0]
 8016150:	0699      	lsls	r1, r3, #26
 8016152:	bf42      	ittt	mi
 8016154:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016158:	3302      	addmi	r3, #2
 801615a:	f8c9 3000 	strmi.w	r3, [r9]
 801615e:	6825      	ldr	r5, [r4, #0]
 8016160:	f015 0506 	ands.w	r5, r5, #6
 8016164:	d107      	bne.n	8016176 <_printf_common+0x52>
 8016166:	f104 0a19 	add.w	sl, r4, #25
 801616a:	68e3      	ldr	r3, [r4, #12]
 801616c:	f8d9 2000 	ldr.w	r2, [r9]
 8016170:	1a9b      	subs	r3, r3, r2
 8016172:	42ab      	cmp	r3, r5
 8016174:	dc28      	bgt.n	80161c8 <_printf_common+0xa4>
 8016176:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801617a:	6822      	ldr	r2, [r4, #0]
 801617c:	3300      	adds	r3, #0
 801617e:	bf18      	it	ne
 8016180:	2301      	movne	r3, #1
 8016182:	0692      	lsls	r2, r2, #26
 8016184:	d42d      	bmi.n	80161e2 <_printf_common+0xbe>
 8016186:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801618a:	4639      	mov	r1, r7
 801618c:	4630      	mov	r0, r6
 801618e:	47c0      	blx	r8
 8016190:	3001      	adds	r0, #1
 8016192:	d020      	beq.n	80161d6 <_printf_common+0xb2>
 8016194:	6823      	ldr	r3, [r4, #0]
 8016196:	68e5      	ldr	r5, [r4, #12]
 8016198:	f8d9 2000 	ldr.w	r2, [r9]
 801619c:	f003 0306 	and.w	r3, r3, #6
 80161a0:	2b04      	cmp	r3, #4
 80161a2:	bf08      	it	eq
 80161a4:	1aad      	subeq	r5, r5, r2
 80161a6:	68a3      	ldr	r3, [r4, #8]
 80161a8:	6922      	ldr	r2, [r4, #16]
 80161aa:	bf0c      	ite	eq
 80161ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80161b0:	2500      	movne	r5, #0
 80161b2:	4293      	cmp	r3, r2
 80161b4:	bfc4      	itt	gt
 80161b6:	1a9b      	subgt	r3, r3, r2
 80161b8:	18ed      	addgt	r5, r5, r3
 80161ba:	f04f 0900 	mov.w	r9, #0
 80161be:	341a      	adds	r4, #26
 80161c0:	454d      	cmp	r5, r9
 80161c2:	d11a      	bne.n	80161fa <_printf_common+0xd6>
 80161c4:	2000      	movs	r0, #0
 80161c6:	e008      	b.n	80161da <_printf_common+0xb6>
 80161c8:	2301      	movs	r3, #1
 80161ca:	4652      	mov	r2, sl
 80161cc:	4639      	mov	r1, r7
 80161ce:	4630      	mov	r0, r6
 80161d0:	47c0      	blx	r8
 80161d2:	3001      	adds	r0, #1
 80161d4:	d103      	bne.n	80161de <_printf_common+0xba>
 80161d6:	f04f 30ff 	mov.w	r0, #4294967295
 80161da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161de:	3501      	adds	r5, #1
 80161e0:	e7c3      	b.n	801616a <_printf_common+0x46>
 80161e2:	18e1      	adds	r1, r4, r3
 80161e4:	1c5a      	adds	r2, r3, #1
 80161e6:	2030      	movs	r0, #48	; 0x30
 80161e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80161ec:	4422      	add	r2, r4
 80161ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80161f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80161f6:	3302      	adds	r3, #2
 80161f8:	e7c5      	b.n	8016186 <_printf_common+0x62>
 80161fa:	2301      	movs	r3, #1
 80161fc:	4622      	mov	r2, r4
 80161fe:	4639      	mov	r1, r7
 8016200:	4630      	mov	r0, r6
 8016202:	47c0      	blx	r8
 8016204:	3001      	adds	r0, #1
 8016206:	d0e6      	beq.n	80161d6 <_printf_common+0xb2>
 8016208:	f109 0901 	add.w	r9, r9, #1
 801620c:	e7d8      	b.n	80161c0 <_printf_common+0x9c>
	...

08016210 <_printf_i>:
 8016210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016214:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016218:	460c      	mov	r4, r1
 801621a:	7e09      	ldrb	r1, [r1, #24]
 801621c:	b085      	sub	sp, #20
 801621e:	296e      	cmp	r1, #110	; 0x6e
 8016220:	4617      	mov	r7, r2
 8016222:	4606      	mov	r6, r0
 8016224:	4698      	mov	r8, r3
 8016226:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016228:	f000 80b3 	beq.w	8016392 <_printf_i+0x182>
 801622c:	d822      	bhi.n	8016274 <_printf_i+0x64>
 801622e:	2963      	cmp	r1, #99	; 0x63
 8016230:	d036      	beq.n	80162a0 <_printf_i+0x90>
 8016232:	d80a      	bhi.n	801624a <_printf_i+0x3a>
 8016234:	2900      	cmp	r1, #0
 8016236:	f000 80b9 	beq.w	80163ac <_printf_i+0x19c>
 801623a:	2958      	cmp	r1, #88	; 0x58
 801623c:	f000 8083 	beq.w	8016346 <_printf_i+0x136>
 8016240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016244:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016248:	e032      	b.n	80162b0 <_printf_i+0xa0>
 801624a:	2964      	cmp	r1, #100	; 0x64
 801624c:	d001      	beq.n	8016252 <_printf_i+0x42>
 801624e:	2969      	cmp	r1, #105	; 0x69
 8016250:	d1f6      	bne.n	8016240 <_printf_i+0x30>
 8016252:	6820      	ldr	r0, [r4, #0]
 8016254:	6813      	ldr	r3, [r2, #0]
 8016256:	0605      	lsls	r5, r0, #24
 8016258:	f103 0104 	add.w	r1, r3, #4
 801625c:	d52a      	bpl.n	80162b4 <_printf_i+0xa4>
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	6011      	str	r1, [r2, #0]
 8016262:	2b00      	cmp	r3, #0
 8016264:	da03      	bge.n	801626e <_printf_i+0x5e>
 8016266:	222d      	movs	r2, #45	; 0x2d
 8016268:	425b      	negs	r3, r3
 801626a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801626e:	486f      	ldr	r0, [pc, #444]	; (801642c <_printf_i+0x21c>)
 8016270:	220a      	movs	r2, #10
 8016272:	e039      	b.n	80162e8 <_printf_i+0xd8>
 8016274:	2973      	cmp	r1, #115	; 0x73
 8016276:	f000 809d 	beq.w	80163b4 <_printf_i+0x1a4>
 801627a:	d808      	bhi.n	801628e <_printf_i+0x7e>
 801627c:	296f      	cmp	r1, #111	; 0x6f
 801627e:	d020      	beq.n	80162c2 <_printf_i+0xb2>
 8016280:	2970      	cmp	r1, #112	; 0x70
 8016282:	d1dd      	bne.n	8016240 <_printf_i+0x30>
 8016284:	6823      	ldr	r3, [r4, #0]
 8016286:	f043 0320 	orr.w	r3, r3, #32
 801628a:	6023      	str	r3, [r4, #0]
 801628c:	e003      	b.n	8016296 <_printf_i+0x86>
 801628e:	2975      	cmp	r1, #117	; 0x75
 8016290:	d017      	beq.n	80162c2 <_printf_i+0xb2>
 8016292:	2978      	cmp	r1, #120	; 0x78
 8016294:	d1d4      	bne.n	8016240 <_printf_i+0x30>
 8016296:	2378      	movs	r3, #120	; 0x78
 8016298:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801629c:	4864      	ldr	r0, [pc, #400]	; (8016430 <_printf_i+0x220>)
 801629e:	e055      	b.n	801634c <_printf_i+0x13c>
 80162a0:	6813      	ldr	r3, [r2, #0]
 80162a2:	1d19      	adds	r1, r3, #4
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	6011      	str	r1, [r2, #0]
 80162a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80162ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80162b0:	2301      	movs	r3, #1
 80162b2:	e08c      	b.n	80163ce <_printf_i+0x1be>
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	6011      	str	r1, [r2, #0]
 80162b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80162bc:	bf18      	it	ne
 80162be:	b21b      	sxthne	r3, r3
 80162c0:	e7cf      	b.n	8016262 <_printf_i+0x52>
 80162c2:	6813      	ldr	r3, [r2, #0]
 80162c4:	6825      	ldr	r5, [r4, #0]
 80162c6:	1d18      	adds	r0, r3, #4
 80162c8:	6010      	str	r0, [r2, #0]
 80162ca:	0628      	lsls	r0, r5, #24
 80162cc:	d501      	bpl.n	80162d2 <_printf_i+0xc2>
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	e002      	b.n	80162d8 <_printf_i+0xc8>
 80162d2:	0668      	lsls	r0, r5, #25
 80162d4:	d5fb      	bpl.n	80162ce <_printf_i+0xbe>
 80162d6:	881b      	ldrh	r3, [r3, #0]
 80162d8:	4854      	ldr	r0, [pc, #336]	; (801642c <_printf_i+0x21c>)
 80162da:	296f      	cmp	r1, #111	; 0x6f
 80162dc:	bf14      	ite	ne
 80162de:	220a      	movne	r2, #10
 80162e0:	2208      	moveq	r2, #8
 80162e2:	2100      	movs	r1, #0
 80162e4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80162e8:	6865      	ldr	r5, [r4, #4]
 80162ea:	60a5      	str	r5, [r4, #8]
 80162ec:	2d00      	cmp	r5, #0
 80162ee:	f2c0 8095 	blt.w	801641c <_printf_i+0x20c>
 80162f2:	6821      	ldr	r1, [r4, #0]
 80162f4:	f021 0104 	bic.w	r1, r1, #4
 80162f8:	6021      	str	r1, [r4, #0]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d13d      	bne.n	801637a <_printf_i+0x16a>
 80162fe:	2d00      	cmp	r5, #0
 8016300:	f040 808e 	bne.w	8016420 <_printf_i+0x210>
 8016304:	4665      	mov	r5, ip
 8016306:	2a08      	cmp	r2, #8
 8016308:	d10b      	bne.n	8016322 <_printf_i+0x112>
 801630a:	6823      	ldr	r3, [r4, #0]
 801630c:	07db      	lsls	r3, r3, #31
 801630e:	d508      	bpl.n	8016322 <_printf_i+0x112>
 8016310:	6923      	ldr	r3, [r4, #16]
 8016312:	6862      	ldr	r2, [r4, #4]
 8016314:	429a      	cmp	r2, r3
 8016316:	bfde      	ittt	le
 8016318:	2330      	movle	r3, #48	; 0x30
 801631a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801631e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016322:	ebac 0305 	sub.w	r3, ip, r5
 8016326:	6123      	str	r3, [r4, #16]
 8016328:	f8cd 8000 	str.w	r8, [sp]
 801632c:	463b      	mov	r3, r7
 801632e:	aa03      	add	r2, sp, #12
 8016330:	4621      	mov	r1, r4
 8016332:	4630      	mov	r0, r6
 8016334:	f7ff fef6 	bl	8016124 <_printf_common>
 8016338:	3001      	adds	r0, #1
 801633a:	d14d      	bne.n	80163d8 <_printf_i+0x1c8>
 801633c:	f04f 30ff 	mov.w	r0, #4294967295
 8016340:	b005      	add	sp, #20
 8016342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016346:	4839      	ldr	r0, [pc, #228]	; (801642c <_printf_i+0x21c>)
 8016348:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801634c:	6813      	ldr	r3, [r2, #0]
 801634e:	6821      	ldr	r1, [r4, #0]
 8016350:	1d1d      	adds	r5, r3, #4
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	6015      	str	r5, [r2, #0]
 8016356:	060a      	lsls	r2, r1, #24
 8016358:	d50b      	bpl.n	8016372 <_printf_i+0x162>
 801635a:	07ca      	lsls	r2, r1, #31
 801635c:	bf44      	itt	mi
 801635e:	f041 0120 	orrmi.w	r1, r1, #32
 8016362:	6021      	strmi	r1, [r4, #0]
 8016364:	b91b      	cbnz	r3, 801636e <_printf_i+0x15e>
 8016366:	6822      	ldr	r2, [r4, #0]
 8016368:	f022 0220 	bic.w	r2, r2, #32
 801636c:	6022      	str	r2, [r4, #0]
 801636e:	2210      	movs	r2, #16
 8016370:	e7b7      	b.n	80162e2 <_printf_i+0xd2>
 8016372:	064d      	lsls	r5, r1, #25
 8016374:	bf48      	it	mi
 8016376:	b29b      	uxthmi	r3, r3
 8016378:	e7ef      	b.n	801635a <_printf_i+0x14a>
 801637a:	4665      	mov	r5, ip
 801637c:	fbb3 f1f2 	udiv	r1, r3, r2
 8016380:	fb02 3311 	mls	r3, r2, r1, r3
 8016384:	5cc3      	ldrb	r3, [r0, r3]
 8016386:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801638a:	460b      	mov	r3, r1
 801638c:	2900      	cmp	r1, #0
 801638e:	d1f5      	bne.n	801637c <_printf_i+0x16c>
 8016390:	e7b9      	b.n	8016306 <_printf_i+0xf6>
 8016392:	6813      	ldr	r3, [r2, #0]
 8016394:	6825      	ldr	r5, [r4, #0]
 8016396:	6961      	ldr	r1, [r4, #20]
 8016398:	1d18      	adds	r0, r3, #4
 801639a:	6010      	str	r0, [r2, #0]
 801639c:	0628      	lsls	r0, r5, #24
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	d501      	bpl.n	80163a6 <_printf_i+0x196>
 80163a2:	6019      	str	r1, [r3, #0]
 80163a4:	e002      	b.n	80163ac <_printf_i+0x19c>
 80163a6:	066a      	lsls	r2, r5, #25
 80163a8:	d5fb      	bpl.n	80163a2 <_printf_i+0x192>
 80163aa:	8019      	strh	r1, [r3, #0]
 80163ac:	2300      	movs	r3, #0
 80163ae:	6123      	str	r3, [r4, #16]
 80163b0:	4665      	mov	r5, ip
 80163b2:	e7b9      	b.n	8016328 <_printf_i+0x118>
 80163b4:	6813      	ldr	r3, [r2, #0]
 80163b6:	1d19      	adds	r1, r3, #4
 80163b8:	6011      	str	r1, [r2, #0]
 80163ba:	681d      	ldr	r5, [r3, #0]
 80163bc:	6862      	ldr	r2, [r4, #4]
 80163be:	2100      	movs	r1, #0
 80163c0:	4628      	mov	r0, r5
 80163c2:	f7e9 ff05 	bl	80001d0 <memchr>
 80163c6:	b108      	cbz	r0, 80163cc <_printf_i+0x1bc>
 80163c8:	1b40      	subs	r0, r0, r5
 80163ca:	6060      	str	r0, [r4, #4]
 80163cc:	6863      	ldr	r3, [r4, #4]
 80163ce:	6123      	str	r3, [r4, #16]
 80163d0:	2300      	movs	r3, #0
 80163d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80163d6:	e7a7      	b.n	8016328 <_printf_i+0x118>
 80163d8:	6923      	ldr	r3, [r4, #16]
 80163da:	462a      	mov	r2, r5
 80163dc:	4639      	mov	r1, r7
 80163de:	4630      	mov	r0, r6
 80163e0:	47c0      	blx	r8
 80163e2:	3001      	adds	r0, #1
 80163e4:	d0aa      	beq.n	801633c <_printf_i+0x12c>
 80163e6:	6823      	ldr	r3, [r4, #0]
 80163e8:	079b      	lsls	r3, r3, #30
 80163ea:	d413      	bmi.n	8016414 <_printf_i+0x204>
 80163ec:	68e0      	ldr	r0, [r4, #12]
 80163ee:	9b03      	ldr	r3, [sp, #12]
 80163f0:	4298      	cmp	r0, r3
 80163f2:	bfb8      	it	lt
 80163f4:	4618      	movlt	r0, r3
 80163f6:	e7a3      	b.n	8016340 <_printf_i+0x130>
 80163f8:	2301      	movs	r3, #1
 80163fa:	464a      	mov	r2, r9
 80163fc:	4639      	mov	r1, r7
 80163fe:	4630      	mov	r0, r6
 8016400:	47c0      	blx	r8
 8016402:	3001      	adds	r0, #1
 8016404:	d09a      	beq.n	801633c <_printf_i+0x12c>
 8016406:	3501      	adds	r5, #1
 8016408:	68e3      	ldr	r3, [r4, #12]
 801640a:	9a03      	ldr	r2, [sp, #12]
 801640c:	1a9b      	subs	r3, r3, r2
 801640e:	42ab      	cmp	r3, r5
 8016410:	dcf2      	bgt.n	80163f8 <_printf_i+0x1e8>
 8016412:	e7eb      	b.n	80163ec <_printf_i+0x1dc>
 8016414:	2500      	movs	r5, #0
 8016416:	f104 0919 	add.w	r9, r4, #25
 801641a:	e7f5      	b.n	8016408 <_printf_i+0x1f8>
 801641c:	2b00      	cmp	r3, #0
 801641e:	d1ac      	bne.n	801637a <_printf_i+0x16a>
 8016420:	7803      	ldrb	r3, [r0, #0]
 8016422:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016426:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801642a:	e76c      	b.n	8016306 <_printf_i+0xf6>
 801642c:	080282b1 	.word	0x080282b1
 8016430:	080282c2 	.word	0x080282c2

08016434 <__sread>:
 8016434:	b510      	push	{r4, lr}
 8016436:	460c      	mov	r4, r1
 8016438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801643c:	f000 fa46 	bl	80168cc <_read_r>
 8016440:	2800      	cmp	r0, #0
 8016442:	bfab      	itete	ge
 8016444:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016446:	89a3      	ldrhlt	r3, [r4, #12]
 8016448:	181b      	addge	r3, r3, r0
 801644a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801644e:	bfac      	ite	ge
 8016450:	6563      	strge	r3, [r4, #84]	; 0x54
 8016452:	81a3      	strhlt	r3, [r4, #12]
 8016454:	bd10      	pop	{r4, pc}

08016456 <__swrite>:
 8016456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801645a:	461f      	mov	r7, r3
 801645c:	898b      	ldrh	r3, [r1, #12]
 801645e:	05db      	lsls	r3, r3, #23
 8016460:	4605      	mov	r5, r0
 8016462:	460c      	mov	r4, r1
 8016464:	4616      	mov	r6, r2
 8016466:	d505      	bpl.n	8016474 <__swrite+0x1e>
 8016468:	2302      	movs	r3, #2
 801646a:	2200      	movs	r2, #0
 801646c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016470:	f000 f9b6 	bl	80167e0 <_lseek_r>
 8016474:	89a3      	ldrh	r3, [r4, #12]
 8016476:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801647a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801647e:	81a3      	strh	r3, [r4, #12]
 8016480:	4632      	mov	r2, r6
 8016482:	463b      	mov	r3, r7
 8016484:	4628      	mov	r0, r5
 8016486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801648a:	f000 b869 	b.w	8016560 <_write_r>

0801648e <__sseek>:
 801648e:	b510      	push	{r4, lr}
 8016490:	460c      	mov	r4, r1
 8016492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016496:	f000 f9a3 	bl	80167e0 <_lseek_r>
 801649a:	1c43      	adds	r3, r0, #1
 801649c:	89a3      	ldrh	r3, [r4, #12]
 801649e:	bf15      	itete	ne
 80164a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80164a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80164a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80164aa:	81a3      	strheq	r3, [r4, #12]
 80164ac:	bf18      	it	ne
 80164ae:	81a3      	strhne	r3, [r4, #12]
 80164b0:	bd10      	pop	{r4, pc}

080164b2 <__sclose>:
 80164b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164b6:	f000 b8d3 	b.w	8016660 <_close_r>
	...

080164bc <__swbuf_r>:
 80164bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164be:	460e      	mov	r6, r1
 80164c0:	4614      	mov	r4, r2
 80164c2:	4605      	mov	r5, r0
 80164c4:	b118      	cbz	r0, 80164ce <__swbuf_r+0x12>
 80164c6:	6983      	ldr	r3, [r0, #24]
 80164c8:	b90b      	cbnz	r3, 80164ce <__swbuf_r+0x12>
 80164ca:	f7ff fc5f 	bl	8015d8c <__sinit>
 80164ce:	4b21      	ldr	r3, [pc, #132]	; (8016554 <__swbuf_r+0x98>)
 80164d0:	429c      	cmp	r4, r3
 80164d2:	d12a      	bne.n	801652a <__swbuf_r+0x6e>
 80164d4:	686c      	ldr	r4, [r5, #4]
 80164d6:	69a3      	ldr	r3, [r4, #24]
 80164d8:	60a3      	str	r3, [r4, #8]
 80164da:	89a3      	ldrh	r3, [r4, #12]
 80164dc:	071a      	lsls	r2, r3, #28
 80164de:	d52e      	bpl.n	801653e <__swbuf_r+0x82>
 80164e0:	6923      	ldr	r3, [r4, #16]
 80164e2:	b363      	cbz	r3, 801653e <__swbuf_r+0x82>
 80164e4:	6923      	ldr	r3, [r4, #16]
 80164e6:	6820      	ldr	r0, [r4, #0]
 80164e8:	1ac0      	subs	r0, r0, r3
 80164ea:	6963      	ldr	r3, [r4, #20]
 80164ec:	b2f6      	uxtb	r6, r6
 80164ee:	4283      	cmp	r3, r0
 80164f0:	4637      	mov	r7, r6
 80164f2:	dc04      	bgt.n	80164fe <__swbuf_r+0x42>
 80164f4:	4621      	mov	r1, r4
 80164f6:	4628      	mov	r0, r5
 80164f8:	f000 f948 	bl	801678c <_fflush_r>
 80164fc:	bb28      	cbnz	r0, 801654a <__swbuf_r+0x8e>
 80164fe:	68a3      	ldr	r3, [r4, #8]
 8016500:	3b01      	subs	r3, #1
 8016502:	60a3      	str	r3, [r4, #8]
 8016504:	6823      	ldr	r3, [r4, #0]
 8016506:	1c5a      	adds	r2, r3, #1
 8016508:	6022      	str	r2, [r4, #0]
 801650a:	701e      	strb	r6, [r3, #0]
 801650c:	6963      	ldr	r3, [r4, #20]
 801650e:	3001      	adds	r0, #1
 8016510:	4283      	cmp	r3, r0
 8016512:	d004      	beq.n	801651e <__swbuf_r+0x62>
 8016514:	89a3      	ldrh	r3, [r4, #12]
 8016516:	07db      	lsls	r3, r3, #31
 8016518:	d519      	bpl.n	801654e <__swbuf_r+0x92>
 801651a:	2e0a      	cmp	r6, #10
 801651c:	d117      	bne.n	801654e <__swbuf_r+0x92>
 801651e:	4621      	mov	r1, r4
 8016520:	4628      	mov	r0, r5
 8016522:	f000 f933 	bl	801678c <_fflush_r>
 8016526:	b190      	cbz	r0, 801654e <__swbuf_r+0x92>
 8016528:	e00f      	b.n	801654a <__swbuf_r+0x8e>
 801652a:	4b0b      	ldr	r3, [pc, #44]	; (8016558 <__swbuf_r+0x9c>)
 801652c:	429c      	cmp	r4, r3
 801652e:	d101      	bne.n	8016534 <__swbuf_r+0x78>
 8016530:	68ac      	ldr	r4, [r5, #8]
 8016532:	e7d0      	b.n	80164d6 <__swbuf_r+0x1a>
 8016534:	4b09      	ldr	r3, [pc, #36]	; (801655c <__swbuf_r+0xa0>)
 8016536:	429c      	cmp	r4, r3
 8016538:	bf08      	it	eq
 801653a:	68ec      	ldreq	r4, [r5, #12]
 801653c:	e7cb      	b.n	80164d6 <__swbuf_r+0x1a>
 801653e:	4621      	mov	r1, r4
 8016540:	4628      	mov	r0, r5
 8016542:	f000 f81f 	bl	8016584 <__swsetup_r>
 8016546:	2800      	cmp	r0, #0
 8016548:	d0cc      	beq.n	80164e4 <__swbuf_r+0x28>
 801654a:	f04f 37ff 	mov.w	r7, #4294967295
 801654e:	4638      	mov	r0, r7
 8016550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016552:	bf00      	nop
 8016554:	08028260 	.word	0x08028260
 8016558:	08028280 	.word	0x08028280
 801655c:	08028240 	.word	0x08028240

08016560 <_write_r>:
 8016560:	b538      	push	{r3, r4, r5, lr}
 8016562:	4c07      	ldr	r4, [pc, #28]	; (8016580 <_write_r+0x20>)
 8016564:	4605      	mov	r5, r0
 8016566:	4608      	mov	r0, r1
 8016568:	4611      	mov	r1, r2
 801656a:	2200      	movs	r2, #0
 801656c:	6022      	str	r2, [r4, #0]
 801656e:	461a      	mov	r2, r3
 8016570:	f7f0 f89b 	bl	80066aa <_write>
 8016574:	1c43      	adds	r3, r0, #1
 8016576:	d102      	bne.n	801657e <_write_r+0x1e>
 8016578:	6823      	ldr	r3, [r4, #0]
 801657a:	b103      	cbz	r3, 801657e <_write_r+0x1e>
 801657c:	602b      	str	r3, [r5, #0]
 801657e:	bd38      	pop	{r3, r4, r5, pc}
 8016580:	20007738 	.word	0x20007738

08016584 <__swsetup_r>:
 8016584:	4b32      	ldr	r3, [pc, #200]	; (8016650 <__swsetup_r+0xcc>)
 8016586:	b570      	push	{r4, r5, r6, lr}
 8016588:	681d      	ldr	r5, [r3, #0]
 801658a:	4606      	mov	r6, r0
 801658c:	460c      	mov	r4, r1
 801658e:	b125      	cbz	r5, 801659a <__swsetup_r+0x16>
 8016590:	69ab      	ldr	r3, [r5, #24]
 8016592:	b913      	cbnz	r3, 801659a <__swsetup_r+0x16>
 8016594:	4628      	mov	r0, r5
 8016596:	f7ff fbf9 	bl	8015d8c <__sinit>
 801659a:	4b2e      	ldr	r3, [pc, #184]	; (8016654 <__swsetup_r+0xd0>)
 801659c:	429c      	cmp	r4, r3
 801659e:	d10f      	bne.n	80165c0 <__swsetup_r+0x3c>
 80165a0:	686c      	ldr	r4, [r5, #4]
 80165a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80165a6:	b29a      	uxth	r2, r3
 80165a8:	0715      	lsls	r5, r2, #28
 80165aa:	d42c      	bmi.n	8016606 <__swsetup_r+0x82>
 80165ac:	06d0      	lsls	r0, r2, #27
 80165ae:	d411      	bmi.n	80165d4 <__swsetup_r+0x50>
 80165b0:	2209      	movs	r2, #9
 80165b2:	6032      	str	r2, [r6, #0]
 80165b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80165b8:	81a3      	strh	r3, [r4, #12]
 80165ba:	f04f 30ff 	mov.w	r0, #4294967295
 80165be:	e03e      	b.n	801663e <__swsetup_r+0xba>
 80165c0:	4b25      	ldr	r3, [pc, #148]	; (8016658 <__swsetup_r+0xd4>)
 80165c2:	429c      	cmp	r4, r3
 80165c4:	d101      	bne.n	80165ca <__swsetup_r+0x46>
 80165c6:	68ac      	ldr	r4, [r5, #8]
 80165c8:	e7eb      	b.n	80165a2 <__swsetup_r+0x1e>
 80165ca:	4b24      	ldr	r3, [pc, #144]	; (801665c <__swsetup_r+0xd8>)
 80165cc:	429c      	cmp	r4, r3
 80165ce:	bf08      	it	eq
 80165d0:	68ec      	ldreq	r4, [r5, #12]
 80165d2:	e7e6      	b.n	80165a2 <__swsetup_r+0x1e>
 80165d4:	0751      	lsls	r1, r2, #29
 80165d6:	d512      	bpl.n	80165fe <__swsetup_r+0x7a>
 80165d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80165da:	b141      	cbz	r1, 80165ee <__swsetup_r+0x6a>
 80165dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80165e0:	4299      	cmp	r1, r3
 80165e2:	d002      	beq.n	80165ea <__swsetup_r+0x66>
 80165e4:	4630      	mov	r0, r6
 80165e6:	f7ff fa8d 	bl	8015b04 <_free_r>
 80165ea:	2300      	movs	r3, #0
 80165ec:	6363      	str	r3, [r4, #52]	; 0x34
 80165ee:	89a3      	ldrh	r3, [r4, #12]
 80165f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80165f4:	81a3      	strh	r3, [r4, #12]
 80165f6:	2300      	movs	r3, #0
 80165f8:	6063      	str	r3, [r4, #4]
 80165fa:	6923      	ldr	r3, [r4, #16]
 80165fc:	6023      	str	r3, [r4, #0]
 80165fe:	89a3      	ldrh	r3, [r4, #12]
 8016600:	f043 0308 	orr.w	r3, r3, #8
 8016604:	81a3      	strh	r3, [r4, #12]
 8016606:	6923      	ldr	r3, [r4, #16]
 8016608:	b94b      	cbnz	r3, 801661e <__swsetup_r+0x9a>
 801660a:	89a3      	ldrh	r3, [r4, #12]
 801660c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016614:	d003      	beq.n	801661e <__swsetup_r+0x9a>
 8016616:	4621      	mov	r1, r4
 8016618:	4630      	mov	r0, r6
 801661a:	f000 f917 	bl	801684c <__smakebuf_r>
 801661e:	89a2      	ldrh	r2, [r4, #12]
 8016620:	f012 0301 	ands.w	r3, r2, #1
 8016624:	d00c      	beq.n	8016640 <__swsetup_r+0xbc>
 8016626:	2300      	movs	r3, #0
 8016628:	60a3      	str	r3, [r4, #8]
 801662a:	6963      	ldr	r3, [r4, #20]
 801662c:	425b      	negs	r3, r3
 801662e:	61a3      	str	r3, [r4, #24]
 8016630:	6923      	ldr	r3, [r4, #16]
 8016632:	b953      	cbnz	r3, 801664a <__swsetup_r+0xc6>
 8016634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016638:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801663c:	d1ba      	bne.n	80165b4 <__swsetup_r+0x30>
 801663e:	bd70      	pop	{r4, r5, r6, pc}
 8016640:	0792      	lsls	r2, r2, #30
 8016642:	bf58      	it	pl
 8016644:	6963      	ldrpl	r3, [r4, #20]
 8016646:	60a3      	str	r3, [r4, #8]
 8016648:	e7f2      	b.n	8016630 <__swsetup_r+0xac>
 801664a:	2000      	movs	r0, #0
 801664c:	e7f7      	b.n	801663e <__swsetup_r+0xba>
 801664e:	bf00      	nop
 8016650:	20000020 	.word	0x20000020
 8016654:	08028260 	.word	0x08028260
 8016658:	08028280 	.word	0x08028280
 801665c:	08028240 	.word	0x08028240

08016660 <_close_r>:
 8016660:	b538      	push	{r3, r4, r5, lr}
 8016662:	4c06      	ldr	r4, [pc, #24]	; (801667c <_close_r+0x1c>)
 8016664:	2300      	movs	r3, #0
 8016666:	4605      	mov	r5, r0
 8016668:	4608      	mov	r0, r1
 801666a:	6023      	str	r3, [r4, #0]
 801666c:	f7f0 f839 	bl	80066e2 <_close>
 8016670:	1c43      	adds	r3, r0, #1
 8016672:	d102      	bne.n	801667a <_close_r+0x1a>
 8016674:	6823      	ldr	r3, [r4, #0]
 8016676:	b103      	cbz	r3, 801667a <_close_r+0x1a>
 8016678:	602b      	str	r3, [r5, #0]
 801667a:	bd38      	pop	{r3, r4, r5, pc}
 801667c:	20007738 	.word	0x20007738

08016680 <__sflush_r>:
 8016680:	898a      	ldrh	r2, [r1, #12]
 8016682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016686:	4605      	mov	r5, r0
 8016688:	0710      	lsls	r0, r2, #28
 801668a:	460c      	mov	r4, r1
 801668c:	d458      	bmi.n	8016740 <__sflush_r+0xc0>
 801668e:	684b      	ldr	r3, [r1, #4]
 8016690:	2b00      	cmp	r3, #0
 8016692:	dc05      	bgt.n	80166a0 <__sflush_r+0x20>
 8016694:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016696:	2b00      	cmp	r3, #0
 8016698:	dc02      	bgt.n	80166a0 <__sflush_r+0x20>
 801669a:	2000      	movs	r0, #0
 801669c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80166a2:	2e00      	cmp	r6, #0
 80166a4:	d0f9      	beq.n	801669a <__sflush_r+0x1a>
 80166a6:	2300      	movs	r3, #0
 80166a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80166ac:	682f      	ldr	r7, [r5, #0]
 80166ae:	6a21      	ldr	r1, [r4, #32]
 80166b0:	602b      	str	r3, [r5, #0]
 80166b2:	d032      	beq.n	801671a <__sflush_r+0x9a>
 80166b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80166b6:	89a3      	ldrh	r3, [r4, #12]
 80166b8:	075a      	lsls	r2, r3, #29
 80166ba:	d505      	bpl.n	80166c8 <__sflush_r+0x48>
 80166bc:	6863      	ldr	r3, [r4, #4]
 80166be:	1ac0      	subs	r0, r0, r3
 80166c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80166c2:	b10b      	cbz	r3, 80166c8 <__sflush_r+0x48>
 80166c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80166c6:	1ac0      	subs	r0, r0, r3
 80166c8:	2300      	movs	r3, #0
 80166ca:	4602      	mov	r2, r0
 80166cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80166ce:	6a21      	ldr	r1, [r4, #32]
 80166d0:	4628      	mov	r0, r5
 80166d2:	47b0      	blx	r6
 80166d4:	1c43      	adds	r3, r0, #1
 80166d6:	89a3      	ldrh	r3, [r4, #12]
 80166d8:	d106      	bne.n	80166e8 <__sflush_r+0x68>
 80166da:	6829      	ldr	r1, [r5, #0]
 80166dc:	291d      	cmp	r1, #29
 80166de:	d848      	bhi.n	8016772 <__sflush_r+0xf2>
 80166e0:	4a29      	ldr	r2, [pc, #164]	; (8016788 <__sflush_r+0x108>)
 80166e2:	40ca      	lsrs	r2, r1
 80166e4:	07d6      	lsls	r6, r2, #31
 80166e6:	d544      	bpl.n	8016772 <__sflush_r+0xf2>
 80166e8:	2200      	movs	r2, #0
 80166ea:	6062      	str	r2, [r4, #4]
 80166ec:	04d9      	lsls	r1, r3, #19
 80166ee:	6922      	ldr	r2, [r4, #16]
 80166f0:	6022      	str	r2, [r4, #0]
 80166f2:	d504      	bpl.n	80166fe <__sflush_r+0x7e>
 80166f4:	1c42      	adds	r2, r0, #1
 80166f6:	d101      	bne.n	80166fc <__sflush_r+0x7c>
 80166f8:	682b      	ldr	r3, [r5, #0]
 80166fa:	b903      	cbnz	r3, 80166fe <__sflush_r+0x7e>
 80166fc:	6560      	str	r0, [r4, #84]	; 0x54
 80166fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016700:	602f      	str	r7, [r5, #0]
 8016702:	2900      	cmp	r1, #0
 8016704:	d0c9      	beq.n	801669a <__sflush_r+0x1a>
 8016706:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801670a:	4299      	cmp	r1, r3
 801670c:	d002      	beq.n	8016714 <__sflush_r+0x94>
 801670e:	4628      	mov	r0, r5
 8016710:	f7ff f9f8 	bl	8015b04 <_free_r>
 8016714:	2000      	movs	r0, #0
 8016716:	6360      	str	r0, [r4, #52]	; 0x34
 8016718:	e7c0      	b.n	801669c <__sflush_r+0x1c>
 801671a:	2301      	movs	r3, #1
 801671c:	4628      	mov	r0, r5
 801671e:	47b0      	blx	r6
 8016720:	1c41      	adds	r1, r0, #1
 8016722:	d1c8      	bne.n	80166b6 <__sflush_r+0x36>
 8016724:	682b      	ldr	r3, [r5, #0]
 8016726:	2b00      	cmp	r3, #0
 8016728:	d0c5      	beq.n	80166b6 <__sflush_r+0x36>
 801672a:	2b1d      	cmp	r3, #29
 801672c:	d001      	beq.n	8016732 <__sflush_r+0xb2>
 801672e:	2b16      	cmp	r3, #22
 8016730:	d101      	bne.n	8016736 <__sflush_r+0xb6>
 8016732:	602f      	str	r7, [r5, #0]
 8016734:	e7b1      	b.n	801669a <__sflush_r+0x1a>
 8016736:	89a3      	ldrh	r3, [r4, #12]
 8016738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801673c:	81a3      	strh	r3, [r4, #12]
 801673e:	e7ad      	b.n	801669c <__sflush_r+0x1c>
 8016740:	690f      	ldr	r7, [r1, #16]
 8016742:	2f00      	cmp	r7, #0
 8016744:	d0a9      	beq.n	801669a <__sflush_r+0x1a>
 8016746:	0793      	lsls	r3, r2, #30
 8016748:	680e      	ldr	r6, [r1, #0]
 801674a:	bf08      	it	eq
 801674c:	694b      	ldreq	r3, [r1, #20]
 801674e:	600f      	str	r7, [r1, #0]
 8016750:	bf18      	it	ne
 8016752:	2300      	movne	r3, #0
 8016754:	eba6 0807 	sub.w	r8, r6, r7
 8016758:	608b      	str	r3, [r1, #8]
 801675a:	f1b8 0f00 	cmp.w	r8, #0
 801675e:	dd9c      	ble.n	801669a <__sflush_r+0x1a>
 8016760:	4643      	mov	r3, r8
 8016762:	463a      	mov	r2, r7
 8016764:	6a21      	ldr	r1, [r4, #32]
 8016766:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016768:	4628      	mov	r0, r5
 801676a:	47b0      	blx	r6
 801676c:	2800      	cmp	r0, #0
 801676e:	dc06      	bgt.n	801677e <__sflush_r+0xfe>
 8016770:	89a3      	ldrh	r3, [r4, #12]
 8016772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016776:	81a3      	strh	r3, [r4, #12]
 8016778:	f04f 30ff 	mov.w	r0, #4294967295
 801677c:	e78e      	b.n	801669c <__sflush_r+0x1c>
 801677e:	4407      	add	r7, r0
 8016780:	eba8 0800 	sub.w	r8, r8, r0
 8016784:	e7e9      	b.n	801675a <__sflush_r+0xda>
 8016786:	bf00      	nop
 8016788:	20400001 	.word	0x20400001

0801678c <_fflush_r>:
 801678c:	b538      	push	{r3, r4, r5, lr}
 801678e:	690b      	ldr	r3, [r1, #16]
 8016790:	4605      	mov	r5, r0
 8016792:	460c      	mov	r4, r1
 8016794:	b1db      	cbz	r3, 80167ce <_fflush_r+0x42>
 8016796:	b118      	cbz	r0, 80167a0 <_fflush_r+0x14>
 8016798:	6983      	ldr	r3, [r0, #24]
 801679a:	b90b      	cbnz	r3, 80167a0 <_fflush_r+0x14>
 801679c:	f7ff faf6 	bl	8015d8c <__sinit>
 80167a0:	4b0c      	ldr	r3, [pc, #48]	; (80167d4 <_fflush_r+0x48>)
 80167a2:	429c      	cmp	r4, r3
 80167a4:	d109      	bne.n	80167ba <_fflush_r+0x2e>
 80167a6:	686c      	ldr	r4, [r5, #4]
 80167a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80167ac:	b17b      	cbz	r3, 80167ce <_fflush_r+0x42>
 80167ae:	4621      	mov	r1, r4
 80167b0:	4628      	mov	r0, r5
 80167b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80167b6:	f7ff bf63 	b.w	8016680 <__sflush_r>
 80167ba:	4b07      	ldr	r3, [pc, #28]	; (80167d8 <_fflush_r+0x4c>)
 80167bc:	429c      	cmp	r4, r3
 80167be:	d101      	bne.n	80167c4 <_fflush_r+0x38>
 80167c0:	68ac      	ldr	r4, [r5, #8]
 80167c2:	e7f1      	b.n	80167a8 <_fflush_r+0x1c>
 80167c4:	4b05      	ldr	r3, [pc, #20]	; (80167dc <_fflush_r+0x50>)
 80167c6:	429c      	cmp	r4, r3
 80167c8:	bf08      	it	eq
 80167ca:	68ec      	ldreq	r4, [r5, #12]
 80167cc:	e7ec      	b.n	80167a8 <_fflush_r+0x1c>
 80167ce:	2000      	movs	r0, #0
 80167d0:	bd38      	pop	{r3, r4, r5, pc}
 80167d2:	bf00      	nop
 80167d4:	08028260 	.word	0x08028260
 80167d8:	08028280 	.word	0x08028280
 80167dc:	08028240 	.word	0x08028240

080167e0 <_lseek_r>:
 80167e0:	b538      	push	{r3, r4, r5, lr}
 80167e2:	4c07      	ldr	r4, [pc, #28]	; (8016800 <_lseek_r+0x20>)
 80167e4:	4605      	mov	r5, r0
 80167e6:	4608      	mov	r0, r1
 80167e8:	4611      	mov	r1, r2
 80167ea:	2200      	movs	r2, #0
 80167ec:	6022      	str	r2, [r4, #0]
 80167ee:	461a      	mov	r2, r3
 80167f0:	f7ef ff9e 	bl	8006730 <_lseek>
 80167f4:	1c43      	adds	r3, r0, #1
 80167f6:	d102      	bne.n	80167fe <_lseek_r+0x1e>
 80167f8:	6823      	ldr	r3, [r4, #0]
 80167fa:	b103      	cbz	r3, 80167fe <_lseek_r+0x1e>
 80167fc:	602b      	str	r3, [r5, #0]
 80167fe:	bd38      	pop	{r3, r4, r5, pc}
 8016800:	20007738 	.word	0x20007738

08016804 <__swhatbuf_r>:
 8016804:	b570      	push	{r4, r5, r6, lr}
 8016806:	460e      	mov	r6, r1
 8016808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801680c:	2900      	cmp	r1, #0
 801680e:	b096      	sub	sp, #88	; 0x58
 8016810:	4614      	mov	r4, r2
 8016812:	461d      	mov	r5, r3
 8016814:	da07      	bge.n	8016826 <__swhatbuf_r+0x22>
 8016816:	2300      	movs	r3, #0
 8016818:	602b      	str	r3, [r5, #0]
 801681a:	89b3      	ldrh	r3, [r6, #12]
 801681c:	061a      	lsls	r2, r3, #24
 801681e:	d410      	bmi.n	8016842 <__swhatbuf_r+0x3e>
 8016820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016824:	e00e      	b.n	8016844 <__swhatbuf_r+0x40>
 8016826:	466a      	mov	r2, sp
 8016828:	f000 f862 	bl	80168f0 <_fstat_r>
 801682c:	2800      	cmp	r0, #0
 801682e:	dbf2      	blt.n	8016816 <__swhatbuf_r+0x12>
 8016830:	9a01      	ldr	r2, [sp, #4]
 8016832:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016836:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801683a:	425a      	negs	r2, r3
 801683c:	415a      	adcs	r2, r3
 801683e:	602a      	str	r2, [r5, #0]
 8016840:	e7ee      	b.n	8016820 <__swhatbuf_r+0x1c>
 8016842:	2340      	movs	r3, #64	; 0x40
 8016844:	2000      	movs	r0, #0
 8016846:	6023      	str	r3, [r4, #0]
 8016848:	b016      	add	sp, #88	; 0x58
 801684a:	bd70      	pop	{r4, r5, r6, pc}

0801684c <__smakebuf_r>:
 801684c:	898b      	ldrh	r3, [r1, #12]
 801684e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016850:	079d      	lsls	r5, r3, #30
 8016852:	4606      	mov	r6, r0
 8016854:	460c      	mov	r4, r1
 8016856:	d507      	bpl.n	8016868 <__smakebuf_r+0x1c>
 8016858:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801685c:	6023      	str	r3, [r4, #0]
 801685e:	6123      	str	r3, [r4, #16]
 8016860:	2301      	movs	r3, #1
 8016862:	6163      	str	r3, [r4, #20]
 8016864:	b002      	add	sp, #8
 8016866:	bd70      	pop	{r4, r5, r6, pc}
 8016868:	ab01      	add	r3, sp, #4
 801686a:	466a      	mov	r2, sp
 801686c:	f7ff ffca 	bl	8016804 <__swhatbuf_r>
 8016870:	9900      	ldr	r1, [sp, #0]
 8016872:	4605      	mov	r5, r0
 8016874:	4630      	mov	r0, r6
 8016876:	f7ff f993 	bl	8015ba0 <_malloc_r>
 801687a:	b948      	cbnz	r0, 8016890 <__smakebuf_r+0x44>
 801687c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016880:	059a      	lsls	r2, r3, #22
 8016882:	d4ef      	bmi.n	8016864 <__smakebuf_r+0x18>
 8016884:	f023 0303 	bic.w	r3, r3, #3
 8016888:	f043 0302 	orr.w	r3, r3, #2
 801688c:	81a3      	strh	r3, [r4, #12]
 801688e:	e7e3      	b.n	8016858 <__smakebuf_r+0xc>
 8016890:	4b0d      	ldr	r3, [pc, #52]	; (80168c8 <__smakebuf_r+0x7c>)
 8016892:	62b3      	str	r3, [r6, #40]	; 0x28
 8016894:	89a3      	ldrh	r3, [r4, #12]
 8016896:	6020      	str	r0, [r4, #0]
 8016898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801689c:	81a3      	strh	r3, [r4, #12]
 801689e:	9b00      	ldr	r3, [sp, #0]
 80168a0:	6163      	str	r3, [r4, #20]
 80168a2:	9b01      	ldr	r3, [sp, #4]
 80168a4:	6120      	str	r0, [r4, #16]
 80168a6:	b15b      	cbz	r3, 80168c0 <__smakebuf_r+0x74>
 80168a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80168ac:	4630      	mov	r0, r6
 80168ae:	f000 f831 	bl	8016914 <_isatty_r>
 80168b2:	b128      	cbz	r0, 80168c0 <__smakebuf_r+0x74>
 80168b4:	89a3      	ldrh	r3, [r4, #12]
 80168b6:	f023 0303 	bic.w	r3, r3, #3
 80168ba:	f043 0301 	orr.w	r3, r3, #1
 80168be:	81a3      	strh	r3, [r4, #12]
 80168c0:	89a3      	ldrh	r3, [r4, #12]
 80168c2:	431d      	orrs	r5, r3
 80168c4:	81a5      	strh	r5, [r4, #12]
 80168c6:	e7cd      	b.n	8016864 <__smakebuf_r+0x18>
 80168c8:	08015d55 	.word	0x08015d55

080168cc <_read_r>:
 80168cc:	b538      	push	{r3, r4, r5, lr}
 80168ce:	4c07      	ldr	r4, [pc, #28]	; (80168ec <_read_r+0x20>)
 80168d0:	4605      	mov	r5, r0
 80168d2:	4608      	mov	r0, r1
 80168d4:	4611      	mov	r1, r2
 80168d6:	2200      	movs	r2, #0
 80168d8:	6022      	str	r2, [r4, #0]
 80168da:	461a      	mov	r2, r3
 80168dc:	f7ef fec8 	bl	8006670 <_read>
 80168e0:	1c43      	adds	r3, r0, #1
 80168e2:	d102      	bne.n	80168ea <_read_r+0x1e>
 80168e4:	6823      	ldr	r3, [r4, #0]
 80168e6:	b103      	cbz	r3, 80168ea <_read_r+0x1e>
 80168e8:	602b      	str	r3, [r5, #0]
 80168ea:	bd38      	pop	{r3, r4, r5, pc}
 80168ec:	20007738 	.word	0x20007738

080168f0 <_fstat_r>:
 80168f0:	b538      	push	{r3, r4, r5, lr}
 80168f2:	4c07      	ldr	r4, [pc, #28]	; (8016910 <_fstat_r+0x20>)
 80168f4:	2300      	movs	r3, #0
 80168f6:	4605      	mov	r5, r0
 80168f8:	4608      	mov	r0, r1
 80168fa:	4611      	mov	r1, r2
 80168fc:	6023      	str	r3, [r4, #0]
 80168fe:	f7ef fefc 	bl	80066fa <_fstat>
 8016902:	1c43      	adds	r3, r0, #1
 8016904:	d102      	bne.n	801690c <_fstat_r+0x1c>
 8016906:	6823      	ldr	r3, [r4, #0]
 8016908:	b103      	cbz	r3, 801690c <_fstat_r+0x1c>
 801690a:	602b      	str	r3, [r5, #0]
 801690c:	bd38      	pop	{r3, r4, r5, pc}
 801690e:	bf00      	nop
 8016910:	20007738 	.word	0x20007738

08016914 <_isatty_r>:
 8016914:	b538      	push	{r3, r4, r5, lr}
 8016916:	4c06      	ldr	r4, [pc, #24]	; (8016930 <_isatty_r+0x1c>)
 8016918:	2300      	movs	r3, #0
 801691a:	4605      	mov	r5, r0
 801691c:	4608      	mov	r0, r1
 801691e:	6023      	str	r3, [r4, #0]
 8016920:	f7ef fefb 	bl	800671a <_isatty>
 8016924:	1c43      	adds	r3, r0, #1
 8016926:	d102      	bne.n	801692e <_isatty_r+0x1a>
 8016928:	6823      	ldr	r3, [r4, #0]
 801692a:	b103      	cbz	r3, 801692e <_isatty_r+0x1a>
 801692c:	602b      	str	r3, [r5, #0]
 801692e:	bd38      	pop	{r3, r4, r5, pc}
 8016930:	20007738 	.word	0x20007738

08016934 <_init>:
 8016934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016936:	bf00      	nop
 8016938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801693a:	bc08      	pop	{r3}
 801693c:	469e      	mov	lr, r3
 801693e:	4770      	bx	lr

08016940 <_fini>:
 8016940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016942:	bf00      	nop
 8016944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016946:	bc08      	pop	{r3}
 8016948:	469e      	mov	lr, r3
 801694a:	4770      	bx	lr
