
Ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019638  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011e78  080197c8  080197c8  000297c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b640  0802b640  000400a4  2**0
                  CONTENTS
  4 .ARM          00000008  0802b640  0802b640  0003b640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b648  0802b648  000400a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b648  0802b648  0003b648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802b64c  0802b64c  0003b64c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0802b650  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007e6c  200000a8  0802b6f4  000400a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20007f14  0802b6f4  00047f14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000400a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000403b2  00000000  00000000  000400d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006575  00000000  00000000  00080486  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001da8  00000000  00000000  00086a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c78  00000000  00000000  000887a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f7da  00000000  00000000  0008a420  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00024f0b  00000000  00000000  000b9bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e7f73  00000000  00000000  000deb05  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c6a78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080f4  00000000  00000000  001c6af4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080197b0 	.word	0x080197b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	080197b0 	.word	0x080197b0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <SPI_Write_Byte>:
/*********************************************


*********************************************/	
 uint8_t SPI_Write_Byte(uint8_t value)                                    
{    
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
		Driver_Delay_us(10);
		value = (value << 1); 	
	}
#else
	
    __HAL_SPI_ENABLE(&hspi2);
 800059a:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <SPI_Write_Byte+0x68>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <SPI_Write_Byte+0x68>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80005a8:	601a      	str	r2, [r3, #0]
	SPI2->CR2 |= (1)<<12;
 80005aa:	4b14      	ldr	r3, [pc, #80]	; (80005fc <SPI_Write_Byte+0x6c>)
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	4a13      	ldr	r2, [pc, #76]	; (80005fc <SPI_Write_Byte+0x6c>)
 80005b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005b4:	6053      	str	r3, [r2, #4]
	
	while((SPI2->SR & (1<<1)) == 0)
 80005b6:	bf00      	nop
 80005b8:	4b10      	ldr	r3, [pc, #64]	; (80005fc <SPI_Write_Byte+0x6c>)
 80005ba:	689b      	ldr	r3, [r3, #8]
 80005bc:	f003 0302 	and.w	r3, r3, #2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d0f9      	beq.n	80005b8 <SPI_Write_Byte+0x28>
		;
        
        *((__IO uint8_t *)(&SPI2->DR)) = value;
 80005c4:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <SPI_Write_Byte+0x70>)
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	7013      	strb	r3, [r2, #0]
        
        while(SPI2->SR & (1<<7)) ; //Wait for not busy
 80005ca:	bf00      	nop
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <SPI_Write_Byte+0x6c>)
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1f9      	bne.n	80005cc <SPI_Write_Byte+0x3c>

        while((SPI2->SR & (1<<0)) == 0) ; // Wait for the receiving area to be empty
 80005d8:	bf00      	nop
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <SPI_Write_Byte+0x6c>)
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	f003 0301 	and.w	r3, r3, #1
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f9      	beq.n	80005da <SPI_Write_Byte+0x4a>
        
        return *((__IO uint8_t *)(&SPI2->DR));
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <SPI_Write_Byte+0x70>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	b2db      	uxtb	r3, r3

#endif
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	370c      	adds	r7, #12
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	200005d8 	.word	0x200005d8
 80005fc:	40003800 	.word	0x40003800
 8000600:	4000380c 	.word	0x4000380c

08000604 <Driver_Delay_ms>:
/*********************************************


*********************************************/	
void Driver_Delay_ms(uint32_t xms)	
{	
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	HAL_Delay(xms);
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f009 f951 	bl	80098b4 <HAL_Delay>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <LCD_Reset>:
***********************************************************************************************************************/
/*******************************************************************************
function:
			Hardware reset
*******************************************************************************/
static void LCD_Reset(void){
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	LCD_RST_1;
 8000620:	2201      	movs	r2, #1
 8000622:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000626:	480d      	ldr	r0, [pc, #52]	; (800065c <LCD_Reset+0x40>)
 8000628:	f00a fba6 	bl	800ad78 <HAL_GPIO_WritePin>
	Driver_Delay_ms(100);
 800062c:	2064      	movs	r0, #100	; 0x64
 800062e:	f7ff ffe9 	bl	8000604 <Driver_Delay_ms>
	LCD_RST_0;
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000638:	4808      	ldr	r0, [pc, #32]	; (800065c <LCD_Reset+0x40>)
 800063a:	f00a fb9d 	bl	800ad78 <HAL_GPIO_WritePin>
	Driver_Delay_ms(100);
 800063e:	2064      	movs	r0, #100	; 0x64
 8000640:	f7ff ffe0 	bl	8000604 <Driver_Delay_ms>
	LCD_RST_1;
 8000644:	2201      	movs	r2, #1
 8000646:	f44f 7100 	mov.w	r1, #512	; 0x200
 800064a:	4804      	ldr	r0, [pc, #16]	; (800065c <LCD_Reset+0x40>)
 800064c:	f00a fb94 	bl	800ad78 <HAL_GPIO_WritePin>
	Driver_Delay_ms(100);
 8000650:	2064      	movs	r0, #100	; 0x64
 8000652:	f7ff ffd7 	bl	8000604 <Driver_Delay_ms>
}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40020000 	.word	0x40020000

08000660 <LCD_WriteReg>:

/*******************************************************************************
function:
		Write register address and data
*******************************************************************************/
static void LCD_WriteReg(uint8_t Reg){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
	LCD_DC_0;
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000670:	480a      	ldr	r0, [pc, #40]	; (800069c <LCD_WriteReg+0x3c>)
 8000672:	f00a fb81 	bl	800ad78 <HAL_GPIO_WritePin>
	LCD_CS_0;
 8000676:	2200      	movs	r2, #0
 8000678:	2140      	movs	r1, #64	; 0x40
 800067a:	4809      	ldr	r0, [pc, #36]	; (80006a0 <LCD_WriteReg+0x40>)
 800067c:	f00a fb7c 	bl	800ad78 <HAL_GPIO_WritePin>
	SPI_Write_Byte(Reg);
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ff84 	bl	8000590 <SPI_Write_Byte>
	LCD_CS_1;
 8000688:	2201      	movs	r2, #1
 800068a:	2140      	movs	r1, #64	; 0x40
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <LCD_WriteReg+0x40>)
 800068e:	f00a fb73 	bl	800ad78 <HAL_GPIO_WritePin>
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40020000 	.word	0x40020000
 80006a0:	40020400 	.word	0x40020400

080006a4 <LCD_WriteData_8Bit>:

static void LCD_WriteData_8Bit(uint8_t Data){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
	LCD_DC_1;
 80006ae:	2201      	movs	r2, #1
 80006b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006b4:	480a      	ldr	r0, [pc, #40]	; (80006e0 <LCD_WriteData_8Bit+0x3c>)
 80006b6:	f00a fb5f 	bl	800ad78 <HAL_GPIO_WritePin>
	LCD_CS_0;
 80006ba:	2200      	movs	r2, #0
 80006bc:	2140      	movs	r1, #64	; 0x40
 80006be:	4809      	ldr	r0, [pc, #36]	; (80006e4 <LCD_WriteData_8Bit+0x40>)
 80006c0:	f00a fb5a 	bl	800ad78 <HAL_GPIO_WritePin>
	SPI_Write_Byte(Data);
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff62 	bl	8000590 <SPI_Write_Byte>
	LCD_CS_1;
 80006cc:	2201      	movs	r2, #1
 80006ce:	2140      	movs	r1, #64	; 0x40
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <LCD_WriteData_8Bit+0x40>)
 80006d2:	f00a fb51 	bl	800ad78 <HAL_GPIO_WritePin>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40020000 	.word	0x40020000
 80006e4:	40020400 	.word	0x40020400

080006e8 <LCD_WriteData_NLen16Bit>:
	SPI_Write_Byte(Data >> 8);
	SPI_Write_Byte(Data & 0XFF);
	LCD_CS_1;
}

static void LCD_WriteData_NLen16Bit(uint16_t Data,uint32_t DataLen){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	6039      	str	r1, [r7, #0]
 80006f2:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	LCD_DC_1;
 80006f4:	2201      	movs	r2, #1
 80006f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006fa:	4813      	ldr	r0, [pc, #76]	; (8000748 <LCD_WriteData_NLen16Bit+0x60>)
 80006fc:	f00a fb3c 	bl	800ad78 <HAL_GPIO_WritePin>
	LCD_CS_0;
 8000700:	2200      	movs	r2, #0
 8000702:	2140      	movs	r1, #64	; 0x40
 8000704:	4811      	ldr	r0, [pc, #68]	; (800074c <LCD_WriteData_NLen16Bit+0x64>)
 8000706:	f00a fb37 	bl	800ad78 <HAL_GPIO_WritePin>
	for(i = 0; i < DataLen; i++){
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	e00e      	b.n	800072e <LCD_WriteData_NLen16Bit+0x46>
		SPI_Write_Byte( (uint8_t)(Data >> 8) );
 8000710:	88fb      	ldrh	r3, [r7, #6]
 8000712:	0a1b      	lsrs	r3, r3, #8
 8000714:	b29b      	uxth	r3, r3
 8000716:	b2db      	uxtb	r3, r3
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ff39 	bl	8000590 <SPI_Write_Byte>
		SPI_Write_Byte( (uint8_t)(Data & 0XFF) );
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	b2db      	uxtb	r3, r3
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff ff34 	bl	8000590 <SPI_Write_Byte>
	for(i = 0; i < DataLen; i++){
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	3301      	adds	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	429a      	cmp	r2, r3
 8000734:	d3ec      	bcc.n	8000710 <LCD_WriteData_NLen16Bit+0x28>
	}	
	LCD_CS_1;
 8000736:	2201      	movs	r2, #1
 8000738:	2140      	movs	r1, #64	; 0x40
 800073a:	4804      	ldr	r0, [pc, #16]	; (800074c <LCD_WriteData_NLen16Bit+0x64>)
 800073c:	f00a fb1c 	bl	800ad78 <HAL_GPIO_WritePin>
}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40020000 	.word	0x40020000
 800074c:	40020400 	.word	0x40020400

08000750 <LCD_InitReg>:

/*******************************************************************************
function:
		Common register initialization
*******************************************************************************/
static void LCD_InitReg(void){	
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	//ST7735R Frame Rate
	LCD_WriteReg(0xB1); 
 8000754:	20b1      	movs	r0, #177	; 0xb1
 8000756:	f7ff ff83 	bl	8000660 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 800075a:	2001      	movs	r0, #1
 800075c:	f7ff ffa2 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 8000760:	202c      	movs	r0, #44	; 0x2c
 8000762:	f7ff ff9f 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 8000766:	202d      	movs	r0, #45	; 0x2d
 8000768:	f7ff ff9c 	bl	80006a4 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xB2); 
 800076c:	20b2      	movs	r0, #178	; 0xb2
 800076e:	f7ff ff77 	bl	8000660 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 8000772:	2001      	movs	r0, #1
 8000774:	f7ff ff96 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 8000778:	202c      	movs	r0, #44	; 0x2c
 800077a:	f7ff ff93 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 800077e:	202d      	movs	r0, #45	; 0x2d
 8000780:	f7ff ff90 	bl	80006a4 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xB3); 
 8000784:	20b3      	movs	r0, #179	; 0xb3
 8000786:	f7ff ff6b 	bl	8000660 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff ff8a 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 8000790:	202c      	movs	r0, #44	; 0x2c
 8000792:	f7ff ff87 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 8000796:	202d      	movs	r0, #45	; 0x2d
 8000798:	f7ff ff84 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x01); 
 800079c:	2001      	movs	r0, #1
 800079e:	f7ff ff81 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2C); 
 80007a2:	202c      	movs	r0, #44	; 0x2c
 80007a4:	f7ff ff7e 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2D); 
 80007a8:	202d      	movs	r0, #45	; 0x2d
 80007aa:	f7ff ff7b 	bl	80006a4 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0xB4); //Column inversion 
 80007ae:	20b4      	movs	r0, #180	; 0xb4
 80007b0:	f7ff ff56 	bl	8000660 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x07); 
 80007b4:	2007      	movs	r0, #7
 80007b6:	f7ff ff75 	bl	80006a4 <LCD_WriteData_8Bit>
	
	//ST7735R Power Sequence
	LCD_WriteReg(0xC0); 
 80007ba:	20c0      	movs	r0, #192	; 0xc0
 80007bc:	f7ff ff50 	bl	8000660 <LCD_WriteReg>
	LCD_WriteData_8Bit(0xA2); 
 80007c0:	20a2      	movs	r0, #162	; 0xa2
 80007c2:	f7ff ff6f 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x02); 
 80007c6:	2002      	movs	r0, #2
 80007c8:	f7ff ff6c 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x84); 
 80007cc:	2084      	movs	r0, #132	; 0x84
 80007ce:	f7ff ff69 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteReg(0xC1); 
 80007d2:	20c1      	movs	r0, #193	; 0xc1
 80007d4:	f7ff ff44 	bl	8000660 <LCD_WriteReg>
	LCD_WriteData_8Bit(0xC5); 
 80007d8:	20c5      	movs	r0, #197	; 0xc5
 80007da:	f7ff ff63 	bl	80006a4 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xC2); 
 80007de:	20c2      	movs	r0, #194	; 0xc2
 80007e0:	f7ff ff3e 	bl	8000660 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0A); 
 80007e4:	200a      	movs	r0, #10
 80007e6:	f7ff ff5d 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x00); 
 80007ea:	2000      	movs	r0, #0
 80007ec:	f7ff ff5a 	bl	80006a4 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xC3); 
 80007f0:	20c3      	movs	r0, #195	; 0xc3
 80007f2:	f7ff ff35 	bl	8000660 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x8A); 
 80007f6:	208a      	movs	r0, #138	; 0x8a
 80007f8:	f7ff ff54 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2A); 
 80007fc:	202a      	movs	r0, #42	; 0x2a
 80007fe:	f7ff ff51 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteReg(0xC4); 
 8000802:	20c4      	movs	r0, #196	; 0xc4
 8000804:	f7ff ff2c 	bl	8000660 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x8A); 
 8000808:	208a      	movs	r0, #138	; 0x8a
 800080a:	f7ff ff4b 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0xEE); 
 800080e:	20ee      	movs	r0, #238	; 0xee
 8000810:	f7ff ff48 	bl	80006a4 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0xC5); //VCOM 
 8000814:	20c5      	movs	r0, #197	; 0xc5
 8000816:	f7ff ff23 	bl	8000660 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0E); 
 800081a:	200e      	movs	r0, #14
 800081c:	f7ff ff42 	bl	80006a4 <LCD_WriteData_8Bit>
	
	//ST7735R Gamma Sequence
	LCD_WriteReg(0xe0); 
 8000820:	20e0      	movs	r0, #224	; 0xe0
 8000822:	f7ff ff1d 	bl	8000660 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0f); 
 8000826:	200f      	movs	r0, #15
 8000828:	f7ff ff3c 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1a); 
 800082c:	201a      	movs	r0, #26
 800082e:	f7ff ff39 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x0f); 
 8000832:	200f      	movs	r0, #15
 8000834:	f7ff ff36 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x18); 
 8000838:	2018      	movs	r0, #24
 800083a:	f7ff ff33 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2f); 
 800083e:	202f      	movs	r0, #47	; 0x2f
 8000840:	f7ff ff30 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x28); 
 8000844:	2028      	movs	r0, #40	; 0x28
 8000846:	f7ff ff2d 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x20); 
 800084a:	2020      	movs	r0, #32
 800084c:	f7ff ff2a 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x22); 
 8000850:	2022      	movs	r0, #34	; 0x22
 8000852:	f7ff ff27 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1f); 
 8000856:	201f      	movs	r0, #31
 8000858:	f7ff ff24 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1b); 
 800085c:	201b      	movs	r0, #27
 800085e:	f7ff ff21 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x23); 
 8000862:	2023      	movs	r0, #35	; 0x23
 8000864:	f7ff ff1e 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x37); 
 8000868:	2037      	movs	r0, #55	; 0x37
 800086a:	f7ff ff1b 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x00); 	
 800086e:	2000      	movs	r0, #0
 8000870:	f7ff ff18 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x07); 
 8000874:	2007      	movs	r0, #7
 8000876:	f7ff ff15 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x02); 
 800087a:	2002      	movs	r0, #2
 800087c:	f7ff ff12 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x10); 
 8000880:	2010      	movs	r0, #16
 8000882:	f7ff ff0f 	bl	80006a4 <LCD_WriteData_8Bit>

	LCD_WriteReg(0xe1); 
 8000886:	20e1      	movs	r0, #225	; 0xe1
 8000888:	f7ff feea 	bl	8000660 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x0f); 
 800088c:	200f      	movs	r0, #15
 800088e:	f7ff ff09 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x1b); 
 8000892:	201b      	movs	r0, #27
 8000894:	f7ff ff06 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x0f); 
 8000898:	200f      	movs	r0, #15
 800089a:	f7ff ff03 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x17); 
 800089e:	2017      	movs	r0, #23
 80008a0:	f7ff ff00 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x33); 
 80008a4:	2033      	movs	r0, #51	; 0x33
 80008a6:	f7ff fefd 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2c); 
 80008aa:	202c      	movs	r0, #44	; 0x2c
 80008ac:	f7ff fefa 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x29); 
 80008b0:	2029      	movs	r0, #41	; 0x29
 80008b2:	f7ff fef7 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x2e); 
 80008b6:	202e      	movs	r0, #46	; 0x2e
 80008b8:	f7ff fef4 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x30); 
 80008bc:	2030      	movs	r0, #48	; 0x30
 80008be:	f7ff fef1 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x30); 
 80008c2:	2030      	movs	r0, #48	; 0x30
 80008c4:	f7ff feee 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x39); 
 80008c8:	2039      	movs	r0, #57	; 0x39
 80008ca:	f7ff feeb 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x3f); 
 80008ce:	203f      	movs	r0, #63	; 0x3f
 80008d0:	f7ff fee8 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x00); 
 80008d4:	2000      	movs	r0, #0
 80008d6:	f7ff fee5 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x07); 
 80008da:	2007      	movs	r0, #7
 80008dc:	f7ff fee2 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x03); 
 80008e0:	2003      	movs	r0, #3
 80008e2:	f7ff fedf 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit(0x10);  
 80008e6:	2010      	movs	r0, #16
 80008e8:	f7ff fedc 	bl	80006a4 <LCD_WriteData_8Bit>
		
	LCD_WriteReg(0xF0); //Enable test command  
 80008ec:	20f0      	movs	r0, #240	; 0xf0
 80008ee:	f7ff feb7 	bl	8000660 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x01); 
 80008f2:	2001      	movs	r0, #1
 80008f4:	f7ff fed6 	bl	80006a4 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0xF6); //Disable ram power save mode 
 80008f8:	20f6      	movs	r0, #246	; 0xf6
 80008fa:	f7ff feb1 	bl	8000660 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x00); 
 80008fe:	2000      	movs	r0, #0
 8000900:	f7ff fed0 	bl	80006a4 <LCD_WriteData_8Bit>
	
	LCD_WriteReg(0x3A); //65k mode 
 8000904:	203a      	movs	r0, #58	; 0x3a
 8000906:	f7ff feab 	bl	8000660 <LCD_WriteReg>
	LCD_WriteData_8Bit(0x05); 
 800090a:	2005      	movs	r0, #5
 800090c:	f7ff feca 	bl	80006a4 <LCD_WriteData_8Bit>
		
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}

08000914 <LCD_SetGramScanWay>:
function:	Set the display scan and color transfer modes
parameter: 
		Scan_dir   :   Scan direction
		Colorchose :   RGB or GBR color format
********************************************************************************/
void LCD_SetGramScanWay(LCD_SCAN_DIR Scan_dir){		
 8000914:	b580      	push	{r7, lr}
 8000916:	b084      	sub	sp, #16
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	71fb      	strb	r3, [r7, #7]
	//Get the screen scan direction
	sLCD_DIS.LCD_Scan_Dir = Scan_dir;
 800091e:	4a34      	ldr	r2, [pc, #208]	; (80009f0 <LCD_SetGramScanWay+0xdc>)
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	7113      	strb	r3, [r2, #4]
	
	//Get GRAM and LCD width and height
	if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U){
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d008      	beq.n	800093c <LCD_SetGramScanWay+0x28>
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d005      	beq.n	800093c <LCD_SetGramScanWay+0x28>
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	2b02      	cmp	r3, #2
 8000934:	d002      	beq.n	800093c <LCD_SetGramScanWay+0x28>
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	2b03      	cmp	r3, #3
 800093a:	d10c      	bne.n	8000956 <LCD_SetGramScanWay+0x42>
		sLCD_DIS.LCD_Dis_Column	= LCD_HEIGHT ;
 800093c:	4b2c      	ldr	r3, [pc, #176]	; (80009f0 <LCD_SetGramScanWay+0xdc>)
 800093e:	2280      	movs	r2, #128	; 0x80
 8000940:	801a      	strh	r2, [r3, #0]
		sLCD_DIS.LCD_Dis_Page = LCD_WIDTH ;		
 8000942:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <LCD_SetGramScanWay+0xdc>)
 8000944:	22a0      	movs	r2, #160	; 0xa0
 8000946:	805a      	strh	r2, [r3, #2]
		sLCD_DIS.LCD_X_Adjust = LCD_X;
 8000948:	4b29      	ldr	r3, [pc, #164]	; (80009f0 <LCD_SetGramScanWay+0xdc>)
 800094a:	2202      	movs	r2, #2
 800094c:	80da      	strh	r2, [r3, #6]
		sLCD_DIS.LCD_Y_Adjust = LCD_Y;
 800094e:	4b28      	ldr	r3, [pc, #160]	; (80009f0 <LCD_SetGramScanWay+0xdc>)
 8000950:	2201      	movs	r2, #1
 8000952:	811a      	strh	r2, [r3, #8]
 8000954:	e00b      	b.n	800096e <LCD_SetGramScanWay+0x5a>
	}else{
		sLCD_DIS.LCD_Dis_Column	= LCD_WIDTH ;
 8000956:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <LCD_SetGramScanWay+0xdc>)
 8000958:	22a0      	movs	r2, #160	; 0xa0
 800095a:	801a      	strh	r2, [r3, #0]
		sLCD_DIS.LCD_Dis_Page = LCD_HEIGHT ;	
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <LCD_SetGramScanWay+0xdc>)
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	805a      	strh	r2, [r3, #2]
		sLCD_DIS.LCD_X_Adjust = LCD_Y;
 8000962:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <LCD_SetGramScanWay+0xdc>)
 8000964:	2201      	movs	r2, #1
 8000966:	80da      	strh	r2, [r3, #6]
		sLCD_DIS.LCD_Y_Adjust = LCD_X;
 8000968:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <LCD_SetGramScanWay+0xdc>)
 800096a:	2202      	movs	r2, #2
 800096c:	811a      	strh	r2, [r3, #8]
	}
	
	// Gets the scan direction of GRAM
	uint16_t MemoryAccessReg_Data=0;  //0x36	
 800096e:	2300      	movs	r3, #0
 8000970:	81fb      	strh	r3, [r7, #14]
	switch (Scan_dir){				
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2b07      	cmp	r3, #7
 8000976:	d82b      	bhi.n	80009d0 <LCD_SetGramScanWay+0xbc>
 8000978:	a201      	add	r2, pc, #4	; (adr r2, 8000980 <LCD_SetGramScanWay+0x6c>)
 800097a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097e:	bf00      	nop
 8000980:	080009a1 	.word	0x080009a1
 8000984:	080009a7 	.word	0x080009a7
 8000988:	080009ad 	.word	0x080009ad
 800098c:	080009b3 	.word	0x080009b3
 8000990:	080009b9 	.word	0x080009b9
 8000994:	080009bf 	.word	0x080009bf
 8000998:	080009c5 	.word	0x080009c5
 800099c:	080009cb 	.word	0x080009cb
		case L2R_U2D:
			MemoryAccessReg_Data = 0X00 | 0x00;//x Scan direction | y Scan direction
 80009a0:	2300      	movs	r3, #0
 80009a2:	81fb      	strh	r3, [r7, #14]
			break;
 80009a4:	e014      	b.n	80009d0 <LCD_SetGramScanWay+0xbc>
		case L2R_D2U:
			MemoryAccessReg_Data = 0x00 | 0x80;//0xC8 | 0X10
 80009a6:	2380      	movs	r3, #128	; 0x80
 80009a8:	81fb      	strh	r3, [r7, #14]
			break;
 80009aa:	e011      	b.n	80009d0 <LCD_SetGramScanWay+0xbc>
		case R2L_U2D://	0X4
			MemoryAccessReg_Data = 0x40 | 0x00;
 80009ac:	2340      	movs	r3, #64	; 0x40
 80009ae:	81fb      	strh	r3, [r7, #14]
			break;
 80009b0:	e00e      	b.n	80009d0 <LCD_SetGramScanWay+0xbc>
		case R2L_D2U://	0XC
			MemoryAccessReg_Data = 0x40 | 0x80;
 80009b2:	23c0      	movs	r3, #192	; 0xc0
 80009b4:	81fb      	strh	r3, [r7, #14]
			break;
 80009b6:	e00b      	b.n	80009d0 <LCD_SetGramScanWay+0xbc>
		case U2D_L2R://0X2
			MemoryAccessReg_Data = 0X00 | 0X00 | 0x20;
 80009b8:	2320      	movs	r3, #32
 80009ba:	81fb      	strh	r3, [r7, #14]
			break;
 80009bc:	e008      	b.n	80009d0 <LCD_SetGramScanWay+0xbc>
		case U2D_R2L://0X6
			MemoryAccessReg_Data = 0x00 | 0X40 | 0x20;
 80009be:	2360      	movs	r3, #96	; 0x60
 80009c0:	81fb      	strh	r3, [r7, #14]
			break;
 80009c2:	e005      	b.n	80009d0 <LCD_SetGramScanWay+0xbc>
		case D2U_L2R://0XA
			MemoryAccessReg_Data = 0x80 | 0x00 | 0x20;
 80009c4:	23a0      	movs	r3, #160	; 0xa0
 80009c6:	81fb      	strh	r3, [r7, #14]
			break;
 80009c8:	e002      	b.n	80009d0 <LCD_SetGramScanWay+0xbc>
		case D2U_R2L://0XE
			MemoryAccessReg_Data = 0x40 | 0x80 | 0x20;
 80009ca:	23e0      	movs	r3, #224	; 0xe0
 80009cc:	81fb      	strh	r3, [r7, #14]
			break;
 80009ce:	bf00      	nop
	}
	

	// Set the read / write scan direction of the frame memory
	LCD_WriteReg(0x36); //MX, MY, RGB mode 	
 80009d0:	2036      	movs	r0, #54	; 0x36
 80009d2:	f7ff fe45 	bl	8000660 <LCD_WriteReg>
#if defined(LCD_1IN44)
	LCD_WriteData_8Bit( MemoryAccessReg_Data | 0x08);	//0x08 set RGB
#elif defined(LCD_1IN8)
	LCD_WriteData_8Bit( MemoryAccessReg_Data & 0xf7);	//RGB color filter panel
 80009d6:	89fb      	ldrh	r3, [r7, #14]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f023 0308 	bic.w	r3, r3, #8
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff fe5f 	bl	80006a4 <LCD_WriteData_8Bit>
#endif
	
}
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200005cc 	.word	0x200005cc

080009f4 <LCD_Init>:

/********************************************************************************
function:	
			initialization
********************************************************************************/
void LCD_Init( LCD_SCAN_DIR Lcd_ScanDir ){	
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	71fb      	strb	r3, [r7, #7]
	//Turn on the backlight
	LCD_BL_1;
 80009fe:	2201      	movs	r2, #1
 8000a00:	2180      	movs	r1, #128	; 0x80
 8000a02:	480f      	ldr	r0, [pc, #60]	; (8000a40 <LCD_Init+0x4c>)
 8000a04:	f00a f9b8 	bl	800ad78 <HAL_GPIO_WritePin>
	
	//Hardware reset
	LCD_Reset(); 
 8000a08:	f7ff fe08 	bl	800061c <LCD_Reset>
	
	//Set the initialization register
	LCD_InitReg();
 8000a0c:	f7ff fea0 	bl	8000750 <LCD_InitReg>
	
	//Set the display scan and color transfer modes	
	LCD_SetGramScanWay( Lcd_ScanDir );
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff ff7e 	bl	8000914 <LCD_SetGramScanWay>
	Driver_Delay_ms(200); 
 8000a18:	20c8      	movs	r0, #200	; 0xc8
 8000a1a:	f7ff fdf3 	bl	8000604 <Driver_Delay_ms>
	
	//sleep out
	LCD_WriteReg(0x11);
 8000a1e:	2011      	movs	r0, #17
 8000a20:	f7ff fe1e 	bl	8000660 <LCD_WriteReg>
	Driver_Delay_ms(120);
 8000a24:	2078      	movs	r0, #120	; 0x78
 8000a26:	f7ff fded 	bl	8000604 <Driver_Delay_ms>
	
	//Turn on the LCD display
	LCD_WriteReg(0x29);	
 8000a2a:	2029      	movs	r0, #41	; 0x29
 8000a2c:	f7ff fe18 	bl	8000660 <LCD_WriteReg>

	//clear
	LCD_Clear(BLACK);
 8000a30:	2000      	movs	r0, #0
 8000a32:	f000 f8d9 	bl	8000be8 <LCD_Clear>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40020800 	.word	0x40020800

08000a44 <LCD_SetWindows>:
		Xstart 	:   X direction Start coordinates
		Ystart  :   Y direction Start coordinates
		Xend    :   X direction end coordinates
		Yend    :   Y direction end coordinates
********************************************************************************/
void LCD_SetWindows( POINT Xstart, POINT Ystart, POINT Xend, POINT Yend ){
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	4608      	mov	r0, r1
 8000a4e:	4611      	mov	r1, r2
 8000a50:	461a      	mov	r2, r3
 8000a52:	4623      	mov	r3, r4
 8000a54:	80fb      	strh	r3, [r7, #6]
 8000a56:	4603      	mov	r3, r0
 8000a58:	80bb      	strh	r3, [r7, #4]
 8000a5a:	460b      	mov	r3, r1
 8000a5c:	807b      	strh	r3, [r7, #2]
 8000a5e:	4613      	mov	r3, r2
 8000a60:	803b      	strh	r3, [r7, #0]

	//set the X coordinates
	LCD_WriteReg ( 0x2A ); 				
 8000a62:	202a      	movs	r0, #42	; 0x2a
 8000a64:	f7ff fdfc 	bl	8000660 <LCD_WriteReg>
	LCD_WriteData_8Bit ( 0x00 );						//Set the horizontal starting point to the high octet
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f7ff fe1b 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( (Xstart & 0xff) + sLCD_DIS.LCD_X_Adjust);			//Set the horizontal starting point to the low octet
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <LCD_SetWindows+0xa8>)
 8000a74:	88db      	ldrh	r3, [r3, #6]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	4413      	add	r3, r2
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fe11 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( 0x00 );				//Set the horizontal end to the high octet
 8000a82:	2000      	movs	r0, #0
 8000a84:	f7ff fe0e 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( (( Xend - 1 ) & 0xff) + sLCD_DIS.LCD_X_Adjust);	//Set the horizontal end to the low octet
 8000a88:	887b      	ldrh	r3, [r7, #2]
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	4b17      	ldr	r3, [pc, #92]	; (8000aec <LCD_SetWindows+0xa8>)
 8000a8e:	88db      	ldrh	r3, [r3, #6]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	4413      	add	r3, r2
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	3b01      	subs	r3, #1
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fe02 	bl	80006a4 <LCD_WriteData_8Bit>

	//set the Y coordinates
	LCD_WriteReg ( 0x2B );
 8000aa0:	202b      	movs	r0, #43	; 0x2b
 8000aa2:	f7ff fddd 	bl	8000660 <LCD_WriteReg>
	LCD_WriteData_8Bit ( 0x00 );
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f7ff fdfc 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( (Ystart & 0xff) + sLCD_DIS.LCD_Y_Adjust);
 8000aac:	88bb      	ldrh	r3, [r7, #4]
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <LCD_SetWindows+0xa8>)
 8000ab2:	891b      	ldrh	r3, [r3, #8]
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	4413      	add	r3, r2
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fdf2 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( 0x00 );
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f7ff fdef 	bl	80006a4 <LCD_WriteData_8Bit>
	LCD_WriteData_8Bit ( ( (Yend - 1) & 0xff )+ sLCD_DIS.LCD_Y_Adjust);
 8000ac6:	883b      	ldrh	r3, [r7, #0]
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <LCD_SetWindows+0xa8>)
 8000acc:	891b      	ldrh	r3, [r3, #8]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	4413      	add	r3, r2
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fde3 	bl	80006a4 <LCD_WriteData_8Bit>
		
	LCD_WriteReg(0x2C);	
 8000ade:	202c      	movs	r0, #44	; 0x2c
 8000ae0:	f7ff fdbe 	bl	8000660 <LCD_WriteReg>
	
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd90      	pop	{r4, r7, pc}
 8000aec:	200005cc 	.word	0x200005cc

08000af0 <LCD_SetCursor>:
function:	Set the display point (Xpoint, Ypoint)
parameter: 
		xStart :   X direction Start coordinates
		xEnd   :   X direction end coordinates
********************************************************************************/
void LCD_SetCursor ( POINT Xpoint, POINT Ypoint ){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	460a      	mov	r2, r1
 8000afa:	80fb      	strh	r3, [r7, #6]
 8000afc:	4613      	mov	r3, r2
 8000afe:	80bb      	strh	r3, [r7, #4]
	LCD_SetWindows ( Xpoint, Ypoint, Xpoint , Ypoint );
 8000b00:	88bb      	ldrh	r3, [r7, #4]
 8000b02:	88fa      	ldrh	r2, [r7, #6]
 8000b04:	88b9      	ldrh	r1, [r7, #4]
 8000b06:	88f8      	ldrh	r0, [r7, #6]
 8000b08:	f7ff ff9c 	bl	8000a44 <LCD_SetWindows>
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <LCD_SetColor>:
function:	Set show color
parameter: 
		Color  :   Set show color
********************************************************************************/
//static void LCD_SetColor( LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void LCD_SetColor( COLOR Color ,POINT Xpoint, POINT Ypoint){		
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	80fb      	strh	r3, [r7, #6]
 8000b1e:	460b      	mov	r3, r1
 8000b20:	80bb      	strh	r3, [r7, #4]
 8000b22:	4613      	mov	r3, r2
 8000b24:	807b      	strh	r3, [r7, #2]
	LCD_WriteData_NLen16Bit(Color ,(uint32_t)Xpoint * (uint32_t)Ypoint); 
 8000b26:	88bb      	ldrh	r3, [r7, #4]
 8000b28:	887a      	ldrh	r2, [r7, #2]
 8000b2a:	fb02 f203 	mul.w	r2, r2, r3
 8000b2e:	88fb      	ldrh	r3, [r7, #6]
 8000b30:	4611      	mov	r1, r2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fdd8 	bl	80006e8 <LCD_WriteData_NLen16Bit>
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <LCD_SetPointlColor>:
parameter: 
		Xpoint :   The x coordinate of the point
		Ypoint :   The y coordinate of the point
		Color  :   Set the color
********************************************************************************/
void LCD_SetPointlColor ( POINT Xpoint, POINT Ypoint, COLOR Color ){	
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	80fb      	strh	r3, [r7, #6]
 8000b4a:	460b      	mov	r3, r1
 8000b4c:	80bb      	strh	r3, [r7, #4]
 8000b4e:	4613      	mov	r3, r2
 8000b50:	807b      	strh	r3, [r7, #2]
	if ( ( Xpoint <= sLCD_DIS.LCD_Dis_Column ) && ( Ypoint <= sLCD_DIS.LCD_Dis_Page ) ){		
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <LCD_SetPointlColor+0x48>)
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	88fa      	ldrh	r2, [r7, #6]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d810      	bhi.n	8000b7e <LCD_SetPointlColor+0x3e>
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <LCD_SetPointlColor+0x48>)
 8000b5e:	885b      	ldrh	r3, [r3, #2]
 8000b60:	88ba      	ldrh	r2, [r7, #4]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d80b      	bhi.n	8000b7e <LCD_SetPointlColor+0x3e>
		LCD_SetCursor (Xpoint, Ypoint);		
 8000b66:	88ba      	ldrh	r2, [r7, #4]
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	4611      	mov	r1, r2
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ffbf 	bl	8000af0 <LCD_SetCursor>
		LCD_SetColor ( Color , 1 , 1);
 8000b72:	887b      	ldrh	r3, [r7, #2]
 8000b74:	2201      	movs	r2, #1
 8000b76:	2101      	movs	r1, #1
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ffcb 	bl	8000b14 <LCD_SetColor>
	}
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200005cc 	.word	0x200005cc

08000b8c <LCD_SetArealColor>:
		Ystart :   Start point y coordinate
		Xend   :   End point coordinates
		Yend   :   End point coordinates
		Color  :   Set the color
********************************************************************************/
void LCD_SetArealColor (POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,	COLOR  Color){	
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4604      	mov	r4, r0
 8000b94:	4608      	mov	r0, r1
 8000b96:	4611      	mov	r1, r2
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4623      	mov	r3, r4
 8000b9c:	80fb      	strh	r3, [r7, #6]
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	80bb      	strh	r3, [r7, #4]
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	807b      	strh	r3, [r7, #2]
 8000ba6:	4613      	mov	r3, r2
 8000ba8:	803b      	strh	r3, [r7, #0]
	if((Xend > Xstart) && (Yend > Ystart)){			
 8000baa:	887a      	ldrh	r2, [r7, #2]
 8000bac:	88fb      	ldrh	r3, [r7, #6]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d915      	bls.n	8000bde <LCD_SetArealColor+0x52>
 8000bb2:	883a      	ldrh	r2, [r7, #0]
 8000bb4:	88bb      	ldrh	r3, [r7, #4]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d911      	bls.n	8000bde <LCD_SetArealColor+0x52>
		LCD_SetWindows( Xstart , Ystart , Xend , Yend  );
 8000bba:	883b      	ldrh	r3, [r7, #0]
 8000bbc:	887a      	ldrh	r2, [r7, #2]
 8000bbe:	88b9      	ldrh	r1, [r7, #4]
 8000bc0:	88f8      	ldrh	r0, [r7, #6]
 8000bc2:	f7ff ff3f 	bl	8000a44 <LCD_SetWindows>
		LCD_SetColor ( Color ,Xend - Xstart , Yend - Ystart );
 8000bc6:	887a      	ldrh	r2, [r7, #2]
 8000bc8:	88fb      	ldrh	r3, [r7, #6]
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	b299      	uxth	r1, r3
 8000bce:	883a      	ldrh	r2, [r7, #0]
 8000bd0:	88bb      	ldrh	r3, [r7, #4]
 8000bd2:	1ad3      	subs	r3, r2, r3
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	8b3b      	ldrh	r3, [r7, #24]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff9b 	bl	8000b14 <LCD_SetColor>
	}
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd90      	pop	{r4, r7, pc}
	...

08000be8 <LCD_Clear>:

/********************************************************************************
function:	
			Clear screen 
********************************************************************************/
void LCD_Clear(COLOR  Color){
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af02      	add	r7, sp, #8
 8000bee:	4603      	mov	r3, r0
 8000bf0:	80fb      	strh	r3, [r7, #6]

	LCD_SetArealColor(0,0, sLCD_DIS.LCD_Dis_Column , sLCD_DIS.LCD_Dis_Page  , Color);	
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <LCD_Clear+0x28>)
 8000bf4:	881a      	ldrh	r2, [r3, #0]
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <LCD_Clear+0x28>)
 8000bf8:	8859      	ldrh	r1, [r3, #2]
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	2100      	movs	r1, #0
 8000c02:	2000      	movs	r0, #0
 8000c04:	f7ff ffc2 	bl	8000b8c <LCD_SetArealColor>

}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200005cc 	.word	0x200005cc

08000c14 <LCD_DisplayChar>:
			Font  ��A structure pointer that displays a character size
			Color_Background : Select the background color of the English character
			Color_Foreground : Select the foreground color of the English character
********************************************************************************/
void LCD_DisplayChar( 	POINT Xpoint, POINT Ypoint, const char Acsii_Char,
						sFONT* Font, COLOR Color_Background,	COLOR Color_Foreground ){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	81fb      	strh	r3, [r7, #14]
 8000c20:	460b      	mov	r3, r1
 8000c22:	81bb      	strh	r3, [r7, #12]
 8000c24:	4613      	mov	r3, r2
 8000c26:	72fb      	strb	r3, [r7, #11]
	POINT Page, Column;
	
	if (Xpoint >= sLCD_DIS.LCD_Dis_Column || Ypoint >= sLCD_DIS.LCD_Dis_Page) {
 8000c28:	4b4d      	ldr	r3, [pc, #308]	; (8000d60 <LCD_DisplayChar+0x14c>)
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	89fa      	ldrh	r2, [r7, #14]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	f080 8091 	bcs.w	8000d56 <LCD_DisplayChar+0x142>
 8000c34:	4b4a      	ldr	r3, [pc, #296]	; (8000d60 <LCD_DisplayChar+0x14c>)
 8000c36:	885b      	ldrh	r3, [r3, #2]
 8000c38:	89ba      	ldrh	r2, [r7, #12]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	f080 808b 	bcs.w	8000d56 <LCD_DisplayChar+0x142>
		return;
	}
	
	uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8000c40:	7afb      	ldrb	r3, [r7, #11]
 8000c42:	3b20      	subs	r3, #32
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	88d2      	ldrh	r2, [r2, #6]
 8000c48:	fb02 f303 	mul.w	r3, r2, r3
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	8892      	ldrh	r2, [r2, #4]
 8000c50:	08d2      	lsrs	r2, r2, #3
 8000c52:	b292      	uxth	r2, r2
 8000c54:	4611      	mov	r1, r2
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	8892      	ldrh	r2, [r2, #4]
 8000c5a:	f002 0207 	and.w	r2, r2, #7
 8000c5e:	b292      	uxth	r2, r2
 8000c60:	2a00      	cmp	r2, #0
 8000c62:	bf14      	ite	ne
 8000c64:	2201      	movne	r2, #1
 8000c66:	2200      	moveq	r2, #0
 8000c68:	b2d2      	uxtb	r2, r2
 8000c6a:	440a      	add	r2, r1
 8000c6c:	fb02 f303 	mul.w	r3, r2, r3
 8000c70:	617b      	str	r3, [r7, #20]
	const unsigned char* ptr = &Font->table[Char_Offset];
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	4413      	add	r3, r2
 8000c7a:	61bb      	str	r3, [r7, #24]

	for ( Page = 0; Page < Font->Height; Page ++ ){
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	83fb      	strh	r3, [r7, #30]
 8000c80:	e063      	b.n	8000d4a <LCD_DisplayChar+0x136>
		for ( Column = 0; Column < Font->Width; Column ++ ){
 8000c82:	2300      	movs	r3, #0
 8000c84:	83bb      	strh	r3, [r7, #28]
 8000c86:	e04e      	b.n	8000d26 <LCD_DisplayChar+0x112>
			
			//To determine whether the font background color and screen background color is consistent
			if (FONT_BACKGROUND == Color_Background){//this process is to speed up the scan
 8000c88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d118      	bne.n	8000cc4 <LCD_DisplayChar+0xb0>
				if (*ptr & (0x80 >> (Column % 8)))
 8000c92:	69bb      	ldr	r3, [r7, #24]
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	4619      	mov	r1, r3
 8000c98:	8bbb      	ldrh	r3, [r7, #28]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	2280      	movs	r2, #128	; 0x80
 8000ca0:	fa42 f303 	asr.w	r3, r2, r3
 8000ca4:	400b      	ands	r3, r1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d031      	beq.n	8000d0e <LCD_DisplayChar+0xfa>
					LCD_SetPointlColor (Xpoint + Column,Ypoint + Page, Color_Foreground );
 8000caa:	89fa      	ldrh	r2, [r7, #14]
 8000cac:	8bbb      	ldrh	r3, [r7, #28]
 8000cae:	4413      	add	r3, r2
 8000cb0:	b298      	uxth	r0, r3
 8000cb2:	89ba      	ldrh	r2, [r7, #12]
 8000cb4:	8bfb      	ldrh	r3, [r7, #30]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f7ff ff3f 	bl	8000b40 <LCD_SetPointlColor>
 8000cc2:	e024      	b.n	8000d0e <LCD_DisplayChar+0xfa>
			}else{
				if (*ptr & (0x80 >> (Column % 8))){
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	8bbb      	ldrh	r3, [r7, #28]
 8000ccc:	f003 0307 	and.w	r3, r3, #7
 8000cd0:	2280      	movs	r2, #128	; 0x80
 8000cd2:	fa42 f303 	asr.w	r3, r2, r3
 8000cd6:	400b      	ands	r3, r1
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d00c      	beq.n	8000cf6 <LCD_DisplayChar+0xe2>
					LCD_SetPointlColor (Xpoint + Column,Ypoint + Page, Color_Foreground );
 8000cdc:	89fa      	ldrh	r2, [r7, #14]
 8000cde:	8bbb      	ldrh	r3, [r7, #28]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	b298      	uxth	r0, r3
 8000ce4:	89ba      	ldrh	r2, [r7, #12]
 8000ce6:	8bfb      	ldrh	r3, [r7, #30]
 8000ce8:	4413      	add	r3, r2
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000cee:	4619      	mov	r1, r3
 8000cf0:	f7ff ff26 	bl	8000b40 <LCD_SetPointlColor>
 8000cf4:	e00b      	b.n	8000d0e <LCD_DisplayChar+0xfa>
				}else{
					LCD_SetPointlColor (Xpoint + Column,Ypoint + Page, Color_Background );
 8000cf6:	89fa      	ldrh	r2, [r7, #14]
 8000cf8:	8bbb      	ldrh	r3, [r7, #28]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	b298      	uxth	r0, r3
 8000cfe:	89ba      	ldrh	r2, [r7, #12]
 8000d00:	8bfb      	ldrh	r3, [r7, #30]
 8000d02:	4413      	add	r3, r2
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f7ff ff19 	bl	8000b40 <LCD_SetPointlColor>
				}
			}
			//One pixel is 8 bits
            if (Column % 8 == 7) {
 8000d0e:	8bbb      	ldrh	r3, [r7, #28]
 8000d10:	f003 0307 	and.w	r3, r3, #7
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	2b07      	cmp	r3, #7
 8000d18:	d102      	bne.n	8000d20 <LCD_DisplayChar+0x10c>
                ptr++;
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	61bb      	str	r3, [r7, #24]
		for ( Column = 0; Column < Font->Width; Column ++ ){
 8000d20:	8bbb      	ldrh	r3, [r7, #28]
 8000d22:	3301      	adds	r3, #1
 8000d24:	83bb      	strh	r3, [r7, #28]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	889b      	ldrh	r3, [r3, #4]
 8000d2a:	8bba      	ldrh	r2, [r7, #28]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d3ab      	bcc.n	8000c88 <LCD_DisplayChar+0x74>
            }	
		}/* Write a line */
		if (Font->Width % 8 != 0) {
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	889b      	ldrh	r3, [r3, #4]
 8000d34:	f003 0307 	and.w	r3, r3, #7
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d002      	beq.n	8000d44 <LCD_DisplayChar+0x130>
				ptr++;
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	3301      	adds	r3, #1
 8000d42:	61bb      	str	r3, [r7, #24]
	for ( Page = 0; Page < Font->Height; Page ++ ){
 8000d44:	8bfb      	ldrh	r3, [r7, #30]
 8000d46:	3301      	adds	r3, #1
 8000d48:	83fb      	strh	r3, [r7, #30]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	88db      	ldrh	r3, [r3, #6]
 8000d4e:	8bfa      	ldrh	r2, [r7, #30]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d396      	bcc.n	8000c82 <LCD_DisplayChar+0x6e>
 8000d54:	e000      	b.n	8000d58 <LCD_DisplayChar+0x144>
		return;
 8000d56:	bf00      	nop
		}
	}/* Write all */
}
 8000d58:	3720      	adds	r7, #32
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200005cc 	.word	0x200005cc

08000d64 <LCD_DisplayString>:
			Font  ��A structure pointer that displays a character size
			Color_Background : Select the background color of the English character
			Color_Foreground : Select the foreground color of the English character
********************************************************************************/
void LCD_DisplayString (	POINT Xstart, POINT Ystart, const char * pString, 
							sFONT* Font,COLOR Color_Background, COLOR Color_Foreground ){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af02      	add	r7, sp, #8
 8000d6a:	60ba      	str	r2, [r7, #8]
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	4603      	mov	r3, r0
 8000d70:	81fb      	strh	r3, [r7, #14]
 8000d72:	460b      	mov	r3, r1
 8000d74:	81bb      	strh	r3, [r7, #12]
	POINT Xpoint = Xstart;
 8000d76:	89fb      	ldrh	r3, [r7, #14]
 8000d78:	82fb      	strh	r3, [r7, #22]
	POINT Ypoint = Ystart;
 8000d7a:	89bb      	ldrh	r3, [r7, #12]
 8000d7c:	82bb      	strh	r3, [r7, #20]

	if (Xstart >= sLCD_DIS.LCD_Dis_Column || Ystart >= sLCD_DIS.LCD_Dis_Page) {
 8000d7e:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <LCD_DisplayString+0xa0>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	89fa      	ldrh	r2, [r7, #14]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d238      	bcs.n	8000dfa <LCD_DisplayString+0x96>
 8000d88:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <LCD_DisplayString+0xa0>)
 8000d8a:	885b      	ldrh	r3, [r3, #2]
 8000d8c:	89ba      	ldrh	r2, [r7, #12]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d233      	bcs.n	8000dfa <LCD_DisplayString+0x96>
		return;
	}
		
	while ( * pString != '\0')
 8000d92:	e02d      	b.n	8000df0 <LCD_DisplayString+0x8c>
	{
		//if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the height of the character
		if ( ( Xpoint + Font->Width ) > sLCD_DIS.LCD_Dis_Column ){
 8000d94:	8afb      	ldrh	r3, [r7, #22]
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	8892      	ldrh	r2, [r2, #4]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4a19      	ldr	r2, [pc, #100]	; (8000e04 <LCD_DisplayString+0xa0>)
 8000d9e:	8812      	ldrh	r2, [r2, #0]
 8000da0:	4293      	cmp	r3, r2
 8000da2:	dd06      	ble.n	8000db2 <LCD_DisplayString+0x4e>
			Xpoint = Xstart;
 8000da4:	89fb      	ldrh	r3, [r7, #14]
 8000da6:	82fb      	strh	r3, [r7, #22]
			Ypoint += Font->Height;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	88da      	ldrh	r2, [r3, #6]
 8000dac:	8abb      	ldrh	r3, [r7, #20]
 8000dae:	4413      	add	r3, r2
 8000db0:	82bb      	strh	r3, [r7, #20]
		}
		
		// If the Y direction is full, reposition to (Xstart, Ystart)
		if ( ( Ypoint  + Font->Height ) > sLCD_DIS.LCD_Dis_Page ){
 8000db2:	8abb      	ldrh	r3, [r7, #20]
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	88d2      	ldrh	r2, [r2, #6]
 8000db8:	4413      	add	r3, r2
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <LCD_DisplayString+0xa0>)
 8000dbc:	8852      	ldrh	r2, [r2, #2]
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	dd03      	ble.n	8000dca <LCD_DisplayString+0x66>
			Xpoint = Xstart;
 8000dc2:	89fb      	ldrh	r3, [r7, #14]
 8000dc4:	82fb      	strh	r3, [r7, #22]
			Ypoint = Ystart;
 8000dc6:	89bb      	ldrh	r3, [r7, #12]
 8000dc8:	82bb      	strh	r3, [r7, #20]
		}		
		LCD_DisplayChar ( Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground );
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	781a      	ldrb	r2, [r3, #0]
 8000dce:	8ab9      	ldrh	r1, [r7, #20]
 8000dd0:	8af8      	ldrh	r0, [r7, #22]
 8000dd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000dd4:	9301      	str	r3, [sp, #4]
 8000dd6:	8c3b      	ldrh	r3, [r7, #32]
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	f7ff ff1a 	bl	8000c14 <LCD_DisplayChar>
		
		//The next character of the address
		pString ++;
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	3301      	adds	r3, #1
 8000de4:	60bb      	str	r3, [r7, #8]
		
		//The next word of the abscissa increases the font of the broadband
		Xpoint += Font->Width;	
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	889a      	ldrh	r2, [r3, #4]
 8000dea:	8afb      	ldrh	r3, [r7, #22]
 8000dec:	4413      	add	r3, r2
 8000dee:	82fb      	strh	r3, [r7, #22]
	while ( * pString != '\0')
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1cd      	bne.n	8000d94 <LCD_DisplayString+0x30>
 8000df8:	e000      	b.n	8000dfc <LCD_DisplayString+0x98>
		return;
 8000dfa:	bf00      	nop
	}
}
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200005cc 	.word	0x200005cc

08000e08 <LCD_DisplayNum>:
			Color_Background : Select the background color of the English character
			Color_Foreground : Select the foreground color of the English character
********************************************************************************/
#define  ARRAY_LEN 255
void LCD_DisplayNum(	POINT Xpoint, POINT Ypoint, int32_t Nummber, 
						sFONT* Font,COLOR Color_Background, COLOR Color_Foreground ){
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8000e0e:	af02      	add	r7, sp, #8
 8000e10:	4604      	mov	r4, r0
 8000e12:	4608      	mov	r0, r1
 8000e14:	f107 0108 	add.w	r1, r7, #8
 8000e18:	600a      	str	r2, [r1, #0]
 8000e1a:	1d3a      	adds	r2, r7, #4
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	f107 030e 	add.w	r3, r7, #14
 8000e22:	4622      	mov	r2, r4
 8000e24:	801a      	strh	r2, [r3, #0]
 8000e26:	f107 030c 	add.w	r3, r7, #12
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	801a      	strh	r2, [r3, #0]
		
	int16_t Num_Bit = 0, Str_Bit = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
 8000e34:	2300      	movs	r3, #0
 8000e36:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
	uint8_t Str_Array[ARRAY_LEN] = {0},Num_Array[ARRAY_LEN] = {0};
 8000e3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e3e:	4618      	mov	r0, r3
 8000e40:	23ff      	movs	r3, #255	; 0xff
 8000e42:	461a      	mov	r2, r3
 8000e44:	2100      	movs	r1, #0
 8000e46:	f017 fd93 	bl	8018970 <memset>
 8000e4a:	f107 0310 	add.w	r3, r7, #16
 8000e4e:	4618      	mov	r0, r3
 8000e50:	23ff      	movs	r3, #255	; 0xff
 8000e52:	461a      	mov	r2, r3
 8000e54:	2100      	movs	r1, #0
 8000e56:	f017 fd8b 	bl	8018970 <memset>
	uint8_t *pStr = Str_Array;
 8000e5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e5e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	
	if (Xpoint >= sLCD_DIS.LCD_Dis_Column || Ypoint >= sLCD_DIS.LCD_Dis_Page) {
 8000e62:	4b39      	ldr	r3, [pc, #228]	; (8000f48 <LCD_DisplayNum+0x140>)
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	f107 020e 	add.w	r2, r7, #14
 8000e6a:	8812      	ldrh	r2, [r2, #0]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d266      	bcs.n	8000f3e <LCD_DisplayNum+0x136>
 8000e70:	4b35      	ldr	r3, [pc, #212]	; (8000f48 <LCD_DisplayNum+0x140>)
 8000e72:	885b      	ldrh	r3, [r3, #2]
 8000e74:	f107 020c 	add.w	r2, r7, #12
 8000e78:	8812      	ldrh	r2, [r2, #0]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d25f      	bcs.n	8000f3e <LCD_DisplayNum+0x136>
		return;
	}
	
	//Converts a number to a string
	while(Nummber){
 8000e7e:	e028      	b.n	8000ed2 <LCD_DisplayNum+0xca>
		Num_Array[Num_Bit] = Nummber % 10 + '0';
 8000e80:	f107 0308 	add.w	r3, r7, #8
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4b31      	ldr	r3, [pc, #196]	; (8000f4c <LCD_DisplayNum+0x144>)
 8000e88:	fb83 1302 	smull	r1, r3, r3, r2
 8000e8c:	1099      	asrs	r1, r3, #2
 8000e8e:	17d3      	asrs	r3, r2, #31
 8000e90:	1ac9      	subs	r1, r1, r3
 8000e92:	460b      	mov	r3, r1
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	440b      	add	r3, r1
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	1ad1      	subs	r1, r2, r3
 8000e9c:	b2ca      	uxtb	r2, r1
 8000e9e:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8000ea2:	3230      	adds	r2, #48	; 0x30
 8000ea4:	b2d1      	uxtb	r1, r2
 8000ea6:	f107 0210 	add.w	r2, r7, #16
 8000eaa:	54d1      	strb	r1, [r2, r3]
		Num_Bit++;
 8000eac:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
		Nummber /= 10;
 8000eba:	f107 0208 	add.w	r2, r7, #8
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4921      	ldr	r1, [pc, #132]	; (8000f4c <LCD_DisplayNum+0x144>)
 8000ec6:	fb81 0103 	smull	r0, r1, r1, r3
 8000eca:	1089      	asrs	r1, r1, #2
 8000ecc:	17db      	asrs	r3, r3, #31
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	6013      	str	r3, [r2, #0]
	while(Nummber){
 8000ed2:	f107 0308 	add.w	r3, r7, #8
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d1d1      	bne.n	8000e80 <LCD_DisplayNum+0x78>
    }
	
	//The string is inverted
	while( Num_Bit > 0){
 8000edc:	e018      	b.n	8000f10 <LCD_DisplayNum+0x108>
		Str_Array[Str_Bit] = Num_Array[Num_Bit -1];
 8000ede:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8000ee2:	1e5a      	subs	r2, r3, #1
 8000ee4:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 8000ee8:	f107 0110 	add.w	r1, r7, #16
 8000eec:	5c89      	ldrb	r1, [r1, r2]
 8000eee:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000ef2:	54d1      	strb	r1, [r2, r3]
		Str_Bit ++;
 8000ef4:	f9b7 3214 	ldrsh.w	r3, [r7, #532]	; 0x214
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	3301      	adds	r3, #1
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	f8a7 3214 	strh.w	r3, [r7, #532]	; 0x214
		Num_Bit --;
 8000f02:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	f8a7 3216 	strh.w	r3, [r7, #534]	; 0x216
	while( Num_Bit > 0){
 8000f10:	f9b7 3216 	ldrsh.w	r3, [r7, #534]	; 0x216
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	dce2      	bgt.n	8000ede <LCD_DisplayNum+0xd6>
	}
	
	//show
	LCD_DisplayString( Xpoint, Ypoint,  (const char*)pStr, Font, Color_Background, Color_Foreground );
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	f107 020c 	add.w	r2, r7, #12
 8000f1e:	8811      	ldrh	r1, [r2, #0]
 8000f20:	f107 020e 	add.w	r2, r7, #14
 8000f24:	8810      	ldrh	r0, [r2, #0]
 8000f26:	f8b7 222c 	ldrh.w	r2, [r7, #556]	; 0x22c
 8000f2a:	9201      	str	r2, [sp, #4]
 8000f2c:	f8b7 2228 	ldrh.w	r2, [r7, #552]	; 0x228
 8000f30:	9200      	str	r2, [sp, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8000f38:	f7ff ff14 	bl	8000d64 <LCD_DisplayString>
 8000f3c:	e000      	b.n	8000f40 <LCD_DisplayNum+0x138>
		return;
 8000f3e:	bf00      	nop
}
 8000f40:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd90      	pop	{r4, r7, pc}
 8000f48:	200005cc 	.word	0x200005cc
 8000f4c:	66666667 	.word	0x66666667

08000f50 <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <DESELECT>:

static
inline void DESELECT(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <xmit_spi>:

extern SPI_HandleTypeDef hspi1;

static
void xmit_spi(BYTE Data)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000f76:	bf00      	nop
 8000f78:	4808      	ldr	r0, [pc, #32]	; (8000f9c <xmit_spi+0x30>)
 8000f7a:	f00a fe8b 	bl	800bc94 <HAL_SPI_GetState>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d1f9      	bne.n	8000f78 <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 5000);
 8000f84:	1df9      	adds	r1, r7, #7
 8000f86:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	4803      	ldr	r0, [pc, #12]	; (8000f9c <xmit_spi+0x30>)
 8000f8e:	f00a fbab 	bl	800b6e8 <HAL_SPI_Transmit>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200006ac 	.word	0x200006ac

08000fa0 <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 8000fa6:	23ff      	movs	r3, #255	; 0xff
 8000fa8:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8000fae:	bf00      	nop
 8000fb0:	4809      	ldr	r0, [pc, #36]	; (8000fd8 <rcvr_spi+0x38>)
 8000fb2:	f00a fe6f 	bl	800bc94 <HAL_SPI_GetState>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d1f9      	bne.n	8000fb0 <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &Dummy, &Data, 1, 5000);
 8000fbc:	1dba      	adds	r2, r7, #6
 8000fbe:	1df9      	adds	r1, r7, #7
 8000fc0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <rcvr_spi+0x38>)
 8000fca:	f00a fcc1 	bl	800b950 <HAL_SPI_TransmitReceive>

	return Data;
 8000fce:	79bb      	ldrb	r3, [r7, #6]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	200006ac 	.word	0x200006ac

08000fdc <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 8000fe4:	f7ff ffdc 	bl	8000fa0 <rcvr_spi>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	701a      	strb	r2, [r3, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <wait_ready+0x34>)
 8001000:	2232      	movs	r2, #50	; 0x32
 8001002:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 8001004:	f7ff ffcc 	bl	8000fa0 <rcvr_spi>
	do
		res = rcvr_spi();
 8001008:	f7ff ffca 	bl	8000fa0 <rcvr_spi>
 800100c:	4603      	mov	r3, r0
 800100e:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	2bff      	cmp	r3, #255	; 0xff
 8001014:	d004      	beq.n	8001020 <wait_ready+0x28>
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <wait_ready+0x34>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1f3      	bne.n	8001008 <wait_ready+0x10>

	return res;
 8001020:	79fb      	ldrb	r3, [r7, #7]
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200000c5 	.word	0x200000c5

08001030 <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 8001036:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800103a:	60bb      	str	r3, [r7, #8]

	DESELECT();
 800103c:	f7ff ff8f 	bl	8000f5e <DESELECT>

	for (i = 0; i < 10; i++)
 8001040:	2300      	movs	r3, #0
 8001042:	73fb      	strb	r3, [r7, #15]
 8001044:	e005      	b.n	8001052 <power_on+0x22>
		xmit_spi(0xFF);
 8001046:	20ff      	movs	r0, #255	; 0xff
 8001048:	f7ff ff90 	bl	8000f6c <xmit_spi>
	for (i = 0; i < 10; i++)
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	3301      	adds	r3, #1
 8001050:	73fb      	strb	r3, [r7, #15]
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	2b09      	cmp	r3, #9
 8001056:	d9f6      	bls.n	8001046 <power_on+0x16>

	SELECT();
 8001058:	f7ff ff7a 	bl	8000f50 <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 800105c:	2340      	movs	r3, #64	; 0x40
 800105e:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 8001070:	2395      	movs	r3, #149	; 0x95
 8001072:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]
 8001078:	e00b      	b.n	8001092 <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	f107 0210 	add.w	r2, r7, #16
 8001080:	4413      	add	r3, r2
 8001082:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff70 	bl	8000f6c <xmit_spi>
	for (i = 0; i < 6; i++)
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	3301      	adds	r3, #1
 8001090:	73fb      	strb	r3, [r7, #15]
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	2b05      	cmp	r3, #5
 8001096:	d9f0      	bls.n	800107a <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 8001098:	e002      	b.n	80010a0 <power_on+0x70>
		Count--;
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	3b01      	subs	r3, #1
 800109e:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 80010a0:	f7ff ff7e 	bl	8000fa0 <rcvr_spi>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d002      	beq.n	80010b0 <power_on+0x80>
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1f4      	bne.n	800109a <power_on+0x6a>

	DESELECT();
 80010b0:	f7ff ff55 	bl	8000f5e <DESELECT>
	xmit_spi(0XFF);
 80010b4:	20ff      	movs	r0, #255	; 0xff
 80010b6:	f7ff ff59 	bl	8000f6c <xmit_spi>

	PowerFlag = 1;
 80010ba:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <power_on+0x98>)
 80010bc:	2201      	movs	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200000c7 	.word	0x200000c7

080010cc <power_off>:

static
void power_off(void) {
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <power_off+0x14>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	200000c7 	.word	0x200000c7

080010e4 <chk_power>:

static
int chk_power(void) /* Socket power state: 0=off, 1=on */
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
	return PowerFlag;
 80010e8:	4b03      	ldr	r3, [pc, #12]	; (80010f8 <chk_power+0x14>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	200000c7 	.word	0x200000c7

080010fc <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 8001106:	4b17      	ldr	r3, [pc, #92]	; (8001164 <rcvr_datablock+0x68>)
 8001108:	220a      	movs	r2, #10
 800110a:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 800110c:	f7ff ff48 	bl	8000fa0 <rcvr_spi>
 8001110:	4603      	mov	r3, r0
 8001112:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	2bff      	cmp	r3, #255	; 0xff
 8001118:	d104      	bne.n	8001124 <rcvr_datablock+0x28>
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <rcvr_datablock+0x68>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f3      	bne.n	800110c <rcvr_datablock+0x10>
	if (token != 0xFE)
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	2bfe      	cmp	r3, #254	; 0xfe
 8001128:	d001      	beq.n	800112e <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 800112a:	2300      	movs	r3, #0
 800112c:	e016      	b.n	800115c <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	1c5a      	adds	r2, r3, #1
 8001132:	607a      	str	r2, [r7, #4]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff51 	bl	8000fdc <rcvr_spi_m>
		rcvr_spi_m(buff++);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	1c5a      	adds	r2, r3, #1
 800113e:	607a      	str	r2, [r7, #4]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff4b 	bl	8000fdc <rcvr_spi_m>
	} while (btr -= 2);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	3b02      	subs	r3, #2
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1ed      	bne.n	800112e <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 8001152:	f7ff ff25 	bl	8000fa0 <rcvr_spi>
	rcvr_spi();
 8001156:	f7ff ff23 	bl	8000fa0 <rcvr_spi>

	return TRUE; /* Return with success */
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200000c4 	.word	0x200000c4

08001168 <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 8001178:	f7ff ff3e 	bl	8000ff8 <wait_ready>
 800117c:	4603      	mov	r3, r0
 800117e:	2bff      	cmp	r3, #255	; 0xff
 8001180:	d001      	beq.n	8001186 <xmit_datablock+0x1e>
		return FALSE;
 8001182:	2300      	movs	r3, #0
 8001184:	e040      	b.n	8001208 <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 8001186:	78fb      	ldrb	r3, [r7, #3]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff feef 	bl	8000f6c <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 800118e:	78fb      	ldrb	r3, [r7, #3]
 8001190:	2bfd      	cmp	r3, #253	; 0xfd
 8001192:	d031      	beq.n	80011f8 <xmit_datablock+0x90>
		wc = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	1c5a      	adds	r2, r3, #1
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fee3 	bl	8000f6c <xmit_spi>
			xmit_spi(*buff++);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	1c5a      	adds	r2, r3, #1
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff fedc 	bl	8000f6c <xmit_spi>
		} while (--wc);
 80011b4:	7bbb      	ldrb	r3, [r7, #14]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	73bb      	strb	r3, [r7, #14]
 80011ba:	7bbb      	ldrb	r3, [r7, #14]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1eb      	bne.n	8001198 <xmit_datablock+0x30>

		rcvr_spi();
 80011c0:	f7ff feee 	bl	8000fa0 <rcvr_spi>
		rcvr_spi();
 80011c4:	f7ff feec 	bl	8000fa0 <rcvr_spi>

		while (i <= 64) {
 80011c8:	e00b      	b.n	80011e2 <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 80011ca:	f7ff fee9 	bl	8000fa0 <rcvr_spi>
 80011ce:	4603      	mov	r3, r0
 80011d0:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	f003 031f 	and.w	r3, r3, #31
 80011d8:	2b05      	cmp	r3, #5
 80011da:	d006      	beq.n	80011ea <xmit_datablock+0x82>
				break;
			i++;
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	3301      	adds	r3, #1
 80011e0:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	2b40      	cmp	r3, #64	; 0x40
 80011e6:	d9f0      	bls.n	80011ca <xmit_datablock+0x62>
 80011e8:	e000      	b.n	80011ec <xmit_datablock+0x84>
				break;
 80011ea:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 80011ec:	bf00      	nop
 80011ee:	f7ff fed7 	bl	8000fa0 <rcvr_spi>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0fa      	beq.n	80011ee <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	f003 031f 	and.w	r3, r3, #31
 80011fe:	2b05      	cmp	r3, #5
 8001200:	d101      	bne.n	8001206 <xmit_datablock+0x9e>
		return TRUE;
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <xmit_datablock+0xa0>
	else
		return FALSE;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 800121c:	f7ff feec 	bl	8000ff8 <wait_ready>
 8001220:	4603      	mov	r3, r0
 8001222:	2bff      	cmp	r3, #255	; 0xff
 8001224:	d001      	beq.n	800122a <send_cmd+0x1a>
		return 0xFF;
 8001226:	23ff      	movs	r3, #255	; 0xff
 8001228:	e040      	b.n	80012ac <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fe9d 	bl	8000f6c <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	0e1b      	lsrs	r3, r3, #24
 8001236:	b2db      	uxtb	r3, r3
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fe97 	bl	8000f6c <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	0c1b      	lsrs	r3, r3, #16
 8001242:	b2db      	uxtb	r3, r3
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fe91 	bl	8000f6c <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	0a1b      	lsrs	r3, r3, #8
 800124e:	b2db      	uxtb	r3, r3
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fe8b 	bl	8000f6c <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	b2db      	uxtb	r3, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff fe86 	bl	8000f6c <xmit_spi>
	n = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	2b40      	cmp	r3, #64	; 0x40
 8001268:	d101      	bne.n	800126e <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 800126a:	2395      	movs	r3, #149	; 0x95
 800126c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	2b48      	cmp	r3, #72	; 0x48
 8001272:	d101      	bne.n	8001278 <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 8001274:	2387      	movs	r3, #135	; 0x87
 8001276:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fe76 	bl	8000f6c <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	2b4c      	cmp	r3, #76	; 0x4c
 8001284:	d101      	bne.n	800128a <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 8001286:	f7ff fe8b 	bl	8000fa0 <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 800128a:	230a      	movs	r3, #10
 800128c:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 800128e:	f7ff fe87 	bl	8000fa0 <rcvr_spi>
 8001292:	4603      	mov	r3, r0
 8001294:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 8001296:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800129a:	2b00      	cmp	r3, #0
 800129c:	da05      	bge.n	80012aa <send_cmd+0x9a>
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	3b01      	subs	r3, #1
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f1      	bne.n	800128e <send_cmd+0x7e>

	return res; /* Return with the response value */
 80012aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 80012c4:	2301      	movs	r3, #1
 80012c6:	e0d5      	b.n	8001474 <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 80012c8:	4b6c      	ldr	r3, [pc, #432]	; (800147c <disk_initialize+0x1c8>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 80012d6:	4b69      	ldr	r3, [pc, #420]	; (800147c <disk_initialize+0x1c8>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	e0ca      	b.n	8001474 <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 80012de:	f7ff fea7 	bl	8001030 <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 80012e2:	f7ff fe35 	bl	8000f50 <SELECT>
	ty = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 80012ea:	2100      	movs	r1, #0
 80012ec:	2040      	movs	r0, #64	; 0x40
 80012ee:	f7ff ff8f 	bl	8001210 <send_cmd>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	f040 80a5 	bne.w	8001444 <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 80012fa:	4b61      	ldr	r3, [pc, #388]	; (8001480 <disk_initialize+0x1cc>)
 80012fc:	2264      	movs	r2, #100	; 0x64
 80012fe:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 8001300:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8001304:	2048      	movs	r0, #72	; 0x48
 8001306:	f7ff ff83 	bl	8001210 <send_cmd>
 800130a:	4603      	mov	r3, r0
 800130c:	2b01      	cmp	r3, #1
 800130e:	d158      	bne.n	80013c2 <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8001310:	2300      	movs	r3, #0
 8001312:	73fb      	strb	r3, [r7, #15]
 8001314:	e00c      	b.n	8001330 <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 8001316:	7bfc      	ldrb	r4, [r7, #15]
 8001318:	f7ff fe42 	bl	8000fa0 <rcvr_spi>
 800131c:	4603      	mov	r3, r0
 800131e:	461a      	mov	r2, r3
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	4423      	add	r3, r4
 8001326:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	3301      	adds	r3, #1
 800132e:	73fb      	strb	r3, [r7, #15]
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	2b03      	cmp	r3, #3
 8001334:	d9ef      	bls.n	8001316 <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 8001336:	7abb      	ldrb	r3, [r7, #10]
 8001338:	2b01      	cmp	r3, #1
 800133a:	f040 8083 	bne.w	8001444 <disk_initialize+0x190>
 800133e:	7afb      	ldrb	r3, [r7, #11]
 8001340:	2baa      	cmp	r3, #170	; 0xaa
 8001342:	d17f      	bne.n	8001444 <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 8001344:	2100      	movs	r1, #0
 8001346:	2077      	movs	r0, #119	; 0x77
 8001348:	f7ff ff62 	bl	8001210 <send_cmd>
 800134c:	4603      	mov	r3, r0
 800134e:	2b01      	cmp	r3, #1
 8001350:	d807      	bhi.n	8001362 <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 8001352:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001356:	2069      	movs	r0, #105	; 0x69
 8001358:	f7ff ff5a 	bl	8001210 <send_cmd>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d005      	beq.n	800136e <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 8001362:	4b47      	ldr	r3, [pc, #284]	; (8001480 <disk_initialize+0x1cc>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	b2db      	uxtb	r3, r3
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1eb      	bne.n	8001344 <disk_initialize+0x90>
 800136c:	e000      	b.n	8001370 <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 800136e:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 8001370:	4b43      	ldr	r3, [pc, #268]	; (8001480 <disk_initialize+0x1cc>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d064      	beq.n	8001444 <disk_initialize+0x190>
 800137a:	2100      	movs	r1, #0
 800137c:	207a      	movs	r0, #122	; 0x7a
 800137e:	f7ff ff47 	bl	8001210 <send_cmd>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d15d      	bne.n	8001444 <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 8001388:	2300      	movs	r3, #0
 800138a:	73fb      	strb	r3, [r7, #15]
 800138c:	e00c      	b.n	80013a8 <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 800138e:	7bfc      	ldrb	r4, [r7, #15]
 8001390:	f7ff fe06 	bl	8000fa0 <rcvr_spi>
 8001394:	4603      	mov	r3, r0
 8001396:	461a      	mov	r2, r3
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	4423      	add	r3, r4
 800139e:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	3301      	adds	r3, #1
 80013a6:	73fb      	strb	r3, [r7, #15]
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d9ef      	bls.n	800138e <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 80013ae:	7a3b      	ldrb	r3, [r7, #8]
 80013b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <disk_initialize+0x108>
 80013b8:	2306      	movs	r3, #6
 80013ba:	e000      	b.n	80013be <disk_initialize+0x10a>
 80013bc:	2302      	movs	r3, #2
 80013be:	73bb      	strb	r3, [r7, #14]
 80013c0:	e040      	b.n	8001444 <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80013c2:	2100      	movs	r1, #0
 80013c4:	2077      	movs	r0, #119	; 0x77
 80013c6:	f7ff ff23 	bl	8001210 <send_cmd>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d808      	bhi.n	80013e2 <disk_initialize+0x12e>
 80013d0:	2100      	movs	r1, #0
 80013d2:	2069      	movs	r0, #105	; 0x69
 80013d4:	f7ff ff1c 	bl	8001210 <send_cmd>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d801      	bhi.n	80013e2 <disk_initialize+0x12e>
 80013de:	2302      	movs	r3, #2
 80013e0:	e000      	b.n	80013e4 <disk_initialize+0x130>
 80013e2:	2301      	movs	r3, #1
 80013e4:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 80013e6:	7bbb      	ldrb	r3, [r7, #14]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d10e      	bne.n	800140a <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 80013ec:	2100      	movs	r1, #0
 80013ee:	2077      	movs	r0, #119	; 0x77
 80013f0:	f7ff ff0e 	bl	8001210 <send_cmd>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d80e      	bhi.n	8001418 <disk_initialize+0x164>
 80013fa:	2100      	movs	r1, #0
 80013fc:	2069      	movs	r0, #105	; 0x69
 80013fe:	f7ff ff07 	bl	8001210 <send_cmd>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d107      	bne.n	8001418 <disk_initialize+0x164>
						break; /* ACMD41 */
 8001408:	e00d      	b.n	8001426 <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 800140a:	2100      	movs	r1, #0
 800140c:	2041      	movs	r0, #65	; 0x41
 800140e:	f7ff feff 	bl	8001210 <send_cmd>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d005      	beq.n	8001424 <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <disk_initialize+0x1cc>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1e1      	bne.n	80013e6 <disk_initialize+0x132>
 8001422:	e000      	b.n	8001426 <disk_initialize+0x172>
						break; /* CMD1 */
 8001424:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <disk_initialize+0x1cc>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d007      	beq.n	8001440 <disk_initialize+0x18c>
 8001430:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001434:	2050      	movs	r0, #80	; 0x50
 8001436:	f7ff feeb 	bl	8001210 <send_cmd>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <disk_initialize+0x190>
				ty = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 8001444:	4a0f      	ldr	r2, [pc, #60]	; (8001484 <disk_initialize+0x1d0>)
 8001446:	7bbb      	ldrb	r3, [r7, #14]
 8001448:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 800144a:	f7ff fd88 	bl	8000f5e <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 800144e:	f7ff fda7 	bl	8000fa0 <rcvr_spi>

	if (ty) /* Initialization succeded */
 8001452:	7bbb      	ldrb	r3, [r7, #14]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d008      	beq.n	800146a <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <disk_initialize+0x1c8>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	b2da      	uxtb	r2, r3
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <disk_initialize+0x1c8>)
 8001466:	701a      	strb	r2, [r3, #0]
 8001468:	e001      	b.n	800146e <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 800146a:	f7ff fe2f 	bl	80010cc <power_off>

	return Stat;
 800146e:	4b03      	ldr	r3, [pc, #12]	; (800147c <disk_initialize+0x1c8>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	b2db      	uxtb	r3, r3
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	bd90      	pop	{r4, r7, pc}
 800147c:	20000000 	.word	0x20000000
 8001480:	200000c4 	.word	0x200000c4
 8001484:	200000c6 	.word	0x200000c6

08001488 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8001498:	2301      	movs	r3, #1
 800149a:	e002      	b.n	80014a2 <disk_status+0x1a>
	return Stat;
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <disk_status+0x28>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	b2db      	uxtb	r3, r3
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000000 	.word	0x20000000

080014b4 <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	4603      	mov	r3, r0
 80014c2:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d102      	bne.n	80014d0 <disk_read+0x1c>
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <disk_read+0x20>
		return RES_PARERR;
 80014d0:	2304      	movs	r3, #4
 80014d2:	e051      	b.n	8001578 <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 80014d4:	4b2a      	ldr	r3, [pc, #168]	; (8001580 <disk_read+0xcc>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <disk_read+0x32>
		return RES_NOTRDY;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e048      	b.n	8001578 <disk_read+0xc4>

	if (!(CardType & 4))
 80014e6:	4b27      	ldr	r3, [pc, #156]	; (8001584 <disk_read+0xd0>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d102      	bne.n	80014f8 <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	025b      	lsls	r3, r3, #9
 80014f6:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 80014f8:	f7ff fd2a 	bl	8000f50 <SELECT>

	if (count == 1) { /* Single block read */
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d111      	bne.n	8001526 <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	2051      	movs	r0, #81	; 0x51
 8001506:	f7ff fe83 	bl	8001210 <send_cmd>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d129      	bne.n	8001564 <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 8001510:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001514:	68b8      	ldr	r0, [r7, #8]
 8001516:	f7ff fdf1 	bl	80010fc <rcvr_datablock>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d021      	beq.n	8001564 <disk_read+0xb0>
			count = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	e01e      	b.n	8001564 <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	2052      	movs	r0, #82	; 0x52
 800152a:	f7ff fe71 	bl	8001210 <send_cmd>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d117      	bne.n	8001564 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8001534:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001538:	68b8      	ldr	r0, [r7, #8]
 800153a:	f7ff fddf 	bl	80010fc <rcvr_datablock>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00a      	beq.n	800155a <disk_read+0xa6>
					break;
				buff += 512;
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800154a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	3b01      	subs	r3, #1
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1ed      	bne.n	8001534 <disk_read+0x80>
 8001558:	e000      	b.n	800155c <disk_read+0xa8>
					break;
 800155a:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 800155c:	2100      	movs	r1, #0
 800155e:	204c      	movs	r0, #76	; 0x4c
 8001560:	f7ff fe56 	bl	8001210 <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 8001564:	f7ff fcfb 	bl	8000f5e <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8001568:	f7ff fd1a 	bl	8000fa0 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	bf14      	ite	ne
 8001572:	2301      	movne	r3, #1
 8001574:	2300      	moveq	r3, #0
 8001576:	b2db      	uxtb	r3, r3
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000000 	.word	0x20000000
 8001584:	200000c6 	.word	0x200000c6

08001588 <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	4603      	mov	r3, r0
 8001596:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d102      	bne.n	80015a4 <disk_write+0x1c>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <disk_write+0x20>
		return RES_PARERR;
 80015a4:	2304      	movs	r3, #4
 80015a6:	e06b      	b.n	8001680 <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 80015a8:	4b37      	ldr	r3, [pc, #220]	; (8001688 <disk_write+0x100>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <disk_write+0x32>
		return RES_NOTRDY;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e062      	b.n	8001680 <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 80015ba:	4b33      	ldr	r3, [pc, #204]	; (8001688 <disk_write+0x100>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <disk_write+0x44>
		return RES_WRPRT;
 80015c8:	2302      	movs	r3, #2
 80015ca:	e059      	b.n	8001680 <disk_write+0xf8>

	if (!(CardType & 4))
 80015cc:	4b2f      	ldr	r3, [pc, #188]	; (800168c <disk_write+0x104>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d102      	bne.n	80015de <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	025b      	lsls	r3, r3, #9
 80015dc:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 80015de:	f7ff fcb7 	bl	8000f50 <SELECT>

	if (count == 1) { /* Single block write */
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d110      	bne.n	800160a <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	2058      	movs	r0, #88	; 0x58
 80015ec:	f7ff fe10 	bl	8001210 <send_cmd>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d13a      	bne.n	800166c <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 80015f6:	21fe      	movs	r1, #254	; 0xfe
 80015f8:	68b8      	ldr	r0, [r7, #8]
 80015fa:	f7ff fdb5 	bl	8001168 <xmit_datablock>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d033      	beq.n	800166c <disk_write+0xe4>
			count = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	e030      	b.n	800166c <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 800160a:	4b20      	ldr	r3, [pc, #128]	; (800168c <disk_write+0x104>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d007      	beq.n	8001626 <disk_write+0x9e>
			send_cmd(CMD55, 0);
 8001616:	2100      	movs	r1, #0
 8001618:	2077      	movs	r0, #119	; 0x77
 800161a:	f7ff fdf9 	bl	8001210 <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 800161e:	6839      	ldr	r1, [r7, #0]
 8001620:	2057      	movs	r0, #87	; 0x57
 8001622:	f7ff fdf5 	bl	8001210 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	2059      	movs	r0, #89	; 0x59
 800162a:	f7ff fdf1 	bl	8001210 <send_cmd>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d11b      	bne.n	800166c <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8001634:	21fc      	movs	r1, #252	; 0xfc
 8001636:	68b8      	ldr	r0, [r7, #8]
 8001638:	f7ff fd96 	bl	8001168 <xmit_datablock>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00a      	beq.n	8001658 <disk_write+0xd0>
					break;
				buff += 512;
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001648:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	3b01      	subs	r3, #1
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1ee      	bne.n	8001634 <disk_write+0xac>
 8001656:	e000      	b.n	800165a <disk_write+0xd2>
					break;
 8001658:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 800165a:	21fd      	movs	r1, #253	; 0xfd
 800165c:	2000      	movs	r0, #0
 800165e:	f7ff fd83 	bl	8001168 <xmit_datablock>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <disk_write+0xe4>
				count = 1;
 8001668:	2301      	movs	r3, #1
 800166a:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 800166c:	f7ff fc77 	bl	8000f5e <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8001670:	f7ff fc96 	bl	8000fa0 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	bf14      	ite	ne
 800167a:	2301      	movne	r3, #1
 800167c:	2300      	moveq	r3, #0
 800167e:	b2db      	uxtb	r3, r3
}
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000000 	.word	0x20000000
 800168c:	200000c6 	.word	0x200000c6

08001690 <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b08b      	sub	sp, #44	; 0x2c
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	603a      	str	r2, [r7, #0]
 800169a:	71fb      	strb	r3, [r7, #7]
 800169c:	460b      	mov	r3, r1
 800169e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <disk_ioctl+0x1e>
		return RES_PARERR;
 80016aa:	2304      	movs	r3, #4
 80016ac:	e16a      	b.n	8001984 <disk_ioctl+0x2f4>

	res = RES_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER_OFF) {
 80016b4:	79bb      	ldrb	r3, [r7, #6]
 80016b6:	2b07      	cmp	r3, #7
 80016b8:	d127      	bne.n	800170a <disk_ioctl+0x7a>
		switch (*ptr) {
 80016ba:	6a3b      	ldr	r3, [r7, #32]
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d00e      	beq.n	80016e0 <disk_ioctl+0x50>
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d012      	beq.n	80016ec <disk_ioctl+0x5c>
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d11b      	bne.n	8001702 <disk_ioctl+0x72>
		case 0: /* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
 80016ca:	f7ff fd0b 	bl	80010e4 <chk_power>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <disk_ioctl+0x48>
				power_off(); /* Power off */
 80016d4:	f7ff fcfa 	bl	80010cc <power_off>
			res = RES_OK;
 80016d8:	2300      	movs	r3, #0
 80016da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016de:	e14f      	b.n	8001980 <disk_ioctl+0x2f0>
		case 1: /* Sub control code == 1 (POWER_ON) */
			power_on(); /* Power on */
 80016e0:	f7ff fca6 	bl	8001030 <power_on>
			res = RES_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80016ea:	e149      	b.n	8001980 <disk_ioctl+0x2f0>
		case 2: /* Sub control code == 2 (POWER_GET) */
			*(ptr + 1) = (BYTE) chk_power();
 80016ec:	f7ff fcfa 	bl	80010e4 <chk_power>
 80016f0:	4602      	mov	r2, r0
 80016f2:	6a3b      	ldr	r3, [r7, #32]
 80016f4:	3301      	adds	r3, #1
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001700:	e13e      	b.n	8001980 <disk_ioctl+0x2f0>
		default:
			res = RES_PARERR;
 8001702:	2304      	movs	r3, #4
 8001704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001708:	e13a      	b.n	8001980 <disk_ioctl+0x2f0>
		}
	} else {
		if (Stat & STA_NOINIT)
 800170a:	4ba0      	ldr	r3, [pc, #640]	; (800198c <disk_ioctl+0x2fc>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <disk_ioctl+0x8c>
			return RES_NOTRDY;
 8001718:	2303      	movs	r3, #3
 800171a:	e133      	b.n	8001984 <disk_ioctl+0x2f4>

		SELECT(); /* CS = L */
 800171c:	f7ff fc18 	bl	8000f50 <SELECT>

		switch (ctrl) {
 8001720:	79bb      	ldrb	r3, [r7, #6]
 8001722:	2b35      	cmp	r3, #53	; 0x35
 8001724:	f200 811d 	bhi.w	8001962 <disk_ioctl+0x2d2>
 8001728:	a201      	add	r2, pc, #4	; (adr r2, 8001730 <disk_ioctl+0xa0>)
 800172a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172e:	bf00      	nop
 8001730:	080018cb 	.word	0x080018cb
 8001734:	08001809 	.word	0x08001809
 8001738:	080018bb 	.word	0x080018bb
 800173c:	08001963 	.word	0x08001963
 8001740:	08001963 	.word	0x08001963
 8001744:	08001963 	.word	0x08001963
 8001748:	08001963 	.word	0x08001963
 800174c:	08001963 	.word	0x08001963
 8001750:	08001963 	.word	0x08001963
 8001754:	08001963 	.word	0x08001963
 8001758:	08001963 	.word	0x08001963
 800175c:	08001963 	.word	0x08001963
 8001760:	08001963 	.word	0x08001963
 8001764:	08001963 	.word	0x08001963
 8001768:	08001963 	.word	0x08001963
 800176c:	08001963 	.word	0x08001963
 8001770:	08001963 	.word	0x08001963
 8001774:	08001963 	.word	0x08001963
 8001778:	08001963 	.word	0x08001963
 800177c:	08001963 	.word	0x08001963
 8001780:	08001963 	.word	0x08001963
 8001784:	08001963 	.word	0x08001963
 8001788:	08001963 	.word	0x08001963
 800178c:	08001963 	.word	0x08001963
 8001790:	08001963 	.word	0x08001963
 8001794:	08001963 	.word	0x08001963
 8001798:	08001963 	.word	0x08001963
 800179c:	08001963 	.word	0x08001963
 80017a0:	08001963 	.word	0x08001963
 80017a4:	08001963 	.word	0x08001963
 80017a8:	08001963 	.word	0x08001963
 80017ac:	08001963 	.word	0x08001963
 80017b0:	08001963 	.word	0x08001963
 80017b4:	08001963 	.word	0x08001963
 80017b8:	08001963 	.word	0x08001963
 80017bc:	08001963 	.word	0x08001963
 80017c0:	08001963 	.word	0x08001963
 80017c4:	08001963 	.word	0x08001963
 80017c8:	08001963 	.word	0x08001963
 80017cc:	08001963 	.word	0x08001963
 80017d0:	08001963 	.word	0x08001963
 80017d4:	08001963 	.word	0x08001963
 80017d8:	08001963 	.word	0x08001963
 80017dc:	08001963 	.word	0x08001963
 80017e0:	08001963 	.word	0x08001963
 80017e4:	08001963 	.word	0x08001963
 80017e8:	08001963 	.word	0x08001963
 80017ec:	08001963 	.word	0x08001963
 80017f0:	08001963 	.word	0x08001963
 80017f4:	08001963 	.word	0x08001963
 80017f8:	08001963 	.word	0x08001963
 80017fc:	080018dd 	.word	0x080018dd
 8001800:	08001901 	.word	0x08001901
 8001804:	08001925 	.word	0x08001925
		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8001808:	2100      	movs	r1, #0
 800180a:	2049      	movs	r0, #73	; 0x49
 800180c:	f7ff fd00 	bl	8001210 <send_cmd>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	f040 80a9 	bne.w	800196a <disk_ioctl+0x2da>
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	2110      	movs	r1, #16
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fc6c 	bl	80010fc <rcvr_datablock>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 809f 	beq.w	800196a <disk_ioctl+0x2da>
				if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 800182c:	7b3b      	ldrb	r3, [r7, #12]
 800182e:	099b      	lsrs	r3, r3, #6
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b01      	cmp	r3, #1
 8001834:	d10e      	bne.n	8001854 <disk_ioctl+0x1c4>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001836:	7d7b      	ldrb	r3, [r7, #21]
 8001838:	b29a      	uxth	r2, r3
 800183a:	7d3b      	ldrb	r3, [r7, #20]
 800183c:	b29b      	uxth	r3, r3
 800183e:	021b      	lsls	r3, r3, #8
 8001840:	b29b      	uxth	r3, r3
 8001842:	4413      	add	r3, r2
 8001844:	b29b      	uxth	r3, r3
 8001846:	3301      	adds	r3, #1
 8001848:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800184a:	8bfb      	ldrh	r3, [r7, #30]
 800184c:	029a      	lsls	r2, r3, #10
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	e02e      	b.n	80018b2 <disk_ioctl+0x222>
				} else { /* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8001854:	7c7b      	ldrb	r3, [r7, #17]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	b2da      	uxtb	r2, r3
 800185c:	7dbb      	ldrb	r3, [r7, #22]
 800185e:	09db      	lsrs	r3, r3, #7
 8001860:	b2db      	uxtb	r3, r3
 8001862:	4413      	add	r3, r2
 8001864:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 8001866:	7d7b      	ldrb	r3, [r7, #21]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	b2db      	uxtb	r3, r3
 800186c:	f003 0306 	and.w	r3, r3, #6
 8001870:	b2db      	uxtb	r3, r3
 8001872:	4413      	add	r3, r2
 8001874:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8001876:	3302      	adds	r3, #2
 8001878:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 800187c:	7d3b      	ldrb	r3, [r7, #20]
 800187e:	099b      	lsrs	r3, r3, #6
 8001880:	b2db      	uxtb	r3, r3
 8001882:	b29a      	uxth	r2, r3
 8001884:	7cfb      	ldrb	r3, [r7, #19]
 8001886:	b29b      	uxth	r3, r3
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	b29b      	uxth	r3, r3
 800188c:	4413      	add	r3, r2
 800188e:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 8001890:	7cbb      	ldrb	r3, [r7, #18]
 8001892:	029b      	lsls	r3, r3, #10
 8001894:	b29b      	uxth	r3, r3
 8001896:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800189a:	b29b      	uxth	r3, r3
 800189c:	4413      	add	r3, r2
 800189e:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 80018a0:	3301      	adds	r3, #1
 80018a2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80018a4:	8bfa      	ldrh	r2, [r7, #30]
 80018a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018aa:	3b09      	subs	r3, #9
 80018ac:	409a      	lsls	r2, r3
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80018b2:	2300      	movs	r3, #0
 80018b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 80018b8:	e057      	b.n	800196a <disk_ioctl+0x2da>

		case GET_SECTOR_SIZE: /* Get sectors on the disk (WORD) */
			*(WORD*) buff = 512;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c0:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80018c8:	e056      	b.n	8001978 <disk_ioctl+0x2e8>

		case CTRL_SYNC: /* Make sure that data has been written */
			if (wait_ready() == 0xFF)
 80018ca:	f7ff fb95 	bl	8000ff8 <wait_ready>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2bff      	cmp	r3, #255	; 0xff
 80018d2:	d14c      	bne.n	800196e <disk_ioctl+0x2de>
				res = RES_OK;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80018da:	e048      	b.n	800196e <disk_ioctl+0x2de>

		case MMC_GET_CSD: /* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0 /* READ_CSD */
 80018dc:	2100      	movs	r1, #0
 80018de:	2049      	movs	r0, #73	; 0x49
 80018e0:	f7ff fc96 	bl	8001210 <send_cmd>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d143      	bne.n	8001972 <disk_ioctl+0x2e2>
			&& rcvr_datablock(ptr, 16))
 80018ea:	2110      	movs	r1, #16
 80018ec:	6a38      	ldr	r0, [r7, #32]
 80018ee:	f7ff fc05 	bl	80010fc <rcvr_datablock>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d03c      	beq.n	8001972 <disk_ioctl+0x2e2>
				res = RES_OK;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80018fe:	e038      	b.n	8001972 <disk_ioctl+0x2e2>

		case MMC_GET_CID: /* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0 /* READ_CID */
 8001900:	2100      	movs	r1, #0
 8001902:	204a      	movs	r0, #74	; 0x4a
 8001904:	f7ff fc84 	bl	8001210 <send_cmd>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d133      	bne.n	8001976 <disk_ioctl+0x2e6>
			&& rcvr_datablock(ptr, 16))
 800190e:	2110      	movs	r1, #16
 8001910:	6a38      	ldr	r0, [r7, #32]
 8001912:	f7ff fbf3 	bl	80010fc <rcvr_datablock>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d02c      	beq.n	8001976 <disk_ioctl+0x2e6>
				res = RES_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001922:	e028      	b.n	8001976 <disk_ioctl+0x2e6>

		case MMC_GET_OCR: /* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 8001924:	2100      	movs	r1, #0
 8001926:	207a      	movs	r0, #122	; 0x7a
 8001928:	f7ff fc72 	bl	8001210 <send_cmd>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d117      	bne.n	8001962 <disk_ioctl+0x2d2>
				for (n = 0; n < 4; n++)
 8001932:	2300      	movs	r3, #0
 8001934:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001938:	e00b      	b.n	8001952 <disk_ioctl+0x2c2>
					*ptr++ = rcvr_spi();
 800193a:	6a3c      	ldr	r4, [r7, #32]
 800193c:	1c63      	adds	r3, r4, #1
 800193e:	623b      	str	r3, [r7, #32]
 8001940:	f7ff fb2e 	bl	8000fa0 <rcvr_spi>
 8001944:	4603      	mov	r3, r0
 8001946:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001948:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800194c:	3301      	adds	r3, #1
 800194e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001952:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001956:	2b03      	cmp	r3, #3
 8001958:	d9ef      	bls.n	800193a <disk_ioctl+0x2aa>
				res = RES_OK;
 800195a:	2300      	movs	r3, #0
 800195c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8001960:	e00a      	b.n	8001978 <disk_ioctl+0x2e8>
//            *ptr = CardType;
//            res = RES_OK;
//            break;

		default:
			res = RES_PARERR;
 8001962:	2304      	movs	r3, #4
 8001964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001968:	e006      	b.n	8001978 <disk_ioctl+0x2e8>
			break;
 800196a:	bf00      	nop
 800196c:	e004      	b.n	8001978 <disk_ioctl+0x2e8>
			break;
 800196e:	bf00      	nop
 8001970:	e002      	b.n	8001978 <disk_ioctl+0x2e8>
			break;
 8001972:	bf00      	nop
 8001974:	e000      	b.n	8001978 <disk_ioctl+0x2e8>
			break;
 8001976:	bf00      	nop
		}

		DESELECT(); /* CS = H */
 8001978:	f7ff faf1 	bl	8000f5e <DESELECT>
		rcvr_spi(); /* Idle (Release DO) */
 800197c:	f7ff fb10 	bl	8000fa0 <rcvr_spi>
	}

	return res;
 8001980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001984:	4618      	mov	r0, r3
 8001986:	372c      	adds	r7, #44	; 0x2c
 8001988:	46bd      	mov	sp, r7
 800198a:	bd90      	pop	{r4, r7, pc}
 800198c:	20000000 	.word	0x20000000

08001990 <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 8001996:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <disk_timerproc+0x44>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	71fb      	strb	r3, [r7, #7]
	if (n)
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d005      	beq.n	80019ae <disk_timerproc+0x1e>
		Timer1 = --n;
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	71fb      	strb	r3, [r7, #7]
 80019a8:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <disk_timerproc+0x44>)
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 80019ae:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <disk_timerproc+0x48>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	71fb      	strb	r3, [r7, #7]
	if (n)
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d005      	beq.n	80019c6 <disk_timerproc+0x36>
		Timer2 = --n;
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	3b01      	subs	r3, #1
 80019be:	71fb      	strb	r3, [r7, #7]
 80019c0:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <disk_timerproc+0x48>)
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	7013      	strb	r3, [r2, #0]

}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	200000c4 	.word	0x200000c4
 80019d8:	200000c5 	.word	0x200000c5

080019dc <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
	++sdcard_timer;
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <sdcard_systick_timerproc+0x2c>)
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	3301      	adds	r3, #1
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <sdcard_systick_timerproc+0x2c>)
 80019ec:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <sdcard_systick_timerproc+0x2c>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	2b09      	cmp	r3, #9
 80019f6:	d904      	bls.n	8001a02 <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <sdcard_systick_timerproc+0x2c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 80019fe:	f7ff ffc7 	bl	8001990 <disk_timerproc>
	}
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200005d6 	.word	0x200005d6

08001a0c <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 8001a10:	4b02      	ldr	r3, [pc, #8]	; (8001a1c <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	36c55cc0 	.word	0x36c55cc0

08001a20 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8001a30:	89fb      	ldrh	r3, [r7, #14]
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	b21a      	sxth	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	b21b      	sxth	r3, r3
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	b21b      	sxth	r3, r3
 8001a40:	81fb      	strh	r3, [r7, #14]
	return rv;
 8001a42:	89fb      	ldrh	r3, [r7, #14]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3303      	adds	r3, #3
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	021b      	lsls	r3, r3, #8
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	3202      	adds	r2, #2
 8001a68:	7812      	ldrb	r2, [r2, #0]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	3201      	adds	r2, #1
 8001a76:	7812      	ldrb	r2, [r2, #0]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	7812      	ldrb	r2, [r2, #0]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
	return rv;
 8001a88:	68fb      	ldr	r3, [r7, #12]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <ld_qword>:

#if FF_FS_EXFAT
static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8001a96:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3307      	adds	r3, #7
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	f04f 0400 	mov.w	r4, #0
 8001aac:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 8001ab0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001ab4:	f04f 0b00 	mov.w	fp, #0
 8001ab8:	f04f 0c00 	mov.w	ip, #0
 8001abc:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8001ac0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8001ac4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	3206      	adds	r2, #6
 8001acc:	7812      	ldrb	r2, [r2, #0]
 8001ace:	b2d1      	uxtb	r1, r2
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	ea4b 0301 	orr.w	r3, fp, r1
 8001ad8:	ea4c 0402 	orr.w	r4, ip, r2
 8001adc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 8001ae0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001ae4:	f04f 0b00 	mov.w	fp, #0
 8001ae8:	f04f 0c00 	mov.w	ip, #0
 8001aec:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8001af0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8001af4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	3205      	adds	r2, #5
 8001afc:	7812      	ldrb	r2, [r2, #0]
 8001afe:	b2d1      	uxtb	r1, r2
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	ea4b 0301 	orr.w	r3, fp, r1
 8001b08:	ea4c 0402 	orr.w	r4, ip, r2
 8001b0c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 8001b10:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001b14:	f04f 0b00 	mov.w	fp, #0
 8001b18:	f04f 0c00 	mov.w	ip, #0
 8001b1c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8001b20:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8001b24:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	3204      	adds	r2, #4
 8001b2c:	7812      	ldrb	r2, [r2, #0]
 8001b2e:	b2d1      	uxtb	r1, r2
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	ea4b 0301 	orr.w	r3, fp, r1
 8001b38:	ea4c 0402 	orr.w	r4, ip, r2
 8001b3c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 8001b40:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001b44:	f04f 0b00 	mov.w	fp, #0
 8001b48:	f04f 0c00 	mov.w	ip, #0
 8001b4c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8001b50:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8001b54:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	3203      	adds	r2, #3
 8001b5c:	7812      	ldrb	r2, [r2, #0]
 8001b5e:	b2d1      	uxtb	r1, r2
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	ea4b 0301 	orr.w	r3, fp, r1
 8001b68:	ea4c 0402 	orr.w	r4, ip, r2
 8001b6c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 8001b70:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001b74:	f04f 0b00 	mov.w	fp, #0
 8001b78:	f04f 0c00 	mov.w	ip, #0
 8001b7c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8001b80:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8001b84:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	3202      	adds	r2, #2
 8001b8c:	7812      	ldrb	r2, [r2, #0]
 8001b8e:	b2d1      	uxtb	r1, r2
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	ea4b 0301 	orr.w	r3, fp, r1
 8001b98:	ea4c 0402 	orr.w	r4, ip, r2
 8001b9c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 8001ba0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001ba4:	f04f 0b00 	mov.w	fp, #0
 8001ba8:	f04f 0c00 	mov.w	ip, #0
 8001bac:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8001bb0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8001bb4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	3201      	adds	r2, #1
 8001bbc:	7812      	ldrb	r2, [r2, #0]
 8001bbe:	b2d1      	uxtb	r1, r2
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	ea4b 0301 	orr.w	r3, fp, r1
 8001bc8:	ea4c 0402 	orr.w	r4, ip, r2
 8001bcc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 8001bd0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001bd4:	f04f 0b00 	mov.w	fp, #0
 8001bd8:	f04f 0c00 	mov.w	ip, #0
 8001bdc:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8001be0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8001be4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	7812      	ldrb	r2, [r2, #0]
 8001bec:	b2d1      	uxtb	r1, r2
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	ea4b 0301 	orr.w	r3, fp, r1
 8001bf6:	ea4c 0402 	orr.w	r4, ip, r2
 8001bfa:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 8001bfe:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	4621      	mov	r1, r4
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8001c0e:	4770      	bx	lr

08001c10 <st_word>:
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	887a      	ldrh	r2, [r7, #2]
 8001c24:	b2d2      	uxtb	r2, r2
 8001c26:	701a      	strb	r2, [r3, #0]
 8001c28:	887b      	ldrh	r3, [r7, #2]
 8001c2a:	0a1b      	lsrs	r3, r3, #8
 8001c2c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	887a      	ldrh	r2, [r7, #2]
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	701a      	strb	r2, [r3, #0]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	b2d2      	uxtb	r2, r2
 8001c5a:	701a      	strb	r2, [r3, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	0a1b      	lsrs	r3, r3, #8
 8001c60:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	1c5a      	adds	r2, r3, #1
 8001c66:	607a      	str	r2, [r7, #4]
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	b2d2      	uxtb	r2, r2
 8001c6c:	701a      	strb	r2, [r3, #0]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	0a1b      	lsrs	r3, r3, #8
 8001c72:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	701a      	strb	r2, [r3, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	607a      	str	r2, [r7, #4]
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	b2d2      	uxtb	r2, r2
 8001c90:	701a      	strb	r2, [r3, #0]
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <st_qword>:

#if FF_FS_EXFAT
static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8001c9e:	b490      	push	{r4, r7}
 8001ca0:	b084      	sub	sp, #16
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	60f8      	str	r0, [r7, #12]
 8001ca6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	1c5a      	adds	r2, r3, #1
 8001cae:	60fa      	str	r2, [r7, #12]
 8001cb0:	783a      	ldrb	r2, [r7, #0]
 8001cb2:	701a      	strb	r2, [r3, #0]
 8001cb4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001cb8:	f04f 0300 	mov.w	r3, #0
 8001cbc:	f04f 0400 	mov.w	r4, #0
 8001cc0:	0a0b      	lsrs	r3, r1, #8
 8001cc2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001cc6:	0a14      	lsrs	r4, r2, #8
 8001cc8:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	1c5a      	adds	r2, r3, #1
 8001cd0:	60fa      	str	r2, [r7, #12]
 8001cd2:	783a      	ldrb	r2, [r7, #0]
 8001cd4:	701a      	strb	r2, [r3, #0]
 8001cd6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	f04f 0400 	mov.w	r4, #0
 8001ce2:	0a0b      	lsrs	r3, r1, #8
 8001ce4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001ce8:	0a14      	lsrs	r4, r2, #8
 8001cea:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	60fa      	str	r2, [r7, #12]
 8001cf4:	783a      	ldrb	r2, [r7, #0]
 8001cf6:	701a      	strb	r2, [r3, #0]
 8001cf8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001cfc:	f04f 0300 	mov.w	r3, #0
 8001d00:	f04f 0400 	mov.w	r4, #0
 8001d04:	0a0b      	lsrs	r3, r1, #8
 8001d06:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d0a:	0a14      	lsrs	r4, r2, #8
 8001d0c:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	60fa      	str	r2, [r7, #12]
 8001d16:	783a      	ldrb	r2, [r7, #0]
 8001d18:	701a      	strb	r2, [r3, #0]
 8001d1a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	f04f 0400 	mov.w	r4, #0
 8001d26:	0a0b      	lsrs	r3, r1, #8
 8001d28:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d2c:	0a14      	lsrs	r4, r2, #8
 8001d2e:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1c5a      	adds	r2, r3, #1
 8001d36:	60fa      	str	r2, [r7, #12]
 8001d38:	783a      	ldrb	r2, [r7, #0]
 8001d3a:	701a      	strb	r2, [r3, #0]
 8001d3c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	f04f 0400 	mov.w	r4, #0
 8001d48:	0a0b      	lsrs	r3, r1, #8
 8001d4a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d4e:	0a14      	lsrs	r4, r2, #8
 8001d50:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	60fa      	str	r2, [r7, #12]
 8001d5a:	783a      	ldrb	r2, [r7, #0]
 8001d5c:	701a      	strb	r2, [r3, #0]
 8001d5e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	f04f 0400 	mov.w	r4, #0
 8001d6a:	0a0b      	lsrs	r3, r1, #8
 8001d6c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d70:	0a14      	lsrs	r4, r2, #8
 8001d72:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	60fa      	str	r2, [r7, #12]
 8001d7c:	783a      	ldrb	r2, [r7, #0]
 8001d7e:	701a      	strb	r2, [r3, #0]
 8001d80:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	f04f 0400 	mov.w	r4, #0
 8001d8c:	0a0b      	lsrs	r3, r1, #8
 8001d8e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d92:	0a14      	lsrs	r4, r2, #8
 8001d94:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	60fa      	str	r2, [r7, #12]
 8001d9e:	783a      	ldrb	r2, [r7, #0]
 8001da0:	701a      	strb	r2, [r3, #0]
}
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc90      	pop	{r4, r7}
 8001daa:	4770      	bx	lr

08001dac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	613b      	str	r3, [r7, #16]

	if (cnt != 0) {
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00d      	beq.n	8001de2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	1c53      	adds	r3, r2, #1
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	1c59      	adds	r1, r3, #1
 8001dd0:	6179      	str	r1, [r7, #20]
 8001dd2:	7812      	ldrb	r2, [r2, #0]
 8001dd4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f1      	bne.n	8001dc6 <mem_cpy+0x1a>
	}
}
 8001de2:	bf00      	nop
 8001de4:	371c      	adds	r7, #28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b087      	sub	sp, #28
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	1c5a      	adds	r2, r3, #1
 8001e02:	617a      	str	r2, [r7, #20]
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f3      	bne.n	8001dfe <mem_set+0x10>
}
 8001e16:	bf00      	nop
 8001e18:	371c      	adds	r7, #28
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 8001e22:	b480      	push	{r7}
 8001e24:	b089      	sub	sp, #36	; 0x24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	61fa      	str	r2, [r7, #28]
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	4619      	mov	r1, r3
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	1c5a      	adds	r2, r3, #1
 8001e48:	61ba      	str	r2, [r7, #24]
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	1acb      	subs	r3, r1, r3
 8001e4e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d002      	beq.n	8001e62 <mem_cmp+0x40>
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0eb      	beq.n	8001e3a <mem_cmp+0x18>

	return r;
 8001e62:	697b      	ldr	r3, [r7, #20]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3724      	adds	r7, #36	; 0x24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8001e7a:	e002      	b.n	8001e82 <chk_chr+0x12>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	607b      	str	r3, [r7, #4]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d005      	beq.n	8001e96 <chk_chr+0x26>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d1f2      	bne.n	8001e7c <chk_chr+0xc>
	return *str;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	781b      	ldrb	r3, [r3, #0]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <dbc_1st>:


/* Test if the character is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	4603      	mov	r3, r0
 8001eae:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 8001eb0:	2281      	movs	r2, #129	; 0x81
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d30f      	bcc.n	8001ed8 <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 8001eb8:	229f      	movs	r2, #159	; 0x9f
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d801      	bhi.n	8001ec4 <dbc_1st+0x1e>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e00a      	b.n	8001eda <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 8001ec4:	22e0      	movs	r2, #224	; 0xe0
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d305      	bcc.n	8001ed8 <dbc_1st+0x32>
 8001ecc:	22fc      	movs	r2, #252	; 0xfc
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d801      	bhi.n	8001ed8 <dbc_1st+0x32>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <dbc_2nd>:


/* Test if the character is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
 8001ef0:	2240      	movs	r2, #64	; 0x40
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d319      	bcc.n	8001f2c <dbc_2nd+0x46>
		if (c <= DbcTbl[5]) return 1;
 8001ef8:	227e      	movs	r2, #126	; 0x7e
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d801      	bhi.n	8001f04 <dbc_2nd+0x1e>
 8001f00:	2301      	movs	r3, #1
 8001f02:	e014      	b.n	8001f2e <dbc_2nd+0x48>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 8001f04:	2280      	movs	r2, #128	; 0x80
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d305      	bcc.n	8001f18 <dbc_2nd+0x32>
 8001f0c:	22fc      	movs	r2, #252	; 0xfc
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d801      	bhi.n	8001f18 <dbc_2nd+0x32>
 8001f14:	2301      	movs	r3, #1
 8001f16:	e00a      	b.n	8001f2e <dbc_2nd+0x48>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 8001f18:	2200      	movs	r2, #0
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d305      	bcc.n	8001f2c <dbc_2nd+0x46>
 8001f20:	2200      	movs	r2, #0
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d801      	bhi.n	8001f2c <dbc_2nd+0x46>
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e000      	b.n	8001f2e <dbc_2nd+0x48>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <tchar2uni>:

/* Get a character from TCHAR string in defined API encodeing */
static DWORD tchar2uni (	/* Returns character in UTF-16 encoding (>=0x10000 on double encoding unit, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b086      	sub	sp, #24
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
	DWORD uc;
	const TCHAR *p = *str;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	617b      	str	r3, [r7, #20]

#else		/* ANSI/OEM input */
	BYTE b;
	WCHAR wc;

	wc = (BYTE)*p++;			/* Get a byte */
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	617a      	str	r2, [r7, #20]
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	827b      	strh	r3, [r7, #18]
	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 8001f52:	8a7b      	ldrh	r3, [r7, #18]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff ffa5 	bl	8001ea6 <dbc_1st>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d015      	beq.n	8001f8e <tchar2uni+0x54>
		b = (BYTE)*p++;			/* Get 2nd byte */
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	617a      	str	r2, [r7, #20]
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	747b      	strb	r3, [r7, #17]
		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
 8001f6c:	7c7b      	ldrb	r3, [r7, #17]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff ffb9 	bl	8001ee6 <dbc_2nd>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d102      	bne.n	8001f80 <tchar2uni+0x46>
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7e:	e01d      	b.n	8001fbc <tchar2uni+0x82>
		wc = (wc << 8) + b;		/* Make a DBC */
 8001f80:	8a7b      	ldrh	r3, [r7, #18]
 8001f82:	021b      	lsls	r3, r3, #8
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	7c7b      	ldrb	r3, [r7, #17]
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	827b      	strh	r3, [r7, #18]
	}
	if (wc != 0) {
 8001f8e:	8a7b      	ldrh	r3, [r7, #18]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00d      	beq.n	8001fb0 <tchar2uni+0x76>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 8001f94:	8a7b      	ldrh	r3, [r7, #18]
 8001f96:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f004 ffc4 	bl	8006f28 <ff_oem2uni>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	827b      	strh	r3, [r7, #18]
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 8001fa4:	8a7b      	ldrh	r3, [r7, #18]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d102      	bne.n	8001fb0 <tchar2uni+0x76>
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295
 8001fae:	e005      	b.n	8001fbc <tchar2uni+0x82>
	}
	uc = wc;
 8001fb0:	8a7b      	ldrh	r3, [r7, #18]
 8001fb2:	60fb      	str	r3, [r7, #12]

#endif
	*str = p;	/* Next read pointer */
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	601a      	str	r2, [r3, #0]
	return uc;
 8001fba:	68fb      	ldr	r3, [r7, #12]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <put_utf>:
static BYTE put_utf (	/* Returns number of encoding units written (0:buffer overflow or wrong encoding) */
	DWORD chr,	/* UTF-16 encoded character (Double encoding unit char if >=0x10000) */
	TCHAR* buf,	/* Output buffer */
	UINT szb	/* Size of the buffer */
)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
	return 1;

#else						/* ANSI/OEM output */
	WCHAR wc;

	wc = ff_uni2oem(chr, CODEPAGE);
 8001fd0:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f004 ff4b 	bl	8006e70 <ff_uni2oem>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	82fb      	strh	r3, [r7, #22]
	if (wc >= 0x100) {	/* Is this a DBC? */
 8001fde:	8afb      	ldrh	r3, [r7, #22]
 8001fe0:	2bff      	cmp	r3, #255	; 0xff
 8001fe2:	d914      	bls.n	800200e <put_utf+0x4a>
		if (szb < 2) return 0;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d801      	bhi.n	8001fee <put_utf+0x2a>
 8001fea:	2300      	movs	r3, #0
 8001fec:	e01e      	b.n	800202c <put_utf+0x68>
		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
 8001fee:	8afb      	ldrh	r3, [r7, #22]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	b299      	uxth	r1, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	60ba      	str	r2, [r7, #8]
 8001ffa:	b2ca      	uxtb	r2, r1
 8001ffc:	701a      	strb	r2, [r3, #0]
		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	60ba      	str	r2, [r7, #8]
 8002004:	8afa      	ldrh	r2, [r7, #22]
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	701a      	strb	r2, [r3, #0]
		return 2;
 800200a:	2302      	movs	r3, #2
 800200c:	e00e      	b.n	800202c <put_utf+0x68>
	}
	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
 800200e:	8afb      	ldrh	r3, [r7, #22]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d002      	beq.n	800201a <put_utf+0x56>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <put_utf+0x5a>
 800201a:	2300      	movs	r3, #0
 800201c:	e006      	b.n	800202c <put_utf+0x68>
	*buf++ = (TCHAR)wc;					/* Store the character */
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	1c5a      	adds	r2, r3, #1
 8002022:	60ba      	str	r2, [r7, #8]
 8002024:	8afa      	ldrh	r2, [r7, #22]
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	701a      	strb	r2, [r3, #0]
	return 1;
 800202a:	2301      	movs	r3, #1
#endif
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty */
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	78db      	ldrb	r3, [r3, #3]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d02c      	beq.n	80020a2 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	7858      	ldrb	r0, [r3, #1]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002056:	2301      	movs	r3, #1
 8002058:	f7ff fa96 	bl	8001588 <disk_write>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d11d      	bne.n	800209e <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002070:	1ad2      	subs	r2, r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	429a      	cmp	r2, r3
 8002078:	d213      	bcs.n	80020a2 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	789b      	ldrb	r3, [r3, #2]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d10f      	bne.n	80020a2 <sync_window+0x6e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	7858      	ldrb	r0, [r3, #1]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	441a      	add	r2, r3
 8002096:	2301      	movs	r3, #1
 8002098:	f7ff fa76 	bl	8001588 <disk_write>
 800209c:	e001      	b.n	80020a2 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 800209e:	2301      	movs	r3, #1
 80020a0:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80020b6:	2300      	movs	r3, #0
 80020b8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d01b      	beq.n	80020fc <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ffb5 	bl	8002034 <sync_window>
 80020ca:	4603      	mov	r3, r0
 80020cc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d113      	bne.n	80020fc <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	7858      	ldrb	r0, [r3, #1]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 80020de:	2301      	movs	r3, #1
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	f7ff f9e7 	bl	80014b4 <disk_read>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d004      	beq.n	80020f6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 80020ec:	f04f 33ff 	mov.w	r3, #4294967295
 80020f0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
	return res;
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
	...

08002108 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff ff8f 	bl	8002034 <sync_window>
 8002116:	4603      	mov	r3, r0
 8002118:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d158      	bne.n	80021d2 <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	2b03      	cmp	r3, #3
 8002126:	d148      	bne.n	80021ba <sync_fs+0xb2>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	791b      	ldrb	r3, [r3, #4]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d144      	bne.n	80021ba <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, sizeof fs->win);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	334c      	adds	r3, #76	; 0x4c
 8002134:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002138:	2100      	movs	r1, #0
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fe57 	bl	8001dee <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	334c      	adds	r3, #76	; 0x4c
 8002144:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8002148:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fd5f 	bl	8001c10 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	334c      	adds	r3, #76	; 0x4c
 8002156:	4921      	ldr	r1, [pc, #132]	; (80021dc <sync_fs+0xd4>)
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff fd74 	bl	8001c46 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	334c      	adds	r3, #76	; 0x4c
 8002162:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8002166:	491e      	ldr	r1, [pc, #120]	; (80021e0 <sync_fs+0xd8>)
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fd6c 	bl	8001c46 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	334c      	adds	r3, #76	; 0x4c
 8002172:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	4619      	mov	r1, r3
 800217c:	4610      	mov	r0, r2
 800217e:	f7ff fd62 	bl	8001c46 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	334c      	adds	r3, #76	; 0x4c
 8002186:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	4619      	mov	r1, r3
 8002190:	4610      	mov	r0, r2
 8002192:	f7ff fd58 	bl	8001c46 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	649a      	str	r2, [r3, #72]	; 0x48
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	7858      	ldrb	r0, [r3, #1]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021ae:	2301      	movs	r3, #1
 80021b0:	f7ff f9ea 	bl	8001588 <disk_write>
			fs->fsi_flag = 0;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	785b      	ldrb	r3, [r3, #1]
 80021be:	2200      	movs	r2, #0
 80021c0:	2100      	movs	r1, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fa64 	bl	8001690 <disk_ioctl>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <sync_fs+0xca>
 80021ce:	2301      	movs	r3, #1
 80021d0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	41615252 	.word	0x41615252
 80021e0:	61417272 	.word	0x61417272

080021e4 <clst2sect>:

static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	3b02      	subs	r3, #2
 80021f2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f8:	3b02      	subs	r3, #2
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d301      	bcc.n	8002204 <clst2sect+0x20>
 8002200:	2300      	movs	r3, #0
 8002202:	e008      	b.n	8002216 <clst2sect+0x32>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	895b      	ldrh	r3, [r3, #10]
 800220c:	4619      	mov	r1, r3
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	fb03 f301 	mul.w	r3, r3, r1
 8002214:	4413      	add	r3, r2
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
	...

08002224 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b089      	sub	sp, #36	; 0x24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d904      	bls.n	8002244 <get_fat+0x20>
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d302      	bcc.n	800224a <get_fat+0x26>
		val = 1;	/* Internal error */
 8002244:	2301      	movs	r3, #1
 8002246:	61fb      	str	r3, [r7, #28]
 8002248:	e10b      	b.n	8002462 <get_fat+0x23e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800224a:	f04f 33ff 	mov.w	r3, #4294967295
 800224e:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	3b01      	subs	r3, #1
 8002256:	2b03      	cmp	r3, #3
 8002258:	f200 80f7 	bhi.w	800244a <get_fat+0x226>
 800225c:	a201      	add	r2, pc, #4	; (adr r2, 8002264 <get_fat+0x40>)
 800225e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002262:	bf00      	nop
 8002264:	08002275 	.word	0x08002275
 8002268:	080022fd 	.word	0x080022fd
 800226c:	08002333 	.word	0x08002333
 8002270:	0800236d 	.word	0x0800236d
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	085b      	lsrs	r3, r3, #1
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	4413      	add	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	0a5b      	lsrs	r3, r3, #9
 800228a:	4413      	add	r3, r2
 800228c:	4619      	mov	r1, r3
 800228e:	69b8      	ldr	r0, [r7, #24]
 8002290:	f7ff ff0c 	bl	80020ac <move_window>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	f040 80da 	bne.w	8002450 <get_fat+0x22c>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	60fa      	str	r2, [r7, #12]
 80022a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4413      	add	r3, r2
 80022aa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80022ae:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	0a5b      	lsrs	r3, r3, #9
 80022b8:	4413      	add	r3, r2
 80022ba:	4619      	mov	r1, r3
 80022bc:	69b8      	ldr	r0, [r7, #24]
 80022be:	f7ff fef5 	bl	80020ac <move_window>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f040 80c5 	bne.w	8002454 <get_fat+0x230>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4413      	add	r3, r2
 80022d4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80022d8:	021b      	lsls	r3, r3, #8
 80022da:	461a      	mov	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	4313      	orrs	r3, r2
 80022e0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <get_fat+0xce>
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	091b      	lsrs	r3, r3, #4
 80022f0:	e002      	b.n	80022f8 <get_fat+0xd4>
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f8:	61fb      	str	r3, [r7, #28]
			break;
 80022fa:	e0b2      	b.n	8002462 <get_fat+0x23e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	0a1b      	lsrs	r3, r3, #8
 8002304:	4413      	add	r3, r2
 8002306:	4619      	mov	r1, r3
 8002308:	69b8      	ldr	r0, [r7, #24]
 800230a:	f7ff fecf 	bl	80020ac <move_window>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	f040 80a1 	bne.w	8002458 <get_fat+0x234>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8002324:	4413      	add	r3, r2
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fb7a 	bl	8001a20 <ld_word>
 800232c:	4603      	mov	r3, r0
 800232e:	61fb      	str	r3, [r7, #28]
			break;
 8002330:	e097      	b.n	8002462 <get_fat+0x23e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	09db      	lsrs	r3, r3, #7
 800233a:	4413      	add	r3, r2
 800233c:	4619      	mov	r1, r3
 800233e:	69b8      	ldr	r0, [r7, #24]
 8002340:	f7ff feb4 	bl	80020ac <move_window>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	f040 8088 	bne.w	800245c <get_fat+0x238>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800235a:	4413      	add	r3, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fb77 	bl	8001a50 <ld_dword>
 8002362:	4603      	mov	r3, r0
 8002364:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002368:	61fb      	str	r3, [r7, #28]
			break;
 800236a:	e07a      	b.n	8002462 <get_fat+0x23e>
#if FF_FS_EXFAT
		case FS_EXFAT :
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8002372:	4323      	orrs	r3, r4
 8002374:	d003      	beq.n	800237e <get_fat+0x15a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d103      	bne.n	8002386 <get_fat+0x162>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	79db      	ldrb	r3, [r3, #7]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d161      	bne.n	800244a <get_fat+0x226>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8002396:	f113 31ff 	adds.w	r1, r3, #4294967295
 800239a:	f144 32ff 	adc.w	r2, r4, #4294967295
 800239e:	f04f 0300 	mov.w	r3, #0
 80023a2:	f04f 0400 	mov.w	r4, #0
 80023a6:	0a4b      	lsrs	r3, r1, #9
 80023a8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80023ac:	0a54      	lsrs	r4, r2, #9
 80023ae:	461a      	mov	r2, r3
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	895b      	ldrh	r3, [r3, #10]
 80023b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b8:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	79db      	ldrb	r3, [r3, #7]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d10e      	bne.n	80023e0 <get_fat+0x1bc>
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d80a      	bhi.n	80023e0 <get_fat+0x1bc>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d002      	beq.n	80023d8 <get_fat+0x1b4>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	3301      	adds	r3, #1
 80023d6:	e001      	b.n	80023dc <get_fat+0x1b8>
 80023d8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80023dc:	61fb      	str	r3, [r7, #28]
					break;
 80023de:	e040      	b.n	8002462 <get_fat+0x23e>
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	79db      	ldrb	r3, [r3, #7]
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d108      	bne.n	80023fa <get_fat+0x1d6>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d203      	bcs.n	80023fa <get_fat+0x1d6>
					val = clst + 1; 	/* Generate the value */
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	3301      	adds	r3, #1
 80023f6:	61fb      	str	r3, [r7, #28]
					break;
 80023f8:	e033      	b.n	8002462 <get_fat+0x23e>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	79db      	ldrb	r3, [r3, #7]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d023      	beq.n	800244a <get_fat+0x226>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <get_fat+0x1ee>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800240a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800240e:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8002410:	e027      	b.n	8002462 <get_fat+0x23e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	09db      	lsrs	r3, r3, #7
 800241a:	4413      	add	r3, r2
 800241c:	4619      	mov	r1, r3
 800241e:	69b8      	ldr	r0, [r7, #24]
 8002420:	f7ff fe44 	bl	80020ac <move_window>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d11a      	bne.n	8002460 <get_fat+0x23c>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002438:	4413      	add	r3, r2
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fb08 	bl	8001a50 <ld_dword>
 8002440:	4603      	mov	r3, r0
 8002442:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002446:	61fb      	str	r3, [r7, #28]
					break;
 8002448:	e00b      	b.n	8002462 <get_fat+0x23e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800244a:	2301      	movs	r3, #1
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	e008      	b.n	8002462 <get_fat+0x23e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002450:	bf00      	nop
 8002452:	e006      	b.n	8002462 <get_fat+0x23e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002454:	bf00      	nop
 8002456:	e004      	b.n	8002462 <get_fat+0x23e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002458:	bf00      	nop
 800245a:	e002      	b.n	8002462 <get_fat+0x23e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800245c:	bf00      	nop
 800245e:	e000      	b.n	8002462 <get_fat+0x23e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002460:	bf00      	nop
		}
	}

	return val;
 8002462:	69fb      	ldr	r3, [r7, #28]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3724      	adds	r7, #36	; 0x24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd90      	pop	{r4, r7, pc}

0800246c <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800246c:	b590      	push	{r4, r7, lr}
 800246e:	b089      	sub	sp, #36	; 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8002478:	2302      	movs	r3, #2
 800247a:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b01      	cmp	r3, #1
 8002480:	f240 80e2 	bls.w	8002648 <put_fat+0x1dc>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	429a      	cmp	r2, r3
 800248c:	f080 80dc 	bcs.w	8002648 <put_fat+0x1dc>
		switch (fs->fs_type) {
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	3b01      	subs	r3, #1
 8002496:	2b03      	cmp	r3, #3
 8002498:	f200 80d6 	bhi.w	8002648 <put_fat+0x1dc>
 800249c:	a201      	add	r2, pc, #4	; (adr r2, 80024a4 <put_fat+0x38>)
 800249e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a2:	bf00      	nop
 80024a4:	080024b5 	.word	0x080024b5
 80024a8:	08002591 	.word	0x08002591
 80024ac:	080025d1 	.word	0x080025d1
 80024b0:	080025d1 	.word	0x080025d1
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	085b      	lsrs	r3, r3, #1
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4413      	add	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	0a5b      	lsrs	r3, r3, #9
 80024ca:	4413      	add	r3, r2
 80024cc:	4619      	mov	r1, r3
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f7ff fdec 	bl	80020ac <move_window>
 80024d4:	4603      	mov	r3, r0
 80024d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80024d8:	7ffb      	ldrb	r3, [r7, #31]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f040 80ad 	bne.w	800263a <put_fat+0x1ce>
			p = fs->win + bc++ % SS(fs);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	1c59      	adds	r1, r3, #1
 80024ea:	61b9      	str	r1, [r7, #24]
 80024ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024f0:	4413      	add	r3, r2
 80024f2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00d      	beq.n	800251a <put_fat+0xae>
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	b25b      	sxtb	r3, r3
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	b25a      	sxtb	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	b25b      	sxtb	r3, r3
 8002512:	4313      	orrs	r3, r2
 8002514:	b25b      	sxtb	r3, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	e001      	b.n	800251e <put_fat+0xb2>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2201      	movs	r2, #1
 8002526:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	0a5b      	lsrs	r3, r3, #9
 8002530:	4413      	add	r3, r2
 8002532:	4619      	mov	r1, r3
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f7ff fdb9 	bl	80020ac <move_window>
 800253a:	4603      	mov	r3, r0
 800253c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800253e:	7ffb      	ldrb	r3, [r7, #31]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d17c      	bne.n	800263e <put_fat+0x1d2>
			p = fs->win + bc % SS(fs);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002550:	4413      	add	r3, r2
 8002552:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <put_fat+0xfa>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	b2db      	uxtb	r3, r3
 8002564:	e00e      	b.n	8002584 <put_fat+0x118>
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	b25b      	sxtb	r3, r3
 800256c:	f023 030f 	bic.w	r3, r3, #15
 8002570:	b25a      	sxtb	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	0a1b      	lsrs	r3, r3, #8
 8002576:	b25b      	sxtb	r3, r3
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	b25b      	sxtb	r3, r3
 800257e:	4313      	orrs	r3, r2
 8002580:	b25b      	sxtb	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2201      	movs	r2, #1
 800258c:	70da      	strb	r2, [r3, #3]
			break;
 800258e:	e05b      	b.n	8002648 <put_fat+0x1dc>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	0a1b      	lsrs	r3, r3, #8
 8002598:	4413      	add	r3, r2
 800259a:	4619      	mov	r1, r3
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f7ff fd85 	bl	80020ac <move_window>
 80025a2:	4603      	mov	r3, r0
 80025a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80025a6:	7ffb      	ldrb	r3, [r7, #31]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d14a      	bne.n	8002642 <put_fat+0x1d6>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80025ba:	4413      	add	r3, r2
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	b292      	uxth	r2, r2
 80025c0:	4611      	mov	r1, r2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fb24 	bl	8001c10 <st_word>
			fs->wflag = 1;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2201      	movs	r2, #1
 80025cc:	70da      	strb	r2, [r3, #3]
			break;
 80025ce:	e03b      	b.n	8002648 <put_fat+0x1dc>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	09db      	lsrs	r3, r3, #7
 80025d8:	4413      	add	r3, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f7ff fd65 	bl	80020ac <move_window>
 80025e2:	4603      	mov	r3, r0
 80025e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80025e6:	7ffb      	ldrb	r3, [r7, #31]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d12c      	bne.n	8002646 <put_fat+0x1da>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d012      	beq.n	800261a <put_fat+0x1ae>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002608:	4413      	add	r3, r2
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff fa20 	bl	8001a50 <ld_dword>
 8002610:	4603      	mov	r3, r0
 8002612:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002616:	4323      	orrs	r3, r4
 8002618:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8002628:	4413      	add	r3, r2
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff fb0a 	bl	8001c46 <st_dword>
			fs->wflag = 1;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	70da      	strb	r2, [r3, #3]
			break;
 8002638:	e006      	b.n	8002648 <put_fat+0x1dc>
			if (res != FR_OK) break;
 800263a:	bf00      	nop
 800263c:	e004      	b.n	8002648 <put_fat+0x1dc>
			if (res != FR_OK) break;
 800263e:	bf00      	nop
 8002640:	e002      	b.n	8002648 <put_fat+0x1dc>
			if (res != FR_OK) break;
 8002642:	bf00      	nop
 8002644:	e000      	b.n	8002648 <put_fat+0x1dc>
			if (res != FR_OK) break;
 8002646:	bf00      	nop
		}
	}
	return res;
 8002648:	7ffb      	ldrb	r3, [r7, #31]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3724      	adds	r7, #36	; 0x24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd90      	pop	{r4, r7, pc}
 8002652:	bf00      	nop

08002654 <find_bitmap>:
static DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08a      	sub	sp, #40	; 0x28
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	3b02      	subs	r3, #2
 8002664:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266a:	3b02      	subs	r3, #2
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	429a      	cmp	r2, r3
 8002670:	d301      	bcc.n	8002676 <find_bitmap+0x22>
 8002672:	2300      	movs	r3, #0
 8002674:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	61bb      	str	r3, [r7, #24]
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	0b1b      	lsrs	r3, r3, #12
 800268a:	4413      	add	r3, r2
 800268c:	4619      	mov	r1, r3
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f7ff fd0c 	bl	80020ac <move_window>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <find_bitmap+0x4c>
 800269a:	f04f 33ff 	mov.w	r3, #4294967295
 800269e:	e051      	b.n	8002744 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	08db      	lsrs	r3, r3, #3
 80026a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026a8:	623b      	str	r3, [r7, #32]
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	2201      	movs	r2, #1
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	4413      	add	r3, r2
 80026c0:	334c      	adds	r3, #76	; 0x4c
 80026c2:	781a      	ldrb	r2, [r3, #0]
 80026c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026c8:	4013      	ands	r3, r2
 80026ca:	74fb      	strb	r3, [r7, #19]
 80026cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3301      	adds	r3, #1
 80026da:	61fb      	str	r3, [r7, #28]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e0:	3b02      	subs	r3, #2
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d307      	bcc.n	80026f8 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 80026e8:	2300      	movs	r3, #0
 80026ea:	61fb      	str	r3, [r7, #28]
 80026ec:	2300      	movs	r3, #0
 80026ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80026f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026f6:	623b      	str	r3, [r7, #32]
				}
				if (bv == 0) {	/* Is it a free cluster? */
 80026f8:	7cfb      	ldrb	r3, [r7, #19]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d109      	bne.n	8002712 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	3301      	adds	r3, #1
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	429a      	cmp	r2, r3
 800270a:	d106      	bne.n	800271a <find_bitmap+0xc6>
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	3302      	adds	r3, #2
 8002710:	e018      	b.n	8002744 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	2300      	movs	r3, #0
 8002718:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	429a      	cmp	r2, r3
 8002720:	d101      	bne.n	8002726 <find_bitmap+0xd2>
 8002722:	2300      	movs	r3, #0
 8002724:	e00e      	b.n	8002744 <find_bitmap+0xf0>
			} while (bm != 0);
 8002726:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1c5      	bne.n	80026ba <find_bitmap+0x66>
			bm = 1;
 800272e:	2301      	movs	r3, #1
 8002730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	3301      	adds	r3, #1
 8002738:	623b      	str	r3, [r7, #32]
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002740:	d3bb      	bcc.n	80026ba <find_bitmap+0x66>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 8002742:	e79e      	b.n	8002682 <find_bitmap+0x2e>
	}
}
 8002744:	4618      	mov	r0, r3
 8002746:	3728      	adds	r7, #40	; 0x28
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <change_bitmap>:
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
 8002758:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;


	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	3b02      	subs	r3, #2
 800275e:	60bb      	str	r3, [r7, #8]
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	0b1b      	lsrs	r3, r3, #12
 8002768:	4413      	add	r3, r2
 800276a:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	08db      	lsrs	r3, r3, #3
 8002770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002774:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	2201      	movs	r2, #1
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	617a      	str	r2, [r7, #20]
 800278a:	4619      	mov	r1, r3
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f7ff fc8d 	bl	80020ac <move_window>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <change_bitmap+0x50>
 8002798:	2301      	movs	r3, #1
 800279a:	e03d      	b.n	8002818 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	4413      	add	r3, r2
 80027a2:	334c      	adds	r3, #76	; 0x4c
 80027a4:	781a      	ldrb	r2, [r3, #0]
 80027a6:	7ffb      	ldrb	r3, [r7, #31]
 80027a8:	4013      	ands	r3, r2
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	bf14      	ite	ne
 80027b0:	2301      	movne	r3, #1
 80027b2:	2300      	moveq	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	461a      	mov	r2, r3
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d101      	bne.n	80027c2 <change_bitmap+0x76>
 80027be:	2302      	movs	r3, #2
 80027c0:	e02a      	b.n	8002818 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	4413      	add	r3, r2
 80027c8:	334c      	adds	r3, #76	; 0x4c
 80027ca:	781a      	ldrb	r2, [r3, #0]
 80027cc:	7ffb      	ldrb	r3, [r7, #31]
 80027ce:	4053      	eors	r3, r2
 80027d0:	b2d9      	uxtb	r1, r3
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	4413      	add	r3, r2
 80027d8:	334c      	adds	r3, #76	; 0x4c
 80027da:	460a      	mov	r2, r1
 80027dc:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2201      	movs	r2, #1
 80027e2:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	607b      	str	r3, [r7, #4]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <change_bitmap+0xa8>
 80027f0:	2300      	movs	r3, #0
 80027f2:	e011      	b.n	8002818 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 80027f4:	7ffb      	ldrb	r3, [r7, #31]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	77fb      	strb	r3, [r7, #31]
 80027fa:	7ffb      	ldrb	r3, [r7, #31]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1cd      	bne.n	800279c <change_bitmap+0x50>
			bm = 1;
 8002800:	2301      	movs	r3, #1
 8002802:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	3301      	adds	r3, #1
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002810:	d3c4      	bcc.n	800279c <change_bitmap+0x50>
		i = 0;
 8002812:	2300      	movs	r3, #0
 8002814:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8002816:	e7b5      	b.n	8002784 <change_bitmap+0x38>
	}
}
 8002818:	4618      	mov	r0, r3
 800281a:	3720      	adds	r7, #32
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <fill_first_frag>:
/*---------------------------------------------*/

static FRESULT fill_first_frag (
	FFOBJID* obj	/* Pointer to the corresponding object */
)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;


	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	79db      	ldrb	r3, [r3, #7]
 800282c:	2b03      	cmp	r3, #3
 800282e:	d121      	bne.n	8002874 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	e014      	b.n	8002868 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	3301      	adds	r3, #1
 8002846:	461a      	mov	r2, r3
 8002848:	6979      	ldr	r1, [r7, #20]
 800284a:	f7ff fe0f 	bl	800246c <put_fat>
 800284e:	4603      	mov	r3, r0
 8002850:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <fill_first_frag+0x3c>
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	e00c      	b.n	8002876 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	3301      	adds	r3, #1
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	3b01      	subs	r3, #1
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1e7      	bne.n	800283e <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <fill_last_frag>:
static FRESULT fill_last_frag (
	FFOBJID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,		/* Last cluster of the fragment */
	DWORD term		/* Value to set the last FAT entry */
)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b086      	sub	sp, #24
 8002882:	af00      	add	r7, sp, #0
 8002884:	60f8      	str	r0, [r7, #12]
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
	FRESULT res;


	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 800288a:	e020      	b.n	80028ce <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6818      	ldr	r0, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	1c59      	adds	r1, r3, #1
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d905      	bls.n	80028ae <fill_last_frag+0x30>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	3302      	adds	r3, #2
 80028ac:	e000      	b.n	80028b0 <fill_last_frag+0x32>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	461a      	mov	r2, r3
 80028b2:	f7ff fddb 	bl	800246c <put_fat>
 80028b6:	4603      	mov	r3, r0
 80028b8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80028ba:	7dfb      	ldrb	r3, [r7, #23]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <fill_last_frag+0x46>
 80028c0:	7dfb      	ldrb	r3, [r7, #23]
 80028c2:	e009      	b.n	80028d8 <fill_last_frag+0x5a>
		obj->n_frag--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	1e5a      	subs	r2, r3, #1
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1da      	bne.n	800288c <fill_last_frag+0xe>
	}
	return FR_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08a      	sub	sp, #40	; 0x28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	61bb      	str	r3, [r7, #24]
#if FF_FS_EXFAT || FF_USE_TRIM
	DWORD scl = clst, ecl = clst;
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	623b      	str	r3, [r7, #32]
#endif
#if FF_USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d904      	bls.n	800290e <remove_chain+0x2e>
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	429a      	cmp	r2, r3
 800290c:	d301      	bcc.n	8002912 <remove_chain+0x32>
 800290e:	2302      	movs	r3, #2
 8002910:	e0c4      	b.n	8002a9c <remove_chain+0x1bc>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d014      	beq.n	8002942 <remove_chain+0x62>
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b04      	cmp	r3, #4
 800291e:	d103      	bne.n	8002928 <remove_chain+0x48>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	79db      	ldrb	r3, [r3, #7]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d00c      	beq.n	8002942 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8002928:	f04f 32ff 	mov.w	r2, #4294967295
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	69b8      	ldr	r0, [r7, #24]
 8002930:	f7ff fd9c 	bl	800246c <put_fat>
 8002934:	4603      	mov	r3, r0
 8002936:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8002938:	7ffb      	ldrb	r3, [r7, #31]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <remove_chain+0x62>
 800293e:	7ffb      	ldrb	r3, [r7, #31]
 8002940:	e0ac      	b.n	8002a9c <remove_chain+0x1bc>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8002942:	68b9      	ldr	r1, [r7, #8]
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f7ff fc6d 	bl	8002224 <get_fat>
 800294a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d055      	beq.n	80029fe <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d101      	bne.n	800295c <remove_chain+0x7c>
 8002958:	2302      	movs	r3, #2
 800295a:	e09f      	b.n	8002a9c <remove_chain+0x1bc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002962:	d101      	bne.n	8002968 <remove_chain+0x88>
 8002964:	2301      	movs	r3, #1
 8002966:	e099      	b.n	8002a9c <remove_chain+0x1bc>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b04      	cmp	r3, #4
 800296e:	d00b      	beq.n	8002988 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8002970:	2200      	movs	r2, #0
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	69b8      	ldr	r0, [r7, #24]
 8002976:	f7ff fd79 	bl	800246c <put_fat>
 800297a:	4603      	mov	r3, r0
 800297c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800297e:	7ffb      	ldrb	r3, [r7, #31]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <remove_chain+0xa8>
 8002984:	7ffb      	ldrb	r3, [r7, #31]
 8002986:	e089      	b.n	8002a9c <remove_chain+0x1bc>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	699a      	ldr	r2, [r3, #24]
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	3b02      	subs	r3, #2
 8002992:	429a      	cmp	r2, r3
 8002994:	d20b      	bcs.n	80029ae <remove_chain+0xce>
			fs->free_clst++;
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	791b      	ldrb	r3, [r3, #4]
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	711a      	strb	r2, [r3, #4]
		}
#if FF_FS_EXFAT || FF_USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	3301      	adds	r3, #1
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d102      	bne.n	80029be <remove_chain+0xde>
			ecl = nxt;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	623b      	str	r3, [r7, #32]
 80029bc:	e017      	b.n	80029ee <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d10f      	bne.n	80029e6 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 80029c6:	6a3a      	ldr	r2, [r7, #32]
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	1c5a      	adds	r2, r3, #1
 80029ce:	2300      	movs	r3, #0
 80029d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029d2:	69b8      	ldr	r0, [r7, #24]
 80029d4:	f7ff feba 	bl	800274c <change_bitmap>
 80029d8:	4603      	mov	r3, r0
 80029da:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 80029dc:	7ffb      	ldrb	r3, [r7, #31]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <remove_chain+0x106>
 80029e2:	7ffb      	ldrb	r3, [r7, #31]
 80029e4:	e05a      	b.n	8002a9c <remove_chain+0x1bc>
#if FF_USE_TRIM
			rt[0] = clst2sect(fs, scl);					/* Start of data area freed */
			rt[1] = clst2sect(fs, ecl) + fs->csize - 1;	/* End of data area freed */
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform device the data in the block is no longer needed */
#endif
			scl = ecl = nxt;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	623b      	str	r3, [r7, #32]
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d3a2      	bcc.n	8002942 <remove_chain+0x62>
 80029fc:	e000      	b.n	8002a00 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 80029fe:	bf00      	nop

#if FF_FS_EXFAT
	/* Some post processes for chain status */
	if (fs->fs_type == FS_EXFAT) {
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d148      	bne.n	8002a9a <remove_chain+0x1ba>
		if (pclst == 0) {	/* Has the entire chain been removed? */
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d103      	bne.n	8002a16 <remove_chain+0x136>
			obj->stat = 0;		/* Change the chain status 'initial' */
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	71da      	strb	r2, [r3, #7]
 8002a14:	e041      	b.n	8002a9a <remove_chain+0x1ba>
		} else {
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	79db      	ldrb	r3, [r3, #7]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d129      	bne.n	8002a72 <remove_chain+0x192>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 8002a24:	e017      	b.n	8002a56 <remove_chain+0x176>
					nxt = get_fat(obj, clst);
 8002a26:	68b9      	ldr	r1, [r7, #8]
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f7ff fbfb 	bl	8002224 <get_fat>
 8002a2e:	6178      	str	r0, [r7, #20]
					if (nxt < 2) return FR_INT_ERR;
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d801      	bhi.n	8002a3a <remove_chain+0x15a>
 8002a36:	2302      	movs	r3, #2
 8002a38:	e030      	b.n	8002a9c <remove_chain+0x1bc>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a40:	d101      	bne.n	8002a46 <remove_chain+0x166>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e02a      	b.n	8002a9c <remove_chain+0x1bc>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d107      	bne.n	8002a60 <remove_chain+0x180>
					clst++;
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	3301      	adds	r3, #1
 8002a54:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d1e3      	bne.n	8002a26 <remove_chain+0x146>
 8002a5e:	e000      	b.n	8002a62 <remove_chain+0x182>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 8002a60:	bf00      	nop
				}
				if (clst == pclst) {	/* Has the chain got contiguous again? */
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d117      	bne.n	8002a9a <remove_chain+0x1ba>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	71da      	strb	r2, [r3, #7]
 8002a70:	e013      	b.n	8002a9a <remove_chain+0x1ba>
				}
			} else {
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	79db      	ldrb	r3, [r3, #7]
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d10f      	bne.n	8002a9a <remove_chain+0x1ba>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d30a      	bcc.n	8002a9a <remove_chain+0x1ba>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d802      	bhi.n	8002a9a <remove_chain+0x1ba>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2202      	movs	r2, #2
 8002a98:	71da      	strb	r2, [r3, #7]
				}
			}
		}
	}
#endif
	return FR_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3728      	adds	r7, #40	; 0x28
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10d      	bne.n	8002ad6 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d004      	beq.n	8002ad0 <create_chain+0x2c>
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d31b      	bcc.n	8002b08 <create_chain+0x64>
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	61bb      	str	r3, [r7, #24]
 8002ad4:	e018      	b.n	8002b08 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002ad6:	6839      	ldr	r1, [r7, #0]
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff fba3 	bl	8002224 <get_fat>
 8002ade:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d801      	bhi.n	8002aea <create_chain+0x46>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e113      	b.n	8002d12 <create_chain+0x26e>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af0:	d101      	bne.n	8002af6 <create_chain+0x52>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	e10d      	b.n	8002d12 <create_chain+0x26e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d201      	bcs.n	8002b04 <create_chain+0x60>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	e106      	b.n	8002d12 <create_chain+0x26e>
		scl = clst;							/* Cluster to start to find */
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <create_chain+0x70>
 8002b10:	2300      	movs	r3, #0
 8002b12:	e0fe      	b.n	8002d12 <create_chain+0x26e>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d165      	bne.n	8002be8 <create_chain+0x144>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	69b9      	ldr	r1, [r7, #24]
 8002b20:	6938      	ldr	r0, [r7, #16]
 8002b22:	f7ff fd97 	bl	8002654 <find_bitmap>
 8002b26:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <create_chain+0x92>
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b34:	d101      	bne.n	8002b3a <create_chain+0x96>
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	e0eb      	b.n	8002d12 <create_chain+0x26e>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	69f9      	ldr	r1, [r7, #28]
 8002b40:	6938      	ldr	r0, [r7, #16]
 8002b42:	f7ff fe03 	bl	800274c <change_bitmap>
 8002b46:	4603      	mov	r3, r0
 8002b48:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8002b4a:	7dfb      	ldrb	r3, [r7, #23]
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d101      	bne.n	8002b54 <create_chain+0xb0>
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0de      	b.n	8002d12 <create_chain+0x26e>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8002b54:	7dfb      	ldrb	r3, [r7, #23]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d102      	bne.n	8002b60 <create_chain+0xbc>
 8002b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5e:	e0d8      	b.n	8002d12 <create_chain+0x26e>
		if (clst == 0) {							/* Is it a new chain? */
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d103      	bne.n	8002b6e <create_chain+0xca>
			obj->stat = 2;							/* Set status 'contiguous' */
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2202      	movs	r2, #2
 8002b6a:	71da      	strb	r2, [r3, #7]
 8002b6c:	e011      	b.n	8002b92 <create_chain+0xee>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	79db      	ldrb	r3, [r3, #7]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d10d      	bne.n	8002b92 <create_chain+0xee>
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	69fa      	ldr	r2, [r7, #28]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d008      	beq.n	8002b92 <create_chain+0xee>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	1ad2      	subs	r2, r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2203      	movs	r2, #3
 8002b90:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	79db      	ldrb	r3, [r3, #7]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	f000 8098 	beq.w	8002ccc <create_chain+0x228>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d10b      	bne.n	8002bbe <create_chain+0x11a>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <create_chain+0x112>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <create_chain+0x114>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	61d3      	str	r3, [r2, #28]
 8002bbc:	e086      	b.n	8002ccc <create_chain+0x228>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d102      	bne.n	8002bcc <create_chain+0x128>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8002bcc:	69fa      	ldr	r2, [r7, #28]
 8002bce:	6839      	ldr	r1, [r7, #0]
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff fe54 	bl	800287e <fill_last_frag>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8002bda:	7dfb      	ldrb	r3, [r7, #23]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d175      	bne.n	8002ccc <create_chain+0x228>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	61da      	str	r2, [r3, #28]
 8002be6:	e071      	b.n	8002ccc <create_chain+0x228>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d129      	bne.n	8002c48 <create_chain+0x1a4>
			ncl = scl + 1;						/* Test if next cluster is free */
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfe:	69fa      	ldr	r2, [r7, #28]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d301      	bcc.n	8002c08 <create_chain+0x164>
 8002c04:	2302      	movs	r3, #2
 8002c06:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8002c08:	69f9      	ldr	r1, [r7, #28]
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff fb0a 	bl	8002224 <get_fat>
 8002c10:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d003      	beq.n	8002c20 <create_chain+0x17c>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c1e:	d101      	bne.n	8002c24 <create_chain+0x180>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	e076      	b.n	8002d12 <create_chain+0x26e>
			if (cs != 0) {						/* Not free? */
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00e      	beq.n	8002c48 <create_chain+0x1a4>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d906      	bls.n	8002c44 <create_chain+0x1a0>
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d201      	bcs.n	8002c44 <create_chain+0x1a0>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d129      	bne.n	8002ca2 <create_chain+0x1fe>
			ncl = scl;	/* Start cluster */
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	3301      	adds	r3, #1
 8002c56:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	69fa      	ldr	r2, [r7, #28]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d307      	bcc.n	8002c72 <create_chain+0x1ce>
					ncl = 2;
 8002c62:	2302      	movs	r3, #2
 8002c64:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 8002c66:	69fa      	ldr	r2, [r7, #28]
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d901      	bls.n	8002c72 <create_chain+0x1ce>
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e04f      	b.n	8002d12 <create_chain+0x26e>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 8002c72:	69f9      	ldr	r1, [r7, #28]
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff fad5 	bl	8002224 <get_fat>
 8002c7a:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00e      	beq.n	8002ca0 <create_chain+0x1fc>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d003      	beq.n	8002c90 <create_chain+0x1ec>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8e:	d101      	bne.n	8002c94 <create_chain+0x1f0>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	e03e      	b.n	8002d12 <create_chain+0x26e>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8002c94:	69fa      	ldr	r2, [r7, #28]
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d1da      	bne.n	8002c52 <create_chain+0x1ae>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	e038      	b.n	8002d12 <create_chain+0x26e>
				if (cs == 0) break;				/* Found a free cluster? */
 8002ca0:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 8002ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca6:	69f9      	ldr	r1, [r7, #28]
 8002ca8:	6938      	ldr	r0, [r7, #16]
 8002caa:	f7ff fbdf 	bl	800246c <put_fat>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8002cb2:	7dfb      	ldrb	r3, [r7, #23]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d109      	bne.n	8002ccc <create_chain+0x228>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d006      	beq.n	8002ccc <create_chain+0x228>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 8002cbe:	69fa      	ldr	r2, [r7, #28]
 8002cc0:	6839      	ldr	r1, [r7, #0]
 8002cc2:	6938      	ldr	r0, [r7, #16]
 8002cc4:	f7ff fbd2 	bl	800246c <put_fat>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8002ccc:	7dfb      	ldrb	r3, [r7, #23]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d116      	bne.n	8002d00 <create_chain+0x25c>
		fs->last_clst = ncl;
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	69fa      	ldr	r2, [r7, #28]
 8002cd6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	699a      	ldr	r2, [r3, #24]
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	3b02      	subs	r3, #2
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d804      	bhi.n	8002cf0 <create_chain+0x24c>
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	1e5a      	subs	r2, r3, #1
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	791b      	ldrb	r3, [r3, #4]
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	711a      	strb	r2, [r3, #4]
 8002cfe:	e007      	b.n	8002d10 <create_chain+0x26c>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8002d00:	7dfb      	ldrb	r3, [r7, #23]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d102      	bne.n	8002d0c <create_chain+0x268>
 8002d06:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0a:	e000      	b.n	8002d0e <create_chain+0x26a>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8002d10:	69fb      	ldr	r3, [r7, #28]
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3720      	adds	r7, #32
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b086      	sub	sp, #24
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	6039      	str	r1, [r7, #0]
	DWORD sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff f985 	bl	8002034 <sync_window>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <dir_clear+0x1a>
 8002d30:	2301      	movs	r3, #1
 8002d32:	e07d      	b.n	8002e30 <dir_clear+0x116>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8002d34:	6839      	ldr	r1, [r7, #0]
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7ff fa54 	bl	80021e4 <clst2sect>
 8002d3c:	60b8      	str	r0, [r7, #8]
	fs->winsect = sect;				/* Set window to top of the cluster */
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	649a      	str	r2, [r3, #72]	; 0x48
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	334c      	adds	r3, #76	; 0x4c
 8002d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff f84d 	bl	8001dee <mem_set>
#if FF_USE_LFN == 3		/* Quick table clear by using multi-secter write */
	/* Allocate a temporary buffer */
	for (szb = ((DWORD)fs->csize * SS(fs) >= MAX_MALLOC) ? MAX_MALLOC : fs->csize * SS(fs), ibuf = 0; szb > SS(fs) && (ibuf = ff_memalloc(szb)) == 0; szb /= 2) ;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	895b      	ldrh	r3, [r3, #10]
 8002d58:	025b      	lsls	r3, r3, #9
 8002d5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d5e:	d203      	bcs.n	8002d68 <dir_clear+0x4e>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	895b      	ldrh	r3, [r3, #10]
 8002d64:	025b      	lsls	r3, r3, #9
 8002d66:	e001      	b.n	8002d6c <dir_clear+0x52>
 8002d68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	e002      	b.n	8002d7a <dir_clear+0x60>
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	085b      	lsrs	r3, r3, #1
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d80:	d906      	bls.n	8002d90 <dir_clear+0x76>
 8002d82:	6938      	ldr	r0, [r7, #16]
 8002d84:	f004 f85c 	bl	8006e40 <ff_memalloc>
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0f1      	beq.n	8002d74 <dir_clear+0x5a>
	if (szb > SS(fs)) {		/* Buffer allocated? */
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d96:	d924      	bls.n	8002de2 <dir_clear+0xc8>
		mem_set(ibuf, 0, szb);
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f7ff f826 	bl	8001dee <mem_set>
		szb /= SS(fs);		/* Bytes -> Sectors */
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	0a5b      	lsrs	r3, r3, #9
 8002da6:	613b      	str	r3, [r7, #16]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	e003      	b.n	8002db6 <dir_clear+0x9c>
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4413      	add	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	895b      	ldrh	r3, [r3, #10]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d20b      	bcs.n	8002dda <dir_clear+0xc0>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	7858      	ldrb	r0, [r3, #1]
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	441a      	add	r2, r3
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	68f9      	ldr	r1, [r7, #12]
 8002dd0:	f7fe fbda 	bl	8001588 <disk_write>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0e9      	beq.n	8002dae <dir_clear+0x94>
		ff_memfree(ibuf);
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f004 f83c 	bl	8006e58 <ff_memfree>
 8002de0:	e01d      	b.n	8002e1e <dir_clear+0x104>
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	334c      	adds	r3, #76	; 0x4c
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	2301      	movs	r3, #1
 8002dea:	613b      	str	r3, [r7, #16]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	e003      	b.n	8002dfa <dir_clear+0xe0>
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4413      	add	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	895b      	ldrh	r3, [r3, #10]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d20b      	bcs.n	8002e1e <dir_clear+0x104>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	7858      	ldrb	r0, [r3, #1]
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	441a      	add	r2, r3
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	68f9      	ldr	r1, [r7, #12]
 8002e14:	f7fe fbb8 	bl	8001588 <disk_write>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0e9      	beq.n	8002df2 <dir_clear+0xd8>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	895b      	ldrh	r3, [r3, #10]
 8002e22:	461a      	mov	r2, r3
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	4293      	cmp	r3, r2
 8002e28:	bf14      	ite	ne
 8002e2a:	2301      	movne	r3, #1
 8002e2c:	2300      	moveq	r3, #0
 8002e2e:	b2db      	uxtb	r3, r3
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d102      	bne.n	8002e56 <dir_sdi+0x1e>
 8002e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e54:	e001      	b.n	8002e5a <dir_sdi+0x22>
 8002e56:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d904      	bls.n	8002e6a <dir_sdi+0x32>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	f003 031f 	and.w	r3, r3, #31
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <dir_sdi+0x36>
		return FR_INT_ERR;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e066      	b.n	8002f3c <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d109      	bne.n	8002e94 <dir_sdi+0x5c>
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d905      	bls.n	8002e94 <dir_sdi+0x5c>
		clst = fs->dirbase;
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8c:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10c      	bne.n	8002eb4 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	095b      	lsrs	r3, r3, #5
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	8912      	ldrh	r2, [r2, #8]
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d301      	bcc.n	8002eaa <dir_sdi+0x72>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e048      	b.n	8002f3c <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	639a      	str	r2, [r3, #56]	; 0x38
 8002eb2:	e029      	b.n	8002f08 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	895b      	ldrh	r3, [r3, #10]
 8002eb8:	025b      	lsls	r3, r3, #9
 8002eba:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8002ebc:	e019      	b.n	8002ef2 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6979      	ldr	r1, [r7, #20]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff f9ae 	bl	8002224 <get_fat>
 8002ec8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed0:	d101      	bne.n	8002ed6 <dir_sdi+0x9e>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e032      	b.n	8002f3c <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d904      	bls.n	8002ee6 <dir_sdi+0xae>
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d301      	bcc.n	8002eea <dir_sdi+0xb2>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e028      	b.n	8002f3c <dir_sdi+0x104>
			ofs -= csz;
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d2e1      	bcs.n	8002ebe <dir_sdi+0x86>
		}
		dp->sect = clst2sect(fs, clst);
 8002efa:	6979      	ldr	r1, [r7, #20]
 8002efc:	6938      	ldr	r0, [r7, #16]
 8002efe:	f7ff f971 	bl	80021e4 <clst2sect>
 8002f02:	4602      	mov	r2, r0
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	635a      	str	r2, [r3, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <dir_sdi+0xe2>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e010      	b.n	8002f3c <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	0a5b      	lsrs	r3, r3, #9
 8002f22:	441a      	add	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f34:	441a      	add	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	3320      	adds	r3, #32
 8002f5a:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d102      	bne.n	8002f6a <dir_next+0x26>
 8002f64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f68:	e001      	b.n	8002f6e <dir_next+0x2a>
 8002f6a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d802      	bhi.n	8002f7a <dir_next+0x36>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	639a      	str	r2, [r3, #56]	; 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <dir_next+0x42>
 8002f82:	2304      	movs	r3, #4
 8002f84:	e07f      	b.n	8003086 <dir_next+0x142>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d16d      	bne.n	800306c <dir_next+0x128>
		dp->sect++;				/* Next sector */
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	639a      	str	r2, [r3, #56]	; 0x38

		if (dp->clust == 0) {	/* Static table */
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10a      	bne.n	8002fb8 <dir_next+0x74>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	095b      	lsrs	r3, r3, #5
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	8912      	ldrh	r2, [r2, #8]
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d35e      	bcc.n	800306c <dir_next+0x128>
				dp->sect = 0; return FR_NO_FILE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	639a      	str	r2, [r3, #56]	; 0x38
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	e066      	b.n	8003086 <dir_next+0x142>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	0a5b      	lsrs	r3, r3, #9
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	8952      	ldrh	r2, [r2, #10]
 8002fc0:	3a01      	subs	r2, #1
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d151      	bne.n	800306c <dir_next+0x128>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	f7ff f927 	bl	8002224 <get_fat>
 8002fd6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d801      	bhi.n	8002fe2 <dir_next+0x9e>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e051      	b.n	8003086 <dir_next+0x142>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe8:	d101      	bne.n	8002fee <dir_next+0xaa>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e04b      	b.n	8003086 <dir_next+0x142>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d32f      	bcc.n	8003058 <dir_next+0x114>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d104      	bne.n	8003008 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	639a      	str	r2, [r3, #56]	; 0x38
 8003004:	2304      	movs	r3, #4
 8003006:	e03e      	b.n	8003086 <dir_next+0x142>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300e:	4619      	mov	r1, r3
 8003010:	4610      	mov	r0, r2
 8003012:	f7ff fd47 	bl	8002aa4 <create_chain>
 8003016:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <dir_next+0xde>
 800301e:	2307      	movs	r3, #7
 8003020:	e031      	b.n	8003086 <dir_next+0x142>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <dir_next+0xe8>
 8003028:	2302      	movs	r3, #2
 800302a:	e02c      	b.n	8003086 <dir_next+0x142>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003032:	d101      	bne.n	8003038 <dir_next+0xf4>
 8003034:	2301      	movs	r3, #1
 8003036:	e026      	b.n	8003086 <dir_next+0x142>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8003038:	6979      	ldr	r1, [r7, #20]
 800303a:	6938      	ldr	r0, [r7, #16]
 800303c:	f7ff fe6d 	bl	8002d1a <dir_clear>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <dir_next+0x106>
 8003046:	2301      	movs	r3, #1
 8003048:	e01d      	b.n	8003086 <dir_next+0x142>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	79db      	ldrb	r3, [r3, #7]
 800304e:	f043 0304 	orr.w	r3, r3, #4
 8003052:	b2da      	uxtb	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	71da      	strb	r2, [r3, #7]
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clst2sect(fs, clst);
 800305e:	6979      	ldr	r1, [r7, #20]
 8003060:	6938      	ldr	r0, [r7, #16]
 8003062:	f7ff f8bf 	bl	80021e4 <clst2sect>
 8003066:	4602      	mov	r2, r0
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800307e:	441a      	add	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT nent				/* Number of contiguous entries to allocate */
)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b086      	sub	sp, #24
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
 8003096:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800309e:	2100      	movs	r1, #0
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff fec9 	bl	8002e38 <dir_sdi>
 80030a6:	4603      	mov	r3, r0
 80030a8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d140      	bne.n	8003132 <dir_alloc+0xa4>
		n = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b8:	4619      	mov	r1, r3
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f7fe fff6 	bl	80020ac <move_window>
 80030c0:	4603      	mov	r3, r0
 80030c2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80030c4:	7dfb      	ldrb	r3, [r7, #23]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d132      	bne.n	8003130 <dir_alloc+0xa2>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d108      	bne.n	80030e4 <dir_alloc+0x56>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	b25b      	sxtb	r3, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	09db      	lsrs	r3, r3, #7
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	e00f      	b.n	8003104 <dir_alloc+0x76>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2be5      	cmp	r3, #229	; 0xe5
 80030ec:	d004      	beq.n	80030f8 <dir_alloc+0x6a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <dir_alloc+0x6e>
 80030f8:	2301      	movs	r3, #1
 80030fa:	e000      	b.n	80030fe <dir_alloc+0x70>
 80030fc:	2300      	movs	r3, #0
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d007      	beq.n	8003118 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	3301      	adds	r3, #1
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	429a      	cmp	r2, r3
 8003114:	d102      	bne.n	800311c <dir_alloc+0x8e>
 8003116:	e00c      	b.n	8003132 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8003118:	2300      	movs	r3, #0
 800311a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800311c:	2101      	movs	r1, #1
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7ff ff10 	bl	8002f44 <dir_next>
 8003124:	4603      	mov	r3, r0
 8003126:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8003128:	7dfb      	ldrb	r3, [r7, #23]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0c2      	beq.n	80030b4 <dir_alloc+0x26>
 800312e:	e000      	b.n	8003132 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8003130:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8003132:	7dfb      	ldrb	r3, [r7, #23]
 8003134:	2b04      	cmp	r3, #4
 8003136:	d101      	bne.n	800313c <dir_alloc+0xae>
 8003138:	2307      	movs	r3, #7
 800313a:	75fb      	strb	r3, [r7, #23]
	return res;
 800313c:	7dfb      	ldrb	r3, [r7, #23]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	331a      	adds	r3, #26
 8003154:	4618      	mov	r0, r3
 8003156:	f7fe fc63 	bl	8001a20 <ld_word>
 800315a:	4603      	mov	r3, r0
 800315c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b03      	cmp	r3, #3
 8003164:	d109      	bne.n	800317a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	3314      	adds	r3, #20
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe fc58 	bl	8001a20 <ld_word>
 8003170:	4603      	mov	r3, r0
 8003172:	041b      	lsls	r3, r3, #16
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800317a:	68fb      	ldr	r3, [r7, #12]
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	331a      	adds	r3, #26
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	b292      	uxth	r2, r2
 8003198:	4611      	mov	r1, r2
 800319a:	4618      	mov	r0, r3
 800319c:	f7fe fd38 	bl	8001c10 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	d109      	bne.n	80031bc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f103 0214 	add.w	r2, r3, #20
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	0c1b      	lsrs	r3, r3, #16
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	4619      	mov	r1, r3
 80031b6:	4610      	mov	r0, r2
 80031b8:	f7fe fd2a 	bl	8001c10 <st_word>
	}
}
 80031bc:	bf00      	nop
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <cmp_lfn>:

static int cmp_lfn (		/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80031c4:	b590      	push	{r4, r7, lr}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	331a      	adds	r3, #26
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fe fc24 	bl	8001a20 <ld_word>
 80031d8:	4603      	mov	r3, r0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d001      	beq.n	80031e2 <cmp_lfn+0x1e>
 80031de:	2300      	movs	r3, #0
 80031e0:	e058      	b.n	8003294 <cmp_lfn+0xd0>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031ea:	1e5a      	subs	r2, r3, #1
 80031ec:	4613      	mov	r3, r2
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80031f8:	2301      	movs	r3, #1
 80031fa:	81fb      	strh	r3, [r7, #14]
 80031fc:	2300      	movs	r3, #0
 80031fe:	613b      	str	r3, [r7, #16]
 8003200:	e032      	b.n	8003268 <cmp_lfn+0xa4>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8003202:	4a26      	ldr	r2, [pc, #152]	; (800329c <cmp_lfn+0xd8>)
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4413      	add	r3, r2
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	4413      	add	r3, r2
 8003210:	4618      	mov	r0, r3
 8003212:	f7fe fc05 	bl	8001a20 <ld_word>
 8003216:	4603      	mov	r3, r0
 8003218:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 800321a:	89fb      	ldrh	r3, [r7, #14]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d019      	beq.n	8003254 <cmp_lfn+0x90>
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2bfe      	cmp	r3, #254	; 0xfe
 8003224:	d811      	bhi.n	800324a <cmp_lfn+0x86>
 8003226:	89bb      	ldrh	r3, [r7, #12]
 8003228:	4618      	mov	r0, r3
 800322a:	f003 fed5 	bl	8006fd8 <ff_wtoupper>
 800322e:	4604      	mov	r4, r0
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	617a      	str	r2, [r7, #20]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	4413      	add	r3, r2
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f003 feca 	bl	8006fd8 <ff_wtoupper>
 8003244:	4603      	mov	r3, r0
 8003246:	429c      	cmp	r4, r3
 8003248:	d001      	beq.n	800324e <cmp_lfn+0x8a>
				return 0;					/* Not matched */
 800324a:	2300      	movs	r3, #0
 800324c:	e022      	b.n	8003294 <cmp_lfn+0xd0>
			}
			wc = uc;
 800324e:	89bb      	ldrh	r3, [r7, #12]
 8003250:	81fb      	strh	r3, [r7, #14]
 8003252:	e006      	b.n	8003262 <cmp_lfn+0x9e>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8003254:	89bb      	ldrh	r3, [r7, #12]
 8003256:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800325a:	4293      	cmp	r3, r2
 800325c:	d001      	beq.n	8003262 <cmp_lfn+0x9e>
 800325e:	2300      	movs	r3, #0
 8003260:	e018      	b.n	8003294 <cmp_lfn+0xd0>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	3301      	adds	r3, #1
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	2b0c      	cmp	r3, #12
 800326c:	d9c9      	bls.n	8003202 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <cmp_lfn+0xce>
 800327a:	89fb      	ldrh	r3, [r7, #14]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <cmp_lfn+0xce>
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	4413      	add	r3, r2
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <cmp_lfn+0xce>
 800328e:	2300      	movs	r3, #0
 8003290:	e000      	b.n	8003294 <cmp_lfn+0xd0>

	return 1;		/* The part of LFN matched */
 8003292:	2301      	movs	r3, #1
}
 8003294:	4618      	mov	r0, r3
 8003296:	371c      	adds	r7, #28
 8003298:	46bd      	mov	sp, r7
 800329a:	bd90      	pop	{r4, r7, pc}
 800329c:	0801c67c 	.word	0x0801c67c

080032a0 <pick_lfn>:

static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	331a      	adds	r3, #26
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fe fbb6 	bl	8001a20 <ld_word>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <pick_lfn+0x1e>
 80032ba:	2300      	movs	r3, #0
 80032bc:	e04d      	b.n	800335a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032c6:	1e5a      	subs	r2, r3, #1
 80032c8:	4613      	mov	r3, r2
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	4413      	add	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80032d4:	2301      	movs	r3, #1
 80032d6:	81fb      	strh	r3, [r7, #14]
 80032d8:	2300      	movs	r3, #0
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	e028      	b.n	8003330 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80032de:	4a21      	ldr	r2, [pc, #132]	; (8003364 <pick_lfn+0xc4>)
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	4413      	add	r3, r2
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	4413      	add	r3, r2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fe fb97 	bl	8001a20 <ld_word>
 80032f2:	4603      	mov	r3, r0
 80032f4:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 80032f6:	89fb      	ldrh	r3, [r7, #14]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00f      	beq.n	800331c <pick_lfn+0x7c>
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	2bfe      	cmp	r3, #254	; 0xfe
 8003300:	d901      	bls.n	8003306 <pick_lfn+0x66>
 8003302:	2300      	movs	r3, #0
 8003304:	e029      	b.n	800335a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8003306:	89bb      	ldrh	r3, [r7, #12]
 8003308:	81fb      	strh	r3, [r7, #14]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	617a      	str	r2, [r7, #20]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	4413      	add	r3, r2
 8003316:	89fa      	ldrh	r2, [r7, #14]
 8003318:	801a      	strh	r2, [r3, #0]
 800331a:	e006      	b.n	800332a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800331c:	89bb      	ldrh	r3, [r7, #12]
 800331e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003322:	4293      	cmp	r3, r2
 8003324:	d001      	beq.n	800332a <pick_lfn+0x8a>
 8003326:	2300      	movs	r3, #0
 8003328:	e017      	b.n	800335a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	3301      	adds	r3, #1
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	2b0c      	cmp	r3, #12
 8003334:	d9d3      	bls.n	80032de <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <pick_lfn+0xb8>
		if (i >= FF_MAX_LFN) return 0;		/* Buffer overflow? */
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2bfe      	cmp	r3, #254	; 0xfe
 8003346:	d901      	bls.n	800334c <pick_lfn+0xac>
 8003348:	2300      	movs	r3, #0
 800334a:	e006      	b.n	800335a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	4413      	add	r3, r2
 8003354:	2200      	movs	r2, #0
 8003356:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8003358:	2301      	movs	r3, #1
}
 800335a:	4618      	mov	r0, r3
 800335c:	3718      	adds	r7, #24
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	0801c67c 	.word	0x0801c67c

08003368 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b088      	sub	sp, #32
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	4611      	mov	r1, r2
 8003374:	461a      	mov	r2, r3
 8003376:	460b      	mov	r3, r1
 8003378:	71fb      	strb	r3, [r7, #7]
 800337a:	4613      	mov	r3, r2
 800337c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	330d      	adds	r3, #13
 8003382:	79ba      	ldrb	r2, [r7, #6]
 8003384:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	330b      	adds	r3, #11
 800338a:	220f      	movs	r2, #15
 800338c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	330c      	adds	r3, #12
 8003392:	2200      	movs	r2, #0
 8003394:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	331a      	adds	r3, #26
 800339a:	2100      	movs	r1, #0
 800339c:	4618      	mov	r0, r3
 800339e:	f7fe fc37 	bl	8001c10 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	1e5a      	subs	r2, r3, #1
 80033a6:	4613      	mov	r3, r2
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	82fb      	strh	r3, [r7, #22]
 80033b6:	2300      	movs	r3, #0
 80033b8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80033ba:	8afb      	ldrh	r3, [r7, #22]
 80033bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d007      	beq.n	80033d4 <put_lfn+0x6c>
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	61fa      	str	r2, [r7, #28]
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4413      	add	r3, r2
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80033d4:	4a17      	ldr	r2, [pc, #92]	; (8003434 <put_lfn+0xcc>)
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	4413      	add	r3, r2
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	4413      	add	r3, r2
 80033e2:	8afa      	ldrh	r2, [r7, #22]
 80033e4:	4611      	mov	r1, r2
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fe fc12 	bl	8001c10 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80033ec:	8afb      	ldrh	r3, [r7, #22]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d102      	bne.n	80033f8 <put_lfn+0x90>
 80033f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033f6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	3301      	adds	r3, #1
 80033fc:	61bb      	str	r3, [r7, #24]
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	2b0c      	cmp	r3, #12
 8003402:	d9da      	bls.n	80033ba <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8003404:	8afb      	ldrh	r3, [r7, #22]
 8003406:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800340a:	4293      	cmp	r3, r2
 800340c:	d006      	beq.n	800341c <put_lfn+0xb4>
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4413      	add	r3, r2
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d103      	bne.n	8003424 <put_lfn+0xbc>
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003422:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	79fa      	ldrb	r2, [r7, #7]
 8003428:	701a      	strb	r2, [r3, #0]
}
 800342a:	bf00      	nop
 800342c:	3720      	adds	r7, #32
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	0801c67c 	.word	0x0801c67c

08003438 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08c      	sub	sp, #48	; 0x30
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
 8003444:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8003446:	220b      	movs	r2, #11
 8003448:	68b9      	ldr	r1, [r7, #8]
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f7fe fcae 	bl	8001dac <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	2b05      	cmp	r3, #5
 8003454:	d92b      	bls.n	80034ae <gen_numname+0x76>
		sr = seq;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC as hash value */
 800345a:	e022      	b.n	80034a2 <gen_numname+0x6a>
			wc = *lfn++;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	1c9a      	adds	r2, r3, #2
 8003460:	607a      	str	r2, [r7, #4]
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8003466:	2300      	movs	r3, #0
 8003468:	62bb      	str	r3, [r7, #40]	; 0x28
 800346a:	e017      	b.n	800349c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	005a      	lsls	r2, r3, #1
 8003470:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	4413      	add	r3, r2
 8003478:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800347a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800347c:	085b      	lsrs	r3, r3, #1
 800347e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d005      	beq.n	8003496 <gen_numname+0x5e>
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8003490:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8003494:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8003496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003498:	3301      	adds	r3, #1
 800349a:	62bb      	str	r3, [r7, #40]	; 0x28
 800349c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800349e:	2b0f      	cmp	r3, #15
 80034a0:	d9e4      	bls.n	800346c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC as hash value */
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1d8      	bne.n	800345c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80034ae:	2307      	movs	r3, #7
 80034b0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	3330      	adds	r3, #48	; 0x30
 80034be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80034c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80034c6:	2b39      	cmp	r3, #57	; 0x39
 80034c8:	d904      	bls.n	80034d4 <gen_numname+0x9c>
 80034ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80034ce:	3307      	adds	r3, #7
 80034d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80034d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d6:	1e5a      	subs	r2, r3, #1
 80034d8:	62ba      	str	r2, [r7, #40]	; 0x28
 80034da:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80034de:	4413      	add	r3, r2
 80034e0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80034e4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	091b      	lsrs	r3, r3, #4
 80034ec:	603b      	str	r3, [r7, #0]
	} while (seq);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1de      	bne.n	80034b2 <gen_numname+0x7a>
	ns[i] = '~';
 80034f4:	f107 0214 	add.w	r2, r7, #20
 80034f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fa:	4413      	add	r3, r2
 80034fc:	227e      	movs	r2, #126	; 0x7e
 80034fe:	701a      	strb	r2, [r3, #0]

	/* Append the number to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8003500:	2300      	movs	r3, #0
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
 8003504:	e014      	b.n	8003530 <gen_numname+0xf8>
		if (dbc_1st(dst[j])) {
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	4413      	add	r3, r2
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	4618      	mov	r0, r3
 8003510:	f7fe fcc9 	bl	8001ea6 <dbc_1st>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d007      	beq.n	800352a <gen_numname+0xf2>
			if (j == i - 1) break;
 800351a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351c:	3b01      	subs	r3, #1
 800351e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003520:	429a      	cmp	r2, r3
 8003522:	d010      	beq.n	8003546 <gen_numname+0x10e>
			j++;
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	3301      	adds	r3, #1
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	3301      	adds	r3, #1
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
 8003530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003534:	429a      	cmp	r2, r3
 8003536:	d207      	bcs.n	8003548 <gen_numname+0x110>
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	4413      	add	r3, r2
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b20      	cmp	r3, #32
 8003542:	d1e0      	bne.n	8003506 <gen_numname+0xce>
 8003544:	e000      	b.n	8003548 <gen_numname+0x110>
			if (j == i - 1) break;
 8003546:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8003548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354a:	2b07      	cmp	r3, #7
 800354c:	d808      	bhi.n	8003560 <gen_numname+0x128>
 800354e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	62ba      	str	r2, [r7, #40]	; 0x28
 8003554:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003558:	4413      	add	r3, r2
 800355a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800355e:	e000      	b.n	8003562 <gen_numname+0x12a>
 8003560:	2120      	movs	r1, #32
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	627a      	str	r2, [r7, #36]	; 0x24
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4413      	add	r3, r2
 800356c:	460a      	mov	r2, r1
 800356e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	2b07      	cmp	r3, #7
 8003574:	d9e8      	bls.n	8003548 <gen_numname+0x110>
}
 8003576:	bf00      	nop
 8003578:	3730      	adds	r7, #48	; 0x30
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800357e:	b480      	push	{r7}
 8003580:	b085      	sub	sp, #20
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8003586:	2300      	movs	r3, #0
 8003588:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800358a:	230b      	movs	r3, #11
 800358c:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800358e:	7bfb      	ldrb	r3, [r7, #15]
 8003590:	b2da      	uxtb	r2, r3
 8003592:	0852      	lsrs	r2, r2, #1
 8003594:	01db      	lsls	r3, r3, #7
 8003596:	4313      	orrs	r3, r2
 8003598:	b2da      	uxtb	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	1c59      	adds	r1, r3, #1
 800359e:	6079      	str	r1, [r7, #4]
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	4413      	add	r3, r2
 80035a4:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	3b01      	subs	r3, #1
 80035aa:	60bb      	str	r3, [r7, #8]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1ed      	bne.n	800358e <sum_sfn+0x10>
	return sum;
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3301      	adds	r3, #1
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	3301      	adds	r3, #1
 80035d0:	015b      	lsls	r3, r3, #5
 80035d2:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 80035d4:	2300      	movs	r3, #0
 80035d6:	827b      	strh	r3, [r7, #18]
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	e018      	b.n	8003610 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d103      	bne.n	80035ec <xdir_sum+0x2c>
			i++;
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	3301      	adds	r3, #1
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	e00e      	b.n	800360a <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 80035ec:	8a7b      	ldrh	r3, [r7, #18]
 80035ee:	03db      	lsls	r3, r3, #15
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	8a7b      	ldrh	r3, [r7, #18]
 80035f4:	085b      	lsrs	r3, r3, #1
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	4413      	add	r3, r2
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	440b      	add	r3, r1
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	b29b      	uxth	r3, r3
 8003606:	4413      	add	r3, r2
 8003608:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	3301      	adds	r3, #1
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	429a      	cmp	r2, r3
 8003616:	d3e2      	bcc.n	80035de <xdir_sum+0x1e>
		}
	}
	return sum;
 8003618:	8a7b      	ldrh	r3, [r7, #18]
}
 800361a:	4618      	mov	r0, r3
 800361c:	371c      	adds	r7, #28
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr

08003626 <xname_sum>:


static WORD xname_sum (	/* Get check sum (to be used as hash) of the file name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b084      	sub	sp, #16
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800362e:	2300      	movs	r3, #0
 8003630:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8003632:	e01f      	b.n	8003674 <xname_sum+0x4e>
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 8003634:	89bb      	ldrh	r3, [r7, #12]
 8003636:	4618      	mov	r0, r3
 8003638:	f003 fcce 	bl	8006fd8 <ff_wtoupper>
 800363c:	4603      	mov	r3, r0
 800363e:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8003640:	89fb      	ldrh	r3, [r7, #14]
 8003642:	03db      	lsls	r3, r3, #15
 8003644:	b29a      	uxth	r2, r3
 8003646:	89fb      	ldrh	r3, [r7, #14]
 8003648:	085b      	lsrs	r3, r3, #1
 800364a:	b29b      	uxth	r3, r3
 800364c:	4413      	add	r3, r2
 800364e:	b29a      	uxth	r2, r3
 8003650:	89bb      	ldrh	r3, [r7, #12]
 8003652:	b2db      	uxtb	r3, r3
 8003654:	b29b      	uxth	r3, r3
 8003656:	4413      	add	r3, r2
 8003658:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800365a:	89fb      	ldrh	r3, [r7, #14]
 800365c:	03db      	lsls	r3, r3, #15
 800365e:	b29a      	uxth	r2, r3
 8003660:	89fb      	ldrh	r3, [r7, #14]
 8003662:	085b      	lsrs	r3, r3, #1
 8003664:	b29b      	uxth	r3, r3
 8003666:	4413      	add	r3, r2
 8003668:	b29a      	uxth	r2, r3
 800366a:	89bb      	ldrh	r3, [r7, #12]
 800366c:	0a1b      	lsrs	r3, r3, #8
 800366e:	b29b      	uxth	r3, r3
 8003670:	4413      	add	r3, r2
 8003672:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	1c9a      	adds	r2, r3, #2
 8003678:	607a      	str	r2, [r7, #4]
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	81bb      	strh	r3, [r7, #12]
 800367e:	89bb      	ldrh	r3, [r7, #12]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1d7      	bne.n	8003634 <xname_sum+0xe>
	}
	return sum;
 8003684:	89fb      	ldrh	r3, [r7, #14]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <get_xfileinfo>:

static void get_xfileinfo (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800368e:	b590      	push	{r4, r7, lr}
 8003690:	b089      	sub	sp, #36	; 0x24
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	6039      	str	r1, [r7, #0]
	WCHAR wc, hs;
	UINT di, si, nc;

	/* Get file name from the entry block */
	si = SZDIRE * 2;	/* 1st C1 entry */
 8003698:	2340      	movs	r3, #64	; 0x40
 800369a:	617b      	str	r3, [r7, #20]
	nc = 0; hs = 0; di = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	613b      	str	r3, [r7, #16]
 80036a0:	2300      	movs	r3, #0
 80036a2:	83fb      	strh	r3, [r7, #30]
 80036a4:	2300      	movs	r3, #0
 80036a6:	61bb      	str	r3, [r7, #24]
	while (nc < dirb[XDIR_NumName]) {
 80036a8:	e048      	b.n	800373c <get_xfileinfo+0xae>
		if (si >= MAXDIRB(FF_MAX_LFN)) { di = 0; break; }	/* Truncated directory block? */
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80036b0:	d302      	bcc.n	80036b8 <get_xfileinfo+0x2a>
 80036b2:	2300      	movs	r3, #0
 80036b4:	61bb      	str	r3, [r7, #24]
 80036b6:	e048      	b.n	800374a <get_xfileinfo+0xbc>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	f003 031f 	and.w	r3, r3, #31
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d102      	bne.n	80036c8 <get_xfileinfo+0x3a>
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	3302      	adds	r3, #2
 80036c6:	617b      	str	r3, [r7, #20]
		wc = ld_word(dirb + si); si += 2; nc++;	/* Get a character */
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	4413      	add	r3, r2
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fe f9a6 	bl	8001a20 <ld_word>
 80036d4:	4603      	mov	r3, r0
 80036d6:	81fb      	strh	r3, [r7, #14]
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	3302      	adds	r3, #2
 80036dc:	617b      	str	r3, [r7, #20]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	3301      	adds	r3, #1
 80036e2:	613b      	str	r3, [r7, #16]
		if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 80036e4:	8bfb      	ldrh	r3, [r7, #30]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10a      	bne.n	8003700 <get_xfileinfo+0x72>
 80036ea:	89fb      	ldrh	r3, [r7, #14]
 80036ec:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80036f0:	d306      	bcc.n	8003700 <get_xfileinfo+0x72>
 80036f2:	89fb      	ldrh	r3, [r7, #14]
 80036f4:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80036f8:	d202      	bcs.n	8003700 <get_xfileinfo+0x72>
			hs = wc; continue;	/* Get low surrogate */
 80036fa:	89fb      	ldrh	r3, [r7, #14]
 80036fc:	83fb      	strh	r3, [r7, #30]
 80036fe:	e01d      	b.n	800373c <get_xfileinfo+0xae>
		}
		wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 8003700:	8bfb      	ldrh	r3, [r7, #30]
 8003702:	041a      	lsls	r2, r3, #16
 8003704:	89fb      	ldrh	r3, [r7, #14]
 8003706:	ea42 0003 	orr.w	r0, r2, r3
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	3318      	adds	r3, #24
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	4413      	add	r3, r2
 8003712:	1c99      	adds	r1, r3, #2
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800371a:	461a      	mov	r2, r3
 800371c:	f7fe fc52 	bl	8001fc4 <put_utf>
 8003720:	4603      	mov	r3, r0
 8003722:	81fb      	strh	r3, [r7, #14]
		if (wc == 0) { di = 0; break; }	/* Buffer overflow or wrong encoding? */
 8003724:	89fb      	ldrh	r3, [r7, #14]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d102      	bne.n	8003730 <get_xfileinfo+0xa2>
 800372a:	2300      	movs	r3, #0
 800372c:	61bb      	str	r3, [r7, #24]
 800372e:	e00c      	b.n	800374a <get_xfileinfo+0xbc>
		di += wc;
 8003730:	89fb      	ldrh	r3, [r7, #14]
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4413      	add	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
		hs = 0;
 8003738:	2300      	movs	r3, #0
 800373a:	83fb      	strh	r3, [r7, #30]
	while (nc < dirb[XDIR_NumName]) {
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3323      	adds	r3, #35	; 0x23
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	4293      	cmp	r3, r2
 8003748:	d3af      	bcc.n	80036aa <get_xfileinfo+0x1c>
	}
	if (hs != 0) di = 0;					/* Broken surrogate pair? */
 800374a:	8bfb      	ldrh	r3, [r7, #30]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <get_xfileinfo+0xc6>
 8003750:	2300      	movs	r3, #0
 8003752:	61bb      	str	r3, [r7, #24]
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <get_xfileinfo+0xda>
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	61ba      	str	r2, [r7, #24]
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	4413      	add	r3, r2
 8003764:	223f      	movs	r2, #63	; 0x3f
 8003766:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate the name */
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	4413      	add	r3, r2
 800376e:	331a      	adds	r3, #26
 8003770:	2200      	movs	r2, #0
 8003772:	701a      	strb	r2, [r3, #0]
	fno->altname[0] = 0;					/* exFAT does not support SFN */
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	2200      	movs	r2, #0
 8003778:	735a      	strb	r2, [r3, #13]

	fno->fattrib = dirb[XDIR_Attr];			/* Attribute */
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	791a      	ldrb	r2, [r3, #4]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	7b1b      	ldrb	r3, [r3, #12]
 8003786:	f003 0310 	and.w	r3, r3, #16
 800378a:	2b00      	cmp	r3, #0
 800378c:	d107      	bne.n	800379e <get_xfileinfo+0x110>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3338      	adds	r3, #56	; 0x38
 8003792:	4618      	mov	r0, r3
 8003794:	f7fe f97f 	bl	8001a96 <ld_qword>
 8003798:	4603      	mov	r3, r0
 800379a:	460c      	mov	r4, r1
 800379c:	e003      	b.n	80037a6 <get_xfileinfo+0x118>
 800379e:	f04f 0300 	mov.w	r3, #0
 80037a2:	f04f 0400 	mov.w	r4, #0
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	e9c2 3400 	strd	r3, r4, [r2]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	330c      	adds	r3, #12
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fe f935 	bl	8001a20 <ld_word>
 80037b6:	4603      	mov	r3, r0
 80037b8:	461a      	mov	r2, r3
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	330e      	adds	r3, #14
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe f92c 	bl	8001a20 <ld_word>
 80037c8:	4603      	mov	r3, r0
 80037ca:	461a      	mov	r2, r3
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	811a      	strh	r2, [r3, #8]
}
 80037d0:	bf00      	nop
 80037d2:	3724      	adds	r7, #36	; 0x24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd90      	pop	{r4, r7, pc}

080037d8 <load_xdir>:
/*-----------------------------------*/

static FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp					/* Reading direcotry object pointing top of the entry block to load */
)
{
 80037d8:	b590      	push	{r4, r7, lr}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	60fb      	str	r3, [r7, #12]


	/* Load file-directory entry */
	res = move_window(dp->obj.fs, dp->sect);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	4619      	mov	r1, r3
 80037f2:	4610      	mov	r0, r2
 80037f4:	f7fe fc5a 	bl	80020ac <move_window>
 80037f8:	4603      	mov	r3, r0
 80037fa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80037fc:	7dfb      	ldrb	r3, [r7, #23]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <load_xdir+0x2e>
 8003802:	7dfb      	ldrb	r3, [r7, #23]
 8003804:	e0a9      	b.n	800395a <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b85      	cmp	r3, #133	; 0x85
 800380e:	d001      	beq.n	8003814 <load_xdir+0x3c>
 8003810:	2302      	movs	r3, #2
 8003812:	e0a2      	b.n	800395a <load_xdir+0x182>
	mem_cpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003818:	2220      	movs	r2, #32
 800381a:	4619      	mov	r1, r3
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f7fe fac5 	bl	8001dac <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	3301      	adds	r3, #1
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	3301      	adds	r3, #1
 800382a:	015b      	lsls	r3, r3, #5
 800382c:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b5f      	cmp	r3, #95	; 0x5f
 8003832:	d903      	bls.n	800383c <load_xdir+0x64>
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800383a:	d901      	bls.n	8003840 <load_xdir+0x68>
 800383c:	2302      	movs	r3, #2
 800383e:	e08c      	b.n	800395a <load_xdir+0x182>

	/* Load stream-extension entry */
	res = dir_next(dp, 0);
 8003840:	2100      	movs	r1, #0
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7ff fb7e 	bl	8002f44 <dir_next>
 8003848:	4603      	mov	r3, r0
 800384a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 800384c:	7dfb      	ldrb	r3, [r7, #23]
 800384e:	2b04      	cmp	r3, #4
 8003850:	d101      	bne.n	8003856 <load_xdir+0x7e>
 8003852:	2302      	movs	r3, #2
 8003854:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8003856:	7dfb      	ldrb	r3, [r7, #23]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <load_xdir+0x88>
 800385c:	7dfb      	ldrb	r3, [r7, #23]
 800385e:	e07c      	b.n	800395a <load_xdir+0x182>
	res = move_window(dp->obj.fs, dp->sect);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	4619      	mov	r1, r3
 800386a:	4610      	mov	r0, r2
 800386c:	f7fe fc1e 	bl	80020ac <move_window>
 8003870:	4603      	mov	r3, r0
 8003872:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8003874:	7dfb      	ldrb	r3, [r7, #23]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <load_xdir+0xa6>
 800387a:	7dfb      	ldrb	r3, [r7, #23]
 800387c:	e06d      	b.n	800395a <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2bc0      	cmp	r3, #192	; 0xc0
 8003886:	d001      	beq.n	800388c <load_xdir+0xb4>
 8003888:	2302      	movs	r3, #2
 800388a:	e066      	b.n	800395a <load_xdir+0x182>
	mem_cpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f103 0020 	add.w	r0, r3, #32
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003896:	2220      	movs	r2, #32
 8003898:	4619      	mov	r1, r3
 800389a:	f7fe fa87 	bl	8001dac <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3323      	adds	r3, #35	; 0x23
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	332c      	adds	r3, #44	; 0x2c
 80038a6:	4a2f      	ldr	r2, [pc, #188]	; (8003964 <load_xdir+0x18c>)
 80038a8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ac:	08db      	lsrs	r3, r3, #3
 80038ae:	015b      	lsls	r3, r3, #5
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d201      	bcs.n	80038ba <load_xdir+0xe2>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e04f      	b.n	800395a <load_xdir+0x182>

	/* Load file-name entries */
	i = 2 * SZDIRE;	/* Name offset to load */
 80038ba:	2340      	movs	r3, #64	; 0x40
 80038bc:	613b      	str	r3, [r7, #16]
	do {
		res = dir_next(dp, 0);
 80038be:	2100      	movs	r1, #0
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff fb3f 	bl	8002f44 <dir_next>
 80038c6:	4603      	mov	r3, r0
 80038c8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 80038ca:	7dfb      	ldrb	r3, [r7, #23]
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d101      	bne.n	80038d4 <load_xdir+0xfc>
 80038d0:	2302      	movs	r3, #2
 80038d2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80038d4:	7dfb      	ldrb	r3, [r7, #23]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <load_xdir+0x106>
 80038da:	7dfb      	ldrb	r3, [r7, #23]
 80038dc:	e03d      	b.n	800395a <load_xdir+0x182>
		res = move_window(dp->obj.fs, dp->sect);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e6:	4619      	mov	r1, r3
 80038e8:	4610      	mov	r0, r2
 80038ea:	f7fe fbdf 	bl	80020ac <move_window>
 80038ee:	4603      	mov	r3, r0
 80038f0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80038f2:	7dfb      	ldrb	r3, [r7, #23]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <load_xdir+0x124>
 80038f8:	7dfb      	ldrb	r3, [r7, #23]
 80038fa:	e02e      	b.n	800395a <load_xdir+0x182>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2bc1      	cmp	r3, #193	; 0xc1
 8003904:	d001      	beq.n	800390a <load_xdir+0x132>
 8003906:	2302      	movs	r3, #2
 8003908:	e027      	b.n	800395a <load_xdir+0x182>
		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8003910:	d208      	bcs.n	8003924 <load_xdir+0x14c>
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	18d0      	adds	r0, r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800391c:	2220      	movs	r2, #32
 800391e:	4619      	mov	r1, r3
 8003920:	f7fe fa44 	bl	8001dac <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	3320      	adds	r3, #32
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	429a      	cmp	r2, r3
 8003930:	d3c5      	bcc.n	80038be <load_xdir+0xe6>

	/* Sanity check (do it for only accessible object) */
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8003938:	d80e      	bhi.n	8003958 <load_xdir+0x180>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f7ff fe40 	bl	80035c0 <xdir_sum>
 8003940:	4603      	mov	r3, r0
 8003942:	461c      	mov	r4, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	3302      	adds	r3, #2
 8003948:	4618      	mov	r0, r3
 800394a:	f7fe f869 	bl	8001a20 <ld_word>
 800394e:	4603      	mov	r3, r0
 8003950:	429c      	cmp	r4, r3
 8003952:	d001      	beq.n	8003958 <load_xdir+0x180>
 8003954:	2302      	movs	r3, #2
 8003956:	e000      	b.n	800395a <load_xdir+0x182>
	}
	return FR_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	371c      	adds	r7, #28
 800395e:	46bd      	mov	sp, r7
 8003960:	bd90      	pop	{r4, r7, pc}
 8003962:	bf00      	nop
 8003964:	88888889 	.word	0x88888889

08003968 <init_alloc_info>:

static void init_alloc_info (
	FATFS* fs,		/* Filesystem object */
	FFOBJID* obj	/* Object allocation information to be initialized */
)
{
 8003968:	b590      	push	{r4, r7, lr}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	3334      	adds	r3, #52	; 0x34
 8003978:	4618      	mov	r0, r3
 800397a:	f7fe f869 	bl	8001a50 <ld_dword>
 800397e:	4602      	mov	r2, r0
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	609a      	str	r2, [r3, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	3338      	adds	r3, #56	; 0x38
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe f883 	bl	8001a96 <ld_qword>
 8003990:	4603      	mov	r3, r0
 8003992:	460c      	mov	r4, r1
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	e9c2 3404 	strd	r3, r4, [r2, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	3321      	adds	r3, #33	; 0x21
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	71da      	strb	r2, [r3, #7]
	obj->n_frag = 0;										/* No last fragment info */
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	2200      	movs	r2, #0
 80039b0:	61da      	str	r2, [r3, #28]
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd90      	pop	{r4, r7, pc}

080039ba <load_obj_xdir>:

static FRESULT load_obj_xdir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const FFOBJID* obj	/* Object with its containing directory information */
)
{
 80039ba:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	6a1a      	ldr	r2, [r3, #32]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e4:	469b      	mov	fp, r3
 80039e6:	f04f 0c00 	mov.w	ip, #0
 80039ea:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	ea0b 0301 	and.w	r3, fp, r1
 80039f6:	ea0c 0402 	and.w	r4, ip, r2
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->obj.n_frag = 0;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	61da      	str	r2, [r3, #28]
	dp->blk_ofs = obj->c_ofs;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a12:	4619      	mov	r1, r3
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff fa0f 	bl	8002e38 <dir_sdi>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d104      	bne.n	8003a2e <load_obj_xdir+0x74>
		res = load_xdir(dp);		/* Load the object's entry block */
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7ff fed7 	bl	80037d8 <load_xdir>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08003a3a <store_xdir>:
/*----------------------------------------*/

static FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8003a3a:	b590      	push	{r4, r7, lr}
 8003a3c:	b087      	sub	sp, #28
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1c9c      	adds	r4, r3, #2
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f7ff fdb6 	bl	80035c0 <xdir_sum>
 8003a54:	4603      	mov	r3, r0
 8003a56:	4619      	mov	r1, r3
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f7fe f8d9 	bl	8001c10 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	3301      	adds	r3, #1
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	3301      	adds	r3, #1
 8003a66:	613b      	str	r3, [r7, #16]

	/* Store the direcotry entry block to the directory */
	res = dir_sdi(dp, dp->blk_ofs);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff f9e2 	bl	8002e38 <dir_sdi>
 8003a74:	4603      	mov	r3, r0
 8003a76:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8003a78:	e026      	b.n	8003ac8 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a82:	4619      	mov	r1, r3
 8003a84:	4610      	mov	r0, r2
 8003a86:	f7fe fb11 	bl	80020ac <move_window>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d11d      	bne.n	8003ad0 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a98:	2220      	movs	r2, #32
 8003a9a:	68f9      	ldr	r1, [r7, #12]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fe f985 	bl	8001dac <mem_cpy>
		dp->obj.fs->wflag = 1;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	3b01      	subs	r3, #1
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00e      	beq.n	8003ad4 <store_xdir+0x9a>
		dirb += SZDIRE;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	3320      	adds	r3, #32
 8003aba:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8003abc:	2100      	movs	r1, #0
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff fa40 	bl	8002f44 <dir_next>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8003ac8:	7dfb      	ldrb	r3, [r7, #23]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0d5      	beq.n	8003a7a <store_xdir+0x40>
 8003ace:	e002      	b.n	8003ad6 <store_xdir+0x9c>
		if (res != FR_OK) break;
 8003ad0:	bf00      	nop
 8003ad2:	e000      	b.n	8003ad6 <store_xdir+0x9c>
		if (--nent == 0) break;
 8003ad4:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8003ad6:	7dfb      	ldrb	r3, [r7, #23]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d002      	beq.n	8003ae2 <store_xdir+0xa8>
 8003adc:	7dfb      	ldrb	r3, [r7, #23]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d101      	bne.n	8003ae6 <store_xdir+0xac>
 8003ae2:	7dfb      	ldrb	r3, [r7, #23]
 8003ae4:	e000      	b.n	8003ae8 <store_xdir+0xae>
 8003ae6:	2302      	movs	r3, #2
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	371c      	adds	r7, #28
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd90      	pop	{r4, r7, pc}

08003af0 <create_xdir>:

static void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the object name */
)
{
 8003af0:	b590      	push	{r4, r7, lr}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
	BYTE nc1, nlen;
	WCHAR wc;


	/* Create file-directory and stream-extension entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8003afa:	2240      	movs	r2, #64	; 0x40
 8003afc:	2100      	movs	r1, #0
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fe f975 	bl	8001dee <mem_set>
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2285      	movs	r2, #133	; 0x85
 8003b08:	701a      	strb	r2, [r3, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3320      	adds	r3, #32
 8003b0e:	22c0      	movs	r2, #192	; 0xc0
 8003b10:	701a      	strb	r2, [r3, #0]

	/* Create file-name entries */
	i = SZDIRE * 2;	/* Top of file_name entries */
 8003b12:	2340      	movs	r3, #64	; 0x40
 8003b14:	60fb      	str	r3, [r7, #12]
	nlen = nc1 = 0; wc = 1;
 8003b16:	2300      	movs	r3, #0
 8003b18:	72fb      	strb	r3, [r7, #11]
 8003b1a:	7afb      	ldrb	r3, [r7, #11]
 8003b1c:	72bb      	strb	r3, [r7, #10]
 8003b1e:	2301      	movs	r3, #1
 8003b20:	813b      	strh	r3, [r7, #8]
	do {
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	60fa      	str	r2, [r7, #12]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	22c1      	movs	r2, #193	; 0xc1
 8003b2e:	701a      	strb	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	60fa      	str	r2, [r7, #12]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4413      	add	r3, r2
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 8003b3e:	893b      	ldrh	r3, [r7, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00b      	beq.n	8003b5c <create_xdir+0x6c>
 8003b44:	7abb      	ldrb	r3, [r7, #10]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	813b      	strh	r3, [r7, #8]
 8003b50:	893b      	ldrh	r3, [r7, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <create_xdir+0x6c>
 8003b56:	7abb      	ldrb	r3, [r7, #10]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, wc); 		/* Store it */
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4413      	add	r3, r2
 8003b62:	893a      	ldrh	r2, [r7, #8]
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fe f852 	bl	8001c10 <st_word>
			i += 2;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	3302      	adds	r3, #2
 8003b70:	60fb      	str	r3, [r7, #12]
		} while (i % SZDIRE != 0);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f003 031f 	and.w	r3, r3, #31
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e0      	bne.n	8003b3e <create_xdir+0x4e>
		nc1++;
 8003b7c:	7afb      	ldrb	r3, [r7, #11]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
 8003b82:	7abb      	ldrb	r3, [r7, #10]
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	4413      	add	r3, r2
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1c8      	bne.n	8003b22 <create_xdir+0x32>

	dirb[XDIR_NumName] = nlen;		/* Set name length */
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3323      	adds	r3, #35	; 0x23
 8003b94:	7aba      	ldrb	r2, [r7, #10]
 8003b96:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	7afa      	ldrb	r2, [r7, #11]
 8003b9e:	3201      	adds	r2, #1
 8003ba0:	b2d2      	uxtb	r2, r2
 8003ba2:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8003baa:	6838      	ldr	r0, [r7, #0]
 8003bac:	f7ff fd3b 	bl	8003626 <xname_sum>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	f7fe f82b 	bl	8001c10 <st_word>
}
 8003bba:	bf00      	nop
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd90      	pop	{r4, r7, pc}

08003bc2 <dir_read>:

static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b086      	sub	sp, #24
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8003bcc:	2304      	movs	r3, #4
 8003bce:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	613b      	str	r3, [r7, #16]
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 8003bd6:	23ff      	movs	r3, #255	; 0xff
 8003bd8:	757b      	strb	r3, [r7, #21]
 8003bda:	23ff      	movs	r3, #255	; 0xff
 8003bdc:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8003bde:	e09f      	b.n	8003d20 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be4:	4619      	mov	r1, r3
 8003be6:	6938      	ldr	r0, [r7, #16]
 8003be8:	f7fe fa60 	bl	80020ac <move_window>
 8003bec:	4603      	mov	r3, r0
 8003bee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003bf0:	7dfb      	ldrb	r3, [r7, #23]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f040 809a 	bne.w	8003d2c <dir_read+0x16a>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	75bb      	strb	r3, [r7, #22]
		if (b == 0) {
 8003c00:	7dbb      	ldrb	r3, [r7, #22]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d102      	bne.n	8003c0c <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8003c06:	2304      	movs	r3, #4
 8003c08:	75fb      	strb	r3, [r7, #23]
 8003c0a:	e096      	b.n	8003d3a <dir_read+0x178>
		}
#if FF_FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b04      	cmp	r3, #4
 8003c12:	d118      	bne.n	8003c46 <dir_read+0x84>
			if (FF_USE_LABEL && vol) {
				if (b == ET_VLABEL) break;	/* Volume label entry? */
			} else {
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
 8003c14:	7dbb      	ldrb	r3, [r7, #22]
 8003c16:	2b85      	cmp	r3, #133	; 0x85
 8003c18:	d179      	bne.n	8003d0e <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f7ff fdd8 	bl	80037d8 <load_xdir>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8003c2c:	7dfb      	ldrb	r3, [r7, #23]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d17e      	bne.n	8003d30 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	3304      	adds	r3, #4
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	719a      	strb	r2, [r3, #6]
					}
					break;
 8003c44:	e074      	b.n	8003d30 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4a:	330b      	adds	r3, #11
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c52:	73fb      	strb	r3, [r7, #15]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	7bfa      	ldrb	r2, [r7, #15]
 8003c58:	719a      	strb	r2, [r3, #6]
#if FF_USE_LFN		/* LFN configuration */
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8003c5a:	7dbb      	ldrb	r3, [r7, #22]
 8003c5c:	2be5      	cmp	r3, #229	; 0xe5
 8003c5e:	d00e      	beq.n	8003c7e <dir_read+0xbc>
 8003c60:	7dbb      	ldrb	r3, [r7, #22]
 8003c62:	2b2e      	cmp	r3, #46	; 0x2e
 8003c64:	d00b      	beq.n	8003c7e <dir_read+0xbc>
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
 8003c68:	f023 0320 	bic.w	r3, r3, #32
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	bf0c      	ite	eq
 8003c70:	2301      	moveq	r3, #1
 8003c72:	2300      	movne	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	461a      	mov	r2, r3
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d002      	beq.n	8003c84 <dir_read+0xc2>
				ord = 0xFF;
 8003c7e:	23ff      	movs	r3, #255	; 0xff
 8003c80:	757b      	strb	r3, [r7, #21]
 8003c82:	e044      	b.n	8003d0e <dir_read+0x14c>
			} else {
				if (attr == AM_LFN) {			/* An LFN entry is found */
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	2b0f      	cmp	r3, #15
 8003c88:	d12f      	bne.n	8003cea <dir_read+0x128>
					if (b & LLEF) {			/* Is it start of an LFN sequence? */
 8003c8a:	7dbb      	ldrb	r3, [r7, #22]
 8003c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00d      	beq.n	8003cb0 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c98:	7b5b      	ldrb	r3, [r3, #13]
 8003c9a:	753b      	strb	r3, [r7, #20]
						b &= (BYTE)~LLEF; ord = b;
 8003c9c:	7dbb      	ldrb	r3, [r7, #22]
 8003c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ca2:	75bb      	strb	r3, [r7, #22]
 8003ca4:	7dbb      	ldrb	r3, [r7, #22]
 8003ca6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8003cb0:	7dba      	ldrb	r2, [r7, #22]
 8003cb2:	7d7b      	ldrb	r3, [r7, #21]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d115      	bne.n	8003ce4 <dir_read+0x122>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbc:	330d      	adds	r3, #13
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	7d3a      	ldrb	r2, [r7, #20]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d10e      	bne.n	8003ce4 <dir_read+0x122>
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	f7ff fae5 	bl	80032a0 <pick_lfn>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <dir_read+0x122>
 8003cdc:	7d7b      	ldrb	r3, [r7, #21]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	e000      	b.n	8003ce6 <dir_read+0x124>
 8003ce4:	23ff      	movs	r3, #255	; 0xff
 8003ce6:	757b      	strb	r3, [r7, #21]
 8003ce8:	e011      	b.n	8003d0e <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8003cea:	7d7b      	ldrb	r3, [r7, #21]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d109      	bne.n	8003d04 <dir_read+0x142>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff fc42 	bl	800357e <sum_sfn>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	7d3b      	ldrb	r3, [r7, #20]
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d017      	beq.n	8003d34 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f04f 32ff 	mov.w	r2, #4294967295
 8003d0a:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 8003d0c:	e012      	b.n	8003d34 <dir_read+0x172>
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8003d0e:	2100      	movs	r1, #0
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff f917 	bl	8002f44 <dir_next>
 8003d16:	4603      	mov	r3, r0
 8003d18:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003d1a:	7dfb      	ldrb	r3, [r7, #23]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10b      	bne.n	8003d38 <dir_read+0x176>
	while (dp->sect) {
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f47f af5b 	bne.w	8003be0 <dir_read+0x1e>
 8003d2a:	e006      	b.n	8003d3a <dir_read+0x178>
		if (res != FR_OK) break;
 8003d2c:	bf00      	nop
 8003d2e:	e004      	b.n	8003d3a <dir_read+0x178>
					break;
 8003d30:	bf00      	nop
 8003d32:	e002      	b.n	8003d3a <dir_read+0x178>
					break;
 8003d34:	bf00      	nop
 8003d36:	e000      	b.n	8003d3a <dir_read+0x178>
		if (res != FR_OK) break;
 8003d38:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8003d3a:	7dfb      	ldrb	r3, [r7, #23]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <dir_read+0x184>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 8003d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8003d50:	b590      	push	{r4, r7, lr}
 8003d52:	b089      	sub	sp, #36	; 0x24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003d5e:	2100      	movs	r1, #0
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff f869 	bl	8002e38 <dir_sdi>
 8003d66:	4603      	mov	r3, r0
 8003d68:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8003d6a:	7ffb      	ldrb	r3, [r7, #31]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <dir_find+0x24>
 8003d70:	7ffb      	ldrb	r3, [r7, #31]
 8003d72:	e111      	b.n	8003f98 <dir_find+0x248>
#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d163      	bne.n	8003e44 <dir_find+0xf4>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff fc50 	bl	8003626 <xname_sum>
 8003d86:	4603      	mov	r3, r0
 8003d88:	813b      	strh	r3, [r7, #8]

		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 8003d8a:	e04e      	b.n	8003e2a <dir_find+0xda>
#if FF_MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > FF_MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	3324      	adds	r3, #36	; 0x24
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fd fe44 	bl	8001a20 <ld_word>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	893b      	ldrh	r3, [r7, #8]
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d000      	beq.n	8003da4 <dir_find+0x54>
 8003da2:	e042      	b.n	8003e2a <dir_find+0xda>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003dac:	76fb      	strb	r3, [r7, #27]
 8003dae:	2340      	movs	r3, #64	; 0x40
 8003db0:	617b      	str	r3, [r7, #20]
 8003db2:	2300      	movs	r3, #0
 8003db4:	613b      	str	r3, [r7, #16]
 8003db6:	e028      	b.n	8003e0a <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	f003 031f 	and.w	r3, r3, #31
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d102      	bne.n	8003dc8 <dir_find+0x78>
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	3302      	adds	r3, #2
 8003dc6:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	691a      	ldr	r2, [r3, #16]
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	4413      	add	r3, r2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fd fe25 	bl	8001a20 <ld_word>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f003 f8fd 	bl	8006fd8 <ff_wtoupper>
 8003dde:	4604      	mov	r4, r0
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	005b      	lsls	r3, r3, #1
 8003de8:	4413      	add	r3, r2
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f003 f8f3 	bl	8006fd8 <ff_wtoupper>
 8003df2:	4603      	mov	r3, r0
 8003df4:	429c      	cmp	r4, r3
 8003df6:	d10c      	bne.n	8003e12 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8003df8:	7efb      	ldrb	r3, [r7, #27]
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	76fb      	strb	r3, [r7, #27]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	3302      	adds	r3, #2
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	3301      	adds	r3, #1
 8003e08:	613b      	str	r3, [r7, #16]
 8003e0a:	7efb      	ldrb	r3, [r7, #27]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1d3      	bne.n	8003db8 <dir_find+0x68>
 8003e10:	e000      	b.n	8003e14 <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8003e12:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8003e14:	7efb      	ldrb	r3, [r7, #27]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d107      	bne.n	8003e2a <dir_find+0xda>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	4413      	add	r3, r2
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d009      	beq.n	8003e3e <dir_find+0xee>
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7ff fec8 	bl	8003bc2 <dir_read>
 8003e32:	4603      	mov	r3, r0
 8003e34:	77fb      	strb	r3, [r7, #31]
 8003e36:	7ffb      	ldrb	r3, [r7, #31]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0a7      	beq.n	8003d8c <dir_find+0x3c>
 8003e3c:	e000      	b.n	8003e40 <dir_find+0xf0>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8003e3e:	bf00      	nop
		}
		return res;
 8003e40:	7ffb      	ldrb	r3, [r7, #31]
 8003e42:	e0a9      	b.n	8003f98 <dir_find+0x248>
	}
#endif
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003e44:	23ff      	movs	r3, #255	; 0xff
 8003e46:	773b      	strb	r3, [r7, #28]
 8003e48:	7f3b      	ldrb	r3, [r7, #28]
 8003e4a:	777b      	strb	r3, [r7, #29]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e52:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e58:	4619      	mov	r1, r3
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f7fe f926 	bl	80020ac <move_window>
 8003e60:	4603      	mov	r3, r0
 8003e62:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8003e64:	7ffb      	ldrb	r3, [r7, #31]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f040 8090 	bne.w	8003f8c <dir_find+0x23c>
		c = dp->dir[DIR_Name];
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003e74:	7fbb      	ldrb	r3, [r7, #30]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d102      	bne.n	8003e80 <dir_find+0x130>
 8003e7a:	2304      	movs	r3, #4
 8003e7c:	77fb      	strb	r3, [r7, #31]
 8003e7e:	e08a      	b.n	8003f96 <dir_find+0x246>
#if FF_USE_LFN		/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e84:	330b      	adds	r3, #11
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e8c:	72fb      	strb	r3, [r7, #11]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	7afa      	ldrb	r2, [r7, #11]
 8003e92:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8003e94:	7fbb      	ldrb	r3, [r7, #30]
 8003e96:	2be5      	cmp	r3, #229	; 0xe5
 8003e98:	d007      	beq.n	8003eaa <dir_find+0x15a>
 8003e9a:	7afb      	ldrb	r3, [r7, #11]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d009      	beq.n	8003eb8 <dir_find+0x168>
 8003ea4:	7afb      	ldrb	r3, [r7, #11]
 8003ea6:	2b0f      	cmp	r3, #15
 8003ea8:	d006      	beq.n	8003eb8 <dir_find+0x168>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003eaa:	23ff      	movs	r3, #255	; 0xff
 8003eac:	777b      	strb	r3, [r7, #29]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8003eb4:	64da      	str	r2, [r3, #76]	; 0x4c
 8003eb6:	e05e      	b.n	8003f76 <dir_find+0x226>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8003eb8:	7afb      	ldrb	r3, [r7, #11]
 8003eba:	2b0f      	cmp	r3, #15
 8003ebc:	d136      	bne.n	8003f2c <dir_find+0x1dc>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8003ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d154      	bne.n	8003f76 <dir_find+0x226>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8003ecc:	7fbb      	ldrb	r3, [r7, #30]
 8003ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00d      	beq.n	8003ef2 <dir_find+0x1a2>
						sum = dp->dir[LDIR_Chksum];
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eda:	7b5b      	ldrb	r3, [r3, #13]
 8003edc:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8003ede:	7fbb      	ldrb	r3, [r7, #30]
 8003ee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ee4:	77bb      	strb	r3, [r7, #30]
 8003ee6:	7fbb      	ldrb	r3, [r7, #30]
 8003ee8:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8003ef2:	7fba      	ldrb	r2, [r7, #30]
 8003ef4:	7f7b      	ldrb	r3, [r7, #29]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d115      	bne.n	8003f26 <dir_find+0x1d6>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efe:	330d      	adds	r3, #13
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	7f3a      	ldrb	r2, [r7, #28]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d10e      	bne.n	8003f26 <dir_find+0x1d6>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f10:	4619      	mov	r1, r3
 8003f12:	4610      	mov	r0, r2
 8003f14:	f7ff f956 	bl	80031c4 <cmp_lfn>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <dir_find+0x1d6>
 8003f1e:	7f7b      	ldrb	r3, [r7, #29]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	e000      	b.n	8003f28 <dir_find+0x1d8>
 8003f26:	23ff      	movs	r3, #255	; 0xff
 8003f28:	777b      	strb	r3, [r7, #29]
 8003f2a:	e024      	b.n	8003f76 <dir_find+0x226>
				}
			} else {					/* An SFN entry is found */
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8003f2c:	7f7b      	ldrb	r3, [r7, #29]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <dir_find+0x1f6>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff fb21 	bl	800357e <sum_sfn>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	461a      	mov	r2, r3
 8003f40:	7f3b      	ldrb	r3, [r7, #28]
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d024      	beq.n	8003f90 <dir_find+0x240>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10a      	bne.n	8003f6a <dir_find+0x21a>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3340      	adds	r3, #64	; 0x40
 8003f5c:	220b      	movs	r2, #11
 8003f5e:	4619      	mov	r1, r3
 8003f60:	f7fd ff5f 	bl	8001e22 <mem_cmp>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d014      	beq.n	8003f94 <dir_find+0x244>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003f6a:	23ff      	movs	r3, #255	; 0xff
 8003f6c:	777b      	strb	r3, [r7, #29]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f04f 32ff 	mov.w	r2, #4294967295
 8003f74:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8003f76:	2100      	movs	r1, #0
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7fe ffe3 	bl	8002f44 <dir_next>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8003f82:	7ffb      	ldrb	r3, [r7, #31]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f43f af65 	beq.w	8003e54 <dir_find+0x104>
 8003f8a:	e004      	b.n	8003f96 <dir_find+0x246>
		if (res != FR_OK) break;
 8003f8c:	bf00      	nop
 8003f8e:	e002      	b.n	8003f96 <dir_find+0x246>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8003f90:	bf00      	nop
 8003f92:	e000      	b.n	8003f96 <dir_find+0x246>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8003f94:	bf00      	nop

	return res;
 8003f96:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3724      	adds	r7, #36	; 0x24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd90      	pop	{r4, r7, pc}

08003fa0 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 8003fa0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003fa4:	b0a0      	sub	sp, #128	; 0x80
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	66fb      	str	r3, [r7, #108]	; 0x6c
#if FF_USE_LFN		/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8003fb6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <dir_register+0x22>
 8003fbe:	2306      	movs	r3, #6
 8003fc0:	e19a      	b.n	80042f8 <dir_register+0x358>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	677b      	str	r3, [r7, #116]	; 0x74
 8003fc6:	e002      	b.n	8003fce <dir_register+0x2e>
 8003fc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fca:	3301      	adds	r3, #1
 8003fcc:	677b      	str	r3, [r7, #116]	; 0x74
 8003fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	4413      	add	r3, r2
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f4      	bne.n	8003fc8 <dir_register+0x28>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8003fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	f040 80ac 	bne.w	8004140 <dir_register+0x1a0>
		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8003fe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fea:	330e      	adds	r3, #14
 8003fec:	4aa8      	ldr	r2, [pc, #672]	; (8004290 <dir_register+0x2f0>)
 8003fee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff2:	08db      	lsrs	r3, r3, #3
 8003ff4:	3302      	adds	r3, #2
 8003ff6:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate directory entries */
 8003ff8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff f847 	bl	800308e <dir_alloc>
 8004000:	4603      	mov	r3, r0
 8004002:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 8004006:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800400a:	2b00      	cmp	r3, #0
 800400c:	d002      	beq.n	8004014 <dir_register+0x74>
 800400e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004012:	e171      	b.n	80042f8 <dir_register+0x358>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004018:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800401a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800401e:	3b01      	subs	r3, #1
 8004020:	015b      	lsls	r3, r3, #5
 8004022:	1ad2      	subs	r2, r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	79db      	ldrb	r3, [r3, #7]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	d07b      	beq.n	800412c <dir_register+0x18c>
			dp->obj.stat &= ~4;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	79db      	ldrb	r3, [r3, #7]
 8004038:	f023 0304 	bic.w	r3, r3, #4
 800403c:	b2da      	uxtb	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	71da      	strb	r2, [r3, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4618      	mov	r0, r3
 8004046:	f7fe fbeb 	bl	8002820 <fill_first_frag>
 800404a:	4603      	mov	r3, r0
 800404c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8004050:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004054:	2b00      	cmp	r3, #0
 8004056:	d002      	beq.n	800405e <dir_register+0xbe>
 8004058:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800405c:	e14c      	b.n	80042f8 <dir_register+0x358>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004064:	f04f 32ff 	mov.w	r2, #4294967295
 8004068:	4619      	mov	r1, r3
 800406a:	f7fe fc08 	bl	800287e <fill_last_frag>
 800406e:	4603      	mov	r3, r0
 8004070:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8004074:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <dir_register+0xe2>
 800407c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004080:	e13a      	b.n	80042f8 <dir_register+0x358>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d050      	beq.n	800412c <dir_register+0x18c>
				DIR dj;

				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	f107 0308 	add.w	r3, r7, #8
 8004090:	4611      	mov	r1, r2
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff fc91 	bl	80039ba <load_obj_xdir>
 8004098:	4603      	mov	r3, r0
 800409a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) return res;
 800409e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <dir_register+0x10c>
 80040a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80040aa:	e125      	b.n	80042f8 <dir_register+0x358>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);			/* Increase the directory size by cluster size */
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 80040b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b4:	895b      	ldrh	r3, [r3, #10]
 80040b6:	025b      	lsls	r3, r3, #9
 80040b8:	469b      	mov	fp, r3
 80040ba:	f04f 0c00 	mov.w	ip, #0
 80040be:	eb1b 0301 	adds.w	r3, fp, r1
 80040c2:	eb4c 0402 	adc.w	r4, ip, r2
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	e9c2 3404 	strd	r3, r4, [r2, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);	/* Update the allocation status */
 80040cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80040da:	461a      	mov	r2, r3
 80040dc:	4623      	mov	r3, r4
 80040de:	4608      	mov	r0, r1
 80040e0:	f7fd fddd 	bl	8001c9e <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 80040e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80040f2:	461a      	mov	r2, r3
 80040f4:	4623      	mov	r3, r4
 80040f6:	4608      	mov	r0, r1
 80040f8:	f7fd fdd1 	bl	8001c9e <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	79da      	ldrb	r2, [r3, #7]
 8004100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	3321      	adds	r3, #33	; 0x21
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	b2d2      	uxtb	r2, r2
 800410c:	701a      	strb	r2, [r3, #0]
				res = store_xdir(&dj);				/* Store the object status */
 800410e:	f107 0308 	add.w	r3, r7, #8
 8004112:	4618      	mov	r0, r3
 8004114:	f7ff fc91 	bl	8003a3a <store_xdir>
 8004118:	4603      	mov	r3, r0
 800411a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) return res;
 800411e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <dir_register+0x18c>
 8004126:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800412a:	e0e5      	b.n	80042f8 <dir_register+0x358>
			}
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800412c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800412e:	691a      	ldr	r2, [r3, #16]
 8004130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	4619      	mov	r1, r3
 8004136:	4610      	mov	r0, r2
 8004138:	f7ff fcda 	bl	8003af0 <create_xdir>
		return FR_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	e0db      	b.n	80042f8 <dir_register+0x358>
	}
#endif
	/* On the FAT/FAT32 volume */
	mem_cpy(sn, dp->fn, 12);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8004146:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800414a:	220c      	movs	r2, #12
 800414c:	4618      	mov	r0, r3
 800414e:	f7fd fe2d 	bl	8001dac <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004152:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d033      	beq.n	80041c6 <dir_register+0x226>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2240      	movs	r2, #64	; 0x40
 8004162:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 8004166:	2301      	movs	r3, #1
 8004168:	67bb      	str	r3, [r7, #120]	; 0x78
 800416a:	e016      	b.n	800419a <dir_register+0x1fa>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8004172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800417a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800417c:	f7ff f95c 	bl	8003438 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff fde5 	bl	8003d50 <dir_find>
 8004186:	4603      	mov	r3, r0
 8004188:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800418c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004190:	2b00      	cmp	r3, #0
 8004192:	d106      	bne.n	80041a2 <dir_register+0x202>
		for (n = 1; n < 100; n++) {
 8004194:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004196:	3301      	adds	r3, #1
 8004198:	67bb      	str	r3, [r7, #120]	; 0x78
 800419a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800419c:	2b63      	cmp	r3, #99	; 0x63
 800419e:	d9e5      	bls.n	800416c <dir_register+0x1cc>
 80041a0:	e000      	b.n	80041a4 <dir_register+0x204>
			if (res != FR_OK) break;
 80041a2:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80041a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041a6:	2b64      	cmp	r3, #100	; 0x64
 80041a8:	d101      	bne.n	80041ae <dir_register+0x20e>
 80041aa:	2307      	movs	r3, #7
 80041ac:	e0a4      	b.n	80042f8 <dir_register+0x358>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80041ae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d002      	beq.n	80041bc <dir_register+0x21c>
 80041b6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80041ba:	e09d      	b.n	80042f8 <dir_register+0x358>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80041bc:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80041c6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d007      	beq.n	80041e2 <dir_register+0x242>
 80041d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041d4:	330c      	adds	r3, #12
 80041d6:	4a2f      	ldr	r2, [pc, #188]	; (8004294 <dir_register+0x2f4>)
 80041d8:	fba2 2303 	umull	r2, r3, r2, r3
 80041dc:	089b      	lsrs	r3, r3, #2
 80041de:	3301      	adds	r3, #1
 80041e0:	e000      	b.n	80041e4 <dir_register+0x244>
 80041e2:	2301      	movs	r3, #1
 80041e4:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80041e6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7fe ff50 	bl	800308e <dir_alloc>
 80041ee:	4603      	mov	r3, r0
 80041f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80041f4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d14e      	bne.n	800429a <dir_register+0x2fa>
 80041fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041fe:	3b01      	subs	r3, #1
 8004200:	673b      	str	r3, [r7, #112]	; 0x70
 8004202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004204:	2b00      	cmp	r3, #0
 8004206:	d048      	beq.n	800429a <dir_register+0x2fa>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800420c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800420e:	015b      	lsls	r3, r3, #5
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	4619      	mov	r1, r3
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7fe fe0f 	bl	8002e38 <dir_sdi>
 800421a:	4603      	mov	r3, r0
 800421c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8004220:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8004224:	2b00      	cmp	r3, #0
 8004226:	d138      	bne.n	800429a <dir_register+0x2fa>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3340      	adds	r3, #64	; 0x40
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff f9a6 	bl	800357e <sum_sfn>
 8004232:	4603      	mov	r3, r0
 8004234:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423c:	4619      	mov	r1, r3
 800423e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004240:	f7fd ff34 	bl	80020ac <move_window>
 8004244:	4603      	mov	r3, r0
 8004246:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800424a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800424e:	2b00      	cmp	r3, #0
 8004250:	d122      	bne.n	8004298 <dir_register+0x2f8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8004252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004254:	68d8      	ldr	r0, [r3, #12]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800425a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800425c:	b2da      	uxtb	r2, r3
 800425e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8004262:	f7ff f881 	bl	8003368 <put_lfn>
				fs->wflag = 1;
 8004266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004268:	2201      	movs	r2, #1
 800426a:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800426c:	2100      	movs	r1, #0
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fe fe68 	bl	8002f44 <dir_next>
 8004274:	4603      	mov	r3, r0
 8004276:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800427a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10b      	bne.n	800429a <dir_register+0x2fa>
 8004282:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004284:	3b01      	subs	r3, #1
 8004286:	673b      	str	r3, [r7, #112]	; 0x70
 8004288:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1d4      	bne.n	8004238 <dir_register+0x298>
 800428e:	e004      	b.n	800429a <dir_register+0x2fa>
 8004290:	88888889 	.word	0x88888889
 8004294:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8004298:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800429a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d128      	bne.n	80042f4 <dir_register+0x354>
		res = move_window(fs, dp->sect);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a6:	4619      	mov	r1, r3
 80042a8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80042aa:	f7fd feff 	bl	80020ac <move_window>
 80042ae:	4603      	mov	r3, r0
 80042b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 80042b4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d11b      	bne.n	80042f4 <dir_register+0x354>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c0:	2220      	movs	r2, #32
 80042c2:	2100      	movs	r1, #0
 80042c4:	4618      	mov	r0, r3
 80042c6:	f7fd fd92 	bl	8001dee <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3340      	adds	r3, #64	; 0x40
 80042d2:	220b      	movs	r2, #11
 80042d4:	4619      	mov	r1, r3
 80042d6:	f7fd fd69 	bl	8001dac <mem_cpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e4:	330c      	adds	r3, #12
 80042e6:	f002 0218 	and.w	r2, r2, #24
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80042ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f0:	2201      	movs	r2, #1
 80042f2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80042f4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3780      	adds	r7, #128	; 0x80
 80042fc:	46bd      	mov	sp, r7
 80042fe:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004302:	bf00      	nop

08004304 <dir_remove>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp					/* Directory object pointing the entry to be removed */
)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	613b      	str	r3, [r7, #16]
#if FF_USE_LFN		/* LFN configuration */
	DWORD last = dp->dptr;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004320:	d007      	beq.n	8004332 <dir_remove+0x2e>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004326:	4619      	mov	r1, r3
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7fe fd85 	bl	8002e38 <dir_sdi>
 800432e:	4603      	mov	r3, r0
 8004330:	e000      	b.n	8004334 <dir_remove+0x30>
 8004332:	2300      	movs	r3, #0
 8004334:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004336:	7dfb      	ldrb	r3, [r7, #23]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d136      	bne.n	80043aa <dir_remove+0xa6>
		do {
			res = move_window(fs, dp->sect);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004340:	4619      	mov	r1, r3
 8004342:	6938      	ldr	r0, [r7, #16]
 8004344:	f7fd feb2 	bl	80020ac <move_window>
 8004348:	4603      	mov	r3, r0
 800434a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800434c:	7dfb      	ldrb	r3, [r7, #23]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d123      	bne.n	800439a <dir_remove+0x96>
			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b04      	cmp	r3, #4
 8004358:	d109      	bne.n	800436e <dir_remove+0x6a>
				dp->dir[XDIR_Type] &= 0x7F;	/* Clear the entry InUse flag. */
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435e:	781a      	ldrb	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004364:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	701a      	strb	r2, [r3, #0]
 800436c:	e003      	b.n	8004376 <dir_remove+0x72>
			} else {									/* On the FAT/FAT32 volume */
				dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'. */
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004372:	22e5      	movs	r2, #229	; 0xe5
 8004374:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	2201      	movs	r2, #1
 800437a:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	429a      	cmp	r2, r3
 8004384:	d90b      	bls.n	800439e <dir_remove+0x9a>
			res = dir_next(dp, 0);	/* Next entry */
 8004386:	2100      	movs	r1, #0
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7fe fddb 	bl	8002f44 <dir_next>
 800438e:	4603      	mov	r3, r0
 8004390:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8004392:	7dfb      	ldrb	r3, [r7, #23]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d0d1      	beq.n	800433c <dir_remove+0x38>
 8004398:	e002      	b.n	80043a0 <dir_remove+0x9c>
			if (res != FR_OK) break;
 800439a:	bf00      	nop
 800439c:	e000      	b.n	80043a0 <dir_remove+0x9c>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800439e:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 80043a0:	7dfb      	ldrb	r3, [r7, #23]
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d101      	bne.n	80043aa <dir_remove+0xa6>
 80043a6:	2302      	movs	r3, #2
 80043a8:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
		fs->wflag = 1;
	}
#endif

	return res;
 80043aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <get_fileinfo>:

static void get_fileinfo (
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno		/* Pointer to the file information to be filled */
)
{
 80043b4:	b590      	push	{r4, r7, lr}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
	UINT si, di;
#if FF_USE_LFN
	WCHAR wc, hs;
	FATFS *fs = dp->obj.fs;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60bb      	str	r3, [r7, #8]
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2200      	movs	r2, #0
 80043c8:	769a      	strb	r2, [r3, #26]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 810f 	beq.w	80045f2 <get_fileinfo+0x23e>

#if FF_USE_LFN		/* LFN configuration */
#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	2b04      	cmp	r3, #4
 80043da:	d106      	bne.n	80043ea <get_fileinfo+0x36>
		get_xfileinfo(fs->dirbuf, fno);
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	6839      	ldr	r1, [r7, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7ff f953 	bl	800368e <get_xfileinfo>
		return;
 80043e8:	e104      	b.n	80045f4 <get_fileinfo+0x240>
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f2:	d04e      	beq.n	8004492 <get_fileinfo+0xde>
			si = di = hs = 0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	81bb      	strh	r3, [r7, #12]
 80043f8:	2300      	movs	r3, #0
 80043fa:	613b      	str	r3, [r7, #16]
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	617b      	str	r3, [r7, #20]
			while (fs->lfnbuf[si] != 0) {
 8004400:	e034      	b.n	800446c <get_fileinfo+0xb8>
				wc = fs->lfnbuf[si++];		/* Get an LFN character (UTF-16) */
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	1c59      	adds	r1, r3, #1
 800440a:	6179      	str	r1, [r7, #20]
 800440c:	005b      	lsls	r3, r3, #1
 800440e:	4413      	add	r3, r2
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	81fb      	strh	r3, [r7, #14]
				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 8004414:	89bb      	ldrh	r3, [r7, #12]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10a      	bne.n	8004430 <get_fileinfo+0x7c>
 800441a:	89fb      	ldrh	r3, [r7, #14]
 800441c:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8004420:	d306      	bcc.n	8004430 <get_fileinfo+0x7c>
 8004422:	89fb      	ldrh	r3, [r7, #14]
 8004424:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8004428:	d202      	bcs.n	8004430 <get_fileinfo+0x7c>
					hs = wc; continue;		/* Get low surrogate */
 800442a:	89fb      	ldrh	r3, [r7, #14]
 800442c:	81bb      	strh	r3, [r7, #12]
 800442e:	e01d      	b.n	800446c <get_fileinfo+0xb8>
				}
				wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in UTF-16 or UTF-8 encoding */
 8004430:	89bb      	ldrh	r3, [r7, #12]
 8004432:	041a      	lsls	r2, r3, #16
 8004434:	89fb      	ldrh	r3, [r7, #14]
 8004436:	ea42 0003 	orr.w	r0, r2, r3
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	3318      	adds	r3, #24
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	4413      	add	r3, r2
 8004442:	1c99      	adds	r1, r3, #2
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800444a:	461a      	mov	r2, r3
 800444c:	f7fd fdba 	bl	8001fc4 <put_utf>
 8004450:	4603      	mov	r3, r0
 8004452:	81fb      	strh	r3, [r7, #14]
				if (wc == 0) { di = 0; break; }	/* Invalid char or buffer overflow? */
 8004454:	89fb      	ldrh	r3, [r7, #14]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d102      	bne.n	8004460 <get_fileinfo+0xac>
 800445a:	2300      	movs	r3, #0
 800445c:	613b      	str	r3, [r7, #16]
 800445e:	e00d      	b.n	800447c <get_fileinfo+0xc8>
				di += wc;
 8004460:	89fb      	ldrh	r3, [r7, #14]
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4413      	add	r3, r2
 8004466:	613b      	str	r3, [r7, #16]
				hs = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	81bb      	strh	r3, [r7, #12]
			while (fs->lfnbuf[si] != 0) {
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	4413      	add	r3, r2
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1c2      	bne.n	8004402 <get_fileinfo+0x4e>
			}
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
 800447c:	89bb      	ldrh	r3, [r7, #12]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <get_fileinfo+0xd2>
 8004482:	2300      	movs	r3, #0
 8004484:	613b      	str	r3, [r7, #16]
			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	4413      	add	r3, r2
 800448c:	331a      	adds	r3, #26
 800448e:	2200      	movs	r2, #0
 8004490:	701a      	strb	r2, [r3, #0]
		}
	}

	si = di = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	613b      	str	r3, [r7, #16]
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	617b      	str	r3, [r7, #20]
	while (si < 11) {		/* Get SFN from SFN entry */
 800449a:	e026      	b.n	80044ea <get_fileinfo+0x136>
		wc = dp->dir[si++];			/* Get a char */
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	1c59      	adds	r1, r3, #1
 80044a4:	6179      	str	r1, [r7, #20]
 80044a6:	4413      	add	r3, r2
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	81fb      	strh	r3, [r7, #14]
		if (wc == ' ') continue;	/* Skip padding spaces */
 80044ac:	89fb      	ldrh	r3, [r7, #14]
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d100      	bne.n	80044b4 <get_fileinfo+0x100>
 80044b2:	e01a      	b.n	80044ea <get_fileinfo+0x136>
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
 80044b4:	89fb      	ldrh	r3, [r7, #14]
 80044b6:	2b05      	cmp	r3, #5
 80044b8:	d101      	bne.n	80044be <get_fileinfo+0x10a>
 80044ba:	23e5      	movs	r3, #229	; 0xe5
 80044bc:	81fb      	strh	r3, [r7, #14]
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	2b09      	cmp	r3, #9
 80044c2:	d109      	bne.n	80044d8 <get_fileinfo+0x124>
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	2b0b      	cmp	r3, #11
 80044c8:	d806      	bhi.n	80044d8 <get_fileinfo+0x124>
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	613a      	str	r2, [r7, #16]
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	4413      	add	r3, r2
 80044d4:	222e      	movs	r2, #46	; 0x2e
 80044d6:	735a      	strb	r2, [r3, #13]
		if (wc == 0) { di = 0; break; }		/* Wrong char in the current code page? */
		wc = put_utf(wc, &fno->altname[di], FF_SFN_BUF - di);	/* Store it in Unicode */
		if (wc == 0) { di = 0; break; }		/* Buffer overflow? */
		di += wc;
#else					/* ANSI/OEM output */
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	613a      	str	r2, [r7, #16]
 80044de:	89fa      	ldrh	r2, [r7, #14]
 80044e0:	b2d1      	uxtb	r1, r2
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	4413      	add	r3, r2
 80044e6:	460a      	mov	r2, r1
 80044e8:	735a      	strb	r2, [r3, #13]
	while (si < 11) {		/* Get SFN from SFN entry */
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2b0a      	cmp	r3, #10
 80044ee:	d9d5      	bls.n	800449c <get_fileinfo+0xe8>
#endif
	}
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	4413      	add	r3, r2
 80044f6:	330d      	adds	r3, #13
 80044f8:	2200      	movs	r2, #0
 80044fa:	701a      	strb	r2, [r3, #0]

	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	7e9b      	ldrb	r3, [r3, #26]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d150      	bne.n	80045a6 <get_fileinfo+0x1f2>
		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccesible */
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d107      	bne.n	800451a <get_fileinfo+0x166>
			fno->fname[di++] = '?';
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	613a      	str	r2, [r7, #16]
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	4413      	add	r3, r2
 8004514:	223f      	movs	r2, #63	; 0x3f
 8004516:	769a      	strb	r2, [r3, #26]
 8004518:	e036      	b.n	8004588 <get_fileinfo+0x1d4>
		} else {
			for (si = di = 0; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 800451a:	2300      	movs	r3, #0
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	617b      	str	r3, [r7, #20]
 8004522:	e02a      	b.n	800457a <get_fileinfo+0x1c6>
				wc = (WCHAR)fno->altname[si];
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	4413      	add	r3, r2
 800452a:	330d      	adds	r3, #13
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	81fb      	strh	r3, [r7, #14]
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & ((si >= 9) ? NS_EXT : NS_BODY))) wc += 0x20;
 8004530:	89fb      	ldrh	r3, [r7, #14]
 8004532:	2b40      	cmp	r3, #64	; 0x40
 8004534:	d913      	bls.n	800455e <get_fileinfo+0x1aa>
 8004536:	89fb      	ldrh	r3, [r7, #14]
 8004538:	2b5a      	cmp	r3, #90	; 0x5a
 800453a:	d810      	bhi.n	800455e <get_fileinfo+0x1aa>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004540:	330c      	adds	r3, #12
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	461a      	mov	r2, r3
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b08      	cmp	r3, #8
 800454a:	d901      	bls.n	8004550 <get_fileinfo+0x19c>
 800454c:	2310      	movs	r3, #16
 800454e:	e000      	b.n	8004552 <get_fileinfo+0x19e>
 8004550:	2308      	movs	r3, #8
 8004552:	4013      	ands	r3, r2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <get_fileinfo+0x1aa>
 8004558:	89fb      	ldrh	r3, [r7, #14]
 800455a:	3320      	adds	r3, #32
 800455c:	81fb      	strh	r3, [r7, #14]
				fno->fname[di] = (TCHAR)wc;
 800455e:	89fb      	ldrh	r3, [r7, #14]
 8004560:	b2d9      	uxtb	r1, r3
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	4413      	add	r3, r2
 8004568:	331a      	adds	r3, #26
 800456a:	460a      	mov	r2, r1
 800456c:	701a      	strb	r2, [r3, #0]
			for (si = di = 0; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	3301      	adds	r3, #1
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	3301      	adds	r3, #1
 8004578:	613b      	str	r3, [r7, #16]
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	4413      	add	r3, r2
 8004580:	330d      	adds	r3, #13
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1cd      	bne.n	8004524 <get_fileinfo+0x170>
			}
		}
		fno->fname[di] = 0;	/* Terminate the LFN */
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	4413      	add	r3, r2
 800458e:	331a      	adds	r3, #26
 8004590:	2200      	movs	r2, #0
 8004592:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004598:	330c      	adds	r3, #12
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d102      	bne.n	80045a6 <get_fileinfo+0x1f2>
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	2200      	movs	r2, #0
 80045a4:	735a      	strb	r2, [r3, #13]
		fno->fname[di++] = c;
	}
	fno->fname[di] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045aa:	7ada      	ldrb	r2, [r3, #11]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b4:	331c      	adds	r3, #28
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fd fa4a 	bl	8001a50 <ld_dword>
 80045bc:	4603      	mov	r3, r0
 80045be:	f04f 0400 	mov.w	r4, #0
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	e9c2 3400 	strd	r3, r4, [r2]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045cc:	3316      	adds	r3, #22
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fd fa26 	bl	8001a20 <ld_word>
 80045d4:	4603      	mov	r3, r0
 80045d6:	461a      	mov	r2, r3
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e0:	3318      	adds	r3, #24
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fd fa1c 	bl	8001a20 <ld_word>
 80045e8:	4603      	mov	r3, r0
 80045ea:	461a      	mov	r2, r3
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	811a      	strh	r2, [r3, #8]
 80045f0:	e000      	b.n	80045f4 <get_fileinfo+0x240>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 80045f2:	bf00      	nop
}
 80045f4:	371c      	adds	r7, #28
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd90      	pop	{r4, r7, pc}
	...

080045fc <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08a      	sub	sp, #40	; 0x28
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
	UINT i, ni, si, di;
	const TCHAR *p;


	/* Create LFN into LFN working buffer */
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	60bb      	str	r3, [r7, #8]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	613b      	str	r3, [r7, #16]
 8004614:	2300      	movs	r3, #0
 8004616:	617b      	str	r3, [r7, #20]
	for (;;) {
		uc = tchar2uni(&p);			/* Get a character */
 8004618:	f107 0308 	add.w	r3, r7, #8
 800461c:	4618      	mov	r0, r3
 800461e:	f7fd fc8c 	bl	8001f3a <tchar2uni>
 8004622:	60f8      	str	r0, [r7, #12]
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462a:	d101      	bne.n	8004630 <create_name+0x34>
 800462c:	2306      	movs	r3, #6
 800462e:	e1f7      	b.n	8004a20 <create_name+0x424>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004636:	d309      	bcc.n	800464c <create_name+0x50>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	0c19      	lsrs	r1, r3, #16
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	1c5a      	adds	r2, r3, #1
 8004640:	617a      	str	r2, [r7, #20]
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4413      	add	r3, r2
 8004648:	b28a      	uxth	r2, r1
 800464a:	801a      	strh	r2, [r3, #0]
		wc = (WCHAR)uc;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
 8004650:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004652:	2b1f      	cmp	r3, #31
 8004654:	d923      	bls.n	800469e <create_name+0xa2>
 8004656:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004658:	2b2f      	cmp	r3, #47	; 0x2f
 800465a:	d020      	beq.n	800469e <create_name+0xa2>
 800465c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800465e:	2b5c      	cmp	r3, #92	; 0x5c
 8004660:	d01d      	beq.n	800469e <create_name+0xa2>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8004662:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004664:	2b7f      	cmp	r3, #127	; 0x7f
 8004666:	d809      	bhi.n	800467c <create_name+0x80>
 8004668:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800466a:	4619      	mov	r1, r3
 800466c:	48a9      	ldr	r0, [pc, #676]	; (8004914 <create_name+0x318>)
 800466e:	f7fd fbff 	bl	8001e70 <chk_chr>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <create_name+0x80>
 8004678:	2306      	movs	r3, #6
 800467a:	e1d1      	b.n	8004a20 <create_name+0x424>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	2bfe      	cmp	r3, #254	; 0xfe
 8004680:	d901      	bls.n	8004686 <create_name+0x8a>
 8004682:	2306      	movs	r3, #6
 8004684:	e1cc      	b.n	8004a20 <create_name+0x424>
		lfn[di++] = wc;					/* Store the Unicode character */
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	1c5a      	adds	r2, r3, #1
 800468a:	617a      	str	r2, [r7, #20]
 800468c:	005b      	lsls	r3, r3, #1
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4413      	add	r3, r2
 8004692:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004694:	801a      	strh	r2, [r3, #0]
		uc = tchar2uni(&p);			/* Get a character */
 8004696:	e7bf      	b.n	8004618 <create_name+0x1c>
	}
	while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	3301      	adds	r3, #1
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	2b2f      	cmp	r3, #47	; 0x2f
 80046a4:	d0f8      	beq.n	8004698 <create_name+0x9c>
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	2b5c      	cmp	r3, #92	; 0x5c
 80046ac:	d0f4      	beq.n	8004698 <create_name+0x9c>
	*path = p;							/* Return pointer to the next segment */
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	601a      	str	r2, [r3, #0]
	cf = (wc < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80046b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046b6:	2b1f      	cmp	r3, #31
 80046b8:	d801      	bhi.n	80046be <create_name+0xc2>
 80046ba:	2304      	movs	r3, #4
 80046bc:	e000      	b.n	80046c0 <create_name+0xc4>
 80046be:	2300      	movs	r3, #0
 80046c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

#if FF_FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d109      	bne.n	80046de <create_name+0xe2>
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80046d0:	3b01      	subs	r3, #1
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	4413      	add	r3, r2
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	2b2e      	cmp	r3, #46	; 0x2e
 80046dc:	d016      	beq.n	800470c <create_name+0x110>
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d14e      	bne.n	8004782 <create_name+0x186>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80046ea:	3b01      	subs	r3, #1
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	4413      	add	r3, r2
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	2b2e      	cmp	r3, #46	; 0x2e
 80046f6:	d144      	bne.n	8004782 <create_name+0x186>
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80046fe:	3b02      	subs	r3, #2
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4413      	add	r3, r2
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	2b2e      	cmp	r3, #46	; 0x2e
 800470a:	d13a      	bne.n	8004782 <create_name+0x186>
		lfn[di] = 0;
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	4413      	add	r3, r2
 8004714:	2200      	movs	r2, #0
 8004716:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++) {		/* Create dot name for SFN entry */
 8004718:	2300      	movs	r3, #0
 800471a:	623b      	str	r3, [r7, #32]
 800471c:	e00f      	b.n	800473e <create_name+0x142>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800471e:	6a3a      	ldr	r2, [r7, #32]
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	429a      	cmp	r2, r3
 8004724:	d201      	bcs.n	800472a <create_name+0x12e>
 8004726:	212e      	movs	r1, #46	; 0x2e
 8004728:	e000      	b.n	800472c <create_name+0x130>
 800472a:	2120      	movs	r1, #32
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	4413      	add	r3, r2
 8004732:	3340      	adds	r3, #64	; 0x40
 8004734:	460a      	mov	r2, r1
 8004736:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++) {		/* Create dot name for SFN entry */
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	3301      	adds	r3, #1
 800473c:	623b      	str	r3, [r7, #32]
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	2b0a      	cmp	r3, #10
 8004742:	d9ec      	bls.n	800471e <create_name+0x122>
		}
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8004744:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004748:	f043 0320 	orr.w	r3, r3, #32
 800474c:	b2d9      	uxtb	r1, r3
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	4413      	add	r3, r2
 8004754:	3340      	adds	r3, #64	; 0x40
 8004756:	460a      	mov	r2, r1
 8004758:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800475a:	2300      	movs	r3, #0
 800475c:	e160      	b.n	8004a20 <create_name+0x424>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		wc = lfn[di - 1];
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004764:	3b01      	subs	r3, #1
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4413      	add	r3, r2
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc != ' ' && wc != '.') break;
 8004770:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004772:	2b20      	cmp	r3, #32
 8004774:	d002      	beq.n	800477c <create_name+0x180>
 8004776:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004778:	2b2e      	cmp	r3, #46	; 0x2e
 800477a:	d106      	bne.n	800478a <create_name+0x18e>
		di--;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	3b01      	subs	r3, #1
 8004780:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1ea      	bne.n	800475e <create_name+0x162>
 8004788:	e000      	b.n	800478c <create_name+0x190>
		if (wc != ' ' && wc != '.') break;
 800478a:	bf00      	nop
	}
	lfn[di] = 0;							/* LFN is created into the working buffer */
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4413      	add	r3, r2
 8004794:	2200      	movs	r2, #0
 8004796:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <create_name+0x1a6>
 800479e:	2306      	movs	r3, #6
 80047a0:	e13e      	b.n	8004a20 <create_name+0x424>

	/* Create SFN in directory form */
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 80047a2:	2300      	movs	r3, #0
 80047a4:	61bb      	str	r3, [r7, #24]
 80047a6:	e002      	b.n	80047ae <create_name+0x1b2>
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	3301      	adds	r3, #1
 80047ac:	61bb      	str	r3, [r7, #24]
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	4413      	add	r3, r2
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	2b20      	cmp	r3, #32
 80047ba:	d0f5      	beq.n	80047a8 <create_name+0x1ac>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d106      	bne.n	80047d0 <create_name+0x1d4>
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	693a      	ldr	r2, [r7, #16]
 80047c8:	4413      	add	r3, r2
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	2b2e      	cmp	r3, #46	; 0x2e
 80047ce:	d109      	bne.n	80047e4 <create_name+0x1e8>
 80047d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80047d4:	f043 0303 	orr.w	r3, r3, #3
 80047d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 80047dc:	e002      	b.n	80047e4 <create_name+0x1e8>
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d009      	beq.n	80047fe <create_name+0x202>
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80047f0:	3b01      	subs	r3, #1
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	4413      	add	r3, r2
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	2b2e      	cmp	r3, #46	; 0x2e
 80047fc:	d1ef      	bne.n	80047de <create_name+0x1e2>

	mem_set(dp->fn, ' ', 11);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	3340      	adds	r3, #64	; 0x40
 8004802:	220b      	movs	r2, #11
 8004804:	2120      	movs	r1, #32
 8004806:	4618      	mov	r0, r3
 8004808:	f7fd faf1 	bl	8001dee <mem_set>
	i = b = 0; ni = 8;
 800480c:	2300      	movs	r3, #0
 800480e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004812:	2300      	movs	r3, #0
 8004814:	623b      	str	r3, [r7, #32]
 8004816:	2308      	movs	r3, #8
 8004818:	61fb      	str	r3, [r7, #28]
	for (;;) {
		wc = lfn[si++];					/* Get an LFN character */
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	1c5a      	adds	r2, r3, #1
 800481e:	61ba      	str	r2, [r7, #24]
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	4413      	add	r3, r2
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc == 0) break;				/* Break on end of the LFN */
 800482a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 80ad 	beq.w	800498c <create_name+0x390>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 8004832:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004834:	2b20      	cmp	r3, #32
 8004836:	d006      	beq.n	8004846 <create_name+0x24a>
 8004838:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800483a:	2b2e      	cmp	r3, #46	; 0x2e
 800483c:	d10a      	bne.n	8004854 <create_name+0x258>
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	429a      	cmp	r2, r3
 8004844:	d006      	beq.n	8004854 <create_name+0x258>
			cf |= NS_LOSS | NS_LFN;
 8004846:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800484a:	f043 0303 	orr.w	r3, r3, #3
 800484e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			continue;
 8004852:	e09a      	b.n	800498a <create_name+0x38e>
		}

		if (i >= ni || si == di) {		/* End of field? */
 8004854:	6a3a      	ldr	r2, [r7, #32]
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	429a      	cmp	r2, r3
 800485a:	d203      	bcs.n	8004864 <create_name+0x268>
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	429a      	cmp	r2, r3
 8004862:	d123      	bne.n	80048ac <create_name+0x2b0>
			if (ni == 11) {				/* Name extension overflow? */
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	2b0b      	cmp	r3, #11
 8004868:	d106      	bne.n	8004878 <create_name+0x27c>
				cf |= NS_LOSS | NS_LFN;
 800486a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800486e:	f043 0303 	orr.w	r3, r3, #3
 8004872:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				break;
 8004876:	e08c      	b.n	8004992 <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	429a      	cmp	r2, r3
 800487e:	d005      	beq.n	800488c <create_name+0x290>
 8004880:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004884:	f043 0303 	orr.w	r3, r3, #3
 8004888:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;						/* No name extension? */
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	429a      	cmp	r2, r3
 8004892:	d87d      	bhi.n	8004990 <create_name+0x394>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	61bb      	str	r3, [r7, #24]
 8004898:	2308      	movs	r3, #8
 800489a:	623b      	str	r3, [r7, #32]
 800489c:	230b      	movs	r3, #11
 800489e:	61fb      	str	r3, [r7, #28]
 80048a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			continue;
 80048aa:	e06e      	b.n	800498a <create_name+0x38e>
		}

		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
 80048ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048ae:	2b7f      	cmp	r3, #127	; 0x7f
 80048b0:	d911      	bls.n	80048d6 <create_name+0x2da>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 80048b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80048b6:	f043 0302 	orr.w	r3, r3, #2
 80048ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
#elif FF_CODE_PAGE < 900	/* SBCS cfg */
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
#else						/* DBCS cfg */
			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Upper convert ==> ANSI/OEM code */
 80048be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048c0:	4618      	mov	r0, r3
 80048c2:	f002 fb89 	bl	8006fd8 <ff_wtoupper>
 80048c6:	4603      	mov	r3, r0
 80048c8:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80048cc:	4618      	mov	r0, r3
 80048ce:	f002 facf 	bl	8006e70 <ff_uni2oem>
 80048d2:	4603      	mov	r3, r0
 80048d4:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
		}

		if (wc >= 0x100) {				/* Is this a DBC? */
 80048d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048d8:	2bff      	cmp	r3, #255	; 0xff
 80048da:	d91d      	bls.n	8004918 <create_name+0x31c>
			if (i >= ni - 1) {			/* Field overflow? */
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	3b01      	subs	r3, #1
 80048e0:	6a3a      	ldr	r2, [r7, #32]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d308      	bcc.n	80048f8 <create_name+0x2fc>
				cf |= NS_LOSS | NS_LFN;
 80048e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80048ea:	f043 0303 	orr.w	r3, r3, #3
 80048ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				i = ni; continue;		/* Next field */
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	623b      	str	r3, [r7, #32]
 80048f6:	e048      	b.n	800498a <create_name+0x38e>
			}
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 80048f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80048fa:	0a1b      	lsrs	r3, r3, #8
 80048fc:	b299      	uxth	r1, r3
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	1c5a      	adds	r2, r3, #1
 8004902:	623a      	str	r2, [r7, #32]
 8004904:	b2c9      	uxtb	r1, r1
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	4413      	add	r3, r2
 800490a:	460a      	mov	r2, r1
 800490c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004910:	e031      	b.n	8004976 <create_name+0x37a>
 8004912:	bf00      	nop
 8004914:	080197c8 	.word	0x080197c8
		} else {						/* SBC */
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
 8004918:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <create_name+0x332>
 800491e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004920:	4619      	mov	r1, r3
 8004922:	4841      	ldr	r0, [pc, #260]	; (8004a28 <create_name+0x42c>)
 8004924:	f7fd faa4 	bl	8001e70 <chk_chr>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d008      	beq.n	8004940 <create_name+0x344>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800492e:	235f      	movs	r3, #95	; 0x5f
 8004930:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004932:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004936:	f043 0303 	orr.w	r3, r3, #3
 800493a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800493e:	e01a      	b.n	8004976 <create_name+0x37a>
			} else {
				if (IsUpper(wc)) {		/* ASCII upper case? */
 8004940:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004942:	2b40      	cmp	r3, #64	; 0x40
 8004944:	d908      	bls.n	8004958 <create_name+0x35c>
 8004946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004948:	2b5a      	cmp	r3, #90	; 0x5a
 800494a:	d805      	bhi.n	8004958 <create_name+0x35c>
					b |= 2;
 800494c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004950:	f043 0302 	orr.w	r3, r3, #2
 8004954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				if (IsLower(wc)) {		/* ASCII lower case? */
 8004958:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800495a:	2b60      	cmp	r3, #96	; 0x60
 800495c:	d90b      	bls.n	8004976 <create_name+0x37a>
 800495e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004960:	2b7a      	cmp	r3, #122	; 0x7a
 8004962:	d808      	bhi.n	8004976 <create_name+0x37a>
					b |= 1; wc -= 0x20;
 8004964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004968:	f043 0301 	orr.w	r3, r3, #1
 800496c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004970:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004972:	3b20      	subs	r3, #32
 8004974:	84bb      	strh	r3, [r7, #36]	; 0x24
				}
			}
		}
		dp->fn[i++] = (BYTE)wc;
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	623a      	str	r2, [r7, #32]
 800497c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800497e:	b2d1      	uxtb	r1, r2
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	4413      	add	r3, r2
 8004984:	460a      	mov	r2, r1
 8004986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		wc = lfn[si++];					/* Get an LFN character */
 800498a:	e746      	b.n	800481a <create_name+0x21e>
		if (wc == 0) break;				/* Break on end of the LFN */
 800498c:	bf00      	nop
 800498e:	e000      	b.n	8004992 <create_name+0x396>
			if (si > di) break;						/* No name extension? */
 8004990:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004998:	2be5      	cmp	r3, #229	; 0xe5
 800499a:	d103      	bne.n	80049a4 <create_name+0x3a8>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2205      	movs	r2, #5
 80049a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d104      	bne.n	80049b4 <create_name+0x3b8>
 80049aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 80049b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049b8:	f003 030c 	and.w	r3, r3, #12
 80049bc:	2b0c      	cmp	r3, #12
 80049be:	d005      	beq.n	80049cc <create_name+0x3d0>
 80049c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049c4:	f003 0303 	and.w	r3, r3, #3
 80049c8:	2b03      	cmp	r3, #3
 80049ca:	d105      	bne.n	80049d8 <create_name+0x3dc>
 80049cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80049d0:	f043 0302 	orr.w	r3, r3, #2
 80049d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 80049d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d117      	bne.n	8004a14 <create_name+0x418>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 80049e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d005      	beq.n	80049fc <create_name+0x400>
 80049f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80049f4:	f043 0310 	orr.w	r3, r3, #16
 80049f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 80049fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d005      	beq.n	8004a14 <create_name+0x418>
 8004a08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004a0c:	f043 0308 	orr.w	r3, r3, #8
 8004a10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004a1a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 8004a1e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* FF_USE_LFN */
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3728      	adds	r7, #40	; 0x28
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	080197d4 	.word	0x080197d4

08004a2c <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8004a2c:	b590      	push	{r4, r7, lr}
 8004a2e:	b09b      	sub	sp, #108	; 0x6c
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	663b      	str	r3, [r7, #96]	; 0x60


#if FF_FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b2f      	cmp	r3, #47	; 0x2f
 8004a42:	d00b      	beq.n	8004a5c <follow_path+0x30>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	2b5c      	cmp	r3, #92	; 0x5c
 8004a4a:	d007      	beq.n	8004a5c <follow_path+0x30>
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
 8004a4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a4e:	69da      	ldr	r2, [r3, #28]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	609a      	str	r2, [r3, #8]
 8004a54:	e00d      	b.n	8004a72 <follow_path+0x46>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	603b      	str	r3, [r7, #0]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	2b2f      	cmp	r3, #47	; 0x2f
 8004a62:	d0f8      	beq.n	8004a56 <follow_path+0x2a>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	2b5c      	cmp	r3, #92	; 0x5c
 8004a6a:	d0f4      	beq.n	8004a56 <follow_path+0x2a>
		dp->obj.sclust = 0;					/* Start from root directory */
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	609a      	str	r2, [r3, #8]
	}
#if FF_FS_EXFAT
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	61da      	str	r2, [r3, #28]
#if FF_FS_RPATH != 0
	if (fs->fs_type == FS_EXFAT && dp->obj.sclust) {	/* exFAT: Retrieve the sub-directory's status */
 8004a78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d135      	bne.n	8004aec <follow_path+0xc0>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d031      	beq.n	8004aec <follow_path+0xc0>
		DIR dj;

		dp->obj.c_scl = fs->cdc_scl;
 8004a88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a8a:	6a1a      	ldr	r2, [r3, #32]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	621a      	str	r2, [r3, #32]
		dp->obj.c_size = fs->cdc_size;
 8004a90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	625a      	str	r2, [r3, #36]	; 0x24
		dp->obj.c_ofs = fs->cdc_ofs;
 8004a98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	629a      	str	r2, [r3, #40]	; 0x28
		res = load_obj_xdir(&dj, &dp->obj);
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	f107 0308 	add.w	r3, r7, #8
 8004aa6:	4611      	mov	r1, r2
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fe ff86 	bl	80039ba <load_obj_xdir>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		if (res != FR_OK) return res;
 8004ab4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d002      	beq.n	8004ac2 <follow_path+0x96>
 8004abc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004ac0:	e0a6      	b.n	8004c10 <follow_path+0x1e4>
		dp->obj.objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
 8004ac2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	3338      	adds	r3, #56	; 0x38
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fc ffc1 	bl	8001a50 <ld_dword>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	f04f 0400 	mov.w	r4, #0
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	e9c2 3404 	strd	r3, r4, [r2, #16]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8004ada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	3321      	adds	r3, #33	; 0x21
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	71da      	strb	r2, [r3, #7]
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b1f      	cmp	r3, #31
 8004af2:	d80b      	bhi.n	8004b0c <follow_path+0xe0>
		dp->fn[NSFLAG] = NS_NONAME;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2280      	movs	r2, #128	; 0x80
 8004af8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 8004afc:	2100      	movs	r1, #0
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fe f99a 	bl	8002e38 <dir_sdi>
 8004b04:	4603      	mov	r3, r0
 8004b06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004b0a:	e07f      	b.n	8004c0c <follow_path+0x1e0>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004b0c:	463b      	mov	r3, r7
 8004b0e:	4619      	mov	r1, r3
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7ff fd73 	bl	80045fc <create_name>
 8004b16:	4603      	mov	r3, r0
 8004b18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			if (res != FR_OK) break;
 8004b1c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d16e      	bne.n	8004c02 <follow_path+0x1d6>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff f913 	bl	8003d50 <dir_find>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			ns = dp->fn[NSFLAG];
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8004b36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res != FR_OK) {				/* Failed to find the object */
 8004b3a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d021      	beq.n	8004b86 <follow_path+0x15a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004b42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d15d      	bne.n	8004c06 <follow_path+0x1da>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8004b4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b4e:	f003 0320 	and.w	r3, r3, #32
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00d      	beq.n	8004b72 <follow_path+0x146>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8004b56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d04d      	beq.n	8004bfe <follow_path+0x1d2>
						dp->fn[NSFLAG] = NS_NONAME;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2280      	movs	r2, #128	; 0x80
 8004b66:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
						res = FR_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8004b70:	e049      	b.n	8004c06 <follow_path+0x1da>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8004b72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d143      	bne.n	8004c06 <follow_path+0x1da>
 8004b7e:	2305      	movs	r3, #5
 8004b80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8004b84:	e03f      	b.n	8004c06 <follow_path+0x1da>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004b86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d13b      	bne.n	8004c0a <follow_path+0x1de>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	799b      	ldrb	r3, [r3, #6]
 8004b96:	f003 0310 	and.w	r3, r3, #16
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d103      	bne.n	8004ba6 <follow_path+0x17a>
				res = FR_NO_PATH; break;
 8004b9e:	2305      	movs	r3, #5
 8004ba0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004ba4:	e032      	b.n	8004c0c <follow_path+0x1e0>
			}
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8004ba6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	d117      	bne.n	8004bde <follow_path+0x1b2>
				dp->obj.c_scl = dp->obj.sclust;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	621a      	str	r2, [r3, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8004bbc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	79d2      	ldrb	r2, [r2, #7]
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	625a      	str	r2, [r3, #36]	; 0x24
				dp->obj.c_ofs = dp->blk_ofs;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	629a      	str	r2, [r3, #40]	; 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004bd8:	f7fe fec6 	bl	8003968 <init_alloc_info>
 8004bdc:	e796      	b.n	8004b0c <follow_path+0xe0>
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8004bde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004be0:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bec:	4413      	add	r3, r2
 8004bee:	4619      	mov	r1, r3
 8004bf0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004bf2:	f7fe faa8 	bl	8003146 <ld_clust>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	609a      	str	r2, [r3, #8]
 8004bfc:	e786      	b.n	8004b0c <follow_path+0xe0>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8004bfe:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004c00:	e784      	b.n	8004b0c <follow_path+0xe0>
			if (res != FR_OK) break;
 8004c02:	bf00      	nop
 8004c04:	e002      	b.n	8004c0c <follow_path+0x1e0>
				break;
 8004c06:	bf00      	nop
 8004c08:	e000      	b.n	8004c0c <follow_path+0x1e0>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8004c0a:	bf00      	nop
			}
		}
	}

	return res;
 8004c0c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	376c      	adds	r7, #108	; 0x6c
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd90      	pop	{r4, r7, pc}

08004c18 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b089      	sub	sp, #36	; 0x24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 8004c20:	f04f 33ff 	mov.w	r3, #4294967295
 8004c24:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	613b      	str	r3, [r7, #16]
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <get_ldnumber+0x22>
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	e02e      	b.n	8004c98 <get_ldnumber+0x80>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	1c5a      	adds	r2, r3, #1
 8004c3e:	61fa      	str	r2, [r7, #28]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	73fb      	strb	r3, [r7, #15]
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
 8004c46:	2b1f      	cmp	r3, #31
 8004c48:	d902      	bls.n	8004c50 <get_ldnumber+0x38>
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
 8004c4c:	2b3a      	cmp	r3, #58	; 0x3a
 8004c4e:	d1f4      	bne.n	8004c3a <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
 8004c52:	2b3a      	cmp	r3, #58	; 0x3a
 8004c54:	d11c      	bne.n	8004c90 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8004c56:	2301      	movs	r3, #1
 8004c58:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	2b2f      	cmp	r3, #47	; 0x2f
 8004c60:	d90c      	bls.n	8004c7c <get_ldnumber+0x64>
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b39      	cmp	r3, #57	; 0x39
 8004c68:	d808      	bhi.n	8004c7c <get_ldnumber+0x64>
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	3302      	adds	r3, #2
 8004c6e:	69fa      	ldr	r2, [r7, #28]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d103      	bne.n	8004c7c <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	3b30      	subs	r3, #48	; 0x30
 8004c7a:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	dc04      	bgt.n	8004c8c <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	69fa      	ldr	r2, [r7, #28]
 8004c8a:	601a      	str	r2, [r3, #0]
		}
		return vol;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	e003      	b.n	8004c98 <get_ldnumber+0x80>
		}
	}
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
 8004c90:	4b04      	ldr	r3, [pc, #16]	; (8004ca4 <get_ldnumber+0x8c>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	617b      	str	r3, [r7, #20]
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
 8004c96:	697b      	ldr	r3, [r7, #20]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3724      	adds	r7, #36	; 0x24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	200000ce 	.word	0x200000ce

08004ca8 <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	70da      	strb	r2, [r3, #3]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f04f 32ff 	mov.w	r2, #4294967295
 8004cbe:	649a      	str	r2, [r3, #72]	; 0x48
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004cc0:	6839      	ldr	r1, [r7, #0]
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7fd f9f2 	bl	80020ac <move_window>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <check_fs+0x2a>
 8004cce:	2304      	movs	r3, #4
 8004cd0:	e044      	b.n	8004d5c <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	334c      	adds	r3, #76	; 0x4c
 8004cd6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fc fea0 	bl	8001a20 <ld_word>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d001      	beq.n	8004cf0 <check_fs+0x48>
 8004cec:	2303      	movs	r3, #3
 8004cee:	e035      	b.n	8004d5c <check_fs+0xb4>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	334c      	adds	r3, #76	; 0x4c
 8004cf4:	220b      	movs	r2, #11
 8004cf6:	491b      	ldr	r1, [pc, #108]	; (8004d64 <check_fs+0xbc>)
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7fd f892 	bl	8001e22 <mem_cmp>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d101      	bne.n	8004d08 <check_fs+0x60>
 8004d04:	2301      	movs	r3, #1
 8004d06:	e029      	b.n	8004d5c <check_fs+0xb4>
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004d0e:	2be9      	cmp	r3, #233	; 0xe9
 8004d10:	d009      	beq.n	8004d26 <check_fs+0x7e>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004d18:	2beb      	cmp	r3, #235	; 0xeb
 8004d1a:	d004      	beq.n	8004d26 <check_fs+0x7e>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004d22:	2be8      	cmp	r3, #232	; 0xe8
 8004d24:	d119      	bne.n	8004d5a <check_fs+0xb2>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	334c      	adds	r3, #76	; 0x4c
 8004d2a:	3336      	adds	r3, #54	; 0x36
 8004d2c:	2203      	movs	r2, #3
 8004d2e:	490e      	ldr	r1, [pc, #56]	; (8004d68 <check_fs+0xc0>)
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fd f876 	bl	8001e22 <mem_cmp>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <check_fs+0x98>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	e00d      	b.n	8004d5c <check_fs+0xb4>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	334c      	adds	r3, #76	; 0x4c
 8004d44:	3352      	adds	r3, #82	; 0x52
 8004d46:	2205      	movs	r2, #5
 8004d48:	4908      	ldr	r1, [pc, #32]	; (8004d6c <check_fs+0xc4>)
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fd f869 	bl	8001e22 <mem_cmp>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <check_fs+0xb2>
 8004d56:	2300      	movs	r3, #0
 8004d58:	e000      	b.n	8004d5c <check_fs+0xb4>
	}
	return 2;	/* Valid BS but not FAT */
 8004d5a:	2302      	movs	r3, #2
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3708      	adds	r7, #8
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	080197dc 	.word	0x080197dc
 8004d68:	080197e8 	.word	0x080197e8
 8004d6c:	080197ec 	.word	0x080197ec

08004d70 <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 8004d70:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004d74:	b09c      	sub	sp, #112	; 0x70
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	60f8      	str	r0, [r7, #12]
 8004d7a:	60b9      	str	r1, [r7, #8]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f7ff ff46 	bl	8004c18 <get_ldnumber>
 8004d8c:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	da01      	bge.n	8004d98 <find_volume+0x28>
 8004d94:	230b      	movs	r3, #11
 8004d96:	e37b      	b.n	8005490 <find_volume+0x720>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8004d98:	4ab2      	ldr	r2, [pc, #712]	; (8005064 <find_volume+0x2f4>)
 8004d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004da0:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 8004da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <find_volume+0x3c>
 8004da8:	230c      	movs	r3, #12
 8004daa:	e371      	b.n	8005490 <find_volume+0x720>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004db0:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004db2:	79fb      	ldrb	r3, [r7, #7]
 8004db4:	f023 0301 	bic.w	r3, r3, #1
 8004db8:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 8004dba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d01a      	beq.n	8004df8 <find_volume+0x88>
		stat = disk_status(fs->pdrv);
 8004dc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dc4:	785b      	ldrb	r3, [r3, #1]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fc fb5e 	bl	8001488 <disk_status>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004dd2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10c      	bne.n	8004df8 <find_volume+0x88>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004dde:	79fb      	ldrb	r3, [r7, #7]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d007      	beq.n	8004df4 <find_volume+0x84>
 8004de4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8004df0:	230a      	movs	r3, #10
 8004df2:	e34d      	b.n	8005490 <find_volume+0x720>
			}
			return FR_OK;				/* The filesystem object is valid */
 8004df4:	2300      	movs	r3, #0
 8004df6:	e34b      	b.n	8005490 <find_volume+0x720>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 8004df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e04:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8004e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e08:	785b      	ldrb	r3, [r3, #1]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7fc fa52 	bl	80012b4 <disk_initialize>
 8004e10:	4603      	mov	r3, r0
 8004e12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004e16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004e22:	2303      	movs	r3, #3
 8004e24:	e334      	b.n	8005490 <find_volume+0x720>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004e26:	79fb      	ldrb	r3, [r7, #7]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d007      	beq.n	8004e3c <find_volume+0xcc>
 8004e2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8004e38:	230a      	movs	r3, #10
 8004e3a:	e329      	b.n	8005490 <find_volume+0x720>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK (MBR) and SFD (w/o partition). */
	bsect = 0;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004e40:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e42:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004e44:	f7ff ff30 	bl	8004ca8 <check_fs>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8004e4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d14b      	bne.n	8004eee <find_volume+0x17e>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004e56:	2300      	movs	r3, #0
 8004e58:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e5a:	e01f      	b.n	8004e9c <find_volume+0x12c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8004e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e5e:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8004e62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8004e6a:	4413      	add	r3, r2
 8004e6c:	643b      	str	r3, [r7, #64]	; 0x40
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004e6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e70:	3304      	adds	r3, #4
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d006      	beq.n	8004e86 <find_volume+0x116>
 8004e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e7a:	3308      	adds	r3, #8
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fc fde7 	bl	8001a50 <ld_dword>
 8004e82:	4602      	mov	r2, r0
 8004e84:	e000      	b.n	8004e88 <find_volume+0x118>
 8004e86:	2200      	movs	r2, #0
 8004e88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8004e90:	440b      	add	r3, r1
 8004e92:	f843 2c5c 	str.w	r2, [r3, #-92]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004e96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e98:	3301      	adds	r3, #1
 8004e9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	d9dc      	bls.n	8004e5c <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i != 0) i--;
 8004ea6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <find_volume+0x142>
 8004eac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004eb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8004eba:	4413      	add	r3, r2
 8004ebc:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8004ec0:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004ec2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d005      	beq.n	8004ed4 <find_volume+0x164>
 8004ec8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004eca:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004ecc:	f7ff feec 	bl	8004ca8 <check_fs>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	e000      	b.n	8004ed6 <find_volume+0x166>
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004eda:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d905      	bls.n	8004eee <find_volume+0x17e>
 8004ee2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ee8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004eea:	2b03      	cmp	r3, #3
 8004eec:	d9e1      	bls.n	8004eb2 <find_volume+0x142>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004eee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	d101      	bne.n	8004efa <find_volume+0x18a>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e2ca      	b.n	8005490 <find_volume+0x720>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004efa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d901      	bls.n	8004f06 <find_volume+0x196>
 8004f02:	230d      	movs	r3, #13
 8004f04:	e2c4      	b.n	8005490 <find_volume+0x720>

	/* An FAT volume is found (bsect). Following code initializes the filesystem object */

#if FF_FS_EXFAT
	if (fmt == 1) {
 8004f06:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	f040 813d 	bne.w	800518a <find_volume+0x41a>
		QWORD maxlba;
		DWORD so, cv, bcl;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8004f10:	230b      	movs	r3, #11
 8004f12:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f14:	e002      	b.n	8004f1c <find_volume+0x1ac>
 8004f16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f18:	3301      	adds	r3, #1
 8004f1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f1e:	2b3f      	cmp	r3, #63	; 0x3f
 8004f20:	d806      	bhi.n	8004f30 <find_volume+0x1c0>
 8004f22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f26:	4413      	add	r3, r2
 8004f28:	334c      	adds	r3, #76	; 0x4c
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0f2      	beq.n	8004f16 <find_volume+0x1a6>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8004f30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f32:	2b3f      	cmp	r3, #63	; 0x3f
 8004f34:	d801      	bhi.n	8004f3a <find_volume+0x1ca>
 8004f36:	230d      	movs	r3, #13
 8004f38:	e2aa      	b.n	8005490 <find_volume+0x720>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 8004f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f3c:	334c      	adds	r3, #76	; 0x4c
 8004f3e:	3368      	adds	r3, #104	; 0x68
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7fc fd6d 	bl	8001a20 <ld_word>
 8004f46:	4603      	mov	r3, r0
 8004f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f4c:	d001      	beq.n	8004f52 <find_volume+0x1e2>
 8004f4e:	230d      	movs	r3, #13
 8004f50:	e29e      	b.n	8005490 <find_volume+0x720>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8004f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f54:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004f58:	2b09      	cmp	r3, #9
 8004f5a:	d001      	beq.n	8004f60 <find_volume+0x1f0>
			return FR_NO_FILESYSTEM;
 8004f5c:	230d      	movs	r3, #13
 8004f5e:	e297      	b.n	8005490 <find_volume+0x720>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8004f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f62:	334c      	adds	r3, #76	; 0x4c
 8004f64:	3348      	adds	r3, #72	; 0x48
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fc fd95 	bl	8001a96 <ld_qword>
 8004f6c:	460a      	mov	r2, r1
 8004f6e:	4601      	mov	r1, r0
 8004f70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f72:	469b      	mov	fp, r3
 8004f74:	f04f 0c00 	mov.w	ip, #0
 8004f78:	eb1b 0301 	adds.w	r3, fp, r1
 8004f7c:	eb4c 0402 	adc.w	r4, ip, r2
 8004f80:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8004f84:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004f88:	2c01      	cmp	r4, #1
 8004f8a:	bf08      	it	eq
 8004f8c:	2b00      	cmpeq	r3, #0
 8004f8e:	d301      	bcc.n	8004f94 <find_volume+0x224>
 8004f90:	230d      	movs	r3, #13
 8004f92:	e27d      	b.n	8005490 <find_volume+0x720>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8004f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f96:	334c      	adds	r3, #76	; 0x4c
 8004f98:	3354      	adds	r3, #84	; 0x54
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fc fd58 	bl	8001a50 <ld_dword>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fa4:	631a      	str	r2, [r3, #48]	; 0x30

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8004fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fa8:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
 8004fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8004fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fb2:	789b      	ldrb	r3, [r3, #2]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d001      	beq.n	8004fbc <find_volume+0x24c>
 8004fb8:	230d      	movs	r3, #13
 8004fba:	e269      	b.n	8005490 <find_volume+0x720>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8004fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fbe:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	4093      	lsls	r3, r2
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fcc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8004fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fd0:	895b      	ldrh	r3, [r3, #10]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <find_volume+0x26a>
 8004fd6:	230d      	movs	r3, #13
 8004fd8:	e25a      	b.n	8005490 <find_volume+0x720>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8004fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fdc:	334c      	adds	r3, #76	; 0x4c
 8004fde:	335c      	adds	r3, #92	; 0x5c
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f7fc fd35 	bl	8001a50 <ld_dword>
 8004fe6:	6378      	str	r0, [r7, #52]	; 0x34
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8004fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fea:	4a1f      	ldr	r2, [pc, #124]	; (8005068 <find_volume+0x2f8>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d901      	bls.n	8004ff4 <find_volume+0x284>
 8004ff0:	230d      	movs	r3, #13
 8004ff2:	e24d      	b.n	8005490 <find_volume+0x720>
		fs->n_fatent = nclst + 2;
 8004ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff6:	1c9a      	adds	r2, r3, #2
 8004ff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ffa:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8004ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ffe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005000:	635a      	str	r2, [r3, #52]	; 0x34
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8005002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005004:	334c      	adds	r3, #76	; 0x4c
 8005006:	3358      	adds	r3, #88	; 0x58
 8005008:	4618      	mov	r0, r3
 800500a:	f7fc fd21 	bl	8001a50 <ld_dword>
 800500e:	4602      	mov	r2, r0
 8005010:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005012:	441a      	add	r2, r3
 8005014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005016:	641a      	str	r2, [r3, #64]	; 0x40
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8005018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800501a:	334c      	adds	r3, #76	; 0x4c
 800501c:	3350      	adds	r3, #80	; 0x50
 800501e:	4618      	mov	r0, r3
 8005020:	f7fc fd16 	bl	8001a50 <ld_dword>
 8005024:	4602      	mov	r2, r0
 8005026:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005028:	441a      	add	r2, r3
 800502a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800502c:	639a      	str	r2, [r3, #56]	; 0x38
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800502e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	4619      	mov	r1, r3
 8005034:	f04f 0200 	mov.w	r2, #0
 8005038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800503a:	895b      	ldrh	r3, [r3, #10]
 800503c:	4618      	mov	r0, r3
 800503e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005040:	fb03 f300 	mul.w	r3, r3, r0
 8005044:	469b      	mov	fp, r3
 8005046:	f04f 0c00 	mov.w	ip, #0
 800504a:	eb1b 0301 	adds.w	r3, fp, r1
 800504e:	eb4c 0402 	adc.w	r4, ip, r2
 8005052:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005056:	42a2      	cmp	r2, r4
 8005058:	bf08      	it	eq
 800505a:	4299      	cmpeq	r1, r3
 800505c:	d206      	bcs.n	800506c <find_volume+0x2fc>
 800505e:	230d      	movs	r3, #13
 8005060:	e216      	b.n	8005490 <find_volume+0x720>
 8005062:	bf00      	nop
 8005064:	200000c8 	.word	0x200000c8
 8005068:	7ffffffd 	.word	0x7ffffffd
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800506c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800506e:	334c      	adds	r3, #76	; 0x4c
 8005070:	3360      	adds	r3, #96	; 0x60
 8005072:	4618      	mov	r0, r3
 8005074:	f7fc fcec 	bl	8001a50 <ld_dword>
 8005078:	4602      	mov	r2, r0
 800507a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800507c:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Get bitmap location and check if it is contiguous (implementation assumption) */
		so = i = 0;
 800507e:	2300      	movs	r3, #0
 8005080:	65bb      	str	r3, [r7, #88]	; 0x58
 8005082:	2300      	movs	r3, #0
 8005084:	657b      	str	r3, [r7, #84]	; 0x54
		for (;;) {	/* Find the bitmap entry in the root directory (in only first cluster) */
			if (i == 0) {
 8005086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005088:	2b00      	cmp	r3, #0
 800508a:	d11c      	bne.n	80050c6 <find_volume+0x356>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
 800508c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800508e:	895b      	ldrh	r3, [r3, #10]
 8005090:	461a      	mov	r2, r3
 8005092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005094:	4293      	cmp	r3, r2
 8005096:	d301      	bcc.n	800509c <find_volume+0x32c>
 8005098:	230d      	movs	r3, #13
 800509a:	e1f9      	b.n	8005490 <find_volume+0x720>
				if (move_window(fs, clst2sect(fs, fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 800509c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800509e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a0:	4619      	mov	r1, r3
 80050a2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80050a4:	f7fd f89e 	bl	80021e4 <clst2sect>
 80050a8:	4602      	mov	r2, r0
 80050aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050ac:	4413      	add	r3, r2
 80050ae:	4619      	mov	r1, r3
 80050b0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80050b2:	f7fc fffb 	bl	80020ac <move_window>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <find_volume+0x350>
 80050bc:	2301      	movs	r3, #1
 80050be:	e1e7      	b.n	8005490 <find_volume+0x720>
				so++;
 80050c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050c2:	3301      	adds	r3, #1
 80050c4:	657b      	str	r3, [r7, #84]	; 0x54
			}
			if (fs->win[i] == ET_BITMAP) break;				/* Is it a bitmap entry? */
 80050c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050ca:	4413      	add	r3, r2
 80050cc:	334c      	adds	r3, #76	; 0x4c
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b81      	cmp	r3, #129	; 0x81
 80050d2:	d005      	beq.n	80050e0 <find_volume+0x370>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 80050d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050d6:	3320      	adds	r3, #32
 80050d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050dc:	65bb      	str	r3, [r7, #88]	; 0x58
			if (i == 0) {
 80050de:	e7d2      	b.n	8005086 <find_volume+0x316>
			if (fs->win[i] == ET_BITMAP) break;				/* Is it a bitmap entry? */
 80050e0:	bf00      	nop
		}
		bcl = ld_dword(fs->win + i + 20);					/* Bitmap cluster */
 80050e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050e4:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80050e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80050ea:	3314      	adds	r3, #20
 80050ec:	4413      	add	r3, r2
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fc fcae 	bl	8001a50 <ld_dword>
 80050f4:	6538      	str	r0, [r7, #80]	; 0x50
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;
 80050f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d904      	bls.n	8005106 <find_volume+0x396>
 80050fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005100:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005102:	429a      	cmp	r2, r3
 8005104:	d301      	bcc.n	800510a <find_volume+0x39a>
 8005106:	230d      	movs	r3, #13
 8005108:	e1c2      	b.n	8005490 <find_volume+0x720>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
 800510a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800510c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800510e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005110:	895b      	ldrh	r3, [r3, #10]
 8005112:	4619      	mov	r1, r3
 8005114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005116:	3b02      	subs	r3, #2
 8005118:	fb03 f301 	mul.w	r3, r3, r1
 800511c:	441a      	add	r2, r3
 800511e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005120:	645a      	str	r2, [r3, #68]	; 0x44
		for (;;) {	/* Check if bitmap is contiguous */
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 8005122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005128:	09db      	lsrs	r3, r3, #7
 800512a:	4413      	add	r3, r2
 800512c:	4619      	mov	r1, r3
 800512e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005130:	f7fc ffbc 	bl	80020ac <move_window>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <find_volume+0x3ce>
 800513a:	2301      	movs	r3, #1
 800513c:	e1a8      	b.n	8005490 <find_volume+0x720>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
 800513e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005140:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8005144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4413      	add	r3, r2
 800514e:	4618      	mov	r0, r3
 8005150:	f7fc fc7e 	bl	8001a50 <ld_dword>
 8005154:	6278      	str	r0, [r7, #36]	; 0x24
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800515c:	d008      	beq.n	8005170 <find_volume+0x400>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented? */
 800515e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005160:	3301      	adds	r3, #1
 8005162:	653b      	str	r3, [r7, #80]	; 0x50
 8005164:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	429a      	cmp	r2, r3
 800516a:	d0da      	beq.n	8005122 <find_volume+0x3b2>
 800516c:	230d      	movs	r3, #13
 800516e:	e18f      	b.n	8005490 <find_volume+0x720>
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 8005170:	bf00      	nop
		}

#if !FF_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005174:	f04f 32ff 	mov.w	r2, #4294967295
 8005178:	619a      	str	r2, [r3, #24]
 800517a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800517c:	699a      	ldr	r2, [r3, #24]
 800517e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005180:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8005182:	2304      	movs	r3, #4
 8005184:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8005188:	e170      	b.n	800546c <find_volume+0x6fc>
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800518a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800518c:	334c      	adds	r3, #76	; 0x4c
 800518e:	330b      	adds	r3, #11
 8005190:	4618      	mov	r0, r3
 8005192:	f7fc fc45 	bl	8001a20 <ld_word>
 8005196:	4603      	mov	r3, r0
 8005198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800519c:	d001      	beq.n	80051a2 <find_volume+0x432>
 800519e:	230d      	movs	r3, #13
 80051a0:	e176      	b.n	8005490 <find_volume+0x720>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80051a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051a4:	334c      	adds	r3, #76	; 0x4c
 80051a6:	3316      	adds	r3, #22
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7fc fc39 	bl	8001a20 <ld_word>
 80051ae:	4603      	mov	r3, r0
 80051b0:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80051b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d106      	bne.n	80051c6 <find_volume+0x456>
 80051b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ba:	334c      	adds	r3, #76	; 0x4c
 80051bc:	3324      	adds	r3, #36	; 0x24
 80051be:	4618      	mov	r0, r3
 80051c0:	f7fc fc46 	bl	8001a50 <ld_dword>
 80051c4:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 80051c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80051ca:	631a      	str	r2, [r3, #48]	; 0x30

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80051cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ce:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80051d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051d4:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80051d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051d8:	789b      	ldrb	r3, [r3, #2]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d005      	beq.n	80051ea <find_volume+0x47a>
 80051de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051e0:	789b      	ldrb	r3, [r3, #2]
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d001      	beq.n	80051ea <find_volume+0x47a>
 80051e6:	230d      	movs	r3, #13
 80051e8:	e152      	b.n	8005490 <find_volume+0x720>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80051ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ec:	789b      	ldrb	r3, [r3, #2]
 80051ee:	461a      	mov	r2, r3
 80051f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051f2:	fb02 f303 	mul.w	r3, r2, r3
 80051f6:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80051f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80051fe:	b29a      	uxth	r2, r3
 8005200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005202:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005206:	895b      	ldrh	r3, [r3, #10]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d008      	beq.n	800521e <find_volume+0x4ae>
 800520c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800520e:	895b      	ldrh	r3, [r3, #10]
 8005210:	461a      	mov	r2, r3
 8005212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005214:	895b      	ldrh	r3, [r3, #10]
 8005216:	3b01      	subs	r3, #1
 8005218:	4013      	ands	r3, r2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <find_volume+0x4b2>
 800521e:	230d      	movs	r3, #13
 8005220:	e136      	b.n	8005490 <find_volume+0x720>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005224:	334c      	adds	r3, #76	; 0x4c
 8005226:	3311      	adds	r3, #17
 8005228:	4618      	mov	r0, r3
 800522a:	f7fc fbf9 	bl	8001a20 <ld_word>
 800522e:	4603      	mov	r3, r0
 8005230:	461a      	mov	r2, r3
 8005232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005234:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005238:	891b      	ldrh	r3, [r3, #8]
 800523a:	f003 030f 	and.w	r3, r3, #15
 800523e:	b29b      	uxth	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <find_volume+0x4d8>
 8005244:	230d      	movs	r3, #13
 8005246:	e123      	b.n	8005490 <find_volume+0x720>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800524a:	334c      	adds	r3, #76	; 0x4c
 800524c:	3313      	adds	r3, #19
 800524e:	4618      	mov	r0, r3
 8005250:	f7fc fbe6 	bl	8001a20 <ld_word>
 8005254:	4603      	mov	r3, r0
 8005256:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005258:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800525a:	2b00      	cmp	r3, #0
 800525c:	d106      	bne.n	800526c <find_volume+0x4fc>
 800525e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005260:	334c      	adds	r3, #76	; 0x4c
 8005262:	3320      	adds	r3, #32
 8005264:	4618      	mov	r0, r3
 8005266:	f7fc fbf3 	bl	8001a50 <ld_dword>
 800526a:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800526c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800526e:	334c      	adds	r3, #76	; 0x4c
 8005270:	330e      	adds	r3, #14
 8005272:	4618      	mov	r0, r3
 8005274:	f7fc fbd4 	bl	8001a20 <ld_word>
 8005278:	4603      	mov	r3, r0
 800527a:	87fb      	strh	r3, [r7, #62]	; 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800527c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <find_volume+0x516>
 8005282:	230d      	movs	r3, #13
 8005284:	e104      	b.n	8005490 <find_volume+0x720>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005286:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8005288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800528a:	4413      	add	r3, r2
 800528c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800528e:	8912      	ldrh	r2, [r2, #8]
 8005290:	0912      	lsrs	r2, r2, #4
 8005292:	b292      	uxth	r2, r2
 8005294:	4413      	add	r3, r2
 8005296:	63bb      	str	r3, [r7, #56]	; 0x38
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005298:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800529a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529c:	429a      	cmp	r2, r3
 800529e:	d201      	bcs.n	80052a4 <find_volume+0x534>
 80052a0:	230d      	movs	r3, #13
 80052a2:	e0f5      	b.n	8005490 <find_volume+0x720>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80052a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052ac:	8952      	ldrh	r2, [r2, #10]
 80052ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80052b2:	637b      	str	r3, [r7, #52]	; 0x34
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80052b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <find_volume+0x54e>
 80052ba:	230d      	movs	r3, #13
 80052bc:	e0e8      	b.n	8005490 <find_volume+0x720>
		fmt = 0;
 80052be:	2300      	movs	r3, #0
 80052c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 80052c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c6:	4a75      	ldr	r2, [pc, #468]	; (800549c <find_volume+0x72c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d802      	bhi.n	80052d2 <find_volume+0x562>
 80052cc:	2303      	movs	r3, #3
 80052ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80052d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80052d8:	4293      	cmp	r3, r2
 80052da:	d802      	bhi.n	80052e2 <find_volume+0x572>
 80052dc:	2302      	movs	r3, #2
 80052de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80052e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d802      	bhi.n	80052f2 <find_volume+0x582>
 80052ec:	2301      	movs	r3, #1
 80052ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (fmt == 0) return FR_NO_FILESYSTEM;
 80052f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <find_volume+0x58e>
 80052fa:	230d      	movs	r3, #13
 80052fc:	e0c8      	b.n	8005490 <find_volume+0x720>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80052fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005300:	1c9a      	adds	r2, r3, #2
 8005302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005304:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
 8005306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005308:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800530a:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800530c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800530e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005310:	441a      	add	r2, r3
 8005312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005314:	639a      	str	r2, [r3, #56]	; 0x38
		fs->database = bsect + sysect;					/* Data start sector */
 8005316:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531a:	441a      	add	r2, r3
 800531c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800531e:	641a      	str	r2, [r3, #64]	; 0x40
		if (fmt == FS_FAT32) {
 8005320:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005324:	2b03      	cmp	r3, #3
 8005326:	d11e      	bne.n	8005366 <find_volume+0x5f6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800532a:	334c      	adds	r3, #76	; 0x4c
 800532c:	332a      	adds	r3, #42	; 0x2a
 800532e:	4618      	mov	r0, r3
 8005330:	f7fc fb76 	bl	8001a20 <ld_word>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <find_volume+0x5ce>
 800533a:	230d      	movs	r3, #13
 800533c:	e0a8      	b.n	8005490 <find_volume+0x720>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800533e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005340:	891b      	ldrh	r3, [r3, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <find_volume+0x5da>
 8005346:	230d      	movs	r3, #13
 8005348:	e0a2      	b.n	8005490 <find_volume+0x720>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800534a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800534c:	334c      	adds	r3, #76	; 0x4c
 800534e:	332c      	adds	r3, #44	; 0x2c
 8005350:	4618      	mov	r0, r3
 8005352:	f7fc fb7d 	bl	8001a50 <ld_dword>
 8005356:	4602      	mov	r2, r0
 8005358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800535a:	63da      	str	r2, [r3, #60]	; 0x3c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800535c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005364:	e01f      	b.n	80053a6 <find_volume+0x636>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005368:	891b      	ldrh	r3, [r3, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <find_volume+0x602>
 800536e:	230d      	movs	r3, #13
 8005370:	e08e      	b.n	8005490 <find_volume+0x720>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005376:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005378:	441a      	add	r2, r3
 800537a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800537c:	63da      	str	r2, [r3, #60]	; 0x3c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800537e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005382:	2b02      	cmp	r3, #2
 8005384:	d103      	bne.n	800538e <find_volume+0x61e>
 8005386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	e00a      	b.n	80053a4 <find_volume+0x634>
 800538e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005392:	4613      	mov	r3, r2
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	4413      	add	r3, r2
 8005398:	085a      	lsrs	r2, r3, #1
 800539a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800539c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80053a4:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80053a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053ac:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80053b0:	0a5b      	lsrs	r3, r3, #9
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d201      	bcs.n	80053ba <find_volume+0x64a>
 80053b6:	230d      	movs	r3, #13
 80053b8:	e06a      	b.n	8005490 <find_volume+0x720>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80053ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053bc:	f04f 32ff 	mov.w	r2, #4294967295
 80053c0:	619a      	str	r2, [r3, #24]
 80053c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053c4:	699a      	ldr	r2, [r3, #24]
 80053c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053c8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80053ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053cc:	2280      	movs	r2, #128	; 0x80
 80053ce:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 80053d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80053d4:	2b03      	cmp	r3, #3
 80053d6:	d149      	bne.n	800546c <find_volume+0x6fc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80053d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053da:	334c      	adds	r3, #76	; 0x4c
 80053dc:	3330      	adds	r3, #48	; 0x30
 80053de:	4618      	mov	r0, r3
 80053e0:	f7fc fb1e 	bl	8001a20 <ld_word>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d140      	bne.n	800546c <find_volume+0x6fc>
			&& move_window(fs, bsect + 1) == FR_OK)
 80053ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053ec:	3301      	adds	r3, #1
 80053ee:	4619      	mov	r1, r3
 80053f0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80053f2:	f7fc fe5b 	bl	80020ac <move_window>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d137      	bne.n	800546c <find_volume+0x6fc>
		{
			fs->fsi_flag = 0;
 80053fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053fe:	2200      	movs	r2, #0
 8005400:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8005402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005404:	334c      	adds	r3, #76	; 0x4c
 8005406:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800540a:	4618      	mov	r0, r3
 800540c:	f7fc fb08 	bl	8001a20 <ld_word>
 8005410:	4603      	mov	r3, r0
 8005412:	461a      	mov	r2, r3
 8005414:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005418:	429a      	cmp	r2, r3
 800541a:	d127      	bne.n	800546c <find_volume+0x6fc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800541c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800541e:	334c      	adds	r3, #76	; 0x4c
 8005420:	4618      	mov	r0, r3
 8005422:	f7fc fb15 	bl	8001a50 <ld_dword>
 8005426:	4602      	mov	r2, r0
 8005428:	4b1d      	ldr	r3, [pc, #116]	; (80054a0 <find_volume+0x730>)
 800542a:	429a      	cmp	r2, r3
 800542c:	d11e      	bne.n	800546c <find_volume+0x6fc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800542e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005430:	334c      	adds	r3, #76	; 0x4c
 8005432:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005436:	4618      	mov	r0, r3
 8005438:	f7fc fb0a 	bl	8001a50 <ld_dword>
 800543c:	4602      	mov	r2, r0
 800543e:	4b19      	ldr	r3, [pc, #100]	; (80054a4 <find_volume+0x734>)
 8005440:	429a      	cmp	r2, r3
 8005442:	d113      	bne.n	800546c <find_volume+0x6fc>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005446:	334c      	adds	r3, #76	; 0x4c
 8005448:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800544c:	4618      	mov	r0, r3
 800544e:	f7fc faff 	bl	8001a50 <ld_dword>
 8005452:	4602      	mov	r2, r0
 8005454:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005456:	619a      	str	r2, [r3, #24]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800545a:	334c      	adds	r3, #76	; 0x4c
 800545c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005460:	4618      	mov	r0, r3
 8005462:	f7fc faf5 	bl	8001a50 <ld_dword>
 8005466:	4602      	mov	r2, r0
 8005468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800546a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800546c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800546e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8005472:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8005474:	4b0c      	ldr	r3, [pc, #48]	; (80054a8 <find_volume+0x738>)
 8005476:	881b      	ldrh	r3, [r3, #0]
 8005478:	3301      	adds	r3, #1
 800547a:	b29a      	uxth	r2, r3
 800547c:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <find_volume+0x738>)
 800547e:	801a      	strh	r2, [r3, #0]
 8005480:	4b09      	ldr	r3, [pc, #36]	; (80054a8 <find_volume+0x738>)
 8005482:	881a      	ldrh	r2, [r3, #0]
 8005484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005486:	80da      	strh	r2, [r3, #6]
#if FF_FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if FF_FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8005488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800548a:	2200      	movs	r2, #0
 800548c:	61da      	str	r2, [r3, #28]
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3770      	adds	r7, #112	; 0x70
 8005494:	46bd      	mov	sp, r7
 8005496:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800549a:	bf00      	nop
 800549c:	0ffffff5 	.word	0x0ffffff5
 80054a0:	41615252 	.word	0x41615252
 80054a4:	61417272 	.word	0x61417272
 80054a8:	200000cc 	.word	0x200000cc

080054ac <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80054b6:	2309      	movs	r3, #9
 80054b8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d01c      	beq.n	80054fa <validate+0x4e>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d018      	beq.n	80054fa <validate+0x4e>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d013      	beq.n	80054fa <validate+0x4e>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	889a      	ldrh	r2, [r3, #4]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	88db      	ldrh	r3, [r3, #6]
 80054dc:	429a      	cmp	r2, r3
 80054de:	d10c      	bne.n	80054fa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	785b      	ldrb	r3, [r3, #1]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fb ffce 	bl	8001488 <disk_status>
 80054ec:	4603      	mov	r3, r0
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <validate+0x4e>
			res = FR_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d102      	bne.n	8005506 <validate+0x5a>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	e000      	b.n	8005508 <validate+0x5c>
 8005506:	2300      	movs	r3, #0
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	6013      	str	r3, [r2, #0]
	return res;
 800550c:	7bfb      	ldrb	r3, [r7, #15]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
	...

08005518 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b088      	sub	sp, #32
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	4613      	mov	r3, r2
 8005524:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800552a:	f107 0310 	add.w	r3, r7, #16
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff fb72 	bl	8004c18 <get_ldnumber>
 8005534:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	2b00      	cmp	r3, #0
 800553a:	da01      	bge.n	8005540 <f_mount+0x28>
 800553c:	230b      	movs	r3, #11
 800553e:	e025      	b.n	800558c <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005540:	4a14      	ldr	r2, [pc, #80]	; (8005594 <f_mount+0x7c>)
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005548:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	2200      	movs	r2, #0
 8005554:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d002      	beq.n	8005562 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	490b      	ldr	r1, [pc, #44]	; (8005594 <f_mount+0x7c>)
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 800556c:	79fb      	ldrb	r3, [r7, #7]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <f_mount+0x5e>
 8005572:	2300      	movs	r3, #0
 8005574:	e00a      	b.n	800558c <f_mount+0x74>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005576:	f107 010c 	add.w	r1, r7, #12
 800557a:	f107 0308 	add.w	r3, r7, #8
 800557e:	2200      	movs	r2, #0
 8005580:	4618      	mov	r0, r3
 8005582:	f7ff fbf5 	bl	8004d70 <find_volume>
 8005586:	4603      	mov	r3, r0
 8005588:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800558a:	7dfb      	ldrb	r3, [r7, #23]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3720      	adds	r7, #32
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	200000c8 	.word	0x200000c8

08005598 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005598:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800559c:	b0a4      	sub	sp, #144	; 0x90
 800559e:	af00      	add	r7, sp, #0
 80055a0:	60f8      	str	r0, [r7, #12]
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	4613      	mov	r3, r2
 80055a6:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <f_open+0x1a>
 80055ae:	2309      	movs	r3, #9
 80055b0:	e22d      	b.n	8005a0e <f_open+0x476>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 80055b2:	79fb      	ldrb	r3, [r7, #7]
 80055b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055b8:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80055ba:	79fa      	ldrb	r2, [r7, #7]
 80055bc:	f107 0114 	add.w	r1, r7, #20
 80055c0:	f107 0308 	add.w	r3, r7, #8
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff fbd3 	bl	8004d70 <find_volume>
 80055ca:	4603      	mov	r3, r0
 80055cc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (res == FR_OK) {
 80055d0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f040 8211 	bne.w	80059fc <f_open+0x464>
		dj.obj.fs = fs;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
 80055de:	f44f 608c 	mov.w	r0, #1120	; 0x460
 80055e2:	f001 fc2d 	bl	8006e40 <ff_memalloc>
 80055e6:	67f8      	str	r0, [r7, #124]	; 0x7c
 80055e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <f_open+0x5a>
 80055ee:	2311      	movs	r3, #17
 80055f0:	e20d      	b.n	8005a0e <f_open+0x476>
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80055f6:	60da      	str	r2, [r3, #12]
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80055fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8005600:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8005602:	68ba      	ldr	r2, [r7, #8]
 8005604:	f107 0318 	add.w	r3, r7, #24
 8005608:	4611      	mov	r1, r2
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff fa0e 	bl	8004a2c <follow_path>
 8005610:	4603      	mov	r3, r0
 8005612:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8005616:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800561a:	2b00      	cmp	r3, #0
 800561c:	d107      	bne.n	800562e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800561e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8005622:	b25b      	sxtb	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	da02      	bge.n	800562e <f_open+0x96>
				res = FR_INVALID_NAME;
 8005628:	2306      	movs	r3, #6
 800562a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800562e:	79fb      	ldrb	r3, [r7, #7]
 8005630:	f003 031c 	and.w	r3, r3, #28
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 80c8 	beq.w	80057ca <f_open+0x232>
			if (res != FR_OK) {					/* No file, create new */
 800563a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800563e:	2b00      	cmp	r3, #0
 8005640:	d010      	beq.n	8005664 <f_open+0xcc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005642:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8005646:	2b04      	cmp	r3, #4
 8005648:	d107      	bne.n	800565a <f_open+0xc2>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800564a:	f107 0318 	add.w	r3, r7, #24
 800564e:	4618      	mov	r0, r3
 8005650:	f7fe fca6 	bl	8003fa0 <dir_register>
 8005654:	4603      	mov	r3, r0
 8005656:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800565a:	79fb      	ldrb	r3, [r7, #7]
 800565c:	f043 0308 	orr.w	r3, r3, #8
 8005660:	71fb      	strb	r3, [r7, #7]
 8005662:	e010      	b.n	8005686 <f_open+0xee>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005664:	7fbb      	ldrb	r3, [r7, #30]
 8005666:	f003 0311 	and.w	r3, r3, #17
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <f_open+0xde>
					res = FR_DENIED;
 800566e:	2307      	movs	r3, #7
 8005670:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8005674:	e007      	b.n	8005686 <f_open+0xee>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005676:	79fb      	ldrb	r3, [r7, #7]
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <f_open+0xee>
 8005680:	2308      	movs	r3, #8
 8005682:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8005686:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800568a:	2b00      	cmp	r3, #0
 800568c:	f040 80b7 	bne.w	80057fe <f_open+0x266>
 8005690:	79fb      	ldrb	r3, [r7, #7]
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 80b1 	beq.w	80057fe <f_open+0x266>
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b04      	cmp	r3, #4
 80056a2:	d14d      	bne.n	8005740 <f_open+0x1a8>
					/* Get current allocation info */
					fp->obj.fs = fs;
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	601a      	str	r2, [r3, #0]
					init_alloc_info(fs, &fp->obj);
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4611      	mov	r1, r2
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7fe f959 	bl	8003968 <init_alloc_info>
					/* Set directory entry block initial state */
					mem_set(fs->dirbuf + 2, 0, 30);		/* Clear 85 entry except for NumSec */
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	3302      	adds	r3, #2
 80056bc:	221e      	movs	r2, #30
 80056be:	2100      	movs	r1, #0
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7fc fb94 	bl	8001dee <mem_set>
					mem_set(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	3326      	adds	r3, #38	; 0x26
 80056cc:	221a      	movs	r2, #26
 80056ce:	2100      	movs	r1, #0
 80056d0:	4618      	mov	r0, r3
 80056d2:	f7fc fb8c 	bl	8001dee <mem_set>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	3304      	adds	r3, #4
 80056dc:	2220      	movs	r2, #32
 80056de:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	f103 0408 	add.w	r4, r3, #8
 80056e8:	f7fc f990 	bl	8001a0c <get_fattime>
 80056ec:	4603      	mov	r3, r0
 80056ee:	4619      	mov	r1, r3
 80056f0:	4620      	mov	r0, r4
 80056f2:	f7fc faa8 	bl	8001c46 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	3321      	adds	r3, #33	; 0x21
 80056fc:	2201      	movs	r2, #1
 80056fe:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8005700:	f107 0318 	add.w	r3, r7, #24
 8005704:	4618      	mov	r0, r3
 8005706:	f7fe f998 	bl	8003a3a <store_xdir>
 800570a:	4603      	mov	r3, r0
 800570c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
 8005710:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8005714:	2b00      	cmp	r3, #0
 8005716:	d172      	bne.n	80057fe <f_open+0x266>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d06e      	beq.n	80057fe <f_open+0x266>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	2200      	movs	r2, #0
 8005728:	4619      	mov	r1, r3
 800572a:	f7fd f8d9 	bl	80028e0 <remove_chain>
 800572e:	4603      	mov	r3, r0
 8005730:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	3a01      	subs	r2, #1
 800573c:	615a      	str	r2, [r3, #20]
 800573e:	e05e      	b.n	80057fe <f_open+0x266>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005744:	4611      	mov	r1, r2
 8005746:	4618      	mov	r0, r3
 8005748:	f7fd fcfd 	bl	8003146 <ld_clust>
 800574c:	67b8      	str	r0, [r7, #120]	; 0x78
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 800574e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005750:	f103 040e 	add.w	r4, r3, #14
 8005754:	f7fc f95a 	bl	8001a0c <get_fattime>
 8005758:	4603      	mov	r3, r0
 800575a:	4619      	mov	r1, r3
 800575c:	4620      	mov	r0, r4
 800575e:	f7fc fa72 	bl	8001c46 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005764:	330b      	adds	r3, #11
 8005766:	2220      	movs	r2, #32
 8005768:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800576e:	2200      	movs	r2, #0
 8005770:	4618      	mov	r0, r3
 8005772:	f7fd fd07 	bl	8003184 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005778:	331c      	adds	r3, #28
 800577a:	2100      	movs	r1, #0
 800577c:	4618      	mov	r0, r3
 800577e:	f7fc fa62 	bl	8001c46 <st_dword>
					fs->wflag = 1;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2201      	movs	r2, #1
 8005786:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8005788:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800578a:	2b00      	cmp	r3, #0
 800578c:	d037      	beq.n	80057fe <f_open+0x266>
						dw = fs->winsect;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005792:	677b      	str	r3, [r7, #116]	; 0x74
						res = remove_chain(&dj.obj, cl, 0);
 8005794:	f107 0318 	add.w	r3, r7, #24
 8005798:	2200      	movs	r2, #0
 800579a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800579c:	4618      	mov	r0, r3
 800579e:	f7fd f89f 	bl	80028e0 <remove_chain>
 80057a2:	4603      	mov	r3, r0
 80057a4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						if (res == FR_OK) {
 80057a8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d126      	bne.n	80057fe <f_open+0x266>
							res = move_window(fs, dw);
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7fc fc79 	bl	80020ac <move_window>
 80057ba:	4603      	mov	r3, r0
 80057bc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80057c4:	3a01      	subs	r2, #1
 80057c6:	615a      	str	r2, [r3, #20]
 80057c8:	e019      	b.n	80057fe <f_open+0x266>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 80057ca:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d115      	bne.n	80057fe <f_open+0x266>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 80057d2:	7fbb      	ldrb	r3, [r7, #30]
 80057d4:	f003 0310 	and.w	r3, r3, #16
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d003      	beq.n	80057e4 <f_open+0x24c>
					res = FR_NO_FILE;
 80057dc:	2304      	movs	r3, #4
 80057de:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80057e2:	e00c      	b.n	80057fe <f_open+0x266>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 80057e4:	79fb      	ldrb	r3, [r7, #7]
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d007      	beq.n	80057fe <f_open+0x266>
 80057ee:	7fbb      	ldrb	r3, [r7, #30]
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <f_open+0x266>
						res = FR_DENIED;
 80057f8:	2307      	movs	r3, #7
 80057fa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					}
				}
			}
		}
		if (res == FR_OK) {
 80057fe:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10f      	bne.n	8005826 <f_open+0x28e>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8005806:	79fb      	ldrb	r3, [r7, #7]
 8005808:	f003 0308 	and.w	r3, r3, #8
 800580c:	2b00      	cmp	r3, #0
 800580e:	d003      	beq.n	8005818 <f_open+0x280>
 8005810:	79fb      	ldrb	r3, [r7, #7]
 8005812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005816:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 8005820:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	64da      	str	r2, [r3, #76]	; 0x4c
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005826:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800582a:	2b00      	cmp	r3, #0
 800582c:	f040 80e3 	bne.w	80059f6 <f_open+0x45e>
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b04      	cmp	r3, #4
 8005836:	d114      	bne.n	8005862 <f_open+0x2ca>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8005838:	6a3a      	ldr	r2, [r7, #32]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800583e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8005842:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005846:	7ffa      	ldrb	r2, [r7, #31]
 8005848:	431a      	orrs	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800584e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	629a      	str	r2, [r3, #40]	; 0x28
				init_alloc_info(fs, &fp->obj);
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	4611      	mov	r1, r2
 800585a:	4618      	mov	r0, r3
 800585c:	f7fe f884 	bl	8003968 <init_alloc_info>
 8005860:	e013      	b.n	800588a <f_open+0x2f2>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005866:	4611      	mov	r1, r2
 8005868:	4618      	mov	r0, r3
 800586a:	f7fd fc6c 	bl	8003146 <ld_clust>
 800586e:	4602      	mov	r2, r0
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005876:	331c      	adds	r3, #28
 8005878:	4618      	mov	r0, r3
 800587a:	f7fc f8e9 	bl	8001a50 <ld_dword>
 800587e:	4603      	mov	r3, r0
 8005880:	f04f 0400 	mov.w	r4, #0
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	88da      	ldrh	r2, [r3, #6]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	79fa      	ldrb	r2, [r7, #7]
 800589c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	f04f 0300 	mov.w	r3, #0
 80058b4:	f04f 0400 	mov.w	r4, #0
 80058b8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3350      	adds	r3, #80	; 0x50
 80058c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058c4:	2100      	movs	r1, #0
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fc fa91 	bl	8001dee <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80058cc:	79fb      	ldrb	r3, [r7, #7]
 80058ce:	f003 0320 	and.w	r3, r3, #32
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 808f 	beq.w	80059f6 <f_open+0x45e>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80058de:	4323      	orrs	r3, r4
 80058e0:	f000 8089 	beq.w	80059f6 <f_open+0x45e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	895b      	ldrh	r3, [r3, #10]
 80058f4:	025b      	lsls	r3, r3, #9
 80058f6:	673b      	str	r3, [r7, #112]	; 0x70
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8005906:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 800590a:	e024      	b.n	8005956 <f_open+0x3be>
					clst = get_fat(&fp->obj, clst);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8005912:	4618      	mov	r0, r3
 8005914:	f7fc fc86 	bl	8002224 <get_fat>
 8005918:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					if (clst <= 1) res = FR_INT_ERR;
 800591c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005920:	2b01      	cmp	r3, #1
 8005922:	d802      	bhi.n	800592a <f_open+0x392>
 8005924:	2302      	movs	r3, #2
 8005926:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800592a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800592e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005932:	d102      	bne.n	800593a <f_open+0x3a2>
 8005934:	2301      	movs	r3, #1
 8005936:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800593a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800593c:	469b      	mov	fp, r3
 800593e:	f04f 0c00 	mov.w	ip, #0
 8005942:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005946:	460b      	mov	r3, r1
 8005948:	4614      	mov	r4, r2
 800594a:	ebb3 030b 	subs.w	r3, r3, fp
 800594e:	eb64 040c 	sbc.w	r4, r4, ip
 8005952:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 8005956:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800595a:	2b00      	cmp	r3, #0
 800595c:	d109      	bne.n	8005972 <f_open+0x3da>
 800595e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005960:	4619      	mov	r1, r3
 8005962:	f04f 0200 	mov.w	r2, #0
 8005966:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 800596a:	42a2      	cmp	r2, r4
 800596c:	bf08      	it	eq
 800596e:	4299      	cmpeq	r1, r3
 8005970:	d3cc      	bcc.n	800590c <f_open+0x374>
				}
				fp->clust = clst;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005978:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800597a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800597e:	2b00      	cmp	r3, #0
 8005980:	d139      	bne.n	80059f6 <f_open+0x45e>
 8005982:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8005986:	f240 11ff 	movw	r1, #511	; 0x1ff
 800598a:	f04f 0200 	mov.w	r2, #0
 800598e:	ea03 0b01 	and.w	fp, r3, r1
 8005992:	ea04 0c02 	and.w	ip, r4, r2
 8005996:	ea5b 030c 	orrs.w	r3, fp, ip
 800599a:	d02c      	beq.n	80059f6 <f_open+0x45e>
					if ((sc = clst2sect(fs, clst)) == 0) {
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7fc fc1e 	bl	80021e4 <clst2sect>
 80059a8:	66f8      	str	r0, [r7, #108]	; 0x6c
 80059aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d103      	bne.n	80059b8 <f_open+0x420>
						res = FR_INT_ERR;
 80059b0:	2302      	movs	r3, #2
 80059b2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80059b6:	e01e      	b.n	80059f6 <f_open+0x45e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80059b8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80059bc:	f04f 0300 	mov.w	r3, #0
 80059c0:	f04f 0400 	mov.w	r4, #0
 80059c4:	0a4b      	lsrs	r3, r1, #9
 80059c6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80059ca:	0a54      	lsrs	r4, r2, #9
 80059cc:	461a      	mov	r2, r3
 80059ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d0:	441a      	add	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	645a      	str	r2, [r3, #68]	; 0x44
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	7858      	ldrb	r0, [r3, #1]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059e4:	2301      	movs	r3, #1
 80059e6:	f7fb fd65 	bl	80014b4 <disk_read>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <f_open+0x45e>
 80059f0:	2301      	movs	r3, #1
 80059f2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
#endif
		}

		FREE_NAMBUF();
 80059f6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80059f8:	f001 fa2e 	bl	8006e58 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80059fc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <f_open+0x472>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005a0a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3790      	adds	r7, #144	; 0x90
 8005a12:	46bd      	mov	sp, r7
 8005a14:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08005a18 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005a18:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005a1c:	b090      	sub	sp, #64	; 0x40
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	60f8      	str	r0, [r7, #12]
 8005a22:	60b9      	str	r1, [r7, #8]
 8005a24:	607a      	str	r2, [r7, #4]
 8005a26:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	62fb      	str	r3, [r7, #44]	; 0x2c


	*br = 0;	/* Clear read byte counter */
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f107 0214 	add.w	r2, r7, #20
 8005a38:	4611      	mov	r1, r2
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7ff fd36 	bl	80054ac <validate>
 8005a40:	4603      	mov	r3, r0
 8005a42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005a46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d108      	bne.n	8005a60 <f_read+0x48>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005a54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005a58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <f_read+0x4e>
 8005a60:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a64:	e13c      	b.n	8005ce0 <f_read+0x2c8>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <f_read+0x60>
 8005a74:	2307      	movs	r3, #7
 8005a76:	e133      	b.n	8005ce0 <f_read+0x2c8>
	remain = fp->obj.objsize - fp->fptr;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	e9d3 bc0e 	ldrd	fp, ip, [r3, #56]	; 0x38
 8005a84:	460b      	mov	r3, r1
 8005a86:	4614      	mov	r4, r2
 8005a88:	ebb3 030b 	subs.w	r3, r3, fp
 8005a8c:	eb64 040c 	sbc.w	r4, r4, ip
 8005a90:	e9c7 3408 	strd	r3, r4, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f04f 0400 	mov.w	r4, #0
 8005a9a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005a9e:	42a2      	cmp	r2, r4
 8005aa0:	bf08      	it	eq
 8005aa2:	4299      	cmpeq	r1, r3
 8005aa4:	f080 8117 	bcs.w	8005cd6 <f_read+0x2be>
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until btr bytes read */
 8005aac:	e113      	b.n	8005cd6 <f_read+0x2be>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	e9d3 bc0e 	ldrd	fp, ip, [r3, #56]	; 0x38
 8005ab4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005ab8:	f04f 0200 	mov.w	r2, #0
 8005abc:	ea0b 0301 	and.w	r3, fp, r1
 8005ac0:	ea0c 0402 	and.w	r4, ip, r2
 8005ac4:	4323      	orrs	r3, r4
 8005ac6:	f040 80ce 	bne.w	8005c66 <f_read+0x24e>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8005ad0:	f04f 0300 	mov.w	r3, #0
 8005ad4:	f04f 0400 	mov.w	r4, #0
 8005ad8:	0a4b      	lsrs	r3, r1, #9
 8005ada:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005ade:	0a54      	lsrs	r4, r2, #9
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	895b      	ldrh	r3, [r3, #10]
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	4013      	ands	r3, r2
 8005aea:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d126      	bne.n	8005b40 <f_read+0x128>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005af8:	4323      	orrs	r3, r4
 8005afa:	d103      	bne.n	8005b04 <f_read+0xec>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b02:	e007      	b.n	8005b14 <f_read+0xfc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	f7fc fb89 	bl	8002224 <get_fat>
 8005b12:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d805      	bhi.n	8005b26 <f_read+0x10e>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005b22:	2302      	movs	r3, #2
 8005b24:	e0dc      	b.n	8005ce0 <f_read+0x2c8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2c:	d105      	bne.n	8005b3a <f_read+0x122>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005b36:	2301      	movs	r3, #1
 8005b38:	e0d2      	b.n	8005ce0 <f_read+0x2c8>
				fp->clust = clst;				/* Update current cluster */
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b3e:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b46:	4619      	mov	r1, r3
 8005b48:	4610      	mov	r0, r2
 8005b4a:	f7fc fb4b 	bl	80021e4 <clst2sect>
 8005b4e:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d105      	bne.n	8005b62 <f_read+0x14a>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2202      	movs	r2, #2
 8005b5a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005b5e:	2302      	movs	r3, #2
 8005b60:	e0be      	b.n	8005ce0 <f_read+0x2c8>
			sect += csect;
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	4413      	add	r3, r2
 8005b68:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	0a5b      	lsrs	r3, r3, #9
 8005b6e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 8005b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d03b      	beq.n	8005bee <f_read+0x1d6>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005b76:	69fa      	ldr	r2, [r7, #28]
 8005b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7a:	4413      	add	r3, r2
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	8952      	ldrh	r2, [r2, #10]
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d905      	bls.n	8005b90 <f_read+0x178>
					cc = fs->csize - csect;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	895b      	ldrh	r3, [r3, #10]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	7858      	ldrb	r0, [r3, #1]
 8005b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b9a:	f7fb fc8b 	bl	80014b4 <disk_read>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d005      	beq.n	8005bb0 <f_read+0x198>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005bac:	2301      	movs	r3, #1
 8005bae:	e097      	b.n	8005ce0 <f_read+0x2c8>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005bb6:	b25b      	sxtb	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	da14      	bge.n	8005be6 <f_read+0x1ce>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d90d      	bls.n	8005be6 <f_read+0x1ce>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	025b      	lsls	r3, r3, #9
 8005bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bd6:	18d0      	adds	r0, r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	3350      	adds	r3, #80	; 0x50
 8005bdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005be0:	4619      	mov	r1, r3
 8005be2:	f7fc f8e3 	bl	8001dac <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	025b      	lsls	r3, r3, #9
 8005bea:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 8005bec:	e057      	b.n	8005c9e <f_read+0x286>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d033      	beq.n	8005c60 <f_read+0x248>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005bfe:	b25b      	sxtb	r3, r3
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	da1b      	bge.n	8005c3c <f_read+0x224>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	7858      	ldrb	r0, [r3, #1]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c12:	2301      	movs	r3, #1
 8005c14:	f7fb fcb8 	bl	8001588 <disk_write>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d005      	beq.n	8005c2a <f_read+0x212>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005c26:	2301      	movs	r3, #1
 8005c28:	e05a      	b.n	8005ce0 <f_read+0x2c8>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	7858      	ldrb	r0, [r3, #1]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8005c46:	2301      	movs	r3, #1
 8005c48:	69ba      	ldr	r2, [r7, #24]
 8005c4a:	f7fb fc33 	bl	80014b4 <disk_read>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <f_read+0x248>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e03f      	b.n	8005ce0 <f_read+0x2c8>
			}
#endif
			fp->sect = sect;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	69ba      	ldr	r2, [r7, #24]
 8005c64:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c70:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005c74:	637b      	str	r3, [r7, #52]	; 0x34
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005c76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d901      	bls.n	8005c82 <f_read+0x26a>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	637b      	str	r3, [r7, #52]	; 0x34
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c92:	4413      	add	r3, r2
 8005c94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c96:	4619      	mov	r1, r3
 8005c98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005c9a:	f7fc f887 	bl	8001dac <mem_cpy>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	607b      	str	r3, [r7, #4]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cac:	441a      	add	r2, r3
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	601a      	str	r2, [r3, #0]
 8005cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb6:	4413      	add	r3, r2
 8005cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8005cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cc2:	469b      	mov	fp, r3
 8005cc4:	f04f 0c00 	mov.w	ip, #0
 8005cc8:	eb1b 0301 	adds.w	r3, fp, r1
 8005ccc:	eb4c 0402 	adc.w	r4, ip, r2
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	for ( ;  btr;								/* Repeat until btr bytes read */
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f47f aee8 	bne.w	8005aae <f_read+0x96>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3740      	adds	r7, #64	; 0x40
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08005cea <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005cea:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005cee:	b08c      	sub	sp, #48	; 0x30
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
 8005cf8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2200      	movs	r2, #0
 8005d02:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f107 0210 	add.w	r2, r7, #16
 8005d0a:	4611      	mov	r1, r2
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7ff fbcd 	bl	80054ac <validate>
 8005d12:	4603      	mov	r3, r0
 8005d14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005d18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d108      	bne.n	8005d32 <f_write+0x48>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005d26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005d2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d002      	beq.n	8005d38 <f_write+0x4e>
 8005d32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005d36:	e17d      	b.n	8006034 <f_write+0x34a>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <f_write+0x60>
 8005d46:	2307      	movs	r3, #7
 8005d48:	e174      	b.n	8006034 <f_write+0x34a>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	f000 8160 	beq.w	8006014 <f_write+0x32a>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	441a      	add	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005d66:	429a      	cmp	r2, r3
 8005d68:	f080 8154 	bcs.w	8006014 <f_write+0x32a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005d72:	43db      	mvns	r3, r3
 8005d74:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005d76:	e14d      	b.n	8006014 <f_write+0x32a>
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	e9d3 bc0e 	ldrd	fp, ip, [r3, #56]	; 0x38
 8005d7e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005d82:	f04f 0200 	mov.w	r2, #0
 8005d86:	ea0b 0301 	and.w	r3, fp, r1
 8005d8a:	ea0c 0402 	and.w	r4, ip, r2
 8005d8e:	4323      	orrs	r3, r4
 8005d90:	f040 80f0 	bne.w	8005f74 <f_write+0x28a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8005d9a:	f04f 0300 	mov.w	r3, #0
 8005d9e:	f04f 0400 	mov.w	r4, #0
 8005da2:	0a4b      	lsrs	r3, r1, #9
 8005da4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005da8:	0a54      	lsrs	r4, r2, #9
 8005daa:	461a      	mov	r2, r3
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	895b      	ldrh	r3, [r3, #10]
 8005db0:	3b01      	subs	r3, #1
 8005db2:	4013      	ands	r3, r2
 8005db4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d13a      	bne.n	8005e32 <f_write+0x148>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005dc2:	4323      	orrs	r3, r4
 8005dc4:	d10c      	bne.n	8005de0 <f_write+0xf6>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10e      	bne.n	8005df0 <f_write+0x106>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7fc fe64 	bl	8002aa4 <create_chain>
 8005ddc:	62b8      	str	r0, [r7, #40]	; 0x28
 8005dde:	e007      	b.n	8005df0 <f_write+0x106>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	4619      	mov	r1, r3
 8005de8:	4610      	mov	r0, r2
 8005dea:	f7fc fe5b 	bl	8002aa4 <create_chain>
 8005dee:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f000 8113 	beq.w	800601e <f_write+0x334>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d105      	bne.n	8005e0a <f_write+0x120>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2202      	movs	r2, #2
 8005e02:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005e06:	2302      	movs	r3, #2
 8005e08:	e114      	b.n	8006034 <f_write+0x34a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e10:	d105      	bne.n	8005e1e <f_write+0x134>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e10a      	b.n	8006034 <f_write+0x34a>
				fp->clust = clst;			/* Update current cluster */
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e22:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d102      	bne.n	8005e32 <f_write+0x148>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e30:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e38:	b25b      	sxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	da1b      	bge.n	8005e76 <f_write+0x18c>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	7858      	ldrb	r0, [r3, #1]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	f7fb fb9b 	bl	8001588 <disk_write>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d005      	beq.n	8005e64 <f_write+0x17a>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005e60:	2301      	movs	r3, #1
 8005e62:	e0e7      	b.n	8006034 <f_write+0x34a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4610      	mov	r0, r2
 8005e80:	f7fc f9b0 	bl	80021e4 <clst2sect>
 8005e84:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d105      	bne.n	8005e98 <f_write+0x1ae>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005e94:	2302      	movs	r3, #2
 8005e96:	e0cd      	b.n	8006034 <f_write+0x34a>
			sect += csect;
 8005e98:	697a      	ldr	r2, [r7, #20]
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	0a5b      	lsrs	r3, r3, #9
 8005ea4:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d03f      	beq.n	8005f2c <f_write+0x242>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005eac:	69ba      	ldr	r2, [r7, #24]
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	8952      	ldrh	r2, [r2, #10]
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d905      	bls.n	8005ec6 <f_write+0x1dc>
					cc = fs->csize - csect;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	895b      	ldrh	r3, [r3, #10]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	7858      	ldrb	r0, [r3, #1]
 8005eca:	6a3b      	ldr	r3, [r7, #32]
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	69f9      	ldr	r1, [r7, #28]
 8005ed0:	f7fb fb5a 	bl	8001588 <disk_write>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d005      	beq.n	8005ee6 <f_write+0x1fc>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e0a6      	b.n	8006034 <f_write+0x34a>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	1ad3      	subs	r3, r2, r3
 8005eee:	6a3a      	ldr	r2, [r7, #32]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d917      	bls.n	8005f24 <f_write+0x23a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	025b      	lsls	r3, r3, #9
 8005f04:	69fa      	ldr	r2, [r7, #28]
 8005f06:	4413      	add	r3, r2
 8005f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	f7fb ff4d 	bl	8001dac <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	025b      	lsls	r3, r3, #9
 8005f28:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005f2a:	e048      	b.n	8005fbe <f_write+0x2d4>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d01b      	beq.n	8005f6e <f_write+0x284>
				fp->fptr < fp->obj.objsize &&
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005f42:	42a2      	cmp	r2, r4
 8005f44:	bf08      	it	eq
 8005f46:	4299      	cmpeq	r1, r3
 8005f48:	d211      	bcs.n	8005f6e <f_write+0x284>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	7858      	ldrb	r0, [r3, #1]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8005f54:	2301      	movs	r3, #1
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	f7fb faac 	bl	80014b4 <disk_read>
 8005f5c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d005      	beq.n	8005f6e <f_write+0x284>
					ABORT(fs, FR_DISK_ERR);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e062      	b.n	8006034 <f_write+0x34a>
			}
#endif
			fp->sect = sect;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f7e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005f82:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d901      	bls.n	8005f90 <f_write+0x2a6>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	627b      	str	r3, [r7, #36]	; 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa0:	4413      	add	r3, r2
 8005fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fa4:	69f9      	ldr	r1, [r7, #28]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fb ff00 	bl	8001dac <mem_cpy>
		fp->flag |= FA_DIRTY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005fb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005fb6:	b2da      	uxtb	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	607b      	str	r3, [r7, #4]
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fcc:	441a      	add	r2, r3
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	69fa      	ldr	r2, [r7, #28]
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	4413      	add	r3, r2
 8005fd8:	61fb      	str	r3, [r7, #28]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	469b      	mov	fp, r3
 8005fe4:	f04f 0c00 	mov.w	ip, #0
 8005fe8:	eb1b 0301 	adds.w	r3, fp, r1
 8005fec:	eb4c 0402 	adc.w	r4, ip, r2
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
 8006002:	4294      	cmp	r4, r2
 8006004:	bf08      	it	eq
 8006006:	428b      	cmpeq	r3, r1
 8006008:	d201      	bcs.n	800600e <f_write+0x324>
 800600a:	460b      	mov	r3, r1
 800600c:	4614      	mov	r4, r2
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	e9c2 3404 	strd	r3, r4, [r2, #16]
	for ( ;  btw;							/* Repeat until all data written */
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	f47f aeae 	bne.w	8005d78 <f_write+0x8e>
 800601c:	e000      	b.n	8006020 <f_write+0x336>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800601e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800602a:	b2da      	uxtb	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3730      	adds	r7, #48	; 0x30
 8006038:	46bd      	mov	sp, r7
 800603a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800603e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800603e:	b590      	push	{r4, r7, lr}
 8006040:	b09d      	sub	sp, #116	; 0x74
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800604c:	4611      	mov	r1, r2
 800604e:	4618      	mov	r0, r3
 8006050:	f7ff fa2c 	bl	80054ac <validate>
 8006054:	4603      	mov	r3, r0
 8006056:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 800605a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800605e:	2b00      	cmp	r3, #0
 8006060:	f040 811d 	bne.w	800629e <f_sync+0x260>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800606a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 8115 	beq.w	800629e <f_sync+0x260>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800607a:	b25b      	sxtb	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	da17      	bge.n	80060b0 <f_sync+0x72>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006080:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006082:	7858      	ldrb	r0, [r3, #1]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800608e:	2301      	movs	r3, #1
 8006090:	f7fb fa7a 	bl	8001588 <disk_write>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <f_sync+0x60>
 800609a:	2301      	movs	r3, #1
 800609c:	e101      	b.n	80062a2 <f_sync+0x264>
				fp->flag &= (BYTE)~FA_DIRTY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80060b0:	f7fb fcac 	bl	8001a0c <get_fattime>
 80060b4:	66b8      	str	r0, [r7, #104]	; 0x68
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80060b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	2b04      	cmp	r3, #4
 80060bc:	f040 80a4 	bne.w	8006208 <f_sync+0x1ca>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fc fbac 	bl	8002820 <fill_first_frag>
 80060c8:	4603      	mov	r3, r0
 80060ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 80060ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10a      	bne.n	80060ec <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060dc:	f04f 32ff 	mov.w	r2, #4294967295
 80060e0:	4619      	mov	r1, r3
 80060e2:	f7fc fbcc 	bl	800287e <fill_last_frag>
 80060e6:	4603      	mov	r3, r0
 80060e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
				if (res == FR_OK) {
 80060ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f040 80d4 	bne.w	800629e <f_sync+0x260>
					DIR dj;
					DEF_NAMBUF

					INIT_NAMBUF(fs);
 80060f6:	f44f 608c 	mov.w	r0, #1120	; 0x460
 80060fa:	f000 fea1 	bl	8006e40 <ff_memalloc>
 80060fe:	6638      	str	r0, [r7, #96]	; 0x60
 8006100:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <f_sync+0xcc>
 8006106:	2311      	movs	r3, #17
 8006108:	e0cb      	b.n	80062a2 <f_sync+0x264>
 800610a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800610c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800610e:	60da      	str	r2, [r3, #12]
 8006110:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006112:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006114:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006118:	611a      	str	r2, [r3, #16]
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	f107 0308 	add.w	r3, r7, #8
 8006120:	4611      	mov	r1, r2
 8006122:	4618      	mov	r0, r3
 8006124:	f7fd fc49 	bl	80039ba <load_obj_xdir>
 8006128:	4603      	mov	r3, r0
 800612a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 800612e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006132:	2b00      	cmp	r3, #0
 8006134:	d164      	bne.n	8006200 <f_sync+0x1c2>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
 8006136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	3304      	adds	r3, #4
 800613c:	781a      	ldrb	r2, [r3, #0]
 800613e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	3304      	adds	r3, #4
 8006144:	f042 0220 	orr.w	r2, r2, #32
 8006148:	b2d2      	uxtb	r2, r2
 800614a:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	79da      	ldrb	r2, [r3, #7]
 8006150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	3321      	adds	r3, #33	; 0x21
 8006156:	f042 0201 	orr.w	r2, r2, #1
 800615a:	b2d2      	uxtb	r2, r2
 800615c:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800615e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	4619      	mov	r1, r3
 800616c:	4610      	mov	r0, r2
 800616e:	f7fb fd6a 	bl	8001c46 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8006172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8006180:	461a      	mov	r2, r3
 8006182:	4623      	mov	r3, r4
 8006184:	4608      	mov	r0, r1
 8006186:	f7fb fd8a 	bl	8001c9e <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800618a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8006198:	461a      	mov	r2, r3
 800619a:	4623      	mov	r3, r4
 800619c:	4608      	mov	r0, r1
 800619e:	f7fb fd7e 	bl	8001c9e <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 80061a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	330c      	adds	r3, #12
 80061a8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fb fd4b 	bl	8001c46 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 80061b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	3315      	adds	r3, #21
 80061b6:	2200      	movs	r2, #0
 80061b8:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 80061ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	3310      	adds	r3, #16
 80061c0:	2100      	movs	r1, #0
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fb fd3f 	bl	8001c46 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 80061c8:	f107 0308 	add.w	r3, r7, #8
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fd fc34 	bl	8003a3a <store_xdir>
 80061d2:	4603      	mov	r3, r0
 80061d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 80061d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10f      	bne.n	8006200 <f_sync+0x1c2>
							res = sync_fs(fs);
 80061e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7fb ff90 	bl	8002108 <sync_fs>
 80061e8:	4603      	mov	r3, r0
 80061ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80061f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
					}
					FREE_NAMBUF();
 8006200:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8006202:	f000 fe29 	bl	8006e58 <ff_memfree>
 8006206:	e04a      	b.n	800629e <f_sync+0x260>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006208:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800620e:	4619      	mov	r1, r3
 8006210:	4610      	mov	r0, r2
 8006212:	f7fb ff4b 	bl	80020ac <move_window>
 8006216:	4603      	mov	r3, r0
 8006218:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 800621c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006220:	2b00      	cmp	r3, #0
 8006222:	d13c      	bne.n	800629e <f_sync+0x260>
					dir = fp->dir_ptr;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006228:	667b      	str	r3, [r7, #100]	; 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800622a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800622c:	330b      	adds	r3, #11
 800622e:	781a      	ldrb	r2, [r3, #0]
 8006230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006232:	330b      	adds	r3, #11
 8006234:	f042 0220 	orr.w	r2, r2, #32
 8006238:	b2d2      	uxtb	r2, r2
 800623a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6818      	ldr	r0, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	461a      	mov	r2, r3
 8006246:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006248:	f7fc ff9c 	bl	8003184 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800624c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800624e:	f103 021c 	add.w	r2, r3, #28
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8006258:	4619      	mov	r1, r3
 800625a:	4610      	mov	r0, r2
 800625c:	f7fb fcf3 	bl	8001c46 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006260:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006262:	3316      	adds	r3, #22
 8006264:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006266:	4618      	mov	r0, r3
 8006268:	f7fb fced 	bl	8001c46 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800626c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800626e:	3312      	adds	r3, #18
 8006270:	2100      	movs	r1, #0
 8006272:	4618      	mov	r0, r3
 8006274:	f7fb fccc 	bl	8001c10 <st_word>
					fs->wflag = 1;
 8006278:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800627a:	2201      	movs	r2, #1
 800627c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800627e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006280:	4618      	mov	r0, r3
 8006282:	f7fb ff41 	bl	8002108 <sync_fs>
 8006286:	4603      	mov	r3, r0
 8006288:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006296:	b2da      	uxtb	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800629e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3774      	adds	r7, #116	; 0x74
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd90      	pop	{r4, r7, pc}

080062aa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b084      	sub	sp, #16
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7ff fec3 	bl	800603e <f_sync>
 80062b8:	4603      	mov	r3, r0
 80062ba:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10e      	bne.n	80062e0 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f107 0208 	add.w	r2, r7, #8
 80062c8:	4611      	mov	r1, r2
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff f8ee 	bl	80054ac <validate>
 80062d0:	4603      	mov	r3, r0
 80062d2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d102      	bne.n	80062e0 <f_close+0x36>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80062ea:	b590      	push	{r4, r7, lr}
 80062ec:	b09b      	sub	sp, #108	; 0x6c
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80062f2:	f107 010c 	add.w	r1, r7, #12
 80062f6:	1d3b      	adds	r3, r7, #4
 80062f8:	2200      	movs	r2, #0
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fe fd38 	bl	8004d70 <find_volume>
 8006300:	4603      	mov	r3, r0
 8006302:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8006306:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800630a:	2b00      	cmp	r3, #0
 800630c:	d170      	bne.n	80063f0 <f_chdir+0x106>
		dj.obj.fs = fs;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
 8006312:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8006316:	f000 fd93 	bl	8006e40 <ff_memalloc>
 800631a:	6638      	str	r0, [r7, #96]	; 0x60
 800631c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <f_chdir+0x3c>
 8006322:	2311      	movs	r3, #17
 8006324:	e066      	b.n	80063f4 <f_chdir+0x10a>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800632a:	60da      	str	r2, [r3, #12]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006330:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006334:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);		/* Follow the path */
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	f107 0310 	add.w	r3, r7, #16
 800633c:	4611      	mov	r1, r2
 800633e:	4618      	mov	r0, r3
 8006340:	f7fe fb74 	bl	8004a2c <follow_path>
 8006344:	4603      	mov	r3, r0
 8006346:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		if (res == FR_OK) {					/* Follow completed */
 800634a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800634e:	2b00      	cmp	r3, #0
 8006350:	d144      	bne.n	80063dc <f_chdir+0xf2>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Is it the start directory itself? */
 8006352:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8006356:	b25b      	sxtb	r3, r3
 8006358:	2b00      	cmp	r3, #0
 800635a:	da10      	bge.n	800637e <f_chdir+0x94>
				fs->cdir = dj.obj.sclust;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	61da      	str	r2, [r3, #28]
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	2b04      	cmp	r3, #4
 8006368:	d138      	bne.n	80063dc <f_chdir+0xf2>
					fs->cdc_scl = dj.obj.c_scl;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800636e:	621a      	str	r2, [r3, #32]
					fs->cdc_size = dj.obj.c_size;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006374:	625a      	str	r2, [r3, #36]	; 0x24
					fs->cdc_ofs = dj.obj.c_ofs;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800637a:	629a      	str	r2, [r3, #40]	; 0x28
 800637c:	e02e      	b.n	80063dc <f_chdir+0xf2>
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 800637e:	7dbb      	ldrb	r3, [r7, #22]
 8006380:	f003 0310 	and.w	r3, r3, #16
 8006384:	2b00      	cmp	r3, #0
 8006386:	d026      	beq.n	80063d6 <f_chdir+0xec>
#if FF_FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	2b04      	cmp	r3, #4
 800638e:	d118      	bne.n	80063c2 <f_chdir+0xd8>
						fs->cdir = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Sub-directory cluster */
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	3334      	adds	r3, #52	; 0x34
 8006396:	68fc      	ldr	r4, [r7, #12]
 8006398:	4618      	mov	r0, r3
 800639a:	f7fb fb59 	bl	8001a50 <ld_dword>
 800639e:	4603      	mov	r3, r0
 80063a0:	61e3      	str	r3, [r4, #28]
						fs->cdc_scl = dj.obj.sclust;						/* Save containing directory information */
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	69ba      	ldr	r2, [r7, #24]
 80063a6:	621a      	str	r2, [r3, #32]
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80063a8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80063ac:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063b0:	7dfb      	ldrb	r3, [r7, #23]
 80063b2:	4619      	mov	r1, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	625a      	str	r2, [r3, #36]	; 0x24
						fs->cdc_ofs = dj.blk_ofs;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80063be:	629a      	str	r2, [r3, #40]	; 0x28
 80063c0:	e00c      	b.n	80063dc <f_chdir+0xf2>
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80063c6:	68fc      	ldr	r4, [r7, #12]
 80063c8:	4611      	mov	r1, r2
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fc febb 	bl	8003146 <ld_clust>
 80063d0:	4603      	mov	r3, r0
 80063d2:	61e3      	str	r3, [r4, #28]
 80063d4:	e002      	b.n	80063dc <f_chdir+0xf2>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 80063d6:	2305      	movs	r3, #5
 80063d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
		FREE_NAMBUF();
 80063dc:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80063de:	f000 fd3b 	bl	8006e58 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80063e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80063e6:	2b04      	cmp	r3, #4
 80063e8:	d102      	bne.n	80063f0 <f_chdir+0x106>
 80063ea:	2305      	movs	r3, #5
 80063ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			CurrVol = (BYTE)i;
		}
#endif
	}

	LEAVE_FF(fs, res);
 80063f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	376c      	adds	r7, #108	; 0x6c
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd90      	pop	{r4, r7, pc}

080063fc <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80063fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063fe:	b08d      	sub	sp, #52	; 0x34
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	e9c7 2300 	strd	r2, r3, [r7]
	FSIZE_t ifptr;
#if FF_USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f107 0210 	add.w	r2, r7, #16
 800640e:	4611      	mov	r1, r2
 8006410:	4618      	mov	r0, r3
 8006412:	f7ff f84b 	bl	80054ac <validate>
 8006416:	4603      	mov	r3, r0
 8006418:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800641c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006420:	2b00      	cmp	r3, #0
 8006422:	d104      	bne.n	800642e <f_lseek+0x32>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800642a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if FF_FS_EXFAT && !FF_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 800642e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10e      	bne.n	8006454 <f_lseek+0x58>
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	2b04      	cmp	r3, #4
 800643c:	d10a      	bne.n	8006454 <f_lseek+0x58>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800643e:	68f8      	ldr	r0, [r7, #12]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006444:	f04f 32ff 	mov.w	r2, #4294967295
 8006448:	4619      	mov	r1, r3
 800644a:	f7fc fa18 	bl	800287e <fill_last_frag>
 800644e:	4603      	mov	r3, r0
 8006450:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8006454:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <f_lseek+0x66>
 800645c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006460:	e1c0      	b.n	80067e4 <f_lseek+0x3e8>
#endif

	/* Normal Seek */
	{
#if FF_FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	2b04      	cmp	r3, #4
 8006468:	d00b      	beq.n	8006482 <f_lseek+0x86>
 800646a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800646e:	2c01      	cmp	r4, #1
 8006470:	bf08      	it	eq
 8006472:	2b00      	cmpeq	r3, #0
 8006474:	d305      	bcc.n	8006482 <f_lseek+0x86>
 8006476:	f04f 33ff 	mov.w	r3, #4294967295
 800647a:	f04f 0400 	mov.w	r4, #0
 800647e:	e9c7 3400 	strd	r3, r4, [r7]
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8006488:	e9d7 3400 	ldrd	r3, r4, [r7]
 800648c:	42a2      	cmp	r2, r4
 800648e:	bf08      	it	eq
 8006490:	4299      	cmpeq	r1, r3
 8006492:	d20b      	bcs.n	80064ac <f_lseek+0xb0>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d104      	bne.n	80064ac <f_lseek+0xb0>
			ofs = fp->obj.objsize;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80064a8:	e9c7 3400 	strd	r3, r4, [r7]
		}
		ifptr = fp->fptr;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80064b2:	e9c7 3406 	strd	r3, r4, [r7, #24]
		fp->fptr = nsect = 0;
 80064b6:	2300      	movs	r3, #0
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	f04f 0300 	mov.w	r3, #0
 80064c0:	f04f 0400 	mov.w	r4, #0
 80064c4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if (ofs > 0) {
 80064c8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80064cc:	4323      	orrs	r3, r4
 80064ce:	f000 8125 	beq.w	800671c <f_lseek+0x320>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	895b      	ldrh	r3, [r3, #10]
 80064d6:	025b      	lsls	r3, r3, #9
 80064d8:	617b      	str	r3, [r7, #20]
			if (ifptr > 0 &&
 80064da:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80064de:	4323      	orrs	r3, r4
 80064e0:	d048      	beq.n	8006574 <f_lseek+0x178>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80064e2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80064e6:	f113 30ff 	adds.w	r0, r3, #4294967295
 80064ea:	f144 31ff 	adc.w	r1, r4, #4294967295
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f04f 0400 	mov.w	r4, #0
 80064f4:	461a      	mov	r2, r3
 80064f6:	4623      	mov	r3, r4
 80064f8:	f7f9 feca 	bl	8000290 <__aeabi_uldivmod>
 80064fc:	4603      	mov	r3, r0
 80064fe:	460c      	mov	r4, r1
 8006500:	461d      	mov	r5, r3
 8006502:	4626      	mov	r6, r4
 8006504:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8006508:	f113 30ff 	adds.w	r0, r3, #4294967295
 800650c:	f144 31ff 	adc.w	r1, r4, #4294967295
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f04f 0400 	mov.w	r4, #0
 8006516:	461a      	mov	r2, r3
 8006518:	4623      	mov	r3, r4
 800651a:	f7f9 feb9 	bl	8000290 <__aeabi_uldivmod>
 800651e:	4603      	mov	r3, r0
 8006520:	460c      	mov	r4, r1
			if (ifptr > 0 &&
 8006522:	42a6      	cmp	r6, r4
 8006524:	bf08      	it	eq
 8006526:	429d      	cmpeq	r5, r3
 8006528:	d324      	bcc.n	8006574 <f_lseek+0x178>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800652a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800652e:	f113 31ff 	adds.w	r1, r3, #4294967295
 8006532:	f144 32ff 	adc.w	r2, r4, #4294967295
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	3b01      	subs	r3, #1
 800653a:	f04f 0400 	mov.w	r4, #0
 800653e:	ea6f 0503 	mvn.w	r5, r3
 8006542:	ea6f 0604 	mvn.w	r6, r4
 8006546:	ea05 0301 	and.w	r3, r5, r1
 800654a:	ea06 0402 	and.w	r4, r6, r2
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				ofs -= fp->fptr;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	e9d3 560e 	ldrd	r5, r6, [r3, #56]	; 0x38
 800655a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800655e:	460b      	mov	r3, r1
 8006560:	4614      	mov	r4, r2
 8006562:	1b5b      	subs	r3, r3, r5
 8006564:	eb64 0406 	sbc.w	r4, r4, r6
 8006568:	e9c7 3400 	strd	r3, r4, [r7]
				clst = fp->clust;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006570:	62bb      	str	r3, [r7, #40]	; 0x28
 8006572:	e024      	b.n	80065be <f_lseek+0x1c2>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	62bb      	str	r3, [r7, #40]	; 0x28
#if !FF_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657c:	2b00      	cmp	r3, #0
 800657e:	d11b      	bne.n	80065b8 <f_lseek+0x1bc>
					clst = create_chain(&fp->obj, 0);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2100      	movs	r1, #0
 8006584:	4618      	mov	r0, r3
 8006586:	f7fc fa8d 	bl	8002aa4 <create_chain>
 800658a:	62b8      	str	r0, [r7, #40]	; 0x28
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658e:	2b01      	cmp	r3, #1
 8006590:	d105      	bne.n	800659e <f_lseek+0x1a2>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2202      	movs	r2, #2
 8006596:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800659a:	2302      	movs	r3, #2
 800659c:	e122      	b.n	80067e4 <f_lseek+0x3e8>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800659e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a4:	d105      	bne.n	80065b2 <f_lseek+0x1b6>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80065ae:	2301      	movs	r3, #1
 80065b0:	e118      	b.n	80067e4 <f_lseek+0x3e8>
					fp->obj.sclust = clst;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065b6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065bc:	641a      	str	r2, [r3, #64]	; 0x40
			}
			if (clst != 0) {
 80065be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 80ab 	beq.w	800671c <f_lseek+0x320>
				while (ofs > bcs) {						/* Cluster following loop */
 80065c6:	e06a      	b.n	800669e <f_lseek+0x2a2>
					ofs -= bcs; fp->fptr += bcs;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	461d      	mov	r5, r3
 80065cc:	f04f 0600 	mov.w	r6, #0
 80065d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80065d4:	460b      	mov	r3, r1
 80065d6:	4614      	mov	r4, r2
 80065d8:	1b5b      	subs	r3, r3, r5
 80065da:	eb64 0406 	sbc.w	r4, r4, r6
 80065de:	e9c7 3400 	strd	r3, r4, [r7]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	461d      	mov	r5, r3
 80065ec:	f04f 0600 	mov.w	r6, #0
 80065f0:	186b      	adds	r3, r5, r1
 80065f2:	eb46 0402 	adc.w	r4, r6, r2
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !FF_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d028      	beq.n	800665c <f_lseek+0x260>
						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 8006616:	42a2      	cmp	r2, r4
 8006618:	bf08      	it	eq
 800661a:	4299      	cmpeq	r1, r3
 800661c:	d20e      	bcs.n	800663c <f_lseek+0x240>
							fp->obj.objsize = fp->fptr;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	e9c2 3404 	strd	r3, r4, [r2, #16]
							fp->flag |= FA_MODIFIED;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006634:	b2da      	uxtb	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006640:	4618      	mov	r0, r3
 8006642:	f7fc fa2f 	bl	8002aa4 <create_chain>
 8006646:	62b8      	str	r0, [r7, #40]	; 0x28
						if (clst == 0) {				/* Clip file size in case of disk full */
 8006648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664a:	2b00      	cmp	r3, #0
 800664c:	d10c      	bne.n	8006668 <f_lseek+0x26c>
							ofs = 0; break;
 800664e:	f04f 0300 	mov.w	r3, #0
 8006652:	f04f 0400 	mov.w	r4, #0
 8006656:	e9c7 3400 	strd	r3, r4, [r7]
 800665a:	e02a      	b.n	80066b2 <f_lseek+0x2b6>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006660:	4618      	mov	r0, r3
 8006662:	f7fb fddf 	bl	8002224 <get_fat>
 8006666:	62b8      	str	r0, [r7, #40]	; 0x28
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666e:	d105      	bne.n	800667c <f_lseek+0x280>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8006678:	2301      	movs	r3, #1
 800667a:	e0b3      	b.n	80067e4 <f_lseek+0x3e8>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800667c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667e:	2b01      	cmp	r3, #1
 8006680:	d904      	bls.n	800668c <f_lseek+0x290>
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006686:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006688:	429a      	cmp	r2, r3
 800668a:	d305      	bcc.n	8006698 <f_lseek+0x29c>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2202      	movs	r2, #2
 8006690:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8006694:	2302      	movs	r3, #2
 8006696:	e0a5      	b.n	80067e4 <f_lseek+0x3e8>
					fp->clust = clst;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800669c:	641a      	str	r2, [r3, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	4619      	mov	r1, r3
 80066a2:	f04f 0200 	mov.w	r2, #0
 80066a6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80066aa:	42a2      	cmp	r2, r4
 80066ac:	bf08      	it	eq
 80066ae:	4299      	cmpeq	r1, r3
 80066b0:	d38a      	bcc.n	80065c8 <f_lseek+0x1cc>
				}
				fp->fptr += ofs;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 80066b8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80066bc:	185d      	adds	r5, r3, r1
 80066be:	eb44 0602 	adc.w	r6, r4, r2
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	e9c2 560e 	strd	r5, r6, [r2, #56]	; 0x38
				if (ofs % SS(fs)) {
 80066c8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80066cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80066d0:	f04f 0200 	mov.w	r2, #0
 80066d4:	ea03 0501 	and.w	r5, r3, r1
 80066d8:	ea04 0602 	and.w	r6, r4, r2
 80066dc:	ea55 0306 	orrs.w	r3, r5, r6
 80066e0:	d01c      	beq.n	800671c <f_lseek+0x320>
					nsect = clst2sect(fs, clst);	/* Current sector */
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fb fd7c 	bl	80021e4 <clst2sect>
 80066ec:	6278      	str	r0, [r7, #36]	; 0x24
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 80066ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d105      	bne.n	8006700 <f_lseek+0x304>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2202      	movs	r2, #2
 80066f8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80066fc:	2302      	movs	r3, #2
 80066fe:	e071      	b.n	80067e4 <f_lseek+0x3e8>
					nsect += (DWORD)(ofs / SS(fs));
 8006700:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006704:	f04f 0300 	mov.w	r3, #0
 8006708:	f04f 0400 	mov.w	r4, #0
 800670c:	0a4b      	lsrs	r3, r1, #9
 800670e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8006712:	0a54      	lsrs	r4, r2, #9
 8006714:	461a      	mov	r2, r3
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	4413      	add	r3, r2
 800671a:	627b      	str	r3, [r7, #36]	; 0x24
				}
			}
		}
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 8006728:	42a2      	cmp	r2, r4
 800672a:	bf08      	it	eq
 800672c:	4299      	cmpeq	r1, r3
 800672e:	d20e      	bcs.n	800674e <f_lseek+0x352>
			fp->obj.objsize = fp->fptr;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	e9c2 3404 	strd	r3, r4, [r2, #16]
			fp->flag |= FA_MODIFIED;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006746:	b2da      	uxtb	r2, r3
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	e9d3 560e 	ldrd	r5, r6, [r3, #56]	; 0x38
 8006754:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006758:	f04f 0200 	mov.w	r2, #0
 800675c:	ea05 0301 	and.w	r3, r5, r1
 8006760:	ea06 0402 	and.w	r4, r6, r2
 8006764:	4323      	orrs	r3, r4
 8006766:	d03b      	beq.n	80067e0 <f_lseek+0x3e4>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800676c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800676e:	429a      	cmp	r2, r3
 8006770:	d036      	beq.n	80067e0 <f_lseek+0x3e4>
#if !FF_FS_TINY
#if !FF_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006778:	b25b      	sxtb	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	da1b      	bge.n	80067b6 <f_lseek+0x3ba>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	7858      	ldrb	r0, [r3, #1]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800678c:	2301      	movs	r3, #1
 800678e:	f7fa fefb 	bl	8001588 <disk_write>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d005      	beq.n	80067a4 <f_lseek+0x3a8>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80067a0:	2301      	movs	r3, #1
 80067a2:	e01f      	b.n	80067e4 <f_lseek+0x3e8>
				fp->flag &= (BYTE)~FA_DIRTY;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80067aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ae:	b2da      	uxtb	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	7858      	ldrb	r0, [r3, #1]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80067c0:	2301      	movs	r3, #1
 80067c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c4:	f7fa fe76 	bl	80014b4 <disk_read>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d005      	beq.n	80067da <f_lseek+0x3de>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80067d6:	2301      	movs	r3, #1
 80067d8:	e004      	b.n	80067e4 <f_lseek+0x3e8>
#endif
			fp->sect = nsect;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067de:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}

	LEAVE_FF(fs, res);
 80067e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3734      	adds	r7, #52	; 0x34
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067ec <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80067ec:	b590      	push	{r4, r7, lr}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <f_opendir+0x14>
 80067fc:	2309      	movs	r3, #9
 80067fe:	e07c      	b.n	80068fa <f_opendir+0x10e>

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006800:	f107 010c 	add.w	r1, r7, #12
 8006804:	463b      	mov	r3, r7
 8006806:	2200      	movs	r2, #0
 8006808:	4618      	mov	r0, r3
 800680a:	f7fe fab1 	bl	8004d70 <find_volume>
 800680e:	4603      	mov	r3, r0
 8006810:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006812:	7dfb      	ldrb	r3, [r7, #23]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d169      	bne.n	80068ec <f_opendir+0x100>
		dp->obj.fs = fs;
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800681e:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8006822:	f000 fb0d 	bl	8006e40 <ff_memalloc>
 8006826:	6138      	str	r0, [r7, #16]
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <f_opendir+0x46>
 800682e:	2311      	movs	r3, #17
 8006830:	e063      	b.n	80068fa <f_opendir+0x10e>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	60da      	str	r2, [r3, #12]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	693a      	ldr	r2, [r7, #16]
 800683c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006840:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	4619      	mov	r1, r3
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7fe f8f0 	bl	8004a2c <follow_path>
 800684c:	4603      	mov	r3, r0
 800684e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8006850:	7dfb      	ldrb	r3, [r7, #23]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d142      	bne.n	80068dc <f_opendir+0xf0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800685c:	b25b      	sxtb	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	db2f      	blt.n	80068c2 <f_opendir+0xd6>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	799b      	ldrb	r3, [r3, #6]
 8006866:	f003 0310 	and.w	r3, r3, #16
 800686a:	2b00      	cmp	r3, #0
 800686c:	d027      	beq.n	80068be <f_opendir+0xd2>
#if FF_FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	2b04      	cmp	r3, #4
 8006874:	d118      	bne.n	80068a8 <f_opendir+0xbc>
						dp->obj.c_scl = dp->obj.sclust;							/* Get containing directory inforamation */
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	621a      	str	r2, [r3, #32]
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8006884:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	79d2      	ldrb	r2, [r2, #7]
 800688c:	431a      	orrs	r2, r3
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	625a      	str	r2, [r3, #36]	; 0x24
						dp->obj.c_ofs = dp->blk_ofs;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	629a      	str	r2, [r3, #40]	; 0x28
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	4611      	mov	r1, r2
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7fd f861 	bl	8003968 <init_alloc_info>
 80068a6:	e00c      	b.n	80068c2 <f_opendir+0xd6>
					} else
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ae:	4619      	mov	r1, r3
 80068b0:	4610      	mov	r0, r2
 80068b2:	f7fc fc48 	bl	8003146 <ld_clust>
 80068b6:	4602      	mov	r2, r0
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	609a      	str	r2, [r3, #8]
 80068bc:	e001      	b.n	80068c2 <f_opendir+0xd6>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80068be:	2305      	movs	r3, #5
 80068c0:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80068c2:	7dfb      	ldrb	r3, [r7, #23]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d109      	bne.n	80068dc <f_opendir+0xf0>
				dp->obj.id = fs->id;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	88da      	ldrh	r2, [r3, #6]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80068d0:	2100      	movs	r1, #0
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7fc fab0 	bl	8002e38 <dir_sdi>
 80068d8:	4603      	mov	r3, r0
 80068da:	75fb      	strb	r3, [r7, #23]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 80068dc:	6938      	ldr	r0, [r7, #16]
 80068de:	f000 fabb 	bl	8006e58 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80068e2:	7dfb      	ldrb	r3, [r7, #23]
 80068e4:	2b04      	cmp	r3, #4
 80068e6:	d101      	bne.n	80068ec <f_opendir+0x100>
 80068e8:	2305      	movs	r3, #5
 80068ea:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 80068ec:	7dfb      	ldrb	r3, [r7, #23]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d002      	beq.n	80068f8 <f_opendir+0x10c>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80068f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd90      	pop	{r4, r7, pc}

08006902 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8006902:	b580      	push	{r7, lr}
 8006904:	b084      	sub	sp, #16
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f107 0208 	add.w	r2, r7, #8
 8006910:	4611      	mov	r1, r2
 8006912:	4618      	mov	r0, r3
 8006914:	f7fe fdca 	bl	80054ac <validate>
 8006918:	4603      	mov	r3, r0
 800691a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800691c:	7bfb      	ldrb	r3, [r7, #15]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d102      	bne.n	8006928 <f_closedir+0x26>
#if FF_FS_LOCK != 0
		if (dp->obj.lockid) res = dec_lock(dp->obj.lockid);	/* Decrement sub-directory open counter */
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
#else
		dp->obj.fs = 0;	/* Invalidate directory object */
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	601a      	str	r2, [r3, #0]
#endif
#if FF_FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8006928:	7bfb      	ldrb	r3, [r7, #15]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b086      	sub	sp, #24
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
 800693a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f107 020c 	add.w	r2, r7, #12
 8006942:	4611      	mov	r1, r2
 8006944:	4618      	mov	r0, r3
 8006946:	f7fe fdb1 	bl	80054ac <validate>
 800694a:	4603      	mov	r3, r0
 800694c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800694e:	7dfb      	ldrb	r3, [r7, #23]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d13b      	bne.n	80069cc <f_readdir+0x9a>
		if (!fno) {
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d106      	bne.n	8006968 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800695a:	2100      	movs	r1, #0
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7fc fa6b 	bl	8002e38 <dir_sdi>
 8006962:	4603      	mov	r3, r0
 8006964:	75fb      	strb	r3, [r7, #23]
 8006966:	e031      	b.n	80069cc <f_readdir+0x9a>
		} else {
			INIT_NAMBUF(fs);
 8006968:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800696c:	f000 fa68 	bl	8006e40 <ff_memalloc>
 8006970:	6138      	str	r0, [r7, #16]
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d101      	bne.n	800697c <f_readdir+0x4a>
 8006978:	2311      	movs	r3, #17
 800697a:	e028      	b.n	80069ce <f_readdir+0x9c>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	60da      	str	r2, [r3, #12]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800698a:	611a      	str	r2, [r3, #16]
			res = DIR_READ_FILE(dp);		/* Read an item */
 800698c:	2100      	movs	r1, #0
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7fd f917 	bl	8003bc2 <dir_read>
 8006994:	4603      	mov	r3, r0
 8006996:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8006998:	7dfb      	ldrb	r3, [r7, #23]
 800699a:	2b04      	cmp	r3, #4
 800699c:	d101      	bne.n	80069a2 <f_readdir+0x70>
 800699e:	2300      	movs	r3, #0
 80069a0:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 80069a2:	7dfb      	ldrb	r3, [r7, #23]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10e      	bne.n	80069c6 <f_readdir+0x94>
				get_fileinfo(dp, fno);		/* Get the object information */
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7fd fd02 	bl	80043b4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80069b0:	2100      	movs	r1, #0
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f7fc fac6 	bl	8002f44 <dir_next>
 80069b8:	4603      	mov	r3, r0
 80069ba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80069bc:	7dfb      	ldrb	r3, [r7, #23]
 80069be:	2b04      	cmp	r3, #4
 80069c0:	d101      	bne.n	80069c6 <f_readdir+0x94>
 80069c2:	2300      	movs	r3, #0
 80069c4:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 80069c6:	6938      	ldr	r0, [r7, #16]
 80069c8:	f000 fa46 	bl	8006e58 <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 80069cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3718      	adds	r7, #24
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80069d6:	b590      	push	{r4, r7, lr}
 80069d8:	b0bd      	sub	sp, #244	; 0xf4
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80069de:	2300      	movs	r3, #0
 80069e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80069e4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80069e8:	1d3b      	adds	r3, r7, #4
 80069ea:	2202      	movs	r2, #2
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7fe f9bf 	bl	8004d70 <find_volume>
 80069f2:	4603      	mov	r3, r0
 80069f4:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	if (res == FR_OK) {
 80069f8:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f040 80d7 	bne.w	8006bb0 <f_unlink+0x1da>
		dj.obj.fs = fs;
 8006a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		INIT_NAMBUF(fs);
 8006a08:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8006a0c:	f000 fa18 	bl	8006e40 <ff_memalloc>
 8006a10:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
 8006a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <f_unlink+0x4a>
 8006a1c:	2311      	movs	r3, #17
 8006a1e:	e0c9      	b.n	8006bb4 <f_unlink+0x1de>
 8006a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a22:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006a26:	60da      	str	r2, [r3, #12]
 8006a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006a2e:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006a32:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);		/* Follow the file path */
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006a3a:	4611      	mov	r1, r2
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fd fff5 	bl	8004a2c <follow_path>
 8006a42:	4603      	mov	r3, r0
 8006a44:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8006a48:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d108      	bne.n	8006a62 <f_unlink+0x8c>
 8006a50:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006a54:	f003 0320 	and.w	r3, r3, #32
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d002      	beq.n	8006a62 <f_unlink+0x8c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8006a5c:	2306      	movs	r3, #6
 8006a5e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8006a62:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f040 809e 	bne.w	8006ba8 <f_unlink+0x1d2>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8006a6c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006a70:	b25b      	sxtb	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	da03      	bge.n	8006a7e <f_unlink+0xa8>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8006a76:	2306      	movs	r3, #6
 8006a78:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8006a7c:	e008      	b.n	8006a90 <f_unlink+0xba>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8006a7e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <f_unlink+0xba>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8006a8a:	2307      	movs	r3, #7
 8006a8c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
				}
			}
			if (res == FR_OK) {
 8006a90:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d15d      	bne.n	8006b54 <f_unlink+0x17e>
#if FF_FS_EXFAT
				obj.fs = fs;
 8006a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a9a:	60bb      	str	r3, [r7, #8]
				if (fs->fs_type == FS_EXFAT) {
 8006a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	2b04      	cmp	r3, #4
 8006aa2:	d10a      	bne.n	8006aba <f_unlink+0xe4>
					init_alloc_info(fs, &obj);
 8006aa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aa6:	f107 0208 	add.w	r2, r7, #8
 8006aaa:	4611      	mov	r1, r2
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7fc ff5b 	bl	8003968 <init_alloc_info>
					dclst = obj.sclust;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ab8:	e008      	b.n	8006acc <f_unlink+0xf6>
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8006aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006abc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8006ac0:	4611      	mov	r1, r2
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7fc fb3f 	bl	8003146 <ld_clust>
 8006ac8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8006acc:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8006ad0:	f003 0310 	and.w	r3, r3, #16
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d03d      	beq.n	8006b54 <f_unlink+0x17e>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
 8006ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ada:	69db      	ldr	r3, [r3, #28]
 8006adc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d103      	bne.n	8006aec <f_unlink+0x116>
						res = FR_DENIED;
 8006ae4:	2307      	movs	r3, #7
 8006ae6:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8006aea:	e033      	b.n	8006b54 <f_unlink+0x17e>
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
 8006aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aee:	643b      	str	r3, [r7, #64]	; 0x40
						sdj.obj.sclust = dclst;
 8006af0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006af4:	64bb      	str	r3, [r7, #72]	; 0x48
#if FF_FS_EXFAT
						if (fs->fs_type == FS_EXFAT) {
 8006af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d106      	bne.n	8006b0c <f_unlink+0x136>
							sdj.obj.objsize = obj.objsize;
 8006afe:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8006b02:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
							sdj.obj.stat = obj.stat;
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
 8006b08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						}
#endif
						res = dir_sdi(&sdj, 0);
 8006b0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b10:	2100      	movs	r1, #0
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fc f990 	bl	8002e38 <dir_sdi>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
						if (res == FR_OK) {
 8006b1e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d116      	bne.n	8006b54 <f_unlink+0x17e>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
 8006b26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7fd f848 	bl	8003bc2 <dir_read>
 8006b32:	4603      	mov	r3, r0
 8006b34:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8006b38:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d102      	bne.n	8006b46 <f_unlink+0x170>
 8006b40:	2307      	movs	r3, #7
 8006b42:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8006b46:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	d102      	bne.n	8006b54 <f_unlink+0x17e>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
						}
					}
				}
			}
			if (res == FR_OK) {
 8006b54:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d125      	bne.n	8006ba8 <f_unlink+0x1d2>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8006b5c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7fd fbcf 	bl	8004304 <dir_remove>
 8006b66:	4603      	mov	r3, r0
 8006b68:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
 8006b6c:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d10e      	bne.n	8006b92 <f_unlink+0x1bc>
 8006b74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00a      	beq.n	8006b92 <f_unlink+0x1bc>
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
 8006b7c:	f107 0308 	add.w	r3, r7, #8
 8006b80:	2200      	movs	r2, #0
 8006b82:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8006b86:	4618      	mov	r0, r3
 8006b88:	f7fb feaa 	bl	80028e0 <remove_chain>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8006b92:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d106      	bne.n	8006ba8 <f_unlink+0x1d2>
 8006b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fb fab3 	bl	8002108 <sync_fs>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
			}
		}
		FREE_NAMBUF();
 8006ba8:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 8006bac:	f000 f954 	bl	8006e58 <ff_memfree>
	}

	LEAVE_FF(fs, res);
 8006bb0:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	37f4      	adds	r7, #244	; 0xf4
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd90      	pop	{r4, r7, pc}

08006bbc <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b0aa      	sub	sp, #168	; 0xa8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
 8006bc4:	f107 010c 	add.w	r1, r7, #12
 8006bc8:	1d3b      	adds	r3, r7, #4
 8006bca:	2202      	movs	r2, #2
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fe f8cf 	bl	8004d70 <find_volume>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	if (res == FR_OK) {
 8006bd8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f040 8129 	bne.w	8006e34 <f_mkdir+0x278>
		dj.obj.fs = fs;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	643b      	str	r3, [r7, #64]	; 0x40
		INIT_NAMBUF(fs);
 8006be6:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8006bea:	f000 f929 	bl	8006e40 <ff_memalloc>
 8006bee:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8006bf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <f_mkdir+0x42>
 8006bfa:	2311      	movs	r3, #17
 8006bfc:	e11c      	b.n	8006e38 <f_mkdir+0x27c>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8006c04:	60da      	str	r2, [r3, #12]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8006c0c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006c10:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);			/* Follow the file path */
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006c18:	4611      	mov	r1, r2
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7fd ff06 	bl	8004a2c <follow_path>
 8006c20:	4603      	mov	r3, r0
 8006c22:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
 8006c26:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d102      	bne.n	8006c34 <f_mkdir+0x78>
 8006c2e:	2308      	movs	r3, #8
 8006c30:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
 8006c34:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006c38:	2b04      	cmp	r3, #4
 8006c3a:	d108      	bne.n	8006c4e <f_mkdir+0x92>
 8006c3c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8006c40:	f003 0320 	and.w	r3, r3, #32
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d002      	beq.n	8006c4e <f_mkdir+0x92>
			res = FR_INVALID_NAME;
 8006c48:	2306      	movs	r3, #6
 8006c4a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
 8006c4e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006c52:	2b04      	cmp	r3, #4
 8006c54:	f040 80ea 	bne.w	8006e2c <f_mkdir+0x270>
			sobj.fs = fs;						/* New object id to create a new chain */
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	613b      	str	r3, [r7, #16]
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
 8006c5c:	f107 0310 	add.w	r3, r7, #16
 8006c60:	2100      	movs	r1, #0
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fb ff1e 	bl	8002aa4 <create_chain>
 8006c68:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
			res = FR_OK;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
 8006c72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d102      	bne.n	8006c80 <f_mkdir+0xc4>
 8006c7a:	2307      	movs	r3, #7
 8006c7c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
 8006c80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d102      	bne.n	8006c8e <f_mkdir+0xd2>
 8006c88:	2302      	movs	r3, #2
 8006c8a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
 8006c8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c96:	d102      	bne.n	8006c9e <f_mkdir+0xe2>
 8006c98:	2301      	movs	r3, #1
 8006c9a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			tm = GET_FATTIME();
 8006c9e:	f7fa feb5 	bl	8001a0c <get_fattime>
 8006ca2:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
			if (res == FR_OK) {
 8006ca6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d154      	bne.n	8006d58 <f_mkdir+0x19c>
				res = dir_clear(fs, dcl);		/* Clean up the new table */
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7fc f830 	bl	8002d1a <dir_clear>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				if (res == FR_OK) {
 8006cc0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d147      	bne.n	8006d58 <f_mkdir+0x19c>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	2b04      	cmp	r3, #4
 8006cce:	d03b      	beq.n	8006d48 <f_mkdir+0x18c>
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	334c      	adds	r3, #76	; 0x4c
 8006cd4:	220b      	movs	r2, #11
 8006cd6:	2120      	movs	r1, #32
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f7fb f888 	bl	8001dee <mem_set>
						fs->win[DIR_Name] = '.';
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	222e      	movs	r2, #46	; 0x2e
 8006ce2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
						fs->win[DIR_Attr] = AM_DIR;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2210      	movs	r2, #16
 8006cea:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
						st_dword(fs->win + DIR_ModTime, tm);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	334c      	adds	r3, #76	; 0x4c
 8006cf2:	3316      	adds	r3, #22
 8006cf4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7fa ffa4 	bl	8001c46 <st_dword>
						st_clust(fs, fs->win, dcl);
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	334c      	adds	r3, #76	; 0x4c
 8006d04:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006d08:	4619      	mov	r1, r3
 8006d0a:	f7fc fa3b 	bl	8003184 <st_clust>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	334c      	adds	r3, #76	; 0x4c
 8006d12:	f103 0020 	add.w	r0, r3, #32
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	334c      	adds	r3, #76	; 0x4c
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	f7fb f845 	bl	8001dac <mem_cpy>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	222e      	movs	r2, #46	; 0x2e
 8006d26:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 8006d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
						st_clust(fs, fs->win + SZDIRE, pcl);
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	334c      	adds	r3, #76	; 0x4c
 8006d36:	3320      	adds	r3, #32
 8006d38:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	f7fc fa21 	bl	8003184 <st_clust>
						fs->wflag = 1;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2201      	movs	r2, #1
 8006d46:	70da      	strb	r2, [r3, #3]
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
 8006d48:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7fd f927 	bl	8003fa0 <dir_register>
 8006d52:	4603      	mov	r3, r0
 8006d54:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				}
			}
			if (res == FR_OK) {
 8006d58:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d15d      	bne.n	8006e1c <f_mkdir+0x260>
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	2b04      	cmp	r3, #4
 8006d66:	d138      	bne.n	8006dda <f_mkdir+0x21e>
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	330c      	adds	r3, #12
 8006d6e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fa ff67 	bl	8001c46 <st_dword>
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	3334      	adds	r3, #52	; 0x34
 8006d7e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7fa ff5f 	bl	8001c46 <st_dword>
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)fs->csize * SS(fs));	/* File size needs to be valid */
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	895b      	ldrh	r3, [r3, #10]
 8006d94:	025b      	lsls	r3, r3, #9
 8006d96:	4619      	mov	r1, r3
 8006d98:	4610      	mov	r0, r2
 8006d9a:	f7fa ff54 	bl	8001c46 <st_dword>
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)fs->csize * SS(fs));
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	895b      	ldrh	r3, [r3, #10]
 8006daa:	025b      	lsls	r3, r3, #9
 8006dac:	4619      	mov	r1, r3
 8006dae:	4610      	mov	r0, r2
 8006db0:	f7fa ff49 	bl	8001c46 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag */
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	3321      	adds	r3, #33	; 0x21
 8006dba:	2203      	movs	r2, #3
 8006dbc:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	2210      	movs	r2, #16
 8006dc6:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8006dc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7fc fe34 	bl	8003a3a <store_xdir>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8006dd8:	e014      	b.n	8006e04 <f_mkdir+0x248>
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
 8006dda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ddc:	3316      	adds	r3, #22
 8006dde:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fa ff2f 	bl	8001c46 <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006dec:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7fc f9c7 	bl	8003184 <st_clust>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
 8006df6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006df8:	330b      	adds	r3, #11
 8006dfa:	2210      	movs	r2, #16
 8006dfc:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2201      	movs	r2, #1
 8006e02:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8006e04:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10f      	bne.n	8006e2c <f_mkdir+0x270>
					res = sync_fs(fs);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fb f97a 	bl	8002108 <sync_fs>
 8006e14:	4603      	mov	r3, r0
 8006e16:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8006e1a:	e007      	b.n	8006e2c <f_mkdir+0x270>
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
 8006e1c:	f107 0310 	add.w	r3, r7, #16
 8006e20:	2200      	movs	r2, #0
 8006e22:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fb fd5a 	bl	80028e0 <remove_chain>
			}
		}
		FREE_NAMBUF();
 8006e2c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8006e30:	f000 f812 	bl	8006e58 <ff_memfree>
	}

	LEAVE_FF(fs, res);
 8006e34:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	37a8      	adds	r7, #168	; 0xa8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <ff_memalloc>:
/*------------------------------------------------------------------------*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
	return malloc(msize);	/* Allocate a new memory block with POSIX API */
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f011 fd67 	bl	801891c <malloc>
 8006e4e:	4603      	mov	r3, r0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
	free(mblock);	/* Free the memory block with POSIX API */
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f011 fd63 	bl	801892c <free>
}
 8006e66:	bf00      	nop
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
	...

08006e70 <ff_uni2oem>:
#if FF_CODE_PAGE >= 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b08b      	sub	sp, #44	; 0x2c
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	807b      	strh	r3, [r7, #2]
	const WCHAR *p;
	WCHAR c = 0, uc;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	84fb      	strh	r3, [r7, #38]	; 0x26
	UINT i = 0, n, li, hi;
 8006e80:	2300      	movs	r3, #0
 8006e82:	623b      	str	r3, [r7, #32]


	if (uni < 0x80) {	/* ASCII? */
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b7f      	cmp	r3, #127	; 0x7f
 8006e88:	d802      	bhi.n	8006e90 <ff_uni2oem+0x20>
		c = (WCHAR)uni;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006e8e:	e041      	b.n	8006f14 <ff_uni2oem+0xa4>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e96:	d23d      	bcs.n	8006f14 <ff_uni2oem+0xa4>
 8006e98:	887b      	ldrh	r3, [r7, #2]
 8006e9a:	f5b3 7f69 	cmp.w	r3, #932	; 0x3a4
 8006e9e:	d139      	bne.n	8006f14 <ff_uni2oem+0xa4>
			uc = (WCHAR)uni;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	827b      	strh	r3, [r7, #18]
			p = CVTBL(uni2oem, FF_CODE_PAGE);
 8006ea4:	4b1f      	ldr	r3, [pc, #124]	; (8006f24 <ff_uni2oem+0xb4>)
 8006ea6:	60fb      	str	r3, [r7, #12]
			hi = sizeof CVTBL(uni2oem, FF_CODE_PAGE) / 4 - 1;
 8006ea8:	f641 43dd 	movw	r3, #7389	; 0x1cdd
 8006eac:	617b      	str	r3, [r7, #20]
			li = 0;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	61bb      	str	r3, [r7, #24]
			for (n = 16; n; n--) {
 8006eb2:	2310      	movs	r3, #16
 8006eb4:	61fb      	str	r3, [r7, #28]
 8006eb6:	e01e      	b.n	8006ef6 <ff_uni2oem+0x86>
				i = li + (hi - li) / 2;
 8006eb8:	697a      	ldr	r2, [r7, #20]
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	085b      	lsrs	r3, r3, #1
 8006ec0:	69ba      	ldr	r2, [r7, #24]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	623b      	str	r3, [r7, #32]
				if (uc == p[i * 2]) break;
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	4413      	add	r3, r2
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	8a7a      	ldrh	r2, [r7, #18]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d013      	beq.n	8006efe <ff_uni2oem+0x8e>
				if (uc > p[i * 2]) {
 8006ed6:	6a3b      	ldr	r3, [r7, #32]
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	4413      	add	r3, r2
 8006ede:	881b      	ldrh	r3, [r3, #0]
 8006ee0:	8a7a      	ldrh	r2, [r7, #18]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d902      	bls.n	8006eec <ff_uni2oem+0x7c>
					li = i;
 8006ee6:	6a3b      	ldr	r3, [r7, #32]
 8006ee8:	61bb      	str	r3, [r7, #24]
 8006eea:	e001      	b.n	8006ef0 <ff_uni2oem+0x80>
				} else {
					hi = i;
 8006eec:	6a3b      	ldr	r3, [r7, #32]
 8006eee:	617b      	str	r3, [r7, #20]
			for (n = 16; n; n--) {
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	3b01      	subs	r3, #1
 8006ef4:	61fb      	str	r3, [r7, #28]
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1dd      	bne.n	8006eb8 <ff_uni2oem+0x48>
 8006efc:	e000      	b.n	8006f00 <ff_uni2oem+0x90>
				if (uc == p[i * 2]) break;
 8006efe:	bf00      	nop
				}
			}
			if (n != 0) c = p[i * 2 + 1];
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d006      	beq.n	8006f14 <ff_uni2oem+0xa4>
 8006f06:	6a3b      	ldr	r3, [r7, #32]
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	3302      	adds	r3, #2
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	4413      	add	r3, r2
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	84fb      	strh	r3, [r7, #38]	; 0x26
		}
	}

	return c;
 8006f14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	372c      	adds	r7, #44	; 0x2c
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	0801c68c 	.word	0x0801c68c

08006f28 <ff_oem2uni>:

WCHAR ff_oem2uni (	/* Returns Unicode character, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b089      	sub	sp, #36	; 0x24
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	4603      	mov	r3, r0
 8006f30:	460a      	mov	r2, r1
 8006f32:	80fb      	strh	r3, [r7, #6]
 8006f34:	4613      	mov	r3, r2
 8006f36:	80bb      	strh	r3, [r7, #4]
	const WCHAR *p;
	WCHAR c = 0;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	83fb      	strh	r3, [r7, #30]
	UINT i = 0, n, li, hi;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	61bb      	str	r3, [r7, #24]


	if (oem < 0x80) {	/* ASCII? */
 8006f40:	88fb      	ldrh	r3, [r7, #6]
 8006f42:	2b7f      	cmp	r3, #127	; 0x7f
 8006f44:	d802      	bhi.n	8006f4c <ff_oem2uni+0x24>
		c = oem;
 8006f46:	88fb      	ldrh	r3, [r7, #6]
 8006f48:	83fb      	strh	r3, [r7, #30]
 8006f4a:	e03b      	b.n	8006fc4 <ff_oem2uni+0x9c>

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it valid code page? */
 8006f4c:	88bb      	ldrh	r3, [r7, #4]
 8006f4e:	f5b3 7f69 	cmp.w	r3, #932	; 0x3a4
 8006f52:	d137      	bne.n	8006fc4 <ff_oem2uni+0x9c>
			p = CVTBL(oem2uni, FF_CODE_PAGE);
 8006f54:	4b1f      	ldr	r3, [pc, #124]	; (8006fd4 <ff_oem2uni+0xac>)
 8006f56:	60bb      	str	r3, [r7, #8]
			hi = sizeof CVTBL(oem2uni, FF_CODE_PAGE) / 4 - 1;
 8006f58:	f641 43dd 	movw	r3, #7389	; 0x1cdd
 8006f5c:	60fb      	str	r3, [r7, #12]
			li = 0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	613b      	str	r3, [r7, #16]
			for (n = 16; n; n--) {
 8006f62:	2310      	movs	r3, #16
 8006f64:	617b      	str	r3, [r7, #20]
 8006f66:	e01e      	b.n	8006fa6 <ff_oem2uni+0x7e>
				i = li + (hi - li) / 2;
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	085b      	lsrs	r3, r3, #1
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	4413      	add	r3, r2
 8006f74:	61bb      	str	r3, [r7, #24]
				if (oem == p[i * 2]) break;
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	88fa      	ldrh	r2, [r7, #6]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d013      	beq.n	8006fae <ff_oem2uni+0x86>
				if (oem > p[i * 2]) {
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	88fa      	ldrh	r2, [r7, #6]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d902      	bls.n	8006f9c <ff_oem2uni+0x74>
					li = i;
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	613b      	str	r3, [r7, #16]
 8006f9a:	e001      	b.n	8006fa0 <ff_oem2uni+0x78>
				} else {
					hi = i;
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	60fb      	str	r3, [r7, #12]
			for (n = 16; n; n--) {
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	617b      	str	r3, [r7, #20]
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1dd      	bne.n	8006f68 <ff_oem2uni+0x40>
 8006fac:	e000      	b.n	8006fb0 <ff_oem2uni+0x88>
				if (oem == p[i * 2]) break;
 8006fae:	bf00      	nop
				}
			}
			if (n != 0) c = p[i * 2 + 1];
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d006      	beq.n	8006fc4 <ff_oem2uni+0x9c>
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	3302      	adds	r3, #2
 8006fbc:	68ba      	ldr	r2, [r7, #8]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	881b      	ldrh	r3, [r3, #0]
 8006fc2:	83fb      	strh	r3, [r7, #30]
		}
	}

	return c;
 8006fc4:	8bfb      	ldrh	r3, [r7, #30]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3724      	adds	r7, #36	; 0x24
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	08023a04 	.word	0x08023a04

08006fd8 <ff_wtoupper>:
/*------------------------------------------------------------------------*/

DWORD ff_wtoupper (	/* Returns up-converted code point */
	DWORD uni		/* Unicode code point to be up-converted */
)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fe6:	d27d      	bcs.n	80070e4 <ff_wtoupper+0x10c>
		uc = (WORD)uni;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	827b      	strh	r3, [r7, #18]
		p = uc < 0x1000 ? cvt1 : cvt2;
 8006fec:	8a7b      	ldrh	r3, [r7, #18]
 8006fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ff2:	d201      	bcs.n	8006ff8 <ff_wtoupper+0x20>
 8006ff4:	4b3f      	ldr	r3, [pc, #252]	; (80070f4 <ff_wtoupper+0x11c>)
 8006ff6:	e000      	b.n	8006ffa <ff_wtoupper+0x22>
 8006ff8:	4b3f      	ldr	r3, [pc, #252]	; (80070f8 <ff_wtoupper+0x120>)
 8006ffa:	617b      	str	r3, [r7, #20]
		for (;;) {
			bc = *p++;								/* Get the block base */
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	1c9a      	adds	r2, r3, #2
 8007000:	617a      	str	r2, [r7, #20]
 8007002:	881b      	ldrh	r3, [r3, #0]
 8007004:	823b      	strh	r3, [r7, #16]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 8007006:	8a3b      	ldrh	r3, [r7, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d069      	beq.n	80070e0 <ff_wtoupper+0x108>
 800700c:	8a7a      	ldrh	r2, [r7, #18]
 800700e:	8a3b      	ldrh	r3, [r7, #16]
 8007010:	429a      	cmp	r2, r3
 8007012:	d365      	bcc.n	80070e0 <ff_wtoupper+0x108>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	1c9a      	adds	r2, r3, #2
 8007018:	617a      	str	r2, [r7, #20]
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	81fb      	strh	r3, [r7, #14]
 800701e:	89fb      	ldrh	r3, [r7, #14]
 8007020:	0a1b      	lsrs	r3, r3, #8
 8007022:	81bb      	strh	r3, [r7, #12]
 8007024:	89fb      	ldrh	r3, [r7, #14]
 8007026:	b2db      	uxtb	r3, r3
 8007028:	81fb      	strh	r3, [r7, #14]
			if (uc < bc + nc) {	/* In the block? */
 800702a:	8a7a      	ldrh	r2, [r7, #18]
 800702c:	8a39      	ldrh	r1, [r7, #16]
 800702e:	89fb      	ldrh	r3, [r7, #14]
 8007030:	440b      	add	r3, r1
 8007032:	429a      	cmp	r2, r3
 8007034:	da4a      	bge.n	80070cc <ff_wtoupper+0xf4>
				switch (cmd) {
 8007036:	89bb      	ldrh	r3, [r7, #12]
 8007038:	2b08      	cmp	r3, #8
 800703a:	d850      	bhi.n	80070de <ff_wtoupper+0x106>
 800703c:	a201      	add	r2, pc, #4	; (adr r2, 8007044 <ff_wtoupper+0x6c>)
 800703e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007042:	bf00      	nop
 8007044:	08007069 	.word	0x08007069
 8007048:	0800707b 	.word	0x0800707b
 800704c:	08007091 	.word	0x08007091
 8007050:	08007099 	.word	0x08007099
 8007054:	080070a1 	.word	0x080070a1
 8007058:	080070a9 	.word	0x080070a9
 800705c:	080070b1 	.word	0x080070b1
 8007060:	080070b9 	.word	0x080070b9
 8007064:	080070c1 	.word	0x080070c1
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 8007068:	8a7a      	ldrh	r2, [r7, #18]
 800706a:	8a3b      	ldrh	r3, [r7, #16]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	005b      	lsls	r3, r3, #1
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	4413      	add	r3, r2
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	827b      	strh	r3, [r7, #18]
 8007078:	e027      	b.n	80070ca <ff_wtoupper+0xf2>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 800707a:	8a7a      	ldrh	r2, [r7, #18]
 800707c:	8a3b      	ldrh	r3, [r7, #16]
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	b29b      	uxth	r3, r3
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	b29b      	uxth	r3, r3
 8007088:	8a7a      	ldrh	r2, [r7, #18]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	827b      	strh	r3, [r7, #18]
 800708e:	e01c      	b.n	80070ca <ff_wtoupper+0xf2>
				case 2: uc -= 16; break;			/* Shift -16 */
 8007090:	8a7b      	ldrh	r3, [r7, #18]
 8007092:	3b10      	subs	r3, #16
 8007094:	827b      	strh	r3, [r7, #18]
 8007096:	e018      	b.n	80070ca <ff_wtoupper+0xf2>
				case 3:	uc -= 32; break;			/* Shift -32 */
 8007098:	8a7b      	ldrh	r3, [r7, #18]
 800709a:	3b20      	subs	r3, #32
 800709c:	827b      	strh	r3, [r7, #18]
 800709e:	e014      	b.n	80070ca <ff_wtoupper+0xf2>
				case 4:	uc -= 48; break;			/* Shift -48 */
 80070a0:	8a7b      	ldrh	r3, [r7, #18]
 80070a2:	3b30      	subs	r3, #48	; 0x30
 80070a4:	827b      	strh	r3, [r7, #18]
 80070a6:	e010      	b.n	80070ca <ff_wtoupper+0xf2>
				case 5:	uc -= 26; break;			/* Shift -26 */
 80070a8:	8a7b      	ldrh	r3, [r7, #18]
 80070aa:	3b1a      	subs	r3, #26
 80070ac:	827b      	strh	r3, [r7, #18]
 80070ae:	e00c      	b.n	80070ca <ff_wtoupper+0xf2>
				case 6:	uc += 8; break;				/* Shift +8 */
 80070b0:	8a7b      	ldrh	r3, [r7, #18]
 80070b2:	3308      	adds	r3, #8
 80070b4:	827b      	strh	r3, [r7, #18]
 80070b6:	e008      	b.n	80070ca <ff_wtoupper+0xf2>
				case 7: uc -= 80; break;			/* Shift -80 */
 80070b8:	8a7b      	ldrh	r3, [r7, #18]
 80070ba:	3b50      	subs	r3, #80	; 0x50
 80070bc:	827b      	strh	r3, [r7, #18]
 80070be:	e004      	b.n	80070ca <ff_wtoupper+0xf2>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 80070c0:	8a7b      	ldrh	r3, [r7, #18]
 80070c2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80070c6:	827b      	strh	r3, [r7, #18]
 80070c8:	bf00      	nop
				}
				break;
 80070ca:	e008      	b.n	80070de <ff_wtoupper+0x106>
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
 80070cc:	89bb      	ldrh	r3, [r7, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d194      	bne.n	8006ffc <ff_wtoupper+0x24>
 80070d2:	89fb      	ldrh	r3, [r7, #14]
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	4413      	add	r3, r2
 80070da:	617b      	str	r3, [r7, #20]
			bc = *p++;								/* Get the block base */
 80070dc:	e78e      	b.n	8006ffc <ff_wtoupper+0x24>
				break;
 80070de:	bf00      	nop
		}
		uni = uc;
 80070e0:	8a7b      	ldrh	r3, [r7, #18]
 80070e2:	607b      	str	r3, [r7, #4]
	}

	return uni;
 80070e4:	687b      	ldr	r3, [r7, #4]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	371c      	adds	r7, #28
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	0802ad7c 	.word	0x0802ad7c
 80070f8:	0802af70 	.word	0x0802af70

080070fc <HAL_TIM_PeriodElapsedCallback>:
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
static void MX_SPI2_Init(void);
static void MX_TIM4_Init(void);
/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af02      	add	r7, sp, #8
 8007102:	6078      	str	r0, [r7, #4]
 if(htim->Instance == TIM4)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a13      	ldr	r2, [pc, #76]	; (8007158 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d11f      	bne.n	800714e <HAL_TIM_PeriodElapsedCallback+0x52>
 {

	 int temp = byte_counter/5;
 800710e:	4b13      	ldr	r3, [pc, #76]	; (800715c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a13      	ldr	r2, [pc, #76]	; (8007160 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8007114:	fba2 2303 	umull	r2, r3, r2, r3
 8007118:	089b      	lsrs	r3, r3, #2
 800711a:	60fb      	str	r3, [r7, #12]
	 byte_counter=0;
 800711c:	4b0f      	ldr	r3, [pc, #60]	; (800715c <HAL_TIM_PeriodElapsedCallback+0x60>)
 800711e:	2200      	movs	r2, #0
 8007120:	601a      	str	r2, [r3, #0]
	 LCD_DisplayString(40,50, "        ", &Font12, BLACK, GREEN);
 8007122:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007126:	9301      	str	r3, [sp, #4]
 8007128:	2300      	movs	r3, #0
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	4b0d      	ldr	r3, [pc, #52]	; (8007164 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800712e:	4a0e      	ldr	r2, [pc, #56]	; (8007168 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8007130:	2132      	movs	r1, #50	; 0x32
 8007132:	2028      	movs	r0, #40	; 0x28
 8007134:	f7f9 fe16 	bl	8000d64 <LCD_DisplayString>
	 LCD_DisplayNum(40,50, temp, &Font12, BLACK, GREEN);
 8007138:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800713c:	9301      	str	r3, [sp, #4]
 800713e:	2300      	movs	r3, #0
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	4b08      	ldr	r3, [pc, #32]	; (8007164 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	2132      	movs	r1, #50	; 0x32
 8007148:	2028      	movs	r0, #40	; 0x28
 800714a:	f7f9 fe5d 	bl	8000e08 <LCD_DisplayNum>
	  	//	 LCD_DisplayString(55, 35, "OUT", &Font12, BLACK, GREEN);
	  	// }


 }
}
 800714e:	bf00      	nop
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	40000800 	.word	0x40000800
 800715c:	20000b0c 	.word	0x20000b0c
 8007160:	cccccccd 	.word	0xcccccccd
 8007164:	20000004 	.word	0x20000004
 8007168:	080197f4 	.word	0x080197f4

0800716c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007172:	f002 fb2d 	bl	80097d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007176:	f000 f835 	bl	80071e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800717a:	f000 f957 	bl	800742c <MX_GPIO_Init>
  MX_LWIP_Init();
 800717e:	f005 fa43 	bl	800c608 <MX_LWIP_Init>
  MX_SPI1_Init();
 8007182:	f000 f899 	bl	80072b8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8007186:	f000 f8cd 	bl	8007324 <MX_SPI2_Init>
  MX_TIM4_Init();
 800718a:	f000 f901 	bl	8007390 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  udp_server_init();
 800718e:	f000 fbb7 	bl	8007900 <udp_server_init>
  HAL_TIM_Base_Start_IT(&htim4);
 8007192:	480f      	ldr	r0, [pc, #60]	; (80071d0 <main+0x64>)
 8007194:	f004 fe63 	bl	800be5e <HAL_TIM_Base_Start_IT>
  LCD_DisplayString(5, 50, "LINK:", &Font12, BLACK, GREEN);
 8007198:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800719c:	9301      	str	r3, [sp, #4]
 800719e:	2300      	movs	r3, #0
 80071a0:	9300      	str	r3, [sp, #0]
 80071a2:	4b0c      	ldr	r3, [pc, #48]	; (80071d4 <main+0x68>)
 80071a4:	4a0c      	ldr	r2, [pc, #48]	; (80071d8 <main+0x6c>)
 80071a6:	2132      	movs	r1, #50	; 0x32
 80071a8:	2005      	movs	r0, #5
 80071aa:	f7f9 fddb 	bl	8000d64 <LCD_DisplayString>
  LCD_DisplayString(100, 50, "B/s", &Font12, BLACK, GREEN);
 80071ae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80071b2:	9301      	str	r3, [sp, #4]
 80071b4:	2300      	movs	r3, #0
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	4b06      	ldr	r3, [pc, #24]	; (80071d4 <main+0x68>)
 80071ba:	4a08      	ldr	r2, [pc, #32]	; (80071dc <main+0x70>)
 80071bc:	2132      	movs	r1, #50	; 0x32
 80071be:	2064      	movs	r0, #100	; 0x64
 80071c0:	f7f9 fdd0 	bl	8000d64 <LCD_DisplayString>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ethernetif_input(&gnetif);
 80071c4:	4806      	ldr	r0, [pc, #24]	; (80071e0 <main+0x74>)
 80071c6:	f005 fd07 	bl	800cbd8 <ethernetif_input>
	  	  sys_check_timeouts();
 80071ca:	f00c fcf9 	bl	8013bc0 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 80071ce:	e7f9      	b.n	80071c4 <main+0x58>
 80071d0:	20000630 	.word	0x20000630
 80071d4:	20000004 	.word	0x20000004
 80071d8:	08019800 	.word	0x08019800
 80071dc:	08019808 	.word	0x08019808
 80071e0:	20000678 	.word	0x20000678

080071e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b094      	sub	sp, #80	; 0x50
 80071e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80071ea:	f107 0320 	add.w	r3, r7, #32
 80071ee:	2230      	movs	r2, #48	; 0x30
 80071f0:	2100      	movs	r1, #0
 80071f2:	4618      	mov	r0, r3
 80071f4:	f011 fbbc 	bl	8018970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80071f8:	f107 030c 	add.w	r3, r7, #12
 80071fc:	2200      	movs	r2, #0
 80071fe:	601a      	str	r2, [r3, #0]
 8007200:	605a      	str	r2, [r3, #4]
 8007202:	609a      	str	r2, [r3, #8]
 8007204:	60da      	str	r2, [r3, #12]
 8007206:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007208:	2300      	movs	r3, #0
 800720a:	60bb      	str	r3, [r7, #8]
 800720c:	4b28      	ldr	r3, [pc, #160]	; (80072b0 <SystemClock_Config+0xcc>)
 800720e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007210:	4a27      	ldr	r2, [pc, #156]	; (80072b0 <SystemClock_Config+0xcc>)
 8007212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007216:	6413      	str	r3, [r2, #64]	; 0x40
 8007218:	4b25      	ldr	r3, [pc, #148]	; (80072b0 <SystemClock_Config+0xcc>)
 800721a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007220:	60bb      	str	r3, [r7, #8]
 8007222:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007224:	2300      	movs	r3, #0
 8007226:	607b      	str	r3, [r7, #4]
 8007228:	4b22      	ldr	r3, [pc, #136]	; (80072b4 <SystemClock_Config+0xd0>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a21      	ldr	r2, [pc, #132]	; (80072b4 <SystemClock_Config+0xd0>)
 800722e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007232:	6013      	str	r3, [r2, #0]
 8007234:	4b1f      	ldr	r3, [pc, #124]	; (80072b4 <SystemClock_Config+0xd0>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800723c:	607b      	str	r3, [r7, #4]
 800723e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007240:	2301      	movs	r3, #1
 8007242:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007244:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007248:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800724a:	2302      	movs	r3, #2
 800724c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800724e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007252:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8007254:	2304      	movs	r3, #4
 8007256:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007258:	23a8      	movs	r3, #168	; 0xa8
 800725a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800725c:	2302      	movs	r3, #2
 800725e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007260:	2304      	movs	r3, #4
 8007262:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007264:	f107 0320 	add.w	r3, r7, #32
 8007268:	4618      	mov	r0, r3
 800726a:	f003 fd9f 	bl	800adac <HAL_RCC_OscConfig>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007274:	f000 f964 	bl	8007540 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007278:	230f      	movs	r3, #15
 800727a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800727c:	2302      	movs	r3, #2
 800727e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007280:	2300      	movs	r3, #0
 8007282:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007284:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007288:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800728a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800728e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007290:	f107 030c 	add.w	r3, r7, #12
 8007294:	2105      	movs	r1, #5
 8007296:	4618      	mov	r0, r3
 8007298:	f003 fff8 	bl	800b28c <HAL_RCC_ClockConfig>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80072a2:	f000 f94d 	bl	8007540 <Error_Handler>
  }
}
 80072a6:	bf00      	nop
 80072a8:	3750      	adds	r7, #80	; 0x50
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	40023800 	.word	0x40023800
 80072b4:	40007000 	.word	0x40007000

080072b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80072bc:	4b17      	ldr	r3, [pc, #92]	; (800731c <MX_SPI1_Init+0x64>)
 80072be:	4a18      	ldr	r2, [pc, #96]	; (8007320 <MX_SPI1_Init+0x68>)
 80072c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80072c2:	4b16      	ldr	r3, [pc, #88]	; (800731c <MX_SPI1_Init+0x64>)
 80072c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80072c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80072ca:	4b14      	ldr	r3, [pc, #80]	; (800731c <MX_SPI1_Init+0x64>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80072d0:	4b12      	ldr	r3, [pc, #72]	; (800731c <MX_SPI1_Init+0x64>)
 80072d2:	2200      	movs	r2, #0
 80072d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80072d6:	4b11      	ldr	r3, [pc, #68]	; (800731c <MX_SPI1_Init+0x64>)
 80072d8:	2200      	movs	r2, #0
 80072da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80072dc:	4b0f      	ldr	r3, [pc, #60]	; (800731c <MX_SPI1_Init+0x64>)
 80072de:	2200      	movs	r2, #0
 80072e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80072e2:	4b0e      	ldr	r3, [pc, #56]	; (800731c <MX_SPI1_Init+0x64>)
 80072e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80072ea:	4b0c      	ldr	r3, [pc, #48]	; (800731c <MX_SPI1_Init+0x64>)
 80072ec:	2218      	movs	r2, #24
 80072ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80072f0:	4b0a      	ldr	r3, [pc, #40]	; (800731c <MX_SPI1_Init+0x64>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80072f6:	4b09      	ldr	r3, [pc, #36]	; (800731c <MX_SPI1_Init+0x64>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072fc:	4b07      	ldr	r3, [pc, #28]	; (800731c <MX_SPI1_Init+0x64>)
 80072fe:	2200      	movs	r2, #0
 8007300:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8007302:	4b06      	ldr	r3, [pc, #24]	; (800731c <MX_SPI1_Init+0x64>)
 8007304:	220a      	movs	r2, #10
 8007306:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007308:	4804      	ldr	r0, [pc, #16]	; (800731c <MX_SPI1_Init+0x64>)
 800730a:	f004 f989 	bl	800b620 <HAL_SPI_Init>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8007314:	f000 f914 	bl	8007540 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007318:	bf00      	nop
 800731a:	bd80      	pop	{r7, pc}
 800731c:	200006ac 	.word	0x200006ac
 8007320:	40013000 	.word	0x40013000

08007324 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8007328:	4b17      	ldr	r3, [pc, #92]	; (8007388 <MX_SPI2_Init+0x64>)
 800732a:	4a18      	ldr	r2, [pc, #96]	; (800738c <MX_SPI2_Init+0x68>)
 800732c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800732e:	4b16      	ldr	r3, [pc, #88]	; (8007388 <MX_SPI2_Init+0x64>)
 8007330:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007334:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007336:	4b14      	ldr	r3, [pc, #80]	; (8007388 <MX_SPI2_Init+0x64>)
 8007338:	2200      	movs	r2, #0
 800733a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800733c:	4b12      	ldr	r3, [pc, #72]	; (8007388 <MX_SPI2_Init+0x64>)
 800733e:	2200      	movs	r2, #0
 8007340:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007342:	4b11      	ldr	r3, [pc, #68]	; (8007388 <MX_SPI2_Init+0x64>)
 8007344:	2200      	movs	r2, #0
 8007346:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007348:	4b0f      	ldr	r3, [pc, #60]	; (8007388 <MX_SPI2_Init+0x64>)
 800734a:	2200      	movs	r2, #0
 800734c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800734e:	4b0e      	ldr	r3, [pc, #56]	; (8007388 <MX_SPI2_Init+0x64>)
 8007350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007354:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8007356:	4b0c      	ldr	r3, [pc, #48]	; (8007388 <MX_SPI2_Init+0x64>)
 8007358:	2208      	movs	r2, #8
 800735a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800735c:	4b0a      	ldr	r3, [pc, #40]	; (8007388 <MX_SPI2_Init+0x64>)
 800735e:	2200      	movs	r2, #0
 8007360:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007362:	4b09      	ldr	r3, [pc, #36]	; (8007388 <MX_SPI2_Init+0x64>)
 8007364:	2200      	movs	r2, #0
 8007366:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007368:	4b07      	ldr	r3, [pc, #28]	; (8007388 <MX_SPI2_Init+0x64>)
 800736a:	2200      	movs	r2, #0
 800736c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800736e:	4b06      	ldr	r3, [pc, #24]	; (8007388 <MX_SPI2_Init+0x64>)
 8007370:	220a      	movs	r2, #10
 8007372:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007374:	4804      	ldr	r0, [pc, #16]	; (8007388 <MX_SPI2_Init+0x64>)
 8007376:	f004 f953 	bl	800b620 <HAL_SPI_Init>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d001      	beq.n	8007384 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8007380:	f000 f8de 	bl	8007540 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007384:	bf00      	nop
 8007386:	bd80      	pop	{r7, pc}
 8007388:	200005d8 	.word	0x200005d8
 800738c:	40003800 	.word	0x40003800

08007390 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007396:	f107 0308 	add.w	r3, r7, #8
 800739a:	2200      	movs	r2, #0
 800739c:	601a      	str	r2, [r3, #0]
 800739e:	605a      	str	r2, [r3, #4]
 80073a0:	609a      	str	r2, [r3, #8]
 80073a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80073a4:	463b      	mov	r3, r7
 80073a6:	2200      	movs	r2, #0
 80073a8:	601a      	str	r2, [r3, #0]
 80073aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80073ac:	4b1d      	ldr	r3, [pc, #116]	; (8007424 <MX_TIM4_Init+0x94>)
 80073ae:	4a1e      	ldr	r2, [pc, #120]	; (8007428 <MX_TIM4_Init+0x98>)
 80073b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41999;
 80073b2:	4b1c      	ldr	r3, [pc, #112]	; (8007424 <MX_TIM4_Init+0x94>)
 80073b4:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80073b8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80073ba:	4b1a      	ldr	r3, [pc, #104]	; (8007424 <MX_TIM4_Init+0x94>)
 80073bc:	2200      	movs	r2, #0
 80073be:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80073c0:	4b18      	ldr	r3, [pc, #96]	; (8007424 <MX_TIM4_Init+0x94>)
 80073c2:	f242 720f 	movw	r2, #9999	; 0x270f
 80073c6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80073c8:	4b16      	ldr	r3, [pc, #88]	; (8007424 <MX_TIM4_Init+0x94>)
 80073ca:	2200      	movs	r2, #0
 80073cc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80073ce:	4b15      	ldr	r3, [pc, #84]	; (8007424 <MX_TIM4_Init+0x94>)
 80073d0:	2200      	movs	r2, #0
 80073d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80073d4:	4813      	ldr	r0, [pc, #76]	; (8007424 <MX_TIM4_Init+0x94>)
 80073d6:	f004 fd17 	bl	800be08 <HAL_TIM_Base_Init>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d001      	beq.n	80073e4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80073e0:	f000 f8ae 	bl	8007540 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80073e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80073ea:	f107 0308 	add.w	r3, r7, #8
 80073ee:	4619      	mov	r1, r3
 80073f0:	480c      	ldr	r0, [pc, #48]	; (8007424 <MX_TIM4_Init+0x94>)
 80073f2:	f004 fe60 	bl	800c0b6 <HAL_TIM_ConfigClockSource>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d001      	beq.n	8007400 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80073fc:	f000 f8a0 	bl	8007540 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007400:	2300      	movs	r3, #0
 8007402:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007404:	2300      	movs	r3, #0
 8007406:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007408:	463b      	mov	r3, r7
 800740a:	4619      	mov	r1, r3
 800740c:	4805      	ldr	r0, [pc, #20]	; (8007424 <MX_TIM4_Init+0x94>)
 800740e:	f005 f86b 	bl	800c4e8 <HAL_TIMEx_MasterConfigSynchronization>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d001      	beq.n	800741c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8007418:	f000 f892 	bl	8007540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800741c:	bf00      	nop
 800741e:	3718      	adds	r7, #24
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	20000630 	.word	0x20000630
 8007428:	40000800 	.word	0x40000800

0800742c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b08a      	sub	sp, #40	; 0x28
 8007430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007432:	f107 0314 	add.w	r3, r7, #20
 8007436:	2200      	movs	r2, #0
 8007438:	601a      	str	r2, [r3, #0]
 800743a:	605a      	str	r2, [r3, #4]
 800743c:	609a      	str	r2, [r3, #8]
 800743e:	60da      	str	r2, [r3, #12]
 8007440:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007442:	2300      	movs	r3, #0
 8007444:	613b      	str	r3, [r7, #16]
 8007446:	4b3a      	ldr	r3, [pc, #232]	; (8007530 <MX_GPIO_Init+0x104>)
 8007448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744a:	4a39      	ldr	r2, [pc, #228]	; (8007530 <MX_GPIO_Init+0x104>)
 800744c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007450:	6313      	str	r3, [r2, #48]	; 0x30
 8007452:	4b37      	ldr	r3, [pc, #220]	; (8007530 <MX_GPIO_Init+0x104>)
 8007454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800745a:	613b      	str	r3, [r7, #16]
 800745c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800745e:	2300      	movs	r3, #0
 8007460:	60fb      	str	r3, [r7, #12]
 8007462:	4b33      	ldr	r3, [pc, #204]	; (8007530 <MX_GPIO_Init+0x104>)
 8007464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007466:	4a32      	ldr	r2, [pc, #200]	; (8007530 <MX_GPIO_Init+0x104>)
 8007468:	f043 0304 	orr.w	r3, r3, #4
 800746c:	6313      	str	r3, [r2, #48]	; 0x30
 800746e:	4b30      	ldr	r3, [pc, #192]	; (8007530 <MX_GPIO_Init+0x104>)
 8007470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007472:	f003 0304 	and.w	r3, r3, #4
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800747a:	2300      	movs	r3, #0
 800747c:	60bb      	str	r3, [r7, #8]
 800747e:	4b2c      	ldr	r3, [pc, #176]	; (8007530 <MX_GPIO_Init+0x104>)
 8007480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007482:	4a2b      	ldr	r2, [pc, #172]	; (8007530 <MX_GPIO_Init+0x104>)
 8007484:	f043 0301 	orr.w	r3, r3, #1
 8007488:	6313      	str	r3, [r2, #48]	; 0x30
 800748a:	4b29      	ldr	r3, [pc, #164]	; (8007530 <MX_GPIO_Init+0x104>)
 800748c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	60bb      	str	r3, [r7, #8]
 8007494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007496:	2300      	movs	r3, #0
 8007498:	607b      	str	r3, [r7, #4]
 800749a:	4b25      	ldr	r3, [pc, #148]	; (8007530 <MX_GPIO_Init+0x104>)
 800749c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749e:	4a24      	ldr	r2, [pc, #144]	; (8007530 <MX_GPIO_Init+0x104>)
 80074a0:	f043 0302 	orr.w	r3, r3, #2
 80074a4:	6313      	str	r3, [r2, #48]	; 0x30
 80074a6:	4b22      	ldr	r3, [pc, #136]	; (8007530 <MX_GPIO_Init+0x104>)
 80074a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074aa:	f003 0302 	and.w	r3, r3, #2
 80074ae:	607b      	str	r3, [r7, #4]
 80074b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80074b2:	2200      	movs	r2, #0
 80074b4:	2180      	movs	r1, #128	; 0x80
 80074b6:	481f      	ldr	r0, [pc, #124]	; (8007534 <MX_GPIO_Init+0x108>)
 80074b8:	f003 fc5e 	bl	800ad78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80074bc:	2200      	movs	r2, #0
 80074be:	f44f 7140 	mov.w	r1, #768	; 0x300
 80074c2:	481d      	ldr	r0, [pc, #116]	; (8007538 <MX_GPIO_Init+0x10c>)
 80074c4:	f003 fc58 	bl	800ad78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80074c8:	2200      	movs	r2, #0
 80074ca:	2140      	movs	r1, #64	; 0x40
 80074cc:	481b      	ldr	r0, [pc, #108]	; (800753c <MX_GPIO_Init+0x110>)
 80074ce:	f003 fc53 	bl	800ad78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80074d2:	2380      	movs	r3, #128	; 0x80
 80074d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074d6:	2301      	movs	r3, #1
 80074d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074da:	2300      	movs	r3, #0
 80074dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074de:	2300      	movs	r3, #0
 80074e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80074e2:	f107 0314 	add.w	r3, r7, #20
 80074e6:	4619      	mov	r1, r3
 80074e8:	4812      	ldr	r0, [pc, #72]	; (8007534 <MX_GPIO_Init+0x108>)
 80074ea:	f003 faab 	bl	800aa44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 80074ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80074f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074f4:	2301      	movs	r3, #1
 80074f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074f8:	2300      	movs	r3, #0
 80074fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074fc:	2300      	movs	r3, #0
 80074fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007500:	f107 0314 	add.w	r3, r7, #20
 8007504:	4619      	mov	r1, r3
 8007506:	480c      	ldr	r0, [pc, #48]	; (8007538 <MX_GPIO_Init+0x10c>)
 8007508:	f003 fa9c 	bl	800aa44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 800750c:	2340      	movs	r3, #64	; 0x40
 800750e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007510:	2301      	movs	r3, #1
 8007512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007514:	2300      	movs	r3, #0
 8007516:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007518:	2300      	movs	r3, #0
 800751a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 800751c:	f107 0314 	add.w	r3, r7, #20
 8007520:	4619      	mov	r1, r3
 8007522:	4806      	ldr	r0, [pc, #24]	; (800753c <MX_GPIO_Init+0x110>)
 8007524:	f003 fa8e 	bl	800aa44 <HAL_GPIO_Init>

}
 8007528:	bf00      	nop
 800752a:	3728      	adds	r7, #40	; 0x28
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	40023800 	.word	0x40023800
 8007534:	40020800 	.word	0x40020800
 8007538:	40020000 	.word	0x40020000
 800753c:	40020400 	.word	0x40020400

08007540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007540:	b480      	push	{r7}
 8007542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007544:	bf00      	nop
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
	...

08007550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007556:	2300      	movs	r3, #0
 8007558:	607b      	str	r3, [r7, #4]
 800755a:	4b10      	ldr	r3, [pc, #64]	; (800759c <HAL_MspInit+0x4c>)
 800755c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800755e:	4a0f      	ldr	r2, [pc, #60]	; (800759c <HAL_MspInit+0x4c>)
 8007560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007564:	6453      	str	r3, [r2, #68]	; 0x44
 8007566:	4b0d      	ldr	r3, [pc, #52]	; (800759c <HAL_MspInit+0x4c>)
 8007568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800756a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800756e:	607b      	str	r3, [r7, #4]
 8007570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007572:	2300      	movs	r3, #0
 8007574:	603b      	str	r3, [r7, #0]
 8007576:	4b09      	ldr	r3, [pc, #36]	; (800759c <HAL_MspInit+0x4c>)
 8007578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757a:	4a08      	ldr	r2, [pc, #32]	; (800759c <HAL_MspInit+0x4c>)
 800757c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007580:	6413      	str	r3, [r2, #64]	; 0x40
 8007582:	4b06      	ldr	r3, [pc, #24]	; (800759c <HAL_MspInit+0x4c>)
 8007584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800758a:	603b      	str	r3, [r7, #0]
 800758c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800758e:	bf00      	nop
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	40023800 	.word	0x40023800

080075a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b08c      	sub	sp, #48	; 0x30
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075a8:	f107 031c 	add.w	r3, r7, #28
 80075ac:	2200      	movs	r2, #0
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	605a      	str	r2, [r3, #4]
 80075b2:	609a      	str	r2, [r3, #8]
 80075b4:	60da      	str	r2, [r3, #12]
 80075b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a41      	ldr	r2, [pc, #260]	; (80076c4 <HAL_SPI_MspInit+0x124>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d12c      	bne.n	800761c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80075c2:	2300      	movs	r3, #0
 80075c4:	61bb      	str	r3, [r7, #24]
 80075c6:	4b40      	ldr	r3, [pc, #256]	; (80076c8 <HAL_SPI_MspInit+0x128>)
 80075c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ca:	4a3f      	ldr	r2, [pc, #252]	; (80076c8 <HAL_SPI_MspInit+0x128>)
 80075cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80075d0:	6453      	str	r3, [r2, #68]	; 0x44
 80075d2:	4b3d      	ldr	r3, [pc, #244]	; (80076c8 <HAL_SPI_MspInit+0x128>)
 80075d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075da:	61bb      	str	r3, [r7, #24]
 80075dc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075de:	2300      	movs	r3, #0
 80075e0:	617b      	str	r3, [r7, #20]
 80075e2:	4b39      	ldr	r3, [pc, #228]	; (80076c8 <HAL_SPI_MspInit+0x128>)
 80075e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e6:	4a38      	ldr	r2, [pc, #224]	; (80076c8 <HAL_SPI_MspInit+0x128>)
 80075e8:	f043 0302 	orr.w	r3, r3, #2
 80075ec:	6313      	str	r3, [r2, #48]	; 0x30
 80075ee:	4b36      	ldr	r3, [pc, #216]	; (80076c8 <HAL_SPI_MspInit+0x128>)
 80075f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f2:	f003 0302 	and.w	r3, r3, #2
 80075f6:	617b      	str	r3, [r7, #20]
 80075f8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80075fa:	2338      	movs	r3, #56	; 0x38
 80075fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075fe:	2302      	movs	r3, #2
 8007600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007602:	2300      	movs	r3, #0
 8007604:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007606:	2303      	movs	r3, #3
 8007608:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800760a:	2305      	movs	r3, #5
 800760c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800760e:	f107 031c 	add.w	r3, r7, #28
 8007612:	4619      	mov	r1, r3
 8007614:	482d      	ldr	r0, [pc, #180]	; (80076cc <HAL_SPI_MspInit+0x12c>)
 8007616:	f003 fa15 	bl	800aa44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800761a:	e04f      	b.n	80076bc <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a2b      	ldr	r2, [pc, #172]	; (80076d0 <HAL_SPI_MspInit+0x130>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d14a      	bne.n	80076bc <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007626:	2300      	movs	r3, #0
 8007628:	613b      	str	r3, [r7, #16]
 800762a:	4b27      	ldr	r3, [pc, #156]	; (80076c8 <HAL_SPI_MspInit+0x128>)
 800762c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762e:	4a26      	ldr	r2, [pc, #152]	; (80076c8 <HAL_SPI_MspInit+0x128>)
 8007630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007634:	6413      	str	r3, [r2, #64]	; 0x40
 8007636:	4b24      	ldr	r3, [pc, #144]	; (80076c8 <HAL_SPI_MspInit+0x128>)
 8007638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800763e:	613b      	str	r3, [r7, #16]
 8007640:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007642:	2300      	movs	r3, #0
 8007644:	60fb      	str	r3, [r7, #12]
 8007646:	4b20      	ldr	r3, [pc, #128]	; (80076c8 <HAL_SPI_MspInit+0x128>)
 8007648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764a:	4a1f      	ldr	r2, [pc, #124]	; (80076c8 <HAL_SPI_MspInit+0x128>)
 800764c:	f043 0304 	orr.w	r3, r3, #4
 8007650:	6313      	str	r3, [r2, #48]	; 0x30
 8007652:	4b1d      	ldr	r3, [pc, #116]	; (80076c8 <HAL_SPI_MspInit+0x128>)
 8007654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007656:	f003 0304 	and.w	r3, r3, #4
 800765a:	60fb      	str	r3, [r7, #12]
 800765c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800765e:	2300      	movs	r3, #0
 8007660:	60bb      	str	r3, [r7, #8]
 8007662:	4b19      	ldr	r3, [pc, #100]	; (80076c8 <HAL_SPI_MspInit+0x128>)
 8007664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007666:	4a18      	ldr	r2, [pc, #96]	; (80076c8 <HAL_SPI_MspInit+0x128>)
 8007668:	f043 0302 	orr.w	r3, r3, #2
 800766c:	6313      	str	r3, [r2, #48]	; 0x30
 800766e:	4b16      	ldr	r3, [pc, #88]	; (80076c8 <HAL_SPI_MspInit+0x128>)
 8007670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007672:	f003 0302 	and.w	r3, r3, #2
 8007676:	60bb      	str	r3, [r7, #8]
 8007678:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800767a:	2308      	movs	r3, #8
 800767c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800767e:	2302      	movs	r3, #2
 8007680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007682:	2300      	movs	r3, #0
 8007684:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007686:	2303      	movs	r3, #3
 8007688:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800768a:	2305      	movs	r3, #5
 800768c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800768e:	f107 031c 	add.w	r3, r7, #28
 8007692:	4619      	mov	r1, r3
 8007694:	480f      	ldr	r0, [pc, #60]	; (80076d4 <HAL_SPI_MspInit+0x134>)
 8007696:	f003 f9d5 	bl	800aa44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800769a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800769e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076a0:	2302      	movs	r3, #2
 80076a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076a4:	2300      	movs	r3, #0
 80076a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076a8:	2303      	movs	r3, #3
 80076aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80076ac:	2305      	movs	r3, #5
 80076ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076b0:	f107 031c 	add.w	r3, r7, #28
 80076b4:	4619      	mov	r1, r3
 80076b6:	4805      	ldr	r0, [pc, #20]	; (80076cc <HAL_SPI_MspInit+0x12c>)
 80076b8:	f003 f9c4 	bl	800aa44 <HAL_GPIO_Init>
}
 80076bc:	bf00      	nop
 80076be:	3730      	adds	r7, #48	; 0x30
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	40013000 	.word	0x40013000
 80076c8:	40023800 	.word	0x40023800
 80076cc:	40020400 	.word	0x40020400
 80076d0:	40003800 	.word	0x40003800
 80076d4:	40020800 	.word	0x40020800

080076d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a0e      	ldr	r2, [pc, #56]	; (8007720 <HAL_TIM_Base_MspInit+0x48>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d115      	bne.n	8007716 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80076ea:	2300      	movs	r3, #0
 80076ec:	60fb      	str	r3, [r7, #12]
 80076ee:	4b0d      	ldr	r3, [pc, #52]	; (8007724 <HAL_TIM_Base_MspInit+0x4c>)
 80076f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f2:	4a0c      	ldr	r2, [pc, #48]	; (8007724 <HAL_TIM_Base_MspInit+0x4c>)
 80076f4:	f043 0304 	orr.w	r3, r3, #4
 80076f8:	6413      	str	r3, [r2, #64]	; 0x40
 80076fa:	4b0a      	ldr	r3, [pc, #40]	; (8007724 <HAL_TIM_Base_MspInit+0x4c>)
 80076fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fe:	f003 0304 	and.w	r3, r3, #4
 8007702:	60fb      	str	r3, [r7, #12]
 8007704:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8007706:	2200      	movs	r2, #0
 8007708:	2101      	movs	r1, #1
 800770a:	201e      	movs	r0, #30
 800770c:	f002 f9cf 	bl	8009aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007710:	201e      	movs	r0, #30
 8007712:	f002 f9e8 	bl	8009ae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007716:	bf00      	nop
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	40000800 	.word	0x40000800
 8007724:	40023800 	.word	0x40023800

08007728 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007728:	b480      	push	{r7}
 800772a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800772c:	bf00      	nop
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr

08007736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007736:	b480      	push	{r7}
 8007738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800773a:	e7fe      	b.n	800773a <HardFault_Handler+0x4>

0800773c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800773c:	b480      	push	{r7}
 800773e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007740:	e7fe      	b.n	8007740 <MemManage_Handler+0x4>

08007742 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007742:	b480      	push	{r7}
 8007744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007746:	e7fe      	b.n	8007746 <BusFault_Handler+0x4>

08007748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007748:	b480      	push	{r7}
 800774a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800774c:	e7fe      	b.n	800774c <UsageFault_Handler+0x4>

0800774e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800774e:	b480      	push	{r7}
 8007750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007752:	bf00      	nop
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800775c:	b480      	push	{r7}
 800775e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007760:	bf00      	nop
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800776a:	b480      	push	{r7}
 800776c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800776e:	bf00      	nop
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 800777c:	f7fa f92e 	bl	80019dc <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007780:	f002 f878 	bl	8009874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007784:	bf00      	nop
 8007786:	bd80      	pop	{r7, pc}

08007788 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800778c:	4802      	ldr	r0, [pc, #8]	; (8007798 <TIM4_IRQHandler+0x10>)
 800778e:	f004 fb8a 	bl	800bea6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8007792:	bf00      	nop
 8007794:	bd80      	pop	{r7, pc}
 8007796:	bf00      	nop
 8007798:	20000630 	.word	0x20000630

0800779c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80077a8:	2300      	movs	r3, #0
 80077aa:	617b      	str	r3, [r7, #20]
 80077ac:	e00a      	b.n	80077c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80077ae:	f3af 8000 	nop.w
 80077b2:	4601      	mov	r1, r0
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	1c5a      	adds	r2, r3, #1
 80077b8:	60ba      	str	r2, [r7, #8]
 80077ba:	b2ca      	uxtb	r2, r1
 80077bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	3301      	adds	r3, #1
 80077c2:	617b      	str	r3, [r7, #20]
 80077c4:	697a      	ldr	r2, [r7, #20]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	dbf0      	blt.n	80077ae <_read+0x12>
	}

return len;
 80077cc:	687b      	ldr	r3, [r7, #4]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3718      	adds	r7, #24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b086      	sub	sp, #24
 80077da:	af00      	add	r7, sp, #0
 80077dc:	60f8      	str	r0, [r7, #12]
 80077de:	60b9      	str	r1, [r7, #8]
 80077e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80077e2:	2300      	movs	r3, #0
 80077e4:	617b      	str	r3, [r7, #20]
 80077e6:	e009      	b.n	80077fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	1c5a      	adds	r2, r3, #1
 80077ec:	60ba      	str	r2, [r7, #8]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	3301      	adds	r3, #1
 80077fa:	617b      	str	r3, [r7, #20]
 80077fc:	697a      	ldr	r2, [r7, #20]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	429a      	cmp	r2, r3
 8007802:	dbf1      	blt.n	80077e8 <_write+0x12>
	}
	return len;
 8007804:	687b      	ldr	r3, [r7, #4]
}
 8007806:	4618      	mov	r0, r3
 8007808:	3718      	adds	r7, #24
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <_close>:

int _close(int file)
{
 800780e:	b480      	push	{r7}
 8007810:	b083      	sub	sp, #12
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
	return -1;
 8007816:	f04f 33ff 	mov.w	r3, #4294967295
}
 800781a:	4618      	mov	r0, r3
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007826:	b480      	push	{r7}
 8007828:	b083      	sub	sp, #12
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007836:	605a      	str	r2, [r3, #4]
	return 0;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <_isatty>:

int _isatty(int file)
{
 8007846:	b480      	push	{r7}
 8007848:	b083      	sub	sp, #12
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
	return 1;
 800784e:	2301      	movs	r3, #1
}
 8007850:	4618      	mov	r0, r3
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
	return 0;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
	...

08007878 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007880:	4b11      	ldr	r3, [pc, #68]	; (80078c8 <_sbrk+0x50>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d102      	bne.n	800788e <_sbrk+0x16>
		heap_end = &end;
 8007888:	4b0f      	ldr	r3, [pc, #60]	; (80078c8 <_sbrk+0x50>)
 800788a:	4a10      	ldr	r2, [pc, #64]	; (80078cc <_sbrk+0x54>)
 800788c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800788e:	4b0e      	ldr	r3, [pc, #56]	; (80078c8 <_sbrk+0x50>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007894:	4b0c      	ldr	r3, [pc, #48]	; (80078c8 <_sbrk+0x50>)
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4413      	add	r3, r2
 800789c:	466a      	mov	r2, sp
 800789e:	4293      	cmp	r3, r2
 80078a0:	d905      	bls.n	80078ae <_sbrk+0x36>
	{
		errno = ENOMEM;
 80078a2:	4b0b      	ldr	r3, [pc, #44]	; (80078d0 <_sbrk+0x58>)
 80078a4:	220c      	movs	r2, #12
 80078a6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80078a8:	f04f 33ff 	mov.w	r3, #4294967295
 80078ac:	e006      	b.n	80078bc <_sbrk+0x44>
	}

	heap_end += incr;
 80078ae:	4b06      	ldr	r3, [pc, #24]	; (80078c8 <_sbrk+0x50>)
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4413      	add	r3, r2
 80078b6:	4a04      	ldr	r2, [pc, #16]	; (80078c8 <_sbrk+0x50>)
 80078b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80078ba:	68fb      	ldr	r3, [r7, #12]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr
 80078c8:	200000d0 	.word	0x200000d0
 80078cc:	20007f18 	.word	0x20007f18
 80078d0:	20007f10 	.word	0x20007f10

080078d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80078d4:	b480      	push	{r7}
 80078d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80078d8:	4b08      	ldr	r3, [pc, #32]	; (80078fc <SystemInit+0x28>)
 80078da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078de:	4a07      	ldr	r2, [pc, #28]	; (80078fc <SystemInit+0x28>)
 80078e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80078e8:	4b04      	ldr	r3, [pc, #16]	; (80078fc <SystemInit+0x28>)
 80078ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80078ee:	609a      	str	r2, [r3, #8]
#endif
}
 80078f0:	bf00      	nop
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	e000ed00 	.word	0xe000ed00

08007900 <udp_server_init>:
uint16_t login_user();
uint16_t check_if_logged();
FRESULT delete_node (TCHAR* path, UINT sz_buff, FILINFO* fno);
void set_privileges();
void udp_server_init(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af02      	add	r7, sp, #8
	LCD_SCAN_DIR Lcd_ScanDir = SCAN_DIR_DFT;//SCAN_DIR_DFT = D2U_L2R
 8007906:	2300      	movs	r3, #0
 8007908:	73fb      	strb	r3, [r7, #15]
	LCD_Init( Lcd_ScanDir );
 800790a:	7bfb      	ldrb	r3, [r7, #15]
 800790c:	4618      	mov	r0, r3
 800790e:	f7f9 f871 	bl	80009f4 <LCD_Init>
	user_count=0;
 8007912:	4b2c      	ldr	r3, [pc, #176]	; (80079c4 <udp_server_init+0xc4>)
 8007914:	2200      	movs	r2, #0
 8007916:	601a      	str	r2, [r3, #0]
  	LCD_DisplayString(5, 20,"USERS:", &Font12, BLACK, GREEN);
 8007918:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800791c:	9301      	str	r3, [sp, #4]
 800791e:	2300      	movs	r3, #0
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	4b29      	ldr	r3, [pc, #164]	; (80079c8 <udp_server_init+0xc8>)
 8007924:	4a29      	ldr	r2, [pc, #164]	; (80079cc <udp_server_init+0xcc>)
 8007926:	2114      	movs	r1, #20
 8007928:	2005      	movs	r0, #5
 800792a:	f7f9 fa1b 	bl	8000d64 <LCD_DisplayString>
  	LCD_DisplayString(70,20, "0", &Font12, BLACK, GREEN);
 800792e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007932:	9301      	str	r3, [sp, #4]
 8007934:	2300      	movs	r3, #0
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	4b23      	ldr	r3, [pc, #140]	; (80079c8 <udp_server_init+0xc8>)
 800793a:	4a25      	ldr	r2, [pc, #148]	; (80079d0 <udp_server_init+0xd0>)
 800793c:	2114      	movs	r1, #20
 800793e:	2046      	movs	r0, #70	; 0x46
 8007940:	f7f9 fa10 	bl	8000d64 <LCD_DisplayString>
  	byte_counter = 0;
 8007944:	4b23      	ldr	r3, [pc, #140]	; (80079d4 <udp_server_init+0xd4>)
 8007946:	2200      	movs	r2, #0
 8007948:	601a      	str	r2, [r3, #0]
  	//res = read_file(fn, 0);
  	//res = f_getfree("0:", &fre_clust, &FatFs);
  	//tot_sect = (fs->n_fatent - 2) * fs->csize;
  	//fre_sect = fre_clust * fs->csize;
  	//LCD_DisplayString(5, 20, fre_sect, &Font12, BLACK, GREEN);
  	Driver_Delay_ms(1000);
 800794a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800794e:	f7f8 fe59 	bl	8000604 <Driver_Delay_ms>
	memset(isLogged,0, sizeof(isLogged));
 8007952:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007956:	2100      	movs	r1, #0
 8007958:	481f      	ldr	r0, [pc, #124]	; (80079d8 <udp_server_init+0xd8>)
 800795a:	f011 f809 	bl	8018970 <memset>
	memset(packet_control, 0, sizeof(packet_control));
 800795e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8007962:	2100      	movs	r1, #0
 8007964:	481d      	ldr	r0, [pc, #116]	; (80079dc <udp_server_init+0xdc>)
 8007966:	f011 f803 	bl	8018970 <memset>
   struct udp_pcb *upcb;
   err_t err;
   user_privileges[0][0] = true;
 800796a:	4b1d      	ldr	r3, [pc, #116]	; (80079e0 <udp_server_init+0xe0>)
 800796c:	2201      	movs	r2, #1
 800796e:	701a      	strb	r2, [r3, #0]
   user_privileges[0][1] = true;
 8007970:	4b1b      	ldr	r3, [pc, #108]	; (80079e0 <udp_server_init+0xe0>)
 8007972:	2201      	movs	r2, #1
 8007974:	705a      	strb	r2, [r3, #1]
   user_privileges[0][2] = true;
 8007976:	4b1a      	ldr	r3, [pc, #104]	; (80079e0 <udp_server_init+0xe0>)
 8007978:	2201      	movs	r2, #1
 800797a:	709a      	strb	r2, [r3, #2]
   user_privileges[255][0] = true;
 800797c:	4b18      	ldr	r3, [pc, #96]	; (80079e0 <udp_server_init+0xe0>)
 800797e:	2201      	movs	r2, #1
 8007980:	f883 22fd 	strb.w	r2, [r3, #765]	; 0x2fd
   isLogged[255] = true;
 8007984:	4b14      	ldr	r3, [pc, #80]	; (80079d8 <udp_server_init+0xd8>)
 8007986:	2201      	movs	r2, #1
 8007988:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff
   upcb = udp_new();
 800798c:	f00c fe2a 	bl	80145e4 <udp_new>
 8007990:	60b8      	str	r0, [r7, #8]

   if (upcb)
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d010      	beq.n	80079ba <udp_server_init+0xba>
   {
      err = udp_bind(upcb, IP_ADDR_ANY, UDP_SERVER_PORT);
 8007998:	f644 6220 	movw	r2, #20000	; 0x4e20
 800799c:	4911      	ldr	r1, [pc, #68]	; (80079e4 <udp_server_init+0xe4>)
 800799e:	68b8      	ldr	r0, [r7, #8]
 80079a0:	f00c fcc8 	bl	8014334 <udp_bind>
 80079a4:	4603      	mov	r3, r0
 80079a6:	71fb      	strb	r3, [r7, #7]
      if(err == ERR_OK)
 80079a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d104      	bne.n	80079ba <udp_server_init+0xba>
      {
        udp_recv(upcb, udp_server_receive_callback, NULL);
 80079b0:	2200      	movs	r2, #0
 80079b2:	490d      	ldr	r1, [pc, #52]	; (80079e8 <udp_server_init+0xe8>)
 80079b4:	68b8      	ldr	r0, [r7, #8]
 80079b6:	f00c fdb3 	bl	8014520 <udp_recv>
      }
   }
}
 80079ba:	bf00      	nop
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	20000b08 	.word	0x20000b08
 80079c8:	20000004 	.word	0x20000004
 80079cc:	0801980c 	.word	0x0801980c
 80079d0:	08019814 	.word	0x08019814
 80079d4:	20000b0c 	.word	0x20000b0c
 80079d8:	20000f10 	.word	0x20000f10
 80079dc:	20001268 	.word	0x20001268
 80079e0:	20001570 	.word	0x20001570
 80079e4:	0802b590 	.word	0x0802b590
 80079e8:	080079ed 	.word	0x080079ed

080079ec <udp_server_receive_callback>:

void udp_server_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	603b      	str	r3, [r7, #0]
  pbuf_copy_partial(p, msg_buffer, p->len, 0);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	895a      	ldrh	r2, [r3, #10]
 80079fe:	2300      	movs	r3, #0
 8007a00:	4926      	ldr	r1, [pc, #152]	; (8007a9c <udp_server_receive_callback+0xb0>)
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f006 fdd8 	bl	800e5b8 <pbuf_copy_partial>
  process_data();
 8007a08:	f000 fae8 	bl	8007fdc <process_data>
  msg_size = find_end_of_new_msg();
 8007a0c:	f000 f852 	bl	8007ab4 <find_end_of_new_msg>
 8007a10:	4603      	mov	r3, r0
 8007a12:	461a      	mov	r2, r3
 8007a14:	4b22      	ldr	r3, [pc, #136]	; (8007aa0 <udp_server_receive_callback+0xb4>)
 8007a16:	801a      	strh	r2, [r3, #0]
  byte_counter += p->tot_len;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	891b      	ldrh	r3, [r3, #8]
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	4b21      	ldr	r3, [pc, #132]	; (8007aa4 <udp_server_receive_callback+0xb8>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4413      	add	r3, r2
 8007a24:	4a1f      	ldr	r2, [pc, #124]	; (8007aa4 <udp_server_receive_callback+0xb8>)
 8007a26:	6013      	str	r3, [r2, #0]
  byte_counter += msg_size;
 8007a28:	4b1d      	ldr	r3, [pc, #116]	; (8007aa0 <udp_server_receive_callback+0xb4>)
 8007a2a:	881b      	ldrh	r3, [r3, #0]
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	4b1d      	ldr	r3, [pc, #116]	; (8007aa4 <udp_server_receive_callback+0xb8>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4413      	add	r3, r2
 8007a34:	4a1b      	ldr	r2, [pc, #108]	; (8007aa4 <udp_server_receive_callback+0xb8>)
 8007a36:	6013      	str	r3, [r2, #0]
  p->tot_len = msg_size;
 8007a38:	4b19      	ldr	r3, [pc, #100]	; (8007aa0 <udp_server_receive_callback+0xb4>)
 8007a3a:	881a      	ldrh	r2, [r3, #0]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	811a      	strh	r2, [r3, #8]
  p->len = msg_size;
 8007a40:	4b17      	ldr	r3, [pc, #92]	; (8007aa0 <udp_server_receive_callback+0xb4>)
 8007a42:	881a      	ldrh	r2, [r3, #0]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	815a      	strh	r2, [r3, #10]
  uint16_t x = copy_to_pbuf(p, msg_buffer, msg_size, 0);
 8007a48:	4b15      	ldr	r3, [pc, #84]	; (8007aa0 <udp_server_receive_callback+0xb4>)
 8007a4a:	881a      	ldrh	r2, [r3, #0]
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	4913      	ldr	r1, [pc, #76]	; (8007a9c <udp_server_receive_callback+0xb0>)
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 f853 	bl	8007afc <copy_to_pbuf>
 8007a56:	4603      	mov	r3, r0
 8007a58:	82fb      	strh	r3, [r7, #22]
  memset(msg_buffer,0,sizeof(msg_buffer));
 8007a5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a5e:	2100      	movs	r1, #0
 8007a60:	480e      	ldr	r0, [pc, #56]	; (8007a9c <udp_server_receive_callback+0xb0>)
 8007a62:	f010 ff85 	bl	8018970 <memset>
  memset(file_buffer, 0, sizeof(file_buffer));
 8007a66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	480e      	ldr	r0, [pc, #56]	; (8007aa8 <udp_server_receive_callback+0xbc>)
 8007a6e:	f010 ff7f 	bl	8018970 <memset>
  memset(operation, 0, 1);
 8007a72:	4b0e      	ldr	r3, [pc, #56]	; (8007aac <udp_server_receive_callback+0xc0>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	701a      	strb	r2, [r3, #0]
  memset(id, 0, 1);
 8007a78:	4b0d      	ldr	r3, [pc, #52]	; (8007ab0 <udp_server_receive_callback+0xc4>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	701a      	strb	r2, [r3, #0]
  udp_sendto(upcb, p, addr, UDP_CLIENT_PORT);
 8007a7e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8007a82:	683a      	ldr	r2, [r7, #0]
 8007a84:	6879      	ldr	r1, [r7, #4]
 8007a86:	68b8      	ldr	r0, [r7, #8]
 8007a88:	f00c fa9e 	bl	8013fc8 <udp_sendto>
  pbuf_free(p);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f006 fb99 	bl	800e1c4 <pbuf_free>

}
 8007a92:	bf00      	nop
 8007a94:	3718      	adds	r7, #24
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	20000b10 	.word	0x20000b10
 8007aa0:	20000440 	.word	0x20000440
 8007aa4:	20000b0c 	.word	0x20000b0c
 8007aa8:	20000708 	.word	0x20000708
 8007aac:	20001014 	.word	0x20001014
 8007ab0:	20001010 	.word	0x20001010

08007ab4 <find_end_of_new_msg>:
uint16_t find_end_of_new_msg()
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
	for (int i=header_with_usrname;i<1024;i++)
 8007aba:	4b0e      	ldr	r3, [pc, #56]	; (8007af4 <find_end_of_new_msg+0x40>)
 8007abc:	881b      	ldrh	r3, [r3, #0]
 8007abe:	607b      	str	r3, [r7, #4]
 8007ac0:	e00b      	b.n	8007ada <find_end_of_new_msg+0x26>
	{
		if (msg_buffer[i] == '\0') return i;
 8007ac2:	4a0d      	ldr	r2, [pc, #52]	; (8007af8 <find_end_of_new_msg+0x44>)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d102      	bne.n	8007ad4 <find_end_of_new_msg+0x20>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	e008      	b.n	8007ae6 <find_end_of_new_msg+0x32>
	for (int i=header_with_usrname;i<1024;i++)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	607b      	str	r3, [r7, #4]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ae0:	dbef      	blt.n	8007ac2 <find_end_of_new_msg+0xe>
	}
	return -1;
 8007ae2:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	370c      	adds	r7, #12
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	20000014 	.word	0x20000014
 8007af8:	20000b10 	.word	0x20000b10

08007afc <copy_to_pbuf>:
u16_t copy_to_pbuf(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b088      	sub	sp, #32
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	4611      	mov	r1, r2
 8007b08:	461a      	mov	r2, r3
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	80fb      	strh	r3, [r7, #6]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007b12:	2300      	movs	r3, #0
 8007b14:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007b16:	2300      	movs	r3, #0
 8007b18:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d107      	bne.n	8007b30 <copy_to_pbuf+0x34>
 8007b20:	4b2a      	ldr	r3, [pc, #168]	; (8007bcc <copy_to_pbuf+0xd0>)
 8007b22:	22b7      	movs	r2, #183	; 0xb7
 8007b24:	492a      	ldr	r1, [pc, #168]	; (8007bd0 <copy_to_pbuf+0xd4>)
 8007b26:	482b      	ldr	r0, [pc, #172]	; (8007bd4 <copy_to_pbuf+0xd8>)
 8007b28:	f010 ffd2 	bl	8018ad0 <iprintf>
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	e049      	b.n	8007bc4 <copy_to_pbuf+0xc8>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d107      	bne.n	8007b46 <copy_to_pbuf+0x4a>
 8007b36:	4b25      	ldr	r3, [pc, #148]	; (8007bcc <copy_to_pbuf+0xd0>)
 8007b38:	22b8      	movs	r2, #184	; 0xb8
 8007b3a:	4927      	ldr	r1, [pc, #156]	; (8007bd8 <copy_to_pbuf+0xdc>)
 8007b3c:	4825      	ldr	r0, [pc, #148]	; (8007bd4 <copy_to_pbuf+0xd8>)
 8007b3e:	f010 ffc7 	bl	8018ad0 <iprintf>
 8007b42:	2300      	movs	r3, #0
 8007b44:	e03e      	b.n	8007bc4 <copy_to_pbuf+0xc8>
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	61fb      	str	r3, [r7, #28]
 8007b4a:	e034      	b.n	8007bb6 <copy_to_pbuf+0xba>
    if ((offset != 0) && (offset >= p->len)) {
 8007b4c:	88bb      	ldrh	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00a      	beq.n	8007b68 <copy_to_pbuf+0x6c>
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	895b      	ldrh	r3, [r3, #10]
 8007b56:	88ba      	ldrh	r2, [r7, #4]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d305      	bcc.n	8007b68 <copy_to_pbuf+0x6c>
      offset = (u16_t)(offset - p->len);
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	895b      	ldrh	r3, [r3, #10]
 8007b60:	88ba      	ldrh	r2, [r7, #4]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	80bb      	strh	r3, [r7, #4]
 8007b66:	e023      	b.n	8007bb0 <copy_to_pbuf+0xb4>
    } else {
      buf_copy_len = (u16_t)(p->len - offset);
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	895a      	ldrh	r2, [r3, #10]
 8007b6c:	88bb      	ldrh	r3, [r7, #4]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8007b72:	8b3a      	ldrh	r2, [r7, #24]
 8007b74:	88fb      	ldrh	r3, [r7, #6]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d901      	bls.n	8007b7e <copy_to_pbuf+0x82>
        buf_copy_len = len;
 8007b7a:	88fb      	ldrh	r3, [r7, #6]
 8007b7c:	833b      	strh	r3, [r7, #24]
      }
      MEMCPY(&((char *)p->payload)[offset],&((char *)dataptr)[left] , buf_copy_len);
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	685a      	ldr	r2, [r3, #4]
 8007b82:	88bb      	ldrh	r3, [r7, #4]
 8007b84:	18d0      	adds	r0, r2, r3
 8007b86:	8b7b      	ldrh	r3, [r7, #26]
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	8b3a      	ldrh	r2, [r7, #24]
 8007b8e:	4619      	mov	r1, r3
 8007b90:	f010 fee3 	bl	801895a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8007b94:	8afa      	ldrh	r2, [r7, #22]
 8007b96:	8b3b      	ldrh	r3, [r7, #24]
 8007b98:	4413      	add	r3, r2
 8007b9a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8007b9c:	8b7a      	ldrh	r2, [r7, #26]
 8007b9e:	8b3b      	ldrh	r3, [r7, #24]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8007ba4:	88fa      	ldrh	r2, [r7, #6]
 8007ba6:	8b3b      	ldrh	r3, [r7, #24]
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007bac:	2300      	movs	r3, #0
 8007bae:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	61fb      	str	r3, [r7, #28]
 8007bb6:	88fb      	ldrh	r3, [r7, #6]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d002      	beq.n	8007bc2 <copy_to_pbuf+0xc6>
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1c4      	bne.n	8007b4c <copy_to_pbuf+0x50>

    }
  }
  return copied_total;
 8007bc2:	8afb      	ldrh	r3, [r7, #22]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3720      	adds	r7, #32
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	08019818 	.word	0x08019818
 8007bd0:	08019834 	.word	0x08019834
 8007bd4:	08019854 	.word	0x08019854
 8007bd8:	0801987c 	.word	0x0801987c

08007bdc <login_user>:
uint16_t login_user()
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b096      	sub	sp, #88	; 0x58
 8007be0:	af02      	add	r7, sp, #8
	char cli_username[] = "******";
 8007be2:	4ab8      	ldr	r2, [pc, #736]	; (8007ec4 <login_user+0x2e8>)
 8007be4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007be8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007bec:	6018      	str	r0, [r3, #0]
 8007bee:	3304      	adds	r3, #4
 8007bf0:	8019      	strh	r1, [r3, #0]
 8007bf2:	3302      	adds	r3, #2
 8007bf4:	0c0a      	lsrs	r2, r1, #16
 8007bf6:	701a      	strb	r2, [r3, #0]
	char cli_password[] = "********";
 8007bf8:	4ab3      	ldr	r2, [pc, #716]	; (8007ec8 <login_user+0x2ec>)
 8007bfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007bfe:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c00:	c303      	stmia	r3!, {r0, r1}
 8007c02:	701a      	strb	r2, [r3, #0]
	memcpy(cli_username, msg_buffer+header_size, 6);
 8007c04:	4bb1      	ldr	r3, [pc, #708]	; (8007ecc <login_user+0x2f0>)
 8007c06:	881b      	ldrh	r3, [r3, #0]
 8007c08:	461a      	mov	r2, r3
 8007c0a:	4bb1      	ldr	r3, [pc, #708]	; (8007ed0 <login_user+0x2f4>)
 8007c0c:	18d1      	adds	r1, r2, r3
 8007c0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007c12:	2206      	movs	r2, #6
 8007c14:	4618      	mov	r0, r3
 8007c16:	f010 fea0 	bl	801895a <memcpy>
	memcpy(cli_password, msg_buffer+header_with_usrname, 8);
 8007c1a:	4bae      	ldr	r3, [pc, #696]	; (8007ed4 <login_user+0x2f8>)
 8007c1c:	881b      	ldrh	r3, [r3, #0]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	4bab      	ldr	r3, [pc, #684]	; (8007ed0 <login_user+0x2f4>)
 8007c22:	18d1      	adds	r1, r2, r3
 8007c24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c28:	2208      	movs	r2, #8
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f010 fe95 	bl	801895a <memcpy>
	memset(msg_buffer, 0, 1024);
 8007c30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c34:	2100      	movs	r1, #0
 8007c36:	48a6      	ldr	r0, [pc, #664]	; (8007ed0 <login_user+0x2f4>)
 8007c38:	f010 fe9a 	bl	8018970 <memset>
	FRESULT fr;
	int pointer=0;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	64bb      	str	r3, [r7, #72]	; 0x48
	uint16_t read = 18;
 8007c40:	2312      	movs	r3, #18
 8007c42:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	fr = f_mount(&FatFs, "", 0);
 8007c46:	2200      	movs	r2, #0
 8007c48:	49a3      	ldr	r1, [pc, #652]	; (8007ed8 <login_user+0x2fc>)
 8007c4a:	48a4      	ldr	r0, [pc, #656]	; (8007edc <login_user+0x300>)
 8007c4c:	f7fd fc64 	bl	8005518 <f_mount>
 8007c50:	4603      	mov	r3, r0
 8007c52:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	fr = f_open(&file, "user database.txt", FA_READ);
 8007c56:	2201      	movs	r2, #1
 8007c58:	49a1      	ldr	r1, [pc, #644]	; (8007ee0 <login_user+0x304>)
 8007c5a:	48a2      	ldr	r0, [pc, #648]	; (8007ee4 <login_user+0x308>)
 8007c5c:	f7fd fc9c 	bl	8005598 <f_open>
 8007c60:	4603      	mov	r3, r0
 8007c62:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	char data_buffer[18];
	char data_username[] = "******";
 8007c66:	4a97      	ldr	r2, [pc, #604]	; (8007ec4 <login_user+0x2e8>)
 8007c68:	f107 0310 	add.w	r3, r7, #16
 8007c6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007c70:	6018      	str	r0, [r3, #0]
 8007c72:	3304      	adds	r3, #4
 8007c74:	8019      	strh	r1, [r3, #0]
 8007c76:	3302      	adds	r3, #2
 8007c78:	0c0a      	lsrs	r2, r1, #16
 8007c7a:	701a      	strb	r2, [r3, #0]
	char data_password[] = "********";
 8007c7c:	4a92      	ldr	r2, [pc, #584]	; (8007ec8 <login_user+0x2ec>)
 8007c7e:	1d3b      	adds	r3, r7, #4
 8007c80:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c82:	c303      	stmia	r3!, {r0, r1}
 8007c84:	701a      	strb	r2, [r3, #0]
	char privileges[]= "*";
 8007c86:	232a      	movs	r3, #42	; 0x2a
 8007c88:	803b      	strh	r3, [r7, #0]
	fr = f_read(&file, data_buffer, 18, &bytes_read);
 8007c8a:	f107 0118 	add.w	r1, r7, #24
 8007c8e:	4b96      	ldr	r3, [pc, #600]	; (8007ee8 <login_user+0x30c>)
 8007c90:	2212      	movs	r2, #18
 8007c92:	4894      	ldr	r0, [pc, #592]	; (8007ee4 <login_user+0x308>)
 8007c94:	f7fd fec0 	bl	8005a18 <f_read>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	pointer++;
 8007c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	64bb      	str	r3, [r7, #72]	; 0x48
	while(read==18 && pointer<255)
 8007ca4:	e0ea      	b.n	8007e7c <login_user+0x2a0>
	{
		fr = f_read(&file, data_buffer, 18, &bytes_read);
 8007ca6:	f107 0118 	add.w	r1, r7, #24
 8007caa:	4b8f      	ldr	r3, [pc, #572]	; (8007ee8 <login_user+0x30c>)
 8007cac:	2212      	movs	r2, #18
 8007cae:	488d      	ldr	r0, [pc, #564]	; (8007ee4 <login_user+0x308>)
 8007cb0:	f7fd feb2 	bl	8005a18 <f_read>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (fr) {
 8007cba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00a      	beq.n	8007cd8 <login_user+0xfc>
			prepare_response(operation, RESP_ERR, id, 0, 0);
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	4a88      	ldr	r2, [pc, #544]	; (8007eec <login_user+0x310>)
 8007cca:	2101      	movs	r1, #1
 8007ccc:	4888      	ldr	r0, [pc, #544]	; (8007ef0 <login_user+0x314>)
 8007cce:	f000 ffcd 	bl	8008c6c <prepare_response>
				return -1;
 8007cd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007cd6:	e0f1      	b.n	8007ebc <login_user+0x2e0>
			};
		memcpy(data_username, data_buffer+1, 6);
 8007cd8:	f107 0318 	add.w	r3, r7, #24
 8007cdc:	3301      	adds	r3, #1
 8007cde:	f107 0010 	add.w	r0, r7, #16
 8007ce2:	2206      	movs	r2, #6
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	f010 fe38 	bl	801895a <memcpy>
		memcpy(data_password, data_buffer+7, 8);
 8007cea:	f107 0318 	add.w	r3, r7, #24
 8007cee:	3307      	adds	r3, #7
 8007cf0:	1d38      	adds	r0, r7, #4
 8007cf2:	2208      	movs	r2, #8
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	f010 fe30 	bl	801895a <memcpy>
		if(strcmp(cli_username, data_username) == 0)
 8007cfa:	f107 0210 	add.w	r2, r7, #16
 8007cfe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007d02:	4611      	mov	r1, r2
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7f8 fa63 	bl	80001d0 <strcmp>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f040 80b2 	bne.w	8007e76 <login_user+0x29a>
		{
			if(strcmp(cli_password, data_password) != 0)
 8007d12:	1d3a      	adds	r2, r7, #4
 8007d14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d18:	4611      	mov	r1, r2
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7f8 fa58 	bl	80001d0 <strcmp>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00e      	beq.n	8007d44 <login_user+0x168>
			{
				prepare_response(operation, RESP_AUTH_ERR, id, 0, 0);
 8007d26:	2300      	movs	r3, #0
 8007d28:	9300      	str	r3, [sp, #0]
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	4a6f      	ldr	r2, [pc, #444]	; (8007eec <login_user+0x310>)
 8007d2e:	2103      	movs	r1, #3
 8007d30:	486f      	ldr	r0, [pc, #444]	; (8007ef0 <login_user+0x314>)
 8007d32:	f000 ff9b 	bl	8008c6c <prepare_response>
				fr = f_close(&file);
 8007d36:	486b      	ldr	r0, [pc, #428]	; (8007ee4 <login_user+0x308>)
 8007d38:	f7fe fab7 	bl	80062aa <f_close>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				return;
 8007d42:	e0bb      	b.n	8007ebc <login_user+0x2e0>
			}
			memcpy(id, data_buffer, 1);
 8007d44:	7e3a      	ldrb	r2, [r7, #24]
 8007d46:	4b69      	ldr	r3, [pc, #420]	; (8007eec <login_user+0x310>)
 8007d48:	701a      	strb	r2, [r3, #0]
			prepare_response(operation, RESP_OK, id, 0, 0);
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	9300      	str	r3, [sp, #0]
 8007d4e:	2300      	movs	r3, #0
 8007d50:	4a66      	ldr	r2, [pc, #408]	; (8007eec <login_user+0x310>)
 8007d52:	2100      	movs	r1, #0
 8007d54:	4866      	ldr	r0, [pc, #408]	; (8007ef0 <login_user+0x314>)
 8007d56:	f000 ff89 	bl	8008c6c <prepare_response>
			memcpy(privileges, data_buffer+15, 1);
 8007d5a:	f107 0318 	add.w	r3, r7, #24
 8007d5e:	330f      	adds	r3, #15
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	703b      	strb	r3, [r7, #0]
			uint8_t privils = (uint8_t)privileges[0];
 8007d64:	783b      	ldrb	r3, [r7, #0]
 8007d66:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
			uint8_t canget = privils - 100 >= 0 ? 1 : 0;
 8007d6a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007d6e:	3b64      	subs	r3, #100	; 0x64
 8007d70:	43db      	mvns	r3, r3
 8007d72:	0fdb      	lsrs	r3, r3, #31
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			privils = privils -(100*canget);
 8007d7a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007d7e:	461a      	mov	r2, r3
 8007d80:	0092      	lsls	r2, r2, #2
 8007d82:	441a      	add	r2, r3
 8007d84:	00d2      	lsls	r2, r2, #3
 8007d86:	1ad3      	subs	r3, r2, r3
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	b2da      	uxtb	r2, r3
 8007d8c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007d90:	4413      	add	r3, r2
 8007d92:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
			uint8_t cansend = privils - 10 >= 0 ? 1 : 0;
 8007d96:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007d9a:	3b0a      	subs	r3, #10
 8007d9c:	43db      	mvns	r3, r3
 8007d9e:	0fdb      	lsrs	r3, r3, #31
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			privils = privils - (10*cansend);
 8007da6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007daa:	461a      	mov	r2, r3
 8007dac:	0152      	lsls	r2, r2, #5
 8007dae:	1ad2      	subs	r2, r2, r3
 8007db0:	0092      	lsls	r2, r2, #2
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	005b      	lsls	r3, r3, #1
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007dbc:	4413      	add	r3, r2
 8007dbe:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
			uint8_t candel = privils - 1 == 0 ? 1: 0;
 8007dc2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	bf0c      	ite	eq
 8007dca:	2301      	moveq	r3, #1
 8007dcc:	2300      	movne	r3, #0
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			user_privileges[(int)id[0]][0] = canget ? true : false;
 8007dd4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	bf14      	ite	ne
 8007ddc:	2301      	movne	r3, #1
 8007dde:	2300      	moveq	r3, #0
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	4b42      	ldr	r3, [pc, #264]	; (8007eec <login_user+0x310>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	4619      	mov	r1, r3
 8007de8:	4610      	mov	r0, r2
 8007dea:	4a42      	ldr	r2, [pc, #264]	; (8007ef4 <login_user+0x318>)
 8007dec:	460b      	mov	r3, r1
 8007dee:	005b      	lsls	r3, r3, #1
 8007df0:	440b      	add	r3, r1
 8007df2:	4413      	add	r3, r2
 8007df4:	4602      	mov	r2, r0
 8007df6:	701a      	strb	r2, [r3, #0]
			user_privileges[(int)id[0]][1] = cansend ? true : false;
 8007df8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	bf14      	ite	ne
 8007e00:	2301      	movne	r3, #1
 8007e02:	2300      	moveq	r3, #0
 8007e04:	b2da      	uxtb	r2, r3
 8007e06:	4b39      	ldr	r3, [pc, #228]	; (8007eec <login_user+0x310>)
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	4610      	mov	r0, r2
 8007e0e:	4a39      	ldr	r2, [pc, #228]	; (8007ef4 <login_user+0x318>)
 8007e10:	460b      	mov	r3, r1
 8007e12:	005b      	lsls	r3, r3, #1
 8007e14:	440b      	add	r3, r1
 8007e16:	4413      	add	r3, r2
 8007e18:	3301      	adds	r3, #1
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	701a      	strb	r2, [r3, #0]
			user_privileges[(int)id[0]][2] = candel ? true : false;
 8007e1e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	bf14      	ite	ne
 8007e26:	2301      	movne	r3, #1
 8007e28:	2300      	moveq	r3, #0
 8007e2a:	b2da      	uxtb	r2, r3
 8007e2c:	4b2f      	ldr	r3, [pc, #188]	; (8007eec <login_user+0x310>)
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	4619      	mov	r1, r3
 8007e32:	4610      	mov	r0, r2
 8007e34:	4a2f      	ldr	r2, [pc, #188]	; (8007ef4 <login_user+0x318>)
 8007e36:	460b      	mov	r3, r1
 8007e38:	005b      	lsls	r3, r3, #1
 8007e3a:	440b      	add	r3, r1
 8007e3c:	4413      	add	r3, r2
 8007e3e:	3302      	adds	r3, #2
 8007e40:	4602      	mov	r2, r0
 8007e42:	701a      	strb	r2, [r3, #0]
			isLogged[(int)id[0]] = true;
 8007e44:	4b29      	ldr	r3, [pc, #164]	; (8007eec <login_user+0x310>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	461a      	mov	r2, r3
 8007e4a:	4b2b      	ldr	r3, [pc, #172]	; (8007ef8 <login_user+0x31c>)
 8007e4c:	2101      	movs	r1, #1
 8007e4e:	5499      	strb	r1, [r3, r2]
			user_count = count_users();
 8007e50:	f000 f876 	bl	8007f40 <count_users>
 8007e54:	4602      	mov	r2, r0
 8007e56:	4b29      	ldr	r3, [pc, #164]	; (8007efc <login_user+0x320>)
 8007e58:	601a      	str	r2, [r3, #0]
		  	LCD_DisplayNum(70,20, user_count,&Font12,BLACK,GREEN);
 8007e5a:	4b28      	ldr	r3, [pc, #160]	; (8007efc <login_user+0x320>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8007e64:	9301      	str	r3, [sp, #4]
 8007e66:	2300      	movs	r3, #0
 8007e68:	9300      	str	r3, [sp, #0]
 8007e6a:	4b25      	ldr	r3, [pc, #148]	; (8007f00 <login_user+0x324>)
 8007e6c:	2114      	movs	r1, #20
 8007e6e:	2046      	movs	r0, #70	; 0x46
 8007e70:	f7f8 ffca 	bl	8000e08 <LCD_DisplayNum>
			break;
 8007e74:	e00a      	b.n	8007e8c <login_user+0x2b0>
		}
		pointer++;
 8007e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e78:	3301      	adds	r3, #1
 8007e7a:	64bb      	str	r3, [r7, #72]	; 0x48
	while(read==18 && pointer<255)
 8007e7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007e80:	2b12      	cmp	r3, #18
 8007e82:	d103      	bne.n	8007e8c <login_user+0x2b0>
 8007e84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e86:	2bfe      	cmp	r3, #254	; 0xfe
 8007e88:	f77f af0d 	ble.w	8007ca6 <login_user+0xca>
	}

	if (fr || pointer>=255) {
 8007e8c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d102      	bne.n	8007e9a <login_user+0x2be>
 8007e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e96:	2bfe      	cmp	r3, #254	; 0xfe
 8007e98:	dd07      	ble.n	8007eaa <login_user+0x2ce>
		prepare_response(operation, RESP_NOT_FOUND, id, 0, 0);
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	4a12      	ldr	r2, [pc, #72]	; (8007eec <login_user+0x310>)
 8007ea2:	2108      	movs	r1, #8
 8007ea4:	4812      	ldr	r0, [pc, #72]	; (8007ef0 <login_user+0x314>)
 8007ea6:	f000 fee1 	bl	8008c6c <prepare_response>
	};
	fr = f_close(&file);
 8007eaa:	480e      	ldr	r0, [pc, #56]	; (8007ee4 <login_user+0x308>)
 8007eac:	f7fe f9fd 	bl	80062aa <f_close>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	return fr;
 8007eb6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007eba:	b29b      	uxth	r3, r3

}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3750      	adds	r7, #80	; 0x50
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	080198b8 	.word	0x080198b8
 8007ec8:	080198c0 	.word	0x080198c0
 8007ecc:	20000012 	.word	0x20000012
 8007ed0:	20000b10 	.word	0x20000b10
 8007ed4:	20000014 	.word	0x20000014
 8007ed8:	080198a0 	.word	0x080198a0
 8007edc:	200000d4 	.word	0x200000d4
 8007ee0:	080198a4 	.word	0x080198a4
 8007ee4:	20001018 	.word	0x20001018
 8007ee8:	20001568 	.word	0x20001568
 8007eec:	20001010 	.word	0x20001010
 8007ef0:	20001014 	.word	0x20001014
 8007ef4:	20001570 	.word	0x20001570
 8007ef8:	20000f10 	.word	0x20000f10
 8007efc:	20000b08 	.word	0x20000b08
 8007f00:	20000004 	.word	0x20000004

08007f04 <check_if_logged>:
uint16_t check_if_logged()
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af02      	add	r7, sp, #8
	if(isLogged[(int)id[0]] == 1)
 8007f0a:	4b0a      	ldr	r3, [pc, #40]	; (8007f34 <check_if_logged+0x30>)
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	461a      	mov	r2, r3
 8007f10:	4b09      	ldr	r3, [pc, #36]	; (8007f38 <check_if_logged+0x34>)
 8007f12:	5c9b      	ldrb	r3, [r3, r2]
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d101      	bne.n	8007f1c <check_if_logged+0x18>
	{
		return 1;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e008      	b.n	8007f2e <check_if_logged+0x2a>
	}
	else
	{
		prepare_response(operation, RESP_NOT_LOGGED, id, 0,0 );
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	9300      	str	r3, [sp, #0]
 8007f20:	2300      	movs	r3, #0
 8007f22:	4a04      	ldr	r2, [pc, #16]	; (8007f34 <check_if_logged+0x30>)
 8007f24:	2105      	movs	r1, #5
 8007f26:	4805      	ldr	r0, [pc, #20]	; (8007f3c <check_if_logged+0x38>)
 8007f28:	f000 fea0 	bl	8008c6c <prepare_response>
		return 0;
 8007f2c:	2300      	movs	r3, #0
	}

}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	20001010 	.word	0x20001010
 8007f38:	20000f10 	.word	0x20000f10
 8007f3c:	20001014 	.word	0x20001014

08007f40 <count_users>:
uint32_t count_users()
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
	uint32_t counter=0;
 8007f46:	2300      	movs	r3, #0
 8007f48:	607b      	str	r3, [r7, #4]
	for(int i=1; i<255;i++)
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	603b      	str	r3, [r7, #0]
 8007f4e:	e00b      	b.n	8007f68 <count_users+0x28>
	{
		if(isLogged[i]==true) counter++;
 8007f50:	4a0a      	ldr	r2, [pc, #40]	; (8007f7c <count_users+0x3c>)
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	4413      	add	r3, r2
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d102      	bne.n	8007f62 <count_users+0x22>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	607b      	str	r3, [r7, #4]
	for(int i=1; i<255;i++)
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	3301      	adds	r3, #1
 8007f66:	603b      	str	r3, [r7, #0]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	2bfe      	cmp	r3, #254	; 0xfe
 8007f6c:	ddf0      	ble.n	8007f50 <count_users+0x10>
	}
	return counter;
 8007f6e:	687b      	ldr	r3, [r7, #4]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	20000f10 	.word	0x20000f10

08007f80 <force_logout>:
void force_logout()
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af02      	add	r7, sp, #8
	char idx[] = "*";
 8007f86:	232a      	movs	r3, #42	; 0x2a
 8007f88:	80bb      	strh	r3, [r7, #4]
	memcpy(idx, msg_buffer+header_with_usrname, 1);
 8007f8a:	4b0f      	ldr	r3, [pc, #60]	; (8007fc8 <force_logout+0x48>)
 8007f8c:	881b      	ldrh	r3, [r3, #0]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	4b0e      	ldr	r3, [pc, #56]	; (8007fcc <force_logout+0x4c>)
 8007f92:	4413      	add	r3, r2
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	713b      	strb	r3, [r7, #4]
	isLogged[(int)idx[0]] = false;
 8007f98:	793b      	ldrb	r3, [r7, #4]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	4b0c      	ldr	r3, [pc, #48]	; (8007fd0 <force_logout+0x50>)
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	5499      	strb	r1, [r3, r2]
	memset(msg_buffer, 0, sizeof(msg_buffer));
 8007fa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	4808      	ldr	r0, [pc, #32]	; (8007fcc <force_logout+0x4c>)
 8007faa:	f010 fce1 	bl	8018970 <memset>
	prepare_response(operation, RESP_OK, id, 0, 0);
 8007fae:	2300      	movs	r3, #0
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	4a07      	ldr	r2, [pc, #28]	; (8007fd4 <force_logout+0x54>)
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	4807      	ldr	r0, [pc, #28]	; (8007fd8 <force_logout+0x58>)
 8007fba:	f000 fe57 	bl	8008c6c <prepare_response>
}
 8007fbe:	bf00      	nop
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	20000014 	.word	0x20000014
 8007fcc:	20000b10 	.word	0x20000b10
 8007fd0:	20000f10 	.word	0x20000f10
 8007fd4:	20001010 	.word	0x20001010
 8007fd8:	20001014 	.word	0x20001014

08007fdc <process_data>:
void process_data()
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af02      	add	r7, sp, #8
	memcpy(operation, msg_buffer,1);
 8007fe2:	4b9c      	ldr	r3, [pc, #624]	; (8008254 <process_data+0x278>)
 8007fe4:	781a      	ldrb	r2, [r3, #0]
 8007fe6:	4b9c      	ldr	r3, [pc, #624]	; (8008258 <process_data+0x27c>)
 8007fe8:	701a      	strb	r2, [r3, #0]
	memcpy(id, msg_buffer+2, 1);
 8007fea:	4b9c      	ldr	r3, [pc, #624]	; (800825c <process_data+0x280>)
 8007fec:	781a      	ldrb	r2, [r3, #0]
 8007fee:	4b9c      	ldr	r3, [pc, #624]	; (8008260 <process_data+0x284>)
 8007ff0:	701a      	strb	r2, [r3, #0]
	memcpy(init_name, msg_buffer+header_size, 6);
 8007ff2:	4b9c      	ldr	r3, [pc, #624]	; (8008264 <process_data+0x288>)
 8007ff4:	881b      	ldrh	r3, [r3, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	4b96      	ldr	r3, [pc, #600]	; (8008254 <process_data+0x278>)
 8007ffa:	4413      	add	r3, r2
 8007ffc:	2206      	movs	r2, #6
 8007ffe:	4619      	mov	r1, r3
 8008000:	4899      	ldr	r0, [pc, #612]	; (8008268 <process_data+0x28c>)
 8008002:	f010 fcaa 	bl	801895a <memcpy>
	int ident = (int)id[0];
 8008006:	4b96      	ldr	r3, [pc, #600]	; (8008260 <process_data+0x284>)
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	607b      	str	r3, [r7, #4]
	if (operation[0] - LOGIN == 0)
 800800c:	4b92      	ldr	r3, [pc, #584]	; (8008258 <process_data+0x27c>)
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	2b0c      	cmp	r3, #12
 8008012:	d102      	bne.n	800801a <process_data+0x3e>
	{
		login_user();
 8008014:	f7ff fde2 	bl	8007bdc <login_user>
		return;
 8008018:	e119      	b.n	800824e <process_data+0x272>
	}
	else if(operation[0] - PUBLIC == 0)
 800801a:	4b8f      	ldr	r3, [pc, #572]	; (8008258 <process_data+0x27c>)
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	2b0e      	cmp	r3, #14
 8008020:	d102      	bne.n	8008028 <process_data+0x4c>
	{
		login_public();
 8008022:	f000 fd7f 	bl	8008b24 <login_public>
		return;
 8008026:	e112      	b.n	800824e <process_data+0x272>
	}
	else if(operation[0] - ADD_USER == 0)
 8008028:	4b8b      	ldr	r3, [pc, #556]	; (8008258 <process_data+0x27c>)
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	2b0f      	cmp	r3, #15
 800802e:	d102      	bne.n	8008036 <process_data+0x5a>
	{
		add_user();
 8008030:	f000 fbce 	bl	80087d0 <add_user>
		return;
 8008034:	e10b      	b.n	800824e <process_data+0x272>
	}
	uint16_t isLogged = check_if_logged();
 8008036:	f7ff ff65 	bl	8007f04 <check_if_logged>
 800803a:	4603      	mov	r3, r0
 800803c:	807b      	strh	r3, [r7, #2]
	if(isLogged > 0)
 800803e:	887b      	ldrh	r3, [r7, #2]
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 80fc 	beq.w	800823e <process_data+0x262>
	{

		if (operation[0] - GET_FILE_INFO == 0)
 8008046:	4b84      	ldr	r3, [pc, #528]	; (8008258 <process_data+0x27c>)
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	2b05      	cmp	r3, #5
 800804c:	d102      	bne.n	8008054 <process_data+0x78>
		{
			get_path_info();
 800804e:	f000 fe3d 	bl	8008ccc <get_path_info>
 8008052:	e0fc      	b.n	800824e <process_data+0x272>
		}
		else if (operation[0] - CHANGE_DIRECTORY == 0)
 8008054:	4b80      	ldr	r3, [pc, #512]	; (8008258 <process_data+0x27c>)
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	2b06      	cmp	r3, #6
 800805a:	d102      	bne.n	8008062 <process_data+0x86>
		{
			check_if_dir_exists();
 800805c:	f000 fe68 	bl	8008d30 <check_if_dir_exists>
 8008060:	e0f5      	b.n	800824e <process_data+0x272>
		}
		else if (operation[0] - START_SEND_FILE == 0 && user_privileges[ident][1] == true)
 8008062:	4b7d      	ldr	r3, [pc, #500]	; (8008258 <process_data+0x27c>)
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d12d      	bne.n	80080c6 <process_data+0xea>
 800806a:	4980      	ldr	r1, [pc, #512]	; (800826c <process_data+0x290>)
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	4613      	mov	r3, r2
 8008070:	005b      	lsls	r3, r3, #1
 8008072:	4413      	add	r3, r2
 8008074:	440b      	add	r3, r1
 8008076:	3301      	adds	r3, #1
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	2b01      	cmp	r3, #1
 800807c:	d123      	bne.n	80080c6 <process_data+0xea>
		{
			packet_control[(int)id[0]][0] = 0;
 800807e:	4b78      	ldr	r3, [pc, #480]	; (8008260 <process_data+0x284>)
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	4619      	mov	r1, r3
 8008084:	4a7a      	ldr	r2, [pc, #488]	; (8008270 <process_data+0x294>)
 8008086:	460b      	mov	r3, r1
 8008088:	005b      	lsls	r3, r3, #1
 800808a:	440b      	add	r3, r1
 800808c:	4413      	add	r3, r2
 800808e:	2200      	movs	r2, #0
 8008090:	701a      	strb	r2, [r3, #0]
			packet_control[(int)id[0]][1] = 0;
 8008092:	4b73      	ldr	r3, [pc, #460]	; (8008260 <process_data+0x284>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	4619      	mov	r1, r3
 8008098:	4a75      	ldr	r2, [pc, #468]	; (8008270 <process_data+0x294>)
 800809a:	460b      	mov	r3, r1
 800809c:	005b      	lsls	r3, r3, #1
 800809e:	440b      	add	r3, r1
 80080a0:	4413      	add	r3, r2
 80080a2:	3301      	adds	r3, #1
 80080a4:	2200      	movs	r2, #0
 80080a6:	701a      	strb	r2, [r3, #0]
			packet_control[(int)id[0]][2] = 0;
 80080a8:	4b6d      	ldr	r3, [pc, #436]	; (8008260 <process_data+0x284>)
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	4619      	mov	r1, r3
 80080ae:	4a70      	ldr	r2, [pc, #448]	; (8008270 <process_data+0x294>)
 80080b0:	460b      	mov	r3, r1
 80080b2:	005b      	lsls	r3, r3, #1
 80080b4:	440b      	add	r3, r1
 80080b6:	4413      	add	r3, r2
 80080b8:	3302      	adds	r3, #2
 80080ba:	2200      	movs	r2, #0
 80080bc:	701a      	strb	r2, [r3, #0]
			save_to_file(0);
 80080be:	2000      	movs	r0, #0
 80080c0:	f000 fee6 	bl	8008e90 <save_to_file>
 80080c4:	e0c3      	b.n	800824e <process_data+0x272>
		}
		else if(operation[0] - NEXT_SEND_FILE == 0 && user_privileges[ident][1] == true)
 80080c6:	4b64      	ldr	r3, [pc, #400]	; (8008258 <process_data+0x27c>)
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d10d      	bne.n	80080ea <process_data+0x10e>
 80080ce:	4967      	ldr	r1, [pc, #412]	; (800826c <process_data+0x290>)
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	4613      	mov	r3, r2
 80080d4:	005b      	lsls	r3, r3, #1
 80080d6:	4413      	add	r3, r2
 80080d8:	440b      	add	r3, r1
 80080da:	3301      	adds	r3, #1
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d103      	bne.n	80080ea <process_data+0x10e>
		{
			save_to_file(1);
 80080e2:	2001      	movs	r0, #1
 80080e4:	f000 fed4 	bl	8008e90 <save_to_file>
 80080e8:	e0b1      	b.n	800824e <process_data+0x272>
		}
		else if(operation[0] - DELETE_FILE == 0 && user_privileges[ident][2] == true)
 80080ea:	4b5b      	ldr	r3, [pc, #364]	; (8008258 <process_data+0x27c>)
 80080ec:	781b      	ldrb	r3, [r3, #0]
 80080ee:	2b07      	cmp	r3, #7
 80080f0:	d10c      	bne.n	800810c <process_data+0x130>
 80080f2:	495e      	ldr	r1, [pc, #376]	; (800826c <process_data+0x290>)
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	4613      	mov	r3, r2
 80080f8:	005b      	lsls	r3, r3, #1
 80080fa:	4413      	add	r3, r2
 80080fc:	440b      	add	r3, r1
 80080fe:	3302      	adds	r3, #2
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	2b01      	cmp	r3, #1
 8008104:	d102      	bne.n	800810c <process_data+0x130>
		{
			parse_path_and_delete_file();
 8008106:	f000 ff9d 	bl	8009044 <parse_path_and_delete_file>
 800810a:	e0a0      	b.n	800824e <process_data+0x272>
		}
		else if(operation[0] - DELETE_DIRECTORY == 0 && user_privileges[ident][2] == true)
 800810c:	4b52      	ldr	r3, [pc, #328]	; (8008258 <process_data+0x27c>)
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	2b08      	cmp	r3, #8
 8008112:	d10c      	bne.n	800812e <process_data+0x152>
 8008114:	4955      	ldr	r1, [pc, #340]	; (800826c <process_data+0x290>)
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	4613      	mov	r3, r2
 800811a:	005b      	lsls	r3, r3, #1
 800811c:	4413      	add	r3, r2
 800811e:	440b      	add	r3, r1
 8008120:	3302      	adds	r3, #2
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d102      	bne.n	800812e <process_data+0x152>
		{
			delete_directory();
 8008128:	f001 fa20 	bl	800956c <delete_directory>
 800812c:	e08f      	b.n	800824e <process_data+0x272>
		}
		else if(operation[0] - GET_FILE == 0 && user_privileges[ident][0] == true)
 800812e:	4b4a      	ldr	r3, [pc, #296]	; (8008258 <process_data+0x27c>)
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	2b09      	cmp	r3, #9
 8008134:	d10b      	bne.n	800814e <process_data+0x172>
 8008136:	494d      	ldr	r1, [pc, #308]	; (800826c <process_data+0x290>)
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	4613      	mov	r3, r2
 800813c:	005b      	lsls	r3, r3, #1
 800813e:	4413      	add	r3, r2
 8008140:	440b      	add	r3, r1
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d102      	bne.n	800814e <process_data+0x172>
		{
			read_and_send_file();
 8008148:	f000 ffc8 	bl	80090dc <read_and_send_file>
 800814c:	e07f      	b.n	800824e <process_data+0x272>
		}
		else if(operation[0] - CREATE_DIRECTORY == 0 && user_privileges[ident][2] == true)
 800814e:	4b42      	ldr	r3, [pc, #264]	; (8008258 <process_data+0x27c>)
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	2b0a      	cmp	r3, #10
 8008154:	d10c      	bne.n	8008170 <process_data+0x194>
 8008156:	4945      	ldr	r1, [pc, #276]	; (800826c <process_data+0x290>)
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	4613      	mov	r3, r2
 800815c:	005b      	lsls	r3, r3, #1
 800815e:	4413      	add	r3, r2
 8008160:	440b      	add	r3, r1
 8008162:	3302      	adds	r3, #2
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d102      	bne.n	8008170 <process_data+0x194>
		{
			parse_path_and_create_directory();
 800816a:	f001 f863 	bl	8009234 <parse_path_and_create_directory>
 800816e:	e06e      	b.n	800824e <process_data+0x272>
		}
		else if(operation[0] - END_SEND_FILE == 0 && user_privileges[ident][2] == true)
 8008170:	4b39      	ldr	r3, [pc, #228]	; (8008258 <process_data+0x27c>)
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	2b0b      	cmp	r3, #11
 8008176:	d10c      	bne.n	8008192 <process_data+0x1b6>
 8008178:	493c      	ldr	r1, [pc, #240]	; (800826c <process_data+0x290>)
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	4613      	mov	r3, r2
 800817e:	005b      	lsls	r3, r3, #1
 8008180:	4413      	add	r3, r2
 8008182:	440b      	add	r3, r1
 8008184:	3302      	adds	r3, #2
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	2b01      	cmp	r3, #1
 800818a:	d102      	bne.n	8008192 <process_data+0x1b6>
		{
			clear_control_val();
 800818c:	f000 fd22 	bl	8008bd4 <clear_control_val>
		{
 8008190:	e05d      	b.n	800824e <process_data+0x272>
		}
		else if(operation[0] - ADD_USER == 0 && strcmp(init_name, admin_name) == 0)
 8008192:	4b31      	ldr	r3, [pc, #196]	; (8008258 <process_data+0x27c>)
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	2b0f      	cmp	r3, #15
 8008198:	d109      	bne.n	80081ae <process_data+0x1d2>
 800819a:	4936      	ldr	r1, [pc, #216]	; (8008274 <process_data+0x298>)
 800819c:	4832      	ldr	r0, [pc, #200]	; (8008268 <process_data+0x28c>)
 800819e:	f7f8 f817 	bl	80001d0 <strcmp>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d102      	bne.n	80081ae <process_data+0x1d2>
		{
			add_user();
 80081a8:	f000 fb12 	bl	80087d0 <add_user>
 80081ac:	e04f      	b.n	800824e <process_data+0x272>
		}
		else if(operation[0] - DEL_USER == 0 && strcmp(init_name, admin_name) == 0)
 80081ae:	4b2a      	ldr	r3, [pc, #168]	; (8008258 <process_data+0x27c>)
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	2b10      	cmp	r3, #16
 80081b4:	d109      	bne.n	80081ca <process_data+0x1ee>
 80081b6:	492f      	ldr	r1, [pc, #188]	; (8008274 <process_data+0x298>)
 80081b8:	482b      	ldr	r0, [pc, #172]	; (8008268 <process_data+0x28c>)
 80081ba:	f7f8 f809 	bl	80001d0 <strcmp>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d102      	bne.n	80081ca <process_data+0x1ee>
		{
			del_user();
 80081c4:	f000 f9f4 	bl	80085b0 <del_user>
 80081c8:	e041      	b.n	800824e <process_data+0x272>
		}
		else if(operation[0] - SET_PRIVILEGES == 0 && strcmp(init_name, admin_name) == 0)
 80081ca:	4b23      	ldr	r3, [pc, #140]	; (8008258 <process_data+0x27c>)
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	2b11      	cmp	r3, #17
 80081d0:	d109      	bne.n	80081e6 <process_data+0x20a>
 80081d2:	4928      	ldr	r1, [pc, #160]	; (8008274 <process_data+0x298>)
 80081d4:	4824      	ldr	r0, [pc, #144]	; (8008268 <process_data+0x28c>)
 80081d6:	f7f7 fffb 	bl	80001d0 <strcmp>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d102      	bne.n	80081e6 <process_data+0x20a>
		{
			set_privileges();
 80081e0:	f000 f88a 	bl	80082f8 <set_privileges>
 80081e4:	e033      	b.n	800824e <process_data+0x272>
		}
		else if(operation[0] - LOGOUT == 0)
 80081e6:	4b1c      	ldr	r3, [pc, #112]	; (8008258 <process_data+0x27c>)
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	2b0d      	cmp	r3, #13
 80081ec:	d102      	bne.n	80081f4 <process_data+0x218>
		{
			logout();
 80081ee:	f000 fcaf 	bl	8008b50 <logout>
 80081f2:	e02c      	b.n	800824e <process_data+0x272>
		}
		else if(operation[0] - GET_LOGGED == 0 && strcmp(init_name, admin_name) == 0)
 80081f4:	4b18      	ldr	r3, [pc, #96]	; (8008258 <process_data+0x27c>)
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	2b12      	cmp	r3, #18
 80081fa:	d109      	bne.n	8008210 <process_data+0x234>
 80081fc:	491d      	ldr	r1, [pc, #116]	; (8008274 <process_data+0x298>)
 80081fe:	481a      	ldr	r0, [pc, #104]	; (8008268 <process_data+0x28c>)
 8008200:	f7f7 ffe6 	bl	80001d0 <strcmp>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d102      	bne.n	8008210 <process_data+0x234>
		{
			get_logged();
 800820a:	f000 f835 	bl	8008278 <get_logged>
 800820e:	e01e      	b.n	800824e <process_data+0x272>
		}
		else if(operation[0] - FORCE_LOGOUT == 0 && strcmp(init_name, admin_name) == 0)
 8008210:	4b11      	ldr	r3, [pc, #68]	; (8008258 <process_data+0x27c>)
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	2b13      	cmp	r3, #19
 8008216:	d109      	bne.n	800822c <process_data+0x250>
 8008218:	4916      	ldr	r1, [pc, #88]	; (8008274 <process_data+0x298>)
 800821a:	4813      	ldr	r0, [pc, #76]	; (8008268 <process_data+0x28c>)
 800821c:	f7f7 ffd8 	bl	80001d0 <strcmp>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d102      	bne.n	800822c <process_data+0x250>
		{
			force_logout();
 8008226:	f7ff feab 	bl	8007f80 <force_logout>
 800822a:	e010      	b.n	800824e <process_data+0x272>
		}
		else
		{
			prepare_response(operation, RESP_AUTH_ERR, id, 0, 0);
 800822c:	2300      	movs	r3, #0
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	2300      	movs	r3, #0
 8008232:	4a0b      	ldr	r2, [pc, #44]	; (8008260 <process_data+0x284>)
 8008234:	2103      	movs	r1, #3
 8008236:	4808      	ldr	r0, [pc, #32]	; (8008258 <process_data+0x27c>)
 8008238:	f000 fd18 	bl	8008c6c <prepare_response>
 800823c:	e007      	b.n	800824e <process_data+0x272>
		}
	}
	else
	{
		prepare_response(operation, RESP_AUTH_ERR, id, 0, 0);
 800823e:	2300      	movs	r3, #0
 8008240:	9300      	str	r3, [sp, #0]
 8008242:	2300      	movs	r3, #0
 8008244:	4a06      	ldr	r2, [pc, #24]	; (8008260 <process_data+0x284>)
 8008246:	2103      	movs	r1, #3
 8008248:	4803      	ldr	r0, [pc, #12]	; (8008258 <process_data+0x27c>)
 800824a:	f000 fd0f 	bl	8008c6c <prepare_response>
	}
}
 800824e:	3708      	adds	r7, #8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	20000b10 	.word	0x20000b10
 8008258:	20001014 	.word	0x20001014
 800825c:	20000b12 	.word	0x20000b12
 8008260:	20001010 	.word	0x20001010
 8008264:	20000012 	.word	0x20000012
 8008268:	2000001c 	.word	0x2000001c
 800826c:	20001570 	.word	0x20001570
 8008270:	20001268 	.word	0x20001268
 8008274:	20000024 	.word	0x20000024

08008278 <get_logged>:


void get_logged()
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af02      	add	r7, sp, #8
	memset(file_buffer, 0, sizeof(file_buffer));
 800827e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008282:	2100      	movs	r1, #0
 8008284:	4817      	ldr	r0, [pc, #92]	; (80082e4 <get_logged+0x6c>)
 8008286:	f010 fb73 	bl	8018970 <memset>
	memset(msg_buffer, 0, sizeof(msg_buffer));
 800828a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800828e:	2100      	movs	r1, #0
 8008290:	4815      	ldr	r0, [pc, #84]	; (80082e8 <get_logged+0x70>)
 8008292:	f010 fb6d 	bl	8018970 <memset>
	int counter = 0;
 8008296:	2300      	movs	r3, #0
 8008298:	607b      	str	r3, [r7, #4]
	for(int i=0;i<255;i++)
 800829a:	2300      	movs	r3, #0
 800829c:	603b      	str	r3, [r7, #0]
 800829e:	e012      	b.n	80082c6 <get_logged+0x4e>
	{
		if (isLogged[i] == true)
 80082a0:	4a12      	ldr	r2, [pc, #72]	; (80082ec <get_logged+0x74>)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	4413      	add	r3, r2
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d109      	bne.n	80082c0 <get_logged+0x48>
		{
			file_buffer[counter] = i;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	b2d9      	uxtb	r1, r3
 80082b0:	4a0c      	ldr	r2, [pc, #48]	; (80082e4 <get_logged+0x6c>)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4413      	add	r3, r2
 80082b6:	460a      	mov	r2, r1
 80082b8:	701a      	strb	r2, [r3, #0]
			counter++;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	3301      	adds	r3, #1
 80082be:	607b      	str	r3, [r7, #4]
	for(int i=0;i<255;i++)
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	3301      	adds	r3, #1
 80082c4:	603b      	str	r3, [r7, #0]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	2bfe      	cmp	r3, #254	; 0xfe
 80082ca:	dde9      	ble.n	80082a0 <get_logged+0x28>
		}
	}
	prepare_response(operation, RESP_OK, id, file_buffer, counter);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	9300      	str	r3, [sp, #0]
 80082d0:	4b04      	ldr	r3, [pc, #16]	; (80082e4 <get_logged+0x6c>)
 80082d2:	4a07      	ldr	r2, [pc, #28]	; (80082f0 <get_logged+0x78>)
 80082d4:	2100      	movs	r1, #0
 80082d6:	4807      	ldr	r0, [pc, #28]	; (80082f4 <get_logged+0x7c>)
 80082d8:	f000 fcc8 	bl	8008c6c <prepare_response>
}
 80082dc:	bf00      	nop
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	20000708 	.word	0x20000708
 80082e8:	20000b10 	.word	0x20000b10
 80082ec:	20000f10 	.word	0x20000f10
 80082f0:	20001010 	.word	0x20001010
 80082f4:	20001014 	.word	0x20001014

080082f8 <set_privileges>:
void set_privileges()
{
 80082f8:	b590      	push	{r4, r7, lr}
 80082fa:	b093      	sub	sp, #76	; 0x4c
 80082fc:	af02      	add	r7, sp, #8
	char cli_username[] = "******";
 80082fe:	4aa0      	ldr	r2, [pc, #640]	; (8008580 <set_privileges+0x288>)
 8008300:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008304:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008308:	6018      	str	r0, [r3, #0]
 800830a:	3304      	adds	r3, #4
 800830c:	8019      	strh	r1, [r3, #0]
 800830e:	3302      	adds	r3, #2
 8008310:	0c0a      	lsrs	r2, r1, #16
 8008312:	701a      	strb	r2, [r3, #0]
	char empty_field[] = "******";
 8008314:	4a9a      	ldr	r2, [pc, #616]	; (8008580 <set_privileges+0x288>)
 8008316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800831a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800831e:	6018      	str	r0, [r3, #0]
 8008320:	3304      	adds	r3, #4
 8008322:	8019      	strh	r1, [r3, #0]
 8008324:	3302      	adds	r3, #2
 8008326:	0c0a      	lsrs	r2, r1, #16
 8008328:	701a      	strb	r2, [r3, #0]
	memcpy(cli_username, msg_buffer+header_with_usrname, 6);
 800832a:	4b96      	ldr	r3, [pc, #600]	; (8008584 <set_privileges+0x28c>)
 800832c:	881b      	ldrh	r3, [r3, #0]
 800832e:	461a      	mov	r2, r3
 8008330:	4b95      	ldr	r3, [pc, #596]	; (8008588 <set_privileges+0x290>)
 8008332:	18d1      	adds	r1, r2, r3
 8008334:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008338:	2206      	movs	r2, #6
 800833a:	4618      	mov	r0, r3
 800833c:	f010 fb0d 	bl	801895a <memcpy>
	if(strcmp(cli_username, empty_field) == 0)
 8008340:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8008344:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008348:	4611      	mov	r1, r2
 800834a:	4618      	mov	r0, r3
 800834c:	f7f7 ff40 	bl	80001d0 <strcmp>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d108      	bne.n	8008368 <set_privileges+0x70>
	{
			prepare_response(operation, RESP_ERR, id, 0, 0);
 8008356:	2300      	movs	r3, #0
 8008358:	9300      	str	r3, [sp, #0]
 800835a:	2300      	movs	r3, #0
 800835c:	4a8b      	ldr	r2, [pc, #556]	; (800858c <set_privileges+0x294>)
 800835e:	2101      	movs	r1, #1
 8008360:	488b      	ldr	r0, [pc, #556]	; (8008590 <set_privileges+0x298>)
 8008362:	f000 fc83 	bl	8008c6c <prepare_response>
			return;
 8008366:	e107      	b.n	8008578 <set_privileges+0x280>
	}
	FRESULT fr;
	int pointer = 0;
 8008368:	2300      	movs	r3, #0
 800836a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t read = 18;
 800836c:	2312      	movs	r3, #18
 800836e:	877b      	strh	r3, [r7, #58]	; 0x3a
	fr = f_mount(&FatFs, "", 0);
 8008370:	2200      	movs	r2, #0
 8008372:	4988      	ldr	r1, [pc, #544]	; (8008594 <set_privileges+0x29c>)
 8008374:	4888      	ldr	r0, [pc, #544]	; (8008598 <set_privileges+0x2a0>)
 8008376:	f7fd f8cf 	bl	8005518 <f_mount>
 800837a:	4603      	mov	r3, r0
 800837c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	fr = f_open(&file, "user database.txt", FA_READ | FA_WRITE);
 8008380:	2203      	movs	r2, #3
 8008382:	4986      	ldr	r1, [pc, #536]	; (800859c <set_privileges+0x2a4>)
 8008384:	4886      	ldr	r0, [pc, #536]	; (80085a0 <set_privileges+0x2a8>)
 8008386:	f7fd f907 	bl	8005598 <f_open>
 800838a:	4603      	mov	r3, r0
 800838c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	char data_username[] = "******";
 8008390:	4a7b      	ldr	r2, [pc, #492]	; (8008580 <set_privileges+0x288>)
 8008392:	f107 031c 	add.w	r3, r7, #28
 8008396:	e892 0003 	ldmia.w	r2, {r0, r1}
 800839a:	6018      	str	r0, [r3, #0]
 800839c:	3304      	adds	r3, #4
 800839e:	8019      	strh	r1, [r3, #0]
 80083a0:	3302      	adds	r3, #2
 80083a2:	0c0a      	lsrs	r2, r1, #16
 80083a4:	701a      	strb	r2, [r3, #0]
	char data_buffer[18];
	fr = f_read(&file, data_buffer, 18, &bytes_read);
 80083a6:	f107 0108 	add.w	r1, r7, #8
 80083aa:	4b7e      	ldr	r3, [pc, #504]	; (80085a4 <set_privileges+0x2ac>)
 80083ac:	2212      	movs	r2, #18
 80083ae:	487c      	ldr	r0, [pc, #496]	; (80085a0 <set_privileges+0x2a8>)
 80083b0:	f7fd fb32 	bl	8005a18 <f_read>
 80083b4:	4603      	mov	r3, r0
 80083b6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	pointer++;
 80083ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083bc:	3301      	adds	r3, #1
 80083be:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(read==18 && pointer<255)
 80083c0:	e0cb      	b.n	800855a <set_privileges+0x262>
	{
		fr = f_read(&file, data_buffer, 18, &bytes_read);
 80083c2:	f107 0108 	add.w	r1, r7, #8
 80083c6:	4b77      	ldr	r3, [pc, #476]	; (80085a4 <set_privileges+0x2ac>)
 80083c8:	2212      	movs	r2, #18
 80083ca:	4875      	ldr	r0, [pc, #468]	; (80085a0 <set_privileges+0x2a8>)
 80083cc:	f7fd fb24 	bl	8005a18 <f_read>
 80083d0:	4603      	mov	r3, r0
 80083d2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
		if (fr)
 80083d6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00b      	beq.n	80083f6 <set_privileges+0xfe>
				{
					prepare_response(operation, RESP_ERR, id, 0, 0);
 80083de:	2300      	movs	r3, #0
 80083e0:	9300      	str	r3, [sp, #0]
 80083e2:	2300      	movs	r3, #0
 80083e4:	4a69      	ldr	r2, [pc, #420]	; (800858c <set_privileges+0x294>)
 80083e6:	2101      	movs	r1, #1
 80083e8:	4869      	ldr	r0, [pc, #420]	; (8008590 <set_privileges+0x298>)
 80083ea:	f000 fc3f 	bl	8008c6c <prepare_response>
					f_close(&file);
 80083ee:	486c      	ldr	r0, [pc, #432]	; (80085a0 <set_privileges+0x2a8>)
 80083f0:	f7fd ff5b 	bl	80062aa <f_close>
					return;
 80083f4:	e0c0      	b.n	8008578 <set_privileges+0x280>
				}
		memcpy(data_username, data_buffer+1, 6);
 80083f6:	f107 0308 	add.w	r3, r7, #8
 80083fa:	3301      	adds	r3, #1
 80083fc:	f107 001c 	add.w	r0, r7, #28
 8008400:	2206      	movs	r2, #6
 8008402:	4619      	mov	r1, r3
 8008404:	f010 faa9 	bl	801895a <memcpy>
		if(strcmp(cli_username, data_username) == 0)
 8008408:	f107 021c 	add.w	r2, r7, #28
 800840c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008410:	4611      	mov	r1, r2
 8008412:	4618      	mov	r0, r3
 8008414:	f7f7 fedc 	bl	80001d0 <strcmp>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	f040 809a 	bne.w	8008554 <set_privileges+0x25c>
		{
			f_lseek(&file, f_tell(&file) - 3);
 8008420:	4b5f      	ldr	r3, [pc, #380]	; (80085a0 <set_privileges+0x2a8>)
 8008422:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8008426:	1ecb      	subs	r3, r1, #3
 8008428:	f142 34ff 	adc.w	r4, r2, #4294967295
 800842c:	461a      	mov	r2, r3
 800842e:	4623      	mov	r3, r4
 8008430:	485b      	ldr	r0, [pc, #364]	; (80085a0 <set_privileges+0x2a8>)
 8008432:	f7fd ffe3 	bl	80063fc <f_lseek>
			char privs[] = "*";
 8008436:	232a      	movs	r3, #42	; 0x2a
 8008438:	80bb      	strh	r3, [r7, #4]
			memcpy(privs, msg_buffer+header_with_usrname+6, 1);
 800843a:	4b52      	ldr	r3, [pc, #328]	; (8008584 <set_privileges+0x28c>)
 800843c:	881b      	ldrh	r3, [r3, #0]
 800843e:	3306      	adds	r3, #6
 8008440:	4a51      	ldr	r2, [pc, #324]	; (8008588 <set_privileges+0x290>)
 8008442:	4413      	add	r3, r2
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	713b      	strb	r3, [r7, #4]
			f_write(&file, privs , 1, 0);
 8008448:	1d39      	adds	r1, r7, #4
 800844a:	2300      	movs	r3, #0
 800844c:	2201      	movs	r2, #1
 800844e:	4854      	ldr	r0, [pc, #336]	; (80085a0 <set_privileges+0x2a8>)
 8008450:	f7fd fc4b 	bl	8005cea <f_write>
			if(isLogged[++pointer])
 8008454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008456:	3301      	adds	r3, #1
 8008458:	63fb      	str	r3, [r7, #60]	; 0x3c
 800845a:	4a53      	ldr	r2, [pc, #332]	; (80085a8 <set_privileges+0x2b0>)
 800845c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800845e:	4413      	add	r3, r2
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d069      	beq.n	800853a <set_privileges+0x242>
			{
				uint8_t privils = (uint8_t)privs[0];
 8008466:	793b      	ldrb	r3, [r7, #4]
 8008468:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				uint8_t canget = privils - 100 >= 0 ? 1 : 0;
 800846c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008470:	3b64      	subs	r3, #100	; 0x64
 8008472:	43db      	mvns	r3, r3
 8008474:	0fdb      	lsrs	r3, r3, #31
 8008476:	b2db      	uxtb	r3, r3
 8008478:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				privils = privils -(100*canget);
 800847c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008480:	461a      	mov	r2, r3
 8008482:	0092      	lsls	r2, r2, #2
 8008484:	441a      	add	r2, r3
 8008486:	00d2      	lsls	r2, r2, #3
 8008488:	1ad3      	subs	r3, r2, r3
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	b2da      	uxtb	r2, r3
 800848e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8008492:	4413      	add	r3, r2
 8008494:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				uint8_t cansend = privils - 10 >= 0 ? 1 : 0;
 8008498:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800849c:	3b0a      	subs	r3, #10
 800849e:	43db      	mvns	r3, r3
 80084a0:	0fdb      	lsrs	r3, r3, #31
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				privils = privils - (10*cansend);
 80084a8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80084ac:	461a      	mov	r2, r3
 80084ae:	0152      	lsls	r2, r2, #5
 80084b0:	1ad2      	subs	r2, r2, r3
 80084b2:	0092      	lsls	r2, r2, #2
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	005b      	lsls	r3, r3, #1
 80084b8:	b2da      	uxtb	r2, r3
 80084ba:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80084be:	4413      	add	r3, r2
 80084c0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				uint8_t candel = privils - 1 == 0 ? 1: 0;
 80084c4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	bf0c      	ite	eq
 80084cc:	2301      	moveq	r3, #1
 80084ce:	2300      	movne	r3, #0
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				user_privileges[pointer][0] = canget ? true : false;
 80084d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80084da:	2b00      	cmp	r3, #0
 80084dc:	bf14      	ite	ne
 80084de:	2301      	movne	r3, #1
 80084e0:	2300      	moveq	r3, #0
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	4618      	mov	r0, r3
 80084e6:	4931      	ldr	r1, [pc, #196]	; (80085ac <set_privileges+0x2b4>)
 80084e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80084ea:	4613      	mov	r3, r2
 80084ec:	005b      	lsls	r3, r3, #1
 80084ee:	4413      	add	r3, r2
 80084f0:	440b      	add	r3, r1
 80084f2:	4602      	mov	r2, r0
 80084f4:	701a      	strb	r2, [r3, #0]
				user_privileges[pointer][1] = cansend ? true : false;
 80084f6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	bf14      	ite	ne
 80084fe:	2301      	movne	r3, #1
 8008500:	2300      	moveq	r3, #0
 8008502:	b2db      	uxtb	r3, r3
 8008504:	4618      	mov	r0, r3
 8008506:	4929      	ldr	r1, [pc, #164]	; (80085ac <set_privileges+0x2b4>)
 8008508:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800850a:	4613      	mov	r3, r2
 800850c:	005b      	lsls	r3, r3, #1
 800850e:	4413      	add	r3, r2
 8008510:	440b      	add	r3, r1
 8008512:	3301      	adds	r3, #1
 8008514:	4602      	mov	r2, r0
 8008516:	701a      	strb	r2, [r3, #0]
				user_privileges[pointer][2] = candel ? true : false;
 8008518:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800851c:	2b00      	cmp	r3, #0
 800851e:	bf14      	ite	ne
 8008520:	2301      	movne	r3, #1
 8008522:	2300      	moveq	r3, #0
 8008524:	b2db      	uxtb	r3, r3
 8008526:	4618      	mov	r0, r3
 8008528:	4920      	ldr	r1, [pc, #128]	; (80085ac <set_privileges+0x2b4>)
 800852a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800852c:	4613      	mov	r3, r2
 800852e:	005b      	lsls	r3, r3, #1
 8008530:	4413      	add	r3, r2
 8008532:	440b      	add	r3, r1
 8008534:	3302      	adds	r3, #2
 8008536:	4602      	mov	r2, r0
 8008538:	701a      	strb	r2, [r3, #0]
			}
			prepare_response(operation, RESP_OK, id, 0, 0);
 800853a:	2300      	movs	r3, #0
 800853c:	9300      	str	r3, [sp, #0]
 800853e:	2300      	movs	r3, #0
 8008540:	4a12      	ldr	r2, [pc, #72]	; (800858c <set_privileges+0x294>)
 8008542:	2100      	movs	r1, #0
 8008544:	4812      	ldr	r0, [pc, #72]	; (8008590 <set_privileges+0x298>)
 8008546:	f000 fb91 	bl	8008c6c <prepare_response>
			f_close(&file);
 800854a:	4815      	ldr	r0, [pc, #84]	; (80085a0 <set_privileges+0x2a8>)
 800854c:	f7fd fead 	bl	80062aa <f_close>
			return;
 8008550:	bf00      	nop
 8008552:	e011      	b.n	8008578 <set_privileges+0x280>
		}
		pointer++;
 8008554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008556:	3301      	adds	r3, #1
 8008558:	63fb      	str	r3, [r7, #60]	; 0x3c
	while(read==18 && pointer<255)
 800855a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800855c:	2b12      	cmp	r3, #18
 800855e:	d103      	bne.n	8008568 <set_privileges+0x270>
 8008560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008562:	2bfe      	cmp	r3, #254	; 0xfe
 8008564:	f77f af2d 	ble.w	80083c2 <set_privileges+0xca>
	}
	prepare_response(operation, RESP_NOT_FOUND, id, 0 ,0);
 8008568:	2300      	movs	r3, #0
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	2300      	movs	r3, #0
 800856e:	4a07      	ldr	r2, [pc, #28]	; (800858c <set_privileges+0x294>)
 8008570:	2108      	movs	r1, #8
 8008572:	4807      	ldr	r0, [pc, #28]	; (8008590 <set_privileges+0x298>)
 8008574:	f000 fb7a 	bl	8008c6c <prepare_response>
}
 8008578:	3744      	adds	r7, #68	; 0x44
 800857a:	46bd      	mov	sp, r7
 800857c:	bd90      	pop	{r4, r7, pc}
 800857e:	bf00      	nop
 8008580:	080198b8 	.word	0x080198b8
 8008584:	20000014 	.word	0x20000014
 8008588:	20000b10 	.word	0x20000b10
 800858c:	20001010 	.word	0x20001010
 8008590:	20001014 	.word	0x20001014
 8008594:	080198a0 	.word	0x080198a0
 8008598:	200000d4 	.word	0x200000d4
 800859c:	080198a4 	.word	0x080198a4
 80085a0:	20001018 	.word	0x20001018
 80085a4:	20001568 	.word	0x20001568
 80085a8:	20000f10 	.word	0x20000f10
 80085ac:	20001570 	.word	0x20001570

080085b0 <del_user>:
void del_user()
{
 80085b0:	b5b0      	push	{r4, r5, r7, lr}
 80085b2:	b0f6      	sub	sp, #472	; 0x1d8
 80085b4:	af02      	add	r7, sp, #8
	char cli_username[] = "******";
 80085b6:	4a7b      	ldr	r2, [pc, #492]	; (80087a4 <del_user+0x1f4>)
 80085b8:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80085bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80085c0:	6018      	str	r0, [r3, #0]
 80085c2:	3304      	adds	r3, #4
 80085c4:	8019      	strh	r1, [r3, #0]
 80085c6:	3302      	adds	r3, #2
 80085c8:	0c0a      	lsrs	r2, r1, #16
 80085ca:	701a      	strb	r2, [r3, #0]
	char empty_field[] = "******";
 80085cc:	4a75      	ldr	r2, [pc, #468]	; (80087a4 <del_user+0x1f4>)
 80085ce:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80085d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80085d6:	6018      	str	r0, [r3, #0]
 80085d8:	3304      	adds	r3, #4
 80085da:	8019      	strh	r1, [r3, #0]
 80085dc:	3302      	adds	r3, #2
 80085de:	0c0a      	lsrs	r2, r1, #16
 80085e0:	701a      	strb	r2, [r3, #0]
	memcpy(cli_username, msg_buffer+header_with_usrname, 6);
 80085e2:	4b71      	ldr	r3, [pc, #452]	; (80087a8 <del_user+0x1f8>)
 80085e4:	881b      	ldrh	r3, [r3, #0]
 80085e6:	461a      	mov	r2, r3
 80085e8:	4b70      	ldr	r3, [pc, #448]	; (80087ac <del_user+0x1fc>)
 80085ea:	18d1      	adds	r1, r2, r3
 80085ec:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80085f0:	2206      	movs	r2, #6
 80085f2:	4618      	mov	r0, r3
 80085f4:	f010 f9b1 	bl	801895a <memcpy>
	if(strcmp(cli_username, empty_field) == 0)
 80085f8:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 80085fc:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8008600:	4611      	mov	r1, r2
 8008602:	4618      	mov	r0, r3
 8008604:	f7f7 fde4 	bl	80001d0 <strcmp>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d108      	bne.n	8008620 <del_user+0x70>
	{
		prepare_response(operation, RESP_ERR, id, 0, 0);
 800860e:	2300      	movs	r3, #0
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	2300      	movs	r3, #0
 8008614:	4a66      	ldr	r2, [pc, #408]	; (80087b0 <del_user+0x200>)
 8008616:	2101      	movs	r1, #1
 8008618:	4866      	ldr	r0, [pc, #408]	; (80087b4 <del_user+0x204>)
 800861a:	f000 fb27 	bl	8008c6c <prepare_response>
		return;
 800861e:	e0bc      	b.n	800879a <del_user+0x1ea>
	}
	FRESULT fr;
	int pointer = 0;
 8008620:	2300      	movs	r3, #0
 8008622:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	uint16_t read = 18;
 8008626:	2312      	movs	r3, #18
 8008628:	f8a7 31ca 	strh.w	r3, [r7, #458]	; 0x1ca
	fr = f_mount(&FatFs, "", 0);
 800862c:	2200      	movs	r2, #0
 800862e:	4962      	ldr	r1, [pc, #392]	; (80087b8 <del_user+0x208>)
 8008630:	4862      	ldr	r0, [pc, #392]	; (80087bc <del_user+0x20c>)
 8008632:	f7fc ff71 	bl	8005518 <f_mount>
 8008636:	4603      	mov	r3, r0
 8008638:	f887 31c9 	strb.w	r3, [r7, #457]	; 0x1c9
	fr = f_open(&file, "user database.txt", FA_READ | FA_WRITE);
 800863c:	2203      	movs	r2, #3
 800863e:	4960      	ldr	r1, [pc, #384]	; (80087c0 <del_user+0x210>)
 8008640:	4860      	ldr	r0, [pc, #384]	; (80087c4 <del_user+0x214>)
 8008642:	f7fc ffa9 	bl	8005598 <f_open>
 8008646:	4603      	mov	r3, r0
 8008648:	f887 31c9 	strb.w	r3, [r7, #457]	; 0x1c9
	char data_username[] = "******";
 800864c:	4a55      	ldr	r2, [pc, #340]	; (80087a4 <del_user+0x1f4>)
 800864e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8008652:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008656:	6018      	str	r0, [r3, #0]
 8008658:	3304      	adds	r3, #4
 800865a:	8019      	strh	r1, [r3, #0]
 800865c:	3302      	adds	r3, #2
 800865e:	0c0a      	lsrs	r2, r1, #16
 8008660:	701a      	strb	r2, [r3, #0]
	char data_buffer[18];
	fr = f_read(&file, data_buffer, 18, &bytes_read);
 8008662:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8008666:	4b58      	ldr	r3, [pc, #352]	; (80087c8 <del_user+0x218>)
 8008668:	2212      	movs	r2, #18
 800866a:	4856      	ldr	r0, [pc, #344]	; (80087c4 <del_user+0x214>)
 800866c:	f7fd f9d4 	bl	8005a18 <f_read>
 8008670:	4603      	mov	r3, r0
 8008672:	f887 31c9 	strb.w	r3, [r7, #457]	; 0x1c9
	pointer++;
 8008676:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800867a:	3301      	adds	r3, #1
 800867c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	while(read==18 && pointer <255)
 8008680:	e075      	b.n	800876e <del_user+0x1be>
	{
		fr = f_read(&file, data_buffer, 18, &bytes_read);
 8008682:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8008686:	4b50      	ldr	r3, [pc, #320]	; (80087c8 <del_user+0x218>)
 8008688:	2212      	movs	r2, #18
 800868a:	484e      	ldr	r0, [pc, #312]	; (80087c4 <del_user+0x214>)
 800868c:	f7fd f9c4 	bl	8005a18 <f_read>
 8008690:	4603      	mov	r3, r0
 8008692:	f887 31c9 	strb.w	r3, [r7, #457]	; 0x1c9
		if (fr)
 8008696:	f897 31c9 	ldrb.w	r3, [r7, #457]	; 0x1c9
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00b      	beq.n	80086b6 <del_user+0x106>
		{
			prepare_response(operation, RESP_ERR, id, 0, 0);
 800869e:	2300      	movs	r3, #0
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	2300      	movs	r3, #0
 80086a4:	4a42      	ldr	r2, [pc, #264]	; (80087b0 <del_user+0x200>)
 80086a6:	2101      	movs	r1, #1
 80086a8:	4842      	ldr	r0, [pc, #264]	; (80087b4 <del_user+0x204>)
 80086aa:	f000 fadf 	bl	8008c6c <prepare_response>
			f_close(&file);
 80086ae:	4845      	ldr	r0, [pc, #276]	; (80087c4 <del_user+0x214>)
 80086b0:	f7fd fdfb 	bl	80062aa <f_close>
			return;
 80086b4:	e071      	b.n	800879a <del_user+0x1ea>
		}
		memcpy(data_username, data_buffer+1, 6);
 80086b6:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 80086ba:	3301      	adds	r3, #1
 80086bc:	f507 70d8 	add.w	r0, r7, #432	; 0x1b0
 80086c0:	2206      	movs	r2, #6
 80086c2:	4619      	mov	r1, r3
 80086c4:	f010 f949 	bl	801895a <memcpy>
		if(strcmp(cli_username, data_username) == 0)
 80086c8:	f507 72d8 	add.w	r2, r7, #432	; 0x1b0
 80086cc:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80086d0:	4611      	mov	r1, r2
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7f7 fd7c 	bl	80001d0 <strcmp>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d142      	bne.n	8008764 <del_user+0x1b4>
		{
			f_lseek(&file, f_tell(&file) - 18);
 80086de:	4b39      	ldr	r3, [pc, #228]	; (80087c4 <del_user+0x214>)
 80086e0:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 80086e4:	f1b1 0312 	subs.w	r3, r1, #18
 80086e8:	f142 34ff 	adc.w	r4, r2, #4294967295
 80086ec:	461a      	mov	r2, r3
 80086ee:	4623      	mov	r3, r4
 80086f0:	4834      	ldr	r0, [pc, #208]	; (80087c4 <del_user+0x214>)
 80086f2:	f7fd fe83 	bl	80063fc <f_lseek>
			char star_table[] = "****************";
 80086f6:	4b35      	ldr	r3, [pc, #212]	; (80087cc <del_user+0x21c>)
 80086f8:	f507 74c4 	add.w	r4, r7, #392	; 0x188
 80086fc:	461d      	mov	r5, r3
 80086fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008702:	682b      	ldr	r3, [r5, #0]
 8008704:	7023      	strb	r3, [r4, #0]
			f_write(&file, star_table , 16, 0);
 8008706:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 800870a:	2300      	movs	r3, #0
 800870c:	2210      	movs	r2, #16
 800870e:	482d      	ldr	r0, [pc, #180]	; (80087c4 <del_user+0x214>)
 8008710:	f7fd faeb 	bl	8005cea <f_write>
			prepare_response(operation, RESP_OK, id, 0, 0);
 8008714:	2300      	movs	r3, #0
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	2300      	movs	r3, #0
 800871a:	4a25      	ldr	r2, [pc, #148]	; (80087b0 <del_user+0x200>)
 800871c:	2100      	movs	r1, #0
 800871e:	4825      	ldr	r0, [pc, #148]	; (80087b4 <del_user+0x204>)
 8008720:	f000 faa4 	bl	8008c6c <prepare_response>
			char path[100];
			memset(path, 0, sizeof(path));
 8008724:	1d3b      	adds	r3, r7, #4
 8008726:	2264      	movs	r2, #100	; 0x64
 8008728:	2100      	movs	r1, #0
 800872a:	4618      	mov	r0, r3
 800872c:	f010 f920 	bl	8018970 <memset>
			memset(path, '/', 1);
 8008730:	1d3b      	adds	r3, r7, #4
 8008732:	222f      	movs	r2, #47	; 0x2f
 8008734:	701a      	strb	r2, [r3, #0]
			memcpy(path+1, cli_username, 6);
 8008736:	1d3b      	adds	r3, r7, #4
 8008738:	3301      	adds	r3, #1
 800873a:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 800873e:	2206      	movs	r2, #6
 8008740:	4618      	mov	r0, r3
 8008742:	f010 f90a 	bl	801895a <memcpy>
			FILINFO fno;
			fr = delete_node(&path, sizeof(path), &fno);
 8008746:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800874a:	1d3b      	adds	r3, r7, #4
 800874c:	2164      	movs	r1, #100	; 0x64
 800874e:	4618      	mov	r0, r3
 8008750:	f000 ff64 	bl	800961c <delete_node>
 8008754:	4603      	mov	r3, r0
 8008756:	f887 31c9 	strb.w	r3, [r7, #457]	; 0x1c9
			f_close(&file);
 800875a:	481a      	ldr	r0, [pc, #104]	; (80087c4 <del_user+0x214>)
 800875c:	f7fd fda5 	bl	80062aa <f_close>
			return;
 8008760:	bf00      	nop
 8008762:	e01a      	b.n	800879a <del_user+0x1ea>
		}
			pointer++;
 8008764:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8008768:	3301      	adds	r3, #1
 800876a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	while(read==18 && pointer <255)
 800876e:	f8b7 31ca 	ldrh.w	r3, [r7, #458]	; 0x1ca
 8008772:	2b12      	cmp	r3, #18
 8008774:	d103      	bne.n	800877e <del_user+0x1ce>
 8008776:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800877a:	2bfe      	cmp	r3, #254	; 0xfe
 800877c:	dd81      	ble.n	8008682 <del_user+0xd2>

		}
	prepare_response(operation, RESP_NOT_FOUND, id, 0, 0);
 800877e:	2300      	movs	r3, #0
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	2300      	movs	r3, #0
 8008784:	4a0a      	ldr	r2, [pc, #40]	; (80087b0 <del_user+0x200>)
 8008786:	2108      	movs	r1, #8
 8008788:	480a      	ldr	r0, [pc, #40]	; (80087b4 <del_user+0x204>)
 800878a:	f000 fa6f 	bl	8008c6c <prepare_response>
	fr = f_close(&file);
 800878e:	480d      	ldr	r0, [pc, #52]	; (80087c4 <del_user+0x214>)
 8008790:	f7fd fd8b 	bl	80062aa <f_close>
 8008794:	4603      	mov	r3, r0
 8008796:	f887 31c9 	strb.w	r3, [r7, #457]	; 0x1c9
}
 800879a:	f507 77e8 	add.w	r7, r7, #464	; 0x1d0
 800879e:	46bd      	mov	sp, r7
 80087a0:	bdb0      	pop	{r4, r5, r7, pc}
 80087a2:	bf00      	nop
 80087a4:	080198b8 	.word	0x080198b8
 80087a8:	20000014 	.word	0x20000014
 80087ac:	20000b10 	.word	0x20000b10
 80087b0:	20001010 	.word	0x20001010
 80087b4:	20001014 	.word	0x20001014
 80087b8:	080198a0 	.word	0x080198a0
 80087bc:	200000d4 	.word	0x200000d4
 80087c0:	080198a4 	.word	0x080198a4
 80087c4:	20001018 	.word	0x20001018
 80087c8:	20001568 	.word	0x20001568
 80087cc:	080198cc 	.word	0x080198cc

080087d0 <add_user>:
void add_user()
{
 80087d0:	b590      	push	{r4, r7, lr}
 80087d2:	b0af      	sub	sp, #188	; 0xbc
 80087d4:	af02      	add	r7, sp, #8
	char cli_username[] = "******";
 80087d6:	4ac7      	ldr	r2, [pc, #796]	; (8008af4 <add_user+0x324>)
 80087d8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80087dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80087e0:	6018      	str	r0, [r3, #0]
 80087e2:	3304      	adds	r3, #4
 80087e4:	8019      	strh	r1, [r3, #0]
 80087e6:	3302      	adds	r3, #2
 80087e8:	0c0a      	lsrs	r2, r1, #16
 80087ea:	701a      	strb	r2, [r3, #0]
	char cli_password[] = "********";
 80087ec:	4ac2      	ldr	r2, [pc, #776]	; (8008af8 <add_user+0x328>)
 80087ee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80087f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80087f4:	c303      	stmia	r3!, {r0, r1}
 80087f6:	701a      	strb	r2, [r3, #0]
	char empty_field[] = "******";
 80087f8:	4abe      	ldr	r2, [pc, #760]	; (8008af4 <add_user+0x324>)
 80087fa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80087fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008802:	6018      	str	r0, [r3, #0]
 8008804:	3304      	adds	r3, #4
 8008806:	8019      	strh	r1, [r3, #0]
 8008808:	3302      	adds	r3, #2
 800880a:	0c0a      	lsrs	r2, r1, #16
 800880c:	701a      	strb	r2, [r3, #0]
	memcpy(cli_username, msg_buffer+header_with_usrname, 6);
 800880e:	4bbb      	ldr	r3, [pc, #748]	; (8008afc <add_user+0x32c>)
 8008810:	881b      	ldrh	r3, [r3, #0]
 8008812:	461a      	mov	r2, r3
 8008814:	4bba      	ldr	r3, [pc, #744]	; (8008b00 <add_user+0x330>)
 8008816:	18d1      	adds	r1, r2, r3
 8008818:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800881c:	2206      	movs	r2, #6
 800881e:	4618      	mov	r0, r3
 8008820:	f010 f89b 	bl	801895a <memcpy>
	memcpy(cli_password, msg_buffer+header_with_usrname+6, 8);
 8008824:	4bb5      	ldr	r3, [pc, #724]	; (8008afc <add_user+0x32c>)
 8008826:	881b      	ldrh	r3, [r3, #0]
 8008828:	3306      	adds	r3, #6
 800882a:	4ab5      	ldr	r2, [pc, #724]	; (8008b00 <add_user+0x330>)
 800882c:	1899      	adds	r1, r3, r2
 800882e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8008832:	2208      	movs	r2, #8
 8008834:	4618      	mov	r0, r3
 8008836:	f010 f890 	bl	801895a <memcpy>
	if(strcmp(cli_username, empty_field) == 0)
 800883a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800883e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008842:	4611      	mov	r1, r2
 8008844:	4618      	mov	r0, r3
 8008846:	f7f7 fcc3 	bl	80001d0 <strcmp>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d108      	bne.n	8008862 <add_user+0x92>
	{
		prepare_response(operation, RESP_NAME_TAKEN, id, 0, 0);
 8008850:	2300      	movs	r3, #0
 8008852:	9300      	str	r3, [sp, #0]
 8008854:	2300      	movs	r3, #0
 8008856:	4aab      	ldr	r2, [pc, #684]	; (8008b04 <add_user+0x334>)
 8008858:	2107      	movs	r1, #7
 800885a:	48ab      	ldr	r0, [pc, #684]	; (8008b08 <add_user+0x338>)
 800885c:	f000 fa06 	bl	8008c6c <prepare_response>
		return;
 8008860:	e145      	b.n	8008aee <add_user+0x31e>
	}
	FRESULT fr;
	int pointer = 0;
 8008862:	2300      	movs	r3, #0
 8008864:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint16_t read = 18;
 8008868:	2312      	movs	r3, #18
 800886a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
	fr = f_mount(&FatFs, "", 0);
 800886e:	2200      	movs	r2, #0
 8008870:	49a6      	ldr	r1, [pc, #664]	; (8008b0c <add_user+0x33c>)
 8008872:	48a7      	ldr	r0, [pc, #668]	; (8008b10 <add_user+0x340>)
 8008874:	f7fc fe50 	bl	8005518 <f_mount>
 8008878:	4603      	mov	r3, r0
 800887a:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
	fr = f_open(&file, "user database.txt", FA_READ | FA_WRITE);
 800887e:	2203      	movs	r2, #3
 8008880:	49a4      	ldr	r1, [pc, #656]	; (8008b14 <add_user+0x344>)
 8008882:	48a5      	ldr	r0, [pc, #660]	; (8008b18 <add_user+0x348>)
 8008884:	f7fc fe88 	bl	8005598 <f_open>
 8008888:	4603      	mov	r3, r0
 800888a:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
	char data_username[] = "******";
 800888e:	4a99      	ldr	r2, [pc, #612]	; (8008af4 <add_user+0x324>)
 8008890:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008894:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008898:	6018      	str	r0, [r3, #0]
 800889a:	3304      	adds	r3, #4
 800889c:	8019      	strh	r1, [r3, #0]
 800889e:	3302      	adds	r3, #2
 80088a0:	0c0a      	lsrs	r2, r1, #16
 80088a2:	701a      	strb	r2, [r3, #0]
	char data_password[] = "********";
 80088a4:	4a94      	ldr	r2, [pc, #592]	; (8008af8 <add_user+0x328>)
 80088a6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80088aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80088ac:	c303      	stmia	r3!, {r0, r1}
 80088ae:	701a      	strb	r2, [r3, #0]
	char data_buffer[18];
	fr = f_read(&file, data_buffer, 18, &bytes_read);
 80088b0:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80088b4:	4b99      	ldr	r3, [pc, #612]	; (8008b1c <add_user+0x34c>)
 80088b6:	2212      	movs	r2, #18
 80088b8:	4897      	ldr	r0, [pc, #604]	; (8008b18 <add_user+0x348>)
 80088ba:	f7fd f8ad 	bl	8005a18 <f_read>
 80088be:	4603      	mov	r3, r0
 80088c0:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
	pointer++;
 80088c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80088c8:	3301      	adds	r3, #1
 80088ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	while(read==18 && pointer <255)
 80088ce:	e047      	b.n	8008960 <add_user+0x190>
	{
		fr = f_read(&file, data_buffer, 18, &bytes_read);
 80088d0:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80088d4:	4b91      	ldr	r3, [pc, #580]	; (8008b1c <add_user+0x34c>)
 80088d6:	2212      	movs	r2, #18
 80088d8:	488f      	ldr	r0, [pc, #572]	; (8008b18 <add_user+0x348>)
 80088da:	f7fd f89d 	bl	8005a18 <f_read>
 80088de:	4603      	mov	r3, r0
 80088e0:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
		if (fr) {
 80088e4:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00b      	beq.n	8008904 <add_user+0x134>
			prepare_response(operation, RESP_ERR, id, 0, 0);
 80088ec:	2300      	movs	r3, #0
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	2300      	movs	r3, #0
 80088f2:	4a84      	ldr	r2, [pc, #528]	; (8008b04 <add_user+0x334>)
 80088f4:	2101      	movs	r1, #1
 80088f6:	4884      	ldr	r0, [pc, #528]	; (8008b08 <add_user+0x338>)
 80088f8:	f000 f9b8 	bl	8008c6c <prepare_response>
			f_close(&file);
 80088fc:	4886      	ldr	r0, [pc, #536]	; (8008b18 <add_user+0x348>)
 80088fe:	f7fd fcd4 	bl	80062aa <f_close>
			return;
 8008902:	e0f4      	b.n	8008aee <add_user+0x31e>
			}
		memcpy(data_username, data_buffer+1, 6);
 8008904:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008908:	3301      	adds	r3, #1
 800890a:	f107 0084 	add.w	r0, r7, #132	; 0x84
 800890e:	2206      	movs	r2, #6
 8008910:	4619      	mov	r1, r3
 8008912:	f010 f822 	bl	801895a <memcpy>
		memcpy(data_password, data_buffer+7, 8);
 8008916:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800891a:	3307      	adds	r3, #7
 800891c:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8008920:	2208      	movs	r2, #8
 8008922:	4619      	mov	r1, r3
 8008924:	f010 f819 	bl	801895a <memcpy>
		if(strcmp(data_username, cli_username) == 0)
 8008928:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800892c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8008930:	4611      	mov	r1, r2
 8008932:	4618      	mov	r0, r3
 8008934:	f7f7 fc4c 	bl	80001d0 <strcmp>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10b      	bne.n	8008956 <add_user+0x186>
		{
			prepare_response(operation, RESP_NAME_TAKEN, id, 0, 0);
 800893e:	2300      	movs	r3, #0
 8008940:	9300      	str	r3, [sp, #0]
 8008942:	2300      	movs	r3, #0
 8008944:	4a6f      	ldr	r2, [pc, #444]	; (8008b04 <add_user+0x334>)
 8008946:	2107      	movs	r1, #7
 8008948:	486f      	ldr	r0, [pc, #444]	; (8008b08 <add_user+0x338>)
 800894a:	f000 f98f 	bl	8008c6c <prepare_response>
			f_close(&file);
 800894e:	4872      	ldr	r0, [pc, #456]	; (8008b18 <add_user+0x348>)
 8008950:	f7fd fcab 	bl	80062aa <f_close>
			return;
 8008954:	e0cb      	b.n	8008aee <add_user+0x31e>
		}
		pointer++;
 8008956:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800895a:	3301      	adds	r3, #1
 800895c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	while(read==18 && pointer <255)
 8008960:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008964:	2b12      	cmp	r3, #18
 8008966:	d103      	bne.n	8008970 <add_user+0x1a0>
 8008968:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800896c:	2bfe      	cmp	r3, #254	; 0xfe
 800896e:	ddaf      	ble.n	80088d0 <add_user+0x100>
	}
	f_lseek(&file, 0);
 8008970:	f04f 0200 	mov.w	r2, #0
 8008974:	f04f 0300 	mov.w	r3, #0
 8008978:	4867      	ldr	r0, [pc, #412]	; (8008b18 <add_user+0x348>)
 800897a:	f7fd fd3f 	bl	80063fc <f_lseek>
	pointer = 0;
 800897e:	2300      	movs	r3, #0
 8008980:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	fr = f_read(&file, data_buffer, 18, &bytes_read);
 8008984:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8008988:	4b64      	ldr	r3, [pc, #400]	; (8008b1c <add_user+0x34c>)
 800898a:	2212      	movs	r2, #18
 800898c:	4862      	ldr	r0, [pc, #392]	; (8008b18 <add_user+0x348>)
 800898e:	f7fd f843 	bl	8005a18 <f_read>
 8008992:	4603      	mov	r3, r0
 8008994:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
	pointer++;
 8008998:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800899c:	3301      	adds	r3, #1
 800899e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	while(read==18 && pointer <255)
 80089a2:	e087      	b.n	8008ab4 <add_user+0x2e4>
	{
		fr = f_read(&file, data_buffer, 18, &bytes_read);
 80089a4:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80089a8:	4b5c      	ldr	r3, [pc, #368]	; (8008b1c <add_user+0x34c>)
 80089aa:	2212      	movs	r2, #18
 80089ac:	485a      	ldr	r0, [pc, #360]	; (8008b18 <add_user+0x348>)
 80089ae:	f7fd f833 	bl	8005a18 <f_read>
 80089b2:	4603      	mov	r3, r0
 80089b4:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
		if (fr) {
 80089b8:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00b      	beq.n	80089d8 <add_user+0x208>
				prepare_response(operation, RESP_ERR, id, 0, 0);
 80089c0:	2300      	movs	r3, #0
 80089c2:	9300      	str	r3, [sp, #0]
 80089c4:	2300      	movs	r3, #0
 80089c6:	4a4f      	ldr	r2, [pc, #316]	; (8008b04 <add_user+0x334>)
 80089c8:	2101      	movs	r1, #1
 80089ca:	484f      	ldr	r0, [pc, #316]	; (8008b08 <add_user+0x338>)
 80089cc:	f000 f94e 	bl	8008c6c <prepare_response>
				f_close(&file);
 80089d0:	4851      	ldr	r0, [pc, #324]	; (8008b18 <add_user+0x348>)
 80089d2:	f7fd fc6a 	bl	80062aa <f_close>
				return;
 80089d6:	e08a      	b.n	8008aee <add_user+0x31e>
					}
		memcpy(data_username, data_buffer+1, 6);
 80089d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80089dc:	3301      	adds	r3, #1
 80089de:	f107 0084 	add.w	r0, r7, #132	; 0x84
 80089e2:	2206      	movs	r2, #6
 80089e4:	4619      	mov	r1, r3
 80089e6:	f00f ffb8 	bl	801895a <memcpy>
		memcpy(data_password, data_buffer+7, 8);
 80089ea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80089ee:	3307      	adds	r3, #7
 80089f0:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80089f4:	2208      	movs	r2, #8
 80089f6:	4619      	mov	r1, r3
 80089f8:	f00f ffaf 	bl	801895a <memcpy>
		if(strcmp(empty_field, data_username) == 0)
 80089fc:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8008a00:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008a04:	4611      	mov	r1, r2
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7f7 fbe2 	bl	80001d0 <strcmp>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d14b      	bne.n	8008aaa <add_user+0x2da>
				{
					f_lseek(&file, f_tell(&file) - 18);
 8008a12:	4b41      	ldr	r3, [pc, #260]	; (8008b18 <add_user+0x348>)
 8008a14:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8008a18:	f1b1 0312 	subs.w	r3, r1, #18
 8008a1c:	f142 34ff 	adc.w	r4, r2, #4294967295
 8008a20:	461a      	mov	r2, r3
 8008a22:	4623      	mov	r3, r4
 8008a24:	483c      	ldr	r0, [pc, #240]	; (8008b18 <add_user+0x348>)
 8008a26:	f7fd fce9 	bl	80063fc <f_lseek>
					id[0] = pointer;
 8008a2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a2e:	b2da      	uxtb	r2, r3
 8008a30:	4b34      	ldr	r3, [pc, #208]	; (8008b04 <add_user+0x334>)
 8008a32:	701a      	strb	r2, [r3, #0]
					f_write(&file, id,1,0);
 8008a34:	2300      	movs	r3, #0
 8008a36:	2201      	movs	r2, #1
 8008a38:	4932      	ldr	r1, [pc, #200]	; (8008b04 <add_user+0x334>)
 8008a3a:	4837      	ldr	r0, [pc, #220]	; (8008b18 <add_user+0x348>)
 8008a3c:	f7fd f955 	bl	8005cea <f_write>
					f_write(&file, cli_username, 6,0);
 8008a40:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8008a44:	2300      	movs	r3, #0
 8008a46:	2206      	movs	r2, #6
 8008a48:	4833      	ldr	r0, [pc, #204]	; (8008b18 <add_user+0x348>)
 8008a4a:	f7fd f94e 	bl	8005cea <f_write>
					f_write(&file, cli_password, 8, 0);
 8008a4e:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8008a52:	2300      	movs	r3, #0
 8008a54:	2208      	movs	r2, #8
 8008a56:	4830      	ldr	r0, [pc, #192]	; (8008b18 <add_user+0x348>)
 8008a58:	f7fd f947 	bl	8005cea <f_write>
					f_write(&file, default_privileges, 1, 0);
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	2201      	movs	r2, #1
 8008a60:	492f      	ldr	r1, [pc, #188]	; (8008b20 <add_user+0x350>)
 8008a62:	482d      	ldr	r0, [pc, #180]	; (8008b18 <add_user+0x348>)
 8008a64:	f7fd f941 	bl	8005cea <f_write>
					prepare_response(operation, RESP_OK, id, 0, 0);
 8008a68:	2300      	movs	r3, #0
 8008a6a:	9300      	str	r3, [sp, #0]
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	4a25      	ldr	r2, [pc, #148]	; (8008b04 <add_user+0x334>)
 8008a70:	2100      	movs	r1, #0
 8008a72:	4825      	ldr	r0, [pc, #148]	; (8008b08 <add_user+0x338>)
 8008a74:	f000 f8fa 	bl	8008c6c <prepare_response>
					char path[100];
					memset(path, 0, sizeof(path));
 8008a78:	463b      	mov	r3, r7
 8008a7a:	2264      	movs	r2, #100	; 0x64
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f00f ff76 	bl	8018970 <memset>
					memset(path, '/', 1);
 8008a84:	232f      	movs	r3, #47	; 0x2f
 8008a86:	703b      	strb	r3, [r7, #0]
					memcpy(path+1, cli_username, 6);
 8008a88:	463b      	mov	r3, r7
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8008a90:	2206      	movs	r2, #6
 8008a92:	4618      	mov	r0, r3
 8008a94:	f00f ff61 	bl	801895a <memcpy>
					fr = f_mkdir(path);
 8008a98:	463b      	mov	r3, r7
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7fe f88e 	bl	8006bbc <f_mkdir>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
					break;
 8008aa6:	bf00      	nop
 8008aa8:	e00d      	b.n	8008ac6 <add_user+0x2f6>
				}
		pointer++;
 8008aaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008aae:	3301      	adds	r3, #1
 8008ab0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	while(read==18 && pointer <255)
 8008ab4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008ab8:	2b12      	cmp	r3, #18
 8008aba:	d104      	bne.n	8008ac6 <add_user+0x2f6>
 8008abc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ac0:	2bfe      	cmp	r3, #254	; 0xfe
 8008ac2:	f77f af6f 	ble.w	80089a4 <add_user+0x1d4>

	}
	fr = f_close(&file);
 8008ac6:	4814      	ldr	r0, [pc, #80]	; (8008b18 <add_user+0x348>)
 8008ac8:	f7fd fbef 	bl	80062aa <f_close>
 8008acc:	4603      	mov	r3, r0
 8008ace:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
	if(fr)
 8008ad2:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d008      	beq.n	8008aec <add_user+0x31c>
	{
		prepare_response(operation, RESP_ERR, id, 0, 0);
 8008ada:	2300      	movs	r3, #0
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	2300      	movs	r3, #0
 8008ae0:	4a08      	ldr	r2, [pc, #32]	; (8008b04 <add_user+0x334>)
 8008ae2:	2101      	movs	r1, #1
 8008ae4:	4808      	ldr	r0, [pc, #32]	; (8008b08 <add_user+0x338>)
 8008ae6:	f000 f8c1 	bl	8008c6c <prepare_response>
	}
	return fr;
 8008aea:	bf00      	nop
 8008aec:	bf00      	nop
}
 8008aee:	37b4      	adds	r7, #180	; 0xb4
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd90      	pop	{r4, r7, pc}
 8008af4:	080198b8 	.word	0x080198b8
 8008af8:	080198c0 	.word	0x080198c0
 8008afc:	20000014 	.word	0x20000014
 8008b00:	20000b10 	.word	0x20000b10
 8008b04:	20001010 	.word	0x20001010
 8008b08:	20001014 	.word	0x20001014
 8008b0c:	080198a0 	.word	0x080198a0
 8008b10:	200000d4 	.word	0x200000d4
 8008b14:	080198a4 	.word	0x080198a4
 8008b18:	20001018 	.word	0x20001018
 8008b1c:	20001568 	.word	0x20001568
 8008b20:	20000018 	.word	0x20000018

08008b24 <login_public>:
uint16_t login_public()
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af02      	add	r7, sp, #8

	id[0] = 255;
 8008b2a:	4b07      	ldr	r3, [pc, #28]	; (8008b48 <login_public+0x24>)
 8008b2c:	22ff      	movs	r2, #255	; 0xff
 8008b2e:	701a      	strb	r2, [r3, #0]
	prepare_response(operation, RESP_OK, id, 0, 0);
 8008b30:	2300      	movs	r3, #0
 8008b32:	9300      	str	r3, [sp, #0]
 8008b34:	2300      	movs	r3, #0
 8008b36:	4a04      	ldr	r2, [pc, #16]	; (8008b48 <login_public+0x24>)
 8008b38:	2100      	movs	r1, #0
 8008b3a:	4804      	ldr	r0, [pc, #16]	; (8008b4c <login_public+0x28>)
 8008b3c:	f000 f896 	bl	8008c6c <prepare_response>


}
 8008b40:	bf00      	nop
 8008b42:	4618      	mov	r0, r3
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	20001010 	.word	0x20001010
 8008b4c:	20001014 	.word	0x20001014

08008b50 <logout>:
uint16_t exit_public()
{

}
uint16_t logout()
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af02      	add	r7, sp, #8

	isLogged[(int)id[0]] = false;
 8008b56:	4b19      	ldr	r3, [pc, #100]	; (8008bbc <logout+0x6c>)
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	4b18      	ldr	r3, [pc, #96]	; (8008bc0 <logout+0x70>)
 8008b5e:	2100      	movs	r1, #0
 8008b60:	5499      	strb	r1, [r3, r2]
	user_count = count_users();
 8008b62:	f7ff f9ed 	bl	8007f40 <count_users>
 8008b66:	4602      	mov	r2, r0
 8008b68:	4b16      	ldr	r3, [pc, #88]	; (8008bc4 <logout+0x74>)
 8008b6a:	601a      	str	r2, [r3, #0]
	LCD_DisplayNum(70,20, user_count,&Font12,BLACK,GREEN);
 8008b6c:	4b15      	ldr	r3, [pc, #84]	; (8008bc4 <logout+0x74>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	461a      	mov	r2, r3
 8008b72:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008b76:	9301      	str	r3, [sp, #4]
 8008b78:	2300      	movs	r3, #0
 8008b7a:	9300      	str	r3, [sp, #0]
 8008b7c:	4b12      	ldr	r3, [pc, #72]	; (8008bc8 <logout+0x78>)
 8008b7e:	2114      	movs	r1, #20
 8008b80:	2046      	movs	r0, #70	; 0x46
 8008b82:	f7f8 f941 	bl	8000e08 <LCD_DisplayNum>
	if(user_count == 0)
 8008b86:	4b0f      	ldr	r3, [pc, #60]	; (8008bc4 <logout+0x74>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d10a      	bne.n	8008ba4 <logout+0x54>
		LCD_DisplayString(70,20, "0",&Font12,BLACK,GREEN);
 8008b8e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8008b92:	9301      	str	r3, [sp, #4]
 8008b94:	2300      	movs	r3, #0
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	4b0b      	ldr	r3, [pc, #44]	; (8008bc8 <logout+0x78>)
 8008b9a:	4a0c      	ldr	r2, [pc, #48]	; (8008bcc <logout+0x7c>)
 8008b9c:	2114      	movs	r1, #20
 8008b9e:	2046      	movs	r0, #70	; 0x46
 8008ba0:	f7f8 f8e0 	bl	8000d64 <LCD_DisplayString>

	prepare_response(operation, RESP_OK, id, 0, 0);
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	9300      	str	r3, [sp, #0]
 8008ba8:	2300      	movs	r3, #0
 8008baa:	4a04      	ldr	r2, [pc, #16]	; (8008bbc <logout+0x6c>)
 8008bac:	2100      	movs	r1, #0
 8008bae:	4808      	ldr	r0, [pc, #32]	; (8008bd0 <logout+0x80>)
 8008bb0:	f000 f85c 	bl	8008c6c <prepare_response>
	return 0;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	20001010 	.word	0x20001010
 8008bc0:	20000f10 	.word	0x20000f10
 8008bc4:	20000b08 	.word	0x20000b08
 8008bc8:	20000004 	.word	0x20000004
 8008bcc:	08019814 	.word	0x08019814
 8008bd0:	20001014 	.word	0x20001014

08008bd4 <clear_control_val>:

void clear_control_val()
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	af00      	add	r7, sp, #0
	control_val = 0;
 8008bd8:	4b09      	ldr	r3, [pc, #36]	; (8008c00 <clear_control_val+0x2c>)
 8008bda:	2200      	movs	r2, #0
 8008bdc:	601a      	str	r2, [r3, #0]
	memset(msg_buffer, 0, sizeof(msg_buffer));
 8008bde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008be2:	2100      	movs	r1, #0
 8008be4:	4807      	ldr	r0, [pc, #28]	; (8008c04 <clear_control_val+0x30>)
 8008be6:	f00f fec3 	bl	8018970 <memset>
	memcpy(msg_buffer, operation, 1);
 8008bea:	4b07      	ldr	r3, [pc, #28]	; (8008c08 <clear_control_val+0x34>)
 8008bec:	781a      	ldrb	r2, [r3, #0]
 8008bee:	4b05      	ldr	r3, [pc, #20]	; (8008c04 <clear_control_val+0x30>)
 8008bf0:	701a      	strb	r2, [r3, #0]
	memcpy(msg_buffer+1, RESP_OK, 1);
 8008bf2:	4b06      	ldr	r3, [pc, #24]	; (8008c0c <clear_control_val+0x38>)
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	7812      	ldrb	r2, [r2, #0]
 8008bf8:	701a      	strb	r2, [r3, #0]
}
 8008bfa:	bf00      	nop
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	20000444 	.word	0x20000444
 8008c04:	20000b10 	.word	0x20000b10
 8008c08:	20001014 	.word	0x20001014
 8008c0c:	20000b11 	.word	0x20000b11

08008c10 <find_end_of_msg>:

uint16_t find_end_of_msg()
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
	for (int i=header_with_usrname;i<1024;i++)
 8008c16:	4b13      	ldr	r3, [pc, #76]	; (8008c64 <find_end_of_msg+0x54>)
 8008c18:	881b      	ldrh	r3, [r3, #0]
 8008c1a:	607b      	str	r3, [r7, #4]
 8008c1c:	e015      	b.n	8008c4a <find_end_of_msg+0x3a>
	{
		if (msg_buffer[i] == '\0' || msg_buffer[i] == 42) return i - header_with_usrname;
 8008c1e:	4a12      	ldr	r2, [pc, #72]	; (8008c68 <find_end_of_msg+0x58>)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4413      	add	r3, r2
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d005      	beq.n	8008c36 <find_end_of_msg+0x26>
 8008c2a:	4a0f      	ldr	r2, [pc, #60]	; (8008c68 <find_end_of_msg+0x58>)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4413      	add	r3, r2
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	2b2a      	cmp	r3, #42	; 0x2a
 8008c34:	d106      	bne.n	8008c44 <find_end_of_msg+0x34>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	4b0a      	ldr	r3, [pc, #40]	; (8008c64 <find_end_of_msg+0x54>)
 8008c3c:	881b      	ldrh	r3, [r3, #0]
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	e008      	b.n	8008c56 <find_end_of_msg+0x46>
	for (int i=header_with_usrname;i<1024;i++)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	3301      	adds	r3, #1
 8008c48:	607b      	str	r3, [r7, #4]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c50:	dbe5      	blt.n	8008c1e <find_end_of_msg+0xe>
	}
	return -1;
 8008c52:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	370c      	adds	r7, #12
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	20000014 	.word	0x20000014
 8008c68:	20000b10 	.word	0x20000b10

08008c6c <prepare_response>:
void prepare_response(char* op, char resp,char* id, char* file_buffer, uint16_t len)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	607a      	str	r2, [r7, #4]
 8008c76:	603b      	str	r3, [r7, #0]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	72fb      	strb	r3, [r7, #11]
	memcpy(msg_buffer, op, 1);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	781a      	ldrb	r2, [r3, #0]
 8008c80:	4b0e      	ldr	r3, [pc, #56]	; (8008cbc <prepare_response+0x50>)
 8008c82:	701a      	strb	r2, [r3, #0]
	memset(msg_buffer+1, resp, 1);
 8008c84:	480e      	ldr	r0, [pc, #56]	; (8008cc0 <prepare_response+0x54>)
 8008c86:	7afb      	ldrb	r3, [r7, #11]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	f00f fe70 	bl	8018970 <memset>
	memcpy(msg_buffer+2, id, 1);
 8008c90:	4a0c      	ldr	r2, [pc, #48]	; (8008cc4 <prepare_response+0x58>)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	7013      	strb	r3, [r2, #0]
	if(len !=0)	memcpy(msg_buffer+header_size, file_buffer, len);
 8008c98:	8b3b      	ldrh	r3, [r7, #24]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d009      	beq.n	8008cb2 <prepare_response+0x46>
 8008c9e:	4b0a      	ldr	r3, [pc, #40]	; (8008cc8 <prepare_response+0x5c>)
 8008ca0:	881b      	ldrh	r3, [r3, #0]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	4b05      	ldr	r3, [pc, #20]	; (8008cbc <prepare_response+0x50>)
 8008ca6:	4413      	add	r3, r2
 8008ca8:	8b3a      	ldrh	r2, [r7, #24]
 8008caa:	6839      	ldr	r1, [r7, #0]
 8008cac:	4618      	mov	r0, r3
 8008cae:	f00f fe54 	bl	801895a <memcpy>
}
 8008cb2:	bf00      	nop
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	20000b10 	.word	0x20000b10
 8008cc0:	20000b11 	.word	0x20000b11
 8008cc4:	20000b12 	.word	0x20000b12
 8008cc8:	20000012 	.word	0x20000012

08008ccc <get_path_info>:
void get_path_info()
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af02      	add	r7, sp, #8
	uint16_t len;
	uint16_t it = find_end_of_msg();
 8008cd2:	f7ff ff9d 	bl	8008c10 <find_end_of_msg>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	80fb      	strh	r3, [r7, #6]
	memcpy(file_buffer, msg_buffer+header_with_usrname, it);
 8008cda:	4b10      	ldr	r3, [pc, #64]	; (8008d1c <get_path_info+0x50>)
 8008cdc:	881b      	ldrh	r3, [r3, #0]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	4b0f      	ldr	r3, [pc, #60]	; (8008d20 <get_path_info+0x54>)
 8008ce2:	4413      	add	r3, r2
 8008ce4:	88fa      	ldrh	r2, [r7, #6]
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	480e      	ldr	r0, [pc, #56]	; (8008d24 <get_path_info+0x58>)
 8008cea:	f00f fe36 	bl	801895a <memcpy>
	if (it < 1)
	{
		//error
	}
	len = scan_dir(file_buffer);
 8008cee:	480d      	ldr	r0, [pc, #52]	; (8008d24 <get_path_info+0x58>)
 8008cf0:	f000 fbac 	bl	800944c <scan_dir>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	80bb      	strh	r3, [r7, #4]
	memset(msg_buffer,0,sizeof(msg_buffer));
 8008cf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008cfc:	2100      	movs	r1, #0
 8008cfe:	4808      	ldr	r0, [pc, #32]	; (8008d20 <get_path_info+0x54>)
 8008d00:	f00f fe36 	bl	8018970 <memset>
	prepare_response(operation, RESP_OK, id, file_buffer,len);
 8008d04:	88bb      	ldrh	r3, [r7, #4]
 8008d06:	9300      	str	r3, [sp, #0]
 8008d08:	4b06      	ldr	r3, [pc, #24]	; (8008d24 <get_path_info+0x58>)
 8008d0a:	4a07      	ldr	r2, [pc, #28]	; (8008d28 <get_path_info+0x5c>)
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	4807      	ldr	r0, [pc, #28]	; (8008d2c <get_path_info+0x60>)
 8008d10:	f7ff ffac 	bl	8008c6c <prepare_response>
}
 8008d14:	bf00      	nop
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	20000014 	.word	0x20000014
 8008d20:	20000b10 	.word	0x20000b10
 8008d24:	20000708 	.word	0x20000708
 8008d28:	20001010 	.word	0x20001010
 8008d2c:	20001014 	.word	0x20001014

08008d30 <check_if_dir_exists>:

void check_if_dir_exists()
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b08c      	sub	sp, #48	; 0x30
 8008d34:	af02      	add	r7, sp, #8
	uint16_t len;
	uint16_t it = find_end_of_msg();
 8008d36:	f7ff ff6b 	bl	8008c10 <find_end_of_msg>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	84fb      	strh	r3, [r7, #38]	; 0x26
	memcpy(file_buffer, msg_buffer+header_with_usrname, it);
 8008d3e:	4b4b      	ldr	r3, [pc, #300]	; (8008e6c <check_if_dir_exists+0x13c>)
 8008d40:	881b      	ldrh	r3, [r3, #0]
 8008d42:	461a      	mov	r2, r3
 8008d44:	4b4a      	ldr	r3, [pc, #296]	; (8008e70 <check_if_dir_exists+0x140>)
 8008d46:	4413      	add	r3, r2
 8008d48:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	4849      	ldr	r0, [pc, #292]	; (8008e74 <check_if_dir_exists+0x144>)
 8008d4e:	f00f fe04 	bl	801895a <memcpy>
	char username[] = "/******";
 8008d52:	4a49      	ldr	r2, [pc, #292]	; (8008e78 <check_if_dir_exists+0x148>)
 8008d54:	f107 031c 	add.w	r3, r7, #28
 8008d58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d5c:	e883 0003 	stmia.w	r3, {r0, r1}
	char first_folder[] = "/******";
 8008d60:	4a45      	ldr	r2, [pc, #276]	; (8008e78 <check_if_dir_exists+0x148>)
 8008d62:	f107 0314 	add.w	r3, r7, #20
 8008d66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d6a:	e883 0003 	stmia.w	r3, {r0, r1}
	char admin_name[] = "/admin0";
 8008d6e:	4a43      	ldr	r2, [pc, #268]	; (8008e7c <check_if_dir_exists+0x14c>)
 8008d70:	f107 030c 	add.w	r3, r7, #12
 8008d74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d78:	e883 0003 	stmia.w	r3, {r0, r1}
	char public_folder[] = "/public";
 8008d7c:	4a40      	ldr	r2, [pc, #256]	; (8008e80 <check_if_dir_exists+0x150>)
 8008d7e:	1d3b      	adds	r3, r7, #4
 8008d80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008d84:	e883 0003 	stmia.w	r3, {r0, r1}
	memcpy(username+1, msg_buffer+header_size, 6);
 8008d88:	f107 031c 	add.w	r3, r7, #28
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	4a3d      	ldr	r2, [pc, #244]	; (8008e84 <check_if_dir_exists+0x154>)
 8008d90:	8812      	ldrh	r2, [r2, #0]
 8008d92:	4611      	mov	r1, r2
 8008d94:	4a36      	ldr	r2, [pc, #216]	; (8008e70 <check_if_dir_exists+0x140>)
 8008d96:	4411      	add	r1, r2
 8008d98:	2206      	movs	r2, #6
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f00f fddd 	bl	801895a <memcpy>
	memcpy(first_folder,msg_buffer+header_with_usrname, 7);
 8008da0:	4b32      	ldr	r3, [pc, #200]	; (8008e6c <check_if_dir_exists+0x13c>)
 8008da2:	881b      	ldrh	r3, [r3, #0]
 8008da4:	461a      	mov	r2, r3
 8008da6:	4b32      	ldr	r3, [pc, #200]	; (8008e70 <check_if_dir_exists+0x140>)
 8008da8:	18d1      	adds	r1, r2, r3
 8008daa:	f107 0314 	add.w	r3, r7, #20
 8008dae:	2207      	movs	r2, #7
 8008db0:	4618      	mov	r0, r3
 8008db2:	f00f fdd2 	bl	801895a <memcpy>
	if(strcmp(username, admin_name)!=0)
 8008db6:	f107 020c 	add.w	r2, r7, #12
 8008dba:	f107 031c 	add.w	r3, r7, #28
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7f7 fa05 	bl	80001d0 <strcmp>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d01d      	beq.n	8008e08 <check_if_dir_exists+0xd8>
	{
		if (strcmp(username, first_folder) != 0 && strcmp(first_folder, public_folder) != 0)
 8008dcc:	f107 0214 	add.w	r2, r7, #20
 8008dd0:	f107 031c 	add.w	r3, r7, #28
 8008dd4:	4611      	mov	r1, r2
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7f7 f9fa 	bl	80001d0 <strcmp>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d012      	beq.n	8008e08 <check_if_dir_exists+0xd8>
 8008de2:	1d3a      	adds	r2, r7, #4
 8008de4:	f107 0314 	add.w	r3, r7, #20
 8008de8:	4611      	mov	r1, r2
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7f7 f9f0 	bl	80001d0 <strcmp>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d008      	beq.n	8008e08 <check_if_dir_exists+0xd8>
		{
			prepare_response(operation, RESP_AUTH_ERR, id, 0, 0);
 8008df6:	2300      	movs	r3, #0
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	4a22      	ldr	r2, [pc, #136]	; (8008e88 <check_if_dir_exists+0x158>)
 8008dfe:	2103      	movs	r1, #3
 8008e00:	4822      	ldr	r0, [pc, #136]	; (8008e8c <check_if_dir_exists+0x15c>)
 8008e02:	f7ff ff33 	bl	8008c6c <prepare_response>
 8008e06:	e02d      	b.n	8008e64 <check_if_dir_exists+0x134>
			return;
		}
	}
	FRESULT fr = f_chdir(file_buffer);
 8008e08:	481a      	ldr	r0, [pc, #104]	; (8008e74 <check_if_dir_exists+0x144>)
 8008e0a:	f7fd fa6e 	bl	80062ea <f_chdir>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	memset(msg_buffer,0,sizeof(msg_buffer));
 8008e14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008e18:	2100      	movs	r1, #0
 8008e1a:	4815      	ldr	r0, [pc, #84]	; (8008e70 <check_if_dir_exists+0x140>)
 8008e1c:	f00f fda8 	bl	8018970 <memset>
	if(fr == FR_OK)
 8008e20:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d108      	bne.n	8008e3a <check_if_dir_exists+0x10a>
	{
		prepare_response(operation, RESP_OK, id, 0, 0);
 8008e28:	2300      	movs	r3, #0
 8008e2a:	9300      	str	r3, [sp, #0]
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	4a16      	ldr	r2, [pc, #88]	; (8008e88 <check_if_dir_exists+0x158>)
 8008e30:	2100      	movs	r1, #0
 8008e32:	4816      	ldr	r0, [pc, #88]	; (8008e8c <check_if_dir_exists+0x15c>)
 8008e34:	f7ff ff1a 	bl	8008c6c <prepare_response>
 8008e38:	e014      	b.n	8008e64 <check_if_dir_exists+0x134>
	}
	else if(fr == FR_NO_PATH)
 8008e3a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008e3e:	2b05      	cmp	r3, #5
 8008e40:	d108      	bne.n	8008e54 <check_if_dir_exists+0x124>
	{
		prepare_response(operation, RESP_NO_PATH, id, 0,0);
 8008e42:	2300      	movs	r3, #0
 8008e44:	9300      	str	r3, [sp, #0]
 8008e46:	2300      	movs	r3, #0
 8008e48:	4a0f      	ldr	r2, [pc, #60]	; (8008e88 <check_if_dir_exists+0x158>)
 8008e4a:	2104      	movs	r1, #4
 8008e4c:	480f      	ldr	r0, [pc, #60]	; (8008e8c <check_if_dir_exists+0x15c>)
 8008e4e:	f7ff ff0d 	bl	8008c6c <prepare_response>
 8008e52:	e007      	b.n	8008e64 <check_if_dir_exists+0x134>
	}
	else
	{
		prepare_response(operation, RESP_ERR, id, 0, 0);
 8008e54:	2300      	movs	r3, #0
 8008e56:	9300      	str	r3, [sp, #0]
 8008e58:	2300      	movs	r3, #0
 8008e5a:	4a0b      	ldr	r2, [pc, #44]	; (8008e88 <check_if_dir_exists+0x158>)
 8008e5c:	2101      	movs	r1, #1
 8008e5e:	480b      	ldr	r0, [pc, #44]	; (8008e8c <check_if_dir_exists+0x15c>)
 8008e60:	f7ff ff04 	bl	8008c6c <prepare_response>
	}
}
 8008e64:	3728      	adds	r7, #40	; 0x28
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	20000014 	.word	0x20000014
 8008e70:	20000b10 	.word	0x20000b10
 8008e74:	20000708 	.word	0x20000708
 8008e78:	080198e0 	.word	0x080198e0
 8008e7c:	080198e8 	.word	0x080198e8
 8008e80:	080198f0 	.word	0x080198f0
 8008e84:	20000012 	.word	0x20000012
 8008e88:	20001010 	.word	0x20001010
 8008e8c:	20001014 	.word	0x20001014

08008e90 <save_to_file>:

void save_to_file(uint16_t append)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b0a0      	sub	sp, #128	; 0x80
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	4603      	mov	r3, r0
 8008e98:	80fb      	strh	r3, [r7, #6]
	uint16_t it = find_end_of_msg();
 8008e9a:	f7ff feb9 	bl	8008c10 <find_end_of_msg>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	char filename[100];
	memset(filename,0, sizeof(filename));
 8008ea4:	f107 030c 	add.w	r3, r7, #12
 8008ea8:	2264      	movs	r2, #100	; 0x64
 8008eaa:	2100      	movs	r1, #0
 8008eac:	4618      	mov	r0, r3
 8008eae:	f00f fd5f 	bl	8018970 <memset>
	memcpy(filename, msg_buffer + header_with_usrname, it);
 8008eb2:	4b5b      	ldr	r3, [pc, #364]	; (8009020 <save_to_file+0x190>)
 8008eb4:	881b      	ldrh	r3, [r3, #0]
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	4b5a      	ldr	r3, [pc, #360]	; (8009024 <save_to_file+0x194>)
 8008eba:	18d1      	adds	r1, r2, r3
 8008ebc:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8008ec0:	f107 030c 	add.w	r3, r7, #12
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f00f fd48 	bl	801895a <memcpy>
	memcpy(file_buffer, msg_buffer + header_with_usrname + it + 1, 1024 - it - header_with_usrname);
 8008eca:	4b55      	ldr	r3, [pc, #340]	; (8009020 <save_to_file+0x190>)
 8008ecc:	881b      	ldrh	r3, [r3, #0]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8008ed4:	4413      	add	r3, r2
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	4a52      	ldr	r2, [pc, #328]	; (8009024 <save_to_file+0x194>)
 8008eda:	1899      	adds	r1, r3, r2
 8008edc:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8008ee0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8008ee4:	4a4e      	ldr	r2, [pc, #312]	; (8009020 <save_to_file+0x190>)
 8008ee6:	8812      	ldrh	r2, [r2, #0]
 8008ee8:	1a9b      	subs	r3, r3, r2
 8008eea:	461a      	mov	r2, r3
 8008eec:	484e      	ldr	r0, [pc, #312]	; (8009028 <save_to_file+0x198>)
 8008eee:	f00f fd34 	bl	801895a <memcpy>
	char packet_counter[3] = {'\0','\0', '\0'};
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	723b      	strb	r3, [r7, #8]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	727b      	strb	r3, [r7, #9]
 8008efa:	2300      	movs	r3, #0
 8008efc:	72bb      	strb	r3, [r7, #10]
	memcpy(packet_counter, msg_buffer + 3, 3);
 8008efe:	4a4b      	ldr	r2, [pc, #300]	; (800902c <save_to_file+0x19c>)
 8008f00:	f107 0308 	add.w	r3, r7, #8
 8008f04:	8811      	ldrh	r1, [r2, #0]
 8008f06:	7892      	ldrb	r2, [r2, #2]
 8008f08:	8019      	strh	r1, [r3, #0]
 8008f0a:	709a      	strb	r2, [r3, #2]
	int ident = (int)id[0];
 8008f0c:	4b48      	ldr	r3, [pc, #288]	; (8009030 <save_to_file+0x1a0>)
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	67bb      	str	r3, [r7, #120]	; 0x78
	int control_val = 0;
 8008f12:	2300      	movs	r3, #0
 8008f14:	677b      	str	r3, [r7, #116]	; 0x74
	int p_counter = 0;
 8008f16:	2300      	movs	r3, #0
 8008f18:	673b      	str	r3, [r7, #112]	; 0x70
	control_val = packet_control[ident][0]*256*256+packet_control[ident][1]*256+packet_control[ident][2];
 8008f1a:	4946      	ldr	r1, [pc, #280]	; (8009034 <save_to_file+0x1a4>)
 8008f1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f1e:	4613      	mov	r3, r2
 8008f20:	005b      	lsls	r3, r3, #1
 8008f22:	4413      	add	r3, r2
 8008f24:	440b      	add	r3, r1
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	0219      	lsls	r1, r3, #8
 8008f2a:	4842      	ldr	r0, [pc, #264]	; (8009034 <save_to_file+0x1a4>)
 8008f2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f2e:	4613      	mov	r3, r2
 8008f30:	005b      	lsls	r3, r3, #1
 8008f32:	4413      	add	r3, r2
 8008f34:	4403      	add	r3, r0
 8008f36:	3301      	adds	r3, #1
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	440b      	add	r3, r1
 8008f3c:	0219      	lsls	r1, r3, #8
 8008f3e:	483d      	ldr	r0, [pc, #244]	; (8009034 <save_to_file+0x1a4>)
 8008f40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f42:	4613      	mov	r3, r2
 8008f44:	005b      	lsls	r3, r3, #1
 8008f46:	4413      	add	r3, r2
 8008f48:	4403      	add	r3, r0
 8008f4a:	3302      	adds	r3, #2
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	440b      	add	r3, r1
 8008f50:	677b      	str	r3, [r7, #116]	; 0x74
	p_counter = packet_counter[0]*256*256+packet_counter[1]*256+packet_counter[2];
 8008f52:	7a3b      	ldrb	r3, [r7, #8]
 8008f54:	021b      	lsls	r3, r3, #8
 8008f56:	7a7a      	ldrb	r2, [r7, #9]
 8008f58:	4413      	add	r3, r2
 8008f5a:	021b      	lsls	r3, r3, #8
 8008f5c:	7aba      	ldrb	r2, [r7, #10]
 8008f5e:	4413      	add	r3, r2
 8008f60:	673b      	str	r3, [r7, #112]	; 0x70
	memset(msg_buffer, 0, sizeof(msg_buffer));
 8008f62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008f66:	2100      	movs	r1, #0
 8008f68:	482e      	ldr	r0, [pc, #184]	; (8009024 <save_to_file+0x194>)
 8008f6a:	f00f fd01 	bl	8018970 <memset>
	FRESULT fres;
	if(p_counter == control_val + 1)
 8008f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f70:	3301      	adds	r3, #1
 8008f72:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d127      	bne.n	8008fc8 <save_to_file+0x138>
	{
		fres = write_file(filename, append);
 8008f78:	88fa      	ldrh	r2, [r7, #6]
 8008f7a:	f107 030c 	add.w	r3, r7, #12
 8008f7e:	4611      	mov	r1, r2
 8008f80:	4618      	mov	r0, r3
 8008f82:	f000 f9eb 	bl	800935c <write_file>
 8008f86:	4603      	mov	r3, r0
 8008f88:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		packet_control[ident][0] = packet_counter[0];
 8008f8c:	7a38      	ldrb	r0, [r7, #8]
 8008f8e:	4929      	ldr	r1, [pc, #164]	; (8009034 <save_to_file+0x1a4>)
 8008f90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008f92:	4613      	mov	r3, r2
 8008f94:	005b      	lsls	r3, r3, #1
 8008f96:	4413      	add	r3, r2
 8008f98:	440b      	add	r3, r1
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	701a      	strb	r2, [r3, #0]
		packet_control[ident][1] = packet_counter[1];
 8008f9e:	7a78      	ldrb	r0, [r7, #9]
 8008fa0:	4924      	ldr	r1, [pc, #144]	; (8009034 <save_to_file+0x1a4>)
 8008fa2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	005b      	lsls	r3, r3, #1
 8008fa8:	4413      	add	r3, r2
 8008faa:	440b      	add	r3, r1
 8008fac:	3301      	adds	r3, #1
 8008fae:	4602      	mov	r2, r0
 8008fb0:	701a      	strb	r2, [r3, #0]
		packet_control[ident][2] = packet_counter[2];
 8008fb2:	7ab8      	ldrb	r0, [r7, #10]
 8008fb4:	491f      	ldr	r1, [pc, #124]	; (8009034 <save_to_file+0x1a4>)
 8008fb6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008fb8:	4613      	mov	r3, r2
 8008fba:	005b      	lsls	r3, r3, #1
 8008fbc:	4413      	add	r3, r2
 8008fbe:	440b      	add	r3, r1
 8008fc0:	3302      	adds	r3, #2
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	701a      	strb	r2, [r3, #0]
 8008fc6:	e00a      	b.n	8008fde <save_to_file+0x14e>

	}
	else if (p_counter == control_val)
 8008fc8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d103      	bne.n	8008fd8 <save_to_file+0x148>
	{
		fres = FR_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8008fd6:	e002      	b.n	8008fde <save_to_file+0x14e>
	}
	else
	{
		fres = 1;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	}
	memcpy(msg_buffer, operation, 1);
 8008fde:	4b16      	ldr	r3, [pc, #88]	; (8009038 <save_to_file+0x1a8>)
 8008fe0:	781a      	ldrb	r2, [r3, #0]
 8008fe2:	4b10      	ldr	r3, [pc, #64]	; (8009024 <save_to_file+0x194>)
 8008fe4:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK)
 8008fe6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d104      	bne.n	8008ff8 <save_to_file+0x168>
	{
		memcpy(msg_buffer+1, RESP_OK, 1);
 8008fee:	4b13      	ldr	r3, [pc, #76]	; (800903c <save_to_file+0x1ac>)
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	7812      	ldrb	r2, [r2, #0]
 8008ff4:	701a      	strb	r2, [r3, #0]
 8008ff6:	e007      	b.n	8009008 <save_to_file+0x178>

	}
	else
	{
		memcpy(msg_buffer+1, RESP_ERR, 1);
 8008ff8:	4b10      	ldr	r3, [pc, #64]	; (800903c <save_to_file+0x1ac>)
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	7812      	ldrb	r2, [r2, #0]
 8008ffe:	701a      	strb	r2, [r3, #0]
		parse_path_and_delete_file();
 8009000:	f000 f820 	bl	8009044 <parse_path_and_delete_file>
		control_val = 0;
 8009004:	2300      	movs	r3, #0
 8009006:	677b      	str	r3, [r7, #116]	; 0x74
	}
	memcpy(msg_buffer+2, id, 1);
 8009008:	4b0d      	ldr	r3, [pc, #52]	; (8009040 <save_to_file+0x1b0>)
 800900a:	4a09      	ldr	r2, [pc, #36]	; (8009030 <save_to_file+0x1a0>)
 800900c:	7812      	ldrb	r2, [r2, #0]
 800900e:	701a      	strb	r2, [r3, #0]
	memcpy(msg_buffer+3, packet_counter, 2);
 8009010:	4a06      	ldr	r2, [pc, #24]	; (800902c <save_to_file+0x19c>)
 8009012:	893b      	ldrh	r3, [r7, #8]
 8009014:	8013      	strh	r3, [r2, #0]
}
 8009016:	bf00      	nop
 8009018:	3780      	adds	r7, #128	; 0x80
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	20000014 	.word	0x20000014
 8009024:	20000b10 	.word	0x20000b10
 8009028:	20000708 	.word	0x20000708
 800902c:	20000b13 	.word	0x20000b13
 8009030:	20001010 	.word	0x20001010
 8009034:	20001268 	.word	0x20001268
 8009038:	20001014 	.word	0x20001014
 800903c:	20000b11 	.word	0x20000b11
 8009040:	20000b12 	.word	0x20000b12

08009044 <parse_path_and_delete_file>:
void parse_path_and_delete_file()
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b09a      	sub	sp, #104	; 0x68
 8009048:	af00      	add	r7, sp, #0
	uint16_t it = find_end_of_msg();
 800904a:	f7ff fde1 	bl	8008c10 <find_end_of_msg>
 800904e:	4603      	mov	r3, r0
 8009050:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	char filename[100];
	memset(filename, 0, sizeof(filename));
 8009054:	463b      	mov	r3, r7
 8009056:	2264      	movs	r2, #100	; 0x64
 8009058:	2100      	movs	r1, #0
 800905a:	4618      	mov	r0, r3
 800905c:	f00f fc88 	bl	8018970 <memset>
	memcpy(filename, msg_buffer + header_with_usrname, it);
 8009060:	4b18      	ldr	r3, [pc, #96]	; (80090c4 <parse_path_and_delete_file+0x80>)
 8009062:	881b      	ldrh	r3, [r3, #0]
 8009064:	461a      	mov	r2, r3
 8009066:	4b18      	ldr	r3, [pc, #96]	; (80090c8 <parse_path_and_delete_file+0x84>)
 8009068:	18d1      	adds	r1, r2, r3
 800906a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800906e:	463b      	mov	r3, r7
 8009070:	4618      	mov	r0, r3
 8009072:	f00f fc72 	bl	801895a <memcpy>
	memset(msg_buffer, 0, sizeof(msg_buffer));
 8009076:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800907a:	2100      	movs	r1, #0
 800907c:	4812      	ldr	r0, [pc, #72]	; (80090c8 <parse_path_and_delete_file+0x84>)
 800907e:	f00f fc77 	bl	8018970 <memset>
	FRESULT fres = delete_file(filename);
 8009082:	463b      	mov	r3, r7
 8009084:	4618      	mov	r0, r3
 8009086:	f000 fa53 	bl	8009530 <delete_file>
 800908a:	4603      	mov	r3, r0
 800908c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	memcpy(msg_buffer, operation, 1);
 8009090:	4b0e      	ldr	r3, [pc, #56]	; (80090cc <parse_path_and_delete_file+0x88>)
 8009092:	781a      	ldrb	r2, [r3, #0]
 8009094:	4b0c      	ldr	r3, [pc, #48]	; (80090c8 <parse_path_and_delete_file+0x84>)
 8009096:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK)
 8009098:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800909c:	2b00      	cmp	r3, #0
 800909e:	d104      	bne.n	80090aa <parse_path_and_delete_file+0x66>
	{
		memcpy(msg_buffer+1, RESP_OK, 1);
 80090a0:	4b0b      	ldr	r3, [pc, #44]	; (80090d0 <parse_path_and_delete_file+0x8c>)
 80090a2:	2200      	movs	r2, #0
 80090a4:	7812      	ldrb	r2, [r2, #0]
 80090a6:	701a      	strb	r2, [r3, #0]
 80090a8:	e003      	b.n	80090b2 <parse_path_and_delete_file+0x6e>
	}
	else
	{
		memcpy(msg_buffer+1, RESP_ERR, 1);
 80090aa:	4b09      	ldr	r3, [pc, #36]	; (80090d0 <parse_path_and_delete_file+0x8c>)
 80090ac:	2201      	movs	r2, #1
 80090ae:	7812      	ldrb	r2, [r2, #0]
 80090b0:	701a      	strb	r2, [r3, #0]
	}
	memcpy(msg_buffer+2, id, 1);
 80090b2:	4b08      	ldr	r3, [pc, #32]	; (80090d4 <parse_path_and_delete_file+0x90>)
 80090b4:	4a08      	ldr	r2, [pc, #32]	; (80090d8 <parse_path_and_delete_file+0x94>)
 80090b6:	7812      	ldrb	r2, [r2, #0]
 80090b8:	701a      	strb	r2, [r3, #0]
}
 80090ba:	bf00      	nop
 80090bc:	3768      	adds	r7, #104	; 0x68
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	20000014 	.word	0x20000014
 80090c8:	20000b10 	.word	0x20000b10
 80090cc:	20001014 	.word	0x20001014
 80090d0:	20000b11 	.word	0x20000b11
 80090d4:	20000b12 	.word	0x20000b12
 80090d8:	20001010 	.word	0x20001010

080090dc <read_and_send_file>:
	}
	memcpy(msg_buffer+2, id, 1);
}

void read_and_send_file()
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b0a0      	sub	sp, #128	; 0x80
 80090e0:	af02      	add	r7, sp, #8
	FRESULT fres;
	uint16_t it = find_end_of_msg();
 80090e2:	f7ff fd95 	bl	8008c10 <find_end_of_msg>
 80090e6:	4603      	mov	r3, r0
 80090e8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	char filename[100];
	memset(filename,0, sizeof(filename));
 80090ec:	1d3b      	adds	r3, r7, #4
 80090ee:	2264      	movs	r2, #100	; 0x64
 80090f0:	2100      	movs	r1, #0
 80090f2:	4618      	mov	r0, r3
 80090f4:	f00f fc3c 	bl	8018970 <memset>
	memcpy(filename, msg_buffer + header_with_usrname, it);
 80090f8:	4b47      	ldr	r3, [pc, #284]	; (8009218 <read_and_send_file+0x13c>)
 80090fa:	881b      	ldrh	r3, [r3, #0]
 80090fc:	461a      	mov	r2, r3
 80090fe:	4b47      	ldr	r3, [pc, #284]	; (800921c <read_and_send_file+0x140>)
 8009100:	18d1      	adds	r1, r2, r3
 8009102:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009106:	1d3b      	adds	r3, r7, #4
 8009108:	4618      	mov	r0, r3
 800910a:	f00f fc26 	bl	801895a <memcpy>
	int ident = (int)id[0];
 800910e:	4b44      	ldr	r3, [pc, #272]	; (8009220 <read_and_send_file+0x144>)
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	673b      	str	r3, [r7, #112]	; 0x70
	packet_control[ident][0] = msg_buffer[3];
 8009114:	4b41      	ldr	r3, [pc, #260]	; (800921c <read_and_send_file+0x140>)
 8009116:	78d8      	ldrb	r0, [r3, #3]
 8009118:	4942      	ldr	r1, [pc, #264]	; (8009224 <read_and_send_file+0x148>)
 800911a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800911c:	4613      	mov	r3, r2
 800911e:	005b      	lsls	r3, r3, #1
 8009120:	4413      	add	r3, r2
 8009122:	440b      	add	r3, r1
 8009124:	4602      	mov	r2, r0
 8009126:	701a      	strb	r2, [r3, #0]
	packet_control[ident][1] = msg_buffer[4];
 8009128:	4b3c      	ldr	r3, [pc, #240]	; (800921c <read_and_send_file+0x140>)
 800912a:	7918      	ldrb	r0, [r3, #4]
 800912c:	493d      	ldr	r1, [pc, #244]	; (8009224 <read_and_send_file+0x148>)
 800912e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009130:	4613      	mov	r3, r2
 8009132:	005b      	lsls	r3, r3, #1
 8009134:	4413      	add	r3, r2
 8009136:	440b      	add	r3, r1
 8009138:	3301      	adds	r3, #1
 800913a:	4602      	mov	r2, r0
 800913c:	701a      	strb	r2, [r3, #0]
	packet_control[ident][2] = msg_buffer[5];
 800913e:	4b37      	ldr	r3, [pc, #220]	; (800921c <read_and_send_file+0x140>)
 8009140:	7958      	ldrb	r0, [r3, #5]
 8009142:	4938      	ldr	r1, [pc, #224]	; (8009224 <read_and_send_file+0x148>)
 8009144:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009146:	4613      	mov	r3, r2
 8009148:	005b      	lsls	r3, r3, #1
 800914a:	4413      	add	r3, r2
 800914c:	440b      	add	r3, r1
 800914e:	3302      	adds	r3, #2
 8009150:	4602      	mov	r2, r0
 8009152:	701a      	strb	r2, [r3, #0]
	int p_counter = 0;
 8009154:	2300      	movs	r3, #0
 8009156:	66fb      	str	r3, [r7, #108]	; 0x6c
	p_counter = packet_control[ident][0]*256*256+packet_control[ident][1]*256+packet_control[ident][2];
 8009158:	4932      	ldr	r1, [pc, #200]	; (8009224 <read_and_send_file+0x148>)
 800915a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800915c:	4613      	mov	r3, r2
 800915e:	005b      	lsls	r3, r3, #1
 8009160:	4413      	add	r3, r2
 8009162:	440b      	add	r3, r1
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	0219      	lsls	r1, r3, #8
 8009168:	482e      	ldr	r0, [pc, #184]	; (8009224 <read_and_send_file+0x148>)
 800916a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800916c:	4613      	mov	r3, r2
 800916e:	005b      	lsls	r3, r3, #1
 8009170:	4413      	add	r3, r2
 8009172:	4403      	add	r3, r0
 8009174:	3301      	adds	r3, #1
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	440b      	add	r3, r1
 800917a:	0219      	lsls	r1, r3, #8
 800917c:	4829      	ldr	r0, [pc, #164]	; (8009224 <read_and_send_file+0x148>)
 800917e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009180:	4613      	mov	r3, r2
 8009182:	005b      	lsls	r3, r3, #1
 8009184:	4413      	add	r3, r2
 8009186:	4403      	add	r3, r0
 8009188:	3302      	adds	r3, #2
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	440b      	add	r3, r1
 800918e:	66fb      	str	r3, [r7, #108]	; 0x6c
	memset(msg_buffer, 0, sizeof(msg_buffer));
 8009190:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009194:	2100      	movs	r1, #0
 8009196:	4821      	ldr	r0, [pc, #132]	; (800921c <read_and_send_file+0x140>)
 8009198:	f00f fbea 	bl	8018970 <memset>
	fres = read_file(filename, p_counter);
 800919c:	1d3b      	adds	r3, r7, #4
 800919e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80091a0:	4618      	mov	r0, r3
 80091a2:	f000 f893 	bl	80092cc <read_file>
 80091a6:	4603      	mov	r3, r0
 80091a8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	if (fres == FR_OK)
 80091ac:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d11d      	bne.n	80091f0 <read_and_send_file+0x114>
		{
		if(bytes_read == 512)
 80091b4:	4b1c      	ldr	r3, [pc, #112]	; (8009228 <read_and_send_file+0x14c>)
 80091b6:	881b      	ldrh	r3, [r3, #0]
 80091b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091bc:	d109      	bne.n	80091d2 <read_and_send_file+0xf6>
		{
			prepare_response(operation, RESP_MORE, id, file_buffer, bytes_read);
 80091be:	4b1a      	ldr	r3, [pc, #104]	; (8009228 <read_and_send_file+0x14c>)
 80091c0:	881b      	ldrh	r3, [r3, #0]
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	4b19      	ldr	r3, [pc, #100]	; (800922c <read_and_send_file+0x150>)
 80091c6:	4a16      	ldr	r2, [pc, #88]	; (8009220 <read_and_send_file+0x144>)
 80091c8:	2102      	movs	r1, #2
 80091ca:	4819      	ldr	r0, [pc, #100]	; (8009230 <read_and_send_file+0x154>)
 80091cc:	f7ff fd4e 	bl	8008c6c <prepare_response>
 80091d0:	e017      	b.n	8009202 <read_and_send_file+0x126>
		}
		else if(bytes_read < 512)
 80091d2:	4b15      	ldr	r3, [pc, #84]	; (8009228 <read_and_send_file+0x14c>)
 80091d4:	881b      	ldrh	r3, [r3, #0]
 80091d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091da:	d212      	bcs.n	8009202 <read_and_send_file+0x126>
		{
			prepare_response(operation, RESP_OK, id, file_buffer, bytes_read);
 80091dc:	4b12      	ldr	r3, [pc, #72]	; (8009228 <read_and_send_file+0x14c>)
 80091de:	881b      	ldrh	r3, [r3, #0]
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	4b12      	ldr	r3, [pc, #72]	; (800922c <read_and_send_file+0x150>)
 80091e4:	4a0e      	ldr	r2, [pc, #56]	; (8009220 <read_and_send_file+0x144>)
 80091e6:	2100      	movs	r1, #0
 80091e8:	4811      	ldr	r0, [pc, #68]	; (8009230 <read_and_send_file+0x154>)
 80091ea:	f7ff fd3f 	bl	8008c6c <prepare_response>
 80091ee:	e008      	b.n	8009202 <read_and_send_file+0x126>
		}
		}
		else
		{
			prepare_response(operation, RESP_ERR, id, file_buffer, bytes_read);
 80091f0:	4b0d      	ldr	r3, [pc, #52]	; (8009228 <read_and_send_file+0x14c>)
 80091f2:	881b      	ldrh	r3, [r3, #0]
 80091f4:	9300      	str	r3, [sp, #0]
 80091f6:	4b0d      	ldr	r3, [pc, #52]	; (800922c <read_and_send_file+0x150>)
 80091f8:	4a09      	ldr	r2, [pc, #36]	; (8009220 <read_and_send_file+0x144>)
 80091fa:	2101      	movs	r1, #1
 80091fc:	480c      	ldr	r0, [pc, #48]	; (8009230 <read_and_send_file+0x154>)
 80091fe:	f7ff fd35 	bl	8008c6c <prepare_response>
		}
		memset(file_buffer, 0, sizeof(file_buffer));
 8009202:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009206:	2100      	movs	r1, #0
 8009208:	4808      	ldr	r0, [pc, #32]	; (800922c <read_and_send_file+0x150>)
 800920a:	f00f fbb1 	bl	8018970 <memset>
}
 800920e:	bf00      	nop
 8009210:	3778      	adds	r7, #120	; 0x78
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	20000014 	.word	0x20000014
 800921c:	20000b10 	.word	0x20000b10
 8009220:	20001010 	.word	0x20001010
 8009224:	20001268 	.word	0x20001268
 8009228:	20001568 	.word	0x20001568
 800922c:	20000708 	.word	0x20000708
 8009230:	20001014 	.word	0x20001014

08009234 <parse_path_and_create_directory>:

void parse_path_and_create_directory()
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b09a      	sub	sp, #104	; 0x68
 8009238:	af00      	add	r7, sp, #0
	uint16_t it = find_end_of_msg();
 800923a:	f7ff fce9 	bl	8008c10 <find_end_of_msg>
 800923e:	4603      	mov	r3, r0
 8009240:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
		char dirname[100];
		memset(dirname, 0, sizeof(dirname));
 8009244:	463b      	mov	r3, r7
 8009246:	2264      	movs	r2, #100	; 0x64
 8009248:	2100      	movs	r1, #0
 800924a:	4618      	mov	r0, r3
 800924c:	f00f fb90 	bl	8018970 <memset>
		memcpy(dirname, msg_buffer + header_with_usrname, it);
 8009250:	4b18      	ldr	r3, [pc, #96]	; (80092b4 <parse_path_and_create_directory+0x80>)
 8009252:	881b      	ldrh	r3, [r3, #0]
 8009254:	461a      	mov	r2, r3
 8009256:	4b18      	ldr	r3, [pc, #96]	; (80092b8 <parse_path_and_create_directory+0x84>)
 8009258:	18d1      	adds	r1, r2, r3
 800925a:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800925e:	463b      	mov	r3, r7
 8009260:	4618      	mov	r0, r3
 8009262:	f00f fb7a 	bl	801895a <memcpy>
		memset(msg_buffer, 0, sizeof(msg_buffer));
 8009266:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800926a:	2100      	movs	r1, #0
 800926c:	4812      	ldr	r0, [pc, #72]	; (80092b8 <parse_path_and_create_directory+0x84>)
 800926e:	f00f fb7f 	bl	8018970 <memset>
		FRESULT fres = create_directory(dirname);
 8009272:	463b      	mov	r3, r7
 8009274:	4618      	mov	r0, r3
 8009276:	f000 fa63 	bl	8009740 <create_directory>
 800927a:	4603      	mov	r3, r0
 800927c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
		memcpy(msg_buffer, operation, 1);
 8009280:	4b0e      	ldr	r3, [pc, #56]	; (80092bc <parse_path_and_create_directory+0x88>)
 8009282:	781a      	ldrb	r2, [r3, #0]
 8009284:	4b0c      	ldr	r3, [pc, #48]	; (80092b8 <parse_path_and_create_directory+0x84>)
 8009286:	701a      	strb	r2, [r3, #0]
		if (fres == FR_OK)
 8009288:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800928c:	2b00      	cmp	r3, #0
 800928e:	d104      	bne.n	800929a <parse_path_and_create_directory+0x66>
		{
			memcpy(msg_buffer+1, RESP_OK, 1);
 8009290:	4b0b      	ldr	r3, [pc, #44]	; (80092c0 <parse_path_and_create_directory+0x8c>)
 8009292:	2200      	movs	r2, #0
 8009294:	7812      	ldrb	r2, [r2, #0]
 8009296:	701a      	strb	r2, [r3, #0]
 8009298:	e003      	b.n	80092a2 <parse_path_and_create_directory+0x6e>
		}
		else
		{
			memcpy(msg_buffer+1, RESP_ERR, 1);
 800929a:	4b09      	ldr	r3, [pc, #36]	; (80092c0 <parse_path_and_create_directory+0x8c>)
 800929c:	2201      	movs	r2, #1
 800929e:	7812      	ldrb	r2, [r2, #0]
 80092a0:	701a      	strb	r2, [r3, #0]
		}
		memcpy(msg_buffer+2, id, 1);
 80092a2:	4b08      	ldr	r3, [pc, #32]	; (80092c4 <parse_path_and_create_directory+0x90>)
 80092a4:	4a08      	ldr	r2, [pc, #32]	; (80092c8 <parse_path_and_create_directory+0x94>)
 80092a6:	7812      	ldrb	r2, [r2, #0]
 80092a8:	701a      	strb	r2, [r3, #0]
}
 80092aa:	bf00      	nop
 80092ac:	3768      	adds	r7, #104	; 0x68
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	20000014 	.word	0x20000014
 80092b8:	20000b10 	.word	0x20000b10
 80092bc:	20001014 	.word	0x20001014
 80092c0:	20000b11 	.word	0x20000b11
 80092c4:	20000b12 	.word	0x20000b12
 80092c8:	20001010 	.word	0x20001010

080092cc <read_file>:




uint16_t read_file(char* filename, int p_counter)
{
 80092cc:	b590      	push	{r4, r7, lr}
 80092ce:	b085      	sub	sp, #20
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
	FRESULT fr;
	fr = f_mount(&FatFs, "", 0);
 80092d6:	2200      	movs	r2, #0
 80092d8:	491b      	ldr	r1, [pc, #108]	; (8009348 <read_file+0x7c>)
 80092da:	481c      	ldr	r0, [pc, #112]	; (800934c <read_file+0x80>)
 80092dc:	f7fc f91c 	bl	8005518 <f_mount>
 80092e0:	4603      	mov	r3, r0
 80092e2:	73fb      	strb	r3, [r7, #15]
	fr = f_open(&file, filename, FA_READ);
 80092e4:	2201      	movs	r2, #1
 80092e6:	6879      	ldr	r1, [r7, #4]
 80092e8:	4819      	ldr	r0, [pc, #100]	; (8009350 <read_file+0x84>)
 80092ea:	f7fc f955 	bl	8005598 <f_open>
 80092ee:	4603      	mov	r3, r0
 80092f0:	73fb      	strb	r3, [r7, #15]
	if (fr) return (int)fr;
 80092f2:	7bfb      	ldrb	r3, [r7, #15]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d002      	beq.n	80092fe <read_file+0x32>
 80092f8:	7bfb      	ldrb	r3, [r7, #15]
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	e020      	b.n	8009340 <read_file+0x74>
	fr = f_lseek(&file, p_counter*512);
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	025b      	lsls	r3, r3, #9
 8009302:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8009306:	461a      	mov	r2, r3
 8009308:	4623      	mov	r3, r4
 800930a:	4811      	ldr	r0, [pc, #68]	; (8009350 <read_file+0x84>)
 800930c:	f7fd f876 	bl	80063fc <f_lseek>
 8009310:	4603      	mov	r3, r0
 8009312:	73fb      	strb	r3, [r7, #15]
	if (fr) return (int)fr;
 8009314:	7bfb      	ldrb	r3, [r7, #15]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d002      	beq.n	8009320 <read_file+0x54>
 800931a:	7bfb      	ldrb	r3, [r7, #15]
 800931c:	b29b      	uxth	r3, r3
 800931e:	e00f      	b.n	8009340 <read_file+0x74>
	fr = f_read(&file, file_buffer,512,&bytes_read);
 8009320:	4b0c      	ldr	r3, [pc, #48]	; (8009354 <read_file+0x88>)
 8009322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009326:	490c      	ldr	r1, [pc, #48]	; (8009358 <read_file+0x8c>)
 8009328:	4809      	ldr	r0, [pc, #36]	; (8009350 <read_file+0x84>)
 800932a:	f7fc fb75 	bl	8005a18 <f_read>
 800932e:	4603      	mov	r3, r0
 8009330:	73fb      	strb	r3, [r7, #15]
	fr = f_close(&file);
 8009332:	4807      	ldr	r0, [pc, #28]	; (8009350 <read_file+0x84>)
 8009334:	f7fc ffb9 	bl	80062aa <f_close>
 8009338:	4603      	mov	r3, r0
 800933a:	73fb      	strb	r3, [r7, #15]
	return fr;
 800933c:	7bfb      	ldrb	r3, [r7, #15]
 800933e:	b29b      	uxth	r3, r3
}
 8009340:	4618      	mov	r0, r3
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	bd90      	pop	{r4, r7, pc}
 8009348:	080198a0 	.word	0x080198a0
 800934c:	200000d4 	.word	0x200000d4
 8009350:	20001018 	.word	0x20001018
 8009354:	20001568 	.word	0x20001568
 8009358:	20000708 	.word	0x20000708

0800935c <write_file>:

uint16_t write_file(char* filename, uint16_t append)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	460b      	mov	r3, r1
 8009366:	807b      	strh	r3, [r7, #2]
	FRESULT fr;
	f_mount(&FatFs, "", 0);
 8009368:	2200      	movs	r2, #0
 800936a:	4928      	ldr	r1, [pc, #160]	; (800940c <write_file+0xb0>)
 800936c:	4828      	ldr	r0, [pc, #160]	; (8009410 <write_file+0xb4>)
 800936e:	f7fc f8d3 	bl	8005518 <f_mount>
	if(append == 0) fr = f_open(&file, filename, FA_WRITE | FA_CREATE_NEW);
 8009372:	887b      	ldrh	r3, [r7, #2]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d107      	bne.n	8009388 <write_file+0x2c>
 8009378:	2206      	movs	r2, #6
 800937a:	6879      	ldr	r1, [r7, #4]
 800937c:	4825      	ldr	r0, [pc, #148]	; (8009414 <write_file+0xb8>)
 800937e:	f7fc f90b 	bl	8005598 <f_open>
 8009382:	4603      	mov	r3, r0
 8009384:	73fb      	strb	r3, [r7, #15]
 8009386:	e009      	b.n	800939c <write_file+0x40>
	else if (append == 1) fr = f_open(&file, filename, FA_WRITE | FA_OPEN_APPEND);
 8009388:	887b      	ldrh	r3, [r7, #2]
 800938a:	2b01      	cmp	r3, #1
 800938c:	d106      	bne.n	800939c <write_file+0x40>
 800938e:	2232      	movs	r2, #50	; 0x32
 8009390:	6879      	ldr	r1, [r7, #4]
 8009392:	4820      	ldr	r0, [pc, #128]	; (8009414 <write_file+0xb8>)
 8009394:	f7fc f900 	bl	8005598 <f_open>
 8009398:	4603      	mov	r3, r0
 800939a:	73fb      	strb	r3, [r7, #15]
	if (fr) return (int)fr;
 800939c:	7bfb      	ldrb	r3, [r7, #15]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d002      	beq.n	80093a8 <write_file+0x4c>
 80093a2:	7bfb      	ldrb	r3, [r7, #15]
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	e02d      	b.n	8009404 <write_file+0xa8>
	uint16_t it = 0;
 80093a8:	2300      	movs	r3, #0
 80093aa:	81bb      	strh	r3, [r7, #12]
	for (int i=0;i<1024;i++)
 80093ac:	2300      	movs	r3, #0
 80093ae:	60bb      	str	r3, [r7, #8]
 80093b0:	e00f      	b.n	80093d2 <write_file+0x76>
	{
		if (file_buffer[i] == '\0' || i == 1024)
 80093b2:	4a19      	ldr	r2, [pc, #100]	; (8009418 <write_file+0xbc>)
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	4413      	add	r3, r2
 80093b8:	781b      	ldrb	r3, [r3, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d003      	beq.n	80093c6 <write_file+0x6a>
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093c4:	d102      	bne.n	80093cc <write_file+0x70>
		{
			it = i;
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	81bb      	strh	r3, [r7, #12]
			break;
 80093ca:	e006      	b.n	80093da <write_file+0x7e>
	for (int i=0;i<1024;i++)
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	3301      	adds	r3, #1
 80093d0:	60bb      	str	r3, [r7, #8]
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093d8:	dbeb      	blt.n	80093b2 <write_file+0x56>
		}
	}
	fr =f_write(&file, file_buffer, it, NULL);
 80093da:	89ba      	ldrh	r2, [r7, #12]
 80093dc:	2300      	movs	r3, #0
 80093de:	490e      	ldr	r1, [pc, #56]	; (8009418 <write_file+0xbc>)
 80093e0:	480c      	ldr	r0, [pc, #48]	; (8009414 <write_file+0xb8>)
 80093e2:	f7fc fc82 	bl	8005cea <f_write>
 80093e6:	4603      	mov	r3, r0
 80093e8:	73fb      	strb	r3, [r7, #15]
	fr = f_close(&file);
 80093ea:	480a      	ldr	r0, [pc, #40]	; (8009414 <write_file+0xb8>)
 80093ec:	f7fc ff5d 	bl	80062aa <f_close>
 80093f0:	4603      	mov	r3, r0
 80093f2:	73fb      	strb	r3, [r7, #15]
	memset(file_buffer, 0, sizeof(file_buffer));
 80093f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80093f8:	2100      	movs	r1, #0
 80093fa:	4807      	ldr	r0, [pc, #28]	; (8009418 <write_file+0xbc>)
 80093fc:	f00f fab8 	bl	8018970 <memset>
	return fr;
 8009400:	7bfb      	ldrb	r3, [r7, #15]
 8009402:	b29b      	uxth	r3, r3
}
 8009404:	4618      	mov	r0, r3
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	080198a0 	.word	0x080198a0
 8009410:	200000d4 	.word	0x200000d4
 8009414:	20001018 	.word	0x20001018
 8009418:	20000708 	.word	0x20000708

0800941c <find_size>:
uint16_t find_size(TCHAR * fname)
{
 800941c:	b480      	push	{r7}
 800941e:	b085      	sub	sp, #20
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
	uint16_t index = 0;
 8009424:	2300      	movs	r3, #0
 8009426:	81fb      	strh	r3, [r7, #14]
	while(fname[index] != '\0')
 8009428:	e002      	b.n	8009430 <find_size+0x14>
	{
		index++;
 800942a:	89fb      	ldrh	r3, [r7, #14]
 800942c:	3301      	adds	r3, #1
 800942e:	81fb      	strh	r3, [r7, #14]
	while(fname[index] != '\0')
 8009430:	89fb      	ldrh	r3, [r7, #14]
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	4413      	add	r3, r2
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d1f6      	bne.n	800942a <find_size+0xe>
	}
	return index;
 800943c:	89fb      	ldrh	r3, [r7, #14]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3714      	adds	r7, #20
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
	...

0800944c <scan_dir>:

uint16_t scan_dir(char* path)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b098      	sub	sp, #96	; 0x60
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
	FRESULT fr;
    DIR dir;
    uint16_t i = 0;
 8009454:	2300      	movs	r3, #0
 8009456:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    uint16_t fname_size = 0;
 800945a:	2300      	movs	r3, #0
 800945c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c


    fr = f_mount(&FatFs, "0:", 0);
 8009460:	2200      	movs	r2, #0
 8009462:	492d      	ldr	r1, [pc, #180]	; (8009518 <scan_dir+0xcc>)
 8009464:	482d      	ldr	r0, [pc, #180]	; (800951c <scan_dir+0xd0>)
 8009466:	f7fc f857 	bl	8005518 <f_mount>
 800946a:	4603      	mov	r3, r0
 800946c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    if (fr != FR_OK) return 0;
 8009470:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009474:	2b00      	cmp	r3, #0
 8009476:	d001      	beq.n	800947c <scan_dir+0x30>
 8009478:	2300      	movs	r3, #0
 800947a:	e048      	b.n	800950e <scan_dir+0xc2>
    fr = f_opendir(&dir, path);
 800947c:	f107 0308 	add.w	r3, r7, #8
 8009480:	6879      	ldr	r1, [r7, #4]
 8009482:	4618      	mov	r0, r3
 8009484:	f7fd f9b2 	bl	80067ec <f_opendir>
 8009488:	4603      	mov	r3, r0
 800948a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    if (fr == FR_OK) {
 800948e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8009492:	2b00      	cmp	r3, #0
 8009494:	d139      	bne.n	800950a <scan_dir+0xbe>
        for (;;)
        {
        	fr = f_readdir(&dir, &file_info);
 8009496:	f107 0308 	add.w	r3, r7, #8
 800949a:	4921      	ldr	r1, [pc, #132]	; (8009520 <scan_dir+0xd4>)
 800949c:	4618      	mov	r0, r3
 800949e:	f7fd fa48 	bl	8006932 <f_readdir>
 80094a2:	4603      	mov	r3, r0
 80094a4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
            if (fr != FR_OK || file_info.fname[0] == 0) break;
 80094a8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d127      	bne.n	8009500 <scan_dir+0xb4>
 80094b0:	4b1b      	ldr	r3, [pc, #108]	; (8009520 <scan_dir+0xd4>)
 80094b2:	7e9b      	ldrb	r3, [r3, #26]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d023      	beq.n	8009500 <scan_dir+0xb4>
            fname_size  = find_size(file_info.fname);
 80094b8:	481a      	ldr	r0, [pc, #104]	; (8009524 <scan_dir+0xd8>)
 80094ba:	f7ff ffaf 	bl	800941c <find_size>
 80094be:	4603      	mov	r3, r0
 80094c0:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            memcpy(file_buffer + i, file_info.fname, fname_size);
 80094c4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80094c8:	4a17      	ldr	r2, [pc, #92]	; (8009528 <scan_dir+0xdc>)
 80094ca:	4413      	add	r3, r2
 80094cc:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80094d0:	4914      	ldr	r1, [pc, #80]	; (8009524 <scan_dir+0xd8>)
 80094d2:	4618      	mov	r0, r3
 80094d4:	f00f fa41 	bl	801895a <memcpy>
            i += fname_size;
 80094d8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80094dc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80094e0:	4413      	add	r3, r2
 80094e2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            memcpy(file_buffer + i, divider,1);
 80094e6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80094ea:	4a0f      	ldr	r2, [pc, #60]	; (8009528 <scan_dir+0xdc>)
 80094ec:	4413      	add	r3, r2
 80094ee:	4a0f      	ldr	r2, [pc, #60]	; (800952c <scan_dir+0xe0>)
 80094f0:	7812      	ldrb	r2, [r2, #0]
 80094f2:	701a      	strb	r2, [r3, #0]
            i++;
 80094f4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80094f8:	3301      	adds	r3, #1
 80094fa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        	fr = f_readdir(&dir, &file_info);
 80094fe:	e7ca      	b.n	8009496 <scan_dir+0x4a>
        }
        f_closedir(&dir);
 8009500:	f107 0308 	add.w	r3, r7, #8
 8009504:	4618      	mov	r0, r3
 8009506:	f7fd f9fc 	bl	8006902 <f_closedir>
    }

    return i;
 800950a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
}
 800950e:	4618      	mov	r0, r3
 8009510:	3760      	adds	r7, #96	; 0x60
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	080198f8 	.word	0x080198f8
 800951c:	200000d4 	.word	0x200000d4
 8009520:	20000320 	.word	0x20000320
 8009524:	2000033a 	.word	0x2000033a
 8009528:	20000708 	.word	0x20000708
 800952c:	20000010 	.word	0x20000010

08009530 <delete_file>:
	f_mount(&FatFs, "", 0);
	fr = f_stat(path, &file_info);
	return fr;
}
uint16_t delete_file(char * path)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
	FRESULT fr;
	fr = f_mount(&FatFs, "", 0);
 8009538:	2200      	movs	r2, #0
 800953a:	490a      	ldr	r1, [pc, #40]	; (8009564 <delete_file+0x34>)
 800953c:	480a      	ldr	r0, [pc, #40]	; (8009568 <delete_file+0x38>)
 800953e:	f7fb ffeb 	bl	8005518 <f_mount>
 8009542:	4603      	mov	r3, r0
 8009544:	73fb      	strb	r3, [r7, #15]
	if(fr == FR_OK)
 8009546:	7bfb      	ldrb	r3, [r7, #15]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d104      	bne.n	8009556 <delete_file+0x26>
		{
			fr = f_unlink(path);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f7fd fa42 	bl	80069d6 <f_unlink>
 8009552:	4603      	mov	r3, r0
 8009554:	73fb      	strb	r3, [r7, #15]
		}
	return fr;
 8009556:	7bfb      	ldrb	r3, [r7, #15]
 8009558:	b29b      	uxth	r3, r3
}
 800955a:	4618      	mov	r0, r3
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	080198a0 	.word	0x080198a0
 8009568:	200000d4 	.word	0x200000d4

0800956c <delete_directory>:

uint16_t delete_directory()
{
 800956c:	b580      	push	{r7, lr}
 800956e:	f5ad 7d60 	sub.w	sp, sp, #896	; 0x380
 8009572:	af02      	add	r7, sp, #8
	/*static FRESULT fr;
	if (fr != FR_OK) return 1;
	fr = f_unlink(path);
	return fr;*/
	FILINFO fno;
	uint16_t it = find_end_of_msg();
 8009574:	f7ff fb4c 	bl	8008c10 <find_end_of_msg>
 8009578:	4603      	mov	r3, r0
 800957a:	f8a7 3376 	strh.w	r3, [r7, #886]	; 0x376
		memset(file_buffer, 0, sizeof(file_buffer));
 800957e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009582:	2100      	movs	r1, #0
 8009584:	481f      	ldr	r0, [pc, #124]	; (8009604 <delete_directory+0x98>)
 8009586:	f00f f9f3 	bl	8018970 <memset>
		memcpy(file_buffer, msg_buffer + header_with_usrname, it);
 800958a:	4b1f      	ldr	r3, [pc, #124]	; (8009608 <delete_directory+0x9c>)
 800958c:	881b      	ldrh	r3, [r3, #0]
 800958e:	461a      	mov	r2, r3
 8009590:	4b1e      	ldr	r3, [pc, #120]	; (800960c <delete_directory+0xa0>)
 8009592:	4413      	add	r3, r2
 8009594:	f8b7 2376 	ldrh.w	r2, [r7, #886]	; 0x376
 8009598:	4619      	mov	r1, r3
 800959a:	481a      	ldr	r0, [pc, #104]	; (8009604 <delete_directory+0x98>)
 800959c:	f00f f9dd 	bl	801895a <memcpy>
		memset(msg_buffer, 0, sizeof(msg_buffer));
 80095a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80095a4:	2100      	movs	r1, #0
 80095a6:	4819      	ldr	r0, [pc, #100]	; (800960c <delete_directory+0xa0>)
 80095a8:	f00f f9e2 	bl	8018970 <memset>
	FRESULT fr;
	FATFS fs;
	f_mount(&fs, "" ,0);
 80095ac:	1d3b      	adds	r3, r7, #4
 80095ae:	2200      	movs	r2, #0
 80095b0:	4917      	ldr	r1, [pc, #92]	; (8009610 <delete_directory+0xa4>)
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7fb ffb0 	bl	8005518 <f_mount>
	fr = delete_node(&file_buffer, sizeof(file_buffer), &fno);
 80095b8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80095bc:	461a      	mov	r2, r3
 80095be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80095c2:	4810      	ldr	r0, [pc, #64]	; (8009604 <delete_directory+0x98>)
 80095c4:	f000 f82a 	bl	800961c <delete_node>
 80095c8:	4603      	mov	r3, r0
 80095ca:	f887 3375 	strb.w	r3, [r7, #885]	; 0x375
	if (fr == FR_OK)
 80095ce:	f897 3375 	ldrb.w	r3, [r7, #885]	; 0x375
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d108      	bne.n	80095e8 <delete_directory+0x7c>
	{
		prepare_response(operation, RESP_OK, id, 0, 0);
 80095d6:	2300      	movs	r3, #0
 80095d8:	9300      	str	r3, [sp, #0]
 80095da:	2300      	movs	r3, #0
 80095dc:	4a0d      	ldr	r2, [pc, #52]	; (8009614 <delete_directory+0xa8>)
 80095de:	2100      	movs	r1, #0
 80095e0:	480d      	ldr	r0, [pc, #52]	; (8009618 <delete_directory+0xac>)
 80095e2:	f7ff fb43 	bl	8008c6c <prepare_response>
 80095e6:	e007      	b.n	80095f8 <delete_directory+0x8c>
	}
	else
	{
		prepare_response(operation, RESP_ERR, id, 0, 0);
 80095e8:	2300      	movs	r3, #0
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	2300      	movs	r3, #0
 80095ee:	4a09      	ldr	r2, [pc, #36]	; (8009614 <delete_directory+0xa8>)
 80095f0:	2101      	movs	r1, #1
 80095f2:	4809      	ldr	r0, [pc, #36]	; (8009618 <delete_directory+0xac>)
 80095f4:	f7ff fb3a 	bl	8008c6c <prepare_response>
	}


}
 80095f8:	bf00      	nop
 80095fa:	4618      	mov	r0, r3
 80095fc:	f507 775e 	add.w	r7, r7, #888	; 0x378
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}
 8009604:	20000708 	.word	0x20000708
 8009608:	20000014 	.word	0x20000014
 800960c:	20000b10 	.word	0x20000b10
 8009610:	080198a0 	.word	0x080198a0
 8009614:	20001010 	.word	0x20001010
 8009618:	20001014 	.word	0x20001014

0800961c <delete_node>:
FRESULT delete_node (
	    TCHAR* path,
	    UINT sz_buff,
	    FILINFO* fno
	)
	{
 800961c:	b580      	push	{r7, lr}
 800961e:	b09c      	sub	sp, #112	; 0x70
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	607a      	str	r2, [r7, #4]
	    UINT i, j;
	    FRESULT fr;
	    DIR dir;


	    fr = f_opendir(&dir, path);
 8009628:	f107 0310 	add.w	r3, r7, #16
 800962c:	68f9      	ldr	r1, [r7, #12]
 800962e:	4618      	mov	r0, r3
 8009630:	f7fd f8dc 	bl	80067ec <f_opendir>
 8009634:	4603      	mov	r3, r0
 8009636:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	    if (fr != FR_OK) return fr;
 800963a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800963e:	2b00      	cmp	r3, #0
 8009640:	d002      	beq.n	8009648 <delete_node+0x2c>
 8009642:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009646:	e076      	b.n	8009736 <delete_node+0x11a>

	    for (i = 0; path[i]; i++) ;
 8009648:	2300      	movs	r3, #0
 800964a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800964c:	e002      	b.n	8009654 <delete_node+0x38>
 800964e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009650:	3301      	adds	r3, #1
 8009652:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009658:	4413      	add	r3, r2
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1f6      	bne.n	800964e <delete_node+0x32>
	    path[i++] = _T('/');
 8009660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009662:	1c5a      	adds	r2, r3, #1
 8009664:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	4413      	add	r3, r2
 800966a:	222f      	movs	r2, #47	; 0x2f
 800966c:	701a      	strb	r2, [r3, #0]

	    for (;;) {
	        fr = f_readdir(&dir, fno);
 800966e:	f107 0310 	add.w	r3, r7, #16
 8009672:	6879      	ldr	r1, [r7, #4]
 8009674:	4618      	mov	r0, r3
 8009676:	f7fd f95c 	bl	8006932 <f_readdir>
 800967a:	4603      	mov	r3, r0
 800967c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	        if (fr != FR_OK || !fno->fname[0]) break;
 8009680:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009684:	2b00      	cmp	r3, #0
 8009686:	d13d      	bne.n	8009704 <delete_node+0xe8>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	7e9b      	ldrb	r3, [r3, #26]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d039      	beq.n	8009704 <delete_node+0xe8>
	        j = 0;
 8009690:	2300      	movs	r3, #0
 8009692:	66bb      	str	r3, [r7, #104]	; 0x68
	        do {
	            if (i + j >= sz_buff) {
 8009694:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009696:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009698:	4413      	add	r3, r2
 800969a:	68ba      	ldr	r2, [r7, #8]
 800969c:	429a      	cmp	r2, r3
 800969e:	d803      	bhi.n	80096a8 <delete_node+0x8c>
	                fr = 100; break;
 80096a0:	2364      	movs	r3, #100	; 0x64
 80096a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80096a6:	e012      	b.n	80096ce <delete_node+0xb2>
	            }
	            path[i + j] = fno->fname[j];
 80096a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80096aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096ac:	4413      	add	r3, r2
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	4413      	add	r3, r2
 80096b2:	6879      	ldr	r1, [r7, #4]
 80096b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80096b6:	440a      	add	r2, r1
 80096b8:	321a      	adds	r2, #26
 80096ba:	7812      	ldrb	r2, [r2, #0]
 80096bc:	701a      	strb	r2, [r3, #0]
	        } while (fno->fname[j++]);
 80096be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096c0:	1c5a      	adds	r2, r3, #1
 80096c2:	66ba      	str	r2, [r7, #104]	; 0x68
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	4413      	add	r3, r2
 80096c8:	7e9b      	ldrb	r3, [r3, #26]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d1e2      	bne.n	8009694 <delete_node+0x78>
	        if (fno->fattrib & AM_DIR) {
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	7b1b      	ldrb	r3, [r3, #12]
 80096d2:	f003 0310 	and.w	r3, r3, #16
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d008      	beq.n	80096ec <delete_node+0xd0>
	            fr = delete_node(path, sz_buff, fno);
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	68b9      	ldr	r1, [r7, #8]
 80096de:	68f8      	ldr	r0, [r7, #12]
 80096e0:	f7ff ff9c 	bl	800961c <delete_node>
 80096e4:	4603      	mov	r3, r0
 80096e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80096ea:	e005      	b.n	80096f8 <delete_node+0xdc>
	        } else {
	            fr = f_unlink(path);
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f7fd f972 	bl	80069d6 <f_unlink>
 80096f2:	4603      	mov	r3, r0
 80096f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	        }
	        if (fr != FR_OK) break;
 80096f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d100      	bne.n	8009702 <delete_node+0xe6>
	        fr = f_readdir(&dir, fno);
 8009700:	e7b5      	b.n	800966e <delete_node+0x52>
	        if (fr != FR_OK) break;
 8009702:	bf00      	nop
	    }

	    path[--i] = 0;
 8009704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009706:	3b01      	subs	r3, #1
 8009708:	66fb      	str	r3, [r7, #108]	; 0x6c
 800970a:	68fa      	ldr	r2, [r7, #12]
 800970c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800970e:	4413      	add	r3, r2
 8009710:	2200      	movs	r2, #0
 8009712:	701a      	strb	r2, [r3, #0]
	    f_closedir(&dir);
 8009714:	f107 0310 	add.w	r3, r7, #16
 8009718:	4618      	mov	r0, r3
 800971a:	f7fd f8f2 	bl	8006902 <f_closedir>

	    if (fr == FR_OK) fr = f_unlink(path);
 800971e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009722:	2b00      	cmp	r3, #0
 8009724:	d105      	bne.n	8009732 <delete_node+0x116>
 8009726:	68f8      	ldr	r0, [r7, #12]
 8009728:	f7fd f955 	bl	80069d6 <f_unlink>
 800972c:	4603      	mov	r3, r0
 800972e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	    return fr;
 8009732:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
	}
 8009736:	4618      	mov	r0, r3
 8009738:	3770      	adds	r7, #112	; 0x70
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
	...

08009740 <create_directory>:


uint16_t create_directory(char * path)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
	FRESULT fr;
	fr = f_mount(&FatFs, "", 0);
 8009748:	2200      	movs	r2, #0
 800974a:	490a      	ldr	r1, [pc, #40]	; (8009774 <create_directory+0x34>)
 800974c:	480a      	ldr	r0, [pc, #40]	; (8009778 <create_directory+0x38>)
 800974e:	f7fb fee3 	bl	8005518 <f_mount>
 8009752:	4603      	mov	r3, r0
 8009754:	73fb      	strb	r3, [r7, #15]
	if (fr == FR_OK)
 8009756:	7bfb      	ldrb	r3, [r7, #15]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d104      	bne.n	8009766 <create_directory+0x26>
	{
		fr = f_mkdir(path);
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f7fd fa2d 	bl	8006bbc <f_mkdir>
 8009762:	4603      	mov	r3, r0
 8009764:	73fb      	strb	r3, [r7, #15]
	}
	return fr;
 8009766:	7bfb      	ldrb	r3, [r7, #15]
 8009768:	b29b      	uxth	r3, r3
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	080198a0 	.word	0x080198a0
 8009778:	200000d4 	.word	0x200000d4

0800977c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800977c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80097b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009780:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009782:	e003      	b.n	800978c <LoopCopyDataInit>

08009784 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009784:	4b0c      	ldr	r3, [pc, #48]	; (80097b8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009786:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009788:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800978a:	3104      	adds	r1, #4

0800978c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800978c:	480b      	ldr	r0, [pc, #44]	; (80097bc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800978e:	4b0c      	ldr	r3, [pc, #48]	; (80097c0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009790:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009792:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009794:	d3f6      	bcc.n	8009784 <CopyDataInit>
  ldr  r2, =_sbss
 8009796:	4a0b      	ldr	r2, [pc, #44]	; (80097c4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009798:	e002      	b.n	80097a0 <LoopFillZerobss>

0800979a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800979a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800979c:	f842 3b04 	str.w	r3, [r2], #4

080097a0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80097a0:	4b09      	ldr	r3, [pc, #36]	; (80097c8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80097a2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80097a4:	d3f9      	bcc.n	800979a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80097a6:	f7fe f895 	bl	80078d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80097aa:	f00f f893 	bl	80188d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80097ae:	f7fd fcdd 	bl	800716c <main>
  bx  lr    
 80097b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80097b4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80097b8:	0802b650 	.word	0x0802b650
  ldr  r0, =_sdata
 80097bc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80097c0:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 80097c4:	200000a8 	.word	0x200000a8
  ldr  r3, = _ebss
 80097c8:	20007f14 	.word	0x20007f14

080097cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80097cc:	e7fe      	b.n	80097cc <ADC_IRQHandler>
	...

080097d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80097d4:	4b0e      	ldr	r3, [pc, #56]	; (8009810 <HAL_Init+0x40>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a0d      	ldr	r2, [pc, #52]	; (8009810 <HAL_Init+0x40>)
 80097da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80097de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80097e0:	4b0b      	ldr	r3, [pc, #44]	; (8009810 <HAL_Init+0x40>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a0a      	ldr	r2, [pc, #40]	; (8009810 <HAL_Init+0x40>)
 80097e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80097ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80097ec:	4b08      	ldr	r3, [pc, #32]	; (8009810 <HAL_Init+0x40>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a07      	ldr	r2, [pc, #28]	; (8009810 <HAL_Init+0x40>)
 80097f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80097f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80097f8:	2003      	movs	r0, #3
 80097fa:	f000 f94d 	bl	8009a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80097fe:	2000      	movs	r0, #0
 8009800:	f000 f808 	bl	8009814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009804:	f7fd fea4 	bl	8007550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	40023c00 	.word	0x40023c00

08009814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800981c:	4b12      	ldr	r3, [pc, #72]	; (8009868 <HAL_InitTick+0x54>)
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	4b12      	ldr	r3, [pc, #72]	; (800986c <HAL_InitTick+0x58>)
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	4619      	mov	r1, r3
 8009826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800982a:	fbb3 f3f1 	udiv	r3, r3, r1
 800982e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009832:	4618      	mov	r0, r3
 8009834:	f000 f965 	bl	8009b02 <HAL_SYSTICK_Config>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	e00e      	b.n	8009860 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2b0f      	cmp	r3, #15
 8009846:	d80a      	bhi.n	800985e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009848:	2200      	movs	r2, #0
 800984a:	6879      	ldr	r1, [r7, #4]
 800984c:	f04f 30ff 	mov.w	r0, #4294967295
 8009850:	f000 f92d 	bl	8009aae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009854:	4a06      	ldr	r2, [pc, #24]	; (8009870 <HAL_InitTick+0x5c>)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800985a:	2300      	movs	r3, #0
 800985c:	e000      	b.n	8009860 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800985e:	2301      	movs	r3, #1
}
 8009860:	4618      	mov	r0, r3
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	2000000c 	.word	0x2000000c
 800986c:	20000030 	.word	0x20000030
 8009870:	2000002c 	.word	0x2000002c

08009874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009874:	b480      	push	{r7}
 8009876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009878:	4b06      	ldr	r3, [pc, #24]	; (8009894 <HAL_IncTick+0x20>)
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	461a      	mov	r2, r3
 800987e:	4b06      	ldr	r3, [pc, #24]	; (8009898 <HAL_IncTick+0x24>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4413      	add	r3, r2
 8009884:	4a04      	ldr	r2, [pc, #16]	; (8009898 <HAL_IncTick+0x24>)
 8009886:	6013      	str	r3, [r2, #0]
}
 8009888:	bf00      	nop
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr
 8009892:	bf00      	nop
 8009894:	20000030 	.word	0x20000030
 8009898:	20001870 	.word	0x20001870

0800989c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800989c:	b480      	push	{r7}
 800989e:	af00      	add	r7, sp, #0
  return uwTick;
 80098a0:	4b03      	ldr	r3, [pc, #12]	; (80098b0 <HAL_GetTick+0x14>)
 80098a2:	681b      	ldr	r3, [r3, #0]
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr
 80098ae:	bf00      	nop
 80098b0:	20001870 	.word	0x20001870

080098b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80098bc:	f7ff ffee 	bl	800989c <HAL_GetTick>
 80098c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098cc:	d005      	beq.n	80098da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80098ce:	4b09      	ldr	r3, [pc, #36]	; (80098f4 <HAL_Delay+0x40>)
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	461a      	mov	r2, r3
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	4413      	add	r3, r2
 80098d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80098da:	bf00      	nop
 80098dc:	f7ff ffde 	bl	800989c <HAL_GetTick>
 80098e0:	4602      	mov	r2, r0
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	1ad3      	subs	r3, r2, r3
 80098e6:	68fa      	ldr	r2, [r7, #12]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d8f7      	bhi.n	80098dc <HAL_Delay+0x28>
  {
  }
}
 80098ec:	bf00      	nop
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	20000030 	.word	0x20000030

080098f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b085      	sub	sp, #20
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f003 0307 	and.w	r3, r3, #7
 8009906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009908:	4b0c      	ldr	r3, [pc, #48]	; (800993c <__NVIC_SetPriorityGrouping+0x44>)
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009914:	4013      	ands	r3, r2
 8009916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800992a:	4a04      	ldr	r2, [pc, #16]	; (800993c <__NVIC_SetPriorityGrouping+0x44>)
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	60d3      	str	r3, [r2, #12]
}
 8009930:	bf00      	nop
 8009932:	3714      	adds	r7, #20
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr
 800993c:	e000ed00 	.word	0xe000ed00

08009940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009940:	b480      	push	{r7}
 8009942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009944:	4b04      	ldr	r3, [pc, #16]	; (8009958 <__NVIC_GetPriorityGrouping+0x18>)
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	0a1b      	lsrs	r3, r3, #8
 800994a:	f003 0307 	and.w	r3, r3, #7
}
 800994e:	4618      	mov	r0, r3
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr
 8009958:	e000ed00 	.word	0xe000ed00

0800995c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	4603      	mov	r3, r0
 8009964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800996a:	2b00      	cmp	r3, #0
 800996c:	db0b      	blt.n	8009986 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800996e:	79fb      	ldrb	r3, [r7, #7]
 8009970:	f003 021f 	and.w	r2, r3, #31
 8009974:	4907      	ldr	r1, [pc, #28]	; (8009994 <__NVIC_EnableIRQ+0x38>)
 8009976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800997a:	095b      	lsrs	r3, r3, #5
 800997c:	2001      	movs	r0, #1
 800997e:	fa00 f202 	lsl.w	r2, r0, r2
 8009982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009986:	bf00      	nop
 8009988:	370c      	adds	r7, #12
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	e000e100 	.word	0xe000e100

08009998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	4603      	mov	r3, r0
 80099a0:	6039      	str	r1, [r7, #0]
 80099a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80099a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	db0a      	blt.n	80099c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	b2da      	uxtb	r2, r3
 80099b0:	490c      	ldr	r1, [pc, #48]	; (80099e4 <__NVIC_SetPriority+0x4c>)
 80099b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099b6:	0112      	lsls	r2, r2, #4
 80099b8:	b2d2      	uxtb	r2, r2
 80099ba:	440b      	add	r3, r1
 80099bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80099c0:	e00a      	b.n	80099d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	b2da      	uxtb	r2, r3
 80099c6:	4908      	ldr	r1, [pc, #32]	; (80099e8 <__NVIC_SetPriority+0x50>)
 80099c8:	79fb      	ldrb	r3, [r7, #7]
 80099ca:	f003 030f 	and.w	r3, r3, #15
 80099ce:	3b04      	subs	r3, #4
 80099d0:	0112      	lsls	r2, r2, #4
 80099d2:	b2d2      	uxtb	r2, r2
 80099d4:	440b      	add	r3, r1
 80099d6:	761a      	strb	r2, [r3, #24]
}
 80099d8:	bf00      	nop
 80099da:	370c      	adds	r7, #12
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr
 80099e4:	e000e100 	.word	0xe000e100
 80099e8:	e000ed00 	.word	0xe000ed00

080099ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b089      	sub	sp, #36	; 0x24
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f003 0307 	and.w	r3, r3, #7
 80099fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009a00:	69fb      	ldr	r3, [r7, #28]
 8009a02:	f1c3 0307 	rsb	r3, r3, #7
 8009a06:	2b04      	cmp	r3, #4
 8009a08:	bf28      	it	cs
 8009a0a:	2304      	movcs	r3, #4
 8009a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009a0e:	69fb      	ldr	r3, [r7, #28]
 8009a10:	3304      	adds	r3, #4
 8009a12:	2b06      	cmp	r3, #6
 8009a14:	d902      	bls.n	8009a1c <NVIC_EncodePriority+0x30>
 8009a16:	69fb      	ldr	r3, [r7, #28]
 8009a18:	3b03      	subs	r3, #3
 8009a1a:	e000      	b.n	8009a1e <NVIC_EncodePriority+0x32>
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009a20:	f04f 32ff 	mov.w	r2, #4294967295
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	fa02 f303 	lsl.w	r3, r2, r3
 8009a2a:	43da      	mvns	r2, r3
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	401a      	ands	r2, r3
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009a34:	f04f 31ff 	mov.w	r1, #4294967295
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8009a3e:	43d9      	mvns	r1, r3
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009a44:	4313      	orrs	r3, r2
         );
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3724      	adds	r7, #36	; 0x24
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr
	...

08009a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009a64:	d301      	bcc.n	8009a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009a66:	2301      	movs	r3, #1
 8009a68:	e00f      	b.n	8009a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009a6a:	4a0a      	ldr	r2, [pc, #40]	; (8009a94 <SysTick_Config+0x40>)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009a72:	210f      	movs	r1, #15
 8009a74:	f04f 30ff 	mov.w	r0, #4294967295
 8009a78:	f7ff ff8e 	bl	8009998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009a7c:	4b05      	ldr	r3, [pc, #20]	; (8009a94 <SysTick_Config+0x40>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009a82:	4b04      	ldr	r3, [pc, #16]	; (8009a94 <SysTick_Config+0x40>)
 8009a84:	2207      	movs	r2, #7
 8009a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3708      	adds	r7, #8
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	e000e010 	.word	0xe000e010

08009a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f7ff ff29 	bl	80098f8 <__NVIC_SetPriorityGrouping>
}
 8009aa6:	bf00      	nop
 8009aa8:	3708      	adds	r7, #8
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b086      	sub	sp, #24
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	60b9      	str	r1, [r7, #8]
 8009ab8:	607a      	str	r2, [r7, #4]
 8009aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009abc:	2300      	movs	r3, #0
 8009abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009ac0:	f7ff ff3e 	bl	8009940 <__NVIC_GetPriorityGrouping>
 8009ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	68b9      	ldr	r1, [r7, #8]
 8009aca:	6978      	ldr	r0, [r7, #20]
 8009acc:	f7ff ff8e 	bl	80099ec <NVIC_EncodePriority>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ad6:	4611      	mov	r1, r2
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7ff ff5d 	bl	8009998 <__NVIC_SetPriority>
}
 8009ade:	bf00      	nop
 8009ae0:	3718      	adds	r7, #24
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}

08009ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b082      	sub	sp, #8
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	4603      	mov	r3, r0
 8009aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7ff ff31 	bl	800995c <__NVIC_EnableIRQ>
}
 8009afa:	bf00      	nop
 8009afc:	3708      	adds	r7, #8
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b082      	sub	sp, #8
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7ff ffa2 	bl	8009a54 <SysTick_Config>
 8009b10:	4603      	mov	r3, r0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3708      	adds	r7, #8
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
	...

08009b1c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b088      	sub	sp, #32
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8009b24:	2300      	movs	r3, #0
 8009b26:	61fb      	str	r3, [r7, #28]
 8009b28:	2300      	movs	r3, #0
 8009b2a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8009b2c:	4baa      	ldr	r3, [pc, #680]	; (8009dd8 <HAL_ETH_Init+0x2bc>)
 8009b2e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8009b30:	2300      	movs	r3, #0
 8009b32:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8009b34:	2300      	movs	r3, #0
 8009b36:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d101      	bne.n	8009b42 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e185      	b.n	8009e4e <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d106      	bne.n	8009b5c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f002 fd96 	bl	800c688 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	60bb      	str	r3, [r7, #8]
 8009b60:	4b9e      	ldr	r3, [pc, #632]	; (8009ddc <HAL_ETH_Init+0x2c0>)
 8009b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b64:	4a9d      	ldr	r2, [pc, #628]	; (8009ddc <HAL_ETH_Init+0x2c0>)
 8009b66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b6a:	6453      	str	r3, [r2, #68]	; 0x44
 8009b6c:	4b9b      	ldr	r3, [pc, #620]	; (8009ddc <HAL_ETH_Init+0x2c0>)
 8009b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b74:	60bb      	str	r3, [r7, #8]
 8009b76:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8009b78:	4b99      	ldr	r3, [pc, #612]	; (8009de0 <HAL_ETH_Init+0x2c4>)
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	4a98      	ldr	r2, [pc, #608]	; (8009de0 <HAL_ETH_Init+0x2c4>)
 8009b7e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009b82:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8009b84:	4b96      	ldr	r3, [pc, #600]	; (8009de0 <HAL_ETH_Init+0x2c4>)
 8009b86:	685a      	ldr	r2, [r3, #4]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a1b      	ldr	r3, [r3, #32]
 8009b8c:	4994      	ldr	r1, [pc, #592]	; (8009de0 <HAL_ETH_Init+0x2c4>)
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f042 0201 	orr.w	r2, r2, #1
 8009ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ba8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8009baa:	f7ff fe77 	bl	800989c <HAL_GetTick>
 8009bae:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8009bb0:	e011      	b.n	8009bd6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8009bb2:	f7ff fe73 	bl	800989c <HAL_GetTick>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009bc0:	d909      	bls.n	8009bd6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2203      	movs	r2, #3
 8009bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8009bd2:	2303      	movs	r3, #3
 8009bd4:	e13b      	b.n	8009e4e <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f003 0301 	and.w	r3, r3, #1
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1e4      	bne.n	8009bb2 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	f023 031c 	bic.w	r3, r3, #28
 8009bf6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8009bf8:	f001 fd06 	bl	800b608 <HAL_RCC_GetHCLKFreq>
 8009bfc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	4a78      	ldr	r2, [pc, #480]	; (8009de4 <HAL_ETH_Init+0x2c8>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d908      	bls.n	8009c18 <HAL_ETH_Init+0xfc>
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	4a77      	ldr	r2, [pc, #476]	; (8009de8 <HAL_ETH_Init+0x2cc>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d804      	bhi.n	8009c18 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	f043 0308 	orr.w	r3, r3, #8
 8009c14:	61fb      	str	r3, [r7, #28]
 8009c16:	e027      	b.n	8009c68 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	4a73      	ldr	r2, [pc, #460]	; (8009de8 <HAL_ETH_Init+0x2cc>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d908      	bls.n	8009c32 <HAL_ETH_Init+0x116>
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	4a72      	ldr	r2, [pc, #456]	; (8009dec <HAL_ETH_Init+0x2d0>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d804      	bhi.n	8009c32 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	f043 030c 	orr.w	r3, r3, #12
 8009c2e:	61fb      	str	r3, [r7, #28]
 8009c30:	e01a      	b.n	8009c68 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	4a6d      	ldr	r2, [pc, #436]	; (8009dec <HAL_ETH_Init+0x2d0>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d903      	bls.n	8009c42 <HAL_ETH_Init+0x126>
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	4a6c      	ldr	r2, [pc, #432]	; (8009df0 <HAL_ETH_Init+0x2d4>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d911      	bls.n	8009c66 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	4a6a      	ldr	r2, [pc, #424]	; (8009df0 <HAL_ETH_Init+0x2d4>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d908      	bls.n	8009c5c <HAL_ETH_Init+0x140>
 8009c4a:	69bb      	ldr	r3, [r7, #24]
 8009c4c:	4a69      	ldr	r2, [pc, #420]	; (8009df4 <HAL_ETH_Init+0x2d8>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d804      	bhi.n	8009c5c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	f043 0304 	orr.w	r3, r3, #4
 8009c58:	61fb      	str	r3, [r7, #28]
 8009c5a:	e005      	b.n	8009c68 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	f043 0310 	orr.w	r3, r3, #16
 8009c62:	61fb      	str	r3, [r7, #28]
 8009c64:	e000      	b.n	8009c68 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8009c66:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	69fa      	ldr	r2, [r7, #28]
 8009c6e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8009c70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009c74:	2100      	movs	r1, #0
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 fb9a 	bl	800a3b0 <HAL_ETH_WritePHYRegister>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d00b      	beq.n	8009c9a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8009c82:	2301      	movs	r3, #1
 8009c84:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8009c86:	6939      	ldr	r1, [r7, #16]
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 fc27 	bl	800a4dc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2201      	movs	r2, #1
 8009c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	e0d9      	b.n	8009e4e <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8009c9a:	20ff      	movs	r0, #255	; 0xff
 8009c9c:	f7ff fe0a 	bl	80098b4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f000 80a7 	beq.w	8009df8 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8009caa:	f7ff fdf7 	bl	800989c <HAL_GetTick>
 8009cae:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8009cb0:	f107 030c 	add.w	r3, r7, #12
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	2101      	movs	r1, #1
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 fb11 	bl	800a2e0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8009cbe:	f7ff fded 	bl	800989c <HAL_GetTick>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	1ad3      	subs	r3, r2, r3
 8009cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d90f      	bls.n	8009cf0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8009cd4:	6939      	ldr	r1, [r7, #16]
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 fc00 	bl	800a4dc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8009cec:	2303      	movs	r3, #3
 8009cee:	e0ae      	b.n	8009e4e <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f003 0304 	and.w	r3, r3, #4
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d0da      	beq.n	8009cb0 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8009cfa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009cfe:	2100      	movs	r1, #0
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 fb55 	bl	800a3b0 <HAL_ETH_WritePHYRegister>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00b      	beq.n	8009d24 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8009d10:	6939      	ldr	r1, [r7, #16]
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 fbe2 	bl	800a4dc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8009d20:	2301      	movs	r3, #1
 8009d22:	e094      	b.n	8009e4e <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8009d24:	f7ff fdba 	bl	800989c <HAL_GetTick>
 8009d28:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8009d2a:	f107 030c 	add.w	r3, r7, #12
 8009d2e:	461a      	mov	r2, r3
 8009d30:	2101      	movs	r1, #1
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 fad4 	bl	800a2e0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8009d38:	f7ff fdb0 	bl	800989c <HAL_GetTick>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	1ad3      	subs	r3, r2, r3
 8009d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d90f      	bls.n	8009d6a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8009d4e:	6939      	ldr	r1, [r7, #16]
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 fbc3 	bl	800a4dc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	2200      	movs	r2, #0
 8009d62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8009d66:	2303      	movs	r3, #3
 8009d68:	e071      	b.n	8009e4e <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f003 0320 	and.w	r3, r3, #32
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d0da      	beq.n	8009d2a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8009d74:	f107 030c 	add.w	r3, r7, #12
 8009d78:	461a      	mov	r2, r3
 8009d7a:	211f      	movs	r1, #31
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 faaf 	bl	800a2e0 <HAL_ETH_ReadPHYRegister>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d00b      	beq.n	8009da0 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8009d8c:	6939      	ldr	r1, [r7, #16]
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fba4 	bl	800a4dc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2201      	movs	r2, #1
 8009d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e056      	b.n	8009e4e <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f003 0310 	and.w	r3, r3, #16
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d004      	beq.n	8009db4 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009db0:	60da      	str	r2, [r3, #12]
 8009db2:	e002      	b.n	8009dba <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f003 0304 	and.w	r3, r3, #4
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d003      	beq.n	8009dcc <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	609a      	str	r2, [r3, #8]
 8009dca:	e037      	b.n	8009e3c <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009dd2:	609a      	str	r2, [r3, #8]
 8009dd4:	e032      	b.n	8009e3c <HAL_ETH_Init+0x320>
 8009dd6:	bf00      	nop
 8009dd8:	03938700 	.word	0x03938700
 8009ddc:	40023800 	.word	0x40023800
 8009de0:	40013800 	.word	0x40013800
 8009de4:	01312cff 	.word	0x01312cff
 8009de8:	02160ebf 	.word	0x02160ebf
 8009dec:	039386ff 	.word	0x039386ff
 8009df0:	05f5e0ff 	.word	0x05f5e0ff
 8009df4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	08db      	lsrs	r3, r3, #3
 8009dfe:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	085b      	lsrs	r3, r3, #1
 8009e06:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	b29b      	uxth	r3, r3
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	2100      	movs	r1, #0
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 facd 	bl	800a3b0 <HAL_ETH_WritePHYRegister>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d00b      	beq.n	8009e34 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8009e20:	6939      	ldr	r1, [r7, #16]
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f000 fb5a 	bl	800a4dc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	e00c      	b.n	8009e4e <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8009e34:	f640 70ff 	movw	r0, #4095	; 0xfff
 8009e38:	f7ff fd3c 	bl	80098b4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8009e3c:	6939      	ldr	r1, [r7, #16]
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 fb4c 	bl	800a4dc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2201      	movs	r2, #1
 8009e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3720      	adds	r7, #32
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop

08009e58 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b087      	sub	sp, #28
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	607a      	str	r2, [r7, #4]
 8009e64:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8009e66:	2300      	movs	r3, #0
 8009e68:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d101      	bne.n	8009e78 <HAL_ETH_DMATxDescListInit+0x20>
 8009e74:	2302      	movs	r3, #2
 8009e76:	e052      	b.n	8009f1e <HAL_ETH_DMATxDescListInit+0xc6>
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2202      	movs	r2, #2
 8009e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	68ba      	ldr	r2, [r7, #8]
 8009e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8009e8e:	2300      	movs	r3, #0
 8009e90:	617b      	str	r3, [r7, #20]
 8009e92:	e030      	b.n	8009ef6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	015b      	lsls	r3, r3, #5
 8009e98:	68ba      	ldr	r2, [r7, #8]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009ea4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009eac:	fb02 f303 	mul.w	r3, r2, r3
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	4413      	add	r3, r2
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	69db      	ldr	r3, [r3, #28]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d105      	bne.n	8009ece <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	697a      	ldr	r2, [r7, #20]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d208      	bcs.n	8009eea <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	3301      	adds	r3, #1
 8009edc:	015b      	lsls	r3, r3, #5
 8009ede:	68ba      	ldr	r2, [r7, #8]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	60da      	str	r2, [r3, #12]
 8009ee8:	e002      	b.n	8009ef0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8009eea:	68ba      	ldr	r2, [r7, #8]
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	617b      	str	r3, [r7, #20]
 8009ef6:	697a      	ldr	r2, [r7, #20]
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d3ca      	bcc.n	8009e94 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f08:	3310      	adds	r3, #16
 8009f0a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8009f1c:	2300      	movs	r3, #0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	371c      	adds	r7, #28
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr

08009f2a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8009f2a:	b480      	push	{r7}
 8009f2c:	b087      	sub	sp, #28
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	60f8      	str	r0, [r7, #12]
 8009f32:	60b9      	str	r1, [r7, #8]
 8009f34:	607a      	str	r2, [r7, #4]
 8009f36:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d101      	bne.n	8009f4a <HAL_ETH_DMARxDescListInit+0x20>
 8009f46:	2302      	movs	r3, #2
 8009f48:	e056      	b.n	8009ff8 <HAL_ETH_DMARxDescListInit+0xce>
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2202      	movs	r2, #2
 8009f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	68ba      	ldr	r2, [r7, #8]
 8009f5e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8009f60:	2300      	movs	r3, #0
 8009f62:	617b      	str	r3, [r7, #20]
 8009f64:	e034      	b.n	8009fd0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	015b      	lsls	r3, r3, #5
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	4413      	add	r3, r2
 8009f6e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009f76:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8009f7e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009f86:	fb02 f303 	mul.w	r3, r2, r3
 8009f8a:	687a      	ldr	r2, [r7, #4]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	461a      	mov	r2, r3
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	699b      	ldr	r3, [r3, #24]
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d105      	bne.n	8009fa8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	3b01      	subs	r3, #1
 8009fac:	697a      	ldr	r2, [r7, #20]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d208      	bcs.n	8009fc4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	015b      	lsls	r3, r3, #5
 8009fb8:	68ba      	ldr	r2, [r7, #8]
 8009fba:	4413      	add	r3, r2
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	60da      	str	r2, [r3, #12]
 8009fc2:	e002      	b.n	8009fca <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8009fc4:	68ba      	ldr	r2, [r7, #8]
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	3301      	adds	r3, #1
 8009fce:	617b      	str	r3, [r7, #20]
 8009fd0:	697a      	ldr	r2, [r7, #20]
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d3c6      	bcc.n	8009f66 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	68ba      	ldr	r2, [r7, #8]
 8009fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fe2:	330c      	adds	r3, #12
 8009fe4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2201      	movs	r2, #1
 8009fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8009ff6:	2300      	movs	r3, #0
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	371c      	adds	r7, #28
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800a004:	b480      	push	{r7}
 800a006:	b087      	sub	sp, #28
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800a00e:	2300      	movs	r3, #0
 800a010:	617b      	str	r3, [r7, #20]
 800a012:	2300      	movs	r3, #0
 800a014:	60fb      	str	r3, [r7, #12]
 800a016:	2300      	movs	r3, #0
 800a018:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a020:	2b01      	cmp	r3, #1
 800a022:	d101      	bne.n	800a028 <HAL_ETH_TransmitFrame+0x24>
 800a024:	2302      	movs	r3, #2
 800a026:	e0cd      	b.n	800a1c4 <HAL_ETH_TransmitFrame+0x1c0>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2202      	movs	r2, #2
 800a034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d109      	bne.n	800a052 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2201      	movs	r2, #1
 800a042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800a04e:	2301      	movs	r3, #1
 800a050:	e0b8      	b.n	800a1c4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	da09      	bge.n	800a070 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2212      	movs	r2, #18
 800a060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800a06c:	2301      	movs	r3, #1
 800a06e:	e0a9      	b.n	800a1c4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a076:	4293      	cmp	r3, r2
 800a078:	d915      	bls.n	800a0a6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	4a54      	ldr	r2, [pc, #336]	; (800a1d0 <HAL_ETH_TransmitFrame+0x1cc>)
 800a07e:	fba2 2303 	umull	r2, r3, r2, r3
 800a082:	0a9b      	lsrs	r3, r3, #10
 800a084:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800a086:	683a      	ldr	r2, [r7, #0]
 800a088:	4b51      	ldr	r3, [pc, #324]	; (800a1d0 <HAL_ETH_TransmitFrame+0x1cc>)
 800a08a:	fba3 1302 	umull	r1, r3, r3, r2
 800a08e:	0a9b      	lsrs	r3, r3, #10
 800a090:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800a094:	fb01 f303 	mul.w	r3, r1, r3
 800a098:	1ad3      	subs	r3, r2, r3
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d005      	beq.n	800a0aa <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	617b      	str	r3, [r7, #20]
 800a0a4:	e001      	b.n	800a0aa <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d11c      	bne.n	800a0ea <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ba:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800a0be:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c4:	683a      	ldr	r2, [r7, #0]
 800a0c6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800a0ca:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800a0da:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	62da      	str	r2, [r3, #44]	; 0x2c
 800a0e8:	e04b      	b.n	800a182 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	613b      	str	r3, [r7, #16]
 800a0ee:	e044      	b.n	800a17a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0fa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a0fe:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d107      	bne.n	800a116 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a110:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a114:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a11e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	3b01      	subs	r3, #1
 800a124:	693a      	ldr	r2, [r7, #16]
 800a126:	429a      	cmp	r2, r3
 800a128:	d116      	bne.n	800a158 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a134:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800a138:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	4a25      	ldr	r2, [pc, #148]	; (800a1d4 <HAL_ETH_TransmitFrame+0x1d0>)
 800a13e:	fb02 f203 	mul.w	r2, r2, r3
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	4413      	add	r3, r2
 800a146:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a14a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800a156:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a162:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800a166:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a16c:	68db      	ldr	r3, [r3, #12]
 800a16e:	461a      	mov	r2, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	3301      	adds	r3, #1
 800a178:	613b      	str	r3, [r7, #16]
 800a17a:	693a      	ldr	r2, [r7, #16]
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d3b6      	bcc.n	800a0f0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a18a:	3314      	adds	r3, #20
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f003 0304 	and.w	r3, r3, #4
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00d      	beq.n	800a1b2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a19e:	3314      	adds	r3, #20
 800a1a0:	2204      	movs	r2, #4
 800a1a2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a1ac:	3304      	adds	r3, #4
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800a1c2:	2300      	movs	r3, #0
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	371c      	adds	r7, #28
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr
 800a1d0:	ac02b00b 	.word	0xac02b00b
 800a1d4:	fffffa0c 	.word	0xfffffa0c

0800a1d8 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b085      	sub	sp, #20
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d101      	bne.n	800a1f2 <HAL_ETH_GetReceivedFrame+0x1a>
 800a1ee:	2302      	movs	r3, #2
 800a1f0:	e070      	b.n	800a2d4 <HAL_ETH_GetReceivedFrame+0xfc>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2202      	movs	r2, #2
 800a1fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	db5a      	blt.n	800a2c2 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a216:	2b00      	cmp	r3, #0
 800a218:	d030      	beq.n	800a27c <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a21e:	1c5a      	adds	r2, r3, #1
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d103      	bne.n	800a234 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	0c1b      	lsrs	r3, r3, #16
 800a244:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a248:	3b04      	subs	r3, #4
 800a24a:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	68fa      	ldr	r2, [r7, #12]
 800a250:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a256:	689a      	ldr	r2, [r3, #8]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	461a      	mov	r2, r3
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2201      	movs	r2, #1
 800a26c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 800a278:	2300      	movs	r3, #0
 800a27a:	e02b      	b.n	800a2d4 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a286:	2b00      	cmp	r3, #0
 800a288:	d010      	beq.n	800a2ac <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2201      	movs	r2, #1
 800a29c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	629a      	str	r2, [r3, #40]	; 0x28
 800a2aa:	e00a      	b.n	800a2c2 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2b0:	1c5a      	adds	r2, r3, #1
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	461a      	mov	r2, r3
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2201      	movs	r2, #1
 800a2c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3714      	adds	r7, #20
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b086      	sub	sp, #24
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	607a      	str	r2, [r7, #4]
 800a2ec:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	2b82      	cmp	r3, #130	; 0x82
 800a300:	d101      	bne.n	800a306 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800a302:	2302      	movs	r3, #2
 800a304:	e050      	b.n	800a3a8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2282      	movs	r2, #130	; 0x82
 800a30a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	f003 031c 	and.w	r3, r3, #28
 800a31c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	8a1b      	ldrh	r3, [r3, #16]
 800a322:	02db      	lsls	r3, r3, #11
 800a324:	b29b      	uxth	r3, r3
 800a326:	697a      	ldr	r2, [r7, #20]
 800a328:	4313      	orrs	r3, r2
 800a32a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800a32c:	897b      	ldrh	r3, [r7, #10]
 800a32e:	019b      	lsls	r3, r3, #6
 800a330:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800a334:	697a      	ldr	r2, [r7, #20]
 800a336:	4313      	orrs	r3, r2
 800a338:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	f023 0302 	bic.w	r3, r3, #2
 800a340:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	f043 0301 	orr.w	r3, r3, #1
 800a348:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	697a      	ldr	r2, [r7, #20]
 800a350:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800a352:	f7ff faa3 	bl	800989c <HAL_GetTick>
 800a356:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a358:	e015      	b.n	800a386 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800a35a:	f7ff fa9f 	bl	800989c <HAL_GetTick>
 800a35e:	4602      	mov	r2, r0
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	1ad3      	subs	r3, r2, r3
 800a364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a368:	d309      	bcc.n	800a37e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2201      	movs	r2, #1
 800a36e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2200      	movs	r2, #0
 800a376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800a37a:	2303      	movs	r3, #3
 800a37c:	e014      	b.n	800a3a8 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	691b      	ldr	r3, [r3, #16]
 800a384:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	f003 0301 	and.w	r3, r3, #1
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d1e4      	bne.n	800a35a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	695b      	ldr	r3, [r3, #20]
 800a396:	b29b      	uxth	r3, r3
 800a398:	461a      	mov	r2, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800a3a6:	2300      	movs	r3, #0
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3718      	adds	r7, #24
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b086      	sub	sp, #24
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	607a      	str	r2, [r7, #4]
 800a3bc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	2b42      	cmp	r3, #66	; 0x42
 800a3d0:	d101      	bne.n	800a3d6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800a3d2:	2302      	movs	r3, #2
 800a3d4:	e04e      	b.n	800a474 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2242      	movs	r2, #66	; 0x42
 800a3da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	691b      	ldr	r3, [r3, #16]
 800a3e4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	f003 031c 	and.w	r3, r3, #28
 800a3ec:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	8a1b      	ldrh	r3, [r3, #16]
 800a3f2:	02db      	lsls	r3, r3, #11
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800a3fc:	897b      	ldrh	r3, [r7, #10]
 800a3fe:	019b      	lsls	r3, r3, #6
 800a400:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800a404:	697a      	ldr	r2, [r7, #20]
 800a406:	4313      	orrs	r3, r2
 800a408:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	f043 0302 	orr.w	r3, r3, #2
 800a410:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	f043 0301 	orr.w	r3, r3, #1
 800a418:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	b29a      	uxth	r2, r3
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	697a      	ldr	r2, [r7, #20]
 800a42a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800a42c:	f7ff fa36 	bl	800989c <HAL_GetTick>
 800a430:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a432:	e015      	b.n	800a460 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800a434:	f7ff fa32 	bl	800989c <HAL_GetTick>
 800a438:	4602      	mov	r2, r0
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	1ad3      	subs	r3, r2, r3
 800a43e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a442:	d309      	bcc.n	800a458 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2201      	movs	r2, #1
 800a448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2200      	movs	r2, #0
 800a450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800a454:	2303      	movs	r3, #3
 800a456:	e00d      	b.n	800a474 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	691b      	ldr	r3, [r3, #16]
 800a45e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	f003 0301 	and.w	r3, r3, #1
 800a466:	2b00      	cmp	r3, #0
 800a468:	d1e4      	bne.n	800a434 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2201      	movs	r2, #1
 800a46e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800a472:	2300      	movs	r3, #0
}
 800a474:	4618      	mov	r0, r3
 800a476:	3718      	adds	r7, #24
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d101      	bne.n	800a492 <HAL_ETH_Start+0x16>
 800a48e:	2302      	movs	r3, #2
 800a490:	e01f      	b.n	800a4d2 <HAL_ETH_Start+0x56>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2201      	movs	r2, #1
 800a496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2202      	movs	r2, #2
 800a49e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 fa1c 	bl	800a8e0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 fa36 	bl	800a91a <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 fa80 	bl	800a9b4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 fa4d 	bl	800a954 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 fa62 	bl	800a984 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3708      	adds	r7, #8
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
	...

0800a4dc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b0b0      	sub	sp, #192	; 0xc0
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d007      	beq.n	800a502 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a4f8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a500:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800a502:	2300      	movs	r3, #0
 800a504:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800a506:	2300      	movs	r3, #0
 800a508:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800a50a:	2300      	movs	r3, #0
 800a50c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800a50e:	2300      	movs	r3, #0
 800a510:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800a512:	2300      	movs	r3, #0
 800a514:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800a516:	2300      	movs	r3, #0
 800a518:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	69db      	ldr	r3, [r3, #28]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d103      	bne.n	800a52a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800a522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a526:	663b      	str	r3, [r7, #96]	; 0x60
 800a528:	e001      	b.n	800a52e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800a52a:	2300      	movs	r3, #0
 800a52c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800a52e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a532:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800a534:	2300      	movs	r3, #0
 800a536:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800a538:	2300      	movs	r3, #0
 800a53a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800a53c:	2300      	movs	r3, #0
 800a53e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800a540:	2300      	movs	r3, #0
 800a542:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800a544:	2300      	movs	r3, #0
 800a546:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800a548:	2340      	movs	r3, #64	; 0x40
 800a54a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800a54c:	2300      	movs	r3, #0
 800a54e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800a552:	2300      	movs	r3, #0
 800a554:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800a558:	2300      	movs	r3, #0
 800a55a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800a55e:	2300      	movs	r3, #0
 800a560:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800a564:	2300      	movs	r3, #0
 800a566:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800a56a:	2300      	movs	r3, #0
 800a56c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800a570:	2300      	movs	r3, #0
 800a572:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 800a576:	2300      	movs	r3, #0
 800a578:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800a57c:	2380      	movs	r3, #128	; 0x80
 800a57e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800a582:	2300      	movs	r3, #0
 800a584:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800a588:	2300      	movs	r3, #0
 800a58a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800a58e:	2300      	movs	r3, #0
 800a590:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800a594:	2300      	movs	r3, #0
 800a596:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800a59a:	2300      	movs	r3, #0
 800a59c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800a5b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a5b4:	4bac      	ldr	r3, [pc, #688]	; (800a868 <ETH_MACDMAConfig+0x38c>)
 800a5b6:	4013      	ands	r3, r2
 800a5b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800a5bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800a5be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800a5c0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800a5c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800a5c4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800a5c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800a5c8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800a5ce:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800a5d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800a5d2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800a5d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800a5d6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800a5dc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800a5de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800a5e0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800a5e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800a5e4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800a5e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800a5e8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800a5ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800a5ec:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800a5ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800a5f0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800a5f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a604:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a610:	2001      	movs	r0, #1
 800a612:	f7ff f94f 	bl	80098b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a61e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800a620:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800a622:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800a624:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800a626:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800a628:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800a62a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800a62e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800a630:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800a634:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800a636:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800a63a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800a63c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800a640:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800a644:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800a64c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800a64e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800a65a:	2001      	movs	r0, #1
 800a65c:	f7ff f92a 	bl	80098b4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a668:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a672:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a67c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	699b      	ldr	r3, [r3, #24]
 800a684:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800a688:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a68c:	f64f 7341 	movw	r3, #65345	; 0xff41
 800a690:	4013      	ands	r3, r2
 800a692:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800a696:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a69a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800a69c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800a6a0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800a6a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800a6a6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800a6a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800a6ac:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800a6ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800a6b2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800a6b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800a6b8:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800a6ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a6cc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	699b      	ldr	r3, [r3, #24]
 800a6d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800a6d8:	2001      	movs	r0, #1
 800a6da:	f7ff f8eb 	bl	80098b4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a6e6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800a6e8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800a6ec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	430a      	orrs	r2, r1
 800a6f6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	69db      	ldr	r3, [r3, #28]
 800a6fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a702:	2001      	movs	r0, #1
 800a704:	f7ff f8d6 	bl	80098b4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a710:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800a712:	2300      	movs	r3, #0
 800a714:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800a716:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a71a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800a71c:	2300      	movs	r3, #0
 800a71e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800a720:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a724:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800a726:	2300      	movs	r3, #0
 800a728:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800a72a:	2300      	movs	r3, #0
 800a72c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800a72e:	2300      	movs	r3, #0
 800a730:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800a732:	2300      	movs	r3, #0
 800a734:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800a736:	2304      	movs	r3, #4
 800a738:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800a73a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a73e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800a740:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a744:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800a746:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a74a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800a74c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a750:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800a752:	2380      	movs	r3, #128	; 0x80
 800a754:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800a756:	2300      	movs	r3, #0
 800a758:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800a75a:	2300      	movs	r3, #0
 800a75c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a766:	3318      	adds	r3, #24
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800a76e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a772:	4b3e      	ldr	r3, [pc, #248]	; (800a86c <ETH_MACDMAConfig+0x390>)
 800a774:	4013      	ands	r3, r2
 800a776:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800a77a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800a77c:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800a77e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800a780:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800a782:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800a784:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800a786:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800a788:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800a78a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800a78c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800a78e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800a790:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800a792:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800a794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800a796:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800a798:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800a79a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800a79c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7ae:	3318      	adds	r3, #24
 800a7b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a7b4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7be:	3318      	adds	r3, #24
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a7c6:	2001      	movs	r0, #1
 800a7c8:	f7ff f874 	bl	80098b4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7d4:	3318      	adds	r3, #24
 800a7d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a7da:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800a7dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800a7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800a7e0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800a7e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800a7e4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800a7e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800a7e8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800a7ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800a7ec:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800a7ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7f0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800a7f2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800a7f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800a7f6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800a800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a804:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800a814:	2001      	movs	r0, #1
 800a816:	f7ff f84d 	bl	80098b4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a822:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a826:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	699b      	ldr	r3, [r3, #24]
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d10f      	bne.n	800a850 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a838:	331c      	adds	r3, #28
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a844:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a84c:	331c      	adds	r3, #28
 800a84e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	695b      	ldr	r3, [r3, #20]
 800a854:	461a      	mov	r2, r3
 800a856:	2100      	movs	r1, #0
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 f809 	bl	800a870 <ETH_MACAddressConfig>
}
 800a85e:	bf00      	nop
 800a860:	37c0      	adds	r7, #192	; 0xc0
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	ff20810f 	.word	0xff20810f
 800a86c:	f8de3f23 	.word	0xf8de3f23

0800a870 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800a870:	b480      	push	{r7}
 800a872:	b087      	sub	sp, #28
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	3305      	adds	r3, #5
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	021b      	lsls	r3, r3, #8
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	3204      	adds	r2, #4
 800a888:	7812      	ldrb	r2, [r2, #0]
 800a88a:	4313      	orrs	r3, r2
 800a88c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800a88e:	68ba      	ldr	r2, [r7, #8]
 800a890:	4b11      	ldr	r3, [pc, #68]	; (800a8d8 <ETH_MACAddressConfig+0x68>)
 800a892:	4413      	add	r3, r2
 800a894:	461a      	mov	r2, r3
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	3303      	adds	r3, #3
 800a89e:	781b      	ldrb	r3, [r3, #0]
 800a8a0:	061a      	lsls	r2, r3, #24
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	3302      	adds	r3, #2
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	041b      	lsls	r3, r3, #16
 800a8aa:	431a      	orrs	r2, r3
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	021b      	lsls	r3, r3, #8
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	7812      	ldrb	r2, [r2, #0]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800a8be:	68ba      	ldr	r2, [r7, #8]
 800a8c0:	4b06      	ldr	r3, [pc, #24]	; (800a8dc <ETH_MACAddressConfig+0x6c>)
 800a8c2:	4413      	add	r3, r2
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	6013      	str	r3, [r2, #0]
}
 800a8ca:	bf00      	nop
 800a8cc:	371c      	adds	r7, #28
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr
 800a8d6:	bf00      	nop
 800a8d8:	40028040 	.word	0x40028040
 800a8dc:	40028044 	.word	0x40028044

0800a8e0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f042 0208 	orr.w	r2, r2, #8
 800a8fa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800a904:	2001      	movs	r0, #1
 800a906:	f000 f87f 	bl	800aa08 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	601a      	str	r2, [r3, #0]
}
 800a912:	bf00      	nop
 800a914:	3710      	adds	r7, #16
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b084      	sub	sp, #16
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800a922:	2300      	movs	r3, #0
 800a924:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f042 0204 	orr.w	r2, r2, #4
 800a934:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800a93e:	2001      	movs	r0, #1
 800a940:	f000 f862 	bl	800aa08 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	601a      	str	r2, [r3, #0]
}
 800a94c:	bf00      	nop
 800a94e:	3710      	adds	r7, #16
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}

0800a954 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a964:	3318      	adds	r3, #24
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a974:	3318      	adds	r3, #24
 800a976:	601a      	str	r2, [r3, #0]
}
 800a978:	bf00      	nop
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a994:	3318      	adds	r3, #24
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f042 0202 	orr.w	r2, r2, #2
 800a9a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9a4:	3318      	adds	r3, #24
 800a9a6:	601a      	str	r2, [r3, #0]
}
 800a9a8:	bf00      	nop
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9c8:	3318      	adds	r3, #24
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a9d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9d8:	3318      	adds	r3, #24
 800a9da:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9e4:	3318      	adds	r3, #24
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800a9ea:	2001      	movs	r0, #1
 800a9ec:	f000 f80c 	bl	800aa08 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9fa:	3318      	adds	r3, #24
 800a9fc:	601a      	str	r2, [r3, #0]
}
 800a9fe:	bf00      	nop
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
	...

0800aa08 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800aa10:	4b0a      	ldr	r3, [pc, #40]	; (800aa3c <ETH_Delay+0x34>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a0a      	ldr	r2, [pc, #40]	; (800aa40 <ETH_Delay+0x38>)
 800aa16:	fba2 2303 	umull	r2, r3, r2, r3
 800aa1a:	0a5b      	lsrs	r3, r3, #9
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	fb02 f303 	mul.w	r3, r2, r3
 800aa22:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 800aa24:	bf00      	nop
  } 
  while (Delay --);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	1e5a      	subs	r2, r3, #1
 800aa2a:	60fa      	str	r2, [r7, #12]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d1f9      	bne.n	800aa24 <ETH_Delay+0x1c>
}
 800aa30:	bf00      	nop
 800aa32:	3714      	adds	r7, #20
 800aa34:	46bd      	mov	sp, r7
 800aa36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3a:	4770      	bx	lr
 800aa3c:	2000000c 	.word	0x2000000c
 800aa40:	10624dd3 	.word	0x10624dd3

0800aa44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b089      	sub	sp, #36	; 0x24
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800aa52:	2300      	movs	r3, #0
 800aa54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800aa56:	2300      	movs	r3, #0
 800aa58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	61fb      	str	r3, [r7, #28]
 800aa5e:	e16b      	b.n	800ad38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800aa60:	2201      	movs	r2, #1
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	fa02 f303 	lsl.w	r3, r2, r3
 800aa68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	697a      	ldr	r2, [r7, #20]
 800aa70:	4013      	ands	r3, r2
 800aa72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800aa74:	693a      	ldr	r2, [r7, #16]
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	f040 815a 	bne.w	800ad32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d00b      	beq.n	800aa9e <HAL_GPIO_Init+0x5a>
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	2b02      	cmp	r3, #2
 800aa8c:	d007      	beq.n	800aa9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800aa92:	2b11      	cmp	r3, #17
 800aa94:	d003      	beq.n	800aa9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	2b12      	cmp	r3, #18
 800aa9c:	d130      	bne.n	800ab00 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	005b      	lsls	r3, r3, #1
 800aaa8:	2203      	movs	r2, #3
 800aaaa:	fa02 f303 	lsl.w	r3, r2, r3
 800aaae:	43db      	mvns	r3, r3
 800aab0:	69ba      	ldr	r2, [r7, #24]
 800aab2:	4013      	ands	r3, r2
 800aab4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	68da      	ldr	r2, [r3, #12]
 800aaba:	69fb      	ldr	r3, [r7, #28]
 800aabc:	005b      	lsls	r3, r3, #1
 800aabe:	fa02 f303 	lsl.w	r3, r2, r3
 800aac2:	69ba      	ldr	r2, [r7, #24]
 800aac4:	4313      	orrs	r3, r2
 800aac6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	69ba      	ldr	r2, [r7, #24]
 800aacc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800aad4:	2201      	movs	r2, #1
 800aad6:	69fb      	ldr	r3, [r7, #28]
 800aad8:	fa02 f303 	lsl.w	r3, r2, r3
 800aadc:	43db      	mvns	r3, r3
 800aade:	69ba      	ldr	r2, [r7, #24]
 800aae0:	4013      	ands	r3, r2
 800aae2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	091b      	lsrs	r3, r3, #4
 800aaea:	f003 0201 	and.w	r2, r3, #1
 800aaee:	69fb      	ldr	r3, [r7, #28]
 800aaf0:	fa02 f303 	lsl.w	r3, r2, r3
 800aaf4:	69ba      	ldr	r2, [r7, #24]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	69ba      	ldr	r2, [r7, #24]
 800aafe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ab06:	69fb      	ldr	r3, [r7, #28]
 800ab08:	005b      	lsls	r3, r3, #1
 800ab0a:	2203      	movs	r2, #3
 800ab0c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab10:	43db      	mvns	r3, r3
 800ab12:	69ba      	ldr	r2, [r7, #24]
 800ab14:	4013      	ands	r3, r2
 800ab16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	689a      	ldr	r2, [r3, #8]
 800ab1c:	69fb      	ldr	r3, [r7, #28]
 800ab1e:	005b      	lsls	r3, r3, #1
 800ab20:	fa02 f303 	lsl.w	r3, r2, r3
 800ab24:	69ba      	ldr	r2, [r7, #24]
 800ab26:	4313      	orrs	r3, r2
 800ab28:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	69ba      	ldr	r2, [r7, #24]
 800ab2e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	2b02      	cmp	r3, #2
 800ab36:	d003      	beq.n	800ab40 <HAL_GPIO_Init+0xfc>
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	2b12      	cmp	r3, #18
 800ab3e:	d123      	bne.n	800ab88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	08da      	lsrs	r2, r3, #3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	3208      	adds	r2, #8
 800ab48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ab4e:	69fb      	ldr	r3, [r7, #28]
 800ab50:	f003 0307 	and.w	r3, r3, #7
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	220f      	movs	r2, #15
 800ab58:	fa02 f303 	lsl.w	r3, r2, r3
 800ab5c:	43db      	mvns	r3, r3
 800ab5e:	69ba      	ldr	r2, [r7, #24]
 800ab60:	4013      	ands	r3, r2
 800ab62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	691a      	ldr	r2, [r3, #16]
 800ab68:	69fb      	ldr	r3, [r7, #28]
 800ab6a:	f003 0307 	and.w	r3, r3, #7
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	fa02 f303 	lsl.w	r3, r2, r3
 800ab74:	69ba      	ldr	r2, [r7, #24]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	08da      	lsrs	r2, r3, #3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	3208      	adds	r2, #8
 800ab82:	69b9      	ldr	r1, [r7, #24]
 800ab84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	005b      	lsls	r3, r3, #1
 800ab92:	2203      	movs	r2, #3
 800ab94:	fa02 f303 	lsl.w	r3, r2, r3
 800ab98:	43db      	mvns	r3, r3
 800ab9a:	69ba      	ldr	r2, [r7, #24]
 800ab9c:	4013      	ands	r3, r2
 800ab9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	f003 0203 	and.w	r2, r3, #3
 800aba8:	69fb      	ldr	r3, [r7, #28]
 800abaa:	005b      	lsls	r3, r3, #1
 800abac:	fa02 f303 	lsl.w	r3, r2, r3
 800abb0:	69ba      	ldr	r2, [r7, #24]
 800abb2:	4313      	orrs	r3, r2
 800abb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	69ba      	ldr	r2, [r7, #24]
 800abba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f000 80b4 	beq.w	800ad32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800abca:	2300      	movs	r3, #0
 800abcc:	60fb      	str	r3, [r7, #12]
 800abce:	4b5f      	ldr	r3, [pc, #380]	; (800ad4c <HAL_GPIO_Init+0x308>)
 800abd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abd2:	4a5e      	ldr	r2, [pc, #376]	; (800ad4c <HAL_GPIO_Init+0x308>)
 800abd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800abd8:	6453      	str	r3, [r2, #68]	; 0x44
 800abda:	4b5c      	ldr	r3, [pc, #368]	; (800ad4c <HAL_GPIO_Init+0x308>)
 800abdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abe2:	60fb      	str	r3, [r7, #12]
 800abe4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800abe6:	4a5a      	ldr	r2, [pc, #360]	; (800ad50 <HAL_GPIO_Init+0x30c>)
 800abe8:	69fb      	ldr	r3, [r7, #28]
 800abea:	089b      	lsrs	r3, r3, #2
 800abec:	3302      	adds	r3, #2
 800abee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	f003 0303 	and.w	r3, r3, #3
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	220f      	movs	r2, #15
 800abfe:	fa02 f303 	lsl.w	r3, r2, r3
 800ac02:	43db      	mvns	r3, r3
 800ac04:	69ba      	ldr	r2, [r7, #24]
 800ac06:	4013      	ands	r3, r2
 800ac08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4a51      	ldr	r2, [pc, #324]	; (800ad54 <HAL_GPIO_Init+0x310>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d02b      	beq.n	800ac6a <HAL_GPIO_Init+0x226>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4a50      	ldr	r2, [pc, #320]	; (800ad58 <HAL_GPIO_Init+0x314>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d025      	beq.n	800ac66 <HAL_GPIO_Init+0x222>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4a4f      	ldr	r2, [pc, #316]	; (800ad5c <HAL_GPIO_Init+0x318>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d01f      	beq.n	800ac62 <HAL_GPIO_Init+0x21e>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4a4e      	ldr	r2, [pc, #312]	; (800ad60 <HAL_GPIO_Init+0x31c>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d019      	beq.n	800ac5e <HAL_GPIO_Init+0x21a>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4a4d      	ldr	r2, [pc, #308]	; (800ad64 <HAL_GPIO_Init+0x320>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d013      	beq.n	800ac5a <HAL_GPIO_Init+0x216>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	4a4c      	ldr	r2, [pc, #304]	; (800ad68 <HAL_GPIO_Init+0x324>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d00d      	beq.n	800ac56 <HAL_GPIO_Init+0x212>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	4a4b      	ldr	r2, [pc, #300]	; (800ad6c <HAL_GPIO_Init+0x328>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d007      	beq.n	800ac52 <HAL_GPIO_Init+0x20e>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	4a4a      	ldr	r2, [pc, #296]	; (800ad70 <HAL_GPIO_Init+0x32c>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d101      	bne.n	800ac4e <HAL_GPIO_Init+0x20a>
 800ac4a:	2307      	movs	r3, #7
 800ac4c:	e00e      	b.n	800ac6c <HAL_GPIO_Init+0x228>
 800ac4e:	2308      	movs	r3, #8
 800ac50:	e00c      	b.n	800ac6c <HAL_GPIO_Init+0x228>
 800ac52:	2306      	movs	r3, #6
 800ac54:	e00a      	b.n	800ac6c <HAL_GPIO_Init+0x228>
 800ac56:	2305      	movs	r3, #5
 800ac58:	e008      	b.n	800ac6c <HAL_GPIO_Init+0x228>
 800ac5a:	2304      	movs	r3, #4
 800ac5c:	e006      	b.n	800ac6c <HAL_GPIO_Init+0x228>
 800ac5e:	2303      	movs	r3, #3
 800ac60:	e004      	b.n	800ac6c <HAL_GPIO_Init+0x228>
 800ac62:	2302      	movs	r3, #2
 800ac64:	e002      	b.n	800ac6c <HAL_GPIO_Init+0x228>
 800ac66:	2301      	movs	r3, #1
 800ac68:	e000      	b.n	800ac6c <HAL_GPIO_Init+0x228>
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	69fa      	ldr	r2, [r7, #28]
 800ac6e:	f002 0203 	and.w	r2, r2, #3
 800ac72:	0092      	lsls	r2, r2, #2
 800ac74:	4093      	lsls	r3, r2
 800ac76:	69ba      	ldr	r2, [r7, #24]
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ac7c:	4934      	ldr	r1, [pc, #208]	; (800ad50 <HAL_GPIO_Init+0x30c>)
 800ac7e:	69fb      	ldr	r3, [r7, #28]
 800ac80:	089b      	lsrs	r3, r3, #2
 800ac82:	3302      	adds	r3, #2
 800ac84:	69ba      	ldr	r2, [r7, #24]
 800ac86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ac8a:	4b3a      	ldr	r3, [pc, #232]	; (800ad74 <HAL_GPIO_Init+0x330>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	43db      	mvns	r3, r3
 800ac94:	69ba      	ldr	r2, [r7, #24]
 800ac96:	4013      	ands	r3, r2
 800ac98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d003      	beq.n	800acae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800aca6:	69ba      	ldr	r2, [r7, #24]
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	4313      	orrs	r3, r2
 800acac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800acae:	4a31      	ldr	r2, [pc, #196]	; (800ad74 <HAL_GPIO_Init+0x330>)
 800acb0:	69bb      	ldr	r3, [r7, #24]
 800acb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800acb4:	4b2f      	ldr	r3, [pc, #188]	; (800ad74 <HAL_GPIO_Init+0x330>)
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	43db      	mvns	r3, r3
 800acbe:	69ba      	ldr	r2, [r7, #24]
 800acc0:	4013      	ands	r3, r2
 800acc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800accc:	2b00      	cmp	r3, #0
 800acce:	d003      	beq.n	800acd8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800acd0:	69ba      	ldr	r2, [r7, #24]
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	4313      	orrs	r3, r2
 800acd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800acd8:	4a26      	ldr	r2, [pc, #152]	; (800ad74 <HAL_GPIO_Init+0x330>)
 800acda:	69bb      	ldr	r3, [r7, #24]
 800acdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800acde:	4b25      	ldr	r3, [pc, #148]	; (800ad74 <HAL_GPIO_Init+0x330>)
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	43db      	mvns	r3, r3
 800ace8:	69ba      	ldr	r2, [r7, #24]
 800acea:	4013      	ands	r3, r2
 800acec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d003      	beq.n	800ad02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800acfa:	69ba      	ldr	r2, [r7, #24]
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	4313      	orrs	r3, r2
 800ad00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ad02:	4a1c      	ldr	r2, [pc, #112]	; (800ad74 <HAL_GPIO_Init+0x330>)
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ad08:	4b1a      	ldr	r3, [pc, #104]	; (800ad74 <HAL_GPIO_Init+0x330>)
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ad0e:	693b      	ldr	r3, [r7, #16]
 800ad10:	43db      	mvns	r3, r3
 800ad12:	69ba      	ldr	r2, [r7, #24]
 800ad14:	4013      	ands	r3, r2
 800ad16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d003      	beq.n	800ad2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800ad24:	69ba      	ldr	r2, [r7, #24]
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ad2c:	4a11      	ldr	r2, [pc, #68]	; (800ad74 <HAL_GPIO_Init+0x330>)
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	3301      	adds	r3, #1
 800ad36:	61fb      	str	r3, [r7, #28]
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	2b0f      	cmp	r3, #15
 800ad3c:	f67f ae90 	bls.w	800aa60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ad40:	bf00      	nop
 800ad42:	3724      	adds	r7, #36	; 0x24
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr
 800ad4c:	40023800 	.word	0x40023800
 800ad50:	40013800 	.word	0x40013800
 800ad54:	40020000 	.word	0x40020000
 800ad58:	40020400 	.word	0x40020400
 800ad5c:	40020800 	.word	0x40020800
 800ad60:	40020c00 	.word	0x40020c00
 800ad64:	40021000 	.word	0x40021000
 800ad68:	40021400 	.word	0x40021400
 800ad6c:	40021800 	.word	0x40021800
 800ad70:	40021c00 	.word	0x40021c00
 800ad74:	40013c00 	.word	0x40013c00

0800ad78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b083      	sub	sp, #12
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	460b      	mov	r3, r1
 800ad82:	807b      	strh	r3, [r7, #2]
 800ad84:	4613      	mov	r3, r2
 800ad86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ad88:	787b      	ldrb	r3, [r7, #1]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d003      	beq.n	800ad96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ad8e:	887a      	ldrh	r2, [r7, #2]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ad94:	e003      	b.n	800ad9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ad96:	887b      	ldrh	r3, [r7, #2]
 800ad98:	041a      	lsls	r2, r3, #16
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	619a      	str	r2, [r3, #24]
}
 800ad9e:	bf00      	nop
 800ada0:	370c      	adds	r7, #12
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr
	...

0800adac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b086      	sub	sp, #24
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d101      	bne.n	800adbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800adba:	2301      	movs	r3, #1
 800adbc:	e25b      	b.n	800b276 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f003 0301 	and.w	r3, r3, #1
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d075      	beq.n	800aeb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800adca:	4ba3      	ldr	r3, [pc, #652]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	f003 030c 	and.w	r3, r3, #12
 800add2:	2b04      	cmp	r3, #4
 800add4:	d00c      	beq.n	800adf0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800add6:	4ba0      	ldr	r3, [pc, #640]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800adde:	2b08      	cmp	r3, #8
 800ade0:	d112      	bne.n	800ae08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ade2:	4b9d      	ldr	r3, [pc, #628]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800adea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800adee:	d10b      	bne.n	800ae08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800adf0:	4b99      	ldr	r3, [pc, #612]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d05b      	beq.n	800aeb4 <HAL_RCC_OscConfig+0x108>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d157      	bne.n	800aeb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ae04:	2301      	movs	r3, #1
 800ae06:	e236      	b.n	800b276 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae10:	d106      	bne.n	800ae20 <HAL_RCC_OscConfig+0x74>
 800ae12:	4b91      	ldr	r3, [pc, #580]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a90      	ldr	r2, [pc, #576]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800ae18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae1c:	6013      	str	r3, [r2, #0]
 800ae1e:	e01d      	b.n	800ae5c <HAL_RCC_OscConfig+0xb0>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ae28:	d10c      	bne.n	800ae44 <HAL_RCC_OscConfig+0x98>
 800ae2a:	4b8b      	ldr	r3, [pc, #556]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a8a      	ldr	r2, [pc, #552]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800ae30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ae34:	6013      	str	r3, [r2, #0]
 800ae36:	4b88      	ldr	r3, [pc, #544]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a87      	ldr	r2, [pc, #540]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800ae3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae40:	6013      	str	r3, [r2, #0]
 800ae42:	e00b      	b.n	800ae5c <HAL_RCC_OscConfig+0xb0>
 800ae44:	4b84      	ldr	r3, [pc, #528]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a83      	ldr	r2, [pc, #524]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800ae4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae4e:	6013      	str	r3, [r2, #0]
 800ae50:	4b81      	ldr	r3, [pc, #516]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4a80      	ldr	r2, [pc, #512]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800ae56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d013      	beq.n	800ae8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae64:	f7fe fd1a 	bl	800989c <HAL_GetTick>
 800ae68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae6a:	e008      	b.n	800ae7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ae6c:	f7fe fd16 	bl	800989c <HAL_GetTick>
 800ae70:	4602      	mov	r2, r0
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	1ad3      	subs	r3, r2, r3
 800ae76:	2b64      	cmp	r3, #100	; 0x64
 800ae78:	d901      	bls.n	800ae7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ae7a:	2303      	movs	r3, #3
 800ae7c:	e1fb      	b.n	800b276 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae7e:	4b76      	ldr	r3, [pc, #472]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d0f0      	beq.n	800ae6c <HAL_RCC_OscConfig+0xc0>
 800ae8a:	e014      	b.n	800aeb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae8c:	f7fe fd06 	bl	800989c <HAL_GetTick>
 800ae90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ae92:	e008      	b.n	800aea6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ae94:	f7fe fd02 	bl	800989c <HAL_GetTick>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	1ad3      	subs	r3, r2, r3
 800ae9e:	2b64      	cmp	r3, #100	; 0x64
 800aea0:	d901      	bls.n	800aea6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800aea2:	2303      	movs	r3, #3
 800aea4:	e1e7      	b.n	800b276 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aea6:	4b6c      	ldr	r3, [pc, #432]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d1f0      	bne.n	800ae94 <HAL_RCC_OscConfig+0xe8>
 800aeb2:	e000      	b.n	800aeb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aeb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f003 0302 	and.w	r3, r3, #2
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d063      	beq.n	800af8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800aec2:	4b65      	ldr	r3, [pc, #404]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	f003 030c 	and.w	r3, r3, #12
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d00b      	beq.n	800aee6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aece:	4b62      	ldr	r3, [pc, #392]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800aed0:	689b      	ldr	r3, [r3, #8]
 800aed2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800aed6:	2b08      	cmp	r3, #8
 800aed8:	d11c      	bne.n	800af14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800aeda:	4b5f      	ldr	r3, [pc, #380]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d116      	bne.n	800af14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800aee6:	4b5c      	ldr	r3, [pc, #368]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f003 0302 	and.w	r3, r3, #2
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d005      	beq.n	800aefe <HAL_RCC_OscConfig+0x152>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	d001      	beq.n	800aefe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800aefa:	2301      	movs	r3, #1
 800aefc:	e1bb      	b.n	800b276 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aefe:	4b56      	ldr	r3, [pc, #344]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	691b      	ldr	r3, [r3, #16]
 800af0a:	00db      	lsls	r3, r3, #3
 800af0c:	4952      	ldr	r1, [pc, #328]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800af0e:	4313      	orrs	r3, r2
 800af10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800af12:	e03a      	b.n	800af8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	68db      	ldr	r3, [r3, #12]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d020      	beq.n	800af5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800af1c:	4b4f      	ldr	r3, [pc, #316]	; (800b05c <HAL_RCC_OscConfig+0x2b0>)
 800af1e:	2201      	movs	r2, #1
 800af20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af22:	f7fe fcbb 	bl	800989c <HAL_GetTick>
 800af26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af28:	e008      	b.n	800af3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800af2a:	f7fe fcb7 	bl	800989c <HAL_GetTick>
 800af2e:	4602      	mov	r2, r0
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	1ad3      	subs	r3, r2, r3
 800af34:	2b02      	cmp	r3, #2
 800af36:	d901      	bls.n	800af3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800af38:	2303      	movs	r3, #3
 800af3a:	e19c      	b.n	800b276 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800af3c:	4b46      	ldr	r3, [pc, #280]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f003 0302 	and.w	r3, r3, #2
 800af44:	2b00      	cmp	r3, #0
 800af46:	d0f0      	beq.n	800af2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af48:	4b43      	ldr	r3, [pc, #268]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	691b      	ldr	r3, [r3, #16]
 800af54:	00db      	lsls	r3, r3, #3
 800af56:	4940      	ldr	r1, [pc, #256]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800af58:	4313      	orrs	r3, r2
 800af5a:	600b      	str	r3, [r1, #0]
 800af5c:	e015      	b.n	800af8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800af5e:	4b3f      	ldr	r3, [pc, #252]	; (800b05c <HAL_RCC_OscConfig+0x2b0>)
 800af60:	2200      	movs	r2, #0
 800af62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af64:	f7fe fc9a 	bl	800989c <HAL_GetTick>
 800af68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800af6a:	e008      	b.n	800af7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800af6c:	f7fe fc96 	bl	800989c <HAL_GetTick>
 800af70:	4602      	mov	r2, r0
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	1ad3      	subs	r3, r2, r3
 800af76:	2b02      	cmp	r3, #2
 800af78:	d901      	bls.n	800af7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800af7a:	2303      	movs	r3, #3
 800af7c:	e17b      	b.n	800b276 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800af7e:	4b36      	ldr	r3, [pc, #216]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f003 0302 	and.w	r3, r3, #2
 800af86:	2b00      	cmp	r3, #0
 800af88:	d1f0      	bne.n	800af6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f003 0308 	and.w	r3, r3, #8
 800af92:	2b00      	cmp	r3, #0
 800af94:	d030      	beq.n	800aff8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	695b      	ldr	r3, [r3, #20]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d016      	beq.n	800afcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800af9e:	4b30      	ldr	r3, [pc, #192]	; (800b060 <HAL_RCC_OscConfig+0x2b4>)
 800afa0:	2201      	movs	r2, #1
 800afa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800afa4:	f7fe fc7a 	bl	800989c <HAL_GetTick>
 800afa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800afaa:	e008      	b.n	800afbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800afac:	f7fe fc76 	bl	800989c <HAL_GetTick>
 800afb0:	4602      	mov	r2, r0
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	1ad3      	subs	r3, r2, r3
 800afb6:	2b02      	cmp	r3, #2
 800afb8:	d901      	bls.n	800afbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800afba:	2303      	movs	r3, #3
 800afbc:	e15b      	b.n	800b276 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800afbe:	4b26      	ldr	r3, [pc, #152]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800afc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afc2:	f003 0302 	and.w	r3, r3, #2
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d0f0      	beq.n	800afac <HAL_RCC_OscConfig+0x200>
 800afca:	e015      	b.n	800aff8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800afcc:	4b24      	ldr	r3, [pc, #144]	; (800b060 <HAL_RCC_OscConfig+0x2b4>)
 800afce:	2200      	movs	r2, #0
 800afd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800afd2:	f7fe fc63 	bl	800989c <HAL_GetTick>
 800afd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800afd8:	e008      	b.n	800afec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800afda:	f7fe fc5f 	bl	800989c <HAL_GetTick>
 800afde:	4602      	mov	r2, r0
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	1ad3      	subs	r3, r2, r3
 800afe4:	2b02      	cmp	r3, #2
 800afe6:	d901      	bls.n	800afec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800afe8:	2303      	movs	r3, #3
 800afea:	e144      	b.n	800b276 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800afec:	4b1a      	ldr	r3, [pc, #104]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800afee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aff0:	f003 0302 	and.w	r3, r3, #2
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d1f0      	bne.n	800afda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f003 0304 	and.w	r3, r3, #4
 800b000:	2b00      	cmp	r3, #0
 800b002:	f000 80a0 	beq.w	800b146 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b006:	2300      	movs	r3, #0
 800b008:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b00a:	4b13      	ldr	r3, [pc, #76]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800b00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b00e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b012:	2b00      	cmp	r3, #0
 800b014:	d10f      	bne.n	800b036 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b016:	2300      	movs	r3, #0
 800b018:	60bb      	str	r3, [r7, #8]
 800b01a:	4b0f      	ldr	r3, [pc, #60]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800b01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b01e:	4a0e      	ldr	r2, [pc, #56]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800b020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b024:	6413      	str	r3, [r2, #64]	; 0x40
 800b026:	4b0c      	ldr	r3, [pc, #48]	; (800b058 <HAL_RCC_OscConfig+0x2ac>)
 800b028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b02a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b02e:	60bb      	str	r3, [r7, #8]
 800b030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b032:	2301      	movs	r3, #1
 800b034:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b036:	4b0b      	ldr	r3, [pc, #44]	; (800b064 <HAL_RCC_OscConfig+0x2b8>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d121      	bne.n	800b086 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b042:	4b08      	ldr	r3, [pc, #32]	; (800b064 <HAL_RCC_OscConfig+0x2b8>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a07      	ldr	r2, [pc, #28]	; (800b064 <HAL_RCC_OscConfig+0x2b8>)
 800b048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b04c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b04e:	f7fe fc25 	bl	800989c <HAL_GetTick>
 800b052:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b054:	e011      	b.n	800b07a <HAL_RCC_OscConfig+0x2ce>
 800b056:	bf00      	nop
 800b058:	40023800 	.word	0x40023800
 800b05c:	42470000 	.word	0x42470000
 800b060:	42470e80 	.word	0x42470e80
 800b064:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b068:	f7fe fc18 	bl	800989c <HAL_GetTick>
 800b06c:	4602      	mov	r2, r0
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	1ad3      	subs	r3, r2, r3
 800b072:	2b02      	cmp	r3, #2
 800b074:	d901      	bls.n	800b07a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800b076:	2303      	movs	r3, #3
 800b078:	e0fd      	b.n	800b276 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b07a:	4b81      	ldr	r3, [pc, #516]	; (800b280 <HAL_RCC_OscConfig+0x4d4>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b082:	2b00      	cmp	r3, #0
 800b084:	d0f0      	beq.n	800b068 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d106      	bne.n	800b09c <HAL_RCC_OscConfig+0x2f0>
 800b08e:	4b7d      	ldr	r3, [pc, #500]	; (800b284 <HAL_RCC_OscConfig+0x4d8>)
 800b090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b092:	4a7c      	ldr	r2, [pc, #496]	; (800b284 <HAL_RCC_OscConfig+0x4d8>)
 800b094:	f043 0301 	orr.w	r3, r3, #1
 800b098:	6713      	str	r3, [r2, #112]	; 0x70
 800b09a:	e01c      	b.n	800b0d6 <HAL_RCC_OscConfig+0x32a>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	689b      	ldr	r3, [r3, #8]
 800b0a0:	2b05      	cmp	r3, #5
 800b0a2:	d10c      	bne.n	800b0be <HAL_RCC_OscConfig+0x312>
 800b0a4:	4b77      	ldr	r3, [pc, #476]	; (800b284 <HAL_RCC_OscConfig+0x4d8>)
 800b0a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0a8:	4a76      	ldr	r2, [pc, #472]	; (800b284 <HAL_RCC_OscConfig+0x4d8>)
 800b0aa:	f043 0304 	orr.w	r3, r3, #4
 800b0ae:	6713      	str	r3, [r2, #112]	; 0x70
 800b0b0:	4b74      	ldr	r3, [pc, #464]	; (800b284 <HAL_RCC_OscConfig+0x4d8>)
 800b0b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0b4:	4a73      	ldr	r2, [pc, #460]	; (800b284 <HAL_RCC_OscConfig+0x4d8>)
 800b0b6:	f043 0301 	orr.w	r3, r3, #1
 800b0ba:	6713      	str	r3, [r2, #112]	; 0x70
 800b0bc:	e00b      	b.n	800b0d6 <HAL_RCC_OscConfig+0x32a>
 800b0be:	4b71      	ldr	r3, [pc, #452]	; (800b284 <HAL_RCC_OscConfig+0x4d8>)
 800b0c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0c2:	4a70      	ldr	r2, [pc, #448]	; (800b284 <HAL_RCC_OscConfig+0x4d8>)
 800b0c4:	f023 0301 	bic.w	r3, r3, #1
 800b0c8:	6713      	str	r3, [r2, #112]	; 0x70
 800b0ca:	4b6e      	ldr	r3, [pc, #440]	; (800b284 <HAL_RCC_OscConfig+0x4d8>)
 800b0cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ce:	4a6d      	ldr	r2, [pc, #436]	; (800b284 <HAL_RCC_OscConfig+0x4d8>)
 800b0d0:	f023 0304 	bic.w	r3, r3, #4
 800b0d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d015      	beq.n	800b10a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0de:	f7fe fbdd 	bl	800989c <HAL_GetTick>
 800b0e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b0e4:	e00a      	b.n	800b0fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b0e6:	f7fe fbd9 	bl	800989c <HAL_GetTick>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	1ad3      	subs	r3, r2, r3
 800b0f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d901      	bls.n	800b0fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800b0f8:	2303      	movs	r3, #3
 800b0fa:	e0bc      	b.n	800b276 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b0fc:	4b61      	ldr	r3, [pc, #388]	; (800b284 <HAL_RCC_OscConfig+0x4d8>)
 800b0fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b100:	f003 0302 	and.w	r3, r3, #2
 800b104:	2b00      	cmp	r3, #0
 800b106:	d0ee      	beq.n	800b0e6 <HAL_RCC_OscConfig+0x33a>
 800b108:	e014      	b.n	800b134 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b10a:	f7fe fbc7 	bl	800989c <HAL_GetTick>
 800b10e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b110:	e00a      	b.n	800b128 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b112:	f7fe fbc3 	bl	800989c <HAL_GetTick>
 800b116:	4602      	mov	r2, r0
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	1ad3      	subs	r3, r2, r3
 800b11c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b120:	4293      	cmp	r3, r2
 800b122:	d901      	bls.n	800b128 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800b124:	2303      	movs	r3, #3
 800b126:	e0a6      	b.n	800b276 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b128:	4b56      	ldr	r3, [pc, #344]	; (800b284 <HAL_RCC_OscConfig+0x4d8>)
 800b12a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b12c:	f003 0302 	and.w	r3, r3, #2
 800b130:	2b00      	cmp	r3, #0
 800b132:	d1ee      	bne.n	800b112 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b134:	7dfb      	ldrb	r3, [r7, #23]
 800b136:	2b01      	cmp	r3, #1
 800b138:	d105      	bne.n	800b146 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b13a:	4b52      	ldr	r3, [pc, #328]	; (800b284 <HAL_RCC_OscConfig+0x4d8>)
 800b13c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b13e:	4a51      	ldr	r2, [pc, #324]	; (800b284 <HAL_RCC_OscConfig+0x4d8>)
 800b140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b144:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	699b      	ldr	r3, [r3, #24]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	f000 8092 	beq.w	800b274 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b150:	4b4c      	ldr	r3, [pc, #304]	; (800b284 <HAL_RCC_OscConfig+0x4d8>)
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	f003 030c 	and.w	r3, r3, #12
 800b158:	2b08      	cmp	r3, #8
 800b15a:	d05c      	beq.n	800b216 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	699b      	ldr	r3, [r3, #24]
 800b160:	2b02      	cmp	r3, #2
 800b162:	d141      	bne.n	800b1e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b164:	4b48      	ldr	r3, [pc, #288]	; (800b288 <HAL_RCC_OscConfig+0x4dc>)
 800b166:	2200      	movs	r2, #0
 800b168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b16a:	f7fe fb97 	bl	800989c <HAL_GetTick>
 800b16e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b170:	e008      	b.n	800b184 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b172:	f7fe fb93 	bl	800989c <HAL_GetTick>
 800b176:	4602      	mov	r2, r0
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	1ad3      	subs	r3, r2, r3
 800b17c:	2b02      	cmp	r3, #2
 800b17e:	d901      	bls.n	800b184 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b180:	2303      	movs	r3, #3
 800b182:	e078      	b.n	800b276 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b184:	4b3f      	ldr	r3, [pc, #252]	; (800b284 <HAL_RCC_OscConfig+0x4d8>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d1f0      	bne.n	800b172 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	69da      	ldr	r2, [r3, #28]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6a1b      	ldr	r3, [r3, #32]
 800b198:	431a      	orrs	r2, r3
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b19e:	019b      	lsls	r3, r3, #6
 800b1a0:	431a      	orrs	r2, r3
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1a6:	085b      	lsrs	r3, r3, #1
 800b1a8:	3b01      	subs	r3, #1
 800b1aa:	041b      	lsls	r3, r3, #16
 800b1ac:	431a      	orrs	r2, r3
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b2:	061b      	lsls	r3, r3, #24
 800b1b4:	4933      	ldr	r1, [pc, #204]	; (800b284 <HAL_RCC_OscConfig+0x4d8>)
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b1ba:	4b33      	ldr	r3, [pc, #204]	; (800b288 <HAL_RCC_OscConfig+0x4dc>)
 800b1bc:	2201      	movs	r2, #1
 800b1be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1c0:	f7fe fb6c 	bl	800989c <HAL_GetTick>
 800b1c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b1c6:	e008      	b.n	800b1da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b1c8:	f7fe fb68 	bl	800989c <HAL_GetTick>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	1ad3      	subs	r3, r2, r3
 800b1d2:	2b02      	cmp	r3, #2
 800b1d4:	d901      	bls.n	800b1da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b1d6:	2303      	movs	r3, #3
 800b1d8:	e04d      	b.n	800b276 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b1da:	4b2a      	ldr	r3, [pc, #168]	; (800b284 <HAL_RCC_OscConfig+0x4d8>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d0f0      	beq.n	800b1c8 <HAL_RCC_OscConfig+0x41c>
 800b1e6:	e045      	b.n	800b274 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b1e8:	4b27      	ldr	r3, [pc, #156]	; (800b288 <HAL_RCC_OscConfig+0x4dc>)
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1ee:	f7fe fb55 	bl	800989c <HAL_GetTick>
 800b1f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b1f4:	e008      	b.n	800b208 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b1f6:	f7fe fb51 	bl	800989c <HAL_GetTick>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	1ad3      	subs	r3, r2, r3
 800b200:	2b02      	cmp	r3, #2
 800b202:	d901      	bls.n	800b208 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b204:	2303      	movs	r3, #3
 800b206:	e036      	b.n	800b276 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b208:	4b1e      	ldr	r3, [pc, #120]	; (800b284 <HAL_RCC_OscConfig+0x4d8>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b210:	2b00      	cmp	r3, #0
 800b212:	d1f0      	bne.n	800b1f6 <HAL_RCC_OscConfig+0x44a>
 800b214:	e02e      	b.n	800b274 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	699b      	ldr	r3, [r3, #24]
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d101      	bne.n	800b222 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b21e:	2301      	movs	r3, #1
 800b220:	e029      	b.n	800b276 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b222:	4b18      	ldr	r3, [pc, #96]	; (800b284 <HAL_RCC_OscConfig+0x4d8>)
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	69db      	ldr	r3, [r3, #28]
 800b232:	429a      	cmp	r2, r3
 800b234:	d11c      	bne.n	800b270 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b240:	429a      	cmp	r2, r3
 800b242:	d115      	bne.n	800b270 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800b244:	68fa      	ldr	r2, [r7, #12]
 800b246:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b24a:	4013      	ands	r3, r2
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b250:	4293      	cmp	r3, r2
 800b252:	d10d      	bne.n	800b270 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800b25e:	429a      	cmp	r2, r3
 800b260:	d106      	bne.n	800b270 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d001      	beq.n	800b274 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800b270:	2301      	movs	r3, #1
 800b272:	e000      	b.n	800b276 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800b274:	2300      	movs	r3, #0
}
 800b276:	4618      	mov	r0, r3
 800b278:	3718      	adds	r7, #24
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	40007000 	.word	0x40007000
 800b284:	40023800 	.word	0x40023800
 800b288:	42470060 	.word	0x42470060

0800b28c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d101      	bne.n	800b2a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b29c:	2301      	movs	r3, #1
 800b29e:	e0cc      	b.n	800b43a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b2a0:	4b68      	ldr	r3, [pc, #416]	; (800b444 <HAL_RCC_ClockConfig+0x1b8>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f003 030f 	and.w	r3, r3, #15
 800b2a8:	683a      	ldr	r2, [r7, #0]
 800b2aa:	429a      	cmp	r2, r3
 800b2ac:	d90c      	bls.n	800b2c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2ae:	4b65      	ldr	r3, [pc, #404]	; (800b444 <HAL_RCC_ClockConfig+0x1b8>)
 800b2b0:	683a      	ldr	r2, [r7, #0]
 800b2b2:	b2d2      	uxtb	r2, r2
 800b2b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2b6:	4b63      	ldr	r3, [pc, #396]	; (800b444 <HAL_RCC_ClockConfig+0x1b8>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f003 030f 	and.w	r3, r3, #15
 800b2be:	683a      	ldr	r2, [r7, #0]
 800b2c0:	429a      	cmp	r2, r3
 800b2c2:	d001      	beq.n	800b2c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	e0b8      	b.n	800b43a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f003 0302 	and.w	r3, r3, #2
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d020      	beq.n	800b316 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f003 0304 	and.w	r3, r3, #4
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d005      	beq.n	800b2ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b2e0:	4b59      	ldr	r3, [pc, #356]	; (800b448 <HAL_RCC_ClockConfig+0x1bc>)
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	4a58      	ldr	r2, [pc, #352]	; (800b448 <HAL_RCC_ClockConfig+0x1bc>)
 800b2e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b2ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f003 0308 	and.w	r3, r3, #8
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d005      	beq.n	800b304 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b2f8:	4b53      	ldr	r3, [pc, #332]	; (800b448 <HAL_RCC_ClockConfig+0x1bc>)
 800b2fa:	689b      	ldr	r3, [r3, #8]
 800b2fc:	4a52      	ldr	r2, [pc, #328]	; (800b448 <HAL_RCC_ClockConfig+0x1bc>)
 800b2fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b302:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b304:	4b50      	ldr	r3, [pc, #320]	; (800b448 <HAL_RCC_ClockConfig+0x1bc>)
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	494d      	ldr	r1, [pc, #308]	; (800b448 <HAL_RCC_ClockConfig+0x1bc>)
 800b312:	4313      	orrs	r3, r2
 800b314:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f003 0301 	and.w	r3, r3, #1
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d044      	beq.n	800b3ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	2b01      	cmp	r3, #1
 800b328:	d107      	bne.n	800b33a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b32a:	4b47      	ldr	r3, [pc, #284]	; (800b448 <HAL_RCC_ClockConfig+0x1bc>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b332:	2b00      	cmp	r3, #0
 800b334:	d119      	bne.n	800b36a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b336:	2301      	movs	r3, #1
 800b338:	e07f      	b.n	800b43a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	2b02      	cmp	r3, #2
 800b340:	d003      	beq.n	800b34a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b346:	2b03      	cmp	r3, #3
 800b348:	d107      	bne.n	800b35a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b34a:	4b3f      	ldr	r3, [pc, #252]	; (800b448 <HAL_RCC_ClockConfig+0x1bc>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b352:	2b00      	cmp	r3, #0
 800b354:	d109      	bne.n	800b36a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b356:	2301      	movs	r3, #1
 800b358:	e06f      	b.n	800b43a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b35a:	4b3b      	ldr	r3, [pc, #236]	; (800b448 <HAL_RCC_ClockConfig+0x1bc>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f003 0302 	and.w	r3, r3, #2
 800b362:	2b00      	cmp	r3, #0
 800b364:	d101      	bne.n	800b36a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b366:	2301      	movs	r3, #1
 800b368:	e067      	b.n	800b43a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b36a:	4b37      	ldr	r3, [pc, #220]	; (800b448 <HAL_RCC_ClockConfig+0x1bc>)
 800b36c:	689b      	ldr	r3, [r3, #8]
 800b36e:	f023 0203 	bic.w	r2, r3, #3
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	4934      	ldr	r1, [pc, #208]	; (800b448 <HAL_RCC_ClockConfig+0x1bc>)
 800b378:	4313      	orrs	r3, r2
 800b37a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b37c:	f7fe fa8e 	bl	800989c <HAL_GetTick>
 800b380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b382:	e00a      	b.n	800b39a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b384:	f7fe fa8a 	bl	800989c <HAL_GetTick>
 800b388:	4602      	mov	r2, r0
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	1ad3      	subs	r3, r2, r3
 800b38e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b392:	4293      	cmp	r3, r2
 800b394:	d901      	bls.n	800b39a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b396:	2303      	movs	r3, #3
 800b398:	e04f      	b.n	800b43a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b39a:	4b2b      	ldr	r3, [pc, #172]	; (800b448 <HAL_RCC_ClockConfig+0x1bc>)
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	f003 020c 	and.w	r2, r3, #12
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	685b      	ldr	r3, [r3, #4]
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d1eb      	bne.n	800b384 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b3ac:	4b25      	ldr	r3, [pc, #148]	; (800b444 <HAL_RCC_ClockConfig+0x1b8>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f003 030f 	and.w	r3, r3, #15
 800b3b4:	683a      	ldr	r2, [r7, #0]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d20c      	bcs.n	800b3d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3ba:	4b22      	ldr	r3, [pc, #136]	; (800b444 <HAL_RCC_ClockConfig+0x1b8>)
 800b3bc:	683a      	ldr	r2, [r7, #0]
 800b3be:	b2d2      	uxtb	r2, r2
 800b3c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3c2:	4b20      	ldr	r3, [pc, #128]	; (800b444 <HAL_RCC_ClockConfig+0x1b8>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f003 030f 	and.w	r3, r3, #15
 800b3ca:	683a      	ldr	r2, [r7, #0]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d001      	beq.n	800b3d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e032      	b.n	800b43a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f003 0304 	and.w	r3, r3, #4
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d008      	beq.n	800b3f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b3e0:	4b19      	ldr	r3, [pc, #100]	; (800b448 <HAL_RCC_ClockConfig+0x1bc>)
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	68db      	ldr	r3, [r3, #12]
 800b3ec:	4916      	ldr	r1, [pc, #88]	; (800b448 <HAL_RCC_ClockConfig+0x1bc>)
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f003 0308 	and.w	r3, r3, #8
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d009      	beq.n	800b412 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b3fe:	4b12      	ldr	r3, [pc, #72]	; (800b448 <HAL_RCC_ClockConfig+0x1bc>)
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	691b      	ldr	r3, [r3, #16]
 800b40a:	00db      	lsls	r3, r3, #3
 800b40c:	490e      	ldr	r1, [pc, #56]	; (800b448 <HAL_RCC_ClockConfig+0x1bc>)
 800b40e:	4313      	orrs	r3, r2
 800b410:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b412:	f000 f821 	bl	800b458 <HAL_RCC_GetSysClockFreq>
 800b416:	4601      	mov	r1, r0
 800b418:	4b0b      	ldr	r3, [pc, #44]	; (800b448 <HAL_RCC_ClockConfig+0x1bc>)
 800b41a:	689b      	ldr	r3, [r3, #8]
 800b41c:	091b      	lsrs	r3, r3, #4
 800b41e:	f003 030f 	and.w	r3, r3, #15
 800b422:	4a0a      	ldr	r2, [pc, #40]	; (800b44c <HAL_RCC_ClockConfig+0x1c0>)
 800b424:	5cd3      	ldrb	r3, [r2, r3]
 800b426:	fa21 f303 	lsr.w	r3, r1, r3
 800b42a:	4a09      	ldr	r2, [pc, #36]	; (800b450 <HAL_RCC_ClockConfig+0x1c4>)
 800b42c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b42e:	4b09      	ldr	r3, [pc, #36]	; (800b454 <HAL_RCC_ClockConfig+0x1c8>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	4618      	mov	r0, r3
 800b434:	f7fe f9ee 	bl	8009814 <HAL_InitTick>

  return HAL_OK;
 800b438:	2300      	movs	r3, #0
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3710      	adds	r7, #16
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
 800b442:	bf00      	nop
 800b444:	40023c00 	.word	0x40023c00
 800b448:	40023800 	.word	0x40023800
 800b44c:	0802b4a0 	.word	0x0802b4a0
 800b450:	2000000c 	.word	0x2000000c
 800b454:	2000002c 	.word	0x2000002c

0800b458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b45e:	2300      	movs	r3, #0
 800b460:	607b      	str	r3, [r7, #4]
 800b462:	2300      	movs	r3, #0
 800b464:	60fb      	str	r3, [r7, #12]
 800b466:	2300      	movs	r3, #0
 800b468:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b46a:	2300      	movs	r3, #0
 800b46c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b46e:	4b63      	ldr	r3, [pc, #396]	; (800b5fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b470:	689b      	ldr	r3, [r3, #8]
 800b472:	f003 030c 	and.w	r3, r3, #12
 800b476:	2b04      	cmp	r3, #4
 800b478:	d007      	beq.n	800b48a <HAL_RCC_GetSysClockFreq+0x32>
 800b47a:	2b08      	cmp	r3, #8
 800b47c:	d008      	beq.n	800b490 <HAL_RCC_GetSysClockFreq+0x38>
 800b47e:	2b00      	cmp	r3, #0
 800b480:	f040 80b4 	bne.w	800b5ec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b484:	4b5e      	ldr	r3, [pc, #376]	; (800b600 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b486:	60bb      	str	r3, [r7, #8]
       break;
 800b488:	e0b3      	b.n	800b5f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b48a:	4b5e      	ldr	r3, [pc, #376]	; (800b604 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800b48c:	60bb      	str	r3, [r7, #8]
      break;
 800b48e:	e0b0      	b.n	800b5f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b490:	4b5a      	ldr	r3, [pc, #360]	; (800b5fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b498:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b49a:	4b58      	ldr	r3, [pc, #352]	; (800b5fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b49c:	685b      	ldr	r3, [r3, #4]
 800b49e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d04a      	beq.n	800b53c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b4a6:	4b55      	ldr	r3, [pc, #340]	; (800b5fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	099b      	lsrs	r3, r3, #6
 800b4ac:	f04f 0400 	mov.w	r4, #0
 800b4b0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b4b4:	f04f 0200 	mov.w	r2, #0
 800b4b8:	ea03 0501 	and.w	r5, r3, r1
 800b4bc:	ea04 0602 	and.w	r6, r4, r2
 800b4c0:	4629      	mov	r1, r5
 800b4c2:	4632      	mov	r2, r6
 800b4c4:	f04f 0300 	mov.w	r3, #0
 800b4c8:	f04f 0400 	mov.w	r4, #0
 800b4cc:	0154      	lsls	r4, r2, #5
 800b4ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b4d2:	014b      	lsls	r3, r1, #5
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	4622      	mov	r2, r4
 800b4d8:	1b49      	subs	r1, r1, r5
 800b4da:	eb62 0206 	sbc.w	r2, r2, r6
 800b4de:	f04f 0300 	mov.w	r3, #0
 800b4e2:	f04f 0400 	mov.w	r4, #0
 800b4e6:	0194      	lsls	r4, r2, #6
 800b4e8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b4ec:	018b      	lsls	r3, r1, #6
 800b4ee:	1a5b      	subs	r3, r3, r1
 800b4f0:	eb64 0402 	sbc.w	r4, r4, r2
 800b4f4:	f04f 0100 	mov.w	r1, #0
 800b4f8:	f04f 0200 	mov.w	r2, #0
 800b4fc:	00e2      	lsls	r2, r4, #3
 800b4fe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b502:	00d9      	lsls	r1, r3, #3
 800b504:	460b      	mov	r3, r1
 800b506:	4614      	mov	r4, r2
 800b508:	195b      	adds	r3, r3, r5
 800b50a:	eb44 0406 	adc.w	r4, r4, r6
 800b50e:	f04f 0100 	mov.w	r1, #0
 800b512:	f04f 0200 	mov.w	r2, #0
 800b516:	0262      	lsls	r2, r4, #9
 800b518:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b51c:	0259      	lsls	r1, r3, #9
 800b51e:	460b      	mov	r3, r1
 800b520:	4614      	mov	r4, r2
 800b522:	4618      	mov	r0, r3
 800b524:	4621      	mov	r1, r4
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f04f 0400 	mov.w	r4, #0
 800b52c:	461a      	mov	r2, r3
 800b52e:	4623      	mov	r3, r4
 800b530:	f7f4 feae 	bl	8000290 <__aeabi_uldivmod>
 800b534:	4603      	mov	r3, r0
 800b536:	460c      	mov	r4, r1
 800b538:	60fb      	str	r3, [r7, #12]
 800b53a:	e049      	b.n	800b5d0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b53c:	4b2f      	ldr	r3, [pc, #188]	; (800b5fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	099b      	lsrs	r3, r3, #6
 800b542:	f04f 0400 	mov.w	r4, #0
 800b546:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b54a:	f04f 0200 	mov.w	r2, #0
 800b54e:	ea03 0501 	and.w	r5, r3, r1
 800b552:	ea04 0602 	and.w	r6, r4, r2
 800b556:	4629      	mov	r1, r5
 800b558:	4632      	mov	r2, r6
 800b55a:	f04f 0300 	mov.w	r3, #0
 800b55e:	f04f 0400 	mov.w	r4, #0
 800b562:	0154      	lsls	r4, r2, #5
 800b564:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b568:	014b      	lsls	r3, r1, #5
 800b56a:	4619      	mov	r1, r3
 800b56c:	4622      	mov	r2, r4
 800b56e:	1b49      	subs	r1, r1, r5
 800b570:	eb62 0206 	sbc.w	r2, r2, r6
 800b574:	f04f 0300 	mov.w	r3, #0
 800b578:	f04f 0400 	mov.w	r4, #0
 800b57c:	0194      	lsls	r4, r2, #6
 800b57e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b582:	018b      	lsls	r3, r1, #6
 800b584:	1a5b      	subs	r3, r3, r1
 800b586:	eb64 0402 	sbc.w	r4, r4, r2
 800b58a:	f04f 0100 	mov.w	r1, #0
 800b58e:	f04f 0200 	mov.w	r2, #0
 800b592:	00e2      	lsls	r2, r4, #3
 800b594:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b598:	00d9      	lsls	r1, r3, #3
 800b59a:	460b      	mov	r3, r1
 800b59c:	4614      	mov	r4, r2
 800b59e:	195b      	adds	r3, r3, r5
 800b5a0:	eb44 0406 	adc.w	r4, r4, r6
 800b5a4:	f04f 0100 	mov.w	r1, #0
 800b5a8:	f04f 0200 	mov.w	r2, #0
 800b5ac:	02a2      	lsls	r2, r4, #10
 800b5ae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b5b2:	0299      	lsls	r1, r3, #10
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	4614      	mov	r4, r2
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	4621      	mov	r1, r4
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f04f 0400 	mov.w	r4, #0
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	4623      	mov	r3, r4
 800b5c6:	f7f4 fe63 	bl	8000290 <__aeabi_uldivmod>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	460c      	mov	r4, r1
 800b5ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b5d0:	4b0a      	ldr	r3, [pc, #40]	; (800b5fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	0c1b      	lsrs	r3, r3, #16
 800b5d6:	f003 0303 	and.w	r3, r3, #3
 800b5da:	3301      	adds	r3, #1
 800b5dc:	005b      	lsls	r3, r3, #1
 800b5de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b5e0:	68fa      	ldr	r2, [r7, #12]
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5e8:	60bb      	str	r3, [r7, #8]
      break;
 800b5ea:	e002      	b.n	800b5f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b5ec:	4b04      	ldr	r3, [pc, #16]	; (800b600 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800b5ee:	60bb      	str	r3, [r7, #8]
      break;
 800b5f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b5f2:	68bb      	ldr	r3, [r7, #8]
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3714      	adds	r7, #20
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5fc:	40023800 	.word	0x40023800
 800b600:	00f42400 	.word	0x00f42400
 800b604:	007a1200 	.word	0x007a1200

0800b608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b608:	b480      	push	{r7}
 800b60a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b60c:	4b03      	ldr	r3, [pc, #12]	; (800b61c <HAL_RCC_GetHCLKFreq+0x14>)
 800b60e:	681b      	ldr	r3, [r3, #0]
}
 800b610:	4618      	mov	r0, r3
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr
 800b61a:	bf00      	nop
 800b61c:	2000000c 	.word	0x2000000c

0800b620 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d101      	bne.n	800b632 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b62e:	2301      	movs	r3, #1
 800b630:	e056      	b.n	800b6e0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b63e:	b2db      	uxtb	r3, r3
 800b640:	2b00      	cmp	r3, #0
 800b642:	d106      	bne.n	800b652 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2200      	movs	r2, #0
 800b648:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f7fb ffa7 	bl	80075a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2202      	movs	r2, #2
 800b656:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b668:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	685a      	ldr	r2, [r3, #4]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	689b      	ldr	r3, [r3, #8]
 800b672:	431a      	orrs	r2, r3
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	431a      	orrs	r2, r3
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	691b      	ldr	r3, [r3, #16]
 800b67e:	431a      	orrs	r2, r3
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	695b      	ldr	r3, [r3, #20]
 800b684:	431a      	orrs	r2, r3
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	699b      	ldr	r3, [r3, #24]
 800b68a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b68e:	431a      	orrs	r2, r3
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	69db      	ldr	r3, [r3, #28]
 800b694:	431a      	orrs	r2, r3
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6a1b      	ldr	r3, [r3, #32]
 800b69a:	ea42 0103 	orr.w	r1, r2, r3
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	430a      	orrs	r2, r1
 800b6a8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	699b      	ldr	r3, [r3, #24]
 800b6ae:	0c1b      	lsrs	r3, r3, #16
 800b6b0:	f003 0104 	and.w	r1, r3, #4
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	430a      	orrs	r2, r1
 800b6be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	69da      	ldr	r2, [r3, #28]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b6ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2201      	movs	r2, #1
 800b6da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b6de:	2300      	movs	r3, #0
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3708      	adds	r7, #8
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b088      	sub	sp, #32
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	603b      	str	r3, [r7, #0]
 800b6f4:	4613      	mov	r3, r2
 800b6f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b702:	2b01      	cmp	r3, #1
 800b704:	d101      	bne.n	800b70a <HAL_SPI_Transmit+0x22>
 800b706:	2302      	movs	r3, #2
 800b708:	e11e      	b.n	800b948 <HAL_SPI_Transmit+0x260>
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	2201      	movs	r2, #1
 800b70e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b712:	f7fe f8c3 	bl	800989c <HAL_GetTick>
 800b716:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b718:	88fb      	ldrh	r3, [r7, #6]
 800b71a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b722:	b2db      	uxtb	r3, r3
 800b724:	2b01      	cmp	r3, #1
 800b726:	d002      	beq.n	800b72e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b728:	2302      	movs	r3, #2
 800b72a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b72c:	e103      	b.n	800b936 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d002      	beq.n	800b73a <HAL_SPI_Transmit+0x52>
 800b734:	88fb      	ldrh	r3, [r7, #6]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d102      	bne.n	800b740 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b73a:	2301      	movs	r3, #1
 800b73c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b73e:	e0fa      	b.n	800b936 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2203      	movs	r2, #3
 800b744:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2200      	movs	r2, #0
 800b74c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	68ba      	ldr	r2, [r7, #8]
 800b752:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	88fa      	ldrh	r2, [r7, #6]
 800b758:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	88fa      	ldrh	r2, [r7, #6]
 800b75e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2200      	movs	r2, #0
 800b764:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2200      	movs	r2, #0
 800b76a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2200      	movs	r2, #0
 800b770:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2200      	movs	r2, #0
 800b776:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2200      	movs	r2, #0
 800b77c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	689b      	ldr	r3, [r3, #8]
 800b782:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b786:	d107      	bne.n	800b798 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b796:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7a2:	2b40      	cmp	r3, #64	; 0x40
 800b7a4:	d007      	beq.n	800b7b6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b7b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7be:	d14b      	bne.n	800b858 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d002      	beq.n	800b7ce <HAL_SPI_Transmit+0xe6>
 800b7c8:	8afb      	ldrh	r3, [r7, #22]
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d13e      	bne.n	800b84c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7d2:	881a      	ldrh	r2, [r3, #0]
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7de:	1c9a      	adds	r2, r3, #2
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	3b01      	subs	r3, #1
 800b7ec:	b29a      	uxth	r2, r3
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b7f2:	e02b      	b.n	800b84c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	689b      	ldr	r3, [r3, #8]
 800b7fa:	f003 0302 	and.w	r3, r3, #2
 800b7fe:	2b02      	cmp	r3, #2
 800b800:	d112      	bne.n	800b828 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b806:	881a      	ldrh	r2, [r3, #0]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b812:	1c9a      	adds	r2, r3, #2
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	3b01      	subs	r3, #1
 800b820:	b29a      	uxth	r2, r3
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	86da      	strh	r2, [r3, #54]	; 0x36
 800b826:	e011      	b.n	800b84c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b828:	f7fe f838 	bl	800989c <HAL_GetTick>
 800b82c:	4602      	mov	r2, r0
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	1ad3      	subs	r3, r2, r3
 800b832:	683a      	ldr	r2, [r7, #0]
 800b834:	429a      	cmp	r2, r3
 800b836:	d803      	bhi.n	800b840 <HAL_SPI_Transmit+0x158>
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b83e:	d102      	bne.n	800b846 <HAL_SPI_Transmit+0x15e>
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d102      	bne.n	800b84c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800b846:	2303      	movs	r3, #3
 800b848:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b84a:	e074      	b.n	800b936 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b850:	b29b      	uxth	r3, r3
 800b852:	2b00      	cmp	r3, #0
 800b854:	d1ce      	bne.n	800b7f4 <HAL_SPI_Transmit+0x10c>
 800b856:	e04c      	b.n	800b8f2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d002      	beq.n	800b866 <HAL_SPI_Transmit+0x17e>
 800b860:	8afb      	ldrh	r3, [r7, #22]
 800b862:	2b01      	cmp	r3, #1
 800b864:	d140      	bne.n	800b8e8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	330c      	adds	r3, #12
 800b870:	7812      	ldrb	r2, [r2, #0]
 800b872:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b878:	1c5a      	adds	r2, r3, #1
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b882:	b29b      	uxth	r3, r3
 800b884:	3b01      	subs	r3, #1
 800b886:	b29a      	uxth	r2, r3
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b88c:	e02c      	b.n	800b8e8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	689b      	ldr	r3, [r3, #8]
 800b894:	f003 0302 	and.w	r3, r3, #2
 800b898:	2b02      	cmp	r3, #2
 800b89a:	d113      	bne.n	800b8c4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	330c      	adds	r3, #12
 800b8a6:	7812      	ldrb	r2, [r2, #0]
 800b8a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ae:	1c5a      	adds	r2, r3, #1
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	3b01      	subs	r3, #1
 800b8bc:	b29a      	uxth	r2, r3
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	86da      	strh	r2, [r3, #54]	; 0x36
 800b8c2:	e011      	b.n	800b8e8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b8c4:	f7fd ffea 	bl	800989c <HAL_GetTick>
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	69bb      	ldr	r3, [r7, #24]
 800b8cc:	1ad3      	subs	r3, r2, r3
 800b8ce:	683a      	ldr	r2, [r7, #0]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d803      	bhi.n	800b8dc <HAL_SPI_Transmit+0x1f4>
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8da:	d102      	bne.n	800b8e2 <HAL_SPI_Transmit+0x1fa>
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d102      	bne.n	800b8e8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800b8e2:	2303      	movs	r3, #3
 800b8e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b8e6:	e026      	b.n	800b936 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d1cd      	bne.n	800b88e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b8f2:	69ba      	ldr	r2, [r7, #24]
 800b8f4:	6839      	ldr	r1, [r7, #0]
 800b8f6:	68f8      	ldr	r0, [r7, #12]
 800b8f8:	f000 fa44 	bl	800bd84 <SPI_EndRxTxTransaction>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d002      	beq.n	800b908 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2220      	movs	r2, #32
 800b906:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	689b      	ldr	r3, [r3, #8]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d10a      	bne.n	800b926 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b910:	2300      	movs	r3, #0
 800b912:	613b      	str	r3, [r7, #16]
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	68db      	ldr	r3, [r3, #12]
 800b91a:	613b      	str	r3, [r7, #16]
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	613b      	str	r3, [r7, #16]
 800b924:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d002      	beq.n	800b934 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	77fb      	strb	r3, [r7, #31]
 800b932:	e000      	b.n	800b936 <HAL_SPI_Transmit+0x24e>
  }

error:
 800b934:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2201      	movs	r2, #1
 800b93a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2200      	movs	r2, #0
 800b942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b946:	7ffb      	ldrb	r3, [r7, #31]
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3720      	adds	r7, #32
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b08c      	sub	sp, #48	; 0x30
 800b954:	af00      	add	r7, sp, #0
 800b956:	60f8      	str	r0, [r7, #12]
 800b958:	60b9      	str	r1, [r7, #8]
 800b95a:	607a      	str	r2, [r7, #4]
 800b95c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b95e:	2301      	movs	r3, #1
 800b960:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b962:	2300      	movs	r3, #0
 800b964:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b96e:	2b01      	cmp	r3, #1
 800b970:	d101      	bne.n	800b976 <HAL_SPI_TransmitReceive+0x26>
 800b972:	2302      	movs	r3, #2
 800b974:	e18a      	b.n	800bc8c <HAL_SPI_TransmitReceive+0x33c>
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2201      	movs	r2, #1
 800b97a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b97e:	f7fd ff8d 	bl	800989c <HAL_GetTick>
 800b982:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b98a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b994:	887b      	ldrh	r3, [r7, #2]
 800b996:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b998:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d00f      	beq.n	800b9c0 <HAL_SPI_TransmitReceive+0x70>
 800b9a0:	69fb      	ldr	r3, [r7, #28]
 800b9a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b9a6:	d107      	bne.n	800b9b8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	689b      	ldr	r3, [r3, #8]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d103      	bne.n	800b9b8 <HAL_SPI_TransmitReceive+0x68>
 800b9b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b9b4:	2b04      	cmp	r3, #4
 800b9b6:	d003      	beq.n	800b9c0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b9be:	e15b      	b.n	800bc78 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d005      	beq.n	800b9d2 <HAL_SPI_TransmitReceive+0x82>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d002      	beq.n	800b9d2 <HAL_SPI_TransmitReceive+0x82>
 800b9cc:	887b      	ldrh	r3, [r7, #2]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d103      	bne.n	800b9da <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b9d8:	e14e      	b.n	800bc78 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	2b04      	cmp	r3, #4
 800b9e4:	d003      	beq.n	800b9ee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2205      	movs	r2, #5
 800b9ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	887a      	ldrh	r2, [r7, #2]
 800b9fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	887a      	ldrh	r2, [r7, #2]
 800ba04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	68ba      	ldr	r2, [r7, #8]
 800ba0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	887a      	ldrh	r2, [r7, #2]
 800ba10:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	887a      	ldrh	r2, [r7, #2]
 800ba16:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2200      	movs	r2, #0
 800ba22:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba2e:	2b40      	cmp	r3, #64	; 0x40
 800ba30:	d007      	beq.n	800ba42 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	681a      	ldr	r2, [r3, #0]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	68db      	ldr	r3, [r3, #12]
 800ba46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba4a:	d178      	bne.n	800bb3e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d002      	beq.n	800ba5a <HAL_SPI_TransmitReceive+0x10a>
 800ba54:	8b7b      	ldrh	r3, [r7, #26]
 800ba56:	2b01      	cmp	r3, #1
 800ba58:	d166      	bne.n	800bb28 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba5e:	881a      	ldrh	r2, [r3, #0]
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba6a:	1c9a      	adds	r2, r3, #2
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	3b01      	subs	r3, #1
 800ba78:	b29a      	uxth	r2, r3
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba7e:	e053      	b.n	800bb28 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	f003 0302 	and.w	r3, r3, #2
 800ba8a:	2b02      	cmp	r3, #2
 800ba8c:	d11b      	bne.n	800bac6 <HAL_SPI_TransmitReceive+0x176>
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d016      	beq.n	800bac6 <HAL_SPI_TransmitReceive+0x176>
 800ba98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba9a:	2b01      	cmp	r3, #1
 800ba9c:	d113      	bne.n	800bac6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baa2:	881a      	ldrh	r2, [r3, #0]
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baae:	1c9a      	adds	r2, r3, #2
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bab8:	b29b      	uxth	r3, r3
 800baba:	3b01      	subs	r3, #1
 800babc:	b29a      	uxth	r2, r3
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bac2:	2300      	movs	r3, #0
 800bac4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	689b      	ldr	r3, [r3, #8]
 800bacc:	f003 0301 	and.w	r3, r3, #1
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	d119      	bne.n	800bb08 <HAL_SPI_TransmitReceive+0x1b8>
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bad8:	b29b      	uxth	r3, r3
 800bada:	2b00      	cmp	r3, #0
 800badc:	d014      	beq.n	800bb08 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	68da      	ldr	r2, [r3, #12]
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae8:	b292      	uxth	r2, r2
 800baea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baf0:	1c9a      	adds	r2, r3, #2
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	3b01      	subs	r3, #1
 800bafe:	b29a      	uxth	r2, r3
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bb04:	2301      	movs	r3, #1
 800bb06:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bb08:	f7fd fec8 	bl	800989c <HAL_GetTick>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb10:	1ad3      	subs	r3, r2, r3
 800bb12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d807      	bhi.n	800bb28 <HAL_SPI_TransmitReceive+0x1d8>
 800bb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb1e:	d003      	beq.n	800bb28 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800bb20:	2303      	movs	r3, #3
 800bb22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bb26:	e0a7      	b.n	800bc78 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d1a6      	bne.n	800ba80 <HAL_SPI_TransmitReceive+0x130>
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d1a1      	bne.n	800ba80 <HAL_SPI_TransmitReceive+0x130>
 800bb3c:	e07c      	b.n	800bc38 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d002      	beq.n	800bb4c <HAL_SPI_TransmitReceive+0x1fc>
 800bb46:	8b7b      	ldrh	r3, [r7, #26]
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	d16b      	bne.n	800bc24 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	330c      	adds	r3, #12
 800bb56:	7812      	ldrb	r2, [r2, #0]
 800bb58:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb5e:	1c5a      	adds	r2, r3, #1
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	3b01      	subs	r3, #1
 800bb6c:	b29a      	uxth	r2, r3
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bb72:	e057      	b.n	800bc24 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	f003 0302 	and.w	r3, r3, #2
 800bb7e:	2b02      	cmp	r3, #2
 800bb80:	d11c      	bne.n	800bbbc <HAL_SPI_TransmitReceive+0x26c>
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d017      	beq.n	800bbbc <HAL_SPI_TransmitReceive+0x26c>
 800bb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d114      	bne.n	800bbbc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	330c      	adds	r3, #12
 800bb9c:	7812      	ldrb	r2, [r2, #0]
 800bb9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bba4:	1c5a      	adds	r2, r3, #1
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	3b01      	subs	r3, #1
 800bbb2:	b29a      	uxth	r2, r3
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	689b      	ldr	r3, [r3, #8]
 800bbc2:	f003 0301 	and.w	r3, r3, #1
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	d119      	bne.n	800bbfe <HAL_SPI_TransmitReceive+0x2ae>
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbce:	b29b      	uxth	r3, r3
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d014      	beq.n	800bbfe <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	68da      	ldr	r2, [r3, #12]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbde:	b2d2      	uxtb	r2, r2
 800bbe0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbe6:	1c5a      	adds	r2, r3, #1
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bbf0:	b29b      	uxth	r3, r3
 800bbf2:	3b01      	subs	r3, #1
 800bbf4:	b29a      	uxth	r2, r3
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bbfe:	f7fd fe4d 	bl	800989c <HAL_GetTick>
 800bc02:	4602      	mov	r2, r0
 800bc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc06:	1ad3      	subs	r3, r2, r3
 800bc08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d803      	bhi.n	800bc16 <HAL_SPI_TransmitReceive+0x2c6>
 800bc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc14:	d102      	bne.n	800bc1c <HAL_SPI_TransmitReceive+0x2cc>
 800bc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d103      	bne.n	800bc24 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800bc1c:	2303      	movs	r3, #3
 800bc1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bc22:	e029      	b.n	800bc78 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d1a2      	bne.n	800bb74 <HAL_SPI_TransmitReceive+0x224>
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d19d      	bne.n	800bb74 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bc38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bc3c:	68f8      	ldr	r0, [r7, #12]
 800bc3e:	f000 f8a1 	bl	800bd84 <SPI_EndRxTxTransaction>
 800bc42:	4603      	mov	r3, r0
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d006      	beq.n	800bc56 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2220      	movs	r2, #32
 800bc52:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bc54:	e010      	b.n	800bc78 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d10b      	bne.n	800bc76 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bc5e:	2300      	movs	r3, #0
 800bc60:	617b      	str	r3, [r7, #20]
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	68db      	ldr	r3, [r3, #12]
 800bc68:	617b      	str	r3, [r7, #20]
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	689b      	ldr	r3, [r3, #8]
 800bc70:	617b      	str	r3, [r7, #20]
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	e000      	b.n	800bc78 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800bc76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2200      	movs	r2, #0
 800bc84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bc88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3730      	adds	r7, #48	; 0x30
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bca2:	b2db      	uxtb	r3, r3
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	370c      	adds	r7, #12
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr

0800bcb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	60f8      	str	r0, [r7, #12]
 800bcb8:	60b9      	str	r1, [r7, #8]
 800bcba:	603b      	str	r3, [r7, #0]
 800bcbc:	4613      	mov	r3, r2
 800bcbe:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bcc0:	e04c      	b.n	800bd5c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcc8:	d048      	beq.n	800bd5c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800bcca:	f7fd fde7 	bl	800989c <HAL_GetTick>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	69bb      	ldr	r3, [r7, #24]
 800bcd2:	1ad3      	subs	r3, r2, r3
 800bcd4:	683a      	ldr	r2, [r7, #0]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d902      	bls.n	800bce0 <SPI_WaitFlagStateUntilTimeout+0x30>
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d13d      	bne.n	800bd5c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	685a      	ldr	r2, [r3, #4]
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bcee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	685b      	ldr	r3, [r3, #4]
 800bcf4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bcf8:	d111      	bne.n	800bd1e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	689b      	ldr	r3, [r3, #8]
 800bcfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd02:	d004      	beq.n	800bd0e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	689b      	ldr	r3, [r3, #8]
 800bd08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd0c:	d107      	bne.n	800bd1e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	681a      	ldr	r2, [r3, #0]
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd1c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd26:	d10f      	bne.n	800bd48 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bd36:	601a      	str	r2, [r3, #0]
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	681a      	ldr	r2, [r3, #0]
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bd46:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2201      	movs	r2, #1
 800bd4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2200      	movs	r2, #0
 800bd54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bd58:	2303      	movs	r3, #3
 800bd5a:	e00f      	b.n	800bd7c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	689a      	ldr	r2, [r3, #8]
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	4013      	ands	r3, r2
 800bd66:	68ba      	ldr	r2, [r7, #8]
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	bf0c      	ite	eq
 800bd6c:	2301      	moveq	r3, #1
 800bd6e:	2300      	movne	r3, #0
 800bd70:	b2db      	uxtb	r3, r3
 800bd72:	461a      	mov	r2, r3
 800bd74:	79fb      	ldrb	r3, [r7, #7]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d1a3      	bne.n	800bcc2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800bd7a:	2300      	movs	r3, #0
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3710      	adds	r7, #16
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b088      	sub	sp, #32
 800bd88:	af02      	add	r7, sp, #8
 800bd8a:	60f8      	str	r0, [r7, #12]
 800bd8c:	60b9      	str	r1, [r7, #8]
 800bd8e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bd90:	4b1b      	ldr	r3, [pc, #108]	; (800be00 <SPI_EndRxTxTransaction+0x7c>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	4a1b      	ldr	r2, [pc, #108]	; (800be04 <SPI_EndRxTxTransaction+0x80>)
 800bd96:	fba2 2303 	umull	r2, r3, r2, r3
 800bd9a:	0d5b      	lsrs	r3, r3, #21
 800bd9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bda0:	fb02 f303 	mul.w	r3, r2, r3
 800bda4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bdae:	d112      	bne.n	800bdd6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	9300      	str	r3, [sp, #0]
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	2180      	movs	r1, #128	; 0x80
 800bdba:	68f8      	ldr	r0, [r7, #12]
 800bdbc:	f7ff ff78 	bl	800bcb0 <SPI_WaitFlagStateUntilTimeout>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d016      	beq.n	800bdf4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdca:	f043 0220 	orr.w	r2, r3, #32
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bdd2:	2303      	movs	r3, #3
 800bdd4:	e00f      	b.n	800bdf6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d00a      	beq.n	800bdf2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	3b01      	subs	r3, #1
 800bde0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	689b      	ldr	r3, [r3, #8]
 800bde8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdec:	2b80      	cmp	r3, #128	; 0x80
 800bdee:	d0f2      	beq.n	800bdd6 <SPI_EndRxTxTransaction+0x52>
 800bdf0:	e000      	b.n	800bdf4 <SPI_EndRxTxTransaction+0x70>
        break;
 800bdf2:	bf00      	nop
  }

  return HAL_OK;
 800bdf4:	2300      	movs	r3, #0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3718      	adds	r7, #24
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	2000000c 	.word	0x2000000c
 800be04:	165e9f81 	.word	0x165e9f81

0800be08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d101      	bne.n	800be1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800be16:	2301      	movs	r3, #1
 800be18:	e01d      	b.n	800be56 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be20:	b2db      	uxtb	r3, r3
 800be22:	2b00      	cmp	r3, #0
 800be24:	d106      	bne.n	800be34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2200      	movs	r2, #0
 800be2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f7fb fc52 	bl	80076d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2202      	movs	r2, #2
 800be38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	3304      	adds	r3, #4
 800be44:	4619      	mov	r1, r3
 800be46:	4610      	mov	r0, r2
 800be48:	f000 fa14 	bl	800c274 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2201      	movs	r2, #1
 800be50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800be54:	2300      	movs	r3, #0
}
 800be56:	4618      	mov	r0, r3
 800be58:	3708      	adds	r7, #8
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}

0800be5e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800be5e:	b480      	push	{r7}
 800be60:	b085      	sub	sp, #20
 800be62:	af00      	add	r7, sp, #0
 800be64:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	68da      	ldr	r2, [r3, #12]
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f042 0201 	orr.w	r2, r2, #1
 800be74:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	f003 0307 	and.w	r3, r3, #7
 800be80:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2b06      	cmp	r3, #6
 800be86:	d007      	beq.n	800be98 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	681a      	ldr	r2, [r3, #0]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f042 0201 	orr.w	r2, r2, #1
 800be96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800be98:	2300      	movs	r3, #0
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3714      	adds	r7, #20
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr

0800bea6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bea6:	b580      	push	{r7, lr}
 800bea8:	b082      	sub	sp, #8
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	691b      	ldr	r3, [r3, #16]
 800beb4:	f003 0302 	and.w	r3, r3, #2
 800beb8:	2b02      	cmp	r3, #2
 800beba:	d122      	bne.n	800bf02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	68db      	ldr	r3, [r3, #12]
 800bec2:	f003 0302 	and.w	r3, r3, #2
 800bec6:	2b02      	cmp	r3, #2
 800bec8:	d11b      	bne.n	800bf02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f06f 0202 	mvn.w	r2, #2
 800bed2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2201      	movs	r2, #1
 800bed8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	699b      	ldr	r3, [r3, #24]
 800bee0:	f003 0303 	and.w	r3, r3, #3
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d003      	beq.n	800bef0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 f9a5 	bl	800c238 <HAL_TIM_IC_CaptureCallback>
 800beee:	e005      	b.n	800befc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f000 f997 	bl	800c224 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 f9a8 	bl	800c24c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2200      	movs	r2, #0
 800bf00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	691b      	ldr	r3, [r3, #16]
 800bf08:	f003 0304 	and.w	r3, r3, #4
 800bf0c:	2b04      	cmp	r3, #4
 800bf0e:	d122      	bne.n	800bf56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	68db      	ldr	r3, [r3, #12]
 800bf16:	f003 0304 	and.w	r3, r3, #4
 800bf1a:	2b04      	cmp	r3, #4
 800bf1c:	d11b      	bne.n	800bf56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f06f 0204 	mvn.w	r2, #4
 800bf26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2202      	movs	r2, #2
 800bf2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	699b      	ldr	r3, [r3, #24]
 800bf34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d003      	beq.n	800bf44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f000 f97b 	bl	800c238 <HAL_TIM_IC_CaptureCallback>
 800bf42:	e005      	b.n	800bf50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 f96d 	bl	800c224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 f97e 	bl	800c24c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	691b      	ldr	r3, [r3, #16]
 800bf5c:	f003 0308 	and.w	r3, r3, #8
 800bf60:	2b08      	cmp	r3, #8
 800bf62:	d122      	bne.n	800bfaa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	68db      	ldr	r3, [r3, #12]
 800bf6a:	f003 0308 	and.w	r3, r3, #8
 800bf6e:	2b08      	cmp	r3, #8
 800bf70:	d11b      	bne.n	800bfaa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f06f 0208 	mvn.w	r2, #8
 800bf7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2204      	movs	r2, #4
 800bf80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	69db      	ldr	r3, [r3, #28]
 800bf88:	f003 0303 	and.w	r3, r3, #3
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d003      	beq.n	800bf98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f000 f951 	bl	800c238 <HAL_TIM_IC_CaptureCallback>
 800bf96:	e005      	b.n	800bfa4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f000 f943 	bl	800c224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 f954 	bl	800c24c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	691b      	ldr	r3, [r3, #16]
 800bfb0:	f003 0310 	and.w	r3, r3, #16
 800bfb4:	2b10      	cmp	r3, #16
 800bfb6:	d122      	bne.n	800bffe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	68db      	ldr	r3, [r3, #12]
 800bfbe:	f003 0310 	and.w	r3, r3, #16
 800bfc2:	2b10      	cmp	r3, #16
 800bfc4:	d11b      	bne.n	800bffe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f06f 0210 	mvn.w	r2, #16
 800bfce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2208      	movs	r2, #8
 800bfd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	69db      	ldr	r3, [r3, #28]
 800bfdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d003      	beq.n	800bfec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 f927 	bl	800c238 <HAL_TIM_IC_CaptureCallback>
 800bfea:	e005      	b.n	800bff8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 f919 	bl	800c224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 f92a 	bl	800c24c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2200      	movs	r2, #0
 800bffc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	691b      	ldr	r3, [r3, #16]
 800c004:	f003 0301 	and.w	r3, r3, #1
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d10e      	bne.n	800c02a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	68db      	ldr	r3, [r3, #12]
 800c012:	f003 0301 	and.w	r3, r3, #1
 800c016:	2b01      	cmp	r3, #1
 800c018:	d107      	bne.n	800c02a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f06f 0201 	mvn.w	r2, #1
 800c022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f7fb f869 	bl	80070fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	691b      	ldr	r3, [r3, #16]
 800c030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c034:	2b80      	cmp	r3, #128	; 0x80
 800c036:	d10e      	bne.n	800c056 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	68db      	ldr	r3, [r3, #12]
 800c03e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c042:	2b80      	cmp	r3, #128	; 0x80
 800c044:	d107      	bne.n	800c056 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c04e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f000 facf 	bl	800c5f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	691b      	ldr	r3, [r3, #16]
 800c05c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c060:	2b40      	cmp	r3, #64	; 0x40
 800c062:	d10e      	bne.n	800c082 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	68db      	ldr	r3, [r3, #12]
 800c06a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c06e:	2b40      	cmp	r3, #64	; 0x40
 800c070:	d107      	bne.n	800c082 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c07a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f000 f8ef 	bl	800c260 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	691b      	ldr	r3, [r3, #16]
 800c088:	f003 0320 	and.w	r3, r3, #32
 800c08c:	2b20      	cmp	r3, #32
 800c08e:	d10e      	bne.n	800c0ae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	68db      	ldr	r3, [r3, #12]
 800c096:	f003 0320 	and.w	r3, r3, #32
 800c09a:	2b20      	cmp	r3, #32
 800c09c:	d107      	bne.n	800c0ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f06f 0220 	mvn.w	r2, #32
 800c0a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 fa99 	bl	800c5e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c0ae:	bf00      	nop
 800c0b0:	3708      	adds	r7, #8
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}

0800c0b6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c0b6:	b580      	push	{r7, lr}
 800c0b8:	b084      	sub	sp, #16
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
 800c0be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d101      	bne.n	800c0ce <HAL_TIM_ConfigClockSource+0x18>
 800c0ca:	2302      	movs	r3, #2
 800c0cc:	e0a6      	b.n	800c21c <HAL_TIM_ConfigClockSource+0x166>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2202      	movs	r2, #2
 800c0da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	689b      	ldr	r3, [r3, #8]
 800c0e4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c0ec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c0f4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	68fa      	ldr	r2, [r7, #12]
 800c0fc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	2b40      	cmp	r3, #64	; 0x40
 800c104:	d067      	beq.n	800c1d6 <HAL_TIM_ConfigClockSource+0x120>
 800c106:	2b40      	cmp	r3, #64	; 0x40
 800c108:	d80b      	bhi.n	800c122 <HAL_TIM_ConfigClockSource+0x6c>
 800c10a:	2b10      	cmp	r3, #16
 800c10c:	d073      	beq.n	800c1f6 <HAL_TIM_ConfigClockSource+0x140>
 800c10e:	2b10      	cmp	r3, #16
 800c110:	d802      	bhi.n	800c118 <HAL_TIM_ConfigClockSource+0x62>
 800c112:	2b00      	cmp	r3, #0
 800c114:	d06f      	beq.n	800c1f6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c116:	e078      	b.n	800c20a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c118:	2b20      	cmp	r3, #32
 800c11a:	d06c      	beq.n	800c1f6 <HAL_TIM_ConfigClockSource+0x140>
 800c11c:	2b30      	cmp	r3, #48	; 0x30
 800c11e:	d06a      	beq.n	800c1f6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800c120:	e073      	b.n	800c20a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c122:	2b70      	cmp	r3, #112	; 0x70
 800c124:	d00d      	beq.n	800c142 <HAL_TIM_ConfigClockSource+0x8c>
 800c126:	2b70      	cmp	r3, #112	; 0x70
 800c128:	d804      	bhi.n	800c134 <HAL_TIM_ConfigClockSource+0x7e>
 800c12a:	2b50      	cmp	r3, #80	; 0x50
 800c12c:	d033      	beq.n	800c196 <HAL_TIM_ConfigClockSource+0xe0>
 800c12e:	2b60      	cmp	r3, #96	; 0x60
 800c130:	d041      	beq.n	800c1b6 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800c132:	e06a      	b.n	800c20a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c138:	d066      	beq.n	800c208 <HAL_TIM_ConfigClockSource+0x152>
 800c13a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c13e:	d017      	beq.n	800c170 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800c140:	e063      	b.n	800c20a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6818      	ldr	r0, [r3, #0]
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	6899      	ldr	r1, [r3, #8]
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	685a      	ldr	r2, [r3, #4]
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	68db      	ldr	r3, [r3, #12]
 800c152:	f000 f9a9 	bl	800c4a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	689b      	ldr	r3, [r3, #8]
 800c15c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c164:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	68fa      	ldr	r2, [r7, #12]
 800c16c:	609a      	str	r2, [r3, #8]
      break;
 800c16e:	e04c      	b.n	800c20a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6818      	ldr	r0, [r3, #0]
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	6899      	ldr	r1, [r3, #8]
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	685a      	ldr	r2, [r3, #4]
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	68db      	ldr	r3, [r3, #12]
 800c180:	f000 f992 	bl	800c4a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	689a      	ldr	r2, [r3, #8]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c192:	609a      	str	r2, [r3, #8]
      break;
 800c194:	e039      	b.n	800c20a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6818      	ldr	r0, [r3, #0]
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	6859      	ldr	r1, [r3, #4]
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	68db      	ldr	r3, [r3, #12]
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	f000 f906 	bl	800c3b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	2150      	movs	r1, #80	; 0x50
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f000 f95f 	bl	800c472 <TIM_ITRx_SetConfig>
      break;
 800c1b4:	e029      	b.n	800c20a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6818      	ldr	r0, [r3, #0]
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	6859      	ldr	r1, [r3, #4]
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	68db      	ldr	r3, [r3, #12]
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	f000 f925 	bl	800c412 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	2160      	movs	r1, #96	; 0x60
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f000 f94f 	bl	800c472 <TIM_ITRx_SetConfig>
      break;
 800c1d4:	e019      	b.n	800c20a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6818      	ldr	r0, [r3, #0]
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	6859      	ldr	r1, [r3, #4]
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	68db      	ldr	r3, [r3, #12]
 800c1e2:	461a      	mov	r2, r3
 800c1e4:	f000 f8e6 	bl	800c3b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	2140      	movs	r1, #64	; 0x40
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f000 f93f 	bl	800c472 <TIM_ITRx_SetConfig>
      break;
 800c1f4:	e009      	b.n	800c20a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4619      	mov	r1, r3
 800c200:	4610      	mov	r0, r2
 800c202:	f000 f936 	bl	800c472 <TIM_ITRx_SetConfig>
      break;
 800c206:	e000      	b.n	800c20a <HAL_TIM_ConfigClockSource+0x154>
      break;
 800c208:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2201      	movs	r2, #1
 800c20e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c21a:	2300      	movs	r3, #0
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3710      	adds	r7, #16
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c22c:	bf00      	nop
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c238:	b480      	push	{r7}
 800c23a:	b083      	sub	sp, #12
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c240:	bf00      	nop
 800c242:	370c      	adds	r7, #12
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr

0800c24c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c254:	bf00      	nop
 800c256:	370c      	adds	r7, #12
 800c258:	46bd      	mov	sp, r7
 800c25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25e:	4770      	bx	lr

0800c260 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c260:	b480      	push	{r7}
 800c262:	b083      	sub	sp, #12
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c268:	bf00      	nop
 800c26a:	370c      	adds	r7, #12
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr

0800c274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c274:	b480      	push	{r7}
 800c276:	b085      	sub	sp, #20
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
 800c27c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	4a40      	ldr	r2, [pc, #256]	; (800c388 <TIM_Base_SetConfig+0x114>)
 800c288:	4293      	cmp	r3, r2
 800c28a:	d013      	beq.n	800c2b4 <TIM_Base_SetConfig+0x40>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c292:	d00f      	beq.n	800c2b4 <TIM_Base_SetConfig+0x40>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	4a3d      	ldr	r2, [pc, #244]	; (800c38c <TIM_Base_SetConfig+0x118>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d00b      	beq.n	800c2b4 <TIM_Base_SetConfig+0x40>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	4a3c      	ldr	r2, [pc, #240]	; (800c390 <TIM_Base_SetConfig+0x11c>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d007      	beq.n	800c2b4 <TIM_Base_SetConfig+0x40>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	4a3b      	ldr	r2, [pc, #236]	; (800c394 <TIM_Base_SetConfig+0x120>)
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d003      	beq.n	800c2b4 <TIM_Base_SetConfig+0x40>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	4a3a      	ldr	r2, [pc, #232]	; (800c398 <TIM_Base_SetConfig+0x124>)
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d108      	bne.n	800c2c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	68fa      	ldr	r2, [r7, #12]
 800c2c2:	4313      	orrs	r3, r2
 800c2c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	4a2f      	ldr	r2, [pc, #188]	; (800c388 <TIM_Base_SetConfig+0x114>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d02b      	beq.n	800c326 <TIM_Base_SetConfig+0xb2>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2d4:	d027      	beq.n	800c326 <TIM_Base_SetConfig+0xb2>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	4a2c      	ldr	r2, [pc, #176]	; (800c38c <TIM_Base_SetConfig+0x118>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d023      	beq.n	800c326 <TIM_Base_SetConfig+0xb2>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	4a2b      	ldr	r2, [pc, #172]	; (800c390 <TIM_Base_SetConfig+0x11c>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d01f      	beq.n	800c326 <TIM_Base_SetConfig+0xb2>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	4a2a      	ldr	r2, [pc, #168]	; (800c394 <TIM_Base_SetConfig+0x120>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d01b      	beq.n	800c326 <TIM_Base_SetConfig+0xb2>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	4a29      	ldr	r2, [pc, #164]	; (800c398 <TIM_Base_SetConfig+0x124>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d017      	beq.n	800c326 <TIM_Base_SetConfig+0xb2>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	4a28      	ldr	r2, [pc, #160]	; (800c39c <TIM_Base_SetConfig+0x128>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d013      	beq.n	800c326 <TIM_Base_SetConfig+0xb2>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	4a27      	ldr	r2, [pc, #156]	; (800c3a0 <TIM_Base_SetConfig+0x12c>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d00f      	beq.n	800c326 <TIM_Base_SetConfig+0xb2>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	4a26      	ldr	r2, [pc, #152]	; (800c3a4 <TIM_Base_SetConfig+0x130>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d00b      	beq.n	800c326 <TIM_Base_SetConfig+0xb2>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	4a25      	ldr	r2, [pc, #148]	; (800c3a8 <TIM_Base_SetConfig+0x134>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d007      	beq.n	800c326 <TIM_Base_SetConfig+0xb2>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	4a24      	ldr	r2, [pc, #144]	; (800c3ac <TIM_Base_SetConfig+0x138>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d003      	beq.n	800c326 <TIM_Base_SetConfig+0xb2>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	4a23      	ldr	r2, [pc, #140]	; (800c3b0 <TIM_Base_SetConfig+0x13c>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d108      	bne.n	800c338 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c32c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	68db      	ldr	r3, [r3, #12]
 800c332:	68fa      	ldr	r2, [r7, #12]
 800c334:	4313      	orrs	r3, r2
 800c336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	695b      	ldr	r3, [r3, #20]
 800c342:	4313      	orrs	r3, r2
 800c344:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	68fa      	ldr	r2, [r7, #12]
 800c34a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	689a      	ldr	r2, [r3, #8]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	681a      	ldr	r2, [r3, #0]
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	4a0a      	ldr	r2, [pc, #40]	; (800c388 <TIM_Base_SetConfig+0x114>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d003      	beq.n	800c36c <TIM_Base_SetConfig+0xf8>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	4a0c      	ldr	r2, [pc, #48]	; (800c398 <TIM_Base_SetConfig+0x124>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d103      	bne.n	800c374 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	691a      	ldr	r2, [r3, #16]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2201      	movs	r2, #1
 800c378:	615a      	str	r2, [r3, #20]
}
 800c37a:	bf00      	nop
 800c37c:	3714      	adds	r7, #20
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr
 800c386:	bf00      	nop
 800c388:	40010000 	.word	0x40010000
 800c38c:	40000400 	.word	0x40000400
 800c390:	40000800 	.word	0x40000800
 800c394:	40000c00 	.word	0x40000c00
 800c398:	40010400 	.word	0x40010400
 800c39c:	40014000 	.word	0x40014000
 800c3a0:	40014400 	.word	0x40014400
 800c3a4:	40014800 	.word	0x40014800
 800c3a8:	40001800 	.word	0x40001800
 800c3ac:	40001c00 	.word	0x40001c00
 800c3b0:	40002000 	.word	0x40002000

0800c3b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b087      	sub	sp, #28
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	60f8      	str	r0, [r7, #12]
 800c3bc:	60b9      	str	r1, [r7, #8]
 800c3be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	6a1b      	ldr	r3, [r3, #32]
 800c3c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	6a1b      	ldr	r3, [r3, #32]
 800c3ca:	f023 0201 	bic.w	r2, r3, #1
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	699b      	ldr	r3, [r3, #24]
 800c3d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c3de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	011b      	lsls	r3, r3, #4
 800c3e4:	693a      	ldr	r2, [r7, #16]
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	f023 030a 	bic.w	r3, r3, #10
 800c3f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c3f2:	697a      	ldr	r2, [r7, #20]
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	4313      	orrs	r3, r2
 800c3f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	693a      	ldr	r2, [r7, #16]
 800c3fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	697a      	ldr	r2, [r7, #20]
 800c404:	621a      	str	r2, [r3, #32]
}
 800c406:	bf00      	nop
 800c408:	371c      	adds	r7, #28
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr

0800c412 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c412:	b480      	push	{r7}
 800c414:	b087      	sub	sp, #28
 800c416:	af00      	add	r7, sp, #0
 800c418:	60f8      	str	r0, [r7, #12]
 800c41a:	60b9      	str	r1, [r7, #8]
 800c41c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	6a1b      	ldr	r3, [r3, #32]
 800c422:	f023 0210 	bic.w	r2, r3, #16
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	699b      	ldr	r3, [r3, #24]
 800c42e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	6a1b      	ldr	r3, [r3, #32]
 800c434:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c43c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	031b      	lsls	r3, r3, #12
 800c442:	697a      	ldr	r2, [r7, #20]
 800c444:	4313      	orrs	r3, r2
 800c446:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c44e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	011b      	lsls	r3, r3, #4
 800c454:	693a      	ldr	r2, [r7, #16]
 800c456:	4313      	orrs	r3, r2
 800c458:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	697a      	ldr	r2, [r7, #20]
 800c45e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	693a      	ldr	r2, [r7, #16]
 800c464:	621a      	str	r2, [r3, #32]
}
 800c466:	bf00      	nop
 800c468:	371c      	adds	r7, #28
 800c46a:	46bd      	mov	sp, r7
 800c46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c470:	4770      	bx	lr

0800c472 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c472:	b480      	push	{r7}
 800c474:	b085      	sub	sp, #20
 800c476:	af00      	add	r7, sp, #0
 800c478:	6078      	str	r0, [r7, #4]
 800c47a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	689b      	ldr	r3, [r3, #8]
 800c480:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c488:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c48a:	683a      	ldr	r2, [r7, #0]
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	4313      	orrs	r3, r2
 800c490:	f043 0307 	orr.w	r3, r3, #7
 800c494:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	68fa      	ldr	r2, [r7, #12]
 800c49a:	609a      	str	r2, [r3, #8]
}
 800c49c:	bf00      	nop
 800c49e:	3714      	adds	r7, #20
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b087      	sub	sp, #28
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60f8      	str	r0, [r7, #12]
 800c4b0:	60b9      	str	r1, [r7, #8]
 800c4b2:	607a      	str	r2, [r7, #4]
 800c4b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	689b      	ldr	r3, [r3, #8]
 800c4ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c4c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	021a      	lsls	r2, r3, #8
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	431a      	orrs	r2, r3
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	697a      	ldr	r2, [r7, #20]
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	697a      	ldr	r2, [r7, #20]
 800c4da:	609a      	str	r2, [r3, #8]
}
 800c4dc:	bf00      	nop
 800c4de:	371c      	adds	r7, #28
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr

0800c4e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b085      	sub	sp, #20
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	d101      	bne.n	800c500 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c4fc:	2302      	movs	r3, #2
 800c4fe:	e05a      	b.n	800c5b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2201      	movs	r2, #1
 800c504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2202      	movs	r2, #2
 800c50c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	689b      	ldr	r3, [r3, #8]
 800c51e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c526:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	68fa      	ldr	r2, [r7, #12]
 800c52e:	4313      	orrs	r3, r2
 800c530:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	68fa      	ldr	r2, [r7, #12]
 800c538:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	4a21      	ldr	r2, [pc, #132]	; (800c5c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d022      	beq.n	800c58a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c54c:	d01d      	beq.n	800c58a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	4a1d      	ldr	r2, [pc, #116]	; (800c5c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c554:	4293      	cmp	r3, r2
 800c556:	d018      	beq.n	800c58a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4a1b      	ldr	r2, [pc, #108]	; (800c5cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d013      	beq.n	800c58a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	4a1a      	ldr	r2, [pc, #104]	; (800c5d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c568:	4293      	cmp	r3, r2
 800c56a:	d00e      	beq.n	800c58a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	4a18      	ldr	r2, [pc, #96]	; (800c5d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c572:	4293      	cmp	r3, r2
 800c574:	d009      	beq.n	800c58a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4a17      	ldr	r2, [pc, #92]	; (800c5d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d004      	beq.n	800c58a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	4a15      	ldr	r2, [pc, #84]	; (800c5dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c586:	4293      	cmp	r3, r2
 800c588:	d10c      	bne.n	800c5a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c590:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	685b      	ldr	r3, [r3, #4]
 800c596:	68ba      	ldr	r2, [r7, #8]
 800c598:	4313      	orrs	r3, r2
 800c59a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	68ba      	ldr	r2, [r7, #8]
 800c5a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c5b4:	2300      	movs	r3, #0
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3714      	adds	r7, #20
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c0:	4770      	bx	lr
 800c5c2:	bf00      	nop
 800c5c4:	40010000 	.word	0x40010000
 800c5c8:	40000400 	.word	0x40000400
 800c5cc:	40000800 	.word	0x40000800
 800c5d0:	40000c00 	.word	0x40000c00
 800c5d4:	40010400 	.word	0x40010400
 800c5d8:	40014000 	.word	0x40014000
 800c5dc:	40001800 	.word	0x40001800

0800c5e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b083      	sub	sp, #12
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c5e8:	bf00      	nop
 800c5ea:	370c      	adds	r7, #12
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f2:	4770      	bx	lr

0800c5f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c5fc:	bf00      	nop
 800c5fe:	370c      	adds	r7, #12
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr

0800c608 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b084      	sub	sp, #16
 800c60c:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800c60e:	f000 fb66 	bl	800ccde <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800c612:	4b17      	ldr	r3, [pc, #92]	; (800c670 <MX_LWIP_Init+0x68>)
 800c614:	2200      	movs	r2, #0
 800c616:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800c618:	4b16      	ldr	r3, [pc, #88]	; (800c674 <MX_LWIP_Init+0x6c>)
 800c61a:	2200      	movs	r2, #0
 800c61c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800c61e:	4b16      	ldr	r3, [pc, #88]	; (800c678 <MX_LWIP_Init+0x70>)
 800c620:	2200      	movs	r2, #0
 800c622:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800c624:	4b15      	ldr	r3, [pc, #84]	; (800c67c <MX_LWIP_Init+0x74>)
 800c626:	9302      	str	r3, [sp, #8]
 800c628:	4b15      	ldr	r3, [pc, #84]	; (800c680 <MX_LWIP_Init+0x78>)
 800c62a:	9301      	str	r3, [sp, #4]
 800c62c:	2300      	movs	r3, #0
 800c62e:	9300      	str	r3, [sp, #0]
 800c630:	4b11      	ldr	r3, [pc, #68]	; (800c678 <MX_LWIP_Init+0x70>)
 800c632:	4a10      	ldr	r2, [pc, #64]	; (800c674 <MX_LWIP_Init+0x6c>)
 800c634:	490e      	ldr	r1, [pc, #56]	; (800c670 <MX_LWIP_Init+0x68>)
 800c636:	4813      	ldr	r0, [pc, #76]	; (800c684 <MX_LWIP_Init+0x7c>)
 800c638:	f000 fff6 	bl	800d628 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800c63c:	4811      	ldr	r0, [pc, #68]	; (800c684 <MX_LWIP_Init+0x7c>)
 800c63e:	f001 f9a9 	bl	800d994 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800c642:	4b10      	ldr	r3, [pc, #64]	; (800c684 <MX_LWIP_Init+0x7c>)
 800c644:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c648:	089b      	lsrs	r3, r3, #2
 800c64a:	f003 0301 	and.w	r3, r3, #1
 800c64e:	b2db      	uxtb	r3, r3
 800c650:	2b00      	cmp	r3, #0
 800c652:	d003      	beq.n	800c65c <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800c654:	480b      	ldr	r0, [pc, #44]	; (800c684 <MX_LWIP_Init+0x7c>)
 800c656:	f001 f9ad 	bl	800d9b4 <netif_set_up>
 800c65a:	e002      	b.n	800c662 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800c65c:	4809      	ldr	r0, [pc, #36]	; (800c684 <MX_LWIP_Init+0x7c>)
 800c65e:	f001 fa15 	bl	800da8c <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800c662:	4808      	ldr	r0, [pc, #32]	; (800c684 <MX_LWIP_Init+0x7c>)
 800c664:	f008 fb82 	bl	8014d6c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800c668:	bf00      	nop
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	20001874 	.word	0x20001874
 800c674:	20001878 	.word	0x20001878
 800c678:	2000187c 	.word	0x2000187c
 800c67c:	08018729 	.word	0x08018729
 800c680:	0800cc19 	.word	0x0800cc19
 800c684:	20000678 	.word	0x20000678

0800c688 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b08e      	sub	sp, #56	; 0x38
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c694:	2200      	movs	r2, #0
 800c696:	601a      	str	r2, [r3, #0]
 800c698:	605a      	str	r2, [r3, #4]
 800c69a:	609a      	str	r2, [r3, #8]
 800c69c:	60da      	str	r2, [r3, #12]
 800c69e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	4a46      	ldr	r2, [pc, #280]	; (800c7c0 <HAL_ETH_MspInit+0x138>)
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	f040 8085 	bne.w	800c7b6 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	623b      	str	r3, [r7, #32]
 800c6b0:	4b44      	ldr	r3, [pc, #272]	; (800c7c4 <HAL_ETH_MspInit+0x13c>)
 800c6b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6b4:	4a43      	ldr	r2, [pc, #268]	; (800c7c4 <HAL_ETH_MspInit+0x13c>)
 800c6b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c6ba:	6313      	str	r3, [r2, #48]	; 0x30
 800c6bc:	4b41      	ldr	r3, [pc, #260]	; (800c7c4 <HAL_ETH_MspInit+0x13c>)
 800c6be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6c4:	623b      	str	r3, [r7, #32]
 800c6c6:	6a3b      	ldr	r3, [r7, #32]
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	61fb      	str	r3, [r7, #28]
 800c6cc:	4b3d      	ldr	r3, [pc, #244]	; (800c7c4 <HAL_ETH_MspInit+0x13c>)
 800c6ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6d0:	4a3c      	ldr	r2, [pc, #240]	; (800c7c4 <HAL_ETH_MspInit+0x13c>)
 800c6d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c6d6:	6313      	str	r3, [r2, #48]	; 0x30
 800c6d8:	4b3a      	ldr	r3, [pc, #232]	; (800c7c4 <HAL_ETH_MspInit+0x13c>)
 800c6da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c6e0:	61fb      	str	r3, [r7, #28]
 800c6e2:	69fb      	ldr	r3, [r7, #28]
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	61bb      	str	r3, [r7, #24]
 800c6e8:	4b36      	ldr	r3, [pc, #216]	; (800c7c4 <HAL_ETH_MspInit+0x13c>)
 800c6ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6ec:	4a35      	ldr	r2, [pc, #212]	; (800c7c4 <HAL_ETH_MspInit+0x13c>)
 800c6ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c6f2:	6313      	str	r3, [r2, #48]	; 0x30
 800c6f4:	4b33      	ldr	r3, [pc, #204]	; (800c7c4 <HAL_ETH_MspInit+0x13c>)
 800c6f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6fc:	61bb      	str	r3, [r7, #24]
 800c6fe:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c700:	2300      	movs	r3, #0
 800c702:	617b      	str	r3, [r7, #20]
 800c704:	4b2f      	ldr	r3, [pc, #188]	; (800c7c4 <HAL_ETH_MspInit+0x13c>)
 800c706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c708:	4a2e      	ldr	r2, [pc, #184]	; (800c7c4 <HAL_ETH_MspInit+0x13c>)
 800c70a:	f043 0304 	orr.w	r3, r3, #4
 800c70e:	6313      	str	r3, [r2, #48]	; 0x30
 800c710:	4b2c      	ldr	r3, [pc, #176]	; (800c7c4 <HAL_ETH_MspInit+0x13c>)
 800c712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c714:	f003 0304 	and.w	r3, r3, #4
 800c718:	617b      	str	r3, [r7, #20]
 800c71a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c71c:	2300      	movs	r3, #0
 800c71e:	613b      	str	r3, [r7, #16]
 800c720:	4b28      	ldr	r3, [pc, #160]	; (800c7c4 <HAL_ETH_MspInit+0x13c>)
 800c722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c724:	4a27      	ldr	r2, [pc, #156]	; (800c7c4 <HAL_ETH_MspInit+0x13c>)
 800c726:	f043 0301 	orr.w	r3, r3, #1
 800c72a:	6313      	str	r3, [r2, #48]	; 0x30
 800c72c:	4b25      	ldr	r3, [pc, #148]	; (800c7c4 <HAL_ETH_MspInit+0x13c>)
 800c72e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c730:	f003 0301 	and.w	r3, r3, #1
 800c734:	613b      	str	r3, [r7, #16]
 800c736:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c738:	2300      	movs	r3, #0
 800c73a:	60fb      	str	r3, [r7, #12]
 800c73c:	4b21      	ldr	r3, [pc, #132]	; (800c7c4 <HAL_ETH_MspInit+0x13c>)
 800c73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c740:	4a20      	ldr	r2, [pc, #128]	; (800c7c4 <HAL_ETH_MspInit+0x13c>)
 800c742:	f043 0302 	orr.w	r3, r3, #2
 800c746:	6313      	str	r3, [r2, #48]	; 0x30
 800c748:	4b1e      	ldr	r3, [pc, #120]	; (800c7c4 <HAL_ETH_MspInit+0x13c>)
 800c74a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c74c:	f003 0302 	and.w	r3, r3, #2
 800c750:	60fb      	str	r3, [r7, #12]
 800c752:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800c754:	2332      	movs	r3, #50	; 0x32
 800c756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c758:	2302      	movs	r3, #2
 800c75a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c75c:	2300      	movs	r3, #0
 800c75e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c760:	2303      	movs	r3, #3
 800c762:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c764:	230b      	movs	r3, #11
 800c766:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c76c:	4619      	mov	r1, r3
 800c76e:	4816      	ldr	r0, [pc, #88]	; (800c7c8 <HAL_ETH_MspInit+0x140>)
 800c770:	f7fe f968 	bl	800aa44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800c774:	2386      	movs	r3, #134	; 0x86
 800c776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c778:	2302      	movs	r3, #2
 800c77a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c77c:	2300      	movs	r3, #0
 800c77e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c780:	2303      	movs	r3, #3
 800c782:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c784:	230b      	movs	r3, #11
 800c786:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c78c:	4619      	mov	r1, r3
 800c78e:	480f      	ldr	r0, [pc, #60]	; (800c7cc <HAL_ETH_MspInit+0x144>)
 800c790:	f7fe f958 	bl	800aa44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800c794:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c79a:	2302      	movs	r3, #2
 800c79c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c7a2:	2303      	movs	r3, #3
 800c7a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c7a6:	230b      	movs	r3, #11
 800c7a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c7aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	4807      	ldr	r0, [pc, #28]	; (800c7d0 <HAL_ETH_MspInit+0x148>)
 800c7b2:	f7fe f947 	bl	800aa44 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800c7b6:	bf00      	nop
 800c7b8:	3738      	adds	r7, #56	; 0x38
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	40028000 	.word	0x40028000
 800c7c4:	40023800 	.word	0x40023800
 800c7c8:	40020800 	.word	0x40020800
 800c7cc:	40020000 	.word	0x40020000
 800c7d0:	40020400 	.word	0x40020400

0800c7d4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b086      	sub	sp, #24
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800c7e0:	4b4e      	ldr	r3, [pc, #312]	; (800c91c <low_level_init+0x148>)
 800c7e2:	4a4f      	ldr	r2, [pc, #316]	; (800c920 <low_level_init+0x14c>)
 800c7e4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800c7e6:	4b4d      	ldr	r3, [pc, #308]	; (800c91c <low_level_init+0x148>)
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 800c7ec:	4b4b      	ldr	r3, [pc, #300]	; (800c91c <low_level_init+0x148>)
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800c7f6:	2380      	movs	r3, #128	; 0x80
 800c7f8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800c7fa:	23e1      	movs	r3, #225	; 0xe1
 800c7fc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800c7fe:	2300      	movs	r3, #0
 800c800:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800c802:	2300      	movs	r3, #0
 800c804:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800c806:	2300      	movs	r3, #0
 800c808:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800c80a:	4a44      	ldr	r2, [pc, #272]	; (800c91c <low_level_init+0x148>)
 800c80c:	f107 0308 	add.w	r3, r7, #8
 800c810:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800c812:	4b42      	ldr	r3, [pc, #264]	; (800c91c <low_level_init+0x148>)
 800c814:	2200      	movs	r2, #0
 800c816:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800c818:	4b40      	ldr	r3, [pc, #256]	; (800c91c <low_level_init+0x148>)
 800c81a:	2200      	movs	r2, #0
 800c81c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800c81e:	4b3f      	ldr	r3, [pc, #252]	; (800c91c <low_level_init+0x148>)
 800c820:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800c824:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800c826:	483d      	ldr	r0, [pc, #244]	; (800c91c <low_level_init+0x148>)
 800c828:	f7fd f978 	bl	8009b1c <HAL_ETH_Init>
 800c82c:	4603      	mov	r3, r0
 800c82e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800c830:	7dfb      	ldrb	r3, [r7, #23]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d108      	bne.n	800c848 <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c83c:	f043 0304 	orr.w	r3, r3, #4
 800c840:	b2da      	uxtb	r2, r3
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800c848:	2304      	movs	r3, #4
 800c84a:	4a36      	ldr	r2, [pc, #216]	; (800c924 <low_level_init+0x150>)
 800c84c:	4936      	ldr	r1, [pc, #216]	; (800c928 <low_level_init+0x154>)
 800c84e:	4833      	ldr	r0, [pc, #204]	; (800c91c <low_level_init+0x148>)
 800c850:	f7fd fb02 	bl	8009e58 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800c854:	2304      	movs	r3, #4
 800c856:	4a35      	ldr	r2, [pc, #212]	; (800c92c <low_level_init+0x158>)
 800c858:	4935      	ldr	r1, [pc, #212]	; (800c930 <low_level_init+0x15c>)
 800c85a:	4830      	ldr	r0, [pc, #192]	; (800c91c <low_level_init+0x148>)
 800c85c:	f7fd fb65 	bl	8009f2a <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2206      	movs	r2, #6
 800c864:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800c868:	4b2c      	ldr	r3, [pc, #176]	; (800c91c <low_level_init+0x148>)
 800c86a:	695b      	ldr	r3, [r3, #20]
 800c86c:	781a      	ldrb	r2, [r3, #0]
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800c874:	4b29      	ldr	r3, [pc, #164]	; (800c91c <low_level_init+0x148>)
 800c876:	695b      	ldr	r3, [r3, #20]
 800c878:	785a      	ldrb	r2, [r3, #1]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800c880:	4b26      	ldr	r3, [pc, #152]	; (800c91c <low_level_init+0x148>)
 800c882:	695b      	ldr	r3, [r3, #20]
 800c884:	789a      	ldrb	r2, [r3, #2]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800c88c:	4b23      	ldr	r3, [pc, #140]	; (800c91c <low_level_init+0x148>)
 800c88e:	695b      	ldr	r3, [r3, #20]
 800c890:	78da      	ldrb	r2, [r3, #3]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800c898:	4b20      	ldr	r3, [pc, #128]	; (800c91c <low_level_init+0x148>)
 800c89a:	695b      	ldr	r3, [r3, #20]
 800c89c:	791a      	ldrb	r2, [r3, #4]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800c8a4:	4b1d      	ldr	r3, [pc, #116]	; (800c91c <low_level_init+0x148>)
 800c8a6:	695b      	ldr	r3, [r3, #20]
 800c8a8:	795a      	ldrb	r2, [r3, #5]
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c8b6:	849a      	strh	r2, [r3, #36]	; 0x24
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c8be:	f043 030a 	orr.w	r3, r3, #10
 800c8c2:	b2da      	uxtb	r2, r3
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800c8ca:	4814      	ldr	r0, [pc, #80]	; (800c91c <low_level_init+0x148>)
 800c8cc:	f7fd fdd6 	bl	800a47c <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  
  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 800c8d0:	f107 0310 	add.w	r3, r7, #16
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	2111      	movs	r1, #17
 800c8d8:	4810      	ldr	r0, [pc, #64]	; (800c91c <low_level_init+0x148>)
 800c8da:	f7fd fd01 	bl	800a2e0 <HAL_ETH_ReadPHYRegister>
  
  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	f043 0303 	orr.w	r3, r3, #3
 800c8e4:	613b      	str	r3, [r7, #16]

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	461a      	mov	r2, r3
 800c8ea:	2111      	movs	r1, #17
 800c8ec:	480b      	ldr	r0, [pc, #44]	; (800c91c <low_level_init+0x148>)
 800c8ee:	f7fd fd5f 	bl	800a3b0 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 800c8f2:	f107 0310 	add.w	r3, r7, #16
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	2112      	movs	r1, #18
 800c8fa:	4808      	ldr	r0, [pc, #32]	; (800c91c <low_level_init+0x148>)
 800c8fc:	f7fd fcf0 	bl	800a2e0 <HAL_ETH_ReadPHYRegister>
  
  regvalue |= PHY_MISR_LINK_INT_EN;
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	f043 0320 	orr.w	r3, r3, #32
 800c906:	613b      	str	r3, [r7, #16]
    
  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	461a      	mov	r2, r3
 800c90c:	2112      	movs	r1, #18
 800c90e:	4803      	ldr	r0, [pc, #12]	; (800c91c <low_level_init+0x148>)
 800c910:	f7fd fd4e 	bl	800a3b0 <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800c914:	bf00      	nop
 800c916:	3718      	adds	r7, #24
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}
 800c91c:	20003150 	.word	0x20003150
 800c920:	40028000 	.word	0x40028000
 800c924:	20003198 	.word	0x20003198
 800c928:	20001880 	.word	0x20001880
 800c92c:	20001900 	.word	0x20001900
 800c930:	200030d0 	.word	0x200030d0

0800c934 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b08a      	sub	sp, #40	; 0x28
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800c93e:	4b4b      	ldr	r3, [pc, #300]	; (800ca6c <low_level_output+0x138>)
 800c940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c942:	689b      	ldr	r3, [r3, #8]
 800c944:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800c946:	2300      	movs	r3, #0
 800c948:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800c94a:	2300      	movs	r3, #0
 800c94c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800c94e:	2300      	movs	r3, #0
 800c950:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800c952:	2300      	movs	r3, #0
 800c954:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800c956:	4b45      	ldr	r3, [pc, #276]	; (800ca6c <low_level_output+0x138>)
 800c958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c95a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800c95c:	2300      	movs	r3, #0
 800c95e:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	623b      	str	r3, [r7, #32]
 800c964:	e05a      	b.n	800ca1c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800c966:	69bb      	ldr	r3, [r7, #24]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	da03      	bge.n	800c976 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800c96e:	23f8      	movs	r3, #248	; 0xf8
 800c970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800c974:	e05c      	b.n	800ca30 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800c976:	6a3b      	ldr	r3, [r7, #32]
 800c978:	895b      	ldrh	r3, [r3, #10]
 800c97a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800c97c:	2300      	movs	r3, #0
 800c97e:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800c980:	e02f      	b.n	800c9e2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800c982:	69fa      	ldr	r2, [r7, #28]
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	18d0      	adds	r0, r2, r3
 800c988:	6a3b      	ldr	r3, [r7, #32]
 800c98a:	685a      	ldr	r2, [r3, #4]
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	18d1      	adds	r1, r2, r3
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800c996:	3304      	adds	r3, #4
 800c998:	461a      	mov	r2, r3
 800c99a:	f00b ffde 	bl	801895a <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800c99e:	69bb      	ldr	r3, [r7, #24]
 800c9a0:	68db      	ldr	r3, [r3, #12]
 800c9a2:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800c9a4:	69bb      	ldr	r3, [r7, #24]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	da03      	bge.n	800c9b4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800c9ac:	23f8      	movs	r3, #248	; 0xf8
 800c9ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800c9b2:	e03d      	b.n	800ca30 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800c9b4:	69bb      	ldr	r3, [r7, #24]
 800c9b6:	689b      	ldr	r3, [r3, #8]
 800c9b8:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800c9ba:	693a      	ldr	r2, [r7, #16]
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	4413      	add	r3, r2
 800c9c0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800c9c4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800c9c6:	68ba      	ldr	r2, [r7, #8]
 800c9c8:	693b      	ldr	r3, [r7, #16]
 800c9ca:	1ad3      	subs	r3, r2, r3
 800c9cc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800c9d0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800c9d2:	697a      	ldr	r2, [r7, #20]
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	1ad3      	subs	r3, r2, r3
 800c9d8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800c9dc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800c9e2:	68fa      	ldr	r2, [r7, #12]
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	4413      	add	r3, r2
 800c9e8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d8c8      	bhi.n	800c982 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800c9f0:	69fa      	ldr	r2, [r7, #28]
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	18d0      	adds	r0, r2, r3
 800c9f6:	6a3b      	ldr	r3, [r7, #32]
 800c9f8:	685a      	ldr	r2, [r3, #4]
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	4413      	add	r3, r2
 800c9fe:	68fa      	ldr	r2, [r7, #12]
 800ca00:	4619      	mov	r1, r3
 800ca02:	f00b ffaa 	bl	801895a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800ca06:	693a      	ldr	r2, [r7, #16]
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	4413      	add	r3, r2
 800ca0c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800ca0e:	697a      	ldr	r2, [r7, #20]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	4413      	add	r3, r2
 800ca14:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800ca16:	6a3b      	ldr	r3, [r7, #32]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	623b      	str	r3, [r7, #32]
 800ca1c:	6a3b      	ldr	r3, [r7, #32]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d1a1      	bne.n	800c966 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800ca22:	6979      	ldr	r1, [r7, #20]
 800ca24:	4811      	ldr	r0, [pc, #68]	; (800ca6c <low_level_output+0x138>)
 800ca26:	f7fd faed 	bl	800a004 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800ca30:	4b0e      	ldr	r3, [pc, #56]	; (800ca6c <low_level_output+0x138>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca38:	3314      	adds	r3, #20
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f003 0320 	and.w	r3, r3, #32
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d00d      	beq.n	800ca60 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800ca44:	4b09      	ldr	r3, [pc, #36]	; (800ca6c <low_level_output+0x138>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca4c:	3314      	adds	r3, #20
 800ca4e:	2220      	movs	r2, #32
 800ca50:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800ca52:	4b06      	ldr	r3, [pc, #24]	; (800ca6c <low_level_output+0x138>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca5a:	3304      	adds	r3, #4
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800ca60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ca64:	4618      	mov	r0, r3
 800ca66:	3728      	adds	r7, #40	; 0x28
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}
 800ca6c:	20003150 	.word	0x20003150

0800ca70 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b08c      	sub	sp, #48	; 0x30
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800ca80:	2300      	movs	r3, #0
 800ca82:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800ca84:	2300      	movs	r3, #0
 800ca86:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800ca88:	2300      	movs	r3, #0
 800ca8a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800ca90:	2300      	movs	r3, #0
 800ca92:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800ca94:	484f      	ldr	r0, [pc, #316]	; (800cbd4 <low_level_input+0x164>)
 800ca96:	f7fd fb9f 	bl	800a1d8 <HAL_ETH_GetReceivedFrame>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d001      	beq.n	800caa4 <low_level_input+0x34>
  
    return NULL;
 800caa0:	2300      	movs	r3, #0
 800caa2:	e092      	b.n	800cbca <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800caa4:	4b4b      	ldr	r3, [pc, #300]	; (800cbd4 <low_level_input+0x164>)
 800caa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800caa8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800caaa:	4b4a      	ldr	r3, [pc, #296]	; (800cbd4 <low_level_input+0x164>)
 800caac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caae:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 800cab0:	89fb      	ldrh	r3, [r7, #14]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d007      	beq.n	800cac6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800cab6:	89fb      	ldrh	r3, [r7, #14]
 800cab8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800cabc:	4619      	mov	r1, r3
 800cabe:	2000      	movs	r0, #0
 800cac0:	f001 f8a0 	bl	800dc04 <pbuf_alloc>
 800cac4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 800cac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d04b      	beq.n	800cb64 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800cacc:	4b41      	ldr	r3, [pc, #260]	; (800cbd4 <low_level_input+0x164>)
 800cace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cad0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800cad2:	2300      	movs	r3, #0
 800cad4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800cad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad8:	62bb      	str	r3, [r7, #40]	; 0x28
 800cada:	e040      	b.n	800cb5e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800cadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cade:	895b      	ldrh	r3, [r3, #10]
 800cae0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800cae2:	2300      	movs	r3, #0
 800cae4:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800cae6:	e021      	b.n	800cb2c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800cae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caea:	685a      	ldr	r2, [r3, #4]
 800caec:	69bb      	ldr	r3, [r7, #24]
 800caee:	18d0      	adds	r0, r2, r3
 800caf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caf2:	69fb      	ldr	r3, [r7, #28]
 800caf4:	18d1      	adds	r1, r2, r3
 800caf6:	69fb      	ldr	r3, [r7, #28]
 800caf8:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800cafc:	3304      	adds	r3, #4
 800cafe:	461a      	mov	r2, r3
 800cb00:	f00b ff2b 	bl	801895a <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800cb04:	6a3b      	ldr	r3, [r7, #32]
 800cb06:	68db      	ldr	r3, [r3, #12]
 800cb08:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800cb0a:	6a3b      	ldr	r3, [r7, #32]
 800cb0c:	689b      	ldr	r3, [r3, #8]
 800cb0e:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800cb10:	69fa      	ldr	r2, [r7, #28]
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	4413      	add	r3, r2
 800cb16:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800cb1a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800cb1c:	69ba      	ldr	r2, [r7, #24]
 800cb1e:	69fb      	ldr	r3, [r7, #28]
 800cb20:	1ad3      	subs	r3, r2, r3
 800cb22:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800cb26:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800cb2c:	697a      	ldr	r2, [r7, #20]
 800cb2e:	69fb      	ldr	r3, [r7, #28]
 800cb30:	4413      	add	r3, r2
 800cb32:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d8d6      	bhi.n	800cae8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800cb3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb3c:	685a      	ldr	r2, [r3, #4]
 800cb3e:	69bb      	ldr	r3, [r7, #24]
 800cb40:	18d0      	adds	r0, r2, r3
 800cb42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb44:	69fb      	ldr	r3, [r7, #28]
 800cb46:	4413      	add	r3, r2
 800cb48:	697a      	ldr	r2, [r7, #20]
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	f00b ff05 	bl	801895a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800cb50:	69fa      	ldr	r2, [r7, #28]
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	4413      	add	r3, r2
 800cb56:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800cb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d1bb      	bne.n	800cadc <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800cb64:	4b1b      	ldr	r3, [pc, #108]	; (800cbd4 <low_level_input+0x164>)
 800cb66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb68:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	613b      	str	r3, [r7, #16]
 800cb6e:	e00b      	b.n	800cb88 <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800cb70:	6a3b      	ldr	r3, [r7, #32]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800cb78:	6a3b      	ldr	r3, [r7, #32]
 800cb7a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800cb7c:	6a3b      	ldr	r3, [r7, #32]
 800cb7e:	68db      	ldr	r3, [r3, #12]
 800cb80:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	3301      	adds	r3, #1
 800cb86:	613b      	str	r3, [r7, #16]
 800cb88:	4b12      	ldr	r3, [pc, #72]	; (800cbd4 <low_level_input+0x164>)
 800cb8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb8c:	693a      	ldr	r2, [r7, #16]
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d3ee      	bcc.n	800cb70 <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 800cb92:	4b10      	ldr	r3, [pc, #64]	; (800cbd4 <low_level_input+0x164>)
 800cb94:	2200      	movs	r2, #0
 800cb96:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800cb98:	4b0e      	ldr	r3, [pc, #56]	; (800cbd4 <low_level_input+0x164>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cba0:	3314      	adds	r3, #20
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d00d      	beq.n	800cbc8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800cbac:	4b09      	ldr	r3, [pc, #36]	; (800cbd4 <low_level_input+0x164>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbb4:	3314      	adds	r3, #20
 800cbb6:	2280      	movs	r2, #128	; 0x80
 800cbb8:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800cbba:	4b06      	ldr	r3, [pc, #24]	; (800cbd4 <low_level_input+0x164>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cbc2:	3308      	adds	r3, #8
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	601a      	str	r2, [r3, #0]
  }
  return p;
 800cbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3730      	adds	r7, #48	; 0x30
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	20003150 	.word	0x20003150

0800cbd8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b084      	sub	sp, #16
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f7ff ff45 	bl	800ca70 <low_level_input>
 800cbe6:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d010      	beq.n	800cc10 <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	691b      	ldr	r3, [r3, #16]
 800cbf2:	6879      	ldr	r1, [r7, #4]
 800cbf4:	68f8      	ldr	r0, [r7, #12]
 800cbf6:	4798      	blx	r3
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 800cbfc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d006      	beq.n	800cc12 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800cc04:	68f8      	ldr	r0, [r7, #12]
 800cc06:	f001 fadd 	bl	800e1c4 <pbuf_free>
    p = NULL;    
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	60fb      	str	r3, [r7, #12]
 800cc0e:	e000      	b.n	800cc12 <ethernetif_input+0x3a>
  if (p == NULL) return;
 800cc10:	bf00      	nop
  }
}
 800cc12:	3710      	adds	r7, #16
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}

0800cc18 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d106      	bne.n	800cc34 <ethernetif_init+0x1c>
 800cc26:	4b0e      	ldr	r3, [pc, #56]	; (800cc60 <ethernetif_init+0x48>)
 800cc28:	f240 220d 	movw	r2, #525	; 0x20d
 800cc2c:	490d      	ldr	r1, [pc, #52]	; (800cc64 <ethernetif_init+0x4c>)
 800cc2e:	480e      	ldr	r0, [pc, #56]	; (800cc68 <ethernetif_init+0x50>)
 800cc30:	f00b ff4e 	bl	8018ad0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2273      	movs	r2, #115	; 0x73
 800cc38:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2274      	movs	r2, #116	; 0x74
 800cc40:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	4a09      	ldr	r2, [pc, #36]	; (800cc6c <ethernetif_init+0x54>)
 800cc48:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	4a08      	ldr	r2, [pc, #32]	; (800cc70 <ethernetif_init+0x58>)
 800cc4e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f7ff fdbf 	bl	800c7d4 <low_level_init>

  return ERR_OK;
 800cc56:	2300      	movs	r3, #0
}
 800cc58:	4618      	mov	r0, r3
 800cc5a:	3708      	adds	r7, #8
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}
 800cc60:	080198fc 	.word	0x080198fc
 800cc64:	08019918 	.word	0x08019918
 800cc68:	08019928 	.word	0x08019928
 800cc6c:	08016bbd 	.word	0x08016bbd
 800cc70:	0800c935 	.word	0x0800c935

0800cc74 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800cc78:	f7fc fe10 	bl	800989c <HAL_GetTick>
 800cc7c:	4603      	mov	r3, r0
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	bd80      	pop	{r7, pc}

0800cc82 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800cc82:	b480      	push	{r7}
 800cc84:	b083      	sub	sp, #12
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	4603      	mov	r3, r0
 800cc8a:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800cc8c:	88fb      	ldrh	r3, [r7, #6]
 800cc8e:	021b      	lsls	r3, r3, #8
 800cc90:	b21a      	sxth	r2, r3
 800cc92:	88fb      	ldrh	r3, [r7, #6]
 800cc94:	0a1b      	lsrs	r3, r3, #8
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	b21b      	sxth	r3, r3
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	b21b      	sxth	r3, r3
 800cc9e:	b29b      	uxth	r3, r3
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	370c      	adds	r7, #12
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr

0800ccac <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ccac:	b480      	push	{r7}
 800ccae:	b083      	sub	sp, #12
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	061a      	lsls	r2, r3, #24
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	021b      	lsls	r3, r3, #8
 800ccbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ccc0:	431a      	orrs	r2, r3
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	0a1b      	lsrs	r3, r3, #8
 800ccc6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ccca:	431a      	orrs	r2, r3
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	0e1b      	lsrs	r3, r3, #24
 800ccd0:	4313      	orrs	r3, r2
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	370c      	adds	r7, #12
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr

0800ccde <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ccde:	b580      	push	{r7, lr}
 800cce0:	b082      	sub	sp, #8
 800cce2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800cce4:	2300      	movs	r3, #0
 800cce6:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800cce8:	f000 f8d4 	bl	800ce94 <mem_init>
  memp_init();
 800ccec:	f000 fbda 	bl	800d4a4 <memp_init>
  pbuf_init();
  netif_init();
 800ccf0:	f000 fc92 	bl	800d618 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ccf4:	f006 ffa6 	bl	8013c44 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ccf8:	f001 fd02 	bl	800e700 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ccfc:	f006 ff1a 	bl	8013b34 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800cd00:	bf00      	nop
 800cd02:	3708      	adds	r7, #8
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b083      	sub	sp, #12
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	4603      	mov	r3, r0
 800cd10:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800cd12:	4b05      	ldr	r3, [pc, #20]	; (800cd28 <ptr_to_mem+0x20>)
 800cd14:	681a      	ldr	r2, [r3, #0]
 800cd16:	88fb      	ldrh	r3, [r7, #6]
 800cd18:	4413      	add	r3, r2
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	370c      	adds	r7, #12
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd24:	4770      	bx	lr
 800cd26:	bf00      	nop
 800cd28:	20000448 	.word	0x20000448

0800cd2c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800cd2c:	b480      	push	{r7}
 800cd2e:	b083      	sub	sp, #12
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	4a05      	ldr	r2, [pc, #20]	; (800cd4c <mem_to_ptr+0x20>)
 800cd38:	6812      	ldr	r2, [r2, #0]
 800cd3a:	1a9b      	subs	r3, r3, r2
 800cd3c:	b29b      	uxth	r3, r3
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	370c      	adds	r7, #12
 800cd42:	46bd      	mov	sp, r7
 800cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd48:	4770      	bx	lr
 800cd4a:	bf00      	nop
 800cd4c:	20000448 	.word	0x20000448

0800cd50 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800cd50:	b590      	push	{r4, r7, lr}
 800cd52:	b085      	sub	sp, #20
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800cd58:	4b45      	ldr	r3, [pc, #276]	; (800ce70 <plug_holes+0x120>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	687a      	ldr	r2, [r7, #4]
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d206      	bcs.n	800cd70 <plug_holes+0x20>
 800cd62:	4b44      	ldr	r3, [pc, #272]	; (800ce74 <plug_holes+0x124>)
 800cd64:	f240 12df 	movw	r2, #479	; 0x1df
 800cd68:	4943      	ldr	r1, [pc, #268]	; (800ce78 <plug_holes+0x128>)
 800cd6a:	4844      	ldr	r0, [pc, #272]	; (800ce7c <plug_holes+0x12c>)
 800cd6c:	f00b feb0 	bl	8018ad0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800cd70:	4b43      	ldr	r3, [pc, #268]	; (800ce80 <plug_holes+0x130>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	687a      	ldr	r2, [r7, #4]
 800cd76:	429a      	cmp	r2, r3
 800cd78:	d306      	bcc.n	800cd88 <plug_holes+0x38>
 800cd7a:	4b3e      	ldr	r3, [pc, #248]	; (800ce74 <plug_holes+0x124>)
 800cd7c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800cd80:	4940      	ldr	r1, [pc, #256]	; (800ce84 <plug_holes+0x134>)
 800cd82:	483e      	ldr	r0, [pc, #248]	; (800ce7c <plug_holes+0x12c>)
 800cd84:	f00b fea4 	bl	8018ad0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	791b      	ldrb	r3, [r3, #4]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d006      	beq.n	800cd9e <plug_holes+0x4e>
 800cd90:	4b38      	ldr	r3, [pc, #224]	; (800ce74 <plug_holes+0x124>)
 800cd92:	f240 12e1 	movw	r2, #481	; 0x1e1
 800cd96:	493c      	ldr	r1, [pc, #240]	; (800ce88 <plug_holes+0x138>)
 800cd98:	4838      	ldr	r0, [pc, #224]	; (800ce7c <plug_holes+0x12c>)
 800cd9a:	f00b fe99 	bl	8018ad0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	881b      	ldrh	r3, [r3, #0]
 800cda2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cda6:	d906      	bls.n	800cdb6 <plug_holes+0x66>
 800cda8:	4b32      	ldr	r3, [pc, #200]	; (800ce74 <plug_holes+0x124>)
 800cdaa:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800cdae:	4937      	ldr	r1, [pc, #220]	; (800ce8c <plug_holes+0x13c>)
 800cdb0:	4832      	ldr	r0, [pc, #200]	; (800ce7c <plug_holes+0x12c>)
 800cdb2:	f00b fe8d 	bl	8018ad0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	881b      	ldrh	r3, [r3, #0]
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7ff ffa4 	bl	800cd08 <ptr_to_mem>
 800cdc0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800cdc2:	687a      	ldr	r2, [r7, #4]
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d024      	beq.n	800ce14 <plug_holes+0xc4>
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	791b      	ldrb	r3, [r3, #4]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d120      	bne.n	800ce14 <plug_holes+0xc4>
 800cdd2:	4b2b      	ldr	r3, [pc, #172]	; (800ce80 <plug_holes+0x130>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	68fa      	ldr	r2, [r7, #12]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d01b      	beq.n	800ce14 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800cddc:	4b2c      	ldr	r3, [pc, #176]	; (800ce90 <plug_holes+0x140>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	68fa      	ldr	r2, [r7, #12]
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d102      	bne.n	800cdec <plug_holes+0x9c>
      lfree = mem;
 800cde6:	4a2a      	ldr	r2, [pc, #168]	; (800ce90 <plug_holes+0x140>)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	881a      	ldrh	r2, [r3, #0]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	881b      	ldrh	r3, [r3, #0]
 800cdf8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cdfc:	d00a      	beq.n	800ce14 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	881b      	ldrh	r3, [r3, #0]
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7ff ff80 	bl	800cd08 <ptr_to_mem>
 800ce08:	4604      	mov	r4, r0
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f7ff ff8e 	bl	800cd2c <mem_to_ptr>
 800ce10:	4603      	mov	r3, r0
 800ce12:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	885b      	ldrh	r3, [r3, #2]
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7ff ff75 	bl	800cd08 <ptr_to_mem>
 800ce1e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ce20:	68ba      	ldr	r2, [r7, #8]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d01f      	beq.n	800ce68 <plug_holes+0x118>
 800ce28:	68bb      	ldr	r3, [r7, #8]
 800ce2a:	791b      	ldrb	r3, [r3, #4]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d11b      	bne.n	800ce68 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ce30:	4b17      	ldr	r3, [pc, #92]	; (800ce90 <plug_holes+0x140>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	687a      	ldr	r2, [r7, #4]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d102      	bne.n	800ce40 <plug_holes+0xf0>
      lfree = pmem;
 800ce3a:	4a15      	ldr	r2, [pc, #84]	; (800ce90 <plug_holes+0x140>)
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	881a      	ldrh	r2, [r3, #0]
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	881b      	ldrh	r3, [r3, #0]
 800ce4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ce50:	d00a      	beq.n	800ce68 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	881b      	ldrh	r3, [r3, #0]
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7ff ff56 	bl	800cd08 <ptr_to_mem>
 800ce5c:	4604      	mov	r4, r0
 800ce5e:	68b8      	ldr	r0, [r7, #8]
 800ce60:	f7ff ff64 	bl	800cd2c <mem_to_ptr>
 800ce64:	4603      	mov	r3, r0
 800ce66:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ce68:	bf00      	nop
 800ce6a:	3714      	adds	r7, #20
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	bd90      	pop	{r4, r7, pc}
 800ce70:	20000448 	.word	0x20000448
 800ce74:	08019950 	.word	0x08019950
 800ce78:	08019980 	.word	0x08019980
 800ce7c:	08019998 	.word	0x08019998
 800ce80:	2000044c 	.word	0x2000044c
 800ce84:	080199c0 	.word	0x080199c0
 800ce88:	080199dc 	.word	0x080199dc
 800ce8c:	080199f8 	.word	0x080199f8
 800ce90:	20000450 	.word	0x20000450

0800ce94 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b082      	sub	sp, #8
 800ce98:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ce9a:	4b18      	ldr	r3, [pc, #96]	; (800cefc <mem_init+0x68>)
 800ce9c:	3303      	adds	r3, #3
 800ce9e:	f023 0303 	bic.w	r3, r3, #3
 800cea2:	461a      	mov	r2, r3
 800cea4:	4b16      	ldr	r3, [pc, #88]	; (800cf00 <mem_init+0x6c>)
 800cea6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800cea8:	4b15      	ldr	r3, [pc, #84]	; (800cf00 <mem_init+0x6c>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ceb4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2200      	movs	r2, #0
 800cec0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800cec2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800cec6:	f7ff ff1f 	bl	800cd08 <ptr_to_mem>
 800ceca:	4602      	mov	r2, r0
 800cecc:	4b0d      	ldr	r3, [pc, #52]	; (800cf04 <mem_init+0x70>)
 800cece:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800ced0:	4b0c      	ldr	r3, [pc, #48]	; (800cf04 <mem_init+0x70>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	2201      	movs	r2, #1
 800ced6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ced8:	4b0a      	ldr	r3, [pc, #40]	; (800cf04 <mem_init+0x70>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cee0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800cee2:	4b08      	ldr	r3, [pc, #32]	; (800cf04 <mem_init+0x70>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ceea:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ceec:	4b04      	ldr	r3, [pc, #16]	; (800cf00 <mem_init+0x6c>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	4a05      	ldr	r2, [pc, #20]	; (800cf08 <mem_init+0x74>)
 800cef2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800cef4:	bf00      	nop
 800cef6:	3708      	adds	r7, #8
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	20004980 	.word	0x20004980
 800cf00:	20000448 	.word	0x20000448
 800cf04:	2000044c 	.word	0x2000044c
 800cf08:	20000450 	.word	0x20000450

0800cf0c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b086      	sub	sp, #24
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f7ff ff09 	bl	800cd2c <mem_to_ptr>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	881b      	ldrh	r3, [r3, #0]
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7ff fef0 	bl	800cd08 <ptr_to_mem>
 800cf28:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	885b      	ldrh	r3, [r3, #2]
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7ff feea 	bl	800cd08 <ptr_to_mem>
 800cf34:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	881b      	ldrh	r3, [r3, #0]
 800cf3a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cf3e:	d818      	bhi.n	800cf72 <mem_link_valid+0x66>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	885b      	ldrh	r3, [r3, #2]
 800cf44:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cf48:	d813      	bhi.n	800cf72 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cf4e:	8afa      	ldrh	r2, [r7, #22]
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d004      	beq.n	800cf5e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	881b      	ldrh	r3, [r3, #0]
 800cf58:	8afa      	ldrh	r2, [r7, #22]
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d109      	bne.n	800cf72 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cf5e:	4b08      	ldr	r3, [pc, #32]	; (800cf80 <mem_link_valid+0x74>)
 800cf60:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cf62:	693a      	ldr	r2, [r7, #16]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d006      	beq.n	800cf76 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	885b      	ldrh	r3, [r3, #2]
 800cf6c:	8afa      	ldrh	r2, [r7, #22]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d001      	beq.n	800cf76 <mem_link_valid+0x6a>
    return 0;
 800cf72:	2300      	movs	r3, #0
 800cf74:	e000      	b.n	800cf78 <mem_link_valid+0x6c>
  }
  return 1;
 800cf76:	2301      	movs	r3, #1
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3718      	adds	r7, #24
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	2000044c 	.word	0x2000044c

0800cf84 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b084      	sub	sp, #16
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d04c      	beq.n	800d02c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f003 0303 	and.w	r3, r3, #3
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d007      	beq.n	800cfac <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800cf9c:	4b25      	ldr	r3, [pc, #148]	; (800d034 <mem_free+0xb0>)
 800cf9e:	f240 2273 	movw	r2, #627	; 0x273
 800cfa2:	4925      	ldr	r1, [pc, #148]	; (800d038 <mem_free+0xb4>)
 800cfa4:	4825      	ldr	r0, [pc, #148]	; (800d03c <mem_free+0xb8>)
 800cfa6:	f00b fd93 	bl	8018ad0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800cfaa:	e040      	b.n	800d02e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	3b08      	subs	r3, #8
 800cfb0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800cfb2:	4b23      	ldr	r3, [pc, #140]	; (800d040 <mem_free+0xbc>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	68fa      	ldr	r2, [r7, #12]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d306      	bcc.n	800cfca <mem_free+0x46>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f103 020c 	add.w	r2, r3, #12
 800cfc2:	4b20      	ldr	r3, [pc, #128]	; (800d044 <mem_free+0xc0>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d907      	bls.n	800cfda <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800cfca:	4b1a      	ldr	r3, [pc, #104]	; (800d034 <mem_free+0xb0>)
 800cfcc:	f240 227f 	movw	r2, #639	; 0x27f
 800cfd0:	491d      	ldr	r1, [pc, #116]	; (800d048 <mem_free+0xc4>)
 800cfd2:	481a      	ldr	r0, [pc, #104]	; (800d03c <mem_free+0xb8>)
 800cfd4:	f00b fd7c 	bl	8018ad0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800cfd8:	e029      	b.n	800d02e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	791b      	ldrb	r3, [r3, #4]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d107      	bne.n	800cff2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800cfe2:	4b14      	ldr	r3, [pc, #80]	; (800d034 <mem_free+0xb0>)
 800cfe4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800cfe8:	4918      	ldr	r1, [pc, #96]	; (800d04c <mem_free+0xc8>)
 800cfea:	4814      	ldr	r0, [pc, #80]	; (800d03c <mem_free+0xb8>)
 800cfec:	f00b fd70 	bl	8018ad0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800cff0:	e01d      	b.n	800d02e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800cff2:	68f8      	ldr	r0, [r7, #12]
 800cff4:	f7ff ff8a 	bl	800cf0c <mem_link_valid>
 800cff8:	4603      	mov	r3, r0
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d107      	bne.n	800d00e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800cffe:	4b0d      	ldr	r3, [pc, #52]	; (800d034 <mem_free+0xb0>)
 800d000:	f240 2295 	movw	r2, #661	; 0x295
 800d004:	4912      	ldr	r1, [pc, #72]	; (800d050 <mem_free+0xcc>)
 800d006:	480d      	ldr	r0, [pc, #52]	; (800d03c <mem_free+0xb8>)
 800d008:	f00b fd62 	bl	8018ad0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800d00c:	e00f      	b.n	800d02e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	2200      	movs	r2, #0
 800d012:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d014:	4b0f      	ldr	r3, [pc, #60]	; (800d054 <mem_free+0xd0>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	68fa      	ldr	r2, [r7, #12]
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d202      	bcs.n	800d024 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d01e:	4a0d      	ldr	r2, [pc, #52]	; (800d054 <mem_free+0xd0>)
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d024:	68f8      	ldr	r0, [r7, #12]
 800d026:	f7ff fe93 	bl	800cd50 <plug_holes>
 800d02a:	e000      	b.n	800d02e <mem_free+0xaa>
    return;
 800d02c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800d02e:	3710      	adds	r7, #16
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}
 800d034:	08019950 	.word	0x08019950
 800d038:	08019a24 	.word	0x08019a24
 800d03c:	08019998 	.word	0x08019998
 800d040:	20000448 	.word	0x20000448
 800d044:	2000044c 	.word	0x2000044c
 800d048:	08019a48 	.word	0x08019a48
 800d04c:	08019a64 	.word	0x08019a64
 800d050:	08019a8c 	.word	0x08019a8c
 800d054:	20000450 	.word	0x20000450

0800d058 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b088      	sub	sp, #32
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
 800d060:	460b      	mov	r3, r1
 800d062:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d064:	887b      	ldrh	r3, [r7, #2]
 800d066:	3303      	adds	r3, #3
 800d068:	b29b      	uxth	r3, r3
 800d06a:	f023 0303 	bic.w	r3, r3, #3
 800d06e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d070:	8bfb      	ldrh	r3, [r7, #30]
 800d072:	2b0b      	cmp	r3, #11
 800d074:	d801      	bhi.n	800d07a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d076:	230c      	movs	r3, #12
 800d078:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d07a:	8bfb      	ldrh	r3, [r7, #30]
 800d07c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d080:	d803      	bhi.n	800d08a <mem_trim+0x32>
 800d082:	8bfa      	ldrh	r2, [r7, #30]
 800d084:	887b      	ldrh	r3, [r7, #2]
 800d086:	429a      	cmp	r2, r3
 800d088:	d201      	bcs.n	800d08e <mem_trim+0x36>
    return NULL;
 800d08a:	2300      	movs	r3, #0
 800d08c:	e0cc      	b.n	800d228 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d08e:	4b68      	ldr	r3, [pc, #416]	; (800d230 <mem_trim+0x1d8>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	687a      	ldr	r2, [r7, #4]
 800d094:	429a      	cmp	r2, r3
 800d096:	d304      	bcc.n	800d0a2 <mem_trim+0x4a>
 800d098:	4b66      	ldr	r3, [pc, #408]	; (800d234 <mem_trim+0x1dc>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	687a      	ldr	r2, [r7, #4]
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d306      	bcc.n	800d0b0 <mem_trim+0x58>
 800d0a2:	4b65      	ldr	r3, [pc, #404]	; (800d238 <mem_trim+0x1e0>)
 800d0a4:	f240 22d2 	movw	r2, #722	; 0x2d2
 800d0a8:	4964      	ldr	r1, [pc, #400]	; (800d23c <mem_trim+0x1e4>)
 800d0aa:	4865      	ldr	r0, [pc, #404]	; (800d240 <mem_trim+0x1e8>)
 800d0ac:	f00b fd10 	bl	8018ad0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d0b0:	4b5f      	ldr	r3, [pc, #380]	; (800d230 <mem_trim+0x1d8>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d304      	bcc.n	800d0c4 <mem_trim+0x6c>
 800d0ba:	4b5e      	ldr	r3, [pc, #376]	; (800d234 <mem_trim+0x1dc>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d301      	bcc.n	800d0c8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	e0af      	b.n	800d228 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	3b08      	subs	r3, #8
 800d0cc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d0ce:	69b8      	ldr	r0, [r7, #24]
 800d0d0:	f7ff fe2c 	bl	800cd2c <mem_to_ptr>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d0d8:	69bb      	ldr	r3, [r7, #24]
 800d0da:	881a      	ldrh	r2, [r3, #0]
 800d0dc:	8afb      	ldrh	r3, [r7, #22]
 800d0de:	1ad3      	subs	r3, r2, r3
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	3b08      	subs	r3, #8
 800d0e4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d0e6:	8bfa      	ldrh	r2, [r7, #30]
 800d0e8:	8abb      	ldrh	r3, [r7, #20]
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d906      	bls.n	800d0fc <mem_trim+0xa4>
 800d0ee:	4b52      	ldr	r3, [pc, #328]	; (800d238 <mem_trim+0x1e0>)
 800d0f0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d0f4:	4953      	ldr	r1, [pc, #332]	; (800d244 <mem_trim+0x1ec>)
 800d0f6:	4852      	ldr	r0, [pc, #328]	; (800d240 <mem_trim+0x1e8>)
 800d0f8:	f00b fcea 	bl	8018ad0 <iprintf>
  if (newsize > size) {
 800d0fc:	8bfa      	ldrh	r2, [r7, #30]
 800d0fe:	8abb      	ldrh	r3, [r7, #20]
 800d100:	429a      	cmp	r2, r3
 800d102:	d901      	bls.n	800d108 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800d104:	2300      	movs	r3, #0
 800d106:	e08f      	b.n	800d228 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800d108:	8bfa      	ldrh	r2, [r7, #30]
 800d10a:	8abb      	ldrh	r3, [r7, #20]
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d101      	bne.n	800d114 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	e089      	b.n	800d228 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800d114:	69bb      	ldr	r3, [r7, #24]
 800d116:	881b      	ldrh	r3, [r3, #0]
 800d118:	4618      	mov	r0, r3
 800d11a:	f7ff fdf5 	bl	800cd08 <ptr_to_mem>
 800d11e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	791b      	ldrb	r3, [r3, #4]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d13f      	bne.n	800d1a8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d128:	69bb      	ldr	r3, [r7, #24]
 800d12a:	881b      	ldrh	r3, [r3, #0]
 800d12c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d130:	d106      	bne.n	800d140 <mem_trim+0xe8>
 800d132:	4b41      	ldr	r3, [pc, #260]	; (800d238 <mem_trim+0x1e0>)
 800d134:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d138:	4943      	ldr	r1, [pc, #268]	; (800d248 <mem_trim+0x1f0>)
 800d13a:	4841      	ldr	r0, [pc, #260]	; (800d240 <mem_trim+0x1e8>)
 800d13c:	f00b fcc8 	bl	8018ad0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	881b      	ldrh	r3, [r3, #0]
 800d144:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d146:	8afa      	ldrh	r2, [r7, #22]
 800d148:	8bfb      	ldrh	r3, [r7, #30]
 800d14a:	4413      	add	r3, r2
 800d14c:	b29b      	uxth	r3, r3
 800d14e:	3308      	adds	r3, #8
 800d150:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d152:	4b3e      	ldr	r3, [pc, #248]	; (800d24c <mem_trim+0x1f4>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	693a      	ldr	r2, [r7, #16]
 800d158:	429a      	cmp	r2, r3
 800d15a:	d106      	bne.n	800d16a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800d15c:	89fb      	ldrh	r3, [r7, #14]
 800d15e:	4618      	mov	r0, r3
 800d160:	f7ff fdd2 	bl	800cd08 <ptr_to_mem>
 800d164:	4602      	mov	r2, r0
 800d166:	4b39      	ldr	r3, [pc, #228]	; (800d24c <mem_trim+0x1f4>)
 800d168:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d16a:	89fb      	ldrh	r3, [r7, #14]
 800d16c:	4618      	mov	r0, r3
 800d16e:	f7ff fdcb 	bl	800cd08 <ptr_to_mem>
 800d172:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	2200      	movs	r2, #0
 800d178:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	89ba      	ldrh	r2, [r7, #12]
 800d17e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	8afa      	ldrh	r2, [r7, #22]
 800d184:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d186:	69bb      	ldr	r3, [r7, #24]
 800d188:	89fa      	ldrh	r2, [r7, #14]
 800d18a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	881b      	ldrh	r3, [r3, #0]
 800d190:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d194:	d047      	beq.n	800d226 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	881b      	ldrh	r3, [r3, #0]
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7ff fdb4 	bl	800cd08 <ptr_to_mem>
 800d1a0:	4602      	mov	r2, r0
 800d1a2:	89fb      	ldrh	r3, [r7, #14]
 800d1a4:	8053      	strh	r3, [r2, #2]
 800d1a6:	e03e      	b.n	800d226 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d1a8:	8bfb      	ldrh	r3, [r7, #30]
 800d1aa:	f103 0214 	add.w	r2, r3, #20
 800d1ae:	8abb      	ldrh	r3, [r7, #20]
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d838      	bhi.n	800d226 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d1b4:	8afa      	ldrh	r2, [r7, #22]
 800d1b6:	8bfb      	ldrh	r3, [r7, #30]
 800d1b8:	4413      	add	r3, r2
 800d1ba:	b29b      	uxth	r3, r3
 800d1bc:	3308      	adds	r3, #8
 800d1be:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d1c0:	69bb      	ldr	r3, [r7, #24]
 800d1c2:	881b      	ldrh	r3, [r3, #0]
 800d1c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d1c8:	d106      	bne.n	800d1d8 <mem_trim+0x180>
 800d1ca:	4b1b      	ldr	r3, [pc, #108]	; (800d238 <mem_trim+0x1e0>)
 800d1cc:	f240 3216 	movw	r2, #790	; 0x316
 800d1d0:	491d      	ldr	r1, [pc, #116]	; (800d248 <mem_trim+0x1f0>)
 800d1d2:	481b      	ldr	r0, [pc, #108]	; (800d240 <mem_trim+0x1e8>)
 800d1d4:	f00b fc7c 	bl	8018ad0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d1d8:	89fb      	ldrh	r3, [r7, #14]
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7ff fd94 	bl	800cd08 <ptr_to_mem>
 800d1e0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d1e2:	4b1a      	ldr	r3, [pc, #104]	; (800d24c <mem_trim+0x1f4>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	693a      	ldr	r2, [r7, #16]
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d202      	bcs.n	800d1f2 <mem_trim+0x19a>
      lfree = mem2;
 800d1ec:	4a17      	ldr	r2, [pc, #92]	; (800d24c <mem_trim+0x1f4>)
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d1f8:	69bb      	ldr	r3, [r7, #24]
 800d1fa:	881a      	ldrh	r2, [r3, #0]
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	8afa      	ldrh	r2, [r7, #22]
 800d204:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d206:	69bb      	ldr	r3, [r7, #24]
 800d208:	89fa      	ldrh	r2, [r7, #14]
 800d20a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	881b      	ldrh	r3, [r3, #0]
 800d210:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d214:	d007      	beq.n	800d226 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	881b      	ldrh	r3, [r3, #0]
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7ff fd74 	bl	800cd08 <ptr_to_mem>
 800d220:	4602      	mov	r2, r0
 800d222:	89fb      	ldrh	r3, [r7, #14]
 800d224:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800d226:	687b      	ldr	r3, [r7, #4]
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3720      	adds	r7, #32
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}
 800d230:	20000448 	.word	0x20000448
 800d234:	2000044c 	.word	0x2000044c
 800d238:	08019950 	.word	0x08019950
 800d23c:	08019ac0 	.word	0x08019ac0
 800d240:	08019998 	.word	0x08019998
 800d244:	08019ad8 	.word	0x08019ad8
 800d248:	08019af8 	.word	0x08019af8
 800d24c:	20000450 	.word	0x20000450

0800d250 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b088      	sub	sp, #32
 800d254:	af00      	add	r7, sp, #0
 800d256:	4603      	mov	r3, r0
 800d258:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d25a:	88fb      	ldrh	r3, [r7, #6]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d101      	bne.n	800d264 <mem_malloc+0x14>
    return NULL;
 800d260:	2300      	movs	r3, #0
 800d262:	e0d9      	b.n	800d418 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d264:	88fb      	ldrh	r3, [r7, #6]
 800d266:	3303      	adds	r3, #3
 800d268:	b29b      	uxth	r3, r3
 800d26a:	f023 0303 	bic.w	r3, r3, #3
 800d26e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d270:	8bbb      	ldrh	r3, [r7, #28]
 800d272:	2b0b      	cmp	r3, #11
 800d274:	d801      	bhi.n	800d27a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d276:	230c      	movs	r3, #12
 800d278:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d27a:	8bbb      	ldrh	r3, [r7, #28]
 800d27c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d280:	d803      	bhi.n	800d28a <mem_malloc+0x3a>
 800d282:	8bba      	ldrh	r2, [r7, #28]
 800d284:	88fb      	ldrh	r3, [r7, #6]
 800d286:	429a      	cmp	r2, r3
 800d288:	d201      	bcs.n	800d28e <mem_malloc+0x3e>
    return NULL;
 800d28a:	2300      	movs	r3, #0
 800d28c:	e0c4      	b.n	800d418 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d28e:	4b64      	ldr	r3, [pc, #400]	; (800d420 <mem_malloc+0x1d0>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4618      	mov	r0, r3
 800d294:	f7ff fd4a 	bl	800cd2c <mem_to_ptr>
 800d298:	4603      	mov	r3, r0
 800d29a:	83fb      	strh	r3, [r7, #30]
 800d29c:	e0b4      	b.n	800d408 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d29e:	8bfb      	ldrh	r3, [r7, #30]
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7ff fd31 	bl	800cd08 <ptr_to_mem>
 800d2a6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	791b      	ldrb	r3, [r3, #4]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	f040 80a4 	bne.w	800d3fa <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	881b      	ldrh	r3, [r3, #0]
 800d2b6:	461a      	mov	r2, r3
 800d2b8:	8bfb      	ldrh	r3, [r7, #30]
 800d2ba:	1ad3      	subs	r3, r2, r3
 800d2bc:	f1a3 0208 	sub.w	r2, r3, #8
 800d2c0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	f0c0 8099 	bcc.w	800d3fa <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	881b      	ldrh	r3, [r3, #0]
 800d2cc:	461a      	mov	r2, r3
 800d2ce:	8bfb      	ldrh	r3, [r7, #30]
 800d2d0:	1ad3      	subs	r3, r2, r3
 800d2d2:	f1a3 0208 	sub.w	r2, r3, #8
 800d2d6:	8bbb      	ldrh	r3, [r7, #28]
 800d2d8:	3314      	adds	r3, #20
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d333      	bcc.n	800d346 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d2de:	8bfa      	ldrh	r2, [r7, #30]
 800d2e0:	8bbb      	ldrh	r3, [r7, #28]
 800d2e2:	4413      	add	r3, r2
 800d2e4:	b29b      	uxth	r3, r3
 800d2e6:	3308      	adds	r3, #8
 800d2e8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d2ea:	8a7b      	ldrh	r3, [r7, #18]
 800d2ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d2f0:	d106      	bne.n	800d300 <mem_malloc+0xb0>
 800d2f2:	4b4c      	ldr	r3, [pc, #304]	; (800d424 <mem_malloc+0x1d4>)
 800d2f4:	f240 3287 	movw	r2, #903	; 0x387
 800d2f8:	494b      	ldr	r1, [pc, #300]	; (800d428 <mem_malloc+0x1d8>)
 800d2fa:	484c      	ldr	r0, [pc, #304]	; (800d42c <mem_malloc+0x1dc>)
 800d2fc:	f00b fbe8 	bl	8018ad0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d300:	8a7b      	ldrh	r3, [r7, #18]
 800d302:	4618      	mov	r0, r3
 800d304:	f7ff fd00 	bl	800cd08 <ptr_to_mem>
 800d308:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2200      	movs	r2, #0
 800d30e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	881a      	ldrh	r2, [r3, #0]
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	8bfa      	ldrh	r2, [r7, #30]
 800d31c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	8a7a      	ldrh	r2, [r7, #18]
 800d322:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	2201      	movs	r2, #1
 800d328:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	881b      	ldrh	r3, [r3, #0]
 800d32e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d332:	d00b      	beq.n	800d34c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	881b      	ldrh	r3, [r3, #0]
 800d338:	4618      	mov	r0, r3
 800d33a:	f7ff fce5 	bl	800cd08 <ptr_to_mem>
 800d33e:	4602      	mov	r2, r0
 800d340:	8a7b      	ldrh	r3, [r7, #18]
 800d342:	8053      	strh	r3, [r2, #2]
 800d344:	e002      	b.n	800d34c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	2201      	movs	r2, #1
 800d34a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d34c:	4b34      	ldr	r3, [pc, #208]	; (800d420 <mem_malloc+0x1d0>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	697a      	ldr	r2, [r7, #20]
 800d352:	429a      	cmp	r2, r3
 800d354:	d127      	bne.n	800d3a6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800d356:	4b32      	ldr	r3, [pc, #200]	; (800d420 <mem_malloc+0x1d0>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d35c:	e005      	b.n	800d36a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d35e:	69bb      	ldr	r3, [r7, #24]
 800d360:	881b      	ldrh	r3, [r3, #0]
 800d362:	4618      	mov	r0, r3
 800d364:	f7ff fcd0 	bl	800cd08 <ptr_to_mem>
 800d368:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d36a:	69bb      	ldr	r3, [r7, #24]
 800d36c:	791b      	ldrb	r3, [r3, #4]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d004      	beq.n	800d37c <mem_malloc+0x12c>
 800d372:	4b2f      	ldr	r3, [pc, #188]	; (800d430 <mem_malloc+0x1e0>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	69ba      	ldr	r2, [r7, #24]
 800d378:	429a      	cmp	r2, r3
 800d37a:	d1f0      	bne.n	800d35e <mem_malloc+0x10e>
          }
          lfree = cur;
 800d37c:	4a28      	ldr	r2, [pc, #160]	; (800d420 <mem_malloc+0x1d0>)
 800d37e:	69bb      	ldr	r3, [r7, #24]
 800d380:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d382:	4b27      	ldr	r3, [pc, #156]	; (800d420 <mem_malloc+0x1d0>)
 800d384:	681a      	ldr	r2, [r3, #0]
 800d386:	4b2a      	ldr	r3, [pc, #168]	; (800d430 <mem_malloc+0x1e0>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d00b      	beq.n	800d3a6 <mem_malloc+0x156>
 800d38e:	4b24      	ldr	r3, [pc, #144]	; (800d420 <mem_malloc+0x1d0>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	791b      	ldrb	r3, [r3, #4]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d006      	beq.n	800d3a6 <mem_malloc+0x156>
 800d398:	4b22      	ldr	r3, [pc, #136]	; (800d424 <mem_malloc+0x1d4>)
 800d39a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d39e:	4925      	ldr	r1, [pc, #148]	; (800d434 <mem_malloc+0x1e4>)
 800d3a0:	4822      	ldr	r0, [pc, #136]	; (800d42c <mem_malloc+0x1dc>)
 800d3a2:	f00b fb95 	bl	8018ad0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d3a6:	8bba      	ldrh	r2, [r7, #28]
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	4413      	add	r3, r2
 800d3ac:	3308      	adds	r3, #8
 800d3ae:	4a20      	ldr	r2, [pc, #128]	; (800d430 <mem_malloc+0x1e0>)
 800d3b0:	6812      	ldr	r2, [r2, #0]
 800d3b2:	4293      	cmp	r3, r2
 800d3b4:	d906      	bls.n	800d3c4 <mem_malloc+0x174>
 800d3b6:	4b1b      	ldr	r3, [pc, #108]	; (800d424 <mem_malloc+0x1d4>)
 800d3b8:	f240 32ba 	movw	r2, #954	; 0x3ba
 800d3bc:	491e      	ldr	r1, [pc, #120]	; (800d438 <mem_malloc+0x1e8>)
 800d3be:	481b      	ldr	r0, [pc, #108]	; (800d42c <mem_malloc+0x1dc>)
 800d3c0:	f00b fb86 	bl	8018ad0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	f003 0303 	and.w	r3, r3, #3
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d006      	beq.n	800d3dc <mem_malloc+0x18c>
 800d3ce:	4b15      	ldr	r3, [pc, #84]	; (800d424 <mem_malloc+0x1d4>)
 800d3d0:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800d3d4:	4919      	ldr	r1, [pc, #100]	; (800d43c <mem_malloc+0x1ec>)
 800d3d6:	4815      	ldr	r0, [pc, #84]	; (800d42c <mem_malloc+0x1dc>)
 800d3d8:	f00b fb7a 	bl	8018ad0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	f003 0303 	and.w	r3, r3, #3
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d006      	beq.n	800d3f4 <mem_malloc+0x1a4>
 800d3e6:	4b0f      	ldr	r3, [pc, #60]	; (800d424 <mem_malloc+0x1d4>)
 800d3e8:	f240 32be 	movw	r2, #958	; 0x3be
 800d3ec:	4914      	ldr	r1, [pc, #80]	; (800d440 <mem_malloc+0x1f0>)
 800d3ee:	480f      	ldr	r0, [pc, #60]	; (800d42c <mem_malloc+0x1dc>)
 800d3f0:	f00b fb6e 	bl	8018ad0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	3308      	adds	r3, #8
 800d3f8:	e00e      	b.n	800d418 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800d3fa:	8bfb      	ldrh	r3, [r7, #30]
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7ff fc83 	bl	800cd08 <ptr_to_mem>
 800d402:	4603      	mov	r3, r0
 800d404:	881b      	ldrh	r3, [r3, #0]
 800d406:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d408:	8bfa      	ldrh	r2, [r7, #30]
 800d40a:	8bbb      	ldrh	r3, [r7, #28]
 800d40c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800d410:	429a      	cmp	r2, r3
 800d412:	f4ff af44 	bcc.w	800d29e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d416:	2300      	movs	r3, #0
}
 800d418:	4618      	mov	r0, r3
 800d41a:	3720      	adds	r7, #32
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}
 800d420:	20000450 	.word	0x20000450
 800d424:	08019950 	.word	0x08019950
 800d428:	08019af8 	.word	0x08019af8
 800d42c:	08019998 	.word	0x08019998
 800d430:	2000044c 	.word	0x2000044c
 800d434:	08019b0c 	.word	0x08019b0c
 800d438:	08019b28 	.word	0x08019b28
 800d43c:	08019b58 	.word	0x08019b58
 800d440:	08019b88 	.word	0x08019b88

0800d444 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d444:	b480      	push	{r7}
 800d446:	b085      	sub	sp, #20
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	689b      	ldr	r3, [r3, #8]
 800d450:	2200      	movs	r2, #0
 800d452:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	3303      	adds	r3, #3
 800d45a:	f023 0303 	bic.w	r3, r3, #3
 800d45e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d460:	2300      	movs	r3, #0
 800d462:	60fb      	str	r3, [r7, #12]
 800d464:	e011      	b.n	800d48a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	689b      	ldr	r3, [r3, #8]
 800d46a:	681a      	ldr	r2, [r3, #0]
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	689b      	ldr	r3, [r3, #8]
 800d474:	68ba      	ldr	r2, [r7, #8]
 800d476:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	881b      	ldrh	r3, [r3, #0]
 800d47c:	461a      	mov	r2, r3
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	4413      	add	r3, r2
 800d482:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	3301      	adds	r3, #1
 800d488:	60fb      	str	r3, [r7, #12]
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	885b      	ldrh	r3, [r3, #2]
 800d48e:	461a      	mov	r2, r3
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	4293      	cmp	r3, r2
 800d494:	dbe7      	blt.n	800d466 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d496:	bf00      	nop
 800d498:	3714      	adds	r7, #20
 800d49a:	46bd      	mov	sp, r7
 800d49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a0:	4770      	bx	lr
	...

0800d4a4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b082      	sub	sp, #8
 800d4a8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	80fb      	strh	r3, [r7, #6]
 800d4ae:	e009      	b.n	800d4c4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d4b0:	88fb      	ldrh	r3, [r7, #6]
 800d4b2:	4a08      	ldr	r2, [pc, #32]	; (800d4d4 <memp_init+0x30>)
 800d4b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f7ff ffc3 	bl	800d444 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d4be:	88fb      	ldrh	r3, [r7, #6]
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	80fb      	strh	r3, [r7, #6]
 800d4c4:	88fb      	ldrh	r3, [r7, #6]
 800d4c6:	2b08      	cmp	r3, #8
 800d4c8:	d9f2      	bls.n	800d4b0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d4ca:	bf00      	nop
 800d4cc:	3708      	adds	r7, #8
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}
 800d4d2:	bf00      	nop
 800d4d4:	0802b51c 	.word	0x0802b51c

0800d4d8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b084      	sub	sp, #16
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	689b      	ldr	r3, [r3, #8]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d012      	beq.n	800d514 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	689b      	ldr	r3, [r3, #8]
 800d4f2:	68fa      	ldr	r2, [r7, #12]
 800d4f4:	6812      	ldr	r2, [r2, #0]
 800d4f6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	f003 0303 	and.w	r3, r3, #3
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d006      	beq.n	800d510 <do_memp_malloc_pool+0x38>
 800d502:	4b07      	ldr	r3, [pc, #28]	; (800d520 <do_memp_malloc_pool+0x48>)
 800d504:	f240 1219 	movw	r2, #281	; 0x119
 800d508:	4906      	ldr	r1, [pc, #24]	; (800d524 <do_memp_malloc_pool+0x4c>)
 800d50a:	4807      	ldr	r0, [pc, #28]	; (800d528 <do_memp_malloc_pool+0x50>)
 800d50c:	f00b fae0 	bl	8018ad0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	e000      	b.n	800d516 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d514:	2300      	movs	r3, #0
}
 800d516:	4618      	mov	r0, r3
 800d518:	3710      	adds	r7, #16
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}
 800d51e:	bf00      	nop
 800d520:	08019bac 	.word	0x08019bac
 800d524:	08019bdc 	.word	0x08019bdc
 800d528:	08019c00 	.word	0x08019c00

0800d52c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b084      	sub	sp, #16
 800d530:	af00      	add	r7, sp, #0
 800d532:	4603      	mov	r3, r0
 800d534:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d536:	79fb      	ldrb	r3, [r7, #7]
 800d538:	2b08      	cmp	r3, #8
 800d53a:	d908      	bls.n	800d54e <memp_malloc+0x22>
 800d53c:	4b0a      	ldr	r3, [pc, #40]	; (800d568 <memp_malloc+0x3c>)
 800d53e:	f240 1257 	movw	r2, #343	; 0x157
 800d542:	490a      	ldr	r1, [pc, #40]	; (800d56c <memp_malloc+0x40>)
 800d544:	480a      	ldr	r0, [pc, #40]	; (800d570 <memp_malloc+0x44>)
 800d546:	f00b fac3 	bl	8018ad0 <iprintf>
 800d54a:	2300      	movs	r3, #0
 800d54c:	e008      	b.n	800d560 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d54e:	79fb      	ldrb	r3, [r7, #7]
 800d550:	4a08      	ldr	r2, [pc, #32]	; (800d574 <memp_malloc+0x48>)
 800d552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d556:	4618      	mov	r0, r3
 800d558:	f7ff ffbe 	bl	800d4d8 <do_memp_malloc_pool>
 800d55c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d55e:	68fb      	ldr	r3, [r7, #12]
}
 800d560:	4618      	mov	r0, r3
 800d562:	3710      	adds	r7, #16
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}
 800d568:	08019bac 	.word	0x08019bac
 800d56c:	08019c3c 	.word	0x08019c3c
 800d570:	08019c00 	.word	0x08019c00
 800d574:	0802b51c 	.word	0x0802b51c

0800d578 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b084      	sub	sp, #16
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
 800d580:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	f003 0303 	and.w	r3, r3, #3
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d006      	beq.n	800d59a <do_memp_free_pool+0x22>
 800d58c:	4b0a      	ldr	r3, [pc, #40]	; (800d5b8 <do_memp_free_pool+0x40>)
 800d58e:	f240 126d 	movw	r2, #365	; 0x16d
 800d592:	490a      	ldr	r1, [pc, #40]	; (800d5bc <do_memp_free_pool+0x44>)
 800d594:	480a      	ldr	r0, [pc, #40]	; (800d5c0 <do_memp_free_pool+0x48>)
 800d596:	f00b fa9b 	bl	8018ad0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	689b      	ldr	r3, [r3, #8]
 800d5a2:	681a      	ldr	r2, [r3, #0]
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	689b      	ldr	r3, [r3, #8]
 800d5ac:	68fa      	ldr	r2, [r7, #12]
 800d5ae:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800d5b0:	bf00      	nop
 800d5b2:	3710      	adds	r7, #16
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}
 800d5b8:	08019bac 	.word	0x08019bac
 800d5bc:	08019c5c 	.word	0x08019c5c
 800d5c0:	08019c00 	.word	0x08019c00

0800d5c4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	6039      	str	r1, [r7, #0]
 800d5ce:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d5d0:	79fb      	ldrb	r3, [r7, #7]
 800d5d2:	2b08      	cmp	r3, #8
 800d5d4:	d907      	bls.n	800d5e6 <memp_free+0x22>
 800d5d6:	4b0c      	ldr	r3, [pc, #48]	; (800d608 <memp_free+0x44>)
 800d5d8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d5dc:	490b      	ldr	r1, [pc, #44]	; (800d60c <memp_free+0x48>)
 800d5de:	480c      	ldr	r0, [pc, #48]	; (800d610 <memp_free+0x4c>)
 800d5e0:	f00b fa76 	bl	8018ad0 <iprintf>
 800d5e4:	e00c      	b.n	800d600 <memp_free+0x3c>

  if (mem == NULL) {
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d008      	beq.n	800d5fe <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d5ec:	79fb      	ldrb	r3, [r7, #7]
 800d5ee:	4a09      	ldr	r2, [pc, #36]	; (800d614 <memp_free+0x50>)
 800d5f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5f4:	6839      	ldr	r1, [r7, #0]
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f7ff ffbe 	bl	800d578 <do_memp_free_pool>
 800d5fc:	e000      	b.n	800d600 <memp_free+0x3c>
    return;
 800d5fe:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d600:	3708      	adds	r7, #8
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
 800d606:	bf00      	nop
 800d608:	08019bac 	.word	0x08019bac
 800d60c:	08019c7c 	.word	0x08019c7c
 800d610:	08019c00 	.word	0x08019c00
 800d614:	0802b51c 	.word	0x0802b51c

0800d618 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d618:	b480      	push	{r7}
 800d61a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d61c:	bf00      	nop
 800d61e:	46bd      	mov	sp, r7
 800d620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d624:	4770      	bx	lr
	...

0800d628 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b086      	sub	sp, #24
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	60f8      	str	r0, [r7, #12]
 800d630:	60b9      	str	r1, [r7, #8]
 800d632:	607a      	str	r2, [r7, #4]
 800d634:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d108      	bne.n	800d64e <netif_add+0x26>
 800d63c:	4b59      	ldr	r3, [pc, #356]	; (800d7a4 <netif_add+0x17c>)
 800d63e:	f240 1227 	movw	r2, #295	; 0x127
 800d642:	4959      	ldr	r1, [pc, #356]	; (800d7a8 <netif_add+0x180>)
 800d644:	4859      	ldr	r0, [pc, #356]	; (800d7ac <netif_add+0x184>)
 800d646:	f00b fa43 	bl	8018ad0 <iprintf>
 800d64a:	2300      	movs	r3, #0
 800d64c:	e0a6      	b.n	800d79c <netif_add+0x174>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d650:	2b00      	cmp	r3, #0
 800d652:	d108      	bne.n	800d666 <netif_add+0x3e>
 800d654:	4b53      	ldr	r3, [pc, #332]	; (800d7a4 <netif_add+0x17c>)
 800d656:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d65a:	4955      	ldr	r1, [pc, #340]	; (800d7b0 <netif_add+0x188>)
 800d65c:	4853      	ldr	r0, [pc, #332]	; (800d7ac <netif_add+0x184>)
 800d65e:	f00b fa37 	bl	8018ad0 <iprintf>
 800d662:	2300      	movs	r3, #0
 800d664:	e09a      	b.n	800d79c <netif_add+0x174>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d101      	bne.n	800d670 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d66c:	4b51      	ldr	r3, [pc, #324]	; (800d7b4 <netif_add+0x18c>)
 800d66e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d101      	bne.n	800d67a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d676:	4b4f      	ldr	r3, [pc, #316]	; (800d7b4 <netif_add+0x18c>)
 800d678:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d101      	bne.n	800d684 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d680:	4b4c      	ldr	r3, [pc, #304]	; (800d7b4 <netif_add+0x18c>)
 800d682:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	2200      	movs	r2, #0
 800d688:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2200      	movs	r2, #0
 800d68e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	2200      	movs	r2, #0
 800d694:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	4a47      	ldr	r2, [pc, #284]	; (800d7b8 <netif_add+0x190>)
 800d69a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	3320      	adds	r3, #32
 800d6ae:	2204      	movs	r2, #4
 800d6b0:	2100      	movs	r1, #0
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f00b f95c 	bl	8018970 <memset>
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	6a3a      	ldr	r2, [r7, #32]
 800d6bc:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 800d6be:	4b3f      	ldr	r3, [pc, #252]	; (800d7bc <netif_add+0x194>)
 800d6c0:	781a      	ldrb	r2, [r3, #0]
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6cc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	687a      	ldr	r2, [r7, #4]
 800d6d2:	68b9      	ldr	r1, [r7, #8]
 800d6d4:	68f8      	ldr	r0, [r7, #12]
 800d6d6:	f000 f913 	bl	800d900 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6dc:	68f8      	ldr	r0, [r7, #12]
 800d6de:	4798      	blx	r3
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d001      	beq.n	800d6ea <netif_add+0xc2>
    return NULL;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	e058      	b.n	800d79c <netif_add+0x174>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d6f0:	2bff      	cmp	r3, #255	; 0xff
 800d6f2:	d103      	bne.n	800d6fc <netif_add+0xd4>
        netif->num = 0;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d700:	4b2f      	ldr	r3, [pc, #188]	; (800d7c0 <netif_add+0x198>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	617b      	str	r3, [r7, #20]
 800d706:	e02b      	b.n	800d760 <netif_add+0x138>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d708:	697a      	ldr	r2, [r7, #20]
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d106      	bne.n	800d71e <netif_add+0xf6>
 800d710:	4b24      	ldr	r3, [pc, #144]	; (800d7a4 <netif_add+0x17c>)
 800d712:	f240 128b 	movw	r2, #395	; 0x18b
 800d716:	492b      	ldr	r1, [pc, #172]	; (800d7c4 <netif_add+0x19c>)
 800d718:	4824      	ldr	r0, [pc, #144]	; (800d7ac <netif_add+0x184>)
 800d71a:	f00b f9d9 	bl	8018ad0 <iprintf>
        num_netifs++;
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	3301      	adds	r3, #1
 800d722:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	2bff      	cmp	r3, #255	; 0xff
 800d728:	dd06      	ble.n	800d738 <netif_add+0x110>
 800d72a:	4b1e      	ldr	r3, [pc, #120]	; (800d7a4 <netif_add+0x17c>)
 800d72c:	f240 128d 	movw	r2, #397	; 0x18d
 800d730:	4925      	ldr	r1, [pc, #148]	; (800d7c8 <netif_add+0x1a0>)
 800d732:	481e      	ldr	r0, [pc, #120]	; (800d7ac <netif_add+0x184>)
 800d734:	f00b f9cc 	bl	8018ad0 <iprintf>
        if (netif2->num == netif->num) {
 800d738:	697b      	ldr	r3, [r7, #20]
 800d73a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d744:	429a      	cmp	r2, r3
 800d746:	d108      	bne.n	800d75a <netif_add+0x132>
          netif->num++;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d74e:	3301      	adds	r3, #1
 800d750:	b2da      	uxtb	r2, r3
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800d758:	e005      	b.n	800d766 <netif_add+0x13e>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	617b      	str	r3, [r7, #20]
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d1d0      	bne.n	800d708 <netif_add+0xe0>
        }
      }
    } while (netif2 != NULL);
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d1be      	bne.n	800d6ea <netif_add+0xc2>
  }
  if (netif->num == 254) {
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d772:	2bfe      	cmp	r3, #254	; 0xfe
 800d774:	d103      	bne.n	800d77e <netif_add+0x156>
    netif_num = 0;
 800d776:	4b11      	ldr	r3, [pc, #68]	; (800d7bc <netif_add+0x194>)
 800d778:	2200      	movs	r2, #0
 800d77a:	701a      	strb	r2, [r3, #0]
 800d77c:	e006      	b.n	800d78c <netif_add+0x164>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d784:	3301      	adds	r3, #1
 800d786:	b2da      	uxtb	r2, r3
 800d788:	4b0c      	ldr	r3, [pc, #48]	; (800d7bc <netif_add+0x194>)
 800d78a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d78c:	4b0c      	ldr	r3, [pc, #48]	; (800d7c0 <netif_add+0x198>)
 800d78e:	681a      	ldr	r2, [r3, #0]
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d794:	4a0a      	ldr	r2, [pc, #40]	; (800d7c0 <netif_add+0x198>)
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d79a:	68fb      	ldr	r3, [r7, #12]
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3718      	adds	r7, #24
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}
 800d7a4:	08019c98 	.word	0x08019c98
 800d7a8:	08019d2c 	.word	0x08019d2c
 800d7ac:	08019ce8 	.word	0x08019ce8
 800d7b0:	08019d48 	.word	0x08019d48
 800d7b4:	0802b590 	.word	0x0802b590
 800d7b8:	0800daf1 	.word	0x0800daf1
 800d7bc:	20000478 	.word	0x20000478
 800d7c0:	20007ebc 	.word	0x20007ebc
 800d7c4:	08019d6c 	.word	0x08019d6c
 800d7c8:	08019d80 	.word	0x08019d80

0800d7cc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b082      	sub	sp, #8
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d7d6:	6839      	ldr	r1, [r7, #0]
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f002 facd 	bl	800fd78 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d7de:	6839      	ldr	r1, [r7, #0]
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f006 ff17 	bl	8014614 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d7e6:	bf00      	nop
 800d7e8:	3708      	adds	r7, #8
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}
	...

0800d7f0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b086      	sub	sp, #24
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	60f8      	str	r0, [r7, #12]
 800d7f8:	60b9      	str	r1, [r7, #8]
 800d7fa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d106      	bne.n	800d810 <netif_do_set_ipaddr+0x20>
 800d802:	4b1d      	ldr	r3, [pc, #116]	; (800d878 <netif_do_set_ipaddr+0x88>)
 800d804:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d808:	491c      	ldr	r1, [pc, #112]	; (800d87c <netif_do_set_ipaddr+0x8c>)
 800d80a:	481d      	ldr	r0, [pc, #116]	; (800d880 <netif_do_set_ipaddr+0x90>)
 800d80c:	f00b f960 	bl	8018ad0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d106      	bne.n	800d824 <netif_do_set_ipaddr+0x34>
 800d816:	4b18      	ldr	r3, [pc, #96]	; (800d878 <netif_do_set_ipaddr+0x88>)
 800d818:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d81c:	4917      	ldr	r1, [pc, #92]	; (800d87c <netif_do_set_ipaddr+0x8c>)
 800d81e:	4818      	ldr	r0, [pc, #96]	; (800d880 <netif_do_set_ipaddr+0x90>)
 800d820:	f00b f956 	bl	8018ad0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	3304      	adds	r3, #4
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	429a      	cmp	r2, r3
 800d830:	d01c      	beq.n	800d86c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	3304      	adds	r3, #4
 800d83c:	681a      	ldr	r2, [r3, #0]
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d842:	f107 0314 	add.w	r3, r7, #20
 800d846:	4619      	mov	r1, r3
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f7ff ffbf 	bl	800d7cc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d002      	beq.n	800d85a <netif_do_set_ipaddr+0x6a>
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	e000      	b.n	800d85c <netif_do_set_ipaddr+0x6c>
 800d85a:	2300      	movs	r3, #0
 800d85c:	68fa      	ldr	r2, [r7, #12]
 800d85e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d860:	2101      	movs	r1, #1
 800d862:	68f8      	ldr	r0, [r7, #12]
 800d864:	f000 f8d2 	bl	800da0c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d868:	2301      	movs	r3, #1
 800d86a:	e000      	b.n	800d86e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d86c:	2300      	movs	r3, #0
}
 800d86e:	4618      	mov	r0, r3
 800d870:	3718      	adds	r7, #24
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}
 800d876:	bf00      	nop
 800d878:	08019c98 	.word	0x08019c98
 800d87c:	08019db0 	.word	0x08019db0
 800d880:	08019ce8 	.word	0x08019ce8

0800d884 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d884:	b480      	push	{r7}
 800d886:	b085      	sub	sp, #20
 800d888:	af00      	add	r7, sp, #0
 800d88a:	60f8      	str	r0, [r7, #12]
 800d88c:	60b9      	str	r1, [r7, #8]
 800d88e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	681a      	ldr	r2, [r3, #0]
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	3308      	adds	r3, #8
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d00a      	beq.n	800d8b4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d002      	beq.n	800d8aa <netif_do_set_netmask+0x26>
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	e000      	b.n	800d8ac <netif_do_set_netmask+0x28>
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	68fa      	ldr	r2, [r7, #12]
 800d8ae:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	e000      	b.n	800d8b6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d8b4:	2300      	movs	r3, #0
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3714      	adds	r7, #20
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr

0800d8c2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d8c2:	b480      	push	{r7}
 800d8c4:	b085      	sub	sp, #20
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	60f8      	str	r0, [r7, #12]
 800d8ca:	60b9      	str	r1, [r7, #8]
 800d8cc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	681a      	ldr	r2, [r3, #0]
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	330c      	adds	r3, #12
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	d00a      	beq.n	800d8f2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d002      	beq.n	800d8e8 <netif_do_set_gw+0x26>
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	e000      	b.n	800d8ea <netif_do_set_gw+0x28>
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	68fa      	ldr	r2, [r7, #12]
 800d8ec:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	e000      	b.n	800d8f4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d8f2:	2300      	movs	r3, #0
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3714      	adds	r7, #20
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fe:	4770      	bx	lr

0800d900 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b088      	sub	sp, #32
 800d904:	af00      	add	r7, sp, #0
 800d906:	60f8      	str	r0, [r7, #12]
 800d908:	60b9      	str	r1, [r7, #8]
 800d90a:	607a      	str	r2, [r7, #4]
 800d90c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d90e:	2300      	movs	r3, #0
 800d910:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d912:	2300      	movs	r3, #0
 800d914:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d101      	bne.n	800d920 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d91c:	4b1c      	ldr	r3, [pc, #112]	; (800d990 <netif_set_addr+0x90>)
 800d91e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d101      	bne.n	800d92a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d926:	4b1a      	ldr	r3, [pc, #104]	; (800d990 <netif_set_addr+0x90>)
 800d928:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d101      	bne.n	800d934 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d930:	4b17      	ldr	r3, [pc, #92]	; (800d990 <netif_set_addr+0x90>)
 800d932:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d003      	beq.n	800d942 <netif_set_addr+0x42>
 800d93a:	68bb      	ldr	r3, [r7, #8]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d101      	bne.n	800d946 <netif_set_addr+0x46>
 800d942:	2301      	movs	r3, #1
 800d944:	e000      	b.n	800d948 <netif_set_addr+0x48>
 800d946:	2300      	movs	r3, #0
 800d948:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d006      	beq.n	800d95e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d950:	f107 0310 	add.w	r3, r7, #16
 800d954:	461a      	mov	r2, r3
 800d956:	68b9      	ldr	r1, [r7, #8]
 800d958:	68f8      	ldr	r0, [r7, #12]
 800d95a:	f7ff ff49 	bl	800d7f0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d95e:	69fa      	ldr	r2, [r7, #28]
 800d960:	6879      	ldr	r1, [r7, #4]
 800d962:	68f8      	ldr	r0, [r7, #12]
 800d964:	f7ff ff8e 	bl	800d884 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d968:	69ba      	ldr	r2, [r7, #24]
 800d96a:	6839      	ldr	r1, [r7, #0]
 800d96c:	68f8      	ldr	r0, [r7, #12]
 800d96e:	f7ff ffa8 	bl	800d8c2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d106      	bne.n	800d986 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d978:	f107 0310 	add.w	r3, r7, #16
 800d97c:	461a      	mov	r2, r3
 800d97e:	68b9      	ldr	r1, [r7, #8]
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	f7ff ff35 	bl	800d7f0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d986:	bf00      	nop
 800d988:	3720      	adds	r7, #32
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
 800d98e:	bf00      	nop
 800d990:	0802b590 	.word	0x0802b590

0800d994 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d994:	b480      	push	{r7}
 800d996:	b083      	sub	sp, #12
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d99c:	4a04      	ldr	r2, [pc, #16]	; (800d9b0 <netif_set_default+0x1c>)
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d9a2:	bf00      	nop
 800d9a4:	370c      	adds	r7, #12
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ac:	4770      	bx	lr
 800d9ae:	bf00      	nop
 800d9b0:	20007ec0 	.word	0x20007ec0

0800d9b4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b082      	sub	sp, #8
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d107      	bne.n	800d9d2 <netif_set_up+0x1e>
 800d9c2:	4b0f      	ldr	r3, [pc, #60]	; (800da00 <netif_set_up+0x4c>)
 800d9c4:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d9c8:	490e      	ldr	r1, [pc, #56]	; (800da04 <netif_set_up+0x50>)
 800d9ca:	480f      	ldr	r0, [pc, #60]	; (800da08 <netif_set_up+0x54>)
 800d9cc:	f00b f880 	bl	8018ad0 <iprintf>
 800d9d0:	e013      	b.n	800d9fa <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d9d8:	f003 0301 	and.w	r3, r3, #1
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d10c      	bne.n	800d9fa <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d9e6:	f043 0301 	orr.w	r3, r3, #1
 800d9ea:	b2da      	uxtb	r2, r3
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d9f2:	2103      	movs	r1, #3
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f000 f809 	bl	800da0c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d9fa:	3708      	adds	r7, #8
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}
 800da00:	08019c98 	.word	0x08019c98
 800da04:	08019e20 	.word	0x08019e20
 800da08:	08019ce8 	.word	0x08019ce8

0800da0c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	460b      	mov	r3, r1
 800da16:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d106      	bne.n	800da2c <netif_issue_reports+0x20>
 800da1e:	4b18      	ldr	r3, [pc, #96]	; (800da80 <netif_issue_reports+0x74>)
 800da20:	f240 326d 	movw	r2, #877	; 0x36d
 800da24:	4917      	ldr	r1, [pc, #92]	; (800da84 <netif_issue_reports+0x78>)
 800da26:	4818      	ldr	r0, [pc, #96]	; (800da88 <netif_issue_reports+0x7c>)
 800da28:	f00b f852 	bl	8018ad0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800da32:	f003 0304 	and.w	r3, r3, #4
 800da36:	2b00      	cmp	r3, #0
 800da38:	d01e      	beq.n	800da78 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800da40:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800da44:	2b00      	cmp	r3, #0
 800da46:	d017      	beq.n	800da78 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800da48:	78fb      	ldrb	r3, [r7, #3]
 800da4a:	f003 0301 	and.w	r3, r3, #1
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d013      	beq.n	800da7a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	3304      	adds	r3, #4
 800da56:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d00e      	beq.n	800da7a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800da62:	f003 0308 	and.w	r3, r3, #8
 800da66:	2b00      	cmp	r3, #0
 800da68:	d007      	beq.n	800da7a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	3304      	adds	r3, #4
 800da6e:	4619      	mov	r1, r3
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f009 fb91 	bl	8017198 <etharp_request>
 800da76:	e000      	b.n	800da7a <netif_issue_reports+0x6e>
    return;
 800da78:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800da7a:	3708      	adds	r7, #8
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}
 800da80:	08019c98 	.word	0x08019c98
 800da84:	08019e3c 	.word	0x08019e3c
 800da88:	08019ce8 	.word	0x08019ce8

0800da8c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b082      	sub	sp, #8
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d107      	bne.n	800daaa <netif_set_down+0x1e>
 800da9a:	4b12      	ldr	r3, [pc, #72]	; (800dae4 <netif_set_down+0x58>)
 800da9c:	f240 329b 	movw	r2, #923	; 0x39b
 800daa0:	4911      	ldr	r1, [pc, #68]	; (800dae8 <netif_set_down+0x5c>)
 800daa2:	4812      	ldr	r0, [pc, #72]	; (800daec <netif_set_down+0x60>)
 800daa4:	f00b f814 	bl	8018ad0 <iprintf>
 800daa8:	e019      	b.n	800dade <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dab0:	f003 0301 	and.w	r3, r3, #1
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d012      	beq.n	800dade <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dabe:	f023 0301 	bic.w	r3, r3, #1
 800dac2:	b2da      	uxtb	r2, r3
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dad0:	f003 0308 	and.w	r3, r3, #8
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d002      	beq.n	800dade <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f008 ff17 	bl	801690c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800dade:	3708      	adds	r7, #8
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}
 800dae4:	08019c98 	.word	0x08019c98
 800dae8:	08019e60 	.word	0x08019e60
 800daec:	08019ce8 	.word	0x08019ce8

0800daf0 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b085      	sub	sp, #20
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	60f8      	str	r0, [r7, #12]
 800daf8:	60b9      	str	r1, [r7, #8]
 800dafa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800dafc:	f06f 030b 	mvn.w	r3, #11
}
 800db00:	4618      	mov	r0, r3
 800db02:	3714      	adds	r7, #20
 800db04:	46bd      	mov	sp, r7
 800db06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0a:	4770      	bx	lr

0800db0c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800db0c:	b480      	push	{r7}
 800db0e:	b085      	sub	sp, #20
 800db10:	af00      	add	r7, sp, #0
 800db12:	4603      	mov	r3, r0
 800db14:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800db16:	79fb      	ldrb	r3, [r7, #7]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d013      	beq.n	800db44 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800db1c:	4b0d      	ldr	r3, [pc, #52]	; (800db54 <netif_get_by_index+0x48>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	60fb      	str	r3, [r7, #12]
 800db22:	e00c      	b.n	800db3e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db2a:	3301      	adds	r3, #1
 800db2c:	b2db      	uxtb	r3, r3
 800db2e:	79fa      	ldrb	r2, [r7, #7]
 800db30:	429a      	cmp	r2, r3
 800db32:	d101      	bne.n	800db38 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	e006      	b.n	800db46 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	60fb      	str	r3, [r7, #12]
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d1ef      	bne.n	800db24 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800db44:	2300      	movs	r3, #0
}
 800db46:	4618      	mov	r0, r3
 800db48:	3714      	adds	r7, #20
 800db4a:	46bd      	mov	sp, r7
 800db4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db50:	4770      	bx	lr
 800db52:	bf00      	nop
 800db54:	20007ebc 	.word	0x20007ebc

0800db58 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800db5e:	4b0c      	ldr	r3, [pc, #48]	; (800db90 <pbuf_free_ooseq+0x38>)
 800db60:	2200      	movs	r2, #0
 800db62:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800db64:	4b0b      	ldr	r3, [pc, #44]	; (800db94 <pbuf_free_ooseq+0x3c>)
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	607b      	str	r3, [r7, #4]
 800db6a:	e00a      	b.n	800db82 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db70:	2b00      	cmp	r3, #0
 800db72:	d003      	beq.n	800db7c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f002 f93d 	bl	800fdf4 <tcp_free_ooseq>
      return;
 800db7a:	e005      	b.n	800db88 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	68db      	ldr	r3, [r3, #12]
 800db80:	607b      	str	r3, [r7, #4]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d1f1      	bne.n	800db6c <pbuf_free_ooseq+0x14>
    }
  }
}
 800db88:	3708      	adds	r7, #8
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
 800db8e:	bf00      	nop
 800db90:	20007ec4 	.word	0x20007ec4
 800db94:	20007ecc 	.word	0x20007ecc

0800db98 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800db98:	b480      	push	{r7}
 800db9a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800db9c:	4b03      	ldr	r3, [pc, #12]	; (800dbac <pbuf_pool_is_empty+0x14>)
 800db9e:	2201      	movs	r2, #1
 800dba0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800dba2:	bf00      	nop
 800dba4:	46bd      	mov	sp, r7
 800dba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbaa:	4770      	bx	lr
 800dbac:	20007ec4 	.word	0x20007ec4

0800dbb0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b085      	sub	sp, #20
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	60f8      	str	r0, [r7, #12]
 800dbb8:	60b9      	str	r1, [r7, #8]
 800dbba:	4611      	mov	r1, r2
 800dbbc:	461a      	mov	r2, r3
 800dbbe:	460b      	mov	r3, r1
 800dbc0:	80fb      	strh	r3, [r7, #6]
 800dbc2:	4613      	mov	r3, r2
 800dbc4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	68ba      	ldr	r2, [r7, #8]
 800dbd0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	88fa      	ldrh	r2, [r7, #6]
 800dbd6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	88ba      	ldrh	r2, [r7, #4]
 800dbdc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800dbde:	8b3b      	ldrh	r3, [r7, #24]
 800dbe0:	b2da      	uxtb	r2, r3
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	7f3a      	ldrb	r2, [r7, #28]
 800dbea:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	2201      	movs	r2, #1
 800dbf0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	73da      	strb	r2, [r3, #15]
}
 800dbf8:	bf00      	nop
 800dbfa:	3714      	adds	r7, #20
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr

0800dc04 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b08c      	sub	sp, #48	; 0x30
 800dc08:	af02      	add	r7, sp, #8
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	71fb      	strb	r3, [r7, #7]
 800dc0e:	460b      	mov	r3, r1
 800dc10:	80bb      	strh	r3, [r7, #4]
 800dc12:	4613      	mov	r3, r2
 800dc14:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800dc16:	79fb      	ldrb	r3, [r7, #7]
 800dc18:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800dc1a:	887b      	ldrh	r3, [r7, #2]
 800dc1c:	2b41      	cmp	r3, #65	; 0x41
 800dc1e:	d00b      	beq.n	800dc38 <pbuf_alloc+0x34>
 800dc20:	2b41      	cmp	r3, #65	; 0x41
 800dc22:	dc02      	bgt.n	800dc2a <pbuf_alloc+0x26>
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d007      	beq.n	800dc38 <pbuf_alloc+0x34>
 800dc28:	e0c2      	b.n	800ddb0 <pbuf_alloc+0x1ac>
 800dc2a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800dc2e:	d00b      	beq.n	800dc48 <pbuf_alloc+0x44>
 800dc30:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800dc34:	d070      	beq.n	800dd18 <pbuf_alloc+0x114>
 800dc36:	e0bb      	b.n	800ddb0 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800dc38:	887a      	ldrh	r2, [r7, #2]
 800dc3a:	88bb      	ldrh	r3, [r7, #4]
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	2000      	movs	r0, #0
 800dc40:	f000 f8d2 	bl	800dde8 <pbuf_alloc_reference>
 800dc44:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800dc46:	e0bd      	b.n	800ddc4 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800dc50:	88bb      	ldrh	r3, [r7, #4]
 800dc52:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800dc54:	2008      	movs	r0, #8
 800dc56:	f7ff fc69 	bl	800d52c <memp_malloc>
 800dc5a:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d109      	bne.n	800dc76 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800dc62:	f7ff ff99 	bl	800db98 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800dc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d002      	beq.n	800dc72 <pbuf_alloc+0x6e>
            pbuf_free(p);
 800dc6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc6e:	f000 faa9 	bl	800e1c4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800dc72:	2300      	movs	r3, #0
 800dc74:	e0a7      	b.n	800ddc6 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800dc76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc78:	3303      	adds	r3, #3
 800dc7a:	b29b      	uxth	r3, r3
 800dc7c:	f023 0303 	bic.w	r3, r3, #3
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800dc86:	b29b      	uxth	r3, r3
 800dc88:	8b7a      	ldrh	r2, [r7, #26]
 800dc8a:	4293      	cmp	r3, r2
 800dc8c:	bf28      	it	cs
 800dc8e:	4613      	movcs	r3, r2
 800dc90:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800dc92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dc94:	3310      	adds	r3, #16
 800dc96:	693a      	ldr	r2, [r7, #16]
 800dc98:	4413      	add	r3, r2
 800dc9a:	3303      	adds	r3, #3
 800dc9c:	f023 0303 	bic.w	r3, r3, #3
 800dca0:	4618      	mov	r0, r3
 800dca2:	89f9      	ldrh	r1, [r7, #14]
 800dca4:	8b7a      	ldrh	r2, [r7, #26]
 800dca6:	2300      	movs	r3, #0
 800dca8:	9301      	str	r3, [sp, #4]
 800dcaa:	887b      	ldrh	r3, [r7, #2]
 800dcac:	9300      	str	r3, [sp, #0]
 800dcae:	460b      	mov	r3, r1
 800dcb0:	4601      	mov	r1, r0
 800dcb2:	6938      	ldr	r0, [r7, #16]
 800dcb4:	f7ff ff7c 	bl	800dbb0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	685b      	ldr	r3, [r3, #4]
 800dcbc:	f003 0303 	and.w	r3, r3, #3
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d006      	beq.n	800dcd2 <pbuf_alloc+0xce>
 800dcc4:	4b42      	ldr	r3, [pc, #264]	; (800ddd0 <pbuf_alloc+0x1cc>)
 800dcc6:	f240 1201 	movw	r2, #257	; 0x101
 800dcca:	4942      	ldr	r1, [pc, #264]	; (800ddd4 <pbuf_alloc+0x1d0>)
 800dccc:	4842      	ldr	r0, [pc, #264]	; (800ddd8 <pbuf_alloc+0x1d4>)
 800dcce:	f00a feff 	bl	8018ad0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800dcd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dcd4:	3303      	adds	r3, #3
 800dcd6:	f023 0303 	bic.w	r3, r3, #3
 800dcda:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800dcde:	d106      	bne.n	800dcee <pbuf_alloc+0xea>
 800dce0:	4b3b      	ldr	r3, [pc, #236]	; (800ddd0 <pbuf_alloc+0x1cc>)
 800dce2:	f240 1203 	movw	r2, #259	; 0x103
 800dce6:	493d      	ldr	r1, [pc, #244]	; (800dddc <pbuf_alloc+0x1d8>)
 800dce8:	483b      	ldr	r0, [pc, #236]	; (800ddd8 <pbuf_alloc+0x1d4>)
 800dcea:	f00a fef1 	bl	8018ad0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800dcee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d102      	bne.n	800dcfa <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	627b      	str	r3, [r7, #36]	; 0x24
 800dcf8:	e002      	b.n	800dd00 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800dcfa:	69fb      	ldr	r3, [r7, #28]
 800dcfc:	693a      	ldr	r2, [r7, #16]
 800dcfe:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800dd00:	693b      	ldr	r3, [r7, #16]
 800dd02:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800dd04:	8b7a      	ldrh	r2, [r7, #26]
 800dd06:	89fb      	ldrh	r3, [r7, #14]
 800dd08:	1ad3      	subs	r3, r2, r3
 800dd0a:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800dd10:	8b7b      	ldrh	r3, [r7, #26]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d19e      	bne.n	800dc54 <pbuf_alloc+0x50>
      break;
 800dd16:	e055      	b.n	800ddc4 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800dd18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd1a:	3303      	adds	r3, #3
 800dd1c:	b29b      	uxth	r3, r3
 800dd1e:	f023 0303 	bic.w	r3, r3, #3
 800dd22:	b29a      	uxth	r2, r3
 800dd24:	88bb      	ldrh	r3, [r7, #4]
 800dd26:	3303      	adds	r3, #3
 800dd28:	b29b      	uxth	r3, r3
 800dd2a:	f023 0303 	bic.w	r3, r3, #3
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	4413      	add	r3, r2
 800dd32:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800dd34:	8b3b      	ldrh	r3, [r7, #24]
 800dd36:	3310      	adds	r3, #16
 800dd38:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800dd3a:	8b3a      	ldrh	r2, [r7, #24]
 800dd3c:	88bb      	ldrh	r3, [r7, #4]
 800dd3e:	3303      	adds	r3, #3
 800dd40:	f023 0303 	bic.w	r3, r3, #3
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d306      	bcc.n	800dd56 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800dd48:	8afa      	ldrh	r2, [r7, #22]
 800dd4a:	88bb      	ldrh	r3, [r7, #4]
 800dd4c:	3303      	adds	r3, #3
 800dd4e:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d201      	bcs.n	800dd5a <pbuf_alloc+0x156>
        return NULL;
 800dd56:	2300      	movs	r3, #0
 800dd58:	e035      	b.n	800ddc6 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800dd5a:	8afb      	ldrh	r3, [r7, #22]
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f7ff fa77 	bl	800d250 <mem_malloc>
 800dd62:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800dd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d101      	bne.n	800dd6e <pbuf_alloc+0x16a>
        return NULL;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	e02b      	b.n	800ddc6 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800dd6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd70:	3310      	adds	r3, #16
 800dd72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd74:	4413      	add	r3, r2
 800dd76:	3303      	adds	r3, #3
 800dd78:	f023 0303 	bic.w	r3, r3, #3
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	88b9      	ldrh	r1, [r7, #4]
 800dd80:	88ba      	ldrh	r2, [r7, #4]
 800dd82:	2300      	movs	r3, #0
 800dd84:	9301      	str	r3, [sp, #4]
 800dd86:	887b      	ldrh	r3, [r7, #2]
 800dd88:	9300      	str	r3, [sp, #0]
 800dd8a:	460b      	mov	r3, r1
 800dd8c:	4601      	mov	r1, r0
 800dd8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd90:	f7ff ff0e 	bl	800dbb0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800dd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd96:	685b      	ldr	r3, [r3, #4]
 800dd98:	f003 0303 	and.w	r3, r3, #3
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d010      	beq.n	800ddc2 <pbuf_alloc+0x1be>
 800dda0:	4b0b      	ldr	r3, [pc, #44]	; (800ddd0 <pbuf_alloc+0x1cc>)
 800dda2:	f240 1223 	movw	r2, #291	; 0x123
 800dda6:	490e      	ldr	r1, [pc, #56]	; (800dde0 <pbuf_alloc+0x1dc>)
 800dda8:	480b      	ldr	r0, [pc, #44]	; (800ddd8 <pbuf_alloc+0x1d4>)
 800ddaa:	f00a fe91 	bl	8018ad0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ddae:	e008      	b.n	800ddc2 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ddb0:	4b07      	ldr	r3, [pc, #28]	; (800ddd0 <pbuf_alloc+0x1cc>)
 800ddb2:	f240 1227 	movw	r2, #295	; 0x127
 800ddb6:	490b      	ldr	r1, [pc, #44]	; (800dde4 <pbuf_alloc+0x1e0>)
 800ddb8:	4807      	ldr	r0, [pc, #28]	; (800ddd8 <pbuf_alloc+0x1d4>)
 800ddba:	f00a fe89 	bl	8018ad0 <iprintf>
      return NULL;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	e001      	b.n	800ddc6 <pbuf_alloc+0x1c2>
      break;
 800ddc2:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ddc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3728      	adds	r7, #40	; 0x28
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}
 800ddce:	bf00      	nop
 800ddd0:	08019ec8 	.word	0x08019ec8
 800ddd4:	08019ef8 	.word	0x08019ef8
 800ddd8:	08019f28 	.word	0x08019f28
 800dddc:	08019f50 	.word	0x08019f50
 800dde0:	08019f84 	.word	0x08019f84
 800dde4:	08019fb0 	.word	0x08019fb0

0800dde8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b086      	sub	sp, #24
 800ddec:	af02      	add	r7, sp, #8
 800ddee:	6078      	str	r0, [r7, #4]
 800ddf0:	460b      	mov	r3, r1
 800ddf2:	807b      	strh	r3, [r7, #2]
 800ddf4:	4613      	mov	r3, r2
 800ddf6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ddf8:	883b      	ldrh	r3, [r7, #0]
 800ddfa:	2b41      	cmp	r3, #65	; 0x41
 800ddfc:	d009      	beq.n	800de12 <pbuf_alloc_reference+0x2a>
 800ddfe:	883b      	ldrh	r3, [r7, #0]
 800de00:	2b01      	cmp	r3, #1
 800de02:	d006      	beq.n	800de12 <pbuf_alloc_reference+0x2a>
 800de04:	4b0f      	ldr	r3, [pc, #60]	; (800de44 <pbuf_alloc_reference+0x5c>)
 800de06:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800de0a:	490f      	ldr	r1, [pc, #60]	; (800de48 <pbuf_alloc_reference+0x60>)
 800de0c:	480f      	ldr	r0, [pc, #60]	; (800de4c <pbuf_alloc_reference+0x64>)
 800de0e:	f00a fe5f 	bl	8018ad0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800de12:	2007      	movs	r0, #7
 800de14:	f7ff fb8a 	bl	800d52c <memp_malloc>
 800de18:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d101      	bne.n	800de24 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800de20:	2300      	movs	r3, #0
 800de22:	e00b      	b.n	800de3c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800de24:	8879      	ldrh	r1, [r7, #2]
 800de26:	887a      	ldrh	r2, [r7, #2]
 800de28:	2300      	movs	r3, #0
 800de2a:	9301      	str	r3, [sp, #4]
 800de2c:	883b      	ldrh	r3, [r7, #0]
 800de2e:	9300      	str	r3, [sp, #0]
 800de30:	460b      	mov	r3, r1
 800de32:	6879      	ldr	r1, [r7, #4]
 800de34:	68f8      	ldr	r0, [r7, #12]
 800de36:	f7ff febb 	bl	800dbb0 <pbuf_init_alloced_pbuf>
  return p;
 800de3a:	68fb      	ldr	r3, [r7, #12]
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3710      	adds	r7, #16
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}
 800de44:	08019ec8 	.word	0x08019ec8
 800de48:	08019fcc 	.word	0x08019fcc
 800de4c:	08019f28 	.word	0x08019f28

0800de50 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b088      	sub	sp, #32
 800de54:	af02      	add	r7, sp, #8
 800de56:	607b      	str	r3, [r7, #4]
 800de58:	4603      	mov	r3, r0
 800de5a:	73fb      	strb	r3, [r7, #15]
 800de5c:	460b      	mov	r3, r1
 800de5e:	81bb      	strh	r3, [r7, #12]
 800de60:	4613      	mov	r3, r2
 800de62:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800de64:	7bfb      	ldrb	r3, [r7, #15]
 800de66:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800de68:	8a7b      	ldrh	r3, [r7, #18]
 800de6a:	3303      	adds	r3, #3
 800de6c:	f023 0203 	bic.w	r2, r3, #3
 800de70:	89bb      	ldrh	r3, [r7, #12]
 800de72:	441a      	add	r2, r3
 800de74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de76:	429a      	cmp	r2, r3
 800de78:	d901      	bls.n	800de7e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800de7a:	2300      	movs	r3, #0
 800de7c:	e018      	b.n	800deb0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800de7e:	6a3b      	ldr	r3, [r7, #32]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d007      	beq.n	800de94 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800de84:	8a7b      	ldrh	r3, [r7, #18]
 800de86:	3303      	adds	r3, #3
 800de88:	f023 0303 	bic.w	r3, r3, #3
 800de8c:	6a3a      	ldr	r2, [r7, #32]
 800de8e:	4413      	add	r3, r2
 800de90:	617b      	str	r3, [r7, #20]
 800de92:	e001      	b.n	800de98 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800de94:	2300      	movs	r3, #0
 800de96:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	89b9      	ldrh	r1, [r7, #12]
 800de9c:	89ba      	ldrh	r2, [r7, #12]
 800de9e:	2302      	movs	r3, #2
 800dea0:	9301      	str	r3, [sp, #4]
 800dea2:	897b      	ldrh	r3, [r7, #10]
 800dea4:	9300      	str	r3, [sp, #0]
 800dea6:	460b      	mov	r3, r1
 800dea8:	6979      	ldr	r1, [r7, #20]
 800deaa:	f7ff fe81 	bl	800dbb0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800deae:	687b      	ldr	r3, [r7, #4]
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3718      	adds	r7, #24
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
 800dec0:	460b      	mov	r3, r1
 800dec2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d106      	bne.n	800ded8 <pbuf_realloc+0x20>
 800deca:	4b3a      	ldr	r3, [pc, #232]	; (800dfb4 <pbuf_realloc+0xfc>)
 800decc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ded0:	4939      	ldr	r1, [pc, #228]	; (800dfb8 <pbuf_realloc+0x100>)
 800ded2:	483a      	ldr	r0, [pc, #232]	; (800dfbc <pbuf_realloc+0x104>)
 800ded4:	f00a fdfc 	bl	8018ad0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	891b      	ldrh	r3, [r3, #8]
 800dedc:	887a      	ldrh	r2, [r7, #2]
 800dede:	429a      	cmp	r2, r3
 800dee0:	d264      	bcs.n	800dfac <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	891a      	ldrh	r2, [r3, #8]
 800dee6:	887b      	ldrh	r3, [r7, #2]
 800dee8:	1ad3      	subs	r3, r2, r3
 800deea:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800deec:	887b      	ldrh	r3, [r7, #2]
 800deee:	817b      	strh	r3, [r7, #10]
  q = p;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800def4:	e018      	b.n	800df28 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	895b      	ldrh	r3, [r3, #10]
 800defa:	897a      	ldrh	r2, [r7, #10]
 800defc:	1ad3      	subs	r3, r2, r3
 800defe:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	891a      	ldrh	r2, [r3, #8]
 800df04:	893b      	ldrh	r3, [r7, #8]
 800df06:	1ad3      	subs	r3, r2, r3
 800df08:	b29a      	uxth	r2, r3
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d106      	bne.n	800df28 <pbuf_realloc+0x70>
 800df1a:	4b26      	ldr	r3, [pc, #152]	; (800dfb4 <pbuf_realloc+0xfc>)
 800df1c:	f240 12af 	movw	r2, #431	; 0x1af
 800df20:	4927      	ldr	r1, [pc, #156]	; (800dfc0 <pbuf_realloc+0x108>)
 800df22:	4826      	ldr	r0, [pc, #152]	; (800dfbc <pbuf_realloc+0x104>)
 800df24:	f00a fdd4 	bl	8018ad0 <iprintf>
  while (rem_len > q->len) {
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	895b      	ldrh	r3, [r3, #10]
 800df2c:	897a      	ldrh	r2, [r7, #10]
 800df2e:	429a      	cmp	r2, r3
 800df30:	d8e1      	bhi.n	800def6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	7b1b      	ldrb	r3, [r3, #12]
 800df36:	f003 030f 	and.w	r3, r3, #15
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d122      	bne.n	800df84 <pbuf_realloc+0xcc>
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	895b      	ldrh	r3, [r3, #10]
 800df42:	897a      	ldrh	r2, [r7, #10]
 800df44:	429a      	cmp	r2, r3
 800df46:	d01d      	beq.n	800df84 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	7b5b      	ldrb	r3, [r3, #13]
 800df4c:	f003 0302 	and.w	r3, r3, #2
 800df50:	2b00      	cmp	r3, #0
 800df52:	d117      	bne.n	800df84 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	685b      	ldr	r3, [r3, #4]
 800df58:	461a      	mov	r2, r3
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	1ad3      	subs	r3, r2, r3
 800df5e:	b29a      	uxth	r2, r3
 800df60:	897b      	ldrh	r3, [r7, #10]
 800df62:	4413      	add	r3, r2
 800df64:	b29b      	uxth	r3, r3
 800df66:	4619      	mov	r1, r3
 800df68:	68f8      	ldr	r0, [r7, #12]
 800df6a:	f7ff f875 	bl	800d058 <mem_trim>
 800df6e:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d106      	bne.n	800df84 <pbuf_realloc+0xcc>
 800df76:	4b0f      	ldr	r3, [pc, #60]	; (800dfb4 <pbuf_realloc+0xfc>)
 800df78:	f240 12bd 	movw	r2, #445	; 0x1bd
 800df7c:	4911      	ldr	r1, [pc, #68]	; (800dfc4 <pbuf_realloc+0x10c>)
 800df7e:	480f      	ldr	r0, [pc, #60]	; (800dfbc <pbuf_realloc+0x104>)
 800df80:	f00a fda6 	bl	8018ad0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	897a      	ldrh	r2, [r7, #10]
 800df88:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	895a      	ldrh	r2, [r3, #10]
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d004      	beq.n	800dfa4 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f000 f910 	bl	800e1c4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	601a      	str	r2, [r3, #0]
 800dfaa:	e000      	b.n	800dfae <pbuf_realloc+0xf6>
    return;
 800dfac:	bf00      	nop

}
 800dfae:	3710      	adds	r7, #16
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}
 800dfb4:	08019ec8 	.word	0x08019ec8
 800dfb8:	08019fe0 	.word	0x08019fe0
 800dfbc:	08019f28 	.word	0x08019f28
 800dfc0:	08019ff8 	.word	0x08019ff8
 800dfc4:	0801a010 	.word	0x0801a010

0800dfc8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b086      	sub	sp, #24
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	60f8      	str	r0, [r7, #12]
 800dfd0:	60b9      	str	r1, [r7, #8]
 800dfd2:	4613      	mov	r3, r2
 800dfd4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d106      	bne.n	800dfea <pbuf_add_header_impl+0x22>
 800dfdc:	4b2b      	ldr	r3, [pc, #172]	; (800e08c <pbuf_add_header_impl+0xc4>)
 800dfde:	f240 12df 	movw	r2, #479	; 0x1df
 800dfe2:	492b      	ldr	r1, [pc, #172]	; (800e090 <pbuf_add_header_impl+0xc8>)
 800dfe4:	482b      	ldr	r0, [pc, #172]	; (800e094 <pbuf_add_header_impl+0xcc>)
 800dfe6:	f00a fd73 	bl	8018ad0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d003      	beq.n	800dff8 <pbuf_add_header_impl+0x30>
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dff6:	d301      	bcc.n	800dffc <pbuf_add_header_impl+0x34>
    return 1;
 800dff8:	2301      	movs	r3, #1
 800dffa:	e043      	b.n	800e084 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d101      	bne.n	800e006 <pbuf_add_header_impl+0x3e>
    return 0;
 800e002:	2300      	movs	r3, #0
 800e004:	e03e      	b.n	800e084 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	891a      	ldrh	r2, [r3, #8]
 800e00e:	8a7b      	ldrh	r3, [r7, #18]
 800e010:	4413      	add	r3, r2
 800e012:	b29b      	uxth	r3, r3
 800e014:	8a7a      	ldrh	r2, [r7, #18]
 800e016:	429a      	cmp	r2, r3
 800e018:	d901      	bls.n	800e01e <pbuf_add_header_impl+0x56>
    return 1;
 800e01a:	2301      	movs	r3, #1
 800e01c:	e032      	b.n	800e084 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	7b1b      	ldrb	r3, [r3, #12]
 800e022:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e024:	8a3b      	ldrh	r3, [r7, #16]
 800e026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d00c      	beq.n	800e048 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	685a      	ldr	r2, [r3, #4]
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	425b      	negs	r3, r3
 800e036:	4413      	add	r3, r2
 800e038:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	3310      	adds	r3, #16
 800e03e:	697a      	ldr	r2, [r7, #20]
 800e040:	429a      	cmp	r2, r3
 800e042:	d20d      	bcs.n	800e060 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e044:	2301      	movs	r3, #1
 800e046:	e01d      	b.n	800e084 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e048:	79fb      	ldrb	r3, [r7, #7]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d006      	beq.n	800e05c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	685a      	ldr	r2, [r3, #4]
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	425b      	negs	r3, r3
 800e056:	4413      	add	r3, r2
 800e058:	617b      	str	r3, [r7, #20]
 800e05a:	e001      	b.n	800e060 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e05c:	2301      	movs	r3, #1
 800e05e:	e011      	b.n	800e084 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	697a      	ldr	r2, [r7, #20]
 800e064:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	895a      	ldrh	r2, [r3, #10]
 800e06a:	8a7b      	ldrh	r3, [r7, #18]
 800e06c:	4413      	add	r3, r2
 800e06e:	b29a      	uxth	r2, r3
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	891a      	ldrh	r2, [r3, #8]
 800e078:	8a7b      	ldrh	r3, [r7, #18]
 800e07a:	4413      	add	r3, r2
 800e07c:	b29a      	uxth	r2, r3
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	811a      	strh	r2, [r3, #8]


  return 0;
 800e082:	2300      	movs	r3, #0
}
 800e084:	4618      	mov	r0, r3
 800e086:	3718      	adds	r7, #24
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}
 800e08c:	08019ec8 	.word	0x08019ec8
 800e090:	0801a02c 	.word	0x0801a02c
 800e094:	08019f28 	.word	0x08019f28

0800e098 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	6839      	ldr	r1, [r7, #0]
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f7ff ff8e 	bl	800dfc8 <pbuf_add_header_impl>
 800e0ac:	4603      	mov	r3, r0
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3708      	adds	r7, #8
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
	...

0800e0b8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b084      	sub	sp, #16
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d106      	bne.n	800e0d6 <pbuf_remove_header+0x1e>
 800e0c8:	4b20      	ldr	r3, [pc, #128]	; (800e14c <pbuf_remove_header+0x94>)
 800e0ca:	f240 224b 	movw	r2, #587	; 0x24b
 800e0ce:	4920      	ldr	r1, [pc, #128]	; (800e150 <pbuf_remove_header+0x98>)
 800e0d0:	4820      	ldr	r0, [pc, #128]	; (800e154 <pbuf_remove_header+0x9c>)
 800e0d2:	f00a fcfd 	bl	8018ad0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d003      	beq.n	800e0e4 <pbuf_remove_header+0x2c>
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0e2:	d301      	bcc.n	800e0e8 <pbuf_remove_header+0x30>
    return 1;
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	e02c      	b.n	800e142 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d101      	bne.n	800e0f2 <pbuf_remove_header+0x3a>
    return 0;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	e027      	b.n	800e142 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	895b      	ldrh	r3, [r3, #10]
 800e0fa:	89fa      	ldrh	r2, [r7, #14]
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	d908      	bls.n	800e112 <pbuf_remove_header+0x5a>
 800e100:	4b12      	ldr	r3, [pc, #72]	; (800e14c <pbuf_remove_header+0x94>)
 800e102:	f240 2255 	movw	r2, #597	; 0x255
 800e106:	4914      	ldr	r1, [pc, #80]	; (800e158 <pbuf_remove_header+0xa0>)
 800e108:	4812      	ldr	r0, [pc, #72]	; (800e154 <pbuf_remove_header+0x9c>)
 800e10a:	f00a fce1 	bl	8018ad0 <iprintf>
 800e10e:	2301      	movs	r3, #1
 800e110:	e017      	b.n	800e142 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	685a      	ldr	r2, [r3, #4]
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	441a      	add	r2, r3
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	895a      	ldrh	r2, [r3, #10]
 800e128:	89fb      	ldrh	r3, [r7, #14]
 800e12a:	1ad3      	subs	r3, r2, r3
 800e12c:	b29a      	uxth	r2, r3
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	891a      	ldrh	r2, [r3, #8]
 800e136:	89fb      	ldrh	r3, [r7, #14]
 800e138:	1ad3      	subs	r3, r2, r3
 800e13a:	b29a      	uxth	r2, r3
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e140:	2300      	movs	r3, #0
}
 800e142:	4618      	mov	r0, r3
 800e144:	3710      	adds	r7, #16
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	08019ec8 	.word	0x08019ec8
 800e150:	0801a02c 	.word	0x0801a02c
 800e154:	08019f28 	.word	0x08019f28
 800e158:	0801a038 	.word	0x0801a038

0800e15c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	460b      	mov	r3, r1
 800e166:	807b      	strh	r3, [r7, #2]
 800e168:	4613      	mov	r3, r2
 800e16a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e16c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e170:	2b00      	cmp	r3, #0
 800e172:	da08      	bge.n	800e186 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e174:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e178:	425b      	negs	r3, r3
 800e17a:	4619      	mov	r1, r3
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f7ff ff9b 	bl	800e0b8 <pbuf_remove_header>
 800e182:	4603      	mov	r3, r0
 800e184:	e007      	b.n	800e196 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e186:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e18a:	787a      	ldrb	r2, [r7, #1]
 800e18c:	4619      	mov	r1, r3
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f7ff ff1a 	bl	800dfc8 <pbuf_add_header_impl>
 800e194:	4603      	mov	r3, r0
  }
}
 800e196:	4618      	mov	r0, r3
 800e198:	3708      	adds	r7, #8
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}

0800e19e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e19e:	b580      	push	{r7, lr}
 800e1a0:	b082      	sub	sp, #8
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	6078      	str	r0, [r7, #4]
 800e1a6:	460b      	mov	r3, r1
 800e1a8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e1aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e1ae:	2201      	movs	r2, #1
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f7ff ffd2 	bl	800e15c <pbuf_header_impl>
 800e1b8:	4603      	mov	r3, r0
}
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3708      	adds	r7, #8
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}
	...

0800e1c4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b086      	sub	sp, #24
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d10b      	bne.n	800e1ea <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d106      	bne.n	800e1e6 <pbuf_free+0x22>
 800e1d8:	4b38      	ldr	r3, [pc, #224]	; (800e2bc <pbuf_free+0xf8>)
 800e1da:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e1de:	4938      	ldr	r1, [pc, #224]	; (800e2c0 <pbuf_free+0xfc>)
 800e1e0:	4838      	ldr	r0, [pc, #224]	; (800e2c4 <pbuf_free+0x100>)
 800e1e2:	f00a fc75 	bl	8018ad0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	e063      	b.n	800e2b2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e1ea:	2300      	movs	r3, #0
 800e1ec:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e1ee:	e05c      	b.n	800e2aa <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	7b9b      	ldrb	r3, [r3, #14]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d106      	bne.n	800e206 <pbuf_free+0x42>
 800e1f8:	4b30      	ldr	r3, [pc, #192]	; (800e2bc <pbuf_free+0xf8>)
 800e1fa:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e1fe:	4932      	ldr	r1, [pc, #200]	; (800e2c8 <pbuf_free+0x104>)
 800e200:	4830      	ldr	r0, [pc, #192]	; (800e2c4 <pbuf_free+0x100>)
 800e202:	f00a fc65 	bl	8018ad0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	7b9b      	ldrb	r3, [r3, #14]
 800e20a:	3b01      	subs	r3, #1
 800e20c:	b2da      	uxtb	r2, r3
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	739a      	strb	r2, [r3, #14]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	7b9b      	ldrb	r3, [r3, #14]
 800e216:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e218:	7dbb      	ldrb	r3, [r7, #22]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d143      	bne.n	800e2a6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	7b1b      	ldrb	r3, [r3, #12]
 800e228:	f003 030f 	and.w	r3, r3, #15
 800e22c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	7b5b      	ldrb	r3, [r3, #13]
 800e232:	f003 0302 	and.w	r3, r3, #2
 800e236:	2b00      	cmp	r3, #0
 800e238:	d011      	beq.n	800e25e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	691b      	ldr	r3, [r3, #16]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d106      	bne.n	800e254 <pbuf_free+0x90>
 800e246:	4b1d      	ldr	r3, [pc, #116]	; (800e2bc <pbuf_free+0xf8>)
 800e248:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e24c:	491f      	ldr	r1, [pc, #124]	; (800e2cc <pbuf_free+0x108>)
 800e24e:	481d      	ldr	r0, [pc, #116]	; (800e2c4 <pbuf_free+0x100>)
 800e250:	f00a fc3e 	bl	8018ad0 <iprintf>
        pc->custom_free_function(p);
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	691b      	ldr	r3, [r3, #16]
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	4798      	blx	r3
 800e25c:	e01d      	b.n	800e29a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e25e:	7bfb      	ldrb	r3, [r7, #15]
 800e260:	2b02      	cmp	r3, #2
 800e262:	d104      	bne.n	800e26e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800e264:	6879      	ldr	r1, [r7, #4]
 800e266:	2008      	movs	r0, #8
 800e268:	f7ff f9ac 	bl	800d5c4 <memp_free>
 800e26c:	e015      	b.n	800e29a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e26e:	7bfb      	ldrb	r3, [r7, #15]
 800e270:	2b01      	cmp	r3, #1
 800e272:	d104      	bne.n	800e27e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800e274:	6879      	ldr	r1, [r7, #4]
 800e276:	2007      	movs	r0, #7
 800e278:	f7ff f9a4 	bl	800d5c4 <memp_free>
 800e27c:	e00d      	b.n	800e29a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e27e:	7bfb      	ldrb	r3, [r7, #15]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d103      	bne.n	800e28c <pbuf_free+0xc8>
          mem_free(p);
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f7fe fe7d 	bl	800cf84 <mem_free>
 800e28a:	e006      	b.n	800e29a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e28c:	4b0b      	ldr	r3, [pc, #44]	; (800e2bc <pbuf_free+0xf8>)
 800e28e:	f240 320f 	movw	r2, #783	; 0x30f
 800e292:	490f      	ldr	r1, [pc, #60]	; (800e2d0 <pbuf_free+0x10c>)
 800e294:	480b      	ldr	r0, [pc, #44]	; (800e2c4 <pbuf_free+0x100>)
 800e296:	f00a fc1b 	bl	8018ad0 <iprintf>
        }
      }
      count++;
 800e29a:	7dfb      	ldrb	r3, [r7, #23]
 800e29c:	3301      	adds	r3, #1
 800e29e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	607b      	str	r3, [r7, #4]
 800e2a4:	e001      	b.n	800e2aa <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d19f      	bne.n	800e1f0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e2b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3718      	adds	r7, #24
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}
 800e2ba:	bf00      	nop
 800e2bc:	08019ec8 	.word	0x08019ec8
 800e2c0:	0801a02c 	.word	0x0801a02c
 800e2c4:	08019f28 	.word	0x08019f28
 800e2c8:	0801a058 	.word	0x0801a058
 800e2cc:	0801a070 	.word	0x0801a070
 800e2d0:	0801a094 	.word	0x0801a094

0800e2d4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b085      	sub	sp, #20
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e2e0:	e005      	b.n	800e2ee <pbuf_clen+0x1a>
    ++len;
 800e2e2:	89fb      	ldrh	r3, [r7, #14]
 800e2e4:	3301      	adds	r3, #1
 800e2e6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d1f6      	bne.n	800e2e2 <pbuf_clen+0xe>
  }
  return len;
 800e2f4:	89fb      	ldrh	r3, [r7, #14]
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3714      	adds	r7, #20
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e300:	4770      	bx	lr
	...

0800e304 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b082      	sub	sp, #8
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d010      	beq.n	800e334 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	7b9b      	ldrb	r3, [r3, #14]
 800e316:	3301      	adds	r3, #1
 800e318:	b2da      	uxtb	r2, r3
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	7b9b      	ldrb	r3, [r3, #14]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d106      	bne.n	800e334 <pbuf_ref+0x30>
 800e326:	4b05      	ldr	r3, [pc, #20]	; (800e33c <pbuf_ref+0x38>)
 800e328:	f240 3242 	movw	r2, #834	; 0x342
 800e32c:	4904      	ldr	r1, [pc, #16]	; (800e340 <pbuf_ref+0x3c>)
 800e32e:	4805      	ldr	r0, [pc, #20]	; (800e344 <pbuf_ref+0x40>)
 800e330:	f00a fbce 	bl	8018ad0 <iprintf>
  }
}
 800e334:	bf00      	nop
 800e336:	3708      	adds	r7, #8
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}
 800e33c:	08019ec8 	.word	0x08019ec8
 800e340:	0801a0a8 	.word	0x0801a0a8
 800e344:	08019f28 	.word	0x08019f28

0800e348 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b084      	sub	sp, #16
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d002      	beq.n	800e35e <pbuf_cat+0x16>
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d107      	bne.n	800e36e <pbuf_cat+0x26>
 800e35e:	4b20      	ldr	r3, [pc, #128]	; (800e3e0 <pbuf_cat+0x98>)
 800e360:	f240 325a 	movw	r2, #858	; 0x35a
 800e364:	491f      	ldr	r1, [pc, #124]	; (800e3e4 <pbuf_cat+0x9c>)
 800e366:	4820      	ldr	r0, [pc, #128]	; (800e3e8 <pbuf_cat+0xa0>)
 800e368:	f00a fbb2 	bl	8018ad0 <iprintf>
 800e36c:	e034      	b.n	800e3d8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	60fb      	str	r3, [r7, #12]
 800e372:	e00a      	b.n	800e38a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	891a      	ldrh	r2, [r3, #8]
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	891b      	ldrh	r3, [r3, #8]
 800e37c:	4413      	add	r3, r2
 800e37e:	b29a      	uxth	r2, r3
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	60fb      	str	r3, [r7, #12]
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d1f0      	bne.n	800e374 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	891a      	ldrh	r2, [r3, #8]
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	895b      	ldrh	r3, [r3, #10]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d006      	beq.n	800e3ac <pbuf_cat+0x64>
 800e39e:	4b10      	ldr	r3, [pc, #64]	; (800e3e0 <pbuf_cat+0x98>)
 800e3a0:	f240 3262 	movw	r2, #866	; 0x362
 800e3a4:	4911      	ldr	r1, [pc, #68]	; (800e3ec <pbuf_cat+0xa4>)
 800e3a6:	4810      	ldr	r0, [pc, #64]	; (800e3e8 <pbuf_cat+0xa0>)
 800e3a8:	f00a fb92 	bl	8018ad0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d006      	beq.n	800e3c2 <pbuf_cat+0x7a>
 800e3b4:	4b0a      	ldr	r3, [pc, #40]	; (800e3e0 <pbuf_cat+0x98>)
 800e3b6:	f240 3263 	movw	r2, #867	; 0x363
 800e3ba:	490d      	ldr	r1, [pc, #52]	; (800e3f0 <pbuf_cat+0xa8>)
 800e3bc:	480a      	ldr	r0, [pc, #40]	; (800e3e8 <pbuf_cat+0xa0>)
 800e3be:	f00a fb87 	bl	8018ad0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	891a      	ldrh	r2, [r3, #8]
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	891b      	ldrh	r3, [r3, #8]
 800e3ca:	4413      	add	r3, r2
 800e3cc:	b29a      	uxth	r2, r3
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	683a      	ldr	r2, [r7, #0]
 800e3d6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e3d8:	3710      	adds	r7, #16
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}
 800e3de:	bf00      	nop
 800e3e0:	08019ec8 	.word	0x08019ec8
 800e3e4:	0801a0bc 	.word	0x0801a0bc
 800e3e8:	08019f28 	.word	0x08019f28
 800e3ec:	0801a0f4 	.word	0x0801a0f4
 800e3f0:	0801a124 	.word	0x0801a124

0800e3f4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b082      	sub	sp, #8
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800e3fe:	6839      	ldr	r1, [r7, #0]
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f7ff ffa1 	bl	800e348 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800e406:	6838      	ldr	r0, [r7, #0]
 800e408:	f7ff ff7c 	bl	800e304 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800e40c:	bf00      	nop
 800e40e:	3708      	adds	r7, #8
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}

0800e414 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b086      	sub	sp, #24
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e41e:	2300      	movs	r3, #0
 800e420:	617b      	str	r3, [r7, #20]
 800e422:	2300      	movs	r3, #0
 800e424:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d008      	beq.n	800e43e <pbuf_copy+0x2a>
 800e42c:	683b      	ldr	r3, [r7, #0]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d005      	beq.n	800e43e <pbuf_copy+0x2a>
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	891a      	ldrh	r2, [r3, #8]
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	891b      	ldrh	r3, [r3, #8]
 800e43a:	429a      	cmp	r2, r3
 800e43c:	d209      	bcs.n	800e452 <pbuf_copy+0x3e>
 800e43e:	4b57      	ldr	r3, [pc, #348]	; (800e59c <pbuf_copy+0x188>)
 800e440:	f240 32ca 	movw	r2, #970	; 0x3ca
 800e444:	4956      	ldr	r1, [pc, #344]	; (800e5a0 <pbuf_copy+0x18c>)
 800e446:	4857      	ldr	r0, [pc, #348]	; (800e5a4 <pbuf_copy+0x190>)
 800e448:	f00a fb42 	bl	8018ad0 <iprintf>
 800e44c:	f06f 030f 	mvn.w	r3, #15
 800e450:	e09f      	b.n	800e592 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	895b      	ldrh	r3, [r3, #10]
 800e456:	461a      	mov	r2, r3
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	1ad2      	subs	r2, r2, r3
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	895b      	ldrh	r3, [r3, #10]
 800e460:	4619      	mov	r1, r3
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	1acb      	subs	r3, r1, r3
 800e466:	429a      	cmp	r2, r3
 800e468:	d306      	bcc.n	800e478 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	895b      	ldrh	r3, [r3, #10]
 800e46e:	461a      	mov	r2, r3
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	1ad3      	subs	r3, r2, r3
 800e474:	60fb      	str	r3, [r7, #12]
 800e476:	e005      	b.n	800e484 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	895b      	ldrh	r3, [r3, #10]
 800e47c:	461a      	mov	r2, r3
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	1ad3      	subs	r3, r2, r3
 800e482:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	685a      	ldr	r2, [r3, #4]
 800e488:	697b      	ldr	r3, [r7, #20]
 800e48a:	18d0      	adds	r0, r2, r3
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	685a      	ldr	r2, [r3, #4]
 800e490:	693b      	ldr	r3, [r7, #16]
 800e492:	4413      	add	r3, r2
 800e494:	68fa      	ldr	r2, [r7, #12]
 800e496:	4619      	mov	r1, r3
 800e498:	f00a fa5f 	bl	801895a <memcpy>
    offset_to += len;
 800e49c:	697a      	ldr	r2, [r7, #20]
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	4413      	add	r3, r2
 800e4a2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e4a4:	693a      	ldr	r2, [r7, #16]
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	4413      	add	r3, r2
 800e4aa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	895b      	ldrh	r3, [r3, #10]
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	4293      	cmp	r3, r2
 800e4b6:	d906      	bls.n	800e4c6 <pbuf_copy+0xb2>
 800e4b8:	4b38      	ldr	r3, [pc, #224]	; (800e59c <pbuf_copy+0x188>)
 800e4ba:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e4be:	493a      	ldr	r1, [pc, #232]	; (800e5a8 <pbuf_copy+0x194>)
 800e4c0:	4838      	ldr	r0, [pc, #224]	; (800e5a4 <pbuf_copy+0x190>)
 800e4c2:	f00a fb05 	bl	8018ad0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	895b      	ldrh	r3, [r3, #10]
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	693b      	ldr	r3, [r7, #16]
 800e4ce:	4293      	cmp	r3, r2
 800e4d0:	d906      	bls.n	800e4e0 <pbuf_copy+0xcc>
 800e4d2:	4b32      	ldr	r3, [pc, #200]	; (800e59c <pbuf_copy+0x188>)
 800e4d4:	f240 32da 	movw	r2, #986	; 0x3da
 800e4d8:	4934      	ldr	r1, [pc, #208]	; (800e5ac <pbuf_copy+0x198>)
 800e4da:	4832      	ldr	r0, [pc, #200]	; (800e5a4 <pbuf_copy+0x190>)
 800e4dc:	f00a faf8 	bl	8018ad0 <iprintf>
    if (offset_from >= p_from->len) {
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	895b      	ldrh	r3, [r3, #10]
 800e4e4:	461a      	mov	r2, r3
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	4293      	cmp	r3, r2
 800e4ea:	d304      	bcc.n	800e4f6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	895b      	ldrh	r3, [r3, #10]
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d114      	bne.n	800e52c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e502:	2300      	movs	r3, #0
 800e504:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d10c      	bne.n	800e52c <pbuf_copy+0x118>
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d009      	beq.n	800e52c <pbuf_copy+0x118>
 800e518:	4b20      	ldr	r3, [pc, #128]	; (800e59c <pbuf_copy+0x188>)
 800e51a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e51e:	4924      	ldr	r1, [pc, #144]	; (800e5b0 <pbuf_copy+0x19c>)
 800e520:	4820      	ldr	r0, [pc, #128]	; (800e5a4 <pbuf_copy+0x190>)
 800e522:	f00a fad5 	bl	8018ad0 <iprintf>
 800e526:	f06f 030f 	mvn.w	r3, #15
 800e52a:	e032      	b.n	800e592 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d013      	beq.n	800e55a <pbuf_copy+0x146>
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	895a      	ldrh	r2, [r3, #10]
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	891b      	ldrh	r3, [r3, #8]
 800e53a:	429a      	cmp	r2, r3
 800e53c:	d10d      	bne.n	800e55a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d009      	beq.n	800e55a <pbuf_copy+0x146>
 800e546:	4b15      	ldr	r3, [pc, #84]	; (800e59c <pbuf_copy+0x188>)
 800e548:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800e54c:	4919      	ldr	r1, [pc, #100]	; (800e5b4 <pbuf_copy+0x1a0>)
 800e54e:	4815      	ldr	r0, [pc, #84]	; (800e5a4 <pbuf_copy+0x190>)
 800e550:	f00a fabe 	bl	8018ad0 <iprintf>
 800e554:	f06f 0305 	mvn.w	r3, #5
 800e558:	e01b      	b.n	800e592 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d013      	beq.n	800e588 <pbuf_copy+0x174>
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	895a      	ldrh	r2, [r3, #10]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	891b      	ldrh	r3, [r3, #8]
 800e568:	429a      	cmp	r2, r3
 800e56a:	d10d      	bne.n	800e588 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d009      	beq.n	800e588 <pbuf_copy+0x174>
 800e574:	4b09      	ldr	r3, [pc, #36]	; (800e59c <pbuf_copy+0x188>)
 800e576:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800e57a:	490e      	ldr	r1, [pc, #56]	; (800e5b4 <pbuf_copy+0x1a0>)
 800e57c:	4809      	ldr	r0, [pc, #36]	; (800e5a4 <pbuf_copy+0x190>)
 800e57e:	f00a faa7 	bl	8018ad0 <iprintf>
 800e582:	f06f 0305 	mvn.w	r3, #5
 800e586:	e004      	b.n	800e592 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	f47f af61 	bne.w	800e452 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e590:	2300      	movs	r3, #0
}
 800e592:	4618      	mov	r0, r3
 800e594:	3718      	adds	r7, #24
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}
 800e59a:	bf00      	nop
 800e59c:	08019ec8 	.word	0x08019ec8
 800e5a0:	0801a170 	.word	0x0801a170
 800e5a4:	08019f28 	.word	0x08019f28
 800e5a8:	0801a1a0 	.word	0x0801a1a0
 800e5ac:	0801a1b8 	.word	0x0801a1b8
 800e5b0:	0801a1d4 	.word	0x0801a1d4
 800e5b4:	0801a1e4 	.word	0x0801a1e4

0800e5b8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b088      	sub	sp, #32
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	60f8      	str	r0, [r7, #12]
 800e5c0:	60b9      	str	r1, [r7, #8]
 800e5c2:	4611      	mov	r1, r2
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	460b      	mov	r3, r1
 800e5c8:	80fb      	strh	r3, [r7, #6]
 800e5ca:	4613      	mov	r3, r2
 800e5cc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d108      	bne.n	800e5ee <pbuf_copy_partial+0x36>
 800e5dc:	4b2b      	ldr	r3, [pc, #172]	; (800e68c <pbuf_copy_partial+0xd4>)
 800e5de:	f240 420a 	movw	r2, #1034	; 0x40a
 800e5e2:	492b      	ldr	r1, [pc, #172]	; (800e690 <pbuf_copy_partial+0xd8>)
 800e5e4:	482b      	ldr	r0, [pc, #172]	; (800e694 <pbuf_copy_partial+0xdc>)
 800e5e6:	f00a fa73 	bl	8018ad0 <iprintf>
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	e04a      	b.n	800e684 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d108      	bne.n	800e606 <pbuf_copy_partial+0x4e>
 800e5f4:	4b25      	ldr	r3, [pc, #148]	; (800e68c <pbuf_copy_partial+0xd4>)
 800e5f6:	f240 420b 	movw	r2, #1035	; 0x40b
 800e5fa:	4927      	ldr	r1, [pc, #156]	; (800e698 <pbuf_copy_partial+0xe0>)
 800e5fc:	4825      	ldr	r0, [pc, #148]	; (800e694 <pbuf_copy_partial+0xdc>)
 800e5fe:	f00a fa67 	bl	8018ad0 <iprintf>
 800e602:	2300      	movs	r3, #0
 800e604:	e03e      	b.n	800e684 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	61fb      	str	r3, [r7, #28]
 800e60a:	e034      	b.n	800e676 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e60c:	88bb      	ldrh	r3, [r7, #4]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d00a      	beq.n	800e628 <pbuf_copy_partial+0x70>
 800e612:	69fb      	ldr	r3, [r7, #28]
 800e614:	895b      	ldrh	r3, [r3, #10]
 800e616:	88ba      	ldrh	r2, [r7, #4]
 800e618:	429a      	cmp	r2, r3
 800e61a:	d305      	bcc.n	800e628 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e61c:	69fb      	ldr	r3, [r7, #28]
 800e61e:	895b      	ldrh	r3, [r3, #10]
 800e620:	88ba      	ldrh	r2, [r7, #4]
 800e622:	1ad3      	subs	r3, r2, r3
 800e624:	80bb      	strh	r3, [r7, #4]
 800e626:	e023      	b.n	800e670 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e628:	69fb      	ldr	r3, [r7, #28]
 800e62a:	895a      	ldrh	r2, [r3, #10]
 800e62c:	88bb      	ldrh	r3, [r7, #4]
 800e62e:	1ad3      	subs	r3, r2, r3
 800e630:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e632:	8b3a      	ldrh	r2, [r7, #24]
 800e634:	88fb      	ldrh	r3, [r7, #6]
 800e636:	429a      	cmp	r2, r3
 800e638:	d901      	bls.n	800e63e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e63a:	88fb      	ldrh	r3, [r7, #6]
 800e63c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e63e:	8b7b      	ldrh	r3, [r7, #26]
 800e640:	68ba      	ldr	r2, [r7, #8]
 800e642:	18d0      	adds	r0, r2, r3
 800e644:	69fb      	ldr	r3, [r7, #28]
 800e646:	685a      	ldr	r2, [r3, #4]
 800e648:	88bb      	ldrh	r3, [r7, #4]
 800e64a:	4413      	add	r3, r2
 800e64c:	8b3a      	ldrh	r2, [r7, #24]
 800e64e:	4619      	mov	r1, r3
 800e650:	f00a f983 	bl	801895a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e654:	8afa      	ldrh	r2, [r7, #22]
 800e656:	8b3b      	ldrh	r3, [r7, #24]
 800e658:	4413      	add	r3, r2
 800e65a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e65c:	8b7a      	ldrh	r2, [r7, #26]
 800e65e:	8b3b      	ldrh	r3, [r7, #24]
 800e660:	4413      	add	r3, r2
 800e662:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e664:	88fa      	ldrh	r2, [r7, #6]
 800e666:	8b3b      	ldrh	r3, [r7, #24]
 800e668:	1ad3      	subs	r3, r2, r3
 800e66a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e66c:	2300      	movs	r3, #0
 800e66e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e670:	69fb      	ldr	r3, [r7, #28]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	61fb      	str	r3, [r7, #28]
 800e676:	88fb      	ldrh	r3, [r7, #6]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d002      	beq.n	800e682 <pbuf_copy_partial+0xca>
 800e67c:	69fb      	ldr	r3, [r7, #28]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d1c4      	bne.n	800e60c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e682:	8afb      	ldrh	r3, [r7, #22]
}
 800e684:	4618      	mov	r0, r3
 800e686:	3720      	adds	r7, #32
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}
 800e68c:	08019ec8 	.word	0x08019ec8
 800e690:	0801a210 	.word	0x0801a210
 800e694:	08019f28 	.word	0x08019f28
 800e698:	0801a230 	.word	0x0801a230

0800e69c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b084      	sub	sp, #16
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	603a      	str	r2, [r7, #0]
 800e6a6:	71fb      	strb	r3, [r7, #7]
 800e6a8:	460b      	mov	r3, r1
 800e6aa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	8919      	ldrh	r1, [r3, #8]
 800e6b0:	88ba      	ldrh	r2, [r7, #4]
 800e6b2:	79fb      	ldrb	r3, [r7, #7]
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f7ff faa5 	bl	800dc04 <pbuf_alloc>
 800e6ba:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d101      	bne.n	800e6c6 <pbuf_clone+0x2a>
    return NULL;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	e011      	b.n	800e6ea <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e6c6:	6839      	ldr	r1, [r7, #0]
 800e6c8:	68f8      	ldr	r0, [r7, #12]
 800e6ca:	f7ff fea3 	bl	800e414 <pbuf_copy>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e6d2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d006      	beq.n	800e6e8 <pbuf_clone+0x4c>
 800e6da:	4b06      	ldr	r3, [pc, #24]	; (800e6f4 <pbuf_clone+0x58>)
 800e6dc:	f240 5224 	movw	r2, #1316	; 0x524
 800e6e0:	4905      	ldr	r1, [pc, #20]	; (800e6f8 <pbuf_clone+0x5c>)
 800e6e2:	4806      	ldr	r0, [pc, #24]	; (800e6fc <pbuf_clone+0x60>)
 800e6e4:	f00a f9f4 	bl	8018ad0 <iprintf>
  return q;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3710      	adds	r7, #16
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	08019ec8 	.word	0x08019ec8
 800e6f8:	0801a33c 	.word	0x0801a33c
 800e6fc:	08019f28 	.word	0x08019f28

0800e700 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e704:	f00a f9fc 	bl	8018b00 <rand>
 800e708:	4603      	mov	r3, r0
 800e70a:	b29b      	uxth	r3, r3
 800e70c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e710:	b29b      	uxth	r3, r3
 800e712:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e716:	b29a      	uxth	r2, r3
 800e718:	4b01      	ldr	r3, [pc, #4]	; (800e720 <tcp_init+0x20>)
 800e71a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e71c:	bf00      	nop
 800e71e:	bd80      	pop	{r7, pc}
 800e720:	20000032 	.word	0x20000032

0800e724 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b082      	sub	sp, #8
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	7d1b      	ldrb	r3, [r3, #20]
 800e730:	2b01      	cmp	r3, #1
 800e732:	d105      	bne.n	800e740 <tcp_free+0x1c>
 800e734:	4b06      	ldr	r3, [pc, #24]	; (800e750 <tcp_free+0x2c>)
 800e736:	22d4      	movs	r2, #212	; 0xd4
 800e738:	4906      	ldr	r1, [pc, #24]	; (800e754 <tcp_free+0x30>)
 800e73a:	4807      	ldr	r0, [pc, #28]	; (800e758 <tcp_free+0x34>)
 800e73c:	f00a f9c8 	bl	8018ad0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e740:	6879      	ldr	r1, [r7, #4]
 800e742:	2001      	movs	r0, #1
 800e744:	f7fe ff3e 	bl	800d5c4 <memp_free>
}
 800e748:	bf00      	nop
 800e74a:	3708      	adds	r7, #8
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}
 800e750:	0801a3c8 	.word	0x0801a3c8
 800e754:	0801a3f8 	.word	0x0801a3f8
 800e758:	0801a40c 	.word	0x0801a40c

0800e75c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b082      	sub	sp, #8
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	7d1b      	ldrb	r3, [r3, #20]
 800e768:	2b01      	cmp	r3, #1
 800e76a:	d105      	bne.n	800e778 <tcp_free_listen+0x1c>
 800e76c:	4b06      	ldr	r3, [pc, #24]	; (800e788 <tcp_free_listen+0x2c>)
 800e76e:	22df      	movs	r2, #223	; 0xdf
 800e770:	4906      	ldr	r1, [pc, #24]	; (800e78c <tcp_free_listen+0x30>)
 800e772:	4807      	ldr	r0, [pc, #28]	; (800e790 <tcp_free_listen+0x34>)
 800e774:	f00a f9ac 	bl	8018ad0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e778:	6879      	ldr	r1, [r7, #4]
 800e77a:	2002      	movs	r0, #2
 800e77c:	f7fe ff22 	bl	800d5c4 <memp_free>
}
 800e780:	bf00      	nop
 800e782:	3708      	adds	r7, #8
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}
 800e788:	0801a3c8 	.word	0x0801a3c8
 800e78c:	0801a434 	.word	0x0801a434
 800e790:	0801a40c 	.word	0x0801a40c

0800e794 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e798:	f000 fe98 	bl	800f4cc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e79c:	4b07      	ldr	r3, [pc, #28]	; (800e7bc <tcp_tmr+0x28>)
 800e79e:	781b      	ldrb	r3, [r3, #0]
 800e7a0:	3301      	adds	r3, #1
 800e7a2:	b2da      	uxtb	r2, r3
 800e7a4:	4b05      	ldr	r3, [pc, #20]	; (800e7bc <tcp_tmr+0x28>)
 800e7a6:	701a      	strb	r2, [r3, #0]
 800e7a8:	4b04      	ldr	r3, [pc, #16]	; (800e7bc <tcp_tmr+0x28>)
 800e7aa:	781b      	ldrb	r3, [r3, #0]
 800e7ac:	f003 0301 	and.w	r3, r3, #1
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d001      	beq.n	800e7b8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e7b4:	f000 fb4c 	bl	800ee50 <tcp_slowtmr>
  }
}
 800e7b8:	bf00      	nop
 800e7ba:	bd80      	pop	{r7, pc}
 800e7bc:	20000479 	.word	0x20000479

0800e7c0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b084      	sub	sp, #16
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d105      	bne.n	800e7dc <tcp_remove_listener+0x1c>
 800e7d0:	4b0d      	ldr	r3, [pc, #52]	; (800e808 <tcp_remove_listener+0x48>)
 800e7d2:	22ff      	movs	r2, #255	; 0xff
 800e7d4:	490d      	ldr	r1, [pc, #52]	; (800e80c <tcp_remove_listener+0x4c>)
 800e7d6:	480e      	ldr	r0, [pc, #56]	; (800e810 <tcp_remove_listener+0x50>)
 800e7d8:	f00a f97a 	bl	8018ad0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	60fb      	str	r3, [r7, #12]
 800e7e0:	e00a      	b.n	800e7f8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7e6:	683a      	ldr	r2, [r7, #0]
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d102      	bne.n	800e7f2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	68db      	ldr	r3, [r3, #12]
 800e7f6:	60fb      	str	r3, [r7, #12]
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d1f1      	bne.n	800e7e2 <tcp_remove_listener+0x22>
    }
  }
}
 800e7fe:	bf00      	nop
 800e800:	3710      	adds	r7, #16
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	0801a3c8 	.word	0x0801a3c8
 800e80c:	0801a450 	.word	0x0801a450
 800e810:	0801a40c 	.word	0x0801a40c

0800e814 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e814:	b580      	push	{r7, lr}
 800e816:	b084      	sub	sp, #16
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d106      	bne.n	800e830 <tcp_listen_closed+0x1c>
 800e822:	4b14      	ldr	r3, [pc, #80]	; (800e874 <tcp_listen_closed+0x60>)
 800e824:	f240 1211 	movw	r2, #273	; 0x111
 800e828:	4913      	ldr	r1, [pc, #76]	; (800e878 <tcp_listen_closed+0x64>)
 800e82a:	4814      	ldr	r0, [pc, #80]	; (800e87c <tcp_listen_closed+0x68>)
 800e82c:	f00a f950 	bl	8018ad0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	7d1b      	ldrb	r3, [r3, #20]
 800e834:	2b01      	cmp	r3, #1
 800e836:	d006      	beq.n	800e846 <tcp_listen_closed+0x32>
 800e838:	4b0e      	ldr	r3, [pc, #56]	; (800e874 <tcp_listen_closed+0x60>)
 800e83a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e83e:	4910      	ldr	r1, [pc, #64]	; (800e880 <tcp_listen_closed+0x6c>)
 800e840:	480e      	ldr	r0, [pc, #56]	; (800e87c <tcp_listen_closed+0x68>)
 800e842:	f00a f945 	bl	8018ad0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e846:	2301      	movs	r3, #1
 800e848:	60fb      	str	r3, [r7, #12]
 800e84a:	e00b      	b.n	800e864 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e84c:	4a0d      	ldr	r2, [pc, #52]	; (800e884 <tcp_listen_closed+0x70>)
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	6879      	ldr	r1, [r7, #4]
 800e858:	4618      	mov	r0, r3
 800e85a:	f7ff ffb1 	bl	800e7c0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	3301      	adds	r3, #1
 800e862:	60fb      	str	r3, [r7, #12]
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	2b03      	cmp	r3, #3
 800e868:	d9f0      	bls.n	800e84c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e86a:	bf00      	nop
 800e86c:	3710      	adds	r7, #16
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop
 800e874:	0801a3c8 	.word	0x0801a3c8
 800e878:	0801a478 	.word	0x0801a478
 800e87c:	0801a40c 	.word	0x0801a40c
 800e880:	0801a484 	.word	0x0801a484
 800e884:	0802b558 	.word	0x0802b558

0800e888 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e888:	b5b0      	push	{r4, r5, r7, lr}
 800e88a:	b088      	sub	sp, #32
 800e88c:	af04      	add	r7, sp, #16
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	460b      	mov	r3, r1
 800e892:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d106      	bne.n	800e8a8 <tcp_close_shutdown+0x20>
 800e89a:	4b61      	ldr	r3, [pc, #388]	; (800ea20 <tcp_close_shutdown+0x198>)
 800e89c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e8a0:	4960      	ldr	r1, [pc, #384]	; (800ea24 <tcp_close_shutdown+0x19c>)
 800e8a2:	4861      	ldr	r0, [pc, #388]	; (800ea28 <tcp_close_shutdown+0x1a0>)
 800e8a4:	f00a f914 	bl	8018ad0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e8a8:	78fb      	ldrb	r3, [r7, #3]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d066      	beq.n	800e97c <tcp_close_shutdown+0xf4>
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	7d1b      	ldrb	r3, [r3, #20]
 800e8b2:	2b04      	cmp	r3, #4
 800e8b4:	d003      	beq.n	800e8be <tcp_close_shutdown+0x36>
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	7d1b      	ldrb	r3, [r3, #20]
 800e8ba:	2b07      	cmp	r3, #7
 800e8bc:	d15e      	bne.n	800e97c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d104      	bne.n	800e8d0 <tcp_close_shutdown+0x48>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e8ca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e8ce:	d055      	beq.n	800e97c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	8b5b      	ldrh	r3, [r3, #26]
 800e8d4:	f003 0310 	and.w	r3, r3, #16
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d106      	bne.n	800e8ea <tcp_close_shutdown+0x62>
 800e8dc:	4b50      	ldr	r3, [pc, #320]	; (800ea20 <tcp_close_shutdown+0x198>)
 800e8de:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e8e2:	4952      	ldr	r1, [pc, #328]	; (800ea2c <tcp_close_shutdown+0x1a4>)
 800e8e4:	4850      	ldr	r0, [pc, #320]	; (800ea28 <tcp_close_shutdown+0x1a0>)
 800e8e6:	f00a f8f3 	bl	8018ad0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e8f2:	687d      	ldr	r5, [r7, #4]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	3304      	adds	r3, #4
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	8ad2      	ldrh	r2, [r2, #22]
 800e8fc:	6879      	ldr	r1, [r7, #4]
 800e8fe:	8b09      	ldrh	r1, [r1, #24]
 800e900:	9102      	str	r1, [sp, #8]
 800e902:	9201      	str	r2, [sp, #4]
 800e904:	9300      	str	r3, [sp, #0]
 800e906:	462b      	mov	r3, r5
 800e908:	4622      	mov	r2, r4
 800e90a:	4601      	mov	r1, r0
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	f004 fe8f 	bl	8013630 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f001 f8ba 	bl	800fa8c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e918:	4b45      	ldr	r3, [pc, #276]	; (800ea30 <tcp_close_shutdown+0x1a8>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	687a      	ldr	r2, [r7, #4]
 800e91e:	429a      	cmp	r2, r3
 800e920:	d105      	bne.n	800e92e <tcp_close_shutdown+0xa6>
 800e922:	4b43      	ldr	r3, [pc, #268]	; (800ea30 <tcp_close_shutdown+0x1a8>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	68db      	ldr	r3, [r3, #12]
 800e928:	4a41      	ldr	r2, [pc, #260]	; (800ea30 <tcp_close_shutdown+0x1a8>)
 800e92a:	6013      	str	r3, [r2, #0]
 800e92c:	e013      	b.n	800e956 <tcp_close_shutdown+0xce>
 800e92e:	4b40      	ldr	r3, [pc, #256]	; (800ea30 <tcp_close_shutdown+0x1a8>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	60fb      	str	r3, [r7, #12]
 800e934:	e00c      	b.n	800e950 <tcp_close_shutdown+0xc8>
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	68db      	ldr	r3, [r3, #12]
 800e93a:	687a      	ldr	r2, [r7, #4]
 800e93c:	429a      	cmp	r2, r3
 800e93e:	d104      	bne.n	800e94a <tcp_close_shutdown+0xc2>
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	68da      	ldr	r2, [r3, #12]
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	60da      	str	r2, [r3, #12]
 800e948:	e005      	b.n	800e956 <tcp_close_shutdown+0xce>
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	68db      	ldr	r3, [r3, #12]
 800e94e:	60fb      	str	r3, [r7, #12]
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d1ef      	bne.n	800e936 <tcp_close_shutdown+0xae>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2200      	movs	r2, #0
 800e95a:	60da      	str	r2, [r3, #12]
 800e95c:	4b35      	ldr	r3, [pc, #212]	; (800ea34 <tcp_close_shutdown+0x1ac>)
 800e95e:	2201      	movs	r2, #1
 800e960:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e962:	4b35      	ldr	r3, [pc, #212]	; (800ea38 <tcp_close_shutdown+0x1b0>)
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	687a      	ldr	r2, [r7, #4]
 800e968:	429a      	cmp	r2, r3
 800e96a:	d102      	bne.n	800e972 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e96c:	f003 fd4c 	bl	8012408 <tcp_trigger_input_pcb_close>
 800e970:	e002      	b.n	800e978 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e972:	6878      	ldr	r0, [r7, #4]
 800e974:	f7ff fed6 	bl	800e724 <tcp_free>
      }
      return ERR_OK;
 800e978:	2300      	movs	r3, #0
 800e97a:	e04d      	b.n	800ea18 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	7d1b      	ldrb	r3, [r3, #20]
 800e980:	2b01      	cmp	r3, #1
 800e982:	d02d      	beq.n	800e9e0 <tcp_close_shutdown+0x158>
 800e984:	2b02      	cmp	r3, #2
 800e986:	d036      	beq.n	800e9f6 <tcp_close_shutdown+0x16e>
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d13f      	bne.n	800ea0c <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	8adb      	ldrh	r3, [r3, #22]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d021      	beq.n	800e9d8 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e994:	4b29      	ldr	r3, [pc, #164]	; (800ea3c <tcp_close_shutdown+0x1b4>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	687a      	ldr	r2, [r7, #4]
 800e99a:	429a      	cmp	r2, r3
 800e99c:	d105      	bne.n	800e9aa <tcp_close_shutdown+0x122>
 800e99e:	4b27      	ldr	r3, [pc, #156]	; (800ea3c <tcp_close_shutdown+0x1b4>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	68db      	ldr	r3, [r3, #12]
 800e9a4:	4a25      	ldr	r2, [pc, #148]	; (800ea3c <tcp_close_shutdown+0x1b4>)
 800e9a6:	6013      	str	r3, [r2, #0]
 800e9a8:	e013      	b.n	800e9d2 <tcp_close_shutdown+0x14a>
 800e9aa:	4b24      	ldr	r3, [pc, #144]	; (800ea3c <tcp_close_shutdown+0x1b4>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	60bb      	str	r3, [r7, #8]
 800e9b0:	e00c      	b.n	800e9cc <tcp_close_shutdown+0x144>
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	68db      	ldr	r3, [r3, #12]
 800e9b6:	687a      	ldr	r2, [r7, #4]
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	d104      	bne.n	800e9c6 <tcp_close_shutdown+0x13e>
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	68da      	ldr	r2, [r3, #12]
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	60da      	str	r2, [r3, #12]
 800e9c4:	e005      	b.n	800e9d2 <tcp_close_shutdown+0x14a>
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	68db      	ldr	r3, [r3, #12]
 800e9ca:	60bb      	str	r3, [r7, #8]
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d1ef      	bne.n	800e9b2 <tcp_close_shutdown+0x12a>
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f7ff fea3 	bl	800e724 <tcp_free>
      break;
 800e9de:	e01a      	b.n	800ea16 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f7ff ff17 	bl	800e814 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e9e6:	6879      	ldr	r1, [r7, #4]
 800e9e8:	4815      	ldr	r0, [pc, #84]	; (800ea40 <tcp_close_shutdown+0x1b8>)
 800e9ea:	f001 f89f 	bl	800fb2c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f7ff feb4 	bl	800e75c <tcp_free_listen>
      break;
 800e9f4:	e00f      	b.n	800ea16 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e9f6:	6879      	ldr	r1, [r7, #4]
 800e9f8:	480d      	ldr	r0, [pc, #52]	; (800ea30 <tcp_close_shutdown+0x1a8>)
 800e9fa:	f001 f897 	bl	800fb2c <tcp_pcb_remove>
 800e9fe:	4b0d      	ldr	r3, [pc, #52]	; (800ea34 <tcp_close_shutdown+0x1ac>)
 800ea00:	2201      	movs	r2, #1
 800ea02:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	f7ff fe8d 	bl	800e724 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ea0a:	e004      	b.n	800ea16 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	f000 f819 	bl	800ea44 <tcp_close_shutdown_fin>
 800ea12:	4603      	mov	r3, r0
 800ea14:	e000      	b.n	800ea18 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800ea16:	2300      	movs	r3, #0
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3710      	adds	r7, #16
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bdb0      	pop	{r4, r5, r7, pc}
 800ea20:	0801a3c8 	.word	0x0801a3c8
 800ea24:	0801a49c 	.word	0x0801a49c
 800ea28:	0801a40c 	.word	0x0801a40c
 800ea2c:	0801a4bc 	.word	0x0801a4bc
 800ea30:	20007ecc 	.word	0x20007ecc
 800ea34:	20007ec8 	.word	0x20007ec8
 800ea38:	20007ee0 	.word	0x20007ee0
 800ea3c:	20007ed8 	.word	0x20007ed8
 800ea40:	20007ed4 	.word	0x20007ed4

0800ea44 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b084      	sub	sp, #16
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d106      	bne.n	800ea60 <tcp_close_shutdown_fin+0x1c>
 800ea52:	4b2c      	ldr	r3, [pc, #176]	; (800eb04 <tcp_close_shutdown_fin+0xc0>)
 800ea54:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800ea58:	492b      	ldr	r1, [pc, #172]	; (800eb08 <tcp_close_shutdown_fin+0xc4>)
 800ea5a:	482c      	ldr	r0, [pc, #176]	; (800eb0c <tcp_close_shutdown_fin+0xc8>)
 800ea5c:	f00a f838 	bl	8018ad0 <iprintf>

  switch (pcb->state) {
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	7d1b      	ldrb	r3, [r3, #20]
 800ea64:	2b04      	cmp	r3, #4
 800ea66:	d010      	beq.n	800ea8a <tcp_close_shutdown_fin+0x46>
 800ea68:	2b07      	cmp	r3, #7
 800ea6a:	d01b      	beq.n	800eaa4 <tcp_close_shutdown_fin+0x60>
 800ea6c:	2b03      	cmp	r3, #3
 800ea6e:	d126      	bne.n	800eabe <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f003 fedb 	bl	801282c <tcp_send_fin>
 800ea76:	4603      	mov	r3, r0
 800ea78:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ea7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d11f      	bne.n	800eac2 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2205      	movs	r2, #5
 800ea86:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ea88:	e01b      	b.n	800eac2 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f003 fece 	bl	801282c <tcp_send_fin>
 800ea90:	4603      	mov	r3, r0
 800ea92:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ea94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d114      	bne.n	800eac6 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2205      	movs	r2, #5
 800eaa0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eaa2:	e010      	b.n	800eac6 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800eaa4:	6878      	ldr	r0, [r7, #4]
 800eaa6:	f003 fec1 	bl	801282c <tcp_send_fin>
 800eaaa:	4603      	mov	r3, r0
 800eaac:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800eaae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d109      	bne.n	800eaca <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2209      	movs	r2, #9
 800eaba:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eabc:	e005      	b.n	800eaca <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800eabe:	2300      	movs	r3, #0
 800eac0:	e01c      	b.n	800eafc <tcp_close_shutdown_fin+0xb8>
      break;
 800eac2:	bf00      	nop
 800eac4:	e002      	b.n	800eacc <tcp_close_shutdown_fin+0x88>
      break;
 800eac6:	bf00      	nop
 800eac8:	e000      	b.n	800eacc <tcp_close_shutdown_fin+0x88>
      break;
 800eaca:	bf00      	nop
  }

  if (err == ERR_OK) {
 800eacc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d103      	bne.n	800eadc <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f003 ffe7 	bl	8012aa8 <tcp_output>
 800eada:	e00d      	b.n	800eaf8 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800eadc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eae4:	d108      	bne.n	800eaf8 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	8b5b      	ldrh	r3, [r3, #26]
 800eaea:	f043 0308 	orr.w	r3, r3, #8
 800eaee:	b29a      	uxth	r2, r3
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	e001      	b.n	800eafc <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800eaf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3710      	adds	r7, #16
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}
 800eb04:	0801a3c8 	.word	0x0801a3c8
 800eb08:	0801a478 	.word	0x0801a478
 800eb0c:	0801a40c 	.word	0x0801a40c

0800eb10 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b082      	sub	sp, #8
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d109      	bne.n	800eb32 <tcp_close+0x22>
 800eb1e:	4b0f      	ldr	r3, [pc, #60]	; (800eb5c <tcp_close+0x4c>)
 800eb20:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800eb24:	490e      	ldr	r1, [pc, #56]	; (800eb60 <tcp_close+0x50>)
 800eb26:	480f      	ldr	r0, [pc, #60]	; (800eb64 <tcp_close+0x54>)
 800eb28:	f009 ffd2 	bl	8018ad0 <iprintf>
 800eb2c:	f06f 030f 	mvn.w	r3, #15
 800eb30:	e00f      	b.n	800eb52 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	7d1b      	ldrb	r3, [r3, #20]
 800eb36:	2b01      	cmp	r3, #1
 800eb38:	d006      	beq.n	800eb48 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	8b5b      	ldrh	r3, [r3, #26]
 800eb3e:	f043 0310 	orr.w	r3, r3, #16
 800eb42:	b29a      	uxth	r2, r3
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800eb48:	2101      	movs	r1, #1
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f7ff fe9c 	bl	800e888 <tcp_close_shutdown>
 800eb50:	4603      	mov	r3, r0
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	3708      	adds	r7, #8
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}
 800eb5a:	bf00      	nop
 800eb5c:	0801a3c8 	.word	0x0801a3c8
 800eb60:	0801a4d8 	.word	0x0801a4d8
 800eb64:	0801a40c 	.word	0x0801a40c

0800eb68 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b08e      	sub	sp, #56	; 0x38
 800eb6c:	af04      	add	r7, sp, #16
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d107      	bne.n	800eb88 <tcp_abandon+0x20>
 800eb78:	4b52      	ldr	r3, [pc, #328]	; (800ecc4 <tcp_abandon+0x15c>)
 800eb7a:	f240 223d 	movw	r2, #573	; 0x23d
 800eb7e:	4952      	ldr	r1, [pc, #328]	; (800ecc8 <tcp_abandon+0x160>)
 800eb80:	4852      	ldr	r0, [pc, #328]	; (800eccc <tcp_abandon+0x164>)
 800eb82:	f009 ffa5 	bl	8018ad0 <iprintf>
 800eb86:	e099      	b.n	800ecbc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	7d1b      	ldrb	r3, [r3, #20]
 800eb8c:	2b01      	cmp	r3, #1
 800eb8e:	d106      	bne.n	800eb9e <tcp_abandon+0x36>
 800eb90:	4b4c      	ldr	r3, [pc, #304]	; (800ecc4 <tcp_abandon+0x15c>)
 800eb92:	f240 2241 	movw	r2, #577	; 0x241
 800eb96:	494e      	ldr	r1, [pc, #312]	; (800ecd0 <tcp_abandon+0x168>)
 800eb98:	484c      	ldr	r0, [pc, #304]	; (800eccc <tcp_abandon+0x164>)
 800eb9a:	f009 ff99 	bl	8018ad0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	7d1b      	ldrb	r3, [r3, #20]
 800eba2:	2b0a      	cmp	r3, #10
 800eba4:	d107      	bne.n	800ebb6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800eba6:	6879      	ldr	r1, [r7, #4]
 800eba8:	484a      	ldr	r0, [pc, #296]	; (800ecd4 <tcp_abandon+0x16c>)
 800ebaa:	f000 ffbf 	bl	800fb2c <tcp_pcb_remove>
    tcp_free(pcb);
 800ebae:	6878      	ldr	r0, [r7, #4]
 800ebb0:	f7ff fdb8 	bl	800e724 <tcp_free>
 800ebb4:	e082      	b.n	800ecbc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebc2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebc8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ebd0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	691b      	ldr	r3, [r3, #16]
 800ebd6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	7d1b      	ldrb	r3, [r3, #20]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d126      	bne.n	800ec2e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	8adb      	ldrh	r3, [r3, #22]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d02e      	beq.n	800ec46 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ebe8:	4b3b      	ldr	r3, [pc, #236]	; (800ecd8 <tcp_abandon+0x170>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	687a      	ldr	r2, [r7, #4]
 800ebee:	429a      	cmp	r2, r3
 800ebf0:	d105      	bne.n	800ebfe <tcp_abandon+0x96>
 800ebf2:	4b39      	ldr	r3, [pc, #228]	; (800ecd8 <tcp_abandon+0x170>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	68db      	ldr	r3, [r3, #12]
 800ebf8:	4a37      	ldr	r2, [pc, #220]	; (800ecd8 <tcp_abandon+0x170>)
 800ebfa:	6013      	str	r3, [r2, #0]
 800ebfc:	e013      	b.n	800ec26 <tcp_abandon+0xbe>
 800ebfe:	4b36      	ldr	r3, [pc, #216]	; (800ecd8 <tcp_abandon+0x170>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	61fb      	str	r3, [r7, #28]
 800ec04:	e00c      	b.n	800ec20 <tcp_abandon+0xb8>
 800ec06:	69fb      	ldr	r3, [r7, #28]
 800ec08:	68db      	ldr	r3, [r3, #12]
 800ec0a:	687a      	ldr	r2, [r7, #4]
 800ec0c:	429a      	cmp	r2, r3
 800ec0e:	d104      	bne.n	800ec1a <tcp_abandon+0xb2>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	68da      	ldr	r2, [r3, #12]
 800ec14:	69fb      	ldr	r3, [r7, #28]
 800ec16:	60da      	str	r2, [r3, #12]
 800ec18:	e005      	b.n	800ec26 <tcp_abandon+0xbe>
 800ec1a:	69fb      	ldr	r3, [r7, #28]
 800ec1c:	68db      	ldr	r3, [r3, #12]
 800ec1e:	61fb      	str	r3, [r7, #28]
 800ec20:	69fb      	ldr	r3, [r7, #28]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d1ef      	bne.n	800ec06 <tcp_abandon+0x9e>
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	2200      	movs	r2, #0
 800ec2a:	60da      	str	r2, [r3, #12]
 800ec2c:	e00b      	b.n	800ec46 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	8adb      	ldrh	r3, [r3, #22]
 800ec36:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ec38:	6879      	ldr	r1, [r7, #4]
 800ec3a:	4828      	ldr	r0, [pc, #160]	; (800ecdc <tcp_abandon+0x174>)
 800ec3c:	f000 ff76 	bl	800fb2c <tcp_pcb_remove>
 800ec40:	4b27      	ldr	r3, [pc, #156]	; (800ece0 <tcp_abandon+0x178>)
 800ec42:	2201      	movs	r2, #1
 800ec44:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d004      	beq.n	800ec58 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec52:	4618      	mov	r0, r3
 800ec54:	f000 fd1a 	bl	800f68c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d004      	beq.n	800ec6a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec64:	4618      	mov	r0, r3
 800ec66:	f000 fd11 	bl	800f68c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d004      	beq.n	800ec7c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec76:	4618      	mov	r0, r3
 800ec78:	f000 fd08 	bl	800f68c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ec7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d00e      	beq.n	800eca0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ec82:	6879      	ldr	r1, [r7, #4]
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	3304      	adds	r3, #4
 800ec88:	687a      	ldr	r2, [r7, #4]
 800ec8a:	8b12      	ldrh	r2, [r2, #24]
 800ec8c:	9202      	str	r2, [sp, #8]
 800ec8e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ec90:	9201      	str	r2, [sp, #4]
 800ec92:	9300      	str	r3, [sp, #0]
 800ec94:	460b      	mov	r3, r1
 800ec96:	697a      	ldr	r2, [r7, #20]
 800ec98:	69b9      	ldr	r1, [r7, #24]
 800ec9a:	6878      	ldr	r0, [r7, #4]
 800ec9c:	f004 fcc8 	bl	8013630 <tcp_rst>
    }
    last_state = pcb->state;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	7d1b      	ldrb	r3, [r3, #20]
 800eca4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	f7ff fd3c 	bl	800e724 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ecac:	693b      	ldr	r3, [r7, #16]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d004      	beq.n	800ecbc <tcp_abandon+0x154>
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	f06f 010c 	mvn.w	r1, #12
 800ecb8:	68f8      	ldr	r0, [r7, #12]
 800ecba:	4798      	blx	r3
  }
}
 800ecbc:	3728      	adds	r7, #40	; 0x28
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
 800ecc2:	bf00      	nop
 800ecc4:	0801a3c8 	.word	0x0801a3c8
 800ecc8:	0801a50c 	.word	0x0801a50c
 800eccc:	0801a40c 	.word	0x0801a40c
 800ecd0:	0801a528 	.word	0x0801a528
 800ecd4:	20007edc 	.word	0x20007edc
 800ecd8:	20007ed8 	.word	0x20007ed8
 800ecdc:	20007ecc 	.word	0x20007ecc
 800ece0:	20007ec8 	.word	0x20007ec8

0800ece4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b082      	sub	sp, #8
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ecec:	2101      	movs	r1, #1
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f7ff ff3a 	bl	800eb68 <tcp_abandon>
}
 800ecf4:	bf00      	nop
 800ecf6:	3708      	adds	r7, #8
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}

0800ecfc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b084      	sub	sp, #16
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d106      	bne.n	800ed18 <tcp_update_rcv_ann_wnd+0x1c>
 800ed0a:	4b25      	ldr	r3, [pc, #148]	; (800eda0 <tcp_update_rcv_ann_wnd+0xa4>)
 800ed0c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ed10:	4924      	ldr	r1, [pc, #144]	; (800eda4 <tcp_update_rcv_ann_wnd+0xa8>)
 800ed12:	4825      	ldr	r0, [pc, #148]	; (800eda8 <tcp_update_rcv_ann_wnd+0xac>)
 800ed14:	f009 fedc 	bl	8018ad0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed1c:	687a      	ldr	r2, [r7, #4]
 800ed1e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ed20:	4413      	add	r3, r2
 800ed22:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed28:	687a      	ldr	r2, [r7, #4]
 800ed2a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ed2c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800ed30:	bf28      	it	cs
 800ed32:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800ed36:	b292      	uxth	r2, r2
 800ed38:	4413      	add	r3, r2
 800ed3a:	68fa      	ldr	r2, [r7, #12]
 800ed3c:	1ad3      	subs	r3, r2, r3
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	db08      	blt.n	800ed54 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed4e:	68fa      	ldr	r2, [r7, #12]
 800ed50:	1ad3      	subs	r3, r2, r3
 800ed52:	e020      	b.n	800ed96 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed5c:	1ad3      	subs	r3, r2, r3
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	dd03      	ble.n	800ed6a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2200      	movs	r2, #0
 800ed66:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ed68:	e014      	b.n	800ed94 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed72:	1ad3      	subs	r3, r2, r3
 800ed74:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed7c:	d306      	bcc.n	800ed8c <tcp_update_rcv_ann_wnd+0x90>
 800ed7e:	4b08      	ldr	r3, [pc, #32]	; (800eda0 <tcp_update_rcv_ann_wnd+0xa4>)
 800ed80:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ed84:	4909      	ldr	r1, [pc, #36]	; (800edac <tcp_update_rcv_ann_wnd+0xb0>)
 800ed86:	4808      	ldr	r0, [pc, #32]	; (800eda8 <tcp_update_rcv_ann_wnd+0xac>)
 800ed88:	f009 fea2 	bl	8018ad0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	b29a      	uxth	r2, r3
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ed94:	2300      	movs	r3, #0
  }
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3710      	adds	r7, #16
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}
 800ed9e:	bf00      	nop
 800eda0:	0801a3c8 	.word	0x0801a3c8
 800eda4:	0801a624 	.word	0x0801a624
 800eda8:	0801a40c 	.word	0x0801a40c
 800edac:	0801a648 	.word	0x0801a648

0800edb0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b084      	sub	sp, #16
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
 800edb8:	460b      	mov	r3, r1
 800edba:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d107      	bne.n	800edd2 <tcp_recved+0x22>
 800edc2:	4b1f      	ldr	r3, [pc, #124]	; (800ee40 <tcp_recved+0x90>)
 800edc4:	f240 32cf 	movw	r2, #975	; 0x3cf
 800edc8:	491e      	ldr	r1, [pc, #120]	; (800ee44 <tcp_recved+0x94>)
 800edca:	481f      	ldr	r0, [pc, #124]	; (800ee48 <tcp_recved+0x98>)
 800edcc:	f009 fe80 	bl	8018ad0 <iprintf>
 800edd0:	e032      	b.n	800ee38 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	7d1b      	ldrb	r3, [r3, #20]
 800edd6:	2b01      	cmp	r3, #1
 800edd8:	d106      	bne.n	800ede8 <tcp_recved+0x38>
 800edda:	4b19      	ldr	r3, [pc, #100]	; (800ee40 <tcp_recved+0x90>)
 800eddc:	f240 32d3 	movw	r2, #979	; 0x3d3
 800ede0:	491a      	ldr	r1, [pc, #104]	; (800ee4c <tcp_recved+0x9c>)
 800ede2:	4819      	ldr	r0, [pc, #100]	; (800ee48 <tcp_recved+0x98>)
 800ede4:	f009 fe74 	bl	8018ad0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800edec:	887b      	ldrh	r3, [r7, #2]
 800edee:	4413      	add	r3, r2
 800edf0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800edf2:	89fb      	ldrh	r3, [r7, #14]
 800edf4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800edf8:	d804      	bhi.n	800ee04 <tcp_recved+0x54>
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800edfe:	89fa      	ldrh	r2, [r7, #14]
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d204      	bcs.n	800ee0e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ee0a:	851a      	strh	r2, [r3, #40]	; 0x28
 800ee0c:	e002      	b.n	800ee14 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	89fa      	ldrh	r2, [r7, #14]
 800ee12:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ee14:	6878      	ldr	r0, [r7, #4]
 800ee16:	f7ff ff71 	bl	800ecfc <tcp_update_rcv_ann_wnd>
 800ee1a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ee22:	d309      	bcc.n	800ee38 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	8b5b      	ldrh	r3, [r3, #26]
 800ee28:	f043 0302 	orr.w	r3, r3, #2
 800ee2c:	b29a      	uxth	r2, r3
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f003 fe38 	bl	8012aa8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ee38:	3710      	adds	r7, #16
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}
 800ee3e:	bf00      	nop
 800ee40:	0801a3c8 	.word	0x0801a3c8
 800ee44:	0801a664 	.word	0x0801a664
 800ee48:	0801a40c 	.word	0x0801a40c
 800ee4c:	0801a67c 	.word	0x0801a67c

0800ee50 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ee50:	b5b0      	push	{r4, r5, r7, lr}
 800ee52:	b090      	sub	sp, #64	; 0x40
 800ee54:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ee56:	2300      	movs	r3, #0
 800ee58:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ee5c:	4b94      	ldr	r3, [pc, #592]	; (800f0b0 <tcp_slowtmr+0x260>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	3301      	adds	r3, #1
 800ee62:	4a93      	ldr	r2, [pc, #588]	; (800f0b0 <tcp_slowtmr+0x260>)
 800ee64:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ee66:	4b93      	ldr	r3, [pc, #588]	; (800f0b4 <tcp_slowtmr+0x264>)
 800ee68:	781b      	ldrb	r3, [r3, #0]
 800ee6a:	3301      	adds	r3, #1
 800ee6c:	b2da      	uxtb	r2, r3
 800ee6e:	4b91      	ldr	r3, [pc, #580]	; (800f0b4 <tcp_slowtmr+0x264>)
 800ee70:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ee72:	2300      	movs	r3, #0
 800ee74:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ee76:	4b90      	ldr	r3, [pc, #576]	; (800f0b8 <tcp_slowtmr+0x268>)
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ee7c:	e29f      	b.n	800f3be <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ee7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee80:	7d1b      	ldrb	r3, [r3, #20]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d106      	bne.n	800ee94 <tcp_slowtmr+0x44>
 800ee86:	4b8d      	ldr	r3, [pc, #564]	; (800f0bc <tcp_slowtmr+0x26c>)
 800ee88:	f240 42be 	movw	r2, #1214	; 0x4be
 800ee8c:	498c      	ldr	r1, [pc, #560]	; (800f0c0 <tcp_slowtmr+0x270>)
 800ee8e:	488d      	ldr	r0, [pc, #564]	; (800f0c4 <tcp_slowtmr+0x274>)
 800ee90:	f009 fe1e 	bl	8018ad0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ee94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee96:	7d1b      	ldrb	r3, [r3, #20]
 800ee98:	2b01      	cmp	r3, #1
 800ee9a:	d106      	bne.n	800eeaa <tcp_slowtmr+0x5a>
 800ee9c:	4b87      	ldr	r3, [pc, #540]	; (800f0bc <tcp_slowtmr+0x26c>)
 800ee9e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800eea2:	4989      	ldr	r1, [pc, #548]	; (800f0c8 <tcp_slowtmr+0x278>)
 800eea4:	4887      	ldr	r0, [pc, #540]	; (800f0c4 <tcp_slowtmr+0x274>)
 800eea6:	f009 fe13 	bl	8018ad0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800eeaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeac:	7d1b      	ldrb	r3, [r3, #20]
 800eeae:	2b0a      	cmp	r3, #10
 800eeb0:	d106      	bne.n	800eec0 <tcp_slowtmr+0x70>
 800eeb2:	4b82      	ldr	r3, [pc, #520]	; (800f0bc <tcp_slowtmr+0x26c>)
 800eeb4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800eeb8:	4984      	ldr	r1, [pc, #528]	; (800f0cc <tcp_slowtmr+0x27c>)
 800eeba:	4882      	ldr	r0, [pc, #520]	; (800f0c4 <tcp_slowtmr+0x274>)
 800eebc:	f009 fe08 	bl	8018ad0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800eec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec2:	7f9a      	ldrb	r2, [r3, #30]
 800eec4:	4b7b      	ldr	r3, [pc, #492]	; (800f0b4 <tcp_slowtmr+0x264>)
 800eec6:	781b      	ldrb	r3, [r3, #0]
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d105      	bne.n	800eed8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800eecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eece:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800eed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed2:	68db      	ldr	r3, [r3, #12]
 800eed4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800eed6:	e272      	b.n	800f3be <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800eed8:	4b76      	ldr	r3, [pc, #472]	; (800f0b4 <tcp_slowtmr+0x264>)
 800eeda:	781a      	ldrb	r2, [r3, #0]
 800eedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eede:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800eee0:	2300      	movs	r3, #0
 800eee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800eee6:	2300      	movs	r3, #0
 800eee8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800eeec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeee:	7d1b      	ldrb	r3, [r3, #20]
 800eef0:	2b02      	cmp	r3, #2
 800eef2:	d10a      	bne.n	800ef0a <tcp_slowtmr+0xba>
 800eef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eefa:	2b05      	cmp	r3, #5
 800eefc:	d905      	bls.n	800ef0a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800eefe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef02:	3301      	adds	r3, #1
 800ef04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef08:	e11e      	b.n	800f148 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ef0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef10:	2b0b      	cmp	r3, #11
 800ef12:	d905      	bls.n	800ef20 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ef14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef18:	3301      	adds	r3, #1
 800ef1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef1e:	e113      	b.n	800f148 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ef20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef22:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d075      	beq.n	800f016 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ef2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d006      	beq.n	800ef40 <tcp_slowtmr+0xf0>
 800ef32:	4b62      	ldr	r3, [pc, #392]	; (800f0bc <tcp_slowtmr+0x26c>)
 800ef34:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ef38:	4965      	ldr	r1, [pc, #404]	; (800f0d0 <tcp_slowtmr+0x280>)
 800ef3a:	4862      	ldr	r0, [pc, #392]	; (800f0c4 <tcp_slowtmr+0x274>)
 800ef3c:	f009 fdc8 	bl	8018ad0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ef40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d106      	bne.n	800ef56 <tcp_slowtmr+0x106>
 800ef48:	4b5c      	ldr	r3, [pc, #368]	; (800f0bc <tcp_slowtmr+0x26c>)
 800ef4a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ef4e:	4961      	ldr	r1, [pc, #388]	; (800f0d4 <tcp_slowtmr+0x284>)
 800ef50:	485c      	ldr	r0, [pc, #368]	; (800f0c4 <tcp_slowtmr+0x274>)
 800ef52:	f009 fdbd 	bl	8018ad0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ef56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef58:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ef5c:	2b0b      	cmp	r3, #11
 800ef5e:	d905      	bls.n	800ef6c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800ef60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef64:	3301      	adds	r3, #1
 800ef66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef6a:	e0ed      	b.n	800f148 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ef6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef6e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ef72:	3b01      	subs	r3, #1
 800ef74:	4a58      	ldr	r2, [pc, #352]	; (800f0d8 <tcp_slowtmr+0x288>)
 800ef76:	5cd3      	ldrb	r3, [r2, r3]
 800ef78:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ef7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef7c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ef80:	7c7a      	ldrb	r2, [r7, #17]
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d907      	bls.n	800ef96 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ef86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef88:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ef8c:	3301      	adds	r3, #1
 800ef8e:	b2da      	uxtb	r2, r3
 800ef90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef92:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800ef96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef98:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ef9c:	7c7a      	ldrb	r2, [r7, #17]
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	f200 80d2 	bhi.w	800f148 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800efa4:	2301      	movs	r3, #1
 800efa6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800efa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d108      	bne.n	800efc4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800efb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efb4:	f004 fc30 	bl	8013818 <tcp_zero_window_probe>
 800efb8:	4603      	mov	r3, r0
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d014      	beq.n	800efe8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800efbe:	2300      	movs	r3, #0
 800efc0:	623b      	str	r3, [r7, #32]
 800efc2:	e011      	b.n	800efe8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800efc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800efca:	4619      	mov	r1, r3
 800efcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efce:	f003 fae5 	bl	801259c <tcp_split_unsent_seg>
 800efd2:	4603      	mov	r3, r0
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d107      	bne.n	800efe8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800efd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efda:	f003 fd65 	bl	8012aa8 <tcp_output>
 800efde:	4603      	mov	r3, r0
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d101      	bne.n	800efe8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800efe4:	2300      	movs	r3, #0
 800efe6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800efe8:	6a3b      	ldr	r3, [r7, #32]
 800efea:	2b00      	cmp	r3, #0
 800efec:	f000 80ac 	beq.w	800f148 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800eff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eff2:	2200      	movs	r2, #0
 800eff4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800eff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800effe:	2b06      	cmp	r3, #6
 800f000:	f200 80a2 	bhi.w	800f148 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f006:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f00a:	3301      	adds	r3, #1
 800f00c:	b2da      	uxtb	r2, r3
 800f00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f010:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f014:	e098      	b.n	800f148 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f018:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	db0f      	blt.n	800f040 <tcp_slowtmr+0x1f0>
 800f020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f022:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f026:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d008      	beq.n	800f040 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f030:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f034:	b29b      	uxth	r3, r3
 800f036:	3301      	adds	r3, #1
 800f038:	b29b      	uxth	r3, r3
 800f03a:	b21a      	sxth	r2, r3
 800f03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f03e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f042:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f048:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f04c:	429a      	cmp	r2, r3
 800f04e:	db7b      	blt.n	800f148 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f050:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f052:	f004 f821 	bl	8013098 <tcp_rexmit_rto_prepare>
 800f056:	4603      	mov	r3, r0
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d007      	beq.n	800f06c <tcp_slowtmr+0x21c>
 800f05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f060:	2b00      	cmp	r3, #0
 800f062:	d171      	bne.n	800f148 <tcp_slowtmr+0x2f8>
 800f064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d06d      	beq.n	800f148 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f06e:	7d1b      	ldrb	r3, [r3, #20]
 800f070:	2b02      	cmp	r3, #2
 800f072:	d03a      	beq.n	800f0ea <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f076:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f07a:	2b0c      	cmp	r3, #12
 800f07c:	bf28      	it	cs
 800f07e:	230c      	movcs	r3, #12
 800f080:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f084:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f088:	10db      	asrs	r3, r3, #3
 800f08a:	b21b      	sxth	r3, r3
 800f08c:	461a      	mov	r2, r3
 800f08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f090:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f094:	4413      	add	r3, r2
 800f096:	7efa      	ldrb	r2, [r7, #27]
 800f098:	4910      	ldr	r1, [pc, #64]	; (800f0dc <tcp_slowtmr+0x28c>)
 800f09a:	5c8a      	ldrb	r2, [r1, r2]
 800f09c:	4093      	lsls	r3, r2
 800f09e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	dc1a      	bgt.n	800f0e0 <tcp_slowtmr+0x290>
 800f0aa:	697b      	ldr	r3, [r7, #20]
 800f0ac:	b21a      	sxth	r2, r3
 800f0ae:	e019      	b.n	800f0e4 <tcp_slowtmr+0x294>
 800f0b0:	20007ed0 	.word	0x20007ed0
 800f0b4:	2000047a 	.word	0x2000047a
 800f0b8:	20007ecc 	.word	0x20007ecc
 800f0bc:	0801a3c8 	.word	0x0801a3c8
 800f0c0:	0801a70c 	.word	0x0801a70c
 800f0c4:	0801a40c 	.word	0x0801a40c
 800f0c8:	0801a738 	.word	0x0801a738
 800f0cc:	0801a764 	.word	0x0801a764
 800f0d0:	0801a794 	.word	0x0801a794
 800f0d4:	0801a7c8 	.word	0x0801a7c8
 800f0d8:	0802b550 	.word	0x0802b550
 800f0dc:	0802b540 	.word	0x0802b540
 800f0e0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f0fc:	4293      	cmp	r3, r2
 800f0fe:	bf28      	it	cs
 800f100:	4613      	movcs	r3, r2
 800f102:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f104:	8a7b      	ldrh	r3, [r7, #18]
 800f106:	085b      	lsrs	r3, r3, #1
 800f108:	b29a      	uxth	r2, r3
 800f10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f10c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f112:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f118:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f11a:	005b      	lsls	r3, r3, #1
 800f11c:	b29b      	uxth	r3, r3
 800f11e:	429a      	cmp	r2, r3
 800f120:	d206      	bcs.n	800f130 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f124:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f126:	005b      	lsls	r3, r3, #1
 800f128:	b29a      	uxth	r2, r3
 800f12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f132:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f136:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f13c:	2200      	movs	r2, #0
 800f13e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f142:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f144:	f004 f818 	bl	8013178 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f14a:	7d1b      	ldrb	r3, [r3, #20]
 800f14c:	2b06      	cmp	r3, #6
 800f14e:	d111      	bne.n	800f174 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f152:	8b5b      	ldrh	r3, [r3, #26]
 800f154:	f003 0310 	and.w	r3, r3, #16
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d00b      	beq.n	800f174 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f15c:	4b9d      	ldr	r3, [pc, #628]	; (800f3d4 <tcp_slowtmr+0x584>)
 800f15e:	681a      	ldr	r2, [r3, #0]
 800f160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f162:	6a1b      	ldr	r3, [r3, #32]
 800f164:	1ad3      	subs	r3, r2, r3
 800f166:	2b28      	cmp	r3, #40	; 0x28
 800f168:	d904      	bls.n	800f174 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f16a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f16e:	3301      	adds	r3, #1
 800f170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f176:	7a5b      	ldrb	r3, [r3, #9]
 800f178:	f003 0308 	and.w	r3, r3, #8
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d04c      	beq.n	800f21a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800f180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f182:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f184:	2b04      	cmp	r3, #4
 800f186:	d003      	beq.n	800f190 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f18a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f18c:	2b07      	cmp	r3, #7
 800f18e:	d144      	bne.n	800f21a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f190:	4b90      	ldr	r3, [pc, #576]	; (800f3d4 <tcp_slowtmr+0x584>)
 800f192:	681a      	ldr	r2, [r3, #0]
 800f194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f196:	6a1b      	ldr	r3, [r3, #32]
 800f198:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f19c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f1a0:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800f1a4:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800f1a8:	498b      	ldr	r1, [pc, #556]	; (800f3d8 <tcp_slowtmr+0x588>)
 800f1aa:	fba1 1303 	umull	r1, r3, r1, r3
 800f1ae:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	d90a      	bls.n	800f1ca <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f1b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1b8:	3301      	adds	r3, #1
 800f1ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f1be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f1c2:	3301      	adds	r3, #1
 800f1c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f1c8:	e027      	b.n	800f21a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f1ca:	4b82      	ldr	r3, [pc, #520]	; (800f3d4 <tcp_slowtmr+0x584>)
 800f1cc:	681a      	ldr	r2, [r3, #0]
 800f1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d0:	6a1b      	ldr	r3, [r3, #32]
 800f1d2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1d6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1dc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	4b7e      	ldr	r3, [pc, #504]	; (800f3dc <tcp_slowtmr+0x58c>)
 800f1e4:	fb03 f300 	mul.w	r3, r3, r0
 800f1e8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f1ea:	497b      	ldr	r1, [pc, #492]	; (800f3d8 <tcp_slowtmr+0x588>)
 800f1ec:	fba1 1303 	umull	r1, r3, r1, r3
 800f1f0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d911      	bls.n	800f21a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800f1f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1f8:	f004 face 	bl	8013798 <tcp_keepalive>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f202:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f206:	2b00      	cmp	r3, #0
 800f208:	d107      	bne.n	800f21a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800f20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f20c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f210:	3301      	adds	r3, #1
 800f212:	b2da      	uxtb	r2, r3
 800f214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f216:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f21c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d011      	beq.n	800f246 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f222:	4b6c      	ldr	r3, [pc, #432]	; (800f3d4 <tcp_slowtmr+0x584>)
 800f224:	681a      	ldr	r2, [r3, #0]
 800f226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f228:	6a1b      	ldr	r3, [r3, #32]
 800f22a:	1ad2      	subs	r2, r2, r3
 800f22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f22e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f232:	4619      	mov	r1, r3
 800f234:	460b      	mov	r3, r1
 800f236:	005b      	lsls	r3, r3, #1
 800f238:	440b      	add	r3, r1
 800f23a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f23c:	429a      	cmp	r2, r3
 800f23e:	d302      	bcc.n	800f246 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f240:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f242:	f000 fdd7 	bl	800fdf4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f248:	7d1b      	ldrb	r3, [r3, #20]
 800f24a:	2b03      	cmp	r3, #3
 800f24c:	d10b      	bne.n	800f266 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f24e:	4b61      	ldr	r3, [pc, #388]	; (800f3d4 <tcp_slowtmr+0x584>)
 800f250:	681a      	ldr	r2, [r3, #0]
 800f252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f254:	6a1b      	ldr	r3, [r3, #32]
 800f256:	1ad3      	subs	r3, r2, r3
 800f258:	2b28      	cmp	r3, #40	; 0x28
 800f25a:	d904      	bls.n	800f266 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f25c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f260:	3301      	adds	r3, #1
 800f262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f268:	7d1b      	ldrb	r3, [r3, #20]
 800f26a:	2b09      	cmp	r3, #9
 800f26c:	d10b      	bne.n	800f286 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f26e:	4b59      	ldr	r3, [pc, #356]	; (800f3d4 <tcp_slowtmr+0x584>)
 800f270:	681a      	ldr	r2, [r3, #0]
 800f272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f274:	6a1b      	ldr	r3, [r3, #32]
 800f276:	1ad3      	subs	r3, r2, r3
 800f278:	2bf0      	cmp	r3, #240	; 0xf0
 800f27a:	d904      	bls.n	800f286 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800f27c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f280:	3301      	adds	r3, #1
 800f282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f286:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d060      	beq.n	800f350 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f294:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f296:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f298:	f000 fbf8 	bl	800fa8c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d010      	beq.n	800f2c4 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f2a2:	4b4f      	ldr	r3, [pc, #316]	; (800f3e0 <tcp_slowtmr+0x590>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2a8:	429a      	cmp	r2, r3
 800f2aa:	d106      	bne.n	800f2ba <tcp_slowtmr+0x46a>
 800f2ac:	4b4d      	ldr	r3, [pc, #308]	; (800f3e4 <tcp_slowtmr+0x594>)
 800f2ae:	f240 526d 	movw	r2, #1389	; 0x56d
 800f2b2:	494d      	ldr	r1, [pc, #308]	; (800f3e8 <tcp_slowtmr+0x598>)
 800f2b4:	484d      	ldr	r0, [pc, #308]	; (800f3ec <tcp_slowtmr+0x59c>)
 800f2b6:	f009 fc0b 	bl	8018ad0 <iprintf>
        prev->next = pcb->next;
 800f2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2bc:	68da      	ldr	r2, [r3, #12]
 800f2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2c0:	60da      	str	r2, [r3, #12]
 800f2c2:	e00f      	b.n	800f2e4 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f2c4:	4b46      	ldr	r3, [pc, #280]	; (800f3e0 <tcp_slowtmr+0x590>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d006      	beq.n	800f2dc <tcp_slowtmr+0x48c>
 800f2ce:	4b45      	ldr	r3, [pc, #276]	; (800f3e4 <tcp_slowtmr+0x594>)
 800f2d0:	f240 5271 	movw	r2, #1393	; 0x571
 800f2d4:	4946      	ldr	r1, [pc, #280]	; (800f3f0 <tcp_slowtmr+0x5a0>)
 800f2d6:	4845      	ldr	r0, [pc, #276]	; (800f3ec <tcp_slowtmr+0x59c>)
 800f2d8:	f009 fbfa 	bl	8018ad0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2de:	68db      	ldr	r3, [r3, #12]
 800f2e0:	4a3f      	ldr	r2, [pc, #252]	; (800f3e0 <tcp_slowtmr+0x590>)
 800f2e2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f2e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d013      	beq.n	800f314 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ee:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f2f4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f8:	3304      	adds	r3, #4
 800f2fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2fc:	8ad2      	ldrh	r2, [r2, #22]
 800f2fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f300:	8b09      	ldrh	r1, [r1, #24]
 800f302:	9102      	str	r1, [sp, #8]
 800f304:	9201      	str	r2, [sp, #4]
 800f306:	9300      	str	r3, [sp, #0]
 800f308:	462b      	mov	r3, r5
 800f30a:	4622      	mov	r2, r4
 800f30c:	4601      	mov	r1, r0
 800f30e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f310:	f004 f98e 	bl	8013630 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f316:	691b      	ldr	r3, [r3, #16]
 800f318:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f31c:	7d1b      	ldrb	r3, [r3, #20]
 800f31e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f322:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f326:	68db      	ldr	r3, [r3, #12]
 800f328:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f32a:	6838      	ldr	r0, [r7, #0]
 800f32c:	f7ff f9fa 	bl	800e724 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f330:	4b30      	ldr	r3, [pc, #192]	; (800f3f4 <tcp_slowtmr+0x5a4>)
 800f332:	2200      	movs	r2, #0
 800f334:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d004      	beq.n	800f346 <tcp_slowtmr+0x4f6>
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	f06f 010c 	mvn.w	r1, #12
 800f342:	68b8      	ldr	r0, [r7, #8]
 800f344:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f346:	4b2b      	ldr	r3, [pc, #172]	; (800f3f4 <tcp_slowtmr+0x5a4>)
 800f348:	781b      	ldrb	r3, [r3, #0]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d037      	beq.n	800f3be <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800f34e:	e590      	b.n	800ee72 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f352:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f356:	68db      	ldr	r3, [r3, #12]
 800f358:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35c:	7f1b      	ldrb	r3, [r3, #28]
 800f35e:	3301      	adds	r3, #1
 800f360:	b2da      	uxtb	r2, r3
 800f362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f364:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f368:	7f1a      	ldrb	r2, [r3, #28]
 800f36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f36c:	7f5b      	ldrb	r3, [r3, #29]
 800f36e:	429a      	cmp	r2, r3
 800f370:	d325      	bcc.n	800f3be <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800f372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f374:	2200      	movs	r2, #0
 800f376:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f378:	4b1e      	ldr	r3, [pc, #120]	; (800f3f4 <tcp_slowtmr+0x5a4>)
 800f37a:	2200      	movs	r2, #0
 800f37c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f384:	2b00      	cmp	r3, #0
 800f386:	d00b      	beq.n	800f3a0 <tcp_slowtmr+0x550>
 800f388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f38a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f38e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f390:	6912      	ldr	r2, [r2, #16]
 800f392:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f394:	4610      	mov	r0, r2
 800f396:	4798      	blx	r3
 800f398:	4603      	mov	r3, r0
 800f39a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f39e:	e002      	b.n	800f3a6 <tcp_slowtmr+0x556>
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f3a6:	4b13      	ldr	r3, [pc, #76]	; (800f3f4 <tcp_slowtmr+0x5a4>)
 800f3a8:	781b      	ldrb	r3, [r3, #0]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d000      	beq.n	800f3b0 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800f3ae:	e560      	b.n	800ee72 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f3b0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d102      	bne.n	800f3be <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800f3b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3ba:	f003 fb75 	bl	8012aa8 <tcp_output>
  while (pcb != NULL) {
 800f3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	f47f ad5c 	bne.w	800ee7e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f3ca:	4b0b      	ldr	r3, [pc, #44]	; (800f3f8 <tcp_slowtmr+0x5a8>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f3d0:	e067      	b.n	800f4a2 <tcp_slowtmr+0x652>
 800f3d2:	bf00      	nop
 800f3d4:	20007ed0 	.word	0x20007ed0
 800f3d8:	10624dd3 	.word	0x10624dd3
 800f3dc:	000124f8 	.word	0x000124f8
 800f3e0:	20007ecc 	.word	0x20007ecc
 800f3e4:	0801a3c8 	.word	0x0801a3c8
 800f3e8:	0801a800 	.word	0x0801a800
 800f3ec:	0801a40c 	.word	0x0801a40c
 800f3f0:	0801a82c 	.word	0x0801a82c
 800f3f4:	20007ec8 	.word	0x20007ec8
 800f3f8:	20007edc 	.word	0x20007edc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f3fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3fe:	7d1b      	ldrb	r3, [r3, #20]
 800f400:	2b0a      	cmp	r3, #10
 800f402:	d006      	beq.n	800f412 <tcp_slowtmr+0x5c2>
 800f404:	4b2a      	ldr	r3, [pc, #168]	; (800f4b0 <tcp_slowtmr+0x660>)
 800f406:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f40a:	492a      	ldr	r1, [pc, #168]	; (800f4b4 <tcp_slowtmr+0x664>)
 800f40c:	482a      	ldr	r0, [pc, #168]	; (800f4b8 <tcp_slowtmr+0x668>)
 800f40e:	f009 fb5f 	bl	8018ad0 <iprintf>
    pcb_remove = 0;
 800f412:	2300      	movs	r3, #0
 800f414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f418:	4b28      	ldr	r3, [pc, #160]	; (800f4bc <tcp_slowtmr+0x66c>)
 800f41a:	681a      	ldr	r2, [r3, #0]
 800f41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f41e:	6a1b      	ldr	r3, [r3, #32]
 800f420:	1ad3      	subs	r3, r2, r3
 800f422:	2bf0      	cmp	r3, #240	; 0xf0
 800f424:	d904      	bls.n	800f430 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f426:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f42a:	3301      	adds	r3, #1
 800f42c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f434:	2b00      	cmp	r3, #0
 800f436:	d02f      	beq.n	800f498 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f438:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f43a:	f000 fb27 	bl	800fa8c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f440:	2b00      	cmp	r3, #0
 800f442:	d010      	beq.n	800f466 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f444:	4b1e      	ldr	r3, [pc, #120]	; (800f4c0 <tcp_slowtmr+0x670>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d106      	bne.n	800f45c <tcp_slowtmr+0x60c>
 800f44e:	4b18      	ldr	r3, [pc, #96]	; (800f4b0 <tcp_slowtmr+0x660>)
 800f450:	f240 52af 	movw	r2, #1455	; 0x5af
 800f454:	491b      	ldr	r1, [pc, #108]	; (800f4c4 <tcp_slowtmr+0x674>)
 800f456:	4818      	ldr	r0, [pc, #96]	; (800f4b8 <tcp_slowtmr+0x668>)
 800f458:	f009 fb3a 	bl	8018ad0 <iprintf>
        prev->next = pcb->next;
 800f45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f45e:	68da      	ldr	r2, [r3, #12]
 800f460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f462:	60da      	str	r2, [r3, #12]
 800f464:	e00f      	b.n	800f486 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f466:	4b16      	ldr	r3, [pc, #88]	; (800f4c0 <tcp_slowtmr+0x670>)
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f46c:	429a      	cmp	r2, r3
 800f46e:	d006      	beq.n	800f47e <tcp_slowtmr+0x62e>
 800f470:	4b0f      	ldr	r3, [pc, #60]	; (800f4b0 <tcp_slowtmr+0x660>)
 800f472:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f476:	4914      	ldr	r1, [pc, #80]	; (800f4c8 <tcp_slowtmr+0x678>)
 800f478:	480f      	ldr	r0, [pc, #60]	; (800f4b8 <tcp_slowtmr+0x668>)
 800f47a:	f009 fb29 	bl	8018ad0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f480:	68db      	ldr	r3, [r3, #12]
 800f482:	4a0f      	ldr	r2, [pc, #60]	; (800f4c0 <tcp_slowtmr+0x670>)
 800f484:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f488:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f48c:	68db      	ldr	r3, [r3, #12]
 800f48e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f490:	69f8      	ldr	r0, [r7, #28]
 800f492:	f7ff f947 	bl	800e724 <tcp_free>
 800f496:	e004      	b.n	800f4a2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f49a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f49e:	68db      	ldr	r3, [r3, #12]
 800f4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d1a9      	bne.n	800f3fc <tcp_slowtmr+0x5ac>
    }
  }
}
 800f4a8:	bf00      	nop
 800f4aa:	3730      	adds	r7, #48	; 0x30
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bdb0      	pop	{r4, r5, r7, pc}
 800f4b0:	0801a3c8 	.word	0x0801a3c8
 800f4b4:	0801a858 	.word	0x0801a858
 800f4b8:	0801a40c 	.word	0x0801a40c
 800f4bc:	20007ed0 	.word	0x20007ed0
 800f4c0:	20007edc 	.word	0x20007edc
 800f4c4:	0801a888 	.word	0x0801a888
 800f4c8:	0801a8b0 	.word	0x0801a8b0

0800f4cc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b082      	sub	sp, #8
 800f4d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f4d2:	4b2d      	ldr	r3, [pc, #180]	; (800f588 <tcp_fasttmr+0xbc>)
 800f4d4:	781b      	ldrb	r3, [r3, #0]
 800f4d6:	3301      	adds	r3, #1
 800f4d8:	b2da      	uxtb	r2, r3
 800f4da:	4b2b      	ldr	r3, [pc, #172]	; (800f588 <tcp_fasttmr+0xbc>)
 800f4dc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f4de:	4b2b      	ldr	r3, [pc, #172]	; (800f58c <tcp_fasttmr+0xc0>)
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f4e4:	e048      	b.n	800f578 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	7f9a      	ldrb	r2, [r3, #30]
 800f4ea:	4b27      	ldr	r3, [pc, #156]	; (800f588 <tcp_fasttmr+0xbc>)
 800f4ec:	781b      	ldrb	r3, [r3, #0]
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d03f      	beq.n	800f572 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f4f2:	4b25      	ldr	r3, [pc, #148]	; (800f588 <tcp_fasttmr+0xbc>)
 800f4f4:	781a      	ldrb	r2, [r3, #0]
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	8b5b      	ldrh	r3, [r3, #26]
 800f4fe:	f003 0301 	and.w	r3, r3, #1
 800f502:	2b00      	cmp	r3, #0
 800f504:	d010      	beq.n	800f528 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	8b5b      	ldrh	r3, [r3, #26]
 800f50a:	f043 0302 	orr.w	r3, r3, #2
 800f50e:	b29a      	uxth	r2, r3
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f514:	6878      	ldr	r0, [r7, #4]
 800f516:	f003 fac7 	bl	8012aa8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	8b5b      	ldrh	r3, [r3, #26]
 800f51e:	f023 0303 	bic.w	r3, r3, #3
 800f522:	b29a      	uxth	r2, r3
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	8b5b      	ldrh	r3, [r3, #26]
 800f52c:	f003 0308 	and.w	r3, r3, #8
 800f530:	2b00      	cmp	r3, #0
 800f532:	d009      	beq.n	800f548 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	8b5b      	ldrh	r3, [r3, #26]
 800f538:	f023 0308 	bic.w	r3, r3, #8
 800f53c:	b29a      	uxth	r2, r3
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	f7ff fa7e 	bl	800ea44 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	68db      	ldr	r3, [r3, #12]
 800f54c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f552:	2b00      	cmp	r3, #0
 800f554:	d00a      	beq.n	800f56c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f556:	4b0e      	ldr	r3, [pc, #56]	; (800f590 <tcp_fasttmr+0xc4>)
 800f558:	2200      	movs	r2, #0
 800f55a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f000 f819 	bl	800f594 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f562:	4b0b      	ldr	r3, [pc, #44]	; (800f590 <tcp_fasttmr+0xc4>)
 800f564:	781b      	ldrb	r3, [r3, #0]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d000      	beq.n	800f56c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f56a:	e7b8      	b.n	800f4de <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	607b      	str	r3, [r7, #4]
 800f570:	e002      	b.n	800f578 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	68db      	ldr	r3, [r3, #12]
 800f576:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d1b3      	bne.n	800f4e6 <tcp_fasttmr+0x1a>
    }
  }
}
 800f57e:	bf00      	nop
 800f580:	3708      	adds	r7, #8
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}
 800f586:	bf00      	nop
 800f588:	2000047a 	.word	0x2000047a
 800f58c:	20007ecc 	.word	0x20007ecc
 800f590:	20007ec8 	.word	0x20007ec8

0800f594 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f594:	b590      	push	{r4, r7, lr}
 800f596:	b085      	sub	sp, #20
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d109      	bne.n	800f5b6 <tcp_process_refused_data+0x22>
 800f5a2:	4b37      	ldr	r3, [pc, #220]	; (800f680 <tcp_process_refused_data+0xec>)
 800f5a4:	f240 6209 	movw	r2, #1545	; 0x609
 800f5a8:	4936      	ldr	r1, [pc, #216]	; (800f684 <tcp_process_refused_data+0xf0>)
 800f5aa:	4837      	ldr	r0, [pc, #220]	; (800f688 <tcp_process_refused_data+0xf4>)
 800f5ac:	f009 fa90 	bl	8018ad0 <iprintf>
 800f5b0:	f06f 030f 	mvn.w	r3, #15
 800f5b4:	e060      	b.n	800f678 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f5ba:	7b5b      	ldrb	r3, [r3, #13]
 800f5bc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f5c2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d00b      	beq.n	800f5ec <tcp_process_refused_data+0x58>
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6918      	ldr	r0, [r3, #16]
 800f5de:	2300      	movs	r3, #0
 800f5e0:	68ba      	ldr	r2, [r7, #8]
 800f5e2:	6879      	ldr	r1, [r7, #4]
 800f5e4:	47a0      	blx	r4
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	73fb      	strb	r3, [r7, #15]
 800f5ea:	e007      	b.n	800f5fc <tcp_process_refused_data+0x68>
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	68ba      	ldr	r2, [r7, #8]
 800f5f0:	6879      	ldr	r1, [r7, #4]
 800f5f2:	2000      	movs	r0, #0
 800f5f4:	f000 f8a2 	bl	800f73c <tcp_recv_null>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f5fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d12a      	bne.n	800f65a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f604:	7bbb      	ldrb	r3, [r7, #14]
 800f606:	f003 0320 	and.w	r3, r3, #32
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d033      	beq.n	800f676 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f612:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f616:	d005      	beq.n	800f624 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f61c:	3301      	adds	r3, #1
 800f61e:	b29a      	uxth	r2, r3
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d00b      	beq.n	800f646 <tcp_process_refused_data+0xb2>
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6918      	ldr	r0, [r3, #16]
 800f638:	2300      	movs	r3, #0
 800f63a:	2200      	movs	r2, #0
 800f63c:	6879      	ldr	r1, [r7, #4]
 800f63e:	47a0      	blx	r4
 800f640:	4603      	mov	r3, r0
 800f642:	73fb      	strb	r3, [r7, #15]
 800f644:	e001      	b.n	800f64a <tcp_process_refused_data+0xb6>
 800f646:	2300      	movs	r3, #0
 800f648:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f64a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f64e:	f113 0f0d 	cmn.w	r3, #13
 800f652:	d110      	bne.n	800f676 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f654:	f06f 030c 	mvn.w	r3, #12
 800f658:	e00e      	b.n	800f678 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f65a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f65e:	f113 0f0d 	cmn.w	r3, #13
 800f662:	d102      	bne.n	800f66a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f664:	f06f 030c 	mvn.w	r3, #12
 800f668:	e006      	b.n	800f678 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	68ba      	ldr	r2, [r7, #8]
 800f66e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f670:	f06f 0304 	mvn.w	r3, #4
 800f674:	e000      	b.n	800f678 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f676:	2300      	movs	r3, #0
}
 800f678:	4618      	mov	r0, r3
 800f67a:	3714      	adds	r7, #20
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd90      	pop	{r4, r7, pc}
 800f680:	0801a3c8 	.word	0x0801a3c8
 800f684:	0801a8d8 	.word	0x0801a8d8
 800f688:	0801a40c 	.word	0x0801a40c

0800f68c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b084      	sub	sp, #16
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f694:	e007      	b.n	800f6a6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f69c:	6878      	ldr	r0, [r7, #4]
 800f69e:	f000 f809 	bl	800f6b4 <tcp_seg_free>
    seg = next;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d1f4      	bne.n	800f696 <tcp_segs_free+0xa>
  }
}
 800f6ac:	bf00      	nop
 800f6ae:	3710      	adds	r7, #16
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}

0800f6b4 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b082      	sub	sp, #8
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d00c      	beq.n	800f6dc <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	685b      	ldr	r3, [r3, #4]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d004      	beq.n	800f6d4 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	685b      	ldr	r3, [r3, #4]
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f7fe fd78 	bl	800e1c4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f6d4:	6879      	ldr	r1, [r7, #4]
 800f6d6:	2003      	movs	r0, #3
 800f6d8:	f7fd ff74 	bl	800d5c4 <memp_free>
  }
}
 800f6dc:	bf00      	nop
 800f6de:	3708      	adds	r7, #8
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}

0800f6e4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b084      	sub	sp, #16
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d106      	bne.n	800f700 <tcp_seg_copy+0x1c>
 800f6f2:	4b0f      	ldr	r3, [pc, #60]	; (800f730 <tcp_seg_copy+0x4c>)
 800f6f4:	f240 6282 	movw	r2, #1666	; 0x682
 800f6f8:	490e      	ldr	r1, [pc, #56]	; (800f734 <tcp_seg_copy+0x50>)
 800f6fa:	480f      	ldr	r0, [pc, #60]	; (800f738 <tcp_seg_copy+0x54>)
 800f6fc:	f009 f9e8 	bl	8018ad0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f700:	2003      	movs	r0, #3
 800f702:	f7fd ff13 	bl	800d52c <memp_malloc>
 800f706:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d101      	bne.n	800f712 <tcp_seg_copy+0x2e>
    return NULL;
 800f70e:	2300      	movs	r3, #0
 800f710:	e00a      	b.n	800f728 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f712:	2210      	movs	r2, #16
 800f714:	6879      	ldr	r1, [r7, #4]
 800f716:	68f8      	ldr	r0, [r7, #12]
 800f718:	f009 f91f 	bl	801895a <memcpy>
  pbuf_ref(cseg->p);
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	685b      	ldr	r3, [r3, #4]
 800f720:	4618      	mov	r0, r3
 800f722:	f7fe fdef 	bl	800e304 <pbuf_ref>
  return cseg;
 800f726:	68fb      	ldr	r3, [r7, #12]
}
 800f728:	4618      	mov	r0, r3
 800f72a:	3710      	adds	r7, #16
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}
 800f730:	0801a3c8 	.word	0x0801a3c8
 800f734:	0801a91c 	.word	0x0801a91c
 800f738:	0801a40c 	.word	0x0801a40c

0800f73c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b084      	sub	sp, #16
 800f740:	af00      	add	r7, sp, #0
 800f742:	60f8      	str	r0, [r7, #12]
 800f744:	60b9      	str	r1, [r7, #8]
 800f746:	607a      	str	r2, [r7, #4]
 800f748:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f74a:	68bb      	ldr	r3, [r7, #8]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d109      	bne.n	800f764 <tcp_recv_null+0x28>
 800f750:	4b12      	ldr	r3, [pc, #72]	; (800f79c <tcp_recv_null+0x60>)
 800f752:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f756:	4912      	ldr	r1, [pc, #72]	; (800f7a0 <tcp_recv_null+0x64>)
 800f758:	4812      	ldr	r0, [pc, #72]	; (800f7a4 <tcp_recv_null+0x68>)
 800f75a:	f009 f9b9 	bl	8018ad0 <iprintf>
 800f75e:	f06f 030f 	mvn.w	r3, #15
 800f762:	e016      	b.n	800f792 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d009      	beq.n	800f77e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	891b      	ldrh	r3, [r3, #8]
 800f76e:	4619      	mov	r1, r3
 800f770:	68b8      	ldr	r0, [r7, #8]
 800f772:	f7ff fb1d 	bl	800edb0 <tcp_recved>
    pbuf_free(p);
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	f7fe fd24 	bl	800e1c4 <pbuf_free>
 800f77c:	e008      	b.n	800f790 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f77e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d104      	bne.n	800f790 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f786:	68b8      	ldr	r0, [r7, #8]
 800f788:	f7ff f9c2 	bl	800eb10 <tcp_close>
 800f78c:	4603      	mov	r3, r0
 800f78e:	e000      	b.n	800f792 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f790:	2300      	movs	r3, #0
}
 800f792:	4618      	mov	r0, r3
 800f794:	3710      	adds	r7, #16
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}
 800f79a:	bf00      	nop
 800f79c:	0801a3c8 	.word	0x0801a3c8
 800f7a0:	0801a938 	.word	0x0801a938
 800f7a4:	0801a40c 	.word	0x0801a40c

0800f7a8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b086      	sub	sp, #24
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f7b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	db01      	blt.n	800f7be <tcp_kill_prio+0x16>
 800f7ba:	79fb      	ldrb	r3, [r7, #7]
 800f7bc:	e000      	b.n	800f7c0 <tcp_kill_prio+0x18>
 800f7be:	237f      	movs	r3, #127	; 0x7f
 800f7c0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f7c2:	7afb      	ldrb	r3, [r7, #11]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d034      	beq.n	800f832 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f7c8:	7afb      	ldrb	r3, [r7, #11]
 800f7ca:	3b01      	subs	r3, #1
 800f7cc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7d6:	4b19      	ldr	r3, [pc, #100]	; (800f83c <tcp_kill_prio+0x94>)
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	617b      	str	r3, [r7, #20]
 800f7dc:	e01f      	b.n	800f81e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f7de:	697b      	ldr	r3, [r7, #20]
 800f7e0:	7d5b      	ldrb	r3, [r3, #21]
 800f7e2:	7afa      	ldrb	r2, [r7, #11]
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	d80c      	bhi.n	800f802 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f7ec:	7afa      	ldrb	r2, [r7, #11]
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	d112      	bne.n	800f818 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f7f2:	4b13      	ldr	r3, [pc, #76]	; (800f840 <tcp_kill_prio+0x98>)
 800f7f4:	681a      	ldr	r2, [r3, #0]
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	6a1b      	ldr	r3, [r3, #32]
 800f7fa:	1ad3      	subs	r3, r2, r3
 800f7fc:	68fa      	ldr	r2, [r7, #12]
 800f7fe:	429a      	cmp	r2, r3
 800f800:	d80a      	bhi.n	800f818 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f802:	4b0f      	ldr	r3, [pc, #60]	; (800f840 <tcp_kill_prio+0x98>)
 800f804:	681a      	ldr	r2, [r3, #0]
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	6a1b      	ldr	r3, [r3, #32]
 800f80a:	1ad3      	subs	r3, r2, r3
 800f80c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f80e:	697b      	ldr	r3, [r7, #20]
 800f810:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	7d5b      	ldrb	r3, [r3, #21]
 800f816:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	68db      	ldr	r3, [r3, #12]
 800f81c:	617b      	str	r3, [r7, #20]
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d1dc      	bne.n	800f7de <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f824:	693b      	ldr	r3, [r7, #16]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d004      	beq.n	800f834 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f82a:	6938      	ldr	r0, [r7, #16]
 800f82c:	f7ff fa5a 	bl	800ece4 <tcp_abort>
 800f830:	e000      	b.n	800f834 <tcp_kill_prio+0x8c>
    return;
 800f832:	bf00      	nop
  }
}
 800f834:	3718      	adds	r7, #24
 800f836:	46bd      	mov	sp, r7
 800f838:	bd80      	pop	{r7, pc}
 800f83a:	bf00      	nop
 800f83c:	20007ecc 	.word	0x20007ecc
 800f840:	20007ed0 	.word	0x20007ed0

0800f844 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b086      	sub	sp, #24
 800f848:	af00      	add	r7, sp, #0
 800f84a:	4603      	mov	r3, r0
 800f84c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f84e:	79fb      	ldrb	r3, [r7, #7]
 800f850:	2b08      	cmp	r3, #8
 800f852:	d009      	beq.n	800f868 <tcp_kill_state+0x24>
 800f854:	79fb      	ldrb	r3, [r7, #7]
 800f856:	2b09      	cmp	r3, #9
 800f858:	d006      	beq.n	800f868 <tcp_kill_state+0x24>
 800f85a:	4b1a      	ldr	r3, [pc, #104]	; (800f8c4 <tcp_kill_state+0x80>)
 800f85c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f860:	4919      	ldr	r1, [pc, #100]	; (800f8c8 <tcp_kill_state+0x84>)
 800f862:	481a      	ldr	r0, [pc, #104]	; (800f8cc <tcp_kill_state+0x88>)
 800f864:	f009 f934 	bl	8018ad0 <iprintf>

  inactivity = 0;
 800f868:	2300      	movs	r3, #0
 800f86a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f86c:	2300      	movs	r3, #0
 800f86e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f870:	4b17      	ldr	r3, [pc, #92]	; (800f8d0 <tcp_kill_state+0x8c>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	617b      	str	r3, [r7, #20]
 800f876:	e017      	b.n	800f8a8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	7d1b      	ldrb	r3, [r3, #20]
 800f87c:	79fa      	ldrb	r2, [r7, #7]
 800f87e:	429a      	cmp	r2, r3
 800f880:	d10f      	bne.n	800f8a2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f882:	4b14      	ldr	r3, [pc, #80]	; (800f8d4 <tcp_kill_state+0x90>)
 800f884:	681a      	ldr	r2, [r3, #0]
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	6a1b      	ldr	r3, [r3, #32]
 800f88a:	1ad3      	subs	r3, r2, r3
 800f88c:	68fa      	ldr	r2, [r7, #12]
 800f88e:	429a      	cmp	r2, r3
 800f890:	d807      	bhi.n	800f8a2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f892:	4b10      	ldr	r3, [pc, #64]	; (800f8d4 <tcp_kill_state+0x90>)
 800f894:	681a      	ldr	r2, [r3, #0]
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	6a1b      	ldr	r3, [r3, #32]
 800f89a:	1ad3      	subs	r3, r2, r3
 800f89c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f89e:	697b      	ldr	r3, [r7, #20]
 800f8a0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	68db      	ldr	r3, [r3, #12]
 800f8a6:	617b      	str	r3, [r7, #20]
 800f8a8:	697b      	ldr	r3, [r7, #20]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d1e4      	bne.n	800f878 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d003      	beq.n	800f8bc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f8b4:	2100      	movs	r1, #0
 800f8b6:	6938      	ldr	r0, [r7, #16]
 800f8b8:	f7ff f956 	bl	800eb68 <tcp_abandon>
  }
}
 800f8bc:	bf00      	nop
 800f8be:	3718      	adds	r7, #24
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bd80      	pop	{r7, pc}
 800f8c4:	0801a3c8 	.word	0x0801a3c8
 800f8c8:	0801a954 	.word	0x0801a954
 800f8cc:	0801a40c 	.word	0x0801a40c
 800f8d0:	20007ecc 	.word	0x20007ecc
 800f8d4:	20007ed0 	.word	0x20007ed0

0800f8d8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b084      	sub	sp, #16
 800f8dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f8de:	2300      	movs	r3, #0
 800f8e0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f8e6:	4b12      	ldr	r3, [pc, #72]	; (800f930 <tcp_kill_timewait+0x58>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	60fb      	str	r3, [r7, #12]
 800f8ec:	e012      	b.n	800f914 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f8ee:	4b11      	ldr	r3, [pc, #68]	; (800f934 <tcp_kill_timewait+0x5c>)
 800f8f0:	681a      	ldr	r2, [r3, #0]
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	6a1b      	ldr	r3, [r3, #32]
 800f8f6:	1ad3      	subs	r3, r2, r3
 800f8f8:	687a      	ldr	r2, [r7, #4]
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d807      	bhi.n	800f90e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f8fe:	4b0d      	ldr	r3, [pc, #52]	; (800f934 <tcp_kill_timewait+0x5c>)
 800f900:	681a      	ldr	r2, [r3, #0]
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	6a1b      	ldr	r3, [r3, #32]
 800f906:	1ad3      	subs	r3, r2, r3
 800f908:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	68db      	ldr	r3, [r3, #12]
 800f912:	60fb      	str	r3, [r7, #12]
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d1e9      	bne.n	800f8ee <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d002      	beq.n	800f926 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f920:	68b8      	ldr	r0, [r7, #8]
 800f922:	f7ff f9df 	bl	800ece4 <tcp_abort>
  }
}
 800f926:	bf00      	nop
 800f928:	3710      	adds	r7, #16
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
 800f92e:	bf00      	nop
 800f930:	20007edc 	.word	0x20007edc
 800f934:	20007ed0 	.word	0x20007ed0

0800f938 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b082      	sub	sp, #8
 800f93c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f93e:	4b10      	ldr	r3, [pc, #64]	; (800f980 <tcp_handle_closepend+0x48>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f944:	e014      	b.n	800f970 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	68db      	ldr	r3, [r3, #12]
 800f94a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	8b5b      	ldrh	r3, [r3, #26]
 800f950:	f003 0308 	and.w	r3, r3, #8
 800f954:	2b00      	cmp	r3, #0
 800f956:	d009      	beq.n	800f96c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	8b5b      	ldrh	r3, [r3, #26]
 800f95c:	f023 0308 	bic.w	r3, r3, #8
 800f960:	b29a      	uxth	r2, r3
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f966:	6878      	ldr	r0, [r7, #4]
 800f968:	f7ff f86c 	bl	800ea44 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f96c:	683b      	ldr	r3, [r7, #0]
 800f96e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d1e7      	bne.n	800f946 <tcp_handle_closepend+0xe>
  }
}
 800f976:	bf00      	nop
 800f978:	3708      	adds	r7, #8
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}
 800f97e:	bf00      	nop
 800f980:	20007ecc 	.word	0x20007ecc

0800f984 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b084      	sub	sp, #16
 800f988:	af00      	add	r7, sp, #0
 800f98a:	4603      	mov	r3, r0
 800f98c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f98e:	2001      	movs	r0, #1
 800f990:	f7fd fdcc 	bl	800d52c <memp_malloc>
 800f994:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d126      	bne.n	800f9ea <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f99c:	f7ff ffcc 	bl	800f938 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f9a0:	f7ff ff9a 	bl	800f8d8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f9a4:	2001      	movs	r0, #1
 800f9a6:	f7fd fdc1 	bl	800d52c <memp_malloc>
 800f9aa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d11b      	bne.n	800f9ea <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f9b2:	2009      	movs	r0, #9
 800f9b4:	f7ff ff46 	bl	800f844 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f9b8:	2001      	movs	r0, #1
 800f9ba:	f7fd fdb7 	bl	800d52c <memp_malloc>
 800f9be:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d111      	bne.n	800f9ea <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f9c6:	2008      	movs	r0, #8
 800f9c8:	f7ff ff3c 	bl	800f844 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f9cc:	2001      	movs	r0, #1
 800f9ce:	f7fd fdad 	bl	800d52c <memp_malloc>
 800f9d2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d107      	bne.n	800f9ea <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f9da:	79fb      	ldrb	r3, [r7, #7]
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f7ff fee3 	bl	800f7a8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f9e2:	2001      	movs	r0, #1
 800f9e4:	f7fd fda2 	bl	800d52c <memp_malloc>
 800f9e8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d03f      	beq.n	800fa70 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f9f0:	229c      	movs	r2, #156	; 0x9c
 800f9f2:	2100      	movs	r1, #0
 800f9f4:	68f8      	ldr	r0, [r7, #12]
 800f9f6:	f008 ffbb 	bl	8018970 <memset>
    pcb->prio = prio;
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	79fa      	ldrb	r2, [r7, #7]
 800f9fe:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fa06:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fa10:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	22ff      	movs	r2, #255	; 0xff
 800fa1e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fa26:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	2206      	movs	r2, #6
 800fa2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	2206      	movs	r2, #6
 800fa34:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa3c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	2201      	movs	r2, #1
 800fa42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800fa46:	4b0d      	ldr	r3, [pc, #52]	; (800fa7c <tcp_alloc+0xf8>)
 800fa48:	681a      	ldr	r2, [r3, #0]
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800fa4e:	4b0c      	ldr	r3, [pc, #48]	; (800fa80 <tcp_alloc+0xfc>)
 800fa50:	781a      	ldrb	r2, [r3, #0]
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800fa5c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	4a08      	ldr	r2, [pc, #32]	; (800fa84 <tcp_alloc+0x100>)
 800fa64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	4a07      	ldr	r2, [pc, #28]	; (800fa88 <tcp_alloc+0x104>)
 800fa6c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800fa70:	68fb      	ldr	r3, [r7, #12]
}
 800fa72:	4618      	mov	r0, r3
 800fa74:	3710      	adds	r7, #16
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bd80      	pop	{r7, pc}
 800fa7a:	bf00      	nop
 800fa7c:	20007ed0 	.word	0x20007ed0
 800fa80:	2000047a 	.word	0x2000047a
 800fa84:	0800f73d 	.word	0x0800f73d
 800fa88:	006ddd00 	.word	0x006ddd00

0800fa8c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b082      	sub	sp, #8
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d107      	bne.n	800faaa <tcp_pcb_purge+0x1e>
 800fa9a:	4b21      	ldr	r3, [pc, #132]	; (800fb20 <tcp_pcb_purge+0x94>)
 800fa9c:	f640 0251 	movw	r2, #2129	; 0x851
 800faa0:	4920      	ldr	r1, [pc, #128]	; (800fb24 <tcp_pcb_purge+0x98>)
 800faa2:	4821      	ldr	r0, [pc, #132]	; (800fb28 <tcp_pcb_purge+0x9c>)
 800faa4:	f009 f814 	bl	8018ad0 <iprintf>
 800faa8:	e037      	b.n	800fb1a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	7d1b      	ldrb	r3, [r3, #20]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d033      	beq.n	800fb1a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fab6:	2b0a      	cmp	r3, #10
 800fab8:	d02f      	beq.n	800fb1a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fabe:	2b01      	cmp	r3, #1
 800fac0:	d02b      	beq.n	800fb1a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d007      	beq.n	800fada <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800face:	4618      	mov	r0, r3
 800fad0:	f7fe fb78 	bl	800e1c4 <pbuf_free>
      pcb->refused_data = NULL;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2200      	movs	r2, #0
 800fad8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d002      	beq.n	800fae8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f000 f986 	bl	800fdf4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800faee:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800faf4:	4618      	mov	r0, r3
 800faf6:	f7ff fdc9 	bl	800f68c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7ff fdc4 	bl	800f68c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2200      	movs	r2, #0
 800fb08:	66da      	str	r2, [r3, #108]	; 0x6c
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2200      	movs	r2, #0
 800fb16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fb1a:	3708      	adds	r7, #8
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}
 800fb20:	0801a3c8 	.word	0x0801a3c8
 800fb24:	0801aa14 	.word	0x0801aa14
 800fb28:	0801a40c 	.word	0x0801a40c

0800fb2c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b084      	sub	sp, #16
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
 800fb34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fb36:	683b      	ldr	r3, [r7, #0]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d106      	bne.n	800fb4a <tcp_pcb_remove+0x1e>
 800fb3c:	4b3e      	ldr	r3, [pc, #248]	; (800fc38 <tcp_pcb_remove+0x10c>)
 800fb3e:	f640 0283 	movw	r2, #2179	; 0x883
 800fb42:	493e      	ldr	r1, [pc, #248]	; (800fc3c <tcp_pcb_remove+0x110>)
 800fb44:	483e      	ldr	r0, [pc, #248]	; (800fc40 <tcp_pcb_remove+0x114>)
 800fb46:	f008 ffc3 	bl	8018ad0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d106      	bne.n	800fb5e <tcp_pcb_remove+0x32>
 800fb50:	4b39      	ldr	r3, [pc, #228]	; (800fc38 <tcp_pcb_remove+0x10c>)
 800fb52:	f640 0284 	movw	r2, #2180	; 0x884
 800fb56:	493b      	ldr	r1, [pc, #236]	; (800fc44 <tcp_pcb_remove+0x118>)
 800fb58:	4839      	ldr	r0, [pc, #228]	; (800fc40 <tcp_pcb_remove+0x114>)
 800fb5a:	f008 ffb9 	bl	8018ad0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	683a      	ldr	r2, [r7, #0]
 800fb64:	429a      	cmp	r2, r3
 800fb66:	d105      	bne.n	800fb74 <tcp_pcb_remove+0x48>
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	68da      	ldr	r2, [r3, #12]
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	601a      	str	r2, [r3, #0]
 800fb72:	e013      	b.n	800fb9c <tcp_pcb_remove+0x70>
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	60fb      	str	r3, [r7, #12]
 800fb7a:	e00c      	b.n	800fb96 <tcp_pcb_remove+0x6a>
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	68db      	ldr	r3, [r3, #12]
 800fb80:	683a      	ldr	r2, [r7, #0]
 800fb82:	429a      	cmp	r2, r3
 800fb84:	d104      	bne.n	800fb90 <tcp_pcb_remove+0x64>
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	68da      	ldr	r2, [r3, #12]
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	60da      	str	r2, [r3, #12]
 800fb8e:	e005      	b.n	800fb9c <tcp_pcb_remove+0x70>
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	68db      	ldr	r3, [r3, #12]
 800fb94:	60fb      	str	r3, [r7, #12]
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d1ef      	bne.n	800fb7c <tcp_pcb_remove+0x50>
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	2200      	movs	r2, #0
 800fba0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800fba2:	6838      	ldr	r0, [r7, #0]
 800fba4:	f7ff ff72 	bl	800fa8c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	7d1b      	ldrb	r3, [r3, #20]
 800fbac:	2b0a      	cmp	r3, #10
 800fbae:	d013      	beq.n	800fbd8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fbb4:	2b01      	cmp	r3, #1
 800fbb6:	d00f      	beq.n	800fbd8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	8b5b      	ldrh	r3, [r3, #26]
 800fbbc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d009      	beq.n	800fbd8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	8b5b      	ldrh	r3, [r3, #26]
 800fbc8:	f043 0302 	orr.w	r3, r3, #2
 800fbcc:	b29a      	uxth	r2, r3
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fbd2:	6838      	ldr	r0, [r7, #0]
 800fbd4:	f002 ff68 	bl	8012aa8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fbd8:	683b      	ldr	r3, [r7, #0]
 800fbda:	7d1b      	ldrb	r3, [r3, #20]
 800fbdc:	2b01      	cmp	r3, #1
 800fbde:	d020      	beq.n	800fc22 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fbe0:	683b      	ldr	r3, [r7, #0]
 800fbe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d006      	beq.n	800fbf6 <tcp_pcb_remove+0xca>
 800fbe8:	4b13      	ldr	r3, [pc, #76]	; (800fc38 <tcp_pcb_remove+0x10c>)
 800fbea:	f640 0293 	movw	r2, #2195	; 0x893
 800fbee:	4916      	ldr	r1, [pc, #88]	; (800fc48 <tcp_pcb_remove+0x11c>)
 800fbf0:	4813      	ldr	r0, [pc, #76]	; (800fc40 <tcp_pcb_remove+0x114>)
 800fbf2:	f008 ff6d 	bl	8018ad0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d006      	beq.n	800fc0c <tcp_pcb_remove+0xe0>
 800fbfe:	4b0e      	ldr	r3, [pc, #56]	; (800fc38 <tcp_pcb_remove+0x10c>)
 800fc00:	f640 0294 	movw	r2, #2196	; 0x894
 800fc04:	4911      	ldr	r1, [pc, #68]	; (800fc4c <tcp_pcb_remove+0x120>)
 800fc06:	480e      	ldr	r0, [pc, #56]	; (800fc40 <tcp_pcb_remove+0x114>)
 800fc08:	f008 ff62 	bl	8018ad0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d006      	beq.n	800fc22 <tcp_pcb_remove+0xf6>
 800fc14:	4b08      	ldr	r3, [pc, #32]	; (800fc38 <tcp_pcb_remove+0x10c>)
 800fc16:	f640 0296 	movw	r2, #2198	; 0x896
 800fc1a:	490d      	ldr	r1, [pc, #52]	; (800fc50 <tcp_pcb_remove+0x124>)
 800fc1c:	4808      	ldr	r0, [pc, #32]	; (800fc40 <tcp_pcb_remove+0x114>)
 800fc1e:	f008 ff57 	bl	8018ad0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fc22:	683b      	ldr	r3, [r7, #0]
 800fc24:	2200      	movs	r2, #0
 800fc26:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fc2e:	bf00      	nop
 800fc30:	3710      	adds	r7, #16
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}
 800fc36:	bf00      	nop
 800fc38:	0801a3c8 	.word	0x0801a3c8
 800fc3c:	0801aa30 	.word	0x0801aa30
 800fc40:	0801a40c 	.word	0x0801a40c
 800fc44:	0801aa4c 	.word	0x0801aa4c
 800fc48:	0801aa6c 	.word	0x0801aa6c
 800fc4c:	0801aa84 	.word	0x0801aa84
 800fc50:	0801aaa0 	.word	0x0801aaa0

0800fc54 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b082      	sub	sp, #8
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d106      	bne.n	800fc70 <tcp_next_iss+0x1c>
 800fc62:	4b0a      	ldr	r3, [pc, #40]	; (800fc8c <tcp_next_iss+0x38>)
 800fc64:	f640 02af 	movw	r2, #2223	; 0x8af
 800fc68:	4909      	ldr	r1, [pc, #36]	; (800fc90 <tcp_next_iss+0x3c>)
 800fc6a:	480a      	ldr	r0, [pc, #40]	; (800fc94 <tcp_next_iss+0x40>)
 800fc6c:	f008 ff30 	bl	8018ad0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fc70:	4b09      	ldr	r3, [pc, #36]	; (800fc98 <tcp_next_iss+0x44>)
 800fc72:	681a      	ldr	r2, [r3, #0]
 800fc74:	4b09      	ldr	r3, [pc, #36]	; (800fc9c <tcp_next_iss+0x48>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	4413      	add	r3, r2
 800fc7a:	4a07      	ldr	r2, [pc, #28]	; (800fc98 <tcp_next_iss+0x44>)
 800fc7c:	6013      	str	r3, [r2, #0]
  return iss;
 800fc7e:	4b06      	ldr	r3, [pc, #24]	; (800fc98 <tcp_next_iss+0x44>)
 800fc80:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	3708      	adds	r7, #8
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}
 800fc8a:	bf00      	nop
 800fc8c:	0801a3c8 	.word	0x0801a3c8
 800fc90:	0801aab8 	.word	0x0801aab8
 800fc94:	0801a40c 	.word	0x0801a40c
 800fc98:	20000034 	.word	0x20000034
 800fc9c:	20007ed0 	.word	0x20007ed0

0800fca0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b086      	sub	sp, #24
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	4603      	mov	r3, r0
 800fca8:	60b9      	str	r1, [r7, #8]
 800fcaa:	607a      	str	r2, [r7, #4]
 800fcac:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d106      	bne.n	800fcc2 <tcp_eff_send_mss_netif+0x22>
 800fcb4:	4b14      	ldr	r3, [pc, #80]	; (800fd08 <tcp_eff_send_mss_netif+0x68>)
 800fcb6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800fcba:	4914      	ldr	r1, [pc, #80]	; (800fd0c <tcp_eff_send_mss_netif+0x6c>)
 800fcbc:	4814      	ldr	r0, [pc, #80]	; (800fd10 <tcp_eff_send_mss_netif+0x70>)
 800fcbe:	f008 ff07 	bl	8018ad0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800fcc2:	68bb      	ldr	r3, [r7, #8]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d101      	bne.n	800fccc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800fcc8:	89fb      	ldrh	r3, [r7, #14]
 800fcca:	e019      	b.n	800fd00 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800fccc:	68bb      	ldr	r3, [r7, #8]
 800fcce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fcd0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800fcd2:	8afb      	ldrh	r3, [r7, #22]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d012      	beq.n	800fcfe <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800fcd8:	2328      	movs	r3, #40	; 0x28
 800fcda:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fcdc:	8afa      	ldrh	r2, [r7, #22]
 800fcde:	8abb      	ldrh	r3, [r7, #20]
 800fce0:	429a      	cmp	r2, r3
 800fce2:	d904      	bls.n	800fcee <tcp_eff_send_mss_netif+0x4e>
 800fce4:	8afa      	ldrh	r2, [r7, #22]
 800fce6:	8abb      	ldrh	r3, [r7, #20]
 800fce8:	1ad3      	subs	r3, r2, r3
 800fcea:	b29b      	uxth	r3, r3
 800fcec:	e000      	b.n	800fcf0 <tcp_eff_send_mss_netif+0x50>
 800fcee:	2300      	movs	r3, #0
 800fcf0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800fcf2:	8a7a      	ldrh	r2, [r7, #18]
 800fcf4:	89fb      	ldrh	r3, [r7, #14]
 800fcf6:	4293      	cmp	r3, r2
 800fcf8:	bf28      	it	cs
 800fcfa:	4613      	movcs	r3, r2
 800fcfc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800fcfe:	89fb      	ldrh	r3, [r7, #14]
}
 800fd00:	4618      	mov	r0, r3
 800fd02:	3718      	adds	r7, #24
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}
 800fd08:	0801a3c8 	.word	0x0801a3c8
 800fd0c:	0801aad4 	.word	0x0801aad4
 800fd10:	0801a40c 	.word	0x0801a40c

0800fd14 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b084      	sub	sp, #16
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
 800fd1c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d119      	bne.n	800fd5c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800fd28:	4b10      	ldr	r3, [pc, #64]	; (800fd6c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800fd2a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800fd2e:	4910      	ldr	r1, [pc, #64]	; (800fd70 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800fd30:	4810      	ldr	r0, [pc, #64]	; (800fd74 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800fd32:	f008 fecd 	bl	8018ad0 <iprintf>

  while (pcb != NULL) {
 800fd36:	e011      	b.n	800fd5c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	681a      	ldr	r2, [r3, #0]
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d108      	bne.n	800fd56 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	68db      	ldr	r3, [r3, #12]
 800fd48:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800fd4a:	68f8      	ldr	r0, [r7, #12]
 800fd4c:	f7fe ffca 	bl	800ece4 <tcp_abort>
      pcb = next;
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	60fb      	str	r3, [r7, #12]
 800fd54:	e002      	b.n	800fd5c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	68db      	ldr	r3, [r3, #12]
 800fd5a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d1ea      	bne.n	800fd38 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800fd62:	bf00      	nop
 800fd64:	3710      	adds	r7, #16
 800fd66:	46bd      	mov	sp, r7
 800fd68:	bd80      	pop	{r7, pc}
 800fd6a:	bf00      	nop
 800fd6c:	0801a3c8 	.word	0x0801a3c8
 800fd70:	0801aafc 	.word	0x0801aafc
 800fd74:	0801a40c 	.word	0x0801a40c

0800fd78 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b084      	sub	sp, #16
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
 800fd80:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d02a      	beq.n	800fdde <tcp_netif_ip_addr_changed+0x66>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d026      	beq.n	800fdde <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800fd90:	4b15      	ldr	r3, [pc, #84]	; (800fde8 <tcp_netif_ip_addr_changed+0x70>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	4619      	mov	r1, r3
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f7ff ffbc 	bl	800fd14 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800fd9c:	4b13      	ldr	r3, [pc, #76]	; (800fdec <tcp_netif_ip_addr_changed+0x74>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	4619      	mov	r1, r3
 800fda2:	6878      	ldr	r0, [r7, #4]
 800fda4:	f7ff ffb6 	bl	800fd14 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d017      	beq.n	800fdde <tcp_netif_ip_addr_changed+0x66>
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d013      	beq.n	800fdde <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fdb6:	4b0e      	ldr	r3, [pc, #56]	; (800fdf0 <tcp_netif_ip_addr_changed+0x78>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	60fb      	str	r3, [r7, #12]
 800fdbc:	e00c      	b.n	800fdd8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	681a      	ldr	r2, [r3, #0]
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d103      	bne.n	800fdd2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800fdca:	683b      	ldr	r3, [r7, #0]
 800fdcc:	681a      	ldr	r2, [r3, #0]
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	68db      	ldr	r3, [r3, #12]
 800fdd6:	60fb      	str	r3, [r7, #12]
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d1ef      	bne.n	800fdbe <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800fdde:	bf00      	nop
 800fde0:	3710      	adds	r7, #16
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}
 800fde6:	bf00      	nop
 800fde8:	20007ecc 	.word	0x20007ecc
 800fdec:	20007ed8 	.word	0x20007ed8
 800fdf0:	20007ed4 	.word	0x20007ed4

0800fdf4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b082      	sub	sp, #8
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d007      	beq.n	800fe14 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7ff fc3f 	bl	800f68c <tcp_segs_free>
    pcb->ooseq = NULL;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	2200      	movs	r2, #0
 800fe12:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800fe14:	bf00      	nop
 800fe16:	3708      	adds	r7, #8
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}

0800fe1c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800fe1c:	b590      	push	{r4, r7, lr}
 800fe1e:	b08d      	sub	sp, #52	; 0x34
 800fe20:	af04      	add	r7, sp, #16
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d105      	bne.n	800fe38 <tcp_input+0x1c>
 800fe2c:	4b9b      	ldr	r3, [pc, #620]	; (801009c <tcp_input+0x280>)
 800fe2e:	2283      	movs	r2, #131	; 0x83
 800fe30:	499b      	ldr	r1, [pc, #620]	; (80100a0 <tcp_input+0x284>)
 800fe32:	489c      	ldr	r0, [pc, #624]	; (80100a4 <tcp_input+0x288>)
 800fe34:	f008 fe4c 	bl	8018ad0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	685b      	ldr	r3, [r3, #4]
 800fe3c:	4a9a      	ldr	r2, [pc, #616]	; (80100a8 <tcp_input+0x28c>)
 800fe3e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	895b      	ldrh	r3, [r3, #10]
 800fe44:	2b13      	cmp	r3, #19
 800fe46:	f240 83c4 	bls.w	80105d2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fe4a:	4b98      	ldr	r3, [pc, #608]	; (80100ac <tcp_input+0x290>)
 800fe4c:	695a      	ldr	r2, [r3, #20]
 800fe4e:	4b97      	ldr	r3, [pc, #604]	; (80100ac <tcp_input+0x290>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	4619      	mov	r1, r3
 800fe54:	4610      	mov	r0, r2
 800fe56:	f007 fdf1 	bl	8017a3c <ip4_addr_isbroadcast_u32>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	f040 83ba 	bne.w	80105d6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800fe62:	4b92      	ldr	r3, [pc, #584]	; (80100ac <tcp_input+0x290>)
 800fe64:	695b      	ldr	r3, [r3, #20]
 800fe66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fe6a:	2be0      	cmp	r3, #224	; 0xe0
 800fe6c:	f000 83b3 	beq.w	80105d6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800fe70:	4b8d      	ldr	r3, [pc, #564]	; (80100a8 <tcp_input+0x28c>)
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	899b      	ldrh	r3, [r3, #12]
 800fe76:	b29b      	uxth	r3, r3
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f7fc ff02 	bl	800cc82 <lwip_htons>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	0b1b      	lsrs	r3, r3, #12
 800fe82:	b29b      	uxth	r3, r3
 800fe84:	b2db      	uxtb	r3, r3
 800fe86:	009b      	lsls	r3, r3, #2
 800fe88:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800fe8a:	7cbb      	ldrb	r3, [r7, #18]
 800fe8c:	2b13      	cmp	r3, #19
 800fe8e:	f240 83a2 	bls.w	80105d6 <tcp_input+0x7ba>
 800fe92:	7cbb      	ldrb	r3, [r7, #18]
 800fe94:	b29a      	uxth	r2, r3
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	891b      	ldrh	r3, [r3, #8]
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	f200 839b 	bhi.w	80105d6 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800fea0:	7cbb      	ldrb	r3, [r7, #18]
 800fea2:	b29b      	uxth	r3, r3
 800fea4:	3b14      	subs	r3, #20
 800fea6:	b29a      	uxth	r2, r3
 800fea8:	4b81      	ldr	r3, [pc, #516]	; (80100b0 <tcp_input+0x294>)
 800feaa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800feac:	4b81      	ldr	r3, [pc, #516]	; (80100b4 <tcp_input+0x298>)
 800feae:	2200      	movs	r2, #0
 800feb0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	895a      	ldrh	r2, [r3, #10]
 800feb6:	7cbb      	ldrb	r3, [r7, #18]
 800feb8:	b29b      	uxth	r3, r3
 800feba:	429a      	cmp	r2, r3
 800febc:	d309      	bcc.n	800fed2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800febe:	4b7c      	ldr	r3, [pc, #496]	; (80100b0 <tcp_input+0x294>)
 800fec0:	881a      	ldrh	r2, [r3, #0]
 800fec2:	4b7d      	ldr	r3, [pc, #500]	; (80100b8 <tcp_input+0x29c>)
 800fec4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800fec6:	7cbb      	ldrb	r3, [r7, #18]
 800fec8:	4619      	mov	r1, r3
 800feca:	6878      	ldr	r0, [r7, #4]
 800fecc:	f7fe f8f4 	bl	800e0b8 <pbuf_remove_header>
 800fed0:	e04e      	b.n	800ff70 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d105      	bne.n	800fee6 <tcp_input+0xca>
 800feda:	4b70      	ldr	r3, [pc, #448]	; (801009c <tcp_input+0x280>)
 800fedc:	22c2      	movs	r2, #194	; 0xc2
 800fede:	4977      	ldr	r1, [pc, #476]	; (80100bc <tcp_input+0x2a0>)
 800fee0:	4870      	ldr	r0, [pc, #448]	; (80100a4 <tcp_input+0x288>)
 800fee2:	f008 fdf5 	bl	8018ad0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800fee6:	2114      	movs	r1, #20
 800fee8:	6878      	ldr	r0, [r7, #4]
 800feea:	f7fe f8e5 	bl	800e0b8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	895a      	ldrh	r2, [r3, #10]
 800fef2:	4b71      	ldr	r3, [pc, #452]	; (80100b8 <tcp_input+0x29c>)
 800fef4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fef6:	4b6e      	ldr	r3, [pc, #440]	; (80100b0 <tcp_input+0x294>)
 800fef8:	881a      	ldrh	r2, [r3, #0]
 800fefa:	4b6f      	ldr	r3, [pc, #444]	; (80100b8 <tcp_input+0x29c>)
 800fefc:	881b      	ldrh	r3, [r3, #0]
 800fefe:	1ad3      	subs	r3, r2, r3
 800ff00:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ff02:	4b6d      	ldr	r3, [pc, #436]	; (80100b8 <tcp_input+0x29c>)
 800ff04:	881b      	ldrh	r3, [r3, #0]
 800ff06:	4619      	mov	r1, r3
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f7fe f8d5 	bl	800e0b8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	895b      	ldrh	r3, [r3, #10]
 800ff14:	8a3a      	ldrh	r2, [r7, #16]
 800ff16:	429a      	cmp	r2, r3
 800ff18:	f200 835f 	bhi.w	80105da <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	685b      	ldr	r3, [r3, #4]
 800ff22:	4a64      	ldr	r2, [pc, #400]	; (80100b4 <tcp_input+0x298>)
 800ff24:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	8a3a      	ldrh	r2, [r7, #16]
 800ff2c:	4611      	mov	r1, r2
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7fe f8c2 	bl	800e0b8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	891a      	ldrh	r2, [r3, #8]
 800ff38:	8a3b      	ldrh	r3, [r7, #16]
 800ff3a:	1ad3      	subs	r3, r2, r3
 800ff3c:	b29a      	uxth	r2, r3
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	895b      	ldrh	r3, [r3, #10]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d005      	beq.n	800ff56 <tcp_input+0x13a>
 800ff4a:	4b54      	ldr	r3, [pc, #336]	; (801009c <tcp_input+0x280>)
 800ff4c:	22df      	movs	r2, #223	; 0xdf
 800ff4e:	495c      	ldr	r1, [pc, #368]	; (80100c0 <tcp_input+0x2a4>)
 800ff50:	4854      	ldr	r0, [pc, #336]	; (80100a4 <tcp_input+0x288>)
 800ff52:	f008 fdbd 	bl	8018ad0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	891a      	ldrh	r2, [r3, #8]
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	891b      	ldrh	r3, [r3, #8]
 800ff60:	429a      	cmp	r2, r3
 800ff62:	d005      	beq.n	800ff70 <tcp_input+0x154>
 800ff64:	4b4d      	ldr	r3, [pc, #308]	; (801009c <tcp_input+0x280>)
 800ff66:	22e0      	movs	r2, #224	; 0xe0
 800ff68:	4956      	ldr	r1, [pc, #344]	; (80100c4 <tcp_input+0x2a8>)
 800ff6a:	484e      	ldr	r0, [pc, #312]	; (80100a4 <tcp_input+0x288>)
 800ff6c:	f008 fdb0 	bl	8018ad0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ff70:	4b4d      	ldr	r3, [pc, #308]	; (80100a8 <tcp_input+0x28c>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	881b      	ldrh	r3, [r3, #0]
 800ff76:	b29a      	uxth	r2, r3
 800ff78:	4b4b      	ldr	r3, [pc, #300]	; (80100a8 <tcp_input+0x28c>)
 800ff7a:	681c      	ldr	r4, [r3, #0]
 800ff7c:	4610      	mov	r0, r2
 800ff7e:	f7fc fe80 	bl	800cc82 <lwip_htons>
 800ff82:	4603      	mov	r3, r0
 800ff84:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ff86:	4b48      	ldr	r3, [pc, #288]	; (80100a8 <tcp_input+0x28c>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	885b      	ldrh	r3, [r3, #2]
 800ff8c:	b29a      	uxth	r2, r3
 800ff8e:	4b46      	ldr	r3, [pc, #280]	; (80100a8 <tcp_input+0x28c>)
 800ff90:	681c      	ldr	r4, [r3, #0]
 800ff92:	4610      	mov	r0, r2
 800ff94:	f7fc fe75 	bl	800cc82 <lwip_htons>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ff9c:	4b42      	ldr	r3, [pc, #264]	; (80100a8 <tcp_input+0x28c>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	685a      	ldr	r2, [r3, #4]
 800ffa2:	4b41      	ldr	r3, [pc, #260]	; (80100a8 <tcp_input+0x28c>)
 800ffa4:	681c      	ldr	r4, [r3, #0]
 800ffa6:	4610      	mov	r0, r2
 800ffa8:	f7fc fe80 	bl	800ccac <lwip_htonl>
 800ffac:	4603      	mov	r3, r0
 800ffae:	6063      	str	r3, [r4, #4]
 800ffb0:	6863      	ldr	r3, [r4, #4]
 800ffb2:	4a45      	ldr	r2, [pc, #276]	; (80100c8 <tcp_input+0x2ac>)
 800ffb4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ffb6:	4b3c      	ldr	r3, [pc, #240]	; (80100a8 <tcp_input+0x28c>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	689a      	ldr	r2, [r3, #8]
 800ffbc:	4b3a      	ldr	r3, [pc, #232]	; (80100a8 <tcp_input+0x28c>)
 800ffbe:	681c      	ldr	r4, [r3, #0]
 800ffc0:	4610      	mov	r0, r2
 800ffc2:	f7fc fe73 	bl	800ccac <lwip_htonl>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	60a3      	str	r3, [r4, #8]
 800ffca:	68a3      	ldr	r3, [r4, #8]
 800ffcc:	4a3f      	ldr	r2, [pc, #252]	; (80100cc <tcp_input+0x2b0>)
 800ffce:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ffd0:	4b35      	ldr	r3, [pc, #212]	; (80100a8 <tcp_input+0x28c>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	89db      	ldrh	r3, [r3, #14]
 800ffd6:	b29a      	uxth	r2, r3
 800ffd8:	4b33      	ldr	r3, [pc, #204]	; (80100a8 <tcp_input+0x28c>)
 800ffda:	681c      	ldr	r4, [r3, #0]
 800ffdc:	4610      	mov	r0, r2
 800ffde:	f7fc fe50 	bl	800cc82 <lwip_htons>
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ffe6:	4b30      	ldr	r3, [pc, #192]	; (80100a8 <tcp_input+0x28c>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	899b      	ldrh	r3, [r3, #12]
 800ffec:	b29b      	uxth	r3, r3
 800ffee:	4618      	mov	r0, r3
 800fff0:	f7fc fe47 	bl	800cc82 <lwip_htons>
 800fff4:	4603      	mov	r3, r0
 800fff6:	b2db      	uxtb	r3, r3
 800fff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fffc:	b2da      	uxtb	r2, r3
 800fffe:	4b34      	ldr	r3, [pc, #208]	; (80100d0 <tcp_input+0x2b4>)
 8010000:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	891a      	ldrh	r2, [r3, #8]
 8010006:	4b33      	ldr	r3, [pc, #204]	; (80100d4 <tcp_input+0x2b8>)
 8010008:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801000a:	4b31      	ldr	r3, [pc, #196]	; (80100d0 <tcp_input+0x2b4>)
 801000c:	781b      	ldrb	r3, [r3, #0]
 801000e:	f003 0303 	and.w	r3, r3, #3
 8010012:	2b00      	cmp	r3, #0
 8010014:	d00c      	beq.n	8010030 <tcp_input+0x214>
    tcplen++;
 8010016:	4b2f      	ldr	r3, [pc, #188]	; (80100d4 <tcp_input+0x2b8>)
 8010018:	881b      	ldrh	r3, [r3, #0]
 801001a:	3301      	adds	r3, #1
 801001c:	b29a      	uxth	r2, r3
 801001e:	4b2d      	ldr	r3, [pc, #180]	; (80100d4 <tcp_input+0x2b8>)
 8010020:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	891a      	ldrh	r2, [r3, #8]
 8010026:	4b2b      	ldr	r3, [pc, #172]	; (80100d4 <tcp_input+0x2b8>)
 8010028:	881b      	ldrh	r3, [r3, #0]
 801002a:	429a      	cmp	r2, r3
 801002c:	f200 82d7 	bhi.w	80105de <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010030:	2300      	movs	r3, #0
 8010032:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010034:	4b28      	ldr	r3, [pc, #160]	; (80100d8 <tcp_input+0x2bc>)
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	61fb      	str	r3, [r7, #28]
 801003a:	e09d      	b.n	8010178 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801003c:	69fb      	ldr	r3, [r7, #28]
 801003e:	7d1b      	ldrb	r3, [r3, #20]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d105      	bne.n	8010050 <tcp_input+0x234>
 8010044:	4b15      	ldr	r3, [pc, #84]	; (801009c <tcp_input+0x280>)
 8010046:	22fb      	movs	r2, #251	; 0xfb
 8010048:	4924      	ldr	r1, [pc, #144]	; (80100dc <tcp_input+0x2c0>)
 801004a:	4816      	ldr	r0, [pc, #88]	; (80100a4 <tcp_input+0x288>)
 801004c:	f008 fd40 	bl	8018ad0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010050:	69fb      	ldr	r3, [r7, #28]
 8010052:	7d1b      	ldrb	r3, [r3, #20]
 8010054:	2b0a      	cmp	r3, #10
 8010056:	d105      	bne.n	8010064 <tcp_input+0x248>
 8010058:	4b10      	ldr	r3, [pc, #64]	; (801009c <tcp_input+0x280>)
 801005a:	22fc      	movs	r2, #252	; 0xfc
 801005c:	4920      	ldr	r1, [pc, #128]	; (80100e0 <tcp_input+0x2c4>)
 801005e:	4811      	ldr	r0, [pc, #68]	; (80100a4 <tcp_input+0x288>)
 8010060:	f008 fd36 	bl	8018ad0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010064:	69fb      	ldr	r3, [r7, #28]
 8010066:	7d1b      	ldrb	r3, [r3, #20]
 8010068:	2b01      	cmp	r3, #1
 801006a:	d105      	bne.n	8010078 <tcp_input+0x25c>
 801006c:	4b0b      	ldr	r3, [pc, #44]	; (801009c <tcp_input+0x280>)
 801006e:	22fd      	movs	r2, #253	; 0xfd
 8010070:	491c      	ldr	r1, [pc, #112]	; (80100e4 <tcp_input+0x2c8>)
 8010072:	480c      	ldr	r0, [pc, #48]	; (80100a4 <tcp_input+0x288>)
 8010074:	f008 fd2c 	bl	8018ad0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010078:	69fb      	ldr	r3, [r7, #28]
 801007a:	7a1b      	ldrb	r3, [r3, #8]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d033      	beq.n	80100e8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010080:	69fb      	ldr	r3, [r7, #28]
 8010082:	7a1a      	ldrb	r2, [r3, #8]
 8010084:	4b09      	ldr	r3, [pc, #36]	; (80100ac <tcp_input+0x290>)
 8010086:	685b      	ldr	r3, [r3, #4]
 8010088:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801008c:	3301      	adds	r3, #1
 801008e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010090:	429a      	cmp	r2, r3
 8010092:	d029      	beq.n	80100e8 <tcp_input+0x2cc>
      prev = pcb;
 8010094:	69fb      	ldr	r3, [r7, #28]
 8010096:	61bb      	str	r3, [r7, #24]
      continue;
 8010098:	e06b      	b.n	8010172 <tcp_input+0x356>
 801009a:	bf00      	nop
 801009c:	0801ab30 	.word	0x0801ab30
 80100a0:	0801ab64 	.word	0x0801ab64
 80100a4:	0801ab7c 	.word	0x0801ab7c
 80100a8:	2000048c 	.word	0x2000048c
 80100ac:	20004968 	.word	0x20004968
 80100b0:	20000490 	.word	0x20000490
 80100b4:	20000494 	.word	0x20000494
 80100b8:	20000492 	.word	0x20000492
 80100bc:	0801aba4 	.word	0x0801aba4
 80100c0:	0801abb4 	.word	0x0801abb4
 80100c4:	0801abc0 	.word	0x0801abc0
 80100c8:	2000049c 	.word	0x2000049c
 80100cc:	200004a0 	.word	0x200004a0
 80100d0:	200004a8 	.word	0x200004a8
 80100d4:	200004a6 	.word	0x200004a6
 80100d8:	20007ecc 	.word	0x20007ecc
 80100dc:	0801abe0 	.word	0x0801abe0
 80100e0:	0801ac08 	.word	0x0801ac08
 80100e4:	0801ac34 	.word	0x0801ac34
    }

    if (pcb->remote_port == tcphdr->src &&
 80100e8:	69fb      	ldr	r3, [r7, #28]
 80100ea:	8b1a      	ldrh	r2, [r3, #24]
 80100ec:	4b94      	ldr	r3, [pc, #592]	; (8010340 <tcp_input+0x524>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	881b      	ldrh	r3, [r3, #0]
 80100f2:	b29b      	uxth	r3, r3
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d13a      	bne.n	801016e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80100f8:	69fb      	ldr	r3, [r7, #28]
 80100fa:	8ada      	ldrh	r2, [r3, #22]
 80100fc:	4b90      	ldr	r3, [pc, #576]	; (8010340 <tcp_input+0x524>)
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	885b      	ldrh	r3, [r3, #2]
 8010102:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010104:	429a      	cmp	r2, r3
 8010106:	d132      	bne.n	801016e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010108:	69fb      	ldr	r3, [r7, #28]
 801010a:	685a      	ldr	r2, [r3, #4]
 801010c:	4b8d      	ldr	r3, [pc, #564]	; (8010344 <tcp_input+0x528>)
 801010e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010110:	429a      	cmp	r2, r3
 8010112:	d12c      	bne.n	801016e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010114:	69fb      	ldr	r3, [r7, #28]
 8010116:	681a      	ldr	r2, [r3, #0]
 8010118:	4b8a      	ldr	r3, [pc, #552]	; (8010344 <tcp_input+0x528>)
 801011a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801011c:	429a      	cmp	r2, r3
 801011e:	d126      	bne.n	801016e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010120:	69fb      	ldr	r3, [r7, #28]
 8010122:	68db      	ldr	r3, [r3, #12]
 8010124:	69fa      	ldr	r2, [r7, #28]
 8010126:	429a      	cmp	r2, r3
 8010128:	d106      	bne.n	8010138 <tcp_input+0x31c>
 801012a:	4b87      	ldr	r3, [pc, #540]	; (8010348 <tcp_input+0x52c>)
 801012c:	f240 120d 	movw	r2, #269	; 0x10d
 8010130:	4986      	ldr	r1, [pc, #536]	; (801034c <tcp_input+0x530>)
 8010132:	4887      	ldr	r0, [pc, #540]	; (8010350 <tcp_input+0x534>)
 8010134:	f008 fccc 	bl	8018ad0 <iprintf>
      if (prev != NULL) {
 8010138:	69bb      	ldr	r3, [r7, #24]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d00a      	beq.n	8010154 <tcp_input+0x338>
        prev->next = pcb->next;
 801013e:	69fb      	ldr	r3, [r7, #28]
 8010140:	68da      	ldr	r2, [r3, #12]
 8010142:	69bb      	ldr	r3, [r7, #24]
 8010144:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010146:	4b83      	ldr	r3, [pc, #524]	; (8010354 <tcp_input+0x538>)
 8010148:	681a      	ldr	r2, [r3, #0]
 801014a:	69fb      	ldr	r3, [r7, #28]
 801014c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801014e:	4a81      	ldr	r2, [pc, #516]	; (8010354 <tcp_input+0x538>)
 8010150:	69fb      	ldr	r3, [r7, #28]
 8010152:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010154:	69fb      	ldr	r3, [r7, #28]
 8010156:	68db      	ldr	r3, [r3, #12]
 8010158:	69fa      	ldr	r2, [r7, #28]
 801015a:	429a      	cmp	r2, r3
 801015c:	d111      	bne.n	8010182 <tcp_input+0x366>
 801015e:	4b7a      	ldr	r3, [pc, #488]	; (8010348 <tcp_input+0x52c>)
 8010160:	f240 1215 	movw	r2, #277	; 0x115
 8010164:	497c      	ldr	r1, [pc, #496]	; (8010358 <tcp_input+0x53c>)
 8010166:	487a      	ldr	r0, [pc, #488]	; (8010350 <tcp_input+0x534>)
 8010168:	f008 fcb2 	bl	8018ad0 <iprintf>
      break;
 801016c:	e009      	b.n	8010182 <tcp_input+0x366>
    }
    prev = pcb;
 801016e:	69fb      	ldr	r3, [r7, #28]
 8010170:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010172:	69fb      	ldr	r3, [r7, #28]
 8010174:	68db      	ldr	r3, [r3, #12]
 8010176:	61fb      	str	r3, [r7, #28]
 8010178:	69fb      	ldr	r3, [r7, #28]
 801017a:	2b00      	cmp	r3, #0
 801017c:	f47f af5e 	bne.w	801003c <tcp_input+0x220>
 8010180:	e000      	b.n	8010184 <tcp_input+0x368>
      break;
 8010182:	bf00      	nop
  }

  if (pcb == NULL) {
 8010184:	69fb      	ldr	r3, [r7, #28]
 8010186:	2b00      	cmp	r3, #0
 8010188:	f040 8095 	bne.w	80102b6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801018c:	4b73      	ldr	r3, [pc, #460]	; (801035c <tcp_input+0x540>)
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	61fb      	str	r3, [r7, #28]
 8010192:	e03f      	b.n	8010214 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010194:	69fb      	ldr	r3, [r7, #28]
 8010196:	7d1b      	ldrb	r3, [r3, #20]
 8010198:	2b0a      	cmp	r3, #10
 801019a:	d006      	beq.n	80101aa <tcp_input+0x38e>
 801019c:	4b6a      	ldr	r3, [pc, #424]	; (8010348 <tcp_input+0x52c>)
 801019e:	f240 121f 	movw	r2, #287	; 0x11f
 80101a2:	496f      	ldr	r1, [pc, #444]	; (8010360 <tcp_input+0x544>)
 80101a4:	486a      	ldr	r0, [pc, #424]	; (8010350 <tcp_input+0x534>)
 80101a6:	f008 fc93 	bl	8018ad0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80101aa:	69fb      	ldr	r3, [r7, #28]
 80101ac:	7a1b      	ldrb	r3, [r3, #8]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d009      	beq.n	80101c6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80101b2:	69fb      	ldr	r3, [r7, #28]
 80101b4:	7a1a      	ldrb	r2, [r3, #8]
 80101b6:	4b63      	ldr	r3, [pc, #396]	; (8010344 <tcp_input+0x528>)
 80101b8:	685b      	ldr	r3, [r3, #4]
 80101ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80101be:	3301      	adds	r3, #1
 80101c0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80101c2:	429a      	cmp	r2, r3
 80101c4:	d122      	bne.n	801020c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80101c6:	69fb      	ldr	r3, [r7, #28]
 80101c8:	8b1a      	ldrh	r2, [r3, #24]
 80101ca:	4b5d      	ldr	r3, [pc, #372]	; (8010340 <tcp_input+0x524>)
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	881b      	ldrh	r3, [r3, #0]
 80101d0:	b29b      	uxth	r3, r3
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d11b      	bne.n	801020e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80101d6:	69fb      	ldr	r3, [r7, #28]
 80101d8:	8ada      	ldrh	r2, [r3, #22]
 80101da:	4b59      	ldr	r3, [pc, #356]	; (8010340 <tcp_input+0x524>)
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	885b      	ldrh	r3, [r3, #2]
 80101e0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80101e2:	429a      	cmp	r2, r3
 80101e4:	d113      	bne.n	801020e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80101e6:	69fb      	ldr	r3, [r7, #28]
 80101e8:	685a      	ldr	r2, [r3, #4]
 80101ea:	4b56      	ldr	r3, [pc, #344]	; (8010344 <tcp_input+0x528>)
 80101ec:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80101ee:	429a      	cmp	r2, r3
 80101f0:	d10d      	bne.n	801020e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80101f2:	69fb      	ldr	r3, [r7, #28]
 80101f4:	681a      	ldr	r2, [r3, #0]
 80101f6:	4b53      	ldr	r3, [pc, #332]	; (8010344 <tcp_input+0x528>)
 80101f8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80101fa:	429a      	cmp	r2, r3
 80101fc:	d107      	bne.n	801020e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80101fe:	69f8      	ldr	r0, [r7, #28]
 8010200:	f000 fb52 	bl	80108a8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010204:	6878      	ldr	r0, [r7, #4]
 8010206:	f7fd ffdd 	bl	800e1c4 <pbuf_free>
        return;
 801020a:	e1ee      	b.n	80105ea <tcp_input+0x7ce>
        continue;
 801020c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801020e:	69fb      	ldr	r3, [r7, #28]
 8010210:	68db      	ldr	r3, [r3, #12]
 8010212:	61fb      	str	r3, [r7, #28]
 8010214:	69fb      	ldr	r3, [r7, #28]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d1bc      	bne.n	8010194 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801021a:	2300      	movs	r3, #0
 801021c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801021e:	4b51      	ldr	r3, [pc, #324]	; (8010364 <tcp_input+0x548>)
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	617b      	str	r3, [r7, #20]
 8010224:	e02a      	b.n	801027c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010226:	697b      	ldr	r3, [r7, #20]
 8010228:	7a1b      	ldrb	r3, [r3, #8]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d00c      	beq.n	8010248 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801022e:	697b      	ldr	r3, [r7, #20]
 8010230:	7a1a      	ldrb	r2, [r3, #8]
 8010232:	4b44      	ldr	r3, [pc, #272]	; (8010344 <tcp_input+0x528>)
 8010234:	685b      	ldr	r3, [r3, #4]
 8010236:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801023a:	3301      	adds	r3, #1
 801023c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801023e:	429a      	cmp	r2, r3
 8010240:	d002      	beq.n	8010248 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010242:	697b      	ldr	r3, [r7, #20]
 8010244:	61bb      	str	r3, [r7, #24]
        continue;
 8010246:	e016      	b.n	8010276 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010248:	697b      	ldr	r3, [r7, #20]
 801024a:	8ada      	ldrh	r2, [r3, #22]
 801024c:	4b3c      	ldr	r3, [pc, #240]	; (8010340 <tcp_input+0x524>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	885b      	ldrh	r3, [r3, #2]
 8010252:	b29b      	uxth	r3, r3
 8010254:	429a      	cmp	r2, r3
 8010256:	d10c      	bne.n	8010272 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	681a      	ldr	r2, [r3, #0]
 801025c:	4b39      	ldr	r3, [pc, #228]	; (8010344 <tcp_input+0x528>)
 801025e:	695b      	ldr	r3, [r3, #20]
 8010260:	429a      	cmp	r2, r3
 8010262:	d00f      	beq.n	8010284 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010264:	697b      	ldr	r3, [r7, #20]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d00d      	beq.n	8010286 <tcp_input+0x46a>
 801026a:	697b      	ldr	r3, [r7, #20]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d009      	beq.n	8010286 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010272:	697b      	ldr	r3, [r7, #20]
 8010274:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010276:	697b      	ldr	r3, [r7, #20]
 8010278:	68db      	ldr	r3, [r3, #12]
 801027a:	617b      	str	r3, [r7, #20]
 801027c:	697b      	ldr	r3, [r7, #20]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d1d1      	bne.n	8010226 <tcp_input+0x40a>
 8010282:	e000      	b.n	8010286 <tcp_input+0x46a>
            break;
 8010284:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d014      	beq.n	80102b6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801028c:	69bb      	ldr	r3, [r7, #24]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d00a      	beq.n	80102a8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010292:	697b      	ldr	r3, [r7, #20]
 8010294:	68da      	ldr	r2, [r3, #12]
 8010296:	69bb      	ldr	r3, [r7, #24]
 8010298:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801029a:	4b32      	ldr	r3, [pc, #200]	; (8010364 <tcp_input+0x548>)
 801029c:	681a      	ldr	r2, [r3, #0]
 801029e:	697b      	ldr	r3, [r7, #20]
 80102a0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80102a2:	4a30      	ldr	r2, [pc, #192]	; (8010364 <tcp_input+0x548>)
 80102a4:	697b      	ldr	r3, [r7, #20]
 80102a6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80102a8:	6978      	ldr	r0, [r7, #20]
 80102aa:	f000 f9ff 	bl	80106ac <tcp_listen_input>
      }
      pbuf_free(p);
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	f7fd ff88 	bl	800e1c4 <pbuf_free>
      return;
 80102b4:	e199      	b.n	80105ea <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80102b6:	69fb      	ldr	r3, [r7, #28]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	f000 8160 	beq.w	801057e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80102be:	4b2a      	ldr	r3, [pc, #168]	; (8010368 <tcp_input+0x54c>)
 80102c0:	2200      	movs	r2, #0
 80102c2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	891a      	ldrh	r2, [r3, #8]
 80102c8:	4b27      	ldr	r3, [pc, #156]	; (8010368 <tcp_input+0x54c>)
 80102ca:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80102cc:	4a26      	ldr	r2, [pc, #152]	; (8010368 <tcp_input+0x54c>)
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80102d2:	4b1b      	ldr	r3, [pc, #108]	; (8010340 <tcp_input+0x524>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	4a24      	ldr	r2, [pc, #144]	; (8010368 <tcp_input+0x54c>)
 80102d8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80102da:	4b24      	ldr	r3, [pc, #144]	; (801036c <tcp_input+0x550>)
 80102dc:	2200      	movs	r2, #0
 80102de:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80102e0:	4b23      	ldr	r3, [pc, #140]	; (8010370 <tcp_input+0x554>)
 80102e2:	2200      	movs	r2, #0
 80102e4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80102e6:	4b23      	ldr	r3, [pc, #140]	; (8010374 <tcp_input+0x558>)
 80102e8:	2200      	movs	r2, #0
 80102ea:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80102ec:	4b22      	ldr	r3, [pc, #136]	; (8010378 <tcp_input+0x55c>)
 80102ee:	781b      	ldrb	r3, [r3, #0]
 80102f0:	f003 0308 	and.w	r3, r3, #8
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d006      	beq.n	8010306 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	7b5b      	ldrb	r3, [r3, #13]
 80102fc:	f043 0301 	orr.w	r3, r3, #1
 8010300:	b2da      	uxtb	r2, r3
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010306:	69fb      	ldr	r3, [r7, #28]
 8010308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801030a:	2b00      	cmp	r3, #0
 801030c:	d038      	beq.n	8010380 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801030e:	69f8      	ldr	r0, [r7, #28]
 8010310:	f7ff f940 	bl	800f594 <tcp_process_refused_data>
 8010314:	4603      	mov	r3, r0
 8010316:	f113 0f0d 	cmn.w	r3, #13
 801031a:	d007      	beq.n	801032c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801031c:	69fb      	ldr	r3, [r7, #28]
 801031e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010320:	2b00      	cmp	r3, #0
 8010322:	d02d      	beq.n	8010380 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010324:	4b15      	ldr	r3, [pc, #84]	; (801037c <tcp_input+0x560>)
 8010326:	881b      	ldrh	r3, [r3, #0]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d029      	beq.n	8010380 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801032c:	69fb      	ldr	r3, [r7, #28]
 801032e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010330:	2b00      	cmp	r3, #0
 8010332:	f040 8104 	bne.w	801053e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010336:	69f8      	ldr	r0, [r7, #28]
 8010338:	f003 f9cc 	bl	80136d4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801033c:	e0ff      	b.n	801053e <tcp_input+0x722>
 801033e:	bf00      	nop
 8010340:	2000048c 	.word	0x2000048c
 8010344:	20004968 	.word	0x20004968
 8010348:	0801ab30 	.word	0x0801ab30
 801034c:	0801ac5c 	.word	0x0801ac5c
 8010350:	0801ab7c 	.word	0x0801ab7c
 8010354:	20007ecc 	.word	0x20007ecc
 8010358:	0801ac88 	.word	0x0801ac88
 801035c:	20007edc 	.word	0x20007edc
 8010360:	0801acb4 	.word	0x0801acb4
 8010364:	20007ed4 	.word	0x20007ed4
 8010368:	2000047c 	.word	0x2000047c
 801036c:	200004ac 	.word	0x200004ac
 8010370:	200004a9 	.word	0x200004a9
 8010374:	200004a4 	.word	0x200004a4
 8010378:	200004a8 	.word	0x200004a8
 801037c:	200004a6 	.word	0x200004a6
      }
    }
    tcp_input_pcb = pcb;
 8010380:	4a9b      	ldr	r2, [pc, #620]	; (80105f0 <tcp_input+0x7d4>)
 8010382:	69fb      	ldr	r3, [r7, #28]
 8010384:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010386:	69f8      	ldr	r0, [r7, #28]
 8010388:	f000 fb0a 	bl	80109a0 <tcp_process>
 801038c:	4603      	mov	r3, r0
 801038e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010390:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010394:	f113 0f0d 	cmn.w	r3, #13
 8010398:	f000 80d3 	beq.w	8010542 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 801039c:	4b95      	ldr	r3, [pc, #596]	; (80105f4 <tcp_input+0x7d8>)
 801039e:	781b      	ldrb	r3, [r3, #0]
 80103a0:	f003 0308 	and.w	r3, r3, #8
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d015      	beq.n	80103d4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80103a8:	69fb      	ldr	r3, [r7, #28]
 80103aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d008      	beq.n	80103c4 <tcp_input+0x5a8>
 80103b2:	69fb      	ldr	r3, [r7, #28]
 80103b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103b8:	69fa      	ldr	r2, [r7, #28]
 80103ba:	6912      	ldr	r2, [r2, #16]
 80103bc:	f06f 010d 	mvn.w	r1, #13
 80103c0:	4610      	mov	r0, r2
 80103c2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80103c4:	69f9      	ldr	r1, [r7, #28]
 80103c6:	488c      	ldr	r0, [pc, #560]	; (80105f8 <tcp_input+0x7dc>)
 80103c8:	f7ff fbb0 	bl	800fb2c <tcp_pcb_remove>
        tcp_free(pcb);
 80103cc:	69f8      	ldr	r0, [r7, #28]
 80103ce:	f7fe f9a9 	bl	800e724 <tcp_free>
 80103d2:	e0c1      	b.n	8010558 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80103d4:	2300      	movs	r3, #0
 80103d6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80103d8:	4b88      	ldr	r3, [pc, #544]	; (80105fc <tcp_input+0x7e0>)
 80103da:	881b      	ldrh	r3, [r3, #0]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d01d      	beq.n	801041c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80103e0:	4b86      	ldr	r3, [pc, #536]	; (80105fc <tcp_input+0x7e0>)
 80103e2:	881b      	ldrh	r3, [r3, #0]
 80103e4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80103e6:	69fb      	ldr	r3, [r7, #28]
 80103e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d00a      	beq.n	8010406 <tcp_input+0x5ea>
 80103f0:	69fb      	ldr	r3, [r7, #28]
 80103f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103f6:	69fa      	ldr	r2, [r7, #28]
 80103f8:	6910      	ldr	r0, [r2, #16]
 80103fa:	89fa      	ldrh	r2, [r7, #14]
 80103fc:	69f9      	ldr	r1, [r7, #28]
 80103fe:	4798      	blx	r3
 8010400:	4603      	mov	r3, r0
 8010402:	74fb      	strb	r3, [r7, #19]
 8010404:	e001      	b.n	801040a <tcp_input+0x5ee>
 8010406:	2300      	movs	r3, #0
 8010408:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801040a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801040e:	f113 0f0d 	cmn.w	r3, #13
 8010412:	f000 8098 	beq.w	8010546 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010416:	4b79      	ldr	r3, [pc, #484]	; (80105fc <tcp_input+0x7e0>)
 8010418:	2200      	movs	r2, #0
 801041a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801041c:	69f8      	ldr	r0, [r7, #28]
 801041e:	f000 f905 	bl	801062c <tcp_input_delayed_close>
 8010422:	4603      	mov	r3, r0
 8010424:	2b00      	cmp	r3, #0
 8010426:	f040 8090 	bne.w	801054a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801042a:	4b75      	ldr	r3, [pc, #468]	; (8010600 <tcp_input+0x7e4>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d041      	beq.n	80104b6 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010432:	69fb      	ldr	r3, [r7, #28]
 8010434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010436:	2b00      	cmp	r3, #0
 8010438:	d006      	beq.n	8010448 <tcp_input+0x62c>
 801043a:	4b72      	ldr	r3, [pc, #456]	; (8010604 <tcp_input+0x7e8>)
 801043c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010440:	4971      	ldr	r1, [pc, #452]	; (8010608 <tcp_input+0x7ec>)
 8010442:	4872      	ldr	r0, [pc, #456]	; (801060c <tcp_input+0x7f0>)
 8010444:	f008 fb44 	bl	8018ad0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010448:	69fb      	ldr	r3, [r7, #28]
 801044a:	8b5b      	ldrh	r3, [r3, #26]
 801044c:	f003 0310 	and.w	r3, r3, #16
 8010450:	2b00      	cmp	r3, #0
 8010452:	d008      	beq.n	8010466 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010454:	4b6a      	ldr	r3, [pc, #424]	; (8010600 <tcp_input+0x7e4>)
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	4618      	mov	r0, r3
 801045a:	f7fd feb3 	bl	800e1c4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801045e:	69f8      	ldr	r0, [r7, #28]
 8010460:	f7fe fc40 	bl	800ece4 <tcp_abort>
            goto aborted;
 8010464:	e078      	b.n	8010558 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010466:	69fb      	ldr	r3, [r7, #28]
 8010468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801046c:	2b00      	cmp	r3, #0
 801046e:	d00c      	beq.n	801048a <tcp_input+0x66e>
 8010470:	69fb      	ldr	r3, [r7, #28]
 8010472:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010476:	69fb      	ldr	r3, [r7, #28]
 8010478:	6918      	ldr	r0, [r3, #16]
 801047a:	4b61      	ldr	r3, [pc, #388]	; (8010600 <tcp_input+0x7e4>)
 801047c:	681a      	ldr	r2, [r3, #0]
 801047e:	2300      	movs	r3, #0
 8010480:	69f9      	ldr	r1, [r7, #28]
 8010482:	47a0      	blx	r4
 8010484:	4603      	mov	r3, r0
 8010486:	74fb      	strb	r3, [r7, #19]
 8010488:	e008      	b.n	801049c <tcp_input+0x680>
 801048a:	4b5d      	ldr	r3, [pc, #372]	; (8010600 <tcp_input+0x7e4>)
 801048c:	681a      	ldr	r2, [r3, #0]
 801048e:	2300      	movs	r3, #0
 8010490:	69f9      	ldr	r1, [r7, #28]
 8010492:	2000      	movs	r0, #0
 8010494:	f7ff f952 	bl	800f73c <tcp_recv_null>
 8010498:	4603      	mov	r3, r0
 801049a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801049c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80104a0:	f113 0f0d 	cmn.w	r3, #13
 80104a4:	d053      	beq.n	801054e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80104a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d003      	beq.n	80104b6 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80104ae:	4b54      	ldr	r3, [pc, #336]	; (8010600 <tcp_input+0x7e4>)
 80104b0:	681a      	ldr	r2, [r3, #0]
 80104b2:	69fb      	ldr	r3, [r7, #28]
 80104b4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80104b6:	4b4f      	ldr	r3, [pc, #316]	; (80105f4 <tcp_input+0x7d8>)
 80104b8:	781b      	ldrb	r3, [r3, #0]
 80104ba:	f003 0320 	and.w	r3, r3, #32
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d030      	beq.n	8010524 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80104c2:	69fb      	ldr	r3, [r7, #28]
 80104c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d009      	beq.n	80104de <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80104ca:	69fb      	ldr	r3, [r7, #28]
 80104cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80104ce:	7b5a      	ldrb	r2, [r3, #13]
 80104d0:	69fb      	ldr	r3, [r7, #28]
 80104d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80104d4:	f042 0220 	orr.w	r2, r2, #32
 80104d8:	b2d2      	uxtb	r2, r2
 80104da:	735a      	strb	r2, [r3, #13]
 80104dc:	e022      	b.n	8010524 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80104de:	69fb      	ldr	r3, [r7, #28]
 80104e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80104e2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80104e6:	d005      	beq.n	80104f4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80104e8:	69fb      	ldr	r3, [r7, #28]
 80104ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80104ec:	3301      	adds	r3, #1
 80104ee:	b29a      	uxth	r2, r3
 80104f0:	69fb      	ldr	r3, [r7, #28]
 80104f2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80104f4:	69fb      	ldr	r3, [r7, #28]
 80104f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d00b      	beq.n	8010516 <tcp_input+0x6fa>
 80104fe:	69fb      	ldr	r3, [r7, #28]
 8010500:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010504:	69fb      	ldr	r3, [r7, #28]
 8010506:	6918      	ldr	r0, [r3, #16]
 8010508:	2300      	movs	r3, #0
 801050a:	2200      	movs	r2, #0
 801050c:	69f9      	ldr	r1, [r7, #28]
 801050e:	47a0      	blx	r4
 8010510:	4603      	mov	r3, r0
 8010512:	74fb      	strb	r3, [r7, #19]
 8010514:	e001      	b.n	801051a <tcp_input+0x6fe>
 8010516:	2300      	movs	r3, #0
 8010518:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801051a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801051e:	f113 0f0d 	cmn.w	r3, #13
 8010522:	d016      	beq.n	8010552 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010524:	4b32      	ldr	r3, [pc, #200]	; (80105f0 <tcp_input+0x7d4>)
 8010526:	2200      	movs	r2, #0
 8010528:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801052a:	69f8      	ldr	r0, [r7, #28]
 801052c:	f000 f87e 	bl	801062c <tcp_input_delayed_close>
 8010530:	4603      	mov	r3, r0
 8010532:	2b00      	cmp	r3, #0
 8010534:	d10f      	bne.n	8010556 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010536:	69f8      	ldr	r0, [r7, #28]
 8010538:	f002 fab6 	bl	8012aa8 <tcp_output>
 801053c:	e00c      	b.n	8010558 <tcp_input+0x73c>
        goto aborted;
 801053e:	bf00      	nop
 8010540:	e00a      	b.n	8010558 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010542:	bf00      	nop
 8010544:	e008      	b.n	8010558 <tcp_input+0x73c>
              goto aborted;
 8010546:	bf00      	nop
 8010548:	e006      	b.n	8010558 <tcp_input+0x73c>
          goto aborted;
 801054a:	bf00      	nop
 801054c:	e004      	b.n	8010558 <tcp_input+0x73c>
            goto aborted;
 801054e:	bf00      	nop
 8010550:	e002      	b.n	8010558 <tcp_input+0x73c>
              goto aborted;
 8010552:	bf00      	nop
 8010554:	e000      	b.n	8010558 <tcp_input+0x73c>
          goto aborted;
 8010556:	bf00      	nop
    tcp_input_pcb = NULL;
 8010558:	4b25      	ldr	r3, [pc, #148]	; (80105f0 <tcp_input+0x7d4>)
 801055a:	2200      	movs	r2, #0
 801055c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801055e:	4b28      	ldr	r3, [pc, #160]	; (8010600 <tcp_input+0x7e4>)
 8010560:	2200      	movs	r2, #0
 8010562:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010564:	4b2a      	ldr	r3, [pc, #168]	; (8010610 <tcp_input+0x7f4>)
 8010566:	685b      	ldr	r3, [r3, #4]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d03d      	beq.n	80105e8 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 801056c:	4b28      	ldr	r3, [pc, #160]	; (8010610 <tcp_input+0x7f4>)
 801056e:	685b      	ldr	r3, [r3, #4]
 8010570:	4618      	mov	r0, r3
 8010572:	f7fd fe27 	bl	800e1c4 <pbuf_free>
      inseg.p = NULL;
 8010576:	4b26      	ldr	r3, [pc, #152]	; (8010610 <tcp_input+0x7f4>)
 8010578:	2200      	movs	r2, #0
 801057a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801057c:	e034      	b.n	80105e8 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801057e:	4b25      	ldr	r3, [pc, #148]	; (8010614 <tcp_input+0x7f8>)
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	899b      	ldrh	r3, [r3, #12]
 8010584:	b29b      	uxth	r3, r3
 8010586:	4618      	mov	r0, r3
 8010588:	f7fc fb7b 	bl	800cc82 <lwip_htons>
 801058c:	4603      	mov	r3, r0
 801058e:	b2db      	uxtb	r3, r3
 8010590:	f003 0304 	and.w	r3, r3, #4
 8010594:	2b00      	cmp	r3, #0
 8010596:	d118      	bne.n	80105ca <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010598:	4b1f      	ldr	r3, [pc, #124]	; (8010618 <tcp_input+0x7fc>)
 801059a:	6819      	ldr	r1, [r3, #0]
 801059c:	4b1f      	ldr	r3, [pc, #124]	; (801061c <tcp_input+0x800>)
 801059e:	881b      	ldrh	r3, [r3, #0]
 80105a0:	461a      	mov	r2, r3
 80105a2:	4b1f      	ldr	r3, [pc, #124]	; (8010620 <tcp_input+0x804>)
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80105a8:	4b1a      	ldr	r3, [pc, #104]	; (8010614 <tcp_input+0x7f8>)
 80105aa:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105ac:	885b      	ldrh	r3, [r3, #2]
 80105ae:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80105b0:	4a18      	ldr	r2, [pc, #96]	; (8010614 <tcp_input+0x7f8>)
 80105b2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105b4:	8812      	ldrh	r2, [r2, #0]
 80105b6:	b292      	uxth	r2, r2
 80105b8:	9202      	str	r2, [sp, #8]
 80105ba:	9301      	str	r3, [sp, #4]
 80105bc:	4b19      	ldr	r3, [pc, #100]	; (8010624 <tcp_input+0x808>)
 80105be:	9300      	str	r3, [sp, #0]
 80105c0:	4b19      	ldr	r3, [pc, #100]	; (8010628 <tcp_input+0x80c>)
 80105c2:	4602      	mov	r2, r0
 80105c4:	2000      	movs	r0, #0
 80105c6:	f003 f833 	bl	8013630 <tcp_rst>
    pbuf_free(p);
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f7fd fdfa 	bl	800e1c4 <pbuf_free>
  return;
 80105d0:	e00a      	b.n	80105e8 <tcp_input+0x7cc>
    goto dropped;
 80105d2:	bf00      	nop
 80105d4:	e004      	b.n	80105e0 <tcp_input+0x7c4>
dropped:
 80105d6:	bf00      	nop
 80105d8:	e002      	b.n	80105e0 <tcp_input+0x7c4>
      goto dropped;
 80105da:	bf00      	nop
 80105dc:	e000      	b.n	80105e0 <tcp_input+0x7c4>
      goto dropped;
 80105de:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80105e0:	6878      	ldr	r0, [r7, #4]
 80105e2:	f7fd fdef 	bl	800e1c4 <pbuf_free>
 80105e6:	e000      	b.n	80105ea <tcp_input+0x7ce>
  return;
 80105e8:	bf00      	nop
}
 80105ea:	3724      	adds	r7, #36	; 0x24
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd90      	pop	{r4, r7, pc}
 80105f0:	20007ee0 	.word	0x20007ee0
 80105f4:	200004a9 	.word	0x200004a9
 80105f8:	20007ecc 	.word	0x20007ecc
 80105fc:	200004a4 	.word	0x200004a4
 8010600:	200004ac 	.word	0x200004ac
 8010604:	0801ab30 	.word	0x0801ab30
 8010608:	0801ace4 	.word	0x0801ace4
 801060c:	0801ab7c 	.word	0x0801ab7c
 8010610:	2000047c 	.word	0x2000047c
 8010614:	2000048c 	.word	0x2000048c
 8010618:	200004a0 	.word	0x200004a0
 801061c:	200004a6 	.word	0x200004a6
 8010620:	2000049c 	.word	0x2000049c
 8010624:	20004978 	.word	0x20004978
 8010628:	2000497c 	.word	0x2000497c

0801062c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b082      	sub	sp, #8
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d106      	bne.n	8010648 <tcp_input_delayed_close+0x1c>
 801063a:	4b17      	ldr	r3, [pc, #92]	; (8010698 <tcp_input_delayed_close+0x6c>)
 801063c:	f240 225a 	movw	r2, #602	; 0x25a
 8010640:	4916      	ldr	r1, [pc, #88]	; (801069c <tcp_input_delayed_close+0x70>)
 8010642:	4817      	ldr	r0, [pc, #92]	; (80106a0 <tcp_input_delayed_close+0x74>)
 8010644:	f008 fa44 	bl	8018ad0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010648:	4b16      	ldr	r3, [pc, #88]	; (80106a4 <tcp_input_delayed_close+0x78>)
 801064a:	781b      	ldrb	r3, [r3, #0]
 801064c:	f003 0310 	and.w	r3, r3, #16
 8010650:	2b00      	cmp	r3, #0
 8010652:	d01c      	beq.n	801068e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	8b5b      	ldrh	r3, [r3, #26]
 8010658:	f003 0310 	and.w	r3, r3, #16
 801065c:	2b00      	cmp	r3, #0
 801065e:	d10d      	bne.n	801067c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010666:	2b00      	cmp	r3, #0
 8010668:	d008      	beq.n	801067c <tcp_input_delayed_close+0x50>
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010670:	687a      	ldr	r2, [r7, #4]
 8010672:	6912      	ldr	r2, [r2, #16]
 8010674:	f06f 010e 	mvn.w	r1, #14
 8010678:	4610      	mov	r0, r2
 801067a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801067c:	6879      	ldr	r1, [r7, #4]
 801067e:	480a      	ldr	r0, [pc, #40]	; (80106a8 <tcp_input_delayed_close+0x7c>)
 8010680:	f7ff fa54 	bl	800fb2c <tcp_pcb_remove>
    tcp_free(pcb);
 8010684:	6878      	ldr	r0, [r7, #4]
 8010686:	f7fe f84d 	bl	800e724 <tcp_free>
    return 1;
 801068a:	2301      	movs	r3, #1
 801068c:	e000      	b.n	8010690 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801068e:	2300      	movs	r3, #0
}
 8010690:	4618      	mov	r0, r3
 8010692:	3708      	adds	r7, #8
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}
 8010698:	0801ab30 	.word	0x0801ab30
 801069c:	0801ad00 	.word	0x0801ad00
 80106a0:	0801ab7c 	.word	0x0801ab7c
 80106a4:	200004a9 	.word	0x200004a9
 80106a8:	20007ecc 	.word	0x20007ecc

080106ac <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80106ac:	b590      	push	{r4, r7, lr}
 80106ae:	b08b      	sub	sp, #44	; 0x2c
 80106b0:	af04      	add	r7, sp, #16
 80106b2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80106b4:	4b6f      	ldr	r3, [pc, #444]	; (8010874 <tcp_listen_input+0x1c8>)
 80106b6:	781b      	ldrb	r3, [r3, #0]
 80106b8:	f003 0304 	and.w	r3, r3, #4
 80106bc:	2b00      	cmp	r3, #0
 80106be:	f040 80d3 	bne.w	8010868 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d106      	bne.n	80106d6 <tcp_listen_input+0x2a>
 80106c8:	4b6b      	ldr	r3, [pc, #428]	; (8010878 <tcp_listen_input+0x1cc>)
 80106ca:	f240 2281 	movw	r2, #641	; 0x281
 80106ce:	496b      	ldr	r1, [pc, #428]	; (801087c <tcp_listen_input+0x1d0>)
 80106d0:	486b      	ldr	r0, [pc, #428]	; (8010880 <tcp_listen_input+0x1d4>)
 80106d2:	f008 f9fd 	bl	8018ad0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80106d6:	4b67      	ldr	r3, [pc, #412]	; (8010874 <tcp_listen_input+0x1c8>)
 80106d8:	781b      	ldrb	r3, [r3, #0]
 80106da:	f003 0310 	and.w	r3, r3, #16
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d019      	beq.n	8010716 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80106e2:	4b68      	ldr	r3, [pc, #416]	; (8010884 <tcp_listen_input+0x1d8>)
 80106e4:	6819      	ldr	r1, [r3, #0]
 80106e6:	4b68      	ldr	r3, [pc, #416]	; (8010888 <tcp_listen_input+0x1dc>)
 80106e8:	881b      	ldrh	r3, [r3, #0]
 80106ea:	461a      	mov	r2, r3
 80106ec:	4b67      	ldr	r3, [pc, #412]	; (801088c <tcp_listen_input+0x1e0>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80106f2:	4b67      	ldr	r3, [pc, #412]	; (8010890 <tcp_listen_input+0x1e4>)
 80106f4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80106f6:	885b      	ldrh	r3, [r3, #2]
 80106f8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80106fa:	4a65      	ldr	r2, [pc, #404]	; (8010890 <tcp_listen_input+0x1e4>)
 80106fc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80106fe:	8812      	ldrh	r2, [r2, #0]
 8010700:	b292      	uxth	r2, r2
 8010702:	9202      	str	r2, [sp, #8]
 8010704:	9301      	str	r3, [sp, #4]
 8010706:	4b63      	ldr	r3, [pc, #396]	; (8010894 <tcp_listen_input+0x1e8>)
 8010708:	9300      	str	r3, [sp, #0]
 801070a:	4b63      	ldr	r3, [pc, #396]	; (8010898 <tcp_listen_input+0x1ec>)
 801070c:	4602      	mov	r2, r0
 801070e:	6878      	ldr	r0, [r7, #4]
 8010710:	f002 ff8e 	bl	8013630 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010714:	e0aa      	b.n	801086c <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8010716:	4b57      	ldr	r3, [pc, #348]	; (8010874 <tcp_listen_input+0x1c8>)
 8010718:	781b      	ldrb	r3, [r3, #0]
 801071a:	f003 0302 	and.w	r3, r3, #2
 801071e:	2b00      	cmp	r3, #0
 8010720:	f000 80a4 	beq.w	801086c <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	7d5b      	ldrb	r3, [r3, #21]
 8010728:	4618      	mov	r0, r3
 801072a:	f7ff f92b 	bl	800f984 <tcp_alloc>
 801072e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010730:	697b      	ldr	r3, [r7, #20]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d111      	bne.n	801075a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	699b      	ldr	r3, [r3, #24]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d00a      	beq.n	8010754 <tcp_listen_input+0xa8>
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	699b      	ldr	r3, [r3, #24]
 8010742:	687a      	ldr	r2, [r7, #4]
 8010744:	6910      	ldr	r0, [r2, #16]
 8010746:	f04f 32ff 	mov.w	r2, #4294967295
 801074a:	2100      	movs	r1, #0
 801074c:	4798      	blx	r3
 801074e:	4603      	mov	r3, r0
 8010750:	73bb      	strb	r3, [r7, #14]
      return;
 8010752:	e08c      	b.n	801086e <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8010754:	23f0      	movs	r3, #240	; 0xf0
 8010756:	73bb      	strb	r3, [r7, #14]
      return;
 8010758:	e089      	b.n	801086e <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801075a:	4b50      	ldr	r3, [pc, #320]	; (801089c <tcp_listen_input+0x1f0>)
 801075c:	695a      	ldr	r2, [r3, #20]
 801075e:	697b      	ldr	r3, [r7, #20]
 8010760:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8010762:	4b4e      	ldr	r3, [pc, #312]	; (801089c <tcp_listen_input+0x1f0>)
 8010764:	691a      	ldr	r2, [r3, #16]
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	8ada      	ldrh	r2, [r3, #22]
 801076e:	697b      	ldr	r3, [r7, #20]
 8010770:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8010772:	4b47      	ldr	r3, [pc, #284]	; (8010890 <tcp_listen_input+0x1e4>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	881b      	ldrh	r3, [r3, #0]
 8010778:	b29a      	uxth	r2, r3
 801077a:	697b      	ldr	r3, [r7, #20]
 801077c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801077e:	697b      	ldr	r3, [r7, #20]
 8010780:	2203      	movs	r2, #3
 8010782:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8010784:	4b41      	ldr	r3, [pc, #260]	; (801088c <tcp_listen_input+0x1e0>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	1c5a      	adds	r2, r3, #1
 801078a:	697b      	ldr	r3, [r7, #20]
 801078c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801078e:	697b      	ldr	r3, [r7, #20]
 8010790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8010796:	6978      	ldr	r0, [r7, #20]
 8010798:	f7ff fa5c 	bl	800fc54 <tcp_next_iss>
 801079c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	693a      	ldr	r2, [r7, #16]
 80107a2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80107a4:	697b      	ldr	r3, [r7, #20]
 80107a6:	693a      	ldr	r2, [r7, #16]
 80107a8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80107aa:	697b      	ldr	r3, [r7, #20]
 80107ac:	693a      	ldr	r2, [r7, #16]
 80107ae:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80107b0:	697b      	ldr	r3, [r7, #20]
 80107b2:	693a      	ldr	r2, [r7, #16]
 80107b4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80107b6:	4b35      	ldr	r3, [pc, #212]	; (801088c <tcp_listen_input+0x1e0>)
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	1e5a      	subs	r2, r3, #1
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	691a      	ldr	r2, [r3, #16]
 80107c4:	697b      	ldr	r3, [r7, #20]
 80107c6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80107c8:	697b      	ldr	r3, [r7, #20]
 80107ca:	687a      	ldr	r2, [r7, #4]
 80107cc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	7a5b      	ldrb	r3, [r3, #9]
 80107d2:	f003 030c 	and.w	r3, r3, #12
 80107d6:	b2da      	uxtb	r2, r3
 80107d8:	697b      	ldr	r3, [r7, #20]
 80107da:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	7a1a      	ldrb	r2, [r3, #8]
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80107e4:	4b2e      	ldr	r3, [pc, #184]	; (80108a0 <tcp_listen_input+0x1f4>)
 80107e6:	681a      	ldr	r2, [r3, #0]
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	60da      	str	r2, [r3, #12]
 80107ec:	4a2c      	ldr	r2, [pc, #176]	; (80108a0 <tcp_listen_input+0x1f4>)
 80107ee:	697b      	ldr	r3, [r7, #20]
 80107f0:	6013      	str	r3, [r2, #0]
 80107f2:	f003 f8df 	bl	80139b4 <tcp_timer_needed>
 80107f6:	4b2b      	ldr	r3, [pc, #172]	; (80108a4 <tcp_listen_input+0x1f8>)
 80107f8:	2201      	movs	r2, #1
 80107fa:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80107fc:	6978      	ldr	r0, [r7, #20]
 80107fe:	f001 fd8f 	bl	8012320 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010802:	4b23      	ldr	r3, [pc, #140]	; (8010890 <tcp_listen_input+0x1e4>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	89db      	ldrh	r3, [r3, #14]
 8010808:	b29a      	uxth	r2, r3
 801080a:	697b      	ldr	r3, [r7, #20]
 801080c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010810:	697b      	ldr	r3, [r7, #20]
 8010812:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801081c:	697b      	ldr	r3, [r7, #20]
 801081e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010820:	697b      	ldr	r3, [r7, #20]
 8010822:	3304      	adds	r3, #4
 8010824:	4618      	mov	r0, r3
 8010826:	f006 fe57 	bl	80174d8 <ip4_route>
 801082a:	4601      	mov	r1, r0
 801082c:	697b      	ldr	r3, [r7, #20]
 801082e:	3304      	adds	r3, #4
 8010830:	461a      	mov	r2, r3
 8010832:	4620      	mov	r0, r4
 8010834:	f7ff fa34 	bl	800fca0 <tcp_eff_send_mss_netif>
 8010838:	4603      	mov	r3, r0
 801083a:	461a      	mov	r2, r3
 801083c:	697b      	ldr	r3, [r7, #20]
 801083e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010840:	2112      	movs	r1, #18
 8010842:	6978      	ldr	r0, [r7, #20]
 8010844:	f002 f842 	bl	80128cc <tcp_enqueue_flags>
 8010848:	4603      	mov	r3, r0
 801084a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801084c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d004      	beq.n	801085e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8010854:	2100      	movs	r1, #0
 8010856:	6978      	ldr	r0, [r7, #20]
 8010858:	f7fe f986 	bl	800eb68 <tcp_abandon>
      return;
 801085c:	e007      	b.n	801086e <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 801085e:	6978      	ldr	r0, [r7, #20]
 8010860:	f002 f922 	bl	8012aa8 <tcp_output>
  return;
 8010864:	bf00      	nop
 8010866:	e001      	b.n	801086c <tcp_listen_input+0x1c0>
    return;
 8010868:	bf00      	nop
 801086a:	e000      	b.n	801086e <tcp_listen_input+0x1c2>
  return;
 801086c:	bf00      	nop
}
 801086e:	371c      	adds	r7, #28
 8010870:	46bd      	mov	sp, r7
 8010872:	bd90      	pop	{r4, r7, pc}
 8010874:	200004a8 	.word	0x200004a8
 8010878:	0801ab30 	.word	0x0801ab30
 801087c:	0801ad28 	.word	0x0801ad28
 8010880:	0801ab7c 	.word	0x0801ab7c
 8010884:	200004a0 	.word	0x200004a0
 8010888:	200004a6 	.word	0x200004a6
 801088c:	2000049c 	.word	0x2000049c
 8010890:	2000048c 	.word	0x2000048c
 8010894:	20004978 	.word	0x20004978
 8010898:	2000497c 	.word	0x2000497c
 801089c:	20004968 	.word	0x20004968
 80108a0:	20007ecc 	.word	0x20007ecc
 80108a4:	20007ec8 	.word	0x20007ec8

080108a8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b086      	sub	sp, #24
 80108ac:	af04      	add	r7, sp, #16
 80108ae:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80108b0:	4b30      	ldr	r3, [pc, #192]	; (8010974 <tcp_timewait_input+0xcc>)
 80108b2:	781b      	ldrb	r3, [r3, #0]
 80108b4:	f003 0304 	and.w	r3, r3, #4
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d154      	bne.n	8010966 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d106      	bne.n	80108d0 <tcp_timewait_input+0x28>
 80108c2:	4b2d      	ldr	r3, [pc, #180]	; (8010978 <tcp_timewait_input+0xd0>)
 80108c4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80108c8:	492c      	ldr	r1, [pc, #176]	; (801097c <tcp_timewait_input+0xd4>)
 80108ca:	482d      	ldr	r0, [pc, #180]	; (8010980 <tcp_timewait_input+0xd8>)
 80108cc:	f008 f900 	bl	8018ad0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80108d0:	4b28      	ldr	r3, [pc, #160]	; (8010974 <tcp_timewait_input+0xcc>)
 80108d2:	781b      	ldrb	r3, [r3, #0]
 80108d4:	f003 0302 	and.w	r3, r3, #2
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d02a      	beq.n	8010932 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80108dc:	4b29      	ldr	r3, [pc, #164]	; (8010984 <tcp_timewait_input+0xdc>)
 80108de:	681a      	ldr	r2, [r3, #0]
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108e4:	1ad3      	subs	r3, r2, r3
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	db2d      	blt.n	8010946 <tcp_timewait_input+0x9e>
 80108ea:	4b26      	ldr	r3, [pc, #152]	; (8010984 <tcp_timewait_input+0xdc>)
 80108ec:	681a      	ldr	r2, [r3, #0]
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108f2:	6879      	ldr	r1, [r7, #4]
 80108f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80108f6:	440b      	add	r3, r1
 80108f8:	1ad3      	subs	r3, r2, r3
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	dc23      	bgt.n	8010946 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108fe:	4b22      	ldr	r3, [pc, #136]	; (8010988 <tcp_timewait_input+0xe0>)
 8010900:	6819      	ldr	r1, [r3, #0]
 8010902:	4b22      	ldr	r3, [pc, #136]	; (801098c <tcp_timewait_input+0xe4>)
 8010904:	881b      	ldrh	r3, [r3, #0]
 8010906:	461a      	mov	r2, r3
 8010908:	4b1e      	ldr	r3, [pc, #120]	; (8010984 <tcp_timewait_input+0xdc>)
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801090e:	4b20      	ldr	r3, [pc, #128]	; (8010990 <tcp_timewait_input+0xe8>)
 8010910:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010912:	885b      	ldrh	r3, [r3, #2]
 8010914:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010916:	4a1e      	ldr	r2, [pc, #120]	; (8010990 <tcp_timewait_input+0xe8>)
 8010918:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801091a:	8812      	ldrh	r2, [r2, #0]
 801091c:	b292      	uxth	r2, r2
 801091e:	9202      	str	r2, [sp, #8]
 8010920:	9301      	str	r3, [sp, #4]
 8010922:	4b1c      	ldr	r3, [pc, #112]	; (8010994 <tcp_timewait_input+0xec>)
 8010924:	9300      	str	r3, [sp, #0]
 8010926:	4b1c      	ldr	r3, [pc, #112]	; (8010998 <tcp_timewait_input+0xf0>)
 8010928:	4602      	mov	r2, r0
 801092a:	6878      	ldr	r0, [r7, #4]
 801092c:	f002 fe80 	bl	8013630 <tcp_rst>
      return;
 8010930:	e01c      	b.n	801096c <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8010932:	4b10      	ldr	r3, [pc, #64]	; (8010974 <tcp_timewait_input+0xcc>)
 8010934:	781b      	ldrb	r3, [r3, #0]
 8010936:	f003 0301 	and.w	r3, r3, #1
 801093a:	2b00      	cmp	r3, #0
 801093c:	d003      	beq.n	8010946 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801093e:	4b17      	ldr	r3, [pc, #92]	; (801099c <tcp_timewait_input+0xf4>)
 8010940:	681a      	ldr	r2, [r3, #0]
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010946:	4b11      	ldr	r3, [pc, #68]	; (801098c <tcp_timewait_input+0xe4>)
 8010948:	881b      	ldrh	r3, [r3, #0]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d00d      	beq.n	801096a <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	8b5b      	ldrh	r3, [r3, #26]
 8010952:	f043 0302 	orr.w	r3, r3, #2
 8010956:	b29a      	uxth	r2, r3
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801095c:	6878      	ldr	r0, [r7, #4]
 801095e:	f002 f8a3 	bl	8012aa8 <tcp_output>
  }
  return;
 8010962:	bf00      	nop
 8010964:	e001      	b.n	801096a <tcp_timewait_input+0xc2>
    return;
 8010966:	bf00      	nop
 8010968:	e000      	b.n	801096c <tcp_timewait_input+0xc4>
  return;
 801096a:	bf00      	nop
}
 801096c:	3708      	adds	r7, #8
 801096e:	46bd      	mov	sp, r7
 8010970:	bd80      	pop	{r7, pc}
 8010972:	bf00      	nop
 8010974:	200004a8 	.word	0x200004a8
 8010978:	0801ab30 	.word	0x0801ab30
 801097c:	0801ad48 	.word	0x0801ad48
 8010980:	0801ab7c 	.word	0x0801ab7c
 8010984:	2000049c 	.word	0x2000049c
 8010988:	200004a0 	.word	0x200004a0
 801098c:	200004a6 	.word	0x200004a6
 8010990:	2000048c 	.word	0x2000048c
 8010994:	20004978 	.word	0x20004978
 8010998:	2000497c 	.word	0x2000497c
 801099c:	20007ed0 	.word	0x20007ed0

080109a0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80109a0:	b590      	push	{r4, r7, lr}
 80109a2:	b08d      	sub	sp, #52	; 0x34
 80109a4:	af04      	add	r7, sp, #16
 80109a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80109a8:	2300      	movs	r3, #0
 80109aa:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80109ac:	2300      	movs	r3, #0
 80109ae:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d106      	bne.n	80109c4 <tcp_process+0x24>
 80109b6:	4ba5      	ldr	r3, [pc, #660]	; (8010c4c <tcp_process+0x2ac>)
 80109b8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80109bc:	49a4      	ldr	r1, [pc, #656]	; (8010c50 <tcp_process+0x2b0>)
 80109be:	48a5      	ldr	r0, [pc, #660]	; (8010c54 <tcp_process+0x2b4>)
 80109c0:	f008 f886 	bl	8018ad0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80109c4:	4ba4      	ldr	r3, [pc, #656]	; (8010c58 <tcp_process+0x2b8>)
 80109c6:	781b      	ldrb	r3, [r3, #0]
 80109c8:	f003 0304 	and.w	r3, r3, #4
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d04e      	beq.n	8010a6e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	7d1b      	ldrb	r3, [r3, #20]
 80109d4:	2b02      	cmp	r3, #2
 80109d6:	d108      	bne.n	80109ea <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80109dc:	4b9f      	ldr	r3, [pc, #636]	; (8010c5c <tcp_process+0x2bc>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	429a      	cmp	r2, r3
 80109e2:	d123      	bne.n	8010a2c <tcp_process+0x8c>
        acceptable = 1;
 80109e4:	2301      	movs	r3, #1
 80109e6:	76fb      	strb	r3, [r7, #27]
 80109e8:	e020      	b.n	8010a2c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80109ee:	4b9c      	ldr	r3, [pc, #624]	; (8010c60 <tcp_process+0x2c0>)
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	429a      	cmp	r2, r3
 80109f4:	d102      	bne.n	80109fc <tcp_process+0x5c>
        acceptable = 1;
 80109f6:	2301      	movs	r3, #1
 80109f8:	76fb      	strb	r3, [r7, #27]
 80109fa:	e017      	b.n	8010a2c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80109fc:	4b98      	ldr	r3, [pc, #608]	; (8010c60 <tcp_process+0x2c0>)
 80109fe:	681a      	ldr	r2, [r3, #0]
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a04:	1ad3      	subs	r3, r2, r3
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	db10      	blt.n	8010a2c <tcp_process+0x8c>
 8010a0a:	4b95      	ldr	r3, [pc, #596]	; (8010c60 <tcp_process+0x2c0>)
 8010a0c:	681a      	ldr	r2, [r3, #0]
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a12:	6879      	ldr	r1, [r7, #4]
 8010a14:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010a16:	440b      	add	r3, r1
 8010a18:	1ad3      	subs	r3, r2, r3
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	dc06      	bgt.n	8010a2c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	8b5b      	ldrh	r3, [r3, #26]
 8010a22:	f043 0302 	orr.w	r3, r3, #2
 8010a26:	b29a      	uxth	r2, r3
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010a2c:	7efb      	ldrb	r3, [r7, #27]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d01b      	beq.n	8010a6a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	7d1b      	ldrb	r3, [r3, #20]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d106      	bne.n	8010a48 <tcp_process+0xa8>
 8010a3a:	4b84      	ldr	r3, [pc, #528]	; (8010c4c <tcp_process+0x2ac>)
 8010a3c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010a40:	4988      	ldr	r1, [pc, #544]	; (8010c64 <tcp_process+0x2c4>)
 8010a42:	4884      	ldr	r0, [pc, #528]	; (8010c54 <tcp_process+0x2b4>)
 8010a44:	f008 f844 	bl	8018ad0 <iprintf>
      recv_flags |= TF_RESET;
 8010a48:	4b87      	ldr	r3, [pc, #540]	; (8010c68 <tcp_process+0x2c8>)
 8010a4a:	781b      	ldrb	r3, [r3, #0]
 8010a4c:	f043 0308 	orr.w	r3, r3, #8
 8010a50:	b2da      	uxtb	r2, r3
 8010a52:	4b85      	ldr	r3, [pc, #532]	; (8010c68 <tcp_process+0x2c8>)
 8010a54:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	8b5b      	ldrh	r3, [r3, #26]
 8010a5a:	f023 0301 	bic.w	r3, r3, #1
 8010a5e:	b29a      	uxth	r2, r3
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010a64:	f06f 030d 	mvn.w	r3, #13
 8010a68:	e37a      	b.n	8011160 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	e378      	b.n	8011160 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010a6e:	4b7a      	ldr	r3, [pc, #488]	; (8010c58 <tcp_process+0x2b8>)
 8010a70:	781b      	ldrb	r3, [r3, #0]
 8010a72:	f003 0302 	and.w	r3, r3, #2
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d010      	beq.n	8010a9c <tcp_process+0xfc>
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	7d1b      	ldrb	r3, [r3, #20]
 8010a7e:	2b02      	cmp	r3, #2
 8010a80:	d00c      	beq.n	8010a9c <tcp_process+0xfc>
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	7d1b      	ldrb	r3, [r3, #20]
 8010a86:	2b03      	cmp	r3, #3
 8010a88:	d008      	beq.n	8010a9c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	8b5b      	ldrh	r3, [r3, #26]
 8010a8e:	f043 0302 	orr.w	r3, r3, #2
 8010a92:	b29a      	uxth	r2, r3
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010a98:	2300      	movs	r3, #0
 8010a9a:	e361      	b.n	8011160 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	8b5b      	ldrh	r3, [r3, #26]
 8010aa0:	f003 0310 	and.w	r3, r3, #16
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d103      	bne.n	8010ab0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010aa8:	4b70      	ldr	r3, [pc, #448]	; (8010c6c <tcp_process+0x2cc>)
 8010aaa:	681a      	ldr	r2, [r3, #0]
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	2200      	movs	r2, #0
 8010ab4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	2200      	movs	r2, #0
 8010abc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010ac0:	6878      	ldr	r0, [r7, #4]
 8010ac2:	f001 fc2d 	bl	8012320 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	7d1b      	ldrb	r3, [r3, #20]
 8010aca:	3b02      	subs	r3, #2
 8010acc:	2b07      	cmp	r3, #7
 8010ace:	f200 8337 	bhi.w	8011140 <tcp_process+0x7a0>
 8010ad2:	a201      	add	r2, pc, #4	; (adr r2, 8010ad8 <tcp_process+0x138>)
 8010ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ad8:	08010af9 	.word	0x08010af9
 8010adc:	08010d29 	.word	0x08010d29
 8010ae0:	08010ea1 	.word	0x08010ea1
 8010ae4:	08010ecb 	.word	0x08010ecb
 8010ae8:	08010fef 	.word	0x08010fef
 8010aec:	08010ea1 	.word	0x08010ea1
 8010af0:	0801107b 	.word	0x0801107b
 8010af4:	0801110b 	.word	0x0801110b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010af8:	4b57      	ldr	r3, [pc, #348]	; (8010c58 <tcp_process+0x2b8>)
 8010afa:	781b      	ldrb	r3, [r3, #0]
 8010afc:	f003 0310 	and.w	r3, r3, #16
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	f000 80e4 	beq.w	8010cce <tcp_process+0x32e>
 8010b06:	4b54      	ldr	r3, [pc, #336]	; (8010c58 <tcp_process+0x2b8>)
 8010b08:	781b      	ldrb	r3, [r3, #0]
 8010b0a:	f003 0302 	and.w	r3, r3, #2
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	f000 80dd 	beq.w	8010cce <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b18:	1c5a      	adds	r2, r3, #1
 8010b1a:	4b50      	ldr	r3, [pc, #320]	; (8010c5c <tcp_process+0x2bc>)
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	429a      	cmp	r2, r3
 8010b20:	f040 80d5 	bne.w	8010cce <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010b24:	4b4e      	ldr	r3, [pc, #312]	; (8010c60 <tcp_process+0x2c0>)
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	1c5a      	adds	r2, r3, #1
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010b36:	4b49      	ldr	r3, [pc, #292]	; (8010c5c <tcp_process+0x2bc>)
 8010b38:	681a      	ldr	r2, [r3, #0]
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010b3e:	4b4c      	ldr	r3, [pc, #304]	; (8010c70 <tcp_process+0x2d0>)
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	89db      	ldrh	r3, [r3, #14]
 8010b44:	b29a      	uxth	r2, r3
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010b58:	4b41      	ldr	r3, [pc, #260]	; (8010c60 <tcp_process+0x2c0>)
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	1e5a      	subs	r2, r3, #1
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2204      	movs	r2, #4
 8010b66:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	3304      	adds	r3, #4
 8010b70:	4618      	mov	r0, r3
 8010b72:	f006 fcb1 	bl	80174d8 <ip4_route>
 8010b76:	4601      	mov	r1, r0
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	3304      	adds	r3, #4
 8010b7c:	461a      	mov	r2, r3
 8010b7e:	4620      	mov	r0, r4
 8010b80:	f7ff f88e 	bl	800fca0 <tcp_eff_send_mss_netif>
 8010b84:	4603      	mov	r3, r0
 8010b86:	461a      	mov	r2, r3
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b90:	009a      	lsls	r2, r3, #2
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b96:	005b      	lsls	r3, r3, #1
 8010b98:	f241 111c 	movw	r1, #4380	; 0x111c
 8010b9c:	428b      	cmp	r3, r1
 8010b9e:	bf38      	it	cc
 8010ba0:	460b      	movcc	r3, r1
 8010ba2:	429a      	cmp	r2, r3
 8010ba4:	d204      	bcs.n	8010bb0 <tcp_process+0x210>
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010baa:	009b      	lsls	r3, r3, #2
 8010bac:	b29b      	uxth	r3, r3
 8010bae:	e00d      	b.n	8010bcc <tcp_process+0x22c>
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bb4:	005b      	lsls	r3, r3, #1
 8010bb6:	f241 121c 	movw	r2, #4380	; 0x111c
 8010bba:	4293      	cmp	r3, r2
 8010bbc:	d904      	bls.n	8010bc8 <tcp_process+0x228>
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bc2:	005b      	lsls	r3, r3, #1
 8010bc4:	b29b      	uxth	r3, r3
 8010bc6:	e001      	b.n	8010bcc <tcp_process+0x22c>
 8010bc8:	f241 131c 	movw	r3, #4380	; 0x111c
 8010bcc:	687a      	ldr	r2, [r7, #4]
 8010bce:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d106      	bne.n	8010bea <tcp_process+0x24a>
 8010bdc:	4b1b      	ldr	r3, [pc, #108]	; (8010c4c <tcp_process+0x2ac>)
 8010bde:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010be2:	4924      	ldr	r1, [pc, #144]	; (8010c74 <tcp_process+0x2d4>)
 8010be4:	481b      	ldr	r0, [pc, #108]	; (8010c54 <tcp_process+0x2b4>)
 8010be6:	f007 ff73 	bl	8018ad0 <iprintf>
        --pcb->snd_queuelen;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010bf0:	3b01      	subs	r3, #1
 8010bf2:	b29a      	uxth	r2, r3
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bfe:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010c00:	69fb      	ldr	r3, [r7, #28]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d111      	bne.n	8010c2a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c0a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010c0c:	69fb      	ldr	r3, [r7, #28]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d106      	bne.n	8010c20 <tcp_process+0x280>
 8010c12:	4b0e      	ldr	r3, [pc, #56]	; (8010c4c <tcp_process+0x2ac>)
 8010c14:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010c18:	4917      	ldr	r1, [pc, #92]	; (8010c78 <tcp_process+0x2d8>)
 8010c1a:	480e      	ldr	r0, [pc, #56]	; (8010c54 <tcp_process+0x2b4>)
 8010c1c:	f007 ff58 	bl	8018ad0 <iprintf>
          pcb->unsent = rseg->next;
 8010c20:	69fb      	ldr	r3, [r7, #28]
 8010c22:	681a      	ldr	r2, [r3, #0]
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	66da      	str	r2, [r3, #108]	; 0x6c
 8010c28:	e003      	b.n	8010c32 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8010c2a:	69fb      	ldr	r3, [r7, #28]
 8010c2c:	681a      	ldr	r2, [r3, #0]
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010c32:	69f8      	ldr	r0, [r7, #28]
 8010c34:	f7fe fd3e 	bl	800f6b4 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d11d      	bne.n	8010c7c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c46:	861a      	strh	r2, [r3, #48]	; 0x30
 8010c48:	e01f      	b.n	8010c8a <tcp_process+0x2ea>
 8010c4a:	bf00      	nop
 8010c4c:	0801ab30 	.word	0x0801ab30
 8010c50:	0801ad68 	.word	0x0801ad68
 8010c54:	0801ab7c 	.word	0x0801ab7c
 8010c58:	200004a8 	.word	0x200004a8
 8010c5c:	200004a0 	.word	0x200004a0
 8010c60:	2000049c 	.word	0x2000049c
 8010c64:	0801ad84 	.word	0x0801ad84
 8010c68:	200004a9 	.word	0x200004a9
 8010c6c:	20007ed0 	.word	0x20007ed0
 8010c70:	2000048c 	.word	0x2000048c
 8010c74:	0801ada4 	.word	0x0801ada4
 8010c78:	0801adbc 	.word	0x0801adbc
        } else {
          pcb->rtime = 0;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	2200      	movs	r2, #0
 8010c80:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	2200      	movs	r2, #0
 8010c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d00a      	beq.n	8010caa <tcp_process+0x30a>
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010c9a:	687a      	ldr	r2, [r7, #4]
 8010c9c:	6910      	ldr	r0, [r2, #16]
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	6879      	ldr	r1, [r7, #4]
 8010ca2:	4798      	blx	r3
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	76bb      	strb	r3, [r7, #26]
 8010ca8:	e001      	b.n	8010cae <tcp_process+0x30e>
 8010caa:	2300      	movs	r3, #0
 8010cac:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010cae:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010cb2:	f113 0f0d 	cmn.w	r3, #13
 8010cb6:	d102      	bne.n	8010cbe <tcp_process+0x31e>
          return ERR_ABRT;
 8010cb8:	f06f 030c 	mvn.w	r3, #12
 8010cbc:	e250      	b.n	8011160 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	8b5b      	ldrh	r3, [r3, #26]
 8010cc2:	f043 0302 	orr.w	r3, r3, #2
 8010cc6:	b29a      	uxth	r2, r3
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010ccc:	e23a      	b.n	8011144 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010cce:	4b9d      	ldr	r3, [pc, #628]	; (8010f44 <tcp_process+0x5a4>)
 8010cd0:	781b      	ldrb	r3, [r3, #0]
 8010cd2:	f003 0310 	and.w	r3, r3, #16
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	f000 8234 	beq.w	8011144 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010cdc:	4b9a      	ldr	r3, [pc, #616]	; (8010f48 <tcp_process+0x5a8>)
 8010cde:	6819      	ldr	r1, [r3, #0]
 8010ce0:	4b9a      	ldr	r3, [pc, #616]	; (8010f4c <tcp_process+0x5ac>)
 8010ce2:	881b      	ldrh	r3, [r3, #0]
 8010ce4:	461a      	mov	r2, r3
 8010ce6:	4b9a      	ldr	r3, [pc, #616]	; (8010f50 <tcp_process+0x5b0>)
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010cec:	4b99      	ldr	r3, [pc, #612]	; (8010f54 <tcp_process+0x5b4>)
 8010cee:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010cf0:	885b      	ldrh	r3, [r3, #2]
 8010cf2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010cf4:	4a97      	ldr	r2, [pc, #604]	; (8010f54 <tcp_process+0x5b4>)
 8010cf6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010cf8:	8812      	ldrh	r2, [r2, #0]
 8010cfa:	b292      	uxth	r2, r2
 8010cfc:	9202      	str	r2, [sp, #8]
 8010cfe:	9301      	str	r3, [sp, #4]
 8010d00:	4b95      	ldr	r3, [pc, #596]	; (8010f58 <tcp_process+0x5b8>)
 8010d02:	9300      	str	r3, [sp, #0]
 8010d04:	4b95      	ldr	r3, [pc, #596]	; (8010f5c <tcp_process+0x5bc>)
 8010d06:	4602      	mov	r2, r0
 8010d08:	6878      	ldr	r0, [r7, #4]
 8010d0a:	f002 fc91 	bl	8013630 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010d14:	2b05      	cmp	r3, #5
 8010d16:	f200 8215 	bhi.w	8011144 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010d20:	6878      	ldr	r0, [r7, #4]
 8010d22:	f002 fa51 	bl	80131c8 <tcp_rexmit_rto>
      break;
 8010d26:	e20d      	b.n	8011144 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010d28:	4b86      	ldr	r3, [pc, #536]	; (8010f44 <tcp_process+0x5a4>)
 8010d2a:	781b      	ldrb	r3, [r3, #0]
 8010d2c:	f003 0310 	and.w	r3, r3, #16
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	f000 80a1 	beq.w	8010e78 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010d36:	4b84      	ldr	r3, [pc, #528]	; (8010f48 <tcp_process+0x5a8>)
 8010d38:	681a      	ldr	r2, [r3, #0]
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d3e:	1ad3      	subs	r3, r2, r3
 8010d40:	3b01      	subs	r3, #1
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	db7e      	blt.n	8010e44 <tcp_process+0x4a4>
 8010d46:	4b80      	ldr	r3, [pc, #512]	; (8010f48 <tcp_process+0x5a8>)
 8010d48:	681a      	ldr	r2, [r3, #0]
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010d4e:	1ad3      	subs	r3, r2, r3
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	dc77      	bgt.n	8010e44 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2204      	movs	r2, #4
 8010d58:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d102      	bne.n	8010d68 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010d62:	23fa      	movs	r3, #250	; 0xfa
 8010d64:	76bb      	strb	r3, [r7, #26]
 8010d66:	e01d      	b.n	8010da4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010d6c:	699b      	ldr	r3, [r3, #24]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d106      	bne.n	8010d80 <tcp_process+0x3e0>
 8010d72:	4b7b      	ldr	r3, [pc, #492]	; (8010f60 <tcp_process+0x5c0>)
 8010d74:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010d78:	497a      	ldr	r1, [pc, #488]	; (8010f64 <tcp_process+0x5c4>)
 8010d7a:	487b      	ldr	r0, [pc, #492]	; (8010f68 <tcp_process+0x5c8>)
 8010d7c:	f007 fea8 	bl	8018ad0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010d84:	699b      	ldr	r3, [r3, #24]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d00a      	beq.n	8010da0 <tcp_process+0x400>
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010d8e:	699b      	ldr	r3, [r3, #24]
 8010d90:	687a      	ldr	r2, [r7, #4]
 8010d92:	6910      	ldr	r0, [r2, #16]
 8010d94:	2200      	movs	r2, #0
 8010d96:	6879      	ldr	r1, [r7, #4]
 8010d98:	4798      	blx	r3
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	76bb      	strb	r3, [r7, #26]
 8010d9e:	e001      	b.n	8010da4 <tcp_process+0x404>
 8010da0:	23f0      	movs	r3, #240	; 0xf0
 8010da2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010da4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d00a      	beq.n	8010dc2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010dac:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010db0:	f113 0f0d 	cmn.w	r3, #13
 8010db4:	d002      	beq.n	8010dbc <tcp_process+0x41c>
              tcp_abort(pcb);
 8010db6:	6878      	ldr	r0, [r7, #4]
 8010db8:	f7fd ff94 	bl	800ece4 <tcp_abort>
            }
            return ERR_ABRT;
 8010dbc:	f06f 030c 	mvn.w	r3, #12
 8010dc0:	e1ce      	b.n	8011160 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010dc2:	6878      	ldr	r0, [r7, #4]
 8010dc4:	f000 fae0 	bl	8011388 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010dc8:	4b68      	ldr	r3, [pc, #416]	; (8010f6c <tcp_process+0x5cc>)
 8010dca:	881b      	ldrh	r3, [r3, #0]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d005      	beq.n	8010ddc <tcp_process+0x43c>
            recv_acked--;
 8010dd0:	4b66      	ldr	r3, [pc, #408]	; (8010f6c <tcp_process+0x5cc>)
 8010dd2:	881b      	ldrh	r3, [r3, #0]
 8010dd4:	3b01      	subs	r3, #1
 8010dd6:	b29a      	uxth	r2, r3
 8010dd8:	4b64      	ldr	r3, [pc, #400]	; (8010f6c <tcp_process+0x5cc>)
 8010dda:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010de0:	009a      	lsls	r2, r3, #2
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010de6:	005b      	lsls	r3, r3, #1
 8010de8:	f241 111c 	movw	r1, #4380	; 0x111c
 8010dec:	428b      	cmp	r3, r1
 8010dee:	bf38      	it	cc
 8010df0:	460b      	movcc	r3, r1
 8010df2:	429a      	cmp	r2, r3
 8010df4:	d204      	bcs.n	8010e00 <tcp_process+0x460>
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dfa:	009b      	lsls	r3, r3, #2
 8010dfc:	b29b      	uxth	r3, r3
 8010dfe:	e00d      	b.n	8010e1c <tcp_process+0x47c>
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e04:	005b      	lsls	r3, r3, #1
 8010e06:	f241 121c 	movw	r2, #4380	; 0x111c
 8010e0a:	4293      	cmp	r3, r2
 8010e0c:	d904      	bls.n	8010e18 <tcp_process+0x478>
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e12:	005b      	lsls	r3, r3, #1
 8010e14:	b29b      	uxth	r3, r3
 8010e16:	e001      	b.n	8010e1c <tcp_process+0x47c>
 8010e18:	f241 131c 	movw	r3, #4380	; 0x111c
 8010e1c:	687a      	ldr	r2, [r7, #4]
 8010e1e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010e22:	4b53      	ldr	r3, [pc, #332]	; (8010f70 <tcp_process+0x5d0>)
 8010e24:	781b      	ldrb	r3, [r3, #0]
 8010e26:	f003 0320 	and.w	r3, r3, #32
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d037      	beq.n	8010e9e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	8b5b      	ldrh	r3, [r3, #26]
 8010e32:	f043 0302 	orr.w	r3, r3, #2
 8010e36:	b29a      	uxth	r2, r3
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2207      	movs	r2, #7
 8010e40:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010e42:	e02c      	b.n	8010e9e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e44:	4b40      	ldr	r3, [pc, #256]	; (8010f48 <tcp_process+0x5a8>)
 8010e46:	6819      	ldr	r1, [r3, #0]
 8010e48:	4b40      	ldr	r3, [pc, #256]	; (8010f4c <tcp_process+0x5ac>)
 8010e4a:	881b      	ldrh	r3, [r3, #0]
 8010e4c:	461a      	mov	r2, r3
 8010e4e:	4b40      	ldr	r3, [pc, #256]	; (8010f50 <tcp_process+0x5b0>)
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010e54:	4b3f      	ldr	r3, [pc, #252]	; (8010f54 <tcp_process+0x5b4>)
 8010e56:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e58:	885b      	ldrh	r3, [r3, #2]
 8010e5a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010e5c:	4a3d      	ldr	r2, [pc, #244]	; (8010f54 <tcp_process+0x5b4>)
 8010e5e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010e60:	8812      	ldrh	r2, [r2, #0]
 8010e62:	b292      	uxth	r2, r2
 8010e64:	9202      	str	r2, [sp, #8]
 8010e66:	9301      	str	r3, [sp, #4]
 8010e68:	4b3b      	ldr	r3, [pc, #236]	; (8010f58 <tcp_process+0x5b8>)
 8010e6a:	9300      	str	r3, [sp, #0]
 8010e6c:	4b3b      	ldr	r3, [pc, #236]	; (8010f5c <tcp_process+0x5bc>)
 8010e6e:	4602      	mov	r2, r0
 8010e70:	6878      	ldr	r0, [r7, #4]
 8010e72:	f002 fbdd 	bl	8013630 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010e76:	e167      	b.n	8011148 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010e78:	4b32      	ldr	r3, [pc, #200]	; (8010f44 <tcp_process+0x5a4>)
 8010e7a:	781b      	ldrb	r3, [r3, #0]
 8010e7c:	f003 0302 	and.w	r3, r3, #2
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	f000 8161 	beq.w	8011148 <tcp_process+0x7a8>
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e8a:	1e5a      	subs	r2, r3, #1
 8010e8c:	4b30      	ldr	r3, [pc, #192]	; (8010f50 <tcp_process+0x5b0>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	429a      	cmp	r2, r3
 8010e92:	f040 8159 	bne.w	8011148 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010e96:	6878      	ldr	r0, [r7, #4]
 8010e98:	f002 f9b8 	bl	801320c <tcp_rexmit>
      break;
 8010e9c:	e154      	b.n	8011148 <tcp_process+0x7a8>
 8010e9e:	e153      	b.n	8011148 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010ea0:	6878      	ldr	r0, [r7, #4]
 8010ea2:	f000 fa71 	bl	8011388 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010ea6:	4b32      	ldr	r3, [pc, #200]	; (8010f70 <tcp_process+0x5d0>)
 8010ea8:	781b      	ldrb	r3, [r3, #0]
 8010eaa:	f003 0320 	and.w	r3, r3, #32
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	f000 814c 	beq.w	801114c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	8b5b      	ldrh	r3, [r3, #26]
 8010eb8:	f043 0302 	orr.w	r3, r3, #2
 8010ebc:	b29a      	uxth	r2, r3
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	2207      	movs	r2, #7
 8010ec6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010ec8:	e140      	b.n	801114c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f000 fa5c 	bl	8011388 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010ed0:	4b27      	ldr	r3, [pc, #156]	; (8010f70 <tcp_process+0x5d0>)
 8010ed2:	781b      	ldrb	r3, [r3, #0]
 8010ed4:	f003 0320 	and.w	r3, r3, #32
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d071      	beq.n	8010fc0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010edc:	4b19      	ldr	r3, [pc, #100]	; (8010f44 <tcp_process+0x5a4>)
 8010ede:	781b      	ldrb	r3, [r3, #0]
 8010ee0:	f003 0310 	and.w	r3, r3, #16
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d060      	beq.n	8010faa <tcp_process+0x60a>
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010eec:	4b16      	ldr	r3, [pc, #88]	; (8010f48 <tcp_process+0x5a8>)
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	d15a      	bne.n	8010faa <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d156      	bne.n	8010faa <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	8b5b      	ldrh	r3, [r3, #26]
 8010f00:	f043 0302 	orr.w	r3, r3, #2
 8010f04:	b29a      	uxth	r2, r3
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010f0a:	6878      	ldr	r0, [r7, #4]
 8010f0c:	f7fe fdbe 	bl	800fa8c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010f10:	4b18      	ldr	r3, [pc, #96]	; (8010f74 <tcp_process+0x5d4>)
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	687a      	ldr	r2, [r7, #4]
 8010f16:	429a      	cmp	r2, r3
 8010f18:	d105      	bne.n	8010f26 <tcp_process+0x586>
 8010f1a:	4b16      	ldr	r3, [pc, #88]	; (8010f74 <tcp_process+0x5d4>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	68db      	ldr	r3, [r3, #12]
 8010f20:	4a14      	ldr	r2, [pc, #80]	; (8010f74 <tcp_process+0x5d4>)
 8010f22:	6013      	str	r3, [r2, #0]
 8010f24:	e02e      	b.n	8010f84 <tcp_process+0x5e4>
 8010f26:	4b13      	ldr	r3, [pc, #76]	; (8010f74 <tcp_process+0x5d4>)
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	617b      	str	r3, [r7, #20]
 8010f2c:	e027      	b.n	8010f7e <tcp_process+0x5de>
 8010f2e:	697b      	ldr	r3, [r7, #20]
 8010f30:	68db      	ldr	r3, [r3, #12]
 8010f32:	687a      	ldr	r2, [r7, #4]
 8010f34:	429a      	cmp	r2, r3
 8010f36:	d11f      	bne.n	8010f78 <tcp_process+0x5d8>
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	68da      	ldr	r2, [r3, #12]
 8010f3c:	697b      	ldr	r3, [r7, #20]
 8010f3e:	60da      	str	r2, [r3, #12]
 8010f40:	e020      	b.n	8010f84 <tcp_process+0x5e4>
 8010f42:	bf00      	nop
 8010f44:	200004a8 	.word	0x200004a8
 8010f48:	200004a0 	.word	0x200004a0
 8010f4c:	200004a6 	.word	0x200004a6
 8010f50:	2000049c 	.word	0x2000049c
 8010f54:	2000048c 	.word	0x2000048c
 8010f58:	20004978 	.word	0x20004978
 8010f5c:	2000497c 	.word	0x2000497c
 8010f60:	0801ab30 	.word	0x0801ab30
 8010f64:	0801add0 	.word	0x0801add0
 8010f68:	0801ab7c 	.word	0x0801ab7c
 8010f6c:	200004a4 	.word	0x200004a4
 8010f70:	200004a9 	.word	0x200004a9
 8010f74:	20007ecc 	.word	0x20007ecc
 8010f78:	697b      	ldr	r3, [r7, #20]
 8010f7a:	68db      	ldr	r3, [r3, #12]
 8010f7c:	617b      	str	r3, [r7, #20]
 8010f7e:	697b      	ldr	r3, [r7, #20]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d1d4      	bne.n	8010f2e <tcp_process+0x58e>
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	2200      	movs	r2, #0
 8010f88:	60da      	str	r2, [r3, #12]
 8010f8a:	4b77      	ldr	r3, [pc, #476]	; (8011168 <tcp_process+0x7c8>)
 8010f8c:	2201      	movs	r2, #1
 8010f8e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	220a      	movs	r2, #10
 8010f94:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010f96:	4b75      	ldr	r3, [pc, #468]	; (801116c <tcp_process+0x7cc>)
 8010f98:	681a      	ldr	r2, [r3, #0]
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	60da      	str	r2, [r3, #12]
 8010f9e:	4a73      	ldr	r2, [pc, #460]	; (801116c <tcp_process+0x7cc>)
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	6013      	str	r3, [r2, #0]
 8010fa4:	f002 fd06 	bl	80139b4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010fa8:	e0d2      	b.n	8011150 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	8b5b      	ldrh	r3, [r3, #26]
 8010fae:	f043 0302 	orr.w	r3, r3, #2
 8010fb2:	b29a      	uxth	r2, r3
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	2208      	movs	r2, #8
 8010fbc:	751a      	strb	r2, [r3, #20]
      break;
 8010fbe:	e0c7      	b.n	8011150 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010fc0:	4b6b      	ldr	r3, [pc, #428]	; (8011170 <tcp_process+0x7d0>)
 8010fc2:	781b      	ldrb	r3, [r3, #0]
 8010fc4:	f003 0310 	and.w	r3, r3, #16
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	f000 80c1 	beq.w	8011150 <tcp_process+0x7b0>
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010fd2:	4b68      	ldr	r3, [pc, #416]	; (8011174 <tcp_process+0x7d4>)
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	429a      	cmp	r2, r3
 8010fd8:	f040 80ba 	bne.w	8011150 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	f040 80b5 	bne.w	8011150 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	2206      	movs	r2, #6
 8010fea:	751a      	strb	r2, [r3, #20]
      break;
 8010fec:	e0b0      	b.n	8011150 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f000 f9ca 	bl	8011388 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010ff4:	4b60      	ldr	r3, [pc, #384]	; (8011178 <tcp_process+0x7d8>)
 8010ff6:	781b      	ldrb	r3, [r3, #0]
 8010ff8:	f003 0320 	and.w	r3, r3, #32
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	f000 80a9 	beq.w	8011154 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	8b5b      	ldrh	r3, [r3, #26]
 8011006:	f043 0302 	orr.w	r3, r3, #2
 801100a:	b29a      	uxth	r2, r3
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	f7fe fd3b 	bl	800fa8c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011016:	4b59      	ldr	r3, [pc, #356]	; (801117c <tcp_process+0x7dc>)
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	687a      	ldr	r2, [r7, #4]
 801101c:	429a      	cmp	r2, r3
 801101e:	d105      	bne.n	801102c <tcp_process+0x68c>
 8011020:	4b56      	ldr	r3, [pc, #344]	; (801117c <tcp_process+0x7dc>)
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	68db      	ldr	r3, [r3, #12]
 8011026:	4a55      	ldr	r2, [pc, #340]	; (801117c <tcp_process+0x7dc>)
 8011028:	6013      	str	r3, [r2, #0]
 801102a:	e013      	b.n	8011054 <tcp_process+0x6b4>
 801102c:	4b53      	ldr	r3, [pc, #332]	; (801117c <tcp_process+0x7dc>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	613b      	str	r3, [r7, #16]
 8011032:	e00c      	b.n	801104e <tcp_process+0x6ae>
 8011034:	693b      	ldr	r3, [r7, #16]
 8011036:	68db      	ldr	r3, [r3, #12]
 8011038:	687a      	ldr	r2, [r7, #4]
 801103a:	429a      	cmp	r2, r3
 801103c:	d104      	bne.n	8011048 <tcp_process+0x6a8>
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	68da      	ldr	r2, [r3, #12]
 8011042:	693b      	ldr	r3, [r7, #16]
 8011044:	60da      	str	r2, [r3, #12]
 8011046:	e005      	b.n	8011054 <tcp_process+0x6b4>
 8011048:	693b      	ldr	r3, [r7, #16]
 801104a:	68db      	ldr	r3, [r3, #12]
 801104c:	613b      	str	r3, [r7, #16]
 801104e:	693b      	ldr	r3, [r7, #16]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d1ef      	bne.n	8011034 <tcp_process+0x694>
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	2200      	movs	r2, #0
 8011058:	60da      	str	r2, [r3, #12]
 801105a:	4b43      	ldr	r3, [pc, #268]	; (8011168 <tcp_process+0x7c8>)
 801105c:	2201      	movs	r2, #1
 801105e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	220a      	movs	r2, #10
 8011064:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011066:	4b41      	ldr	r3, [pc, #260]	; (801116c <tcp_process+0x7cc>)
 8011068:	681a      	ldr	r2, [r3, #0]
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	60da      	str	r2, [r3, #12]
 801106e:	4a3f      	ldr	r2, [pc, #252]	; (801116c <tcp_process+0x7cc>)
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6013      	str	r3, [r2, #0]
 8011074:	f002 fc9e 	bl	80139b4 <tcp_timer_needed>
      }
      break;
 8011078:	e06c      	b.n	8011154 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801107a:	6878      	ldr	r0, [r7, #4]
 801107c:	f000 f984 	bl	8011388 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011080:	4b3b      	ldr	r3, [pc, #236]	; (8011170 <tcp_process+0x7d0>)
 8011082:	781b      	ldrb	r3, [r3, #0]
 8011084:	f003 0310 	and.w	r3, r3, #16
 8011088:	2b00      	cmp	r3, #0
 801108a:	d065      	beq.n	8011158 <tcp_process+0x7b8>
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011090:	4b38      	ldr	r3, [pc, #224]	; (8011174 <tcp_process+0x7d4>)
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	429a      	cmp	r2, r3
 8011096:	d15f      	bne.n	8011158 <tcp_process+0x7b8>
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801109c:	2b00      	cmp	r3, #0
 801109e:	d15b      	bne.n	8011158 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f7fe fcf3 	bl	800fa8c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80110a6:	4b35      	ldr	r3, [pc, #212]	; (801117c <tcp_process+0x7dc>)
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	687a      	ldr	r2, [r7, #4]
 80110ac:	429a      	cmp	r2, r3
 80110ae:	d105      	bne.n	80110bc <tcp_process+0x71c>
 80110b0:	4b32      	ldr	r3, [pc, #200]	; (801117c <tcp_process+0x7dc>)
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	68db      	ldr	r3, [r3, #12]
 80110b6:	4a31      	ldr	r2, [pc, #196]	; (801117c <tcp_process+0x7dc>)
 80110b8:	6013      	str	r3, [r2, #0]
 80110ba:	e013      	b.n	80110e4 <tcp_process+0x744>
 80110bc:	4b2f      	ldr	r3, [pc, #188]	; (801117c <tcp_process+0x7dc>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	60fb      	str	r3, [r7, #12]
 80110c2:	e00c      	b.n	80110de <tcp_process+0x73e>
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	68db      	ldr	r3, [r3, #12]
 80110c8:	687a      	ldr	r2, [r7, #4]
 80110ca:	429a      	cmp	r2, r3
 80110cc:	d104      	bne.n	80110d8 <tcp_process+0x738>
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	68da      	ldr	r2, [r3, #12]
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	60da      	str	r2, [r3, #12]
 80110d6:	e005      	b.n	80110e4 <tcp_process+0x744>
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	68db      	ldr	r3, [r3, #12]
 80110dc:	60fb      	str	r3, [r7, #12]
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d1ef      	bne.n	80110c4 <tcp_process+0x724>
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2200      	movs	r2, #0
 80110e8:	60da      	str	r2, [r3, #12]
 80110ea:	4b1f      	ldr	r3, [pc, #124]	; (8011168 <tcp_process+0x7c8>)
 80110ec:	2201      	movs	r2, #1
 80110ee:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	220a      	movs	r2, #10
 80110f4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80110f6:	4b1d      	ldr	r3, [pc, #116]	; (801116c <tcp_process+0x7cc>)
 80110f8:	681a      	ldr	r2, [r3, #0]
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	60da      	str	r2, [r3, #12]
 80110fe:	4a1b      	ldr	r2, [pc, #108]	; (801116c <tcp_process+0x7cc>)
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	6013      	str	r3, [r2, #0]
 8011104:	f002 fc56 	bl	80139b4 <tcp_timer_needed>
      }
      break;
 8011108:	e026      	b.n	8011158 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801110a:	6878      	ldr	r0, [r7, #4]
 801110c:	f000 f93c 	bl	8011388 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011110:	4b17      	ldr	r3, [pc, #92]	; (8011170 <tcp_process+0x7d0>)
 8011112:	781b      	ldrb	r3, [r3, #0]
 8011114:	f003 0310 	and.w	r3, r3, #16
 8011118:	2b00      	cmp	r3, #0
 801111a:	d01f      	beq.n	801115c <tcp_process+0x7bc>
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011120:	4b14      	ldr	r3, [pc, #80]	; (8011174 <tcp_process+0x7d4>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	429a      	cmp	r2, r3
 8011126:	d119      	bne.n	801115c <tcp_process+0x7bc>
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801112c:	2b00      	cmp	r3, #0
 801112e:	d115      	bne.n	801115c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011130:	4b11      	ldr	r3, [pc, #68]	; (8011178 <tcp_process+0x7d8>)
 8011132:	781b      	ldrb	r3, [r3, #0]
 8011134:	f043 0310 	orr.w	r3, r3, #16
 8011138:	b2da      	uxtb	r2, r3
 801113a:	4b0f      	ldr	r3, [pc, #60]	; (8011178 <tcp_process+0x7d8>)
 801113c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801113e:	e00d      	b.n	801115c <tcp_process+0x7bc>
    default:
      break;
 8011140:	bf00      	nop
 8011142:	e00c      	b.n	801115e <tcp_process+0x7be>
      break;
 8011144:	bf00      	nop
 8011146:	e00a      	b.n	801115e <tcp_process+0x7be>
      break;
 8011148:	bf00      	nop
 801114a:	e008      	b.n	801115e <tcp_process+0x7be>
      break;
 801114c:	bf00      	nop
 801114e:	e006      	b.n	801115e <tcp_process+0x7be>
      break;
 8011150:	bf00      	nop
 8011152:	e004      	b.n	801115e <tcp_process+0x7be>
      break;
 8011154:	bf00      	nop
 8011156:	e002      	b.n	801115e <tcp_process+0x7be>
      break;
 8011158:	bf00      	nop
 801115a:	e000      	b.n	801115e <tcp_process+0x7be>
      break;
 801115c:	bf00      	nop
  }
  return ERR_OK;
 801115e:	2300      	movs	r3, #0
}
 8011160:	4618      	mov	r0, r3
 8011162:	3724      	adds	r7, #36	; 0x24
 8011164:	46bd      	mov	sp, r7
 8011166:	bd90      	pop	{r4, r7, pc}
 8011168:	20007ec8 	.word	0x20007ec8
 801116c:	20007edc 	.word	0x20007edc
 8011170:	200004a8 	.word	0x200004a8
 8011174:	200004a0 	.word	0x200004a0
 8011178:	200004a9 	.word	0x200004a9
 801117c:	20007ecc 	.word	0x20007ecc

08011180 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011180:	b590      	push	{r4, r7, lr}
 8011182:	b085      	sub	sp, #20
 8011184:	af00      	add	r7, sp, #0
 8011186:	6078      	str	r0, [r7, #4]
 8011188:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d106      	bne.n	801119e <tcp_oos_insert_segment+0x1e>
 8011190:	4b3b      	ldr	r3, [pc, #236]	; (8011280 <tcp_oos_insert_segment+0x100>)
 8011192:	f240 421f 	movw	r2, #1055	; 0x41f
 8011196:	493b      	ldr	r1, [pc, #236]	; (8011284 <tcp_oos_insert_segment+0x104>)
 8011198:	483b      	ldr	r0, [pc, #236]	; (8011288 <tcp_oos_insert_segment+0x108>)
 801119a:	f007 fc99 	bl	8018ad0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	68db      	ldr	r3, [r3, #12]
 80111a2:	899b      	ldrh	r3, [r3, #12]
 80111a4:	b29b      	uxth	r3, r3
 80111a6:	4618      	mov	r0, r3
 80111a8:	f7fb fd6b 	bl	800cc82 <lwip_htons>
 80111ac:	4603      	mov	r3, r0
 80111ae:	b2db      	uxtb	r3, r3
 80111b0:	f003 0301 	and.w	r3, r3, #1
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d028      	beq.n	801120a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80111b8:	6838      	ldr	r0, [r7, #0]
 80111ba:	f7fe fa67 	bl	800f68c <tcp_segs_free>
    next = NULL;
 80111be:	2300      	movs	r3, #0
 80111c0:	603b      	str	r3, [r7, #0]
 80111c2:	e056      	b.n	8011272 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	68db      	ldr	r3, [r3, #12]
 80111c8:	899b      	ldrh	r3, [r3, #12]
 80111ca:	b29b      	uxth	r3, r3
 80111cc:	4618      	mov	r0, r3
 80111ce:	f7fb fd58 	bl	800cc82 <lwip_htons>
 80111d2:	4603      	mov	r3, r0
 80111d4:	b2db      	uxtb	r3, r3
 80111d6:	f003 0301 	and.w	r3, r3, #1
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d00d      	beq.n	80111fa <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	68db      	ldr	r3, [r3, #12]
 80111e2:	899b      	ldrh	r3, [r3, #12]
 80111e4:	b29c      	uxth	r4, r3
 80111e6:	2001      	movs	r0, #1
 80111e8:	f7fb fd4b 	bl	800cc82 <lwip_htons>
 80111ec:	4603      	mov	r3, r0
 80111ee:	461a      	mov	r2, r3
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	68db      	ldr	r3, [r3, #12]
 80111f4:	4322      	orrs	r2, r4
 80111f6:	b292      	uxth	r2, r2
 80111f8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80111fa:	683b      	ldr	r3, [r7, #0]
 80111fc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011204:	68f8      	ldr	r0, [r7, #12]
 8011206:	f7fe fa55 	bl	800f6b4 <tcp_seg_free>
    while (next &&
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d00e      	beq.n	801122e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	891b      	ldrh	r3, [r3, #8]
 8011214:	461a      	mov	r2, r3
 8011216:	4b1d      	ldr	r3, [pc, #116]	; (801128c <tcp_oos_insert_segment+0x10c>)
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	441a      	add	r2, r3
 801121c:	683b      	ldr	r3, [r7, #0]
 801121e:	68db      	ldr	r3, [r3, #12]
 8011220:	685b      	ldr	r3, [r3, #4]
 8011222:	6839      	ldr	r1, [r7, #0]
 8011224:	8909      	ldrh	r1, [r1, #8]
 8011226:	440b      	add	r3, r1
 8011228:	1ad3      	subs	r3, r2, r3
    while (next &&
 801122a:	2b00      	cmp	r3, #0
 801122c:	daca      	bge.n	80111c4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d01e      	beq.n	8011272 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	891b      	ldrh	r3, [r3, #8]
 8011238:	461a      	mov	r2, r3
 801123a:	4b14      	ldr	r3, [pc, #80]	; (801128c <tcp_oos_insert_segment+0x10c>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	441a      	add	r2, r3
 8011240:	683b      	ldr	r3, [r7, #0]
 8011242:	68db      	ldr	r3, [r3, #12]
 8011244:	685b      	ldr	r3, [r3, #4]
 8011246:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011248:	2b00      	cmp	r3, #0
 801124a:	dd12      	ble.n	8011272 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801124c:	683b      	ldr	r3, [r7, #0]
 801124e:	68db      	ldr	r3, [r3, #12]
 8011250:	685b      	ldr	r3, [r3, #4]
 8011252:	b29a      	uxth	r2, r3
 8011254:	4b0d      	ldr	r3, [pc, #52]	; (801128c <tcp_oos_insert_segment+0x10c>)
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	b29b      	uxth	r3, r3
 801125a:	1ad3      	subs	r3, r2, r3
 801125c:	b29a      	uxth	r2, r3
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	685a      	ldr	r2, [r3, #4]
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	891b      	ldrh	r3, [r3, #8]
 801126a:	4619      	mov	r1, r3
 801126c:	4610      	mov	r0, r2
 801126e:	f7fc fe23 	bl	800deb8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	683a      	ldr	r2, [r7, #0]
 8011276:	601a      	str	r2, [r3, #0]
}
 8011278:	bf00      	nop
 801127a:	3714      	adds	r7, #20
 801127c:	46bd      	mov	sp, r7
 801127e:	bd90      	pop	{r4, r7, pc}
 8011280:	0801ab30 	.word	0x0801ab30
 8011284:	0801adf0 	.word	0x0801adf0
 8011288:	0801ab7c 	.word	0x0801ab7c
 801128c:	2000049c 	.word	0x2000049c

08011290 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011290:	b5b0      	push	{r4, r5, r7, lr}
 8011292:	b086      	sub	sp, #24
 8011294:	af00      	add	r7, sp, #0
 8011296:	60f8      	str	r0, [r7, #12]
 8011298:	60b9      	str	r1, [r7, #8]
 801129a:	607a      	str	r2, [r7, #4]
 801129c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801129e:	e03e      	b.n	801131e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80112a0:	68bb      	ldr	r3, [r7, #8]
 80112a2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80112a4:	68bb      	ldr	r3, [r7, #8]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80112aa:	697b      	ldr	r3, [r7, #20]
 80112ac:	685b      	ldr	r3, [r3, #4]
 80112ae:	4618      	mov	r0, r3
 80112b0:	f7fd f810 	bl	800e2d4 <pbuf_clen>
 80112b4:	4603      	mov	r3, r0
 80112b6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80112be:	8a7a      	ldrh	r2, [r7, #18]
 80112c0:	429a      	cmp	r2, r3
 80112c2:	d906      	bls.n	80112d2 <tcp_free_acked_segments+0x42>
 80112c4:	4b2a      	ldr	r3, [pc, #168]	; (8011370 <tcp_free_acked_segments+0xe0>)
 80112c6:	f240 4257 	movw	r2, #1111	; 0x457
 80112ca:	492a      	ldr	r1, [pc, #168]	; (8011374 <tcp_free_acked_segments+0xe4>)
 80112cc:	482a      	ldr	r0, [pc, #168]	; (8011378 <tcp_free_acked_segments+0xe8>)
 80112ce:	f007 fbff 	bl	8018ad0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80112d8:	8a7b      	ldrh	r3, [r7, #18]
 80112da:	1ad3      	subs	r3, r2, r3
 80112dc:	b29a      	uxth	r2, r3
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80112e4:	697b      	ldr	r3, [r7, #20]
 80112e6:	891a      	ldrh	r2, [r3, #8]
 80112e8:	4b24      	ldr	r3, [pc, #144]	; (801137c <tcp_free_acked_segments+0xec>)
 80112ea:	881b      	ldrh	r3, [r3, #0]
 80112ec:	4413      	add	r3, r2
 80112ee:	b29a      	uxth	r2, r3
 80112f0:	4b22      	ldr	r3, [pc, #136]	; (801137c <tcp_free_acked_segments+0xec>)
 80112f2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80112f4:	6978      	ldr	r0, [r7, #20]
 80112f6:	f7fe f9dd 	bl	800f6b4 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011300:	2b00      	cmp	r3, #0
 8011302:	d00c      	beq.n	801131e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011304:	68bb      	ldr	r3, [r7, #8]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d109      	bne.n	801131e <tcp_free_acked_segments+0x8e>
 801130a:	683b      	ldr	r3, [r7, #0]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d106      	bne.n	801131e <tcp_free_acked_segments+0x8e>
 8011310:	4b17      	ldr	r3, [pc, #92]	; (8011370 <tcp_free_acked_segments+0xe0>)
 8011312:	f240 4262 	movw	r2, #1122	; 0x462
 8011316:	491a      	ldr	r1, [pc, #104]	; (8011380 <tcp_free_acked_segments+0xf0>)
 8011318:	4817      	ldr	r0, [pc, #92]	; (8011378 <tcp_free_acked_segments+0xe8>)
 801131a:	f007 fbd9 	bl	8018ad0 <iprintf>
  while (seg_list != NULL &&
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d020      	beq.n	8011366 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011324:	68bb      	ldr	r3, [r7, #8]
 8011326:	68db      	ldr	r3, [r3, #12]
 8011328:	685b      	ldr	r3, [r3, #4]
 801132a:	4618      	mov	r0, r3
 801132c:	f7fb fcbe 	bl	800ccac <lwip_htonl>
 8011330:	4604      	mov	r4, r0
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	891b      	ldrh	r3, [r3, #8]
 8011336:	461d      	mov	r5, r3
 8011338:	68bb      	ldr	r3, [r7, #8]
 801133a:	68db      	ldr	r3, [r3, #12]
 801133c:	899b      	ldrh	r3, [r3, #12]
 801133e:	b29b      	uxth	r3, r3
 8011340:	4618      	mov	r0, r3
 8011342:	f7fb fc9e 	bl	800cc82 <lwip_htons>
 8011346:	4603      	mov	r3, r0
 8011348:	b2db      	uxtb	r3, r3
 801134a:	f003 0303 	and.w	r3, r3, #3
 801134e:	2b00      	cmp	r3, #0
 8011350:	d001      	beq.n	8011356 <tcp_free_acked_segments+0xc6>
 8011352:	2301      	movs	r3, #1
 8011354:	e000      	b.n	8011358 <tcp_free_acked_segments+0xc8>
 8011356:	2300      	movs	r3, #0
 8011358:	442b      	add	r3, r5
 801135a:	18e2      	adds	r2, r4, r3
 801135c:	4b09      	ldr	r3, [pc, #36]	; (8011384 <tcp_free_acked_segments+0xf4>)
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011362:	2b00      	cmp	r3, #0
 8011364:	dd9c      	ble.n	80112a0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011366:	68bb      	ldr	r3, [r7, #8]
}
 8011368:	4618      	mov	r0, r3
 801136a:	3718      	adds	r7, #24
 801136c:	46bd      	mov	sp, r7
 801136e:	bdb0      	pop	{r4, r5, r7, pc}
 8011370:	0801ab30 	.word	0x0801ab30
 8011374:	0801ae18 	.word	0x0801ae18
 8011378:	0801ab7c 	.word	0x0801ab7c
 801137c:	200004a4 	.word	0x200004a4
 8011380:	0801ae40 	.word	0x0801ae40
 8011384:	200004a0 	.word	0x200004a0

08011388 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011388:	b5b0      	push	{r4, r5, r7, lr}
 801138a:	b094      	sub	sp, #80	; 0x50
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011390:	2300      	movs	r3, #0
 8011392:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d106      	bne.n	80113a8 <tcp_receive+0x20>
 801139a:	4ba6      	ldr	r3, [pc, #664]	; (8011634 <tcp_receive+0x2ac>)
 801139c:	f240 427b 	movw	r2, #1147	; 0x47b
 80113a0:	49a5      	ldr	r1, [pc, #660]	; (8011638 <tcp_receive+0x2b0>)
 80113a2:	48a6      	ldr	r0, [pc, #664]	; (801163c <tcp_receive+0x2b4>)
 80113a4:	f007 fb94 	bl	8018ad0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	7d1b      	ldrb	r3, [r3, #20]
 80113ac:	2b03      	cmp	r3, #3
 80113ae:	d806      	bhi.n	80113be <tcp_receive+0x36>
 80113b0:	4ba0      	ldr	r3, [pc, #640]	; (8011634 <tcp_receive+0x2ac>)
 80113b2:	f240 427c 	movw	r2, #1148	; 0x47c
 80113b6:	49a2      	ldr	r1, [pc, #648]	; (8011640 <tcp_receive+0x2b8>)
 80113b8:	48a0      	ldr	r0, [pc, #640]	; (801163c <tcp_receive+0x2b4>)
 80113ba:	f007 fb89 	bl	8018ad0 <iprintf>

  if (flags & TCP_ACK) {
 80113be:	4ba1      	ldr	r3, [pc, #644]	; (8011644 <tcp_receive+0x2bc>)
 80113c0:	781b      	ldrb	r3, [r3, #0]
 80113c2:	f003 0310 	and.w	r3, r3, #16
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	f000 8263 	beq.w	8011892 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80113d2:	461a      	mov	r2, r3
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80113d8:	4413      	add	r3, r2
 80113da:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80113e0:	4b99      	ldr	r3, [pc, #612]	; (8011648 <tcp_receive+0x2c0>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	1ad3      	subs	r3, r2, r3
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	db1b      	blt.n	8011422 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80113ee:	4b96      	ldr	r3, [pc, #600]	; (8011648 <tcp_receive+0x2c0>)
 80113f0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80113f2:	429a      	cmp	r2, r3
 80113f4:	d106      	bne.n	8011404 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80113fa:	4b94      	ldr	r3, [pc, #592]	; (801164c <tcp_receive+0x2c4>)
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	1ad3      	subs	r3, r2, r3
 8011400:	2b00      	cmp	r3, #0
 8011402:	db0e      	blt.n	8011422 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011408:	4b90      	ldr	r3, [pc, #576]	; (801164c <tcp_receive+0x2c4>)
 801140a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801140c:	429a      	cmp	r2, r3
 801140e:	d125      	bne.n	801145c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011410:	4b8f      	ldr	r3, [pc, #572]	; (8011650 <tcp_receive+0x2c8>)
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	89db      	ldrh	r3, [r3, #14]
 8011416:	b29a      	uxth	r2, r3
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801141e:	429a      	cmp	r2, r3
 8011420:	d91c      	bls.n	801145c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011422:	4b8b      	ldr	r3, [pc, #556]	; (8011650 <tcp_receive+0x2c8>)
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	89db      	ldrh	r3, [r3, #14]
 8011428:	b29a      	uxth	r2, r3
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801143c:	429a      	cmp	r2, r3
 801143e:	d205      	bcs.n	801144c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801144c:	4b7e      	ldr	r3, [pc, #504]	; (8011648 <tcp_receive+0x2c0>)
 801144e:	681a      	ldr	r2, [r3, #0]
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011454:	4b7d      	ldr	r3, [pc, #500]	; (801164c <tcp_receive+0x2c4>)
 8011456:	681a      	ldr	r2, [r3, #0]
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801145c:	4b7b      	ldr	r3, [pc, #492]	; (801164c <tcp_receive+0x2c4>)
 801145e:	681a      	ldr	r2, [r3, #0]
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011464:	1ad3      	subs	r3, r2, r3
 8011466:	2b00      	cmp	r3, #0
 8011468:	dc58      	bgt.n	801151c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801146a:	4b7a      	ldr	r3, [pc, #488]	; (8011654 <tcp_receive+0x2cc>)
 801146c:	881b      	ldrh	r3, [r3, #0]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d14b      	bne.n	801150a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011476:	687a      	ldr	r2, [r7, #4]
 8011478:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801147c:	4413      	add	r3, r2
 801147e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011480:	429a      	cmp	r2, r3
 8011482:	d142      	bne.n	801150a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801148a:	2b00      	cmp	r3, #0
 801148c:	db3d      	blt.n	801150a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011492:	4b6e      	ldr	r3, [pc, #440]	; (801164c <tcp_receive+0x2c4>)
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	429a      	cmp	r2, r3
 8011498:	d137      	bne.n	801150a <tcp_receive+0x182>
              found_dupack = 1;
 801149a:	2301      	movs	r3, #1
 801149c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80114a4:	2bff      	cmp	r3, #255	; 0xff
 80114a6:	d007      	beq.n	80114b8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80114ae:	3301      	adds	r3, #1
 80114b0:	b2da      	uxtb	r2, r3
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80114be:	2b03      	cmp	r3, #3
 80114c0:	d91b      	bls.n	80114fa <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80114cc:	4413      	add	r3, r2
 80114ce:	b29a      	uxth	r2, r3
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80114d6:	429a      	cmp	r2, r3
 80114d8:	d30a      	bcc.n	80114f0 <tcp_receive+0x168>
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80114e4:	4413      	add	r3, r2
 80114e6:	b29a      	uxth	r2, r3
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80114ee:	e004      	b.n	80114fa <tcp_receive+0x172>
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80114f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011500:	2b02      	cmp	r3, #2
 8011502:	d902      	bls.n	801150a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011504:	6878      	ldr	r0, [r7, #4]
 8011506:	f001 feed 	bl	80132e4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801150a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801150c:	2b00      	cmp	r3, #0
 801150e:	f040 8160 	bne.w	80117d2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	2200      	movs	r2, #0
 8011516:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801151a:	e15a      	b.n	80117d2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801151c:	4b4b      	ldr	r3, [pc, #300]	; (801164c <tcp_receive+0x2c4>)
 801151e:	681a      	ldr	r2, [r3, #0]
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011524:	1ad3      	subs	r3, r2, r3
 8011526:	3b01      	subs	r3, #1
 8011528:	2b00      	cmp	r3, #0
 801152a:	f2c0 814d 	blt.w	80117c8 <tcp_receive+0x440>
 801152e:	4b47      	ldr	r3, [pc, #284]	; (801164c <tcp_receive+0x2c4>)
 8011530:	681a      	ldr	r2, [r3, #0]
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011536:	1ad3      	subs	r3, r2, r3
 8011538:	2b00      	cmp	r3, #0
 801153a:	f300 8145 	bgt.w	80117c8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	8b5b      	ldrh	r3, [r3, #26]
 8011542:	f003 0304 	and.w	r3, r3, #4
 8011546:	2b00      	cmp	r3, #0
 8011548:	d010      	beq.n	801156c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	8b5b      	ldrh	r3, [r3, #26]
 801154e:	f023 0304 	bic.w	r3, r3, #4
 8011552:	b29a      	uxth	r2, r3
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2200      	movs	r2, #0
 8011568:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	2200      	movs	r2, #0
 8011570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801157a:	10db      	asrs	r3, r3, #3
 801157c:	b21b      	sxth	r3, r3
 801157e:	b29a      	uxth	r2, r3
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011586:	b29b      	uxth	r3, r3
 8011588:	4413      	add	r3, r2
 801158a:	b29b      	uxth	r3, r3
 801158c:	b21a      	sxth	r2, r3
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011594:	4b2d      	ldr	r3, [pc, #180]	; (801164c <tcp_receive+0x2c4>)
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	b29a      	uxth	r2, r3
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801159e:	b29b      	uxth	r3, r3
 80115a0:	1ad3      	subs	r3, r2, r3
 80115a2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	2200      	movs	r2, #0
 80115a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80115ac:	4b27      	ldr	r3, [pc, #156]	; (801164c <tcp_receive+0x2c4>)
 80115ae:	681a      	ldr	r2, [r3, #0]
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	7d1b      	ldrb	r3, [r3, #20]
 80115b8:	2b03      	cmp	r3, #3
 80115ba:	f240 8096 	bls.w	80116ea <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80115ca:	429a      	cmp	r2, r3
 80115cc:	d244      	bcs.n	8011658 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	8b5b      	ldrh	r3, [r3, #26]
 80115d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d001      	beq.n	80115de <tcp_receive+0x256>
 80115da:	2301      	movs	r3, #1
 80115dc:	e000      	b.n	80115e0 <tcp_receive+0x258>
 80115de:	2302      	movs	r3, #2
 80115e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80115e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80115e8:	b29a      	uxth	r2, r3
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115ee:	fb12 f303 	smulbb	r3, r2, r3
 80115f2:	b29b      	uxth	r3, r3
 80115f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80115f6:	4293      	cmp	r3, r2
 80115f8:	bf28      	it	cs
 80115fa:	4613      	movcs	r3, r2
 80115fc:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011604:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011606:	4413      	add	r3, r2
 8011608:	b29a      	uxth	r2, r3
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011610:	429a      	cmp	r2, r3
 8011612:	d309      	bcc.n	8011628 <tcp_receive+0x2a0>
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801161a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801161c:	4413      	add	r3, r2
 801161e:	b29a      	uxth	r2, r3
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011626:	e060      	b.n	80116ea <tcp_receive+0x362>
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801162e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011632:	e05a      	b.n	80116ea <tcp_receive+0x362>
 8011634:	0801ab30 	.word	0x0801ab30
 8011638:	0801ae60 	.word	0x0801ae60
 801163c:	0801ab7c 	.word	0x0801ab7c
 8011640:	0801ae7c 	.word	0x0801ae7c
 8011644:	200004a8 	.word	0x200004a8
 8011648:	2000049c 	.word	0x2000049c
 801164c:	200004a0 	.word	0x200004a0
 8011650:	2000048c 	.word	0x2000048c
 8011654:	200004a6 	.word	0x200004a6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801165e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011660:	4413      	add	r3, r2
 8011662:	b29a      	uxth	r2, r3
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801166a:	429a      	cmp	r2, r3
 801166c:	d309      	bcc.n	8011682 <tcp_receive+0x2fa>
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011674:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011676:	4413      	add	r3, r2
 8011678:	b29a      	uxth	r2, r3
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011680:	e004      	b.n	801168c <tcp_receive+0x304>
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011688:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011698:	429a      	cmp	r2, r3
 801169a:	d326      	bcc.n	80116ea <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80116a8:	1ad3      	subs	r3, r2, r3
 80116aa:	b29a      	uxth	r2, r3
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116bc:	4413      	add	r3, r2
 80116be:	b29a      	uxth	r2, r3
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80116c6:	429a      	cmp	r2, r3
 80116c8:	d30a      	bcc.n	80116e0 <tcp_receive+0x358>
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80116d4:	4413      	add	r3, r2
 80116d6:	b29a      	uxth	r2, r3
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80116de:	e004      	b.n	80116ea <tcp_receive+0x362>
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80116e6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116f2:	4a98      	ldr	r2, [pc, #608]	; (8011954 <tcp_receive+0x5cc>)
 80116f4:	6878      	ldr	r0, [r7, #4]
 80116f6:	f7ff fdcb 	bl	8011290 <tcp_free_acked_segments>
 80116fa:	4602      	mov	r2, r0
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011708:	4a93      	ldr	r2, [pc, #588]	; (8011958 <tcp_receive+0x5d0>)
 801170a:	6878      	ldr	r0, [r7, #4]
 801170c:	f7ff fdc0 	bl	8011290 <tcp_free_acked_segments>
 8011710:	4602      	mov	r2, r0
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801171a:	2b00      	cmp	r3, #0
 801171c:	d104      	bne.n	8011728 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011724:	861a      	strh	r2, [r3, #48]	; 0x30
 8011726:	e002      	b.n	801172e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	2200      	movs	r2, #0
 801172c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	2200      	movs	r2, #0
 8011732:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011738:	2b00      	cmp	r3, #0
 801173a:	d103      	bne.n	8011744 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	2200      	movs	r2, #0
 8011740:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801174a:	4b84      	ldr	r3, [pc, #528]	; (801195c <tcp_receive+0x5d4>)
 801174c:	881b      	ldrh	r3, [r3, #0]
 801174e:	4413      	add	r3, r2
 8011750:	b29a      	uxth	r2, r3
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	8b5b      	ldrh	r3, [r3, #26]
 801175c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011760:	2b00      	cmp	r3, #0
 8011762:	d035      	beq.n	80117d0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011768:	2b00      	cmp	r3, #0
 801176a:	d118      	bne.n	801179e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011770:	2b00      	cmp	r3, #0
 8011772:	d00c      	beq.n	801178e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801177c:	68db      	ldr	r3, [r3, #12]
 801177e:	685b      	ldr	r3, [r3, #4]
 8011780:	4618      	mov	r0, r3
 8011782:	f7fb fa93 	bl	800ccac <lwip_htonl>
 8011786:	4603      	mov	r3, r0
 8011788:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801178a:	2b00      	cmp	r3, #0
 801178c:	dc20      	bgt.n	80117d0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	8b5b      	ldrh	r3, [r3, #26]
 8011792:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011796:	b29a      	uxth	r2, r3
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801179c:	e018      	b.n	80117d0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117a6:	68db      	ldr	r3, [r3, #12]
 80117a8:	685b      	ldr	r3, [r3, #4]
 80117aa:	4618      	mov	r0, r3
 80117ac:	f7fb fa7e 	bl	800ccac <lwip_htonl>
 80117b0:	4603      	mov	r3, r0
 80117b2:	1ae3      	subs	r3, r4, r3
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	dc0b      	bgt.n	80117d0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	8b5b      	ldrh	r3, [r3, #26]
 80117bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80117c0:	b29a      	uxth	r2, r3
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80117c6:	e003      	b.n	80117d0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80117c8:	6878      	ldr	r0, [r7, #4]
 80117ca:	f001 ff83 	bl	80136d4 <tcp_send_empty_ack>
 80117ce:	e000      	b.n	80117d2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80117d0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d05b      	beq.n	8011892 <tcp_receive+0x50a>
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80117de:	4b60      	ldr	r3, [pc, #384]	; (8011960 <tcp_receive+0x5d8>)
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	1ad3      	subs	r3, r2, r3
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	da54      	bge.n	8011892 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80117e8:	4b5e      	ldr	r3, [pc, #376]	; (8011964 <tcp_receive+0x5dc>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	b29a      	uxth	r2, r3
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117f2:	b29b      	uxth	r3, r3
 80117f4:	1ad3      	subs	r3, r2, r3
 80117f6:	b29b      	uxth	r3, r3
 80117f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80117fc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011806:	10db      	asrs	r3, r3, #3
 8011808:	b21b      	sxth	r3, r3
 801180a:	b29b      	uxth	r3, r3
 801180c:	1ad3      	subs	r3, r2, r3
 801180e:	b29b      	uxth	r3, r3
 8011810:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801181a:	b29a      	uxth	r2, r3
 801181c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011820:	4413      	add	r3, r2
 8011822:	b29b      	uxth	r3, r3
 8011824:	b21a      	sxth	r2, r3
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801182a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801182e:	2b00      	cmp	r3, #0
 8011830:	da05      	bge.n	801183e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8011832:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011836:	425b      	negs	r3, r3
 8011838:	b29b      	uxth	r3, r3
 801183a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801183e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011848:	109b      	asrs	r3, r3, #2
 801184a:	b21b      	sxth	r3, r3
 801184c:	b29b      	uxth	r3, r3
 801184e:	1ad3      	subs	r3, r2, r3
 8011850:	b29b      	uxth	r3, r3
 8011852:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801185c:	b29a      	uxth	r2, r3
 801185e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011862:	4413      	add	r3, r2
 8011864:	b29b      	uxth	r3, r3
 8011866:	b21a      	sxth	r2, r3
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011872:	10db      	asrs	r3, r3, #3
 8011874:	b21b      	sxth	r3, r3
 8011876:	b29a      	uxth	r2, r3
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801187e:	b29b      	uxth	r3, r3
 8011880:	4413      	add	r3, r2
 8011882:	b29b      	uxth	r3, r3
 8011884:	b21a      	sxth	r2, r3
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2200      	movs	r2, #0
 8011890:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011892:	4b35      	ldr	r3, [pc, #212]	; (8011968 <tcp_receive+0x5e0>)
 8011894:	881b      	ldrh	r3, [r3, #0]
 8011896:	2b00      	cmp	r3, #0
 8011898:	f000 84e1 	beq.w	801225e <tcp_receive+0xed6>
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	7d1b      	ldrb	r3, [r3, #20]
 80118a0:	2b06      	cmp	r3, #6
 80118a2:	f200 84dc 	bhi.w	801225e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80118aa:	4b30      	ldr	r3, [pc, #192]	; (801196c <tcp_receive+0x5e4>)
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	1ad3      	subs	r3, r2, r3
 80118b0:	3b01      	subs	r3, #1
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	f2c0 808e 	blt.w	80119d4 <tcp_receive+0x64c>
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80118bc:	4b2a      	ldr	r3, [pc, #168]	; (8011968 <tcp_receive+0x5e0>)
 80118be:	881b      	ldrh	r3, [r3, #0]
 80118c0:	4619      	mov	r1, r3
 80118c2:	4b2a      	ldr	r3, [pc, #168]	; (801196c <tcp_receive+0x5e4>)
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	440b      	add	r3, r1
 80118c8:	1ad3      	subs	r3, r2, r3
 80118ca:	3301      	adds	r3, #1
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	f300 8081 	bgt.w	80119d4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80118d2:	4b27      	ldr	r3, [pc, #156]	; (8011970 <tcp_receive+0x5e8>)
 80118d4:	685b      	ldr	r3, [r3, #4]
 80118d6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80118dc:	4b23      	ldr	r3, [pc, #140]	; (801196c <tcp_receive+0x5e4>)
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	1ad3      	subs	r3, r2, r3
 80118e2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80118e4:	4b22      	ldr	r3, [pc, #136]	; (8011970 <tcp_receive+0x5e8>)
 80118e6:	685b      	ldr	r3, [r3, #4]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d106      	bne.n	80118fa <tcp_receive+0x572>
 80118ec:	4b21      	ldr	r3, [pc, #132]	; (8011974 <tcp_receive+0x5ec>)
 80118ee:	f240 5294 	movw	r2, #1428	; 0x594
 80118f2:	4921      	ldr	r1, [pc, #132]	; (8011978 <tcp_receive+0x5f0>)
 80118f4:	4821      	ldr	r0, [pc, #132]	; (801197c <tcp_receive+0x5f4>)
 80118f6:	f007 f8eb 	bl	8018ad0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80118fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118fc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011900:	4293      	cmp	r3, r2
 8011902:	d906      	bls.n	8011912 <tcp_receive+0x58a>
 8011904:	4b1b      	ldr	r3, [pc, #108]	; (8011974 <tcp_receive+0x5ec>)
 8011906:	f240 5295 	movw	r2, #1429	; 0x595
 801190a:	491d      	ldr	r1, [pc, #116]	; (8011980 <tcp_receive+0x5f8>)
 801190c:	481b      	ldr	r0, [pc, #108]	; (801197c <tcp_receive+0x5f4>)
 801190e:	f007 f8df 	bl	8018ad0 <iprintf>
      off = (u16_t)off32;
 8011912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011914:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011918:	4b15      	ldr	r3, [pc, #84]	; (8011970 <tcp_receive+0x5e8>)
 801191a:	685b      	ldr	r3, [r3, #4]
 801191c:	891b      	ldrh	r3, [r3, #8]
 801191e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011922:	429a      	cmp	r2, r3
 8011924:	d906      	bls.n	8011934 <tcp_receive+0x5ac>
 8011926:	4b13      	ldr	r3, [pc, #76]	; (8011974 <tcp_receive+0x5ec>)
 8011928:	f240 5297 	movw	r2, #1431	; 0x597
 801192c:	4915      	ldr	r1, [pc, #84]	; (8011984 <tcp_receive+0x5fc>)
 801192e:	4813      	ldr	r0, [pc, #76]	; (801197c <tcp_receive+0x5f4>)
 8011930:	f007 f8ce 	bl	8018ad0 <iprintf>
      inseg.len -= off;
 8011934:	4b0e      	ldr	r3, [pc, #56]	; (8011970 <tcp_receive+0x5e8>)
 8011936:	891a      	ldrh	r2, [r3, #8]
 8011938:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801193c:	1ad3      	subs	r3, r2, r3
 801193e:	b29a      	uxth	r2, r3
 8011940:	4b0b      	ldr	r3, [pc, #44]	; (8011970 <tcp_receive+0x5e8>)
 8011942:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011944:	4b0a      	ldr	r3, [pc, #40]	; (8011970 <tcp_receive+0x5e8>)
 8011946:	685b      	ldr	r3, [r3, #4]
 8011948:	891a      	ldrh	r2, [r3, #8]
 801194a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801194e:	1ad3      	subs	r3, r2, r3
 8011950:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011952:	e029      	b.n	80119a8 <tcp_receive+0x620>
 8011954:	0801ae98 	.word	0x0801ae98
 8011958:	0801aea0 	.word	0x0801aea0
 801195c:	200004a4 	.word	0x200004a4
 8011960:	200004a0 	.word	0x200004a0
 8011964:	20007ed0 	.word	0x20007ed0
 8011968:	200004a6 	.word	0x200004a6
 801196c:	2000049c 	.word	0x2000049c
 8011970:	2000047c 	.word	0x2000047c
 8011974:	0801ab30 	.word	0x0801ab30
 8011978:	0801aea8 	.word	0x0801aea8
 801197c:	0801ab7c 	.word	0x0801ab7c
 8011980:	0801aeb8 	.word	0x0801aeb8
 8011984:	0801aec8 	.word	0x0801aec8
        off -= p->len;
 8011988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801198a:	895b      	ldrh	r3, [r3, #10]
 801198c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011990:	1ad3      	subs	r3, r2, r3
 8011992:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8011996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011998:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801199a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801199c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801199e:	2200      	movs	r2, #0
 80119a0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80119a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80119a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80119aa:	895b      	ldrh	r3, [r3, #10]
 80119ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80119b0:	429a      	cmp	r2, r3
 80119b2:	d8e9      	bhi.n	8011988 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80119b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80119b8:	4619      	mov	r1, r3
 80119ba:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80119bc:	f7fc fb7c 	bl	800e0b8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119c4:	4a91      	ldr	r2, [pc, #580]	; (8011c0c <tcp_receive+0x884>)
 80119c6:	6013      	str	r3, [r2, #0]
 80119c8:	4b91      	ldr	r3, [pc, #580]	; (8011c10 <tcp_receive+0x888>)
 80119ca:	68db      	ldr	r3, [r3, #12]
 80119cc:	4a8f      	ldr	r2, [pc, #572]	; (8011c0c <tcp_receive+0x884>)
 80119ce:	6812      	ldr	r2, [r2, #0]
 80119d0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80119d2:	e00d      	b.n	80119f0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80119d4:	4b8d      	ldr	r3, [pc, #564]	; (8011c0c <tcp_receive+0x884>)
 80119d6:	681a      	ldr	r2, [r3, #0]
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119dc:	1ad3      	subs	r3, r2, r3
 80119de:	2b00      	cmp	r3, #0
 80119e0:	da06      	bge.n	80119f0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	8b5b      	ldrh	r3, [r3, #26]
 80119e6:	f043 0302 	orr.w	r3, r3, #2
 80119ea:	b29a      	uxth	r2, r3
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80119f0:	4b86      	ldr	r3, [pc, #536]	; (8011c0c <tcp_receive+0x884>)
 80119f2:	681a      	ldr	r2, [r3, #0]
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119f8:	1ad3      	subs	r3, r2, r3
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	f2c0 842a 	blt.w	8012254 <tcp_receive+0xecc>
 8011a00:	4b82      	ldr	r3, [pc, #520]	; (8011c0c <tcp_receive+0x884>)
 8011a02:	681a      	ldr	r2, [r3, #0]
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a08:	6879      	ldr	r1, [r7, #4]
 8011a0a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011a0c:	440b      	add	r3, r1
 8011a0e:	1ad3      	subs	r3, r2, r3
 8011a10:	3301      	adds	r3, #1
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	f300 841e 	bgt.w	8012254 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a1c:	4b7b      	ldr	r3, [pc, #492]	; (8011c0c <tcp_receive+0x884>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	429a      	cmp	r2, r3
 8011a22:	f040 829a 	bne.w	8011f5a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011a26:	4b7a      	ldr	r3, [pc, #488]	; (8011c10 <tcp_receive+0x888>)
 8011a28:	891c      	ldrh	r4, [r3, #8]
 8011a2a:	4b79      	ldr	r3, [pc, #484]	; (8011c10 <tcp_receive+0x888>)
 8011a2c:	68db      	ldr	r3, [r3, #12]
 8011a2e:	899b      	ldrh	r3, [r3, #12]
 8011a30:	b29b      	uxth	r3, r3
 8011a32:	4618      	mov	r0, r3
 8011a34:	f7fb f925 	bl	800cc82 <lwip_htons>
 8011a38:	4603      	mov	r3, r0
 8011a3a:	b2db      	uxtb	r3, r3
 8011a3c:	f003 0303 	and.w	r3, r3, #3
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d001      	beq.n	8011a48 <tcp_receive+0x6c0>
 8011a44:	2301      	movs	r3, #1
 8011a46:	e000      	b.n	8011a4a <tcp_receive+0x6c2>
 8011a48:	2300      	movs	r3, #0
 8011a4a:	4423      	add	r3, r4
 8011a4c:	b29a      	uxth	r2, r3
 8011a4e:	4b71      	ldr	r3, [pc, #452]	; (8011c14 <tcp_receive+0x88c>)
 8011a50:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011a56:	4b6f      	ldr	r3, [pc, #444]	; (8011c14 <tcp_receive+0x88c>)
 8011a58:	881b      	ldrh	r3, [r3, #0]
 8011a5a:	429a      	cmp	r2, r3
 8011a5c:	d275      	bcs.n	8011b4a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011a5e:	4b6c      	ldr	r3, [pc, #432]	; (8011c10 <tcp_receive+0x888>)
 8011a60:	68db      	ldr	r3, [r3, #12]
 8011a62:	899b      	ldrh	r3, [r3, #12]
 8011a64:	b29b      	uxth	r3, r3
 8011a66:	4618      	mov	r0, r3
 8011a68:	f7fb f90b 	bl	800cc82 <lwip_htons>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	b2db      	uxtb	r3, r3
 8011a70:	f003 0301 	and.w	r3, r3, #1
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d01f      	beq.n	8011ab8 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011a78:	4b65      	ldr	r3, [pc, #404]	; (8011c10 <tcp_receive+0x888>)
 8011a7a:	68db      	ldr	r3, [r3, #12]
 8011a7c:	899b      	ldrh	r3, [r3, #12]
 8011a7e:	b29b      	uxth	r3, r3
 8011a80:	b21b      	sxth	r3, r3
 8011a82:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011a86:	b21c      	sxth	r4, r3
 8011a88:	4b61      	ldr	r3, [pc, #388]	; (8011c10 <tcp_receive+0x888>)
 8011a8a:	68db      	ldr	r3, [r3, #12]
 8011a8c:	899b      	ldrh	r3, [r3, #12]
 8011a8e:	b29b      	uxth	r3, r3
 8011a90:	4618      	mov	r0, r3
 8011a92:	f7fb f8f6 	bl	800cc82 <lwip_htons>
 8011a96:	4603      	mov	r3, r0
 8011a98:	b2db      	uxtb	r3, r3
 8011a9a:	b29b      	uxth	r3, r3
 8011a9c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011aa0:	b29b      	uxth	r3, r3
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	f7fb f8ed 	bl	800cc82 <lwip_htons>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	b21b      	sxth	r3, r3
 8011aac:	4323      	orrs	r3, r4
 8011aae:	b21a      	sxth	r2, r3
 8011ab0:	4b57      	ldr	r3, [pc, #348]	; (8011c10 <tcp_receive+0x888>)
 8011ab2:	68db      	ldr	r3, [r3, #12]
 8011ab4:	b292      	uxth	r2, r2
 8011ab6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011abc:	4b54      	ldr	r3, [pc, #336]	; (8011c10 <tcp_receive+0x888>)
 8011abe:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011ac0:	4b53      	ldr	r3, [pc, #332]	; (8011c10 <tcp_receive+0x888>)
 8011ac2:	68db      	ldr	r3, [r3, #12]
 8011ac4:	899b      	ldrh	r3, [r3, #12]
 8011ac6:	b29b      	uxth	r3, r3
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f7fb f8da 	bl	800cc82 <lwip_htons>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	b2db      	uxtb	r3, r3
 8011ad2:	f003 0302 	and.w	r3, r3, #2
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d005      	beq.n	8011ae6 <tcp_receive+0x75e>
            inseg.len -= 1;
 8011ada:	4b4d      	ldr	r3, [pc, #308]	; (8011c10 <tcp_receive+0x888>)
 8011adc:	891b      	ldrh	r3, [r3, #8]
 8011ade:	3b01      	subs	r3, #1
 8011ae0:	b29a      	uxth	r2, r3
 8011ae2:	4b4b      	ldr	r3, [pc, #300]	; (8011c10 <tcp_receive+0x888>)
 8011ae4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011ae6:	4b4a      	ldr	r3, [pc, #296]	; (8011c10 <tcp_receive+0x888>)
 8011ae8:	685a      	ldr	r2, [r3, #4]
 8011aea:	4b49      	ldr	r3, [pc, #292]	; (8011c10 <tcp_receive+0x888>)
 8011aec:	891b      	ldrh	r3, [r3, #8]
 8011aee:	4619      	mov	r1, r3
 8011af0:	4610      	mov	r0, r2
 8011af2:	f7fc f9e1 	bl	800deb8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011af6:	4b46      	ldr	r3, [pc, #280]	; (8011c10 <tcp_receive+0x888>)
 8011af8:	891c      	ldrh	r4, [r3, #8]
 8011afa:	4b45      	ldr	r3, [pc, #276]	; (8011c10 <tcp_receive+0x888>)
 8011afc:	68db      	ldr	r3, [r3, #12]
 8011afe:	899b      	ldrh	r3, [r3, #12]
 8011b00:	b29b      	uxth	r3, r3
 8011b02:	4618      	mov	r0, r3
 8011b04:	f7fb f8bd 	bl	800cc82 <lwip_htons>
 8011b08:	4603      	mov	r3, r0
 8011b0a:	b2db      	uxtb	r3, r3
 8011b0c:	f003 0303 	and.w	r3, r3, #3
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d001      	beq.n	8011b18 <tcp_receive+0x790>
 8011b14:	2301      	movs	r3, #1
 8011b16:	e000      	b.n	8011b1a <tcp_receive+0x792>
 8011b18:	2300      	movs	r3, #0
 8011b1a:	4423      	add	r3, r4
 8011b1c:	b29a      	uxth	r2, r3
 8011b1e:	4b3d      	ldr	r3, [pc, #244]	; (8011c14 <tcp_receive+0x88c>)
 8011b20:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011b22:	4b3c      	ldr	r3, [pc, #240]	; (8011c14 <tcp_receive+0x88c>)
 8011b24:	881b      	ldrh	r3, [r3, #0]
 8011b26:	461a      	mov	r2, r3
 8011b28:	4b38      	ldr	r3, [pc, #224]	; (8011c0c <tcp_receive+0x884>)
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	441a      	add	r2, r3
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b32:	6879      	ldr	r1, [r7, #4]
 8011b34:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011b36:	440b      	add	r3, r1
 8011b38:	429a      	cmp	r2, r3
 8011b3a:	d006      	beq.n	8011b4a <tcp_receive+0x7c2>
 8011b3c:	4b36      	ldr	r3, [pc, #216]	; (8011c18 <tcp_receive+0x890>)
 8011b3e:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8011b42:	4936      	ldr	r1, [pc, #216]	; (8011c1c <tcp_receive+0x894>)
 8011b44:	4836      	ldr	r0, [pc, #216]	; (8011c20 <tcp_receive+0x898>)
 8011b46:	f006 ffc3 	bl	8018ad0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	f000 80e7 	beq.w	8011d22 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011b54:	4b2e      	ldr	r3, [pc, #184]	; (8011c10 <tcp_receive+0x888>)
 8011b56:	68db      	ldr	r3, [r3, #12]
 8011b58:	899b      	ldrh	r3, [r3, #12]
 8011b5a:	b29b      	uxth	r3, r3
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	f7fb f890 	bl	800cc82 <lwip_htons>
 8011b62:	4603      	mov	r3, r0
 8011b64:	b2db      	uxtb	r3, r3
 8011b66:	f003 0301 	and.w	r3, r3, #1
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d010      	beq.n	8011b90 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011b6e:	e00a      	b.n	8011b86 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b74:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b7a:	681a      	ldr	r2, [r3, #0]
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011b80:	68f8      	ldr	r0, [r7, #12]
 8011b82:	f7fd fd97 	bl	800f6b4 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d1f0      	bne.n	8011b70 <tcp_receive+0x7e8>
 8011b8e:	e0c8      	b.n	8011d22 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b94:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011b96:	e052      	b.n	8011c3e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b9a:	68db      	ldr	r3, [r3, #12]
 8011b9c:	899b      	ldrh	r3, [r3, #12]
 8011b9e:	b29b      	uxth	r3, r3
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	f7fb f86e 	bl	800cc82 <lwip_htons>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	b2db      	uxtb	r3, r3
 8011baa:	f003 0301 	and.w	r3, r3, #1
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d03d      	beq.n	8011c2e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011bb2:	4b17      	ldr	r3, [pc, #92]	; (8011c10 <tcp_receive+0x888>)
 8011bb4:	68db      	ldr	r3, [r3, #12]
 8011bb6:	899b      	ldrh	r3, [r3, #12]
 8011bb8:	b29b      	uxth	r3, r3
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f7fb f861 	bl	800cc82 <lwip_htons>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	b2db      	uxtb	r3, r3
 8011bc4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d130      	bne.n	8011c2e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011bcc:	4b10      	ldr	r3, [pc, #64]	; (8011c10 <tcp_receive+0x888>)
 8011bce:	68db      	ldr	r3, [r3, #12]
 8011bd0:	899b      	ldrh	r3, [r3, #12]
 8011bd2:	b29c      	uxth	r4, r3
 8011bd4:	2001      	movs	r0, #1
 8011bd6:	f7fb f854 	bl	800cc82 <lwip_htons>
 8011bda:	4603      	mov	r3, r0
 8011bdc:	461a      	mov	r2, r3
 8011bde:	4b0c      	ldr	r3, [pc, #48]	; (8011c10 <tcp_receive+0x888>)
 8011be0:	68db      	ldr	r3, [r3, #12]
 8011be2:	4322      	orrs	r2, r4
 8011be4:	b292      	uxth	r2, r2
 8011be6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011be8:	4b09      	ldr	r3, [pc, #36]	; (8011c10 <tcp_receive+0x888>)
 8011bea:	891c      	ldrh	r4, [r3, #8]
 8011bec:	4b08      	ldr	r3, [pc, #32]	; (8011c10 <tcp_receive+0x888>)
 8011bee:	68db      	ldr	r3, [r3, #12]
 8011bf0:	899b      	ldrh	r3, [r3, #12]
 8011bf2:	b29b      	uxth	r3, r3
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	f7fb f844 	bl	800cc82 <lwip_htons>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	b2db      	uxtb	r3, r3
 8011bfe:	f003 0303 	and.w	r3, r3, #3
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d00e      	beq.n	8011c24 <tcp_receive+0x89c>
 8011c06:	2301      	movs	r3, #1
 8011c08:	e00d      	b.n	8011c26 <tcp_receive+0x89e>
 8011c0a:	bf00      	nop
 8011c0c:	2000049c 	.word	0x2000049c
 8011c10:	2000047c 	.word	0x2000047c
 8011c14:	200004a6 	.word	0x200004a6
 8011c18:	0801ab30 	.word	0x0801ab30
 8011c1c:	0801aed8 	.word	0x0801aed8
 8011c20:	0801ab7c 	.word	0x0801ab7c
 8011c24:	2300      	movs	r3, #0
 8011c26:	4423      	add	r3, r4
 8011c28:	b29a      	uxth	r2, r3
 8011c2a:	4b98      	ldr	r3, [pc, #608]	; (8011e8c <tcp_receive+0xb04>)
 8011c2c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c30:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011c38:	6938      	ldr	r0, [r7, #16]
 8011c3a:	f7fd fd3b 	bl	800f6b4 <tcp_seg_free>
            while (next &&
 8011c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d00e      	beq.n	8011c62 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011c44:	4b91      	ldr	r3, [pc, #580]	; (8011e8c <tcp_receive+0xb04>)
 8011c46:	881b      	ldrh	r3, [r3, #0]
 8011c48:	461a      	mov	r2, r3
 8011c4a:	4b91      	ldr	r3, [pc, #580]	; (8011e90 <tcp_receive+0xb08>)
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	441a      	add	r2, r3
 8011c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c52:	68db      	ldr	r3, [r3, #12]
 8011c54:	685b      	ldr	r3, [r3, #4]
 8011c56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011c58:	8909      	ldrh	r1, [r1, #8]
 8011c5a:	440b      	add	r3, r1
 8011c5c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	da9a      	bge.n	8011b98 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d059      	beq.n	8011d1c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8011c68:	4b88      	ldr	r3, [pc, #544]	; (8011e8c <tcp_receive+0xb04>)
 8011c6a:	881b      	ldrh	r3, [r3, #0]
 8011c6c:	461a      	mov	r2, r3
 8011c6e:	4b88      	ldr	r3, [pc, #544]	; (8011e90 <tcp_receive+0xb08>)
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	441a      	add	r2, r3
 8011c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c76:	68db      	ldr	r3, [r3, #12]
 8011c78:	685b      	ldr	r3, [r3, #4]
 8011c7a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	dd4d      	ble.n	8011d1c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c82:	68db      	ldr	r3, [r3, #12]
 8011c84:	685b      	ldr	r3, [r3, #4]
 8011c86:	b29a      	uxth	r2, r3
 8011c88:	4b81      	ldr	r3, [pc, #516]	; (8011e90 <tcp_receive+0xb08>)
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	b29b      	uxth	r3, r3
 8011c8e:	1ad3      	subs	r3, r2, r3
 8011c90:	b29a      	uxth	r2, r3
 8011c92:	4b80      	ldr	r3, [pc, #512]	; (8011e94 <tcp_receive+0xb0c>)
 8011c94:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011c96:	4b7f      	ldr	r3, [pc, #508]	; (8011e94 <tcp_receive+0xb0c>)
 8011c98:	68db      	ldr	r3, [r3, #12]
 8011c9a:	899b      	ldrh	r3, [r3, #12]
 8011c9c:	b29b      	uxth	r3, r3
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	f7fa ffef 	bl	800cc82 <lwip_htons>
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	b2db      	uxtb	r3, r3
 8011ca8:	f003 0302 	and.w	r3, r3, #2
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d005      	beq.n	8011cbc <tcp_receive+0x934>
                inseg.len -= 1;
 8011cb0:	4b78      	ldr	r3, [pc, #480]	; (8011e94 <tcp_receive+0xb0c>)
 8011cb2:	891b      	ldrh	r3, [r3, #8]
 8011cb4:	3b01      	subs	r3, #1
 8011cb6:	b29a      	uxth	r2, r3
 8011cb8:	4b76      	ldr	r3, [pc, #472]	; (8011e94 <tcp_receive+0xb0c>)
 8011cba:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011cbc:	4b75      	ldr	r3, [pc, #468]	; (8011e94 <tcp_receive+0xb0c>)
 8011cbe:	685a      	ldr	r2, [r3, #4]
 8011cc0:	4b74      	ldr	r3, [pc, #464]	; (8011e94 <tcp_receive+0xb0c>)
 8011cc2:	891b      	ldrh	r3, [r3, #8]
 8011cc4:	4619      	mov	r1, r3
 8011cc6:	4610      	mov	r0, r2
 8011cc8:	f7fc f8f6 	bl	800deb8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011ccc:	4b71      	ldr	r3, [pc, #452]	; (8011e94 <tcp_receive+0xb0c>)
 8011cce:	891c      	ldrh	r4, [r3, #8]
 8011cd0:	4b70      	ldr	r3, [pc, #448]	; (8011e94 <tcp_receive+0xb0c>)
 8011cd2:	68db      	ldr	r3, [r3, #12]
 8011cd4:	899b      	ldrh	r3, [r3, #12]
 8011cd6:	b29b      	uxth	r3, r3
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f7fa ffd2 	bl	800cc82 <lwip_htons>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	b2db      	uxtb	r3, r3
 8011ce2:	f003 0303 	and.w	r3, r3, #3
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d001      	beq.n	8011cee <tcp_receive+0x966>
 8011cea:	2301      	movs	r3, #1
 8011cec:	e000      	b.n	8011cf0 <tcp_receive+0x968>
 8011cee:	2300      	movs	r3, #0
 8011cf0:	4423      	add	r3, r4
 8011cf2:	b29a      	uxth	r2, r3
 8011cf4:	4b65      	ldr	r3, [pc, #404]	; (8011e8c <tcp_receive+0xb04>)
 8011cf6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011cf8:	4b64      	ldr	r3, [pc, #400]	; (8011e8c <tcp_receive+0xb04>)
 8011cfa:	881b      	ldrh	r3, [r3, #0]
 8011cfc:	461a      	mov	r2, r3
 8011cfe:	4b64      	ldr	r3, [pc, #400]	; (8011e90 <tcp_receive+0xb08>)
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	441a      	add	r2, r3
 8011d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d06:	68db      	ldr	r3, [r3, #12]
 8011d08:	685b      	ldr	r3, [r3, #4]
 8011d0a:	429a      	cmp	r2, r3
 8011d0c:	d006      	beq.n	8011d1c <tcp_receive+0x994>
 8011d0e:	4b62      	ldr	r3, [pc, #392]	; (8011e98 <tcp_receive+0xb10>)
 8011d10:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8011d14:	4961      	ldr	r1, [pc, #388]	; (8011e9c <tcp_receive+0xb14>)
 8011d16:	4862      	ldr	r0, [pc, #392]	; (8011ea0 <tcp_receive+0xb18>)
 8011d18:	f006 feda 	bl	8018ad0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011d20:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011d22:	4b5a      	ldr	r3, [pc, #360]	; (8011e8c <tcp_receive+0xb04>)
 8011d24:	881b      	ldrh	r3, [r3, #0]
 8011d26:	461a      	mov	r2, r3
 8011d28:	4b59      	ldr	r3, [pc, #356]	; (8011e90 <tcp_receive+0xb08>)
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	441a      	add	r2, r3
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011d36:	4b55      	ldr	r3, [pc, #340]	; (8011e8c <tcp_receive+0xb04>)
 8011d38:	881b      	ldrh	r3, [r3, #0]
 8011d3a:	429a      	cmp	r2, r3
 8011d3c:	d206      	bcs.n	8011d4c <tcp_receive+0x9c4>
 8011d3e:	4b56      	ldr	r3, [pc, #344]	; (8011e98 <tcp_receive+0xb10>)
 8011d40:	f240 6207 	movw	r2, #1543	; 0x607
 8011d44:	4957      	ldr	r1, [pc, #348]	; (8011ea4 <tcp_receive+0xb1c>)
 8011d46:	4856      	ldr	r0, [pc, #344]	; (8011ea0 <tcp_receive+0xb18>)
 8011d48:	f006 fec2 	bl	8018ad0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011d50:	4b4e      	ldr	r3, [pc, #312]	; (8011e8c <tcp_receive+0xb04>)
 8011d52:	881b      	ldrh	r3, [r3, #0]
 8011d54:	1ad3      	subs	r3, r2, r3
 8011d56:	b29a      	uxth	r2, r3
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011d5c:	6878      	ldr	r0, [r7, #4]
 8011d5e:	f7fc ffcd 	bl	800ecfc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011d62:	4b4c      	ldr	r3, [pc, #304]	; (8011e94 <tcp_receive+0xb0c>)
 8011d64:	685b      	ldr	r3, [r3, #4]
 8011d66:	891b      	ldrh	r3, [r3, #8]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d006      	beq.n	8011d7a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011d6c:	4b49      	ldr	r3, [pc, #292]	; (8011e94 <tcp_receive+0xb0c>)
 8011d6e:	685b      	ldr	r3, [r3, #4]
 8011d70:	4a4d      	ldr	r2, [pc, #308]	; (8011ea8 <tcp_receive+0xb20>)
 8011d72:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011d74:	4b47      	ldr	r3, [pc, #284]	; (8011e94 <tcp_receive+0xb0c>)
 8011d76:	2200      	movs	r2, #0
 8011d78:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011d7a:	4b46      	ldr	r3, [pc, #280]	; (8011e94 <tcp_receive+0xb0c>)
 8011d7c:	68db      	ldr	r3, [r3, #12]
 8011d7e:	899b      	ldrh	r3, [r3, #12]
 8011d80:	b29b      	uxth	r3, r3
 8011d82:	4618      	mov	r0, r3
 8011d84:	f7fa ff7d 	bl	800cc82 <lwip_htons>
 8011d88:	4603      	mov	r3, r0
 8011d8a:	b2db      	uxtb	r3, r3
 8011d8c:	f003 0301 	and.w	r3, r3, #1
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	f000 80b8 	beq.w	8011f06 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011d96:	4b45      	ldr	r3, [pc, #276]	; (8011eac <tcp_receive+0xb24>)
 8011d98:	781b      	ldrb	r3, [r3, #0]
 8011d9a:	f043 0320 	orr.w	r3, r3, #32
 8011d9e:	b2da      	uxtb	r2, r3
 8011da0:	4b42      	ldr	r3, [pc, #264]	; (8011eac <tcp_receive+0xb24>)
 8011da2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011da4:	e0af      	b.n	8011f06 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011daa:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011db0:	68db      	ldr	r3, [r3, #12]
 8011db2:	685b      	ldr	r3, [r3, #4]
 8011db4:	4a36      	ldr	r2, [pc, #216]	; (8011e90 <tcp_receive+0xb08>)
 8011db6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011db8:	68bb      	ldr	r3, [r7, #8]
 8011dba:	891b      	ldrh	r3, [r3, #8]
 8011dbc:	461c      	mov	r4, r3
 8011dbe:	68bb      	ldr	r3, [r7, #8]
 8011dc0:	68db      	ldr	r3, [r3, #12]
 8011dc2:	899b      	ldrh	r3, [r3, #12]
 8011dc4:	b29b      	uxth	r3, r3
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	f7fa ff5b 	bl	800cc82 <lwip_htons>
 8011dcc:	4603      	mov	r3, r0
 8011dce:	b2db      	uxtb	r3, r3
 8011dd0:	f003 0303 	and.w	r3, r3, #3
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d001      	beq.n	8011ddc <tcp_receive+0xa54>
 8011dd8:	2301      	movs	r3, #1
 8011dda:	e000      	b.n	8011dde <tcp_receive+0xa56>
 8011ddc:	2300      	movs	r3, #0
 8011dde:	191a      	adds	r2, r3, r4
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011de4:	441a      	add	r2, r3
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011dee:	461c      	mov	r4, r3
 8011df0:	68bb      	ldr	r3, [r7, #8]
 8011df2:	891b      	ldrh	r3, [r3, #8]
 8011df4:	461d      	mov	r5, r3
 8011df6:	68bb      	ldr	r3, [r7, #8]
 8011df8:	68db      	ldr	r3, [r3, #12]
 8011dfa:	899b      	ldrh	r3, [r3, #12]
 8011dfc:	b29b      	uxth	r3, r3
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f7fa ff3f 	bl	800cc82 <lwip_htons>
 8011e04:	4603      	mov	r3, r0
 8011e06:	b2db      	uxtb	r3, r3
 8011e08:	f003 0303 	and.w	r3, r3, #3
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d001      	beq.n	8011e14 <tcp_receive+0xa8c>
 8011e10:	2301      	movs	r3, #1
 8011e12:	e000      	b.n	8011e16 <tcp_receive+0xa8e>
 8011e14:	2300      	movs	r3, #0
 8011e16:	442b      	add	r3, r5
 8011e18:	429c      	cmp	r4, r3
 8011e1a:	d206      	bcs.n	8011e2a <tcp_receive+0xaa2>
 8011e1c:	4b1e      	ldr	r3, [pc, #120]	; (8011e98 <tcp_receive+0xb10>)
 8011e1e:	f240 622c 	movw	r2, #1580	; 0x62c
 8011e22:	4923      	ldr	r1, [pc, #140]	; (8011eb0 <tcp_receive+0xb28>)
 8011e24:	481e      	ldr	r0, [pc, #120]	; (8011ea0 <tcp_receive+0xb18>)
 8011e26:	f006 fe53 	bl	8018ad0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011e2a:	68bb      	ldr	r3, [r7, #8]
 8011e2c:	891b      	ldrh	r3, [r3, #8]
 8011e2e:	461c      	mov	r4, r3
 8011e30:	68bb      	ldr	r3, [r7, #8]
 8011e32:	68db      	ldr	r3, [r3, #12]
 8011e34:	899b      	ldrh	r3, [r3, #12]
 8011e36:	b29b      	uxth	r3, r3
 8011e38:	4618      	mov	r0, r3
 8011e3a:	f7fa ff22 	bl	800cc82 <lwip_htons>
 8011e3e:	4603      	mov	r3, r0
 8011e40:	b2db      	uxtb	r3, r3
 8011e42:	f003 0303 	and.w	r3, r3, #3
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d001      	beq.n	8011e4e <tcp_receive+0xac6>
 8011e4a:	2301      	movs	r3, #1
 8011e4c:	e000      	b.n	8011e50 <tcp_receive+0xac8>
 8011e4e:	2300      	movs	r3, #0
 8011e50:	1919      	adds	r1, r3, r4
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011e56:	b28b      	uxth	r3, r1
 8011e58:	1ad3      	subs	r3, r2, r3
 8011e5a:	b29a      	uxth	r2, r3
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011e60:	6878      	ldr	r0, [r7, #4]
 8011e62:	f7fc ff4b 	bl	800ecfc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011e66:	68bb      	ldr	r3, [r7, #8]
 8011e68:	685b      	ldr	r3, [r3, #4]
 8011e6a:	891b      	ldrh	r3, [r3, #8]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d028      	beq.n	8011ec2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011e70:	4b0d      	ldr	r3, [pc, #52]	; (8011ea8 <tcp_receive+0xb20>)
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d01d      	beq.n	8011eb4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8011e78:	4b0b      	ldr	r3, [pc, #44]	; (8011ea8 <tcp_receive+0xb20>)
 8011e7a:	681a      	ldr	r2, [r3, #0]
 8011e7c:	68bb      	ldr	r3, [r7, #8]
 8011e7e:	685b      	ldr	r3, [r3, #4]
 8011e80:	4619      	mov	r1, r3
 8011e82:	4610      	mov	r0, r2
 8011e84:	f7fc fa60 	bl	800e348 <pbuf_cat>
 8011e88:	e018      	b.n	8011ebc <tcp_receive+0xb34>
 8011e8a:	bf00      	nop
 8011e8c:	200004a6 	.word	0x200004a6
 8011e90:	2000049c 	.word	0x2000049c
 8011e94:	2000047c 	.word	0x2000047c
 8011e98:	0801ab30 	.word	0x0801ab30
 8011e9c:	0801af10 	.word	0x0801af10
 8011ea0:	0801ab7c 	.word	0x0801ab7c
 8011ea4:	0801af4c 	.word	0x0801af4c
 8011ea8:	200004ac 	.word	0x200004ac
 8011eac:	200004a9 	.word	0x200004a9
 8011eb0:	0801af6c 	.word	0x0801af6c
            } else {
              recv_data = cseg->p;
 8011eb4:	68bb      	ldr	r3, [r7, #8]
 8011eb6:	685b      	ldr	r3, [r3, #4]
 8011eb8:	4a70      	ldr	r2, [pc, #448]	; (801207c <tcp_receive+0xcf4>)
 8011eba:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011ebc:	68bb      	ldr	r3, [r7, #8]
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011ec2:	68bb      	ldr	r3, [r7, #8]
 8011ec4:	68db      	ldr	r3, [r3, #12]
 8011ec6:	899b      	ldrh	r3, [r3, #12]
 8011ec8:	b29b      	uxth	r3, r3
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f7fa fed9 	bl	800cc82 <lwip_htons>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	b2db      	uxtb	r3, r3
 8011ed4:	f003 0301 	and.w	r3, r3, #1
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d00d      	beq.n	8011ef8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011edc:	4b68      	ldr	r3, [pc, #416]	; (8012080 <tcp_receive+0xcf8>)
 8011ede:	781b      	ldrb	r3, [r3, #0]
 8011ee0:	f043 0320 	orr.w	r3, r3, #32
 8011ee4:	b2da      	uxtb	r2, r3
 8011ee6:	4b66      	ldr	r3, [pc, #408]	; (8012080 <tcp_receive+0xcf8>)
 8011ee8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	7d1b      	ldrb	r3, [r3, #20]
 8011eee:	2b04      	cmp	r3, #4
 8011ef0:	d102      	bne.n	8011ef8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	2207      	movs	r2, #7
 8011ef6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011ef8:	68bb      	ldr	r3, [r7, #8]
 8011efa:	681a      	ldr	r2, [r3, #0]
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011f00:	68b8      	ldr	r0, [r7, #8]
 8011f02:	f7fd fbd7 	bl	800f6b4 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d008      	beq.n	8011f20 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f12:	68db      	ldr	r3, [r3, #12]
 8011f14:	685a      	ldr	r2, [r3, #4]
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011f1a:	429a      	cmp	r2, r3
 8011f1c:	f43f af43 	beq.w	8011da6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	8b5b      	ldrh	r3, [r3, #26]
 8011f24:	f003 0301 	and.w	r3, r3, #1
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d00e      	beq.n	8011f4a <tcp_receive+0xbc2>
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	8b5b      	ldrh	r3, [r3, #26]
 8011f30:	f023 0301 	bic.w	r3, r3, #1
 8011f34:	b29a      	uxth	r2, r3
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	835a      	strh	r2, [r3, #26]
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	8b5b      	ldrh	r3, [r3, #26]
 8011f3e:	f043 0302 	orr.w	r3, r3, #2
 8011f42:	b29a      	uxth	r2, r3
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011f48:	e188      	b.n	801225c <tcp_receive+0xed4>
        tcp_ack(pcb);
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	8b5b      	ldrh	r3, [r3, #26]
 8011f4e:	f043 0301 	orr.w	r3, r3, #1
 8011f52:	b29a      	uxth	r2, r3
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011f58:	e180      	b.n	801225c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d106      	bne.n	8011f70 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011f62:	4848      	ldr	r0, [pc, #288]	; (8012084 <tcp_receive+0xcfc>)
 8011f64:	f7fd fbbe 	bl	800f6e4 <tcp_seg_copy>
 8011f68:	4602      	mov	r2, r0
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	675a      	str	r2, [r3, #116]	; 0x74
 8011f6e:	e16d      	b.n	801224c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011f70:	2300      	movs	r3, #0
 8011f72:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f78:	63bb      	str	r3, [r7, #56]	; 0x38
 8011f7a:	e157      	b.n	801222c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8011f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f7e:	68db      	ldr	r3, [r3, #12]
 8011f80:	685a      	ldr	r2, [r3, #4]
 8011f82:	4b41      	ldr	r3, [pc, #260]	; (8012088 <tcp_receive+0xd00>)
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	429a      	cmp	r2, r3
 8011f88:	d11d      	bne.n	8011fc6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011f8a:	4b3e      	ldr	r3, [pc, #248]	; (8012084 <tcp_receive+0xcfc>)
 8011f8c:	891a      	ldrh	r2, [r3, #8]
 8011f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f90:	891b      	ldrh	r3, [r3, #8]
 8011f92:	429a      	cmp	r2, r3
 8011f94:	f240 814f 	bls.w	8012236 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011f98:	483a      	ldr	r0, [pc, #232]	; (8012084 <tcp_receive+0xcfc>)
 8011f9a:	f7fd fba3 	bl	800f6e4 <tcp_seg_copy>
 8011f9e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011fa0:	697b      	ldr	r3, [r7, #20]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	f000 8149 	beq.w	801223a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8011fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d003      	beq.n	8011fb6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8011fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fb0:	697a      	ldr	r2, [r7, #20]
 8011fb2:	601a      	str	r2, [r3, #0]
 8011fb4:	e002      	b.n	8011fbc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	697a      	ldr	r2, [r7, #20]
 8011fba:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011fbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011fbe:	6978      	ldr	r0, [r7, #20]
 8011fc0:	f7ff f8de 	bl	8011180 <tcp_oos_insert_segment>
                }
                break;
 8011fc4:	e139      	b.n	801223a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d117      	bne.n	8011ffc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011fcc:	4b2e      	ldr	r3, [pc, #184]	; (8012088 <tcp_receive+0xd00>)
 8011fce:	681a      	ldr	r2, [r3, #0]
 8011fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fd2:	68db      	ldr	r3, [r3, #12]
 8011fd4:	685b      	ldr	r3, [r3, #4]
 8011fd6:	1ad3      	subs	r3, r2, r3
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	da57      	bge.n	801208c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011fdc:	4829      	ldr	r0, [pc, #164]	; (8012084 <tcp_receive+0xcfc>)
 8011fde:	f7fd fb81 	bl	800f6e4 <tcp_seg_copy>
 8011fe2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011fe4:	69bb      	ldr	r3, [r7, #24]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	f000 8129 	beq.w	801223e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	69ba      	ldr	r2, [r7, #24]
 8011ff0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011ff2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011ff4:	69b8      	ldr	r0, [r7, #24]
 8011ff6:	f7ff f8c3 	bl	8011180 <tcp_oos_insert_segment>
                  }
                  break;
 8011ffa:	e120      	b.n	801223e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011ffc:	4b22      	ldr	r3, [pc, #136]	; (8012088 <tcp_receive+0xd00>)
 8011ffe:	681a      	ldr	r2, [r3, #0]
 8012000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012002:	68db      	ldr	r3, [r3, #12]
 8012004:	685b      	ldr	r3, [r3, #4]
 8012006:	1ad3      	subs	r3, r2, r3
 8012008:	3b01      	subs	r3, #1
 801200a:	2b00      	cmp	r3, #0
 801200c:	db3e      	blt.n	801208c <tcp_receive+0xd04>
 801200e:	4b1e      	ldr	r3, [pc, #120]	; (8012088 <tcp_receive+0xd00>)
 8012010:	681a      	ldr	r2, [r3, #0]
 8012012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012014:	68db      	ldr	r3, [r3, #12]
 8012016:	685b      	ldr	r3, [r3, #4]
 8012018:	1ad3      	subs	r3, r2, r3
 801201a:	3301      	adds	r3, #1
 801201c:	2b00      	cmp	r3, #0
 801201e:	dc35      	bgt.n	801208c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012020:	4818      	ldr	r0, [pc, #96]	; (8012084 <tcp_receive+0xcfc>)
 8012022:	f7fd fb5f 	bl	800f6e4 <tcp_seg_copy>
 8012026:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012028:	69fb      	ldr	r3, [r7, #28]
 801202a:	2b00      	cmp	r3, #0
 801202c:	f000 8109 	beq.w	8012242 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012032:	68db      	ldr	r3, [r3, #12]
 8012034:	685b      	ldr	r3, [r3, #4]
 8012036:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012038:	8912      	ldrh	r2, [r2, #8]
 801203a:	441a      	add	r2, r3
 801203c:	4b12      	ldr	r3, [pc, #72]	; (8012088 <tcp_receive+0xd00>)
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	1ad3      	subs	r3, r2, r3
 8012042:	2b00      	cmp	r3, #0
 8012044:	dd12      	ble.n	801206c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012046:	4b10      	ldr	r3, [pc, #64]	; (8012088 <tcp_receive+0xd00>)
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	b29a      	uxth	r2, r3
 801204c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801204e:	68db      	ldr	r3, [r3, #12]
 8012050:	685b      	ldr	r3, [r3, #4]
 8012052:	b29b      	uxth	r3, r3
 8012054:	1ad3      	subs	r3, r2, r3
 8012056:	b29a      	uxth	r2, r3
 8012058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801205a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801205c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801205e:	685a      	ldr	r2, [r3, #4]
 8012060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012062:	891b      	ldrh	r3, [r3, #8]
 8012064:	4619      	mov	r1, r3
 8012066:	4610      	mov	r0, r2
 8012068:	f7fb ff26 	bl	800deb8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801206c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801206e:	69fa      	ldr	r2, [r7, #28]
 8012070:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012072:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012074:	69f8      	ldr	r0, [r7, #28]
 8012076:	f7ff f883 	bl	8011180 <tcp_oos_insert_segment>
                  }
                  break;
 801207a:	e0e2      	b.n	8012242 <tcp_receive+0xeba>
 801207c:	200004ac 	.word	0x200004ac
 8012080:	200004a9 	.word	0x200004a9
 8012084:	2000047c 	.word	0x2000047c
 8012088:	2000049c 	.word	0x2000049c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801208c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801208e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	2b00      	cmp	r3, #0
 8012096:	f040 80c6 	bne.w	8012226 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801209a:	4b80      	ldr	r3, [pc, #512]	; (801229c <tcp_receive+0xf14>)
 801209c:	681a      	ldr	r2, [r3, #0]
 801209e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120a0:	68db      	ldr	r3, [r3, #12]
 80120a2:	685b      	ldr	r3, [r3, #4]
 80120a4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	f340 80bd 	ble.w	8012226 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80120ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ae:	68db      	ldr	r3, [r3, #12]
 80120b0:	899b      	ldrh	r3, [r3, #12]
 80120b2:	b29b      	uxth	r3, r3
 80120b4:	4618      	mov	r0, r3
 80120b6:	f7fa fde4 	bl	800cc82 <lwip_htons>
 80120ba:	4603      	mov	r3, r0
 80120bc:	b2db      	uxtb	r3, r3
 80120be:	f003 0301 	and.w	r3, r3, #1
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	f040 80bf 	bne.w	8012246 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80120c8:	4875      	ldr	r0, [pc, #468]	; (80122a0 <tcp_receive+0xf18>)
 80120ca:	f7fd fb0b 	bl	800f6e4 <tcp_seg_copy>
 80120ce:	4602      	mov	r2, r0
 80120d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120d2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80120d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	f000 80b6 	beq.w	801224a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80120de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120e0:	68db      	ldr	r3, [r3, #12]
 80120e2:	685b      	ldr	r3, [r3, #4]
 80120e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80120e6:	8912      	ldrh	r2, [r2, #8]
 80120e8:	441a      	add	r2, r3
 80120ea:	4b6c      	ldr	r3, [pc, #432]	; (801229c <tcp_receive+0xf14>)
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	1ad3      	subs	r3, r2, r3
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	dd12      	ble.n	801211a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80120f4:	4b69      	ldr	r3, [pc, #420]	; (801229c <tcp_receive+0xf14>)
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	b29a      	uxth	r2, r3
 80120fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120fc:	68db      	ldr	r3, [r3, #12]
 80120fe:	685b      	ldr	r3, [r3, #4]
 8012100:	b29b      	uxth	r3, r3
 8012102:	1ad3      	subs	r3, r2, r3
 8012104:	b29a      	uxth	r2, r3
 8012106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012108:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801210a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801210c:	685a      	ldr	r2, [r3, #4]
 801210e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012110:	891b      	ldrh	r3, [r3, #8]
 8012112:	4619      	mov	r1, r3
 8012114:	4610      	mov	r0, r2
 8012116:	f7fb fecf 	bl	800deb8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801211a:	4b62      	ldr	r3, [pc, #392]	; (80122a4 <tcp_receive+0xf1c>)
 801211c:	881b      	ldrh	r3, [r3, #0]
 801211e:	461a      	mov	r2, r3
 8012120:	4b5e      	ldr	r3, [pc, #376]	; (801229c <tcp_receive+0xf14>)
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	441a      	add	r2, r3
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801212a:	6879      	ldr	r1, [r7, #4]
 801212c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801212e:	440b      	add	r3, r1
 8012130:	1ad3      	subs	r3, r2, r3
 8012132:	2b00      	cmp	r3, #0
 8012134:	f340 8089 	ble.w	801224a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	68db      	ldr	r3, [r3, #12]
 801213e:	899b      	ldrh	r3, [r3, #12]
 8012140:	b29b      	uxth	r3, r3
 8012142:	4618      	mov	r0, r3
 8012144:	f7fa fd9d 	bl	800cc82 <lwip_htons>
 8012148:	4603      	mov	r3, r0
 801214a:	b2db      	uxtb	r3, r3
 801214c:	f003 0301 	and.w	r3, r3, #1
 8012150:	2b00      	cmp	r3, #0
 8012152:	d022      	beq.n	801219a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	68db      	ldr	r3, [r3, #12]
 801215a:	899b      	ldrh	r3, [r3, #12]
 801215c:	b29b      	uxth	r3, r3
 801215e:	b21b      	sxth	r3, r3
 8012160:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012164:	b21c      	sxth	r4, r3
 8012166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	68db      	ldr	r3, [r3, #12]
 801216c:	899b      	ldrh	r3, [r3, #12]
 801216e:	b29b      	uxth	r3, r3
 8012170:	4618      	mov	r0, r3
 8012172:	f7fa fd86 	bl	800cc82 <lwip_htons>
 8012176:	4603      	mov	r3, r0
 8012178:	b2db      	uxtb	r3, r3
 801217a:	b29b      	uxth	r3, r3
 801217c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012180:	b29b      	uxth	r3, r3
 8012182:	4618      	mov	r0, r3
 8012184:	f7fa fd7d 	bl	800cc82 <lwip_htons>
 8012188:	4603      	mov	r3, r0
 801218a:	b21b      	sxth	r3, r3
 801218c:	4323      	orrs	r3, r4
 801218e:	b21a      	sxth	r2, r3
 8012190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	68db      	ldr	r3, [r3, #12]
 8012196:	b292      	uxth	r2, r2
 8012198:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801219e:	b29a      	uxth	r2, r3
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80121a4:	4413      	add	r3, r2
 80121a6:	b299      	uxth	r1, r3
 80121a8:	4b3c      	ldr	r3, [pc, #240]	; (801229c <tcp_receive+0xf14>)
 80121aa:	681b      	ldr	r3, [r3, #0]
 80121ac:	b29a      	uxth	r2, r3
 80121ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	1a8a      	subs	r2, r1, r2
 80121b4:	b292      	uxth	r2, r2
 80121b6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80121b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	685a      	ldr	r2, [r3, #4]
 80121be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	891b      	ldrh	r3, [r3, #8]
 80121c4:	4619      	mov	r1, r3
 80121c6:	4610      	mov	r0, r2
 80121c8:	f7fb fe76 	bl	800deb8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80121cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	891c      	ldrh	r4, [r3, #8]
 80121d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	68db      	ldr	r3, [r3, #12]
 80121d8:	899b      	ldrh	r3, [r3, #12]
 80121da:	b29b      	uxth	r3, r3
 80121dc:	4618      	mov	r0, r3
 80121de:	f7fa fd50 	bl	800cc82 <lwip_htons>
 80121e2:	4603      	mov	r3, r0
 80121e4:	b2db      	uxtb	r3, r3
 80121e6:	f003 0303 	and.w	r3, r3, #3
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d001      	beq.n	80121f2 <tcp_receive+0xe6a>
 80121ee:	2301      	movs	r3, #1
 80121f0:	e000      	b.n	80121f4 <tcp_receive+0xe6c>
 80121f2:	2300      	movs	r3, #0
 80121f4:	4423      	add	r3, r4
 80121f6:	b29a      	uxth	r2, r3
 80121f8:	4b2a      	ldr	r3, [pc, #168]	; (80122a4 <tcp_receive+0xf1c>)
 80121fa:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80121fc:	4b29      	ldr	r3, [pc, #164]	; (80122a4 <tcp_receive+0xf1c>)
 80121fe:	881b      	ldrh	r3, [r3, #0]
 8012200:	461a      	mov	r2, r3
 8012202:	4b26      	ldr	r3, [pc, #152]	; (801229c <tcp_receive+0xf14>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	441a      	add	r2, r3
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801220c:	6879      	ldr	r1, [r7, #4]
 801220e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012210:	440b      	add	r3, r1
 8012212:	429a      	cmp	r2, r3
 8012214:	d019      	beq.n	801224a <tcp_receive+0xec2>
 8012216:	4b24      	ldr	r3, [pc, #144]	; (80122a8 <tcp_receive+0xf20>)
 8012218:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801221c:	4923      	ldr	r1, [pc, #140]	; (80122ac <tcp_receive+0xf24>)
 801221e:	4824      	ldr	r0, [pc, #144]	; (80122b0 <tcp_receive+0xf28>)
 8012220:	f006 fc56 	bl	8018ad0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012224:	e011      	b.n	801224a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	63bb      	str	r3, [r7, #56]	; 0x38
 801222c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801222e:	2b00      	cmp	r3, #0
 8012230:	f47f aea4 	bne.w	8011f7c <tcp_receive+0xbf4>
 8012234:	e00a      	b.n	801224c <tcp_receive+0xec4>
                break;
 8012236:	bf00      	nop
 8012238:	e008      	b.n	801224c <tcp_receive+0xec4>
                break;
 801223a:	bf00      	nop
 801223c:	e006      	b.n	801224c <tcp_receive+0xec4>
                  break;
 801223e:	bf00      	nop
 8012240:	e004      	b.n	801224c <tcp_receive+0xec4>
                  break;
 8012242:	bf00      	nop
 8012244:	e002      	b.n	801224c <tcp_receive+0xec4>
                  break;
 8012246:	bf00      	nop
 8012248:	e000      	b.n	801224c <tcp_receive+0xec4>
                break;
 801224a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801224c:	6878      	ldr	r0, [r7, #4]
 801224e:	f001 fa41 	bl	80136d4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012252:	e003      	b.n	801225c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012254:	6878      	ldr	r0, [r7, #4]
 8012256:	f001 fa3d 	bl	80136d4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801225a:	e01a      	b.n	8012292 <tcp_receive+0xf0a>
 801225c:	e019      	b.n	8012292 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801225e:	4b0f      	ldr	r3, [pc, #60]	; (801229c <tcp_receive+0xf14>)
 8012260:	681a      	ldr	r2, [r3, #0]
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012266:	1ad3      	subs	r3, r2, r3
 8012268:	2b00      	cmp	r3, #0
 801226a:	db0a      	blt.n	8012282 <tcp_receive+0xefa>
 801226c:	4b0b      	ldr	r3, [pc, #44]	; (801229c <tcp_receive+0xf14>)
 801226e:	681a      	ldr	r2, [r3, #0]
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012274:	6879      	ldr	r1, [r7, #4]
 8012276:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012278:	440b      	add	r3, r1
 801227a:	1ad3      	subs	r3, r2, r3
 801227c:	3301      	adds	r3, #1
 801227e:	2b00      	cmp	r3, #0
 8012280:	dd07      	ble.n	8012292 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	8b5b      	ldrh	r3, [r3, #26]
 8012286:	f043 0302 	orr.w	r3, r3, #2
 801228a:	b29a      	uxth	r2, r3
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012290:	e7ff      	b.n	8012292 <tcp_receive+0xf0a>
 8012292:	bf00      	nop
 8012294:	3750      	adds	r7, #80	; 0x50
 8012296:	46bd      	mov	sp, r7
 8012298:	bdb0      	pop	{r4, r5, r7, pc}
 801229a:	bf00      	nop
 801229c:	2000049c 	.word	0x2000049c
 80122a0:	2000047c 	.word	0x2000047c
 80122a4:	200004a6 	.word	0x200004a6
 80122a8:	0801ab30 	.word	0x0801ab30
 80122ac:	0801aed8 	.word	0x0801aed8
 80122b0:	0801ab7c 	.word	0x0801ab7c

080122b4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80122b4:	b480      	push	{r7}
 80122b6:	b083      	sub	sp, #12
 80122b8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80122ba:	4b15      	ldr	r3, [pc, #84]	; (8012310 <tcp_get_next_optbyte+0x5c>)
 80122bc:	881b      	ldrh	r3, [r3, #0]
 80122be:	1c5a      	adds	r2, r3, #1
 80122c0:	b291      	uxth	r1, r2
 80122c2:	4a13      	ldr	r2, [pc, #76]	; (8012310 <tcp_get_next_optbyte+0x5c>)
 80122c4:	8011      	strh	r1, [r2, #0]
 80122c6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80122c8:	4b12      	ldr	r3, [pc, #72]	; (8012314 <tcp_get_next_optbyte+0x60>)
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d004      	beq.n	80122da <tcp_get_next_optbyte+0x26>
 80122d0:	4b11      	ldr	r3, [pc, #68]	; (8012318 <tcp_get_next_optbyte+0x64>)
 80122d2:	881b      	ldrh	r3, [r3, #0]
 80122d4:	88fa      	ldrh	r2, [r7, #6]
 80122d6:	429a      	cmp	r2, r3
 80122d8:	d208      	bcs.n	80122ec <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80122da:	4b10      	ldr	r3, [pc, #64]	; (801231c <tcp_get_next_optbyte+0x68>)
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	3314      	adds	r3, #20
 80122e0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80122e2:	88fb      	ldrh	r3, [r7, #6]
 80122e4:	683a      	ldr	r2, [r7, #0]
 80122e6:	4413      	add	r3, r2
 80122e8:	781b      	ldrb	r3, [r3, #0]
 80122ea:	e00b      	b.n	8012304 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80122ec:	88fb      	ldrh	r3, [r7, #6]
 80122ee:	b2da      	uxtb	r2, r3
 80122f0:	4b09      	ldr	r3, [pc, #36]	; (8012318 <tcp_get_next_optbyte+0x64>)
 80122f2:	881b      	ldrh	r3, [r3, #0]
 80122f4:	b2db      	uxtb	r3, r3
 80122f6:	1ad3      	subs	r3, r2, r3
 80122f8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80122fa:	4b06      	ldr	r3, [pc, #24]	; (8012314 <tcp_get_next_optbyte+0x60>)
 80122fc:	681a      	ldr	r2, [r3, #0]
 80122fe:	797b      	ldrb	r3, [r7, #5]
 8012300:	4413      	add	r3, r2
 8012302:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012304:	4618      	mov	r0, r3
 8012306:	370c      	adds	r7, #12
 8012308:	46bd      	mov	sp, r7
 801230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230e:	4770      	bx	lr
 8012310:	20000498 	.word	0x20000498
 8012314:	20000494 	.word	0x20000494
 8012318:	20000492 	.word	0x20000492
 801231c:	2000048c 	.word	0x2000048c

08012320 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b084      	sub	sp, #16
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d106      	bne.n	801233c <tcp_parseopt+0x1c>
 801232e:	4b31      	ldr	r3, [pc, #196]	; (80123f4 <tcp_parseopt+0xd4>)
 8012330:	f240 727d 	movw	r2, #1917	; 0x77d
 8012334:	4930      	ldr	r1, [pc, #192]	; (80123f8 <tcp_parseopt+0xd8>)
 8012336:	4831      	ldr	r0, [pc, #196]	; (80123fc <tcp_parseopt+0xdc>)
 8012338:	f006 fbca 	bl	8018ad0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801233c:	4b30      	ldr	r3, [pc, #192]	; (8012400 <tcp_parseopt+0xe0>)
 801233e:	881b      	ldrh	r3, [r3, #0]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d053      	beq.n	80123ec <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012344:	4b2f      	ldr	r3, [pc, #188]	; (8012404 <tcp_parseopt+0xe4>)
 8012346:	2200      	movs	r2, #0
 8012348:	801a      	strh	r2, [r3, #0]
 801234a:	e043      	b.n	80123d4 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 801234c:	f7ff ffb2 	bl	80122b4 <tcp_get_next_optbyte>
 8012350:	4603      	mov	r3, r0
 8012352:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012354:	7bfb      	ldrb	r3, [r7, #15]
 8012356:	2b01      	cmp	r3, #1
 8012358:	d03c      	beq.n	80123d4 <tcp_parseopt+0xb4>
 801235a:	2b02      	cmp	r3, #2
 801235c:	d002      	beq.n	8012364 <tcp_parseopt+0x44>
 801235e:	2b00      	cmp	r3, #0
 8012360:	d03f      	beq.n	80123e2 <tcp_parseopt+0xc2>
 8012362:	e026      	b.n	80123b2 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012364:	f7ff ffa6 	bl	80122b4 <tcp_get_next_optbyte>
 8012368:	4603      	mov	r3, r0
 801236a:	2b04      	cmp	r3, #4
 801236c:	d13b      	bne.n	80123e6 <tcp_parseopt+0xc6>
 801236e:	4b25      	ldr	r3, [pc, #148]	; (8012404 <tcp_parseopt+0xe4>)
 8012370:	881b      	ldrh	r3, [r3, #0]
 8012372:	3302      	adds	r3, #2
 8012374:	4a22      	ldr	r2, [pc, #136]	; (8012400 <tcp_parseopt+0xe0>)
 8012376:	8812      	ldrh	r2, [r2, #0]
 8012378:	4293      	cmp	r3, r2
 801237a:	dc34      	bgt.n	80123e6 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801237c:	f7ff ff9a 	bl	80122b4 <tcp_get_next_optbyte>
 8012380:	4603      	mov	r3, r0
 8012382:	b29b      	uxth	r3, r3
 8012384:	021b      	lsls	r3, r3, #8
 8012386:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012388:	f7ff ff94 	bl	80122b4 <tcp_get_next_optbyte>
 801238c:	4603      	mov	r3, r0
 801238e:	b29a      	uxth	r2, r3
 8012390:	89bb      	ldrh	r3, [r7, #12]
 8012392:	4313      	orrs	r3, r2
 8012394:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012396:	89bb      	ldrh	r3, [r7, #12]
 8012398:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801239c:	d804      	bhi.n	80123a8 <tcp_parseopt+0x88>
 801239e:	89bb      	ldrh	r3, [r7, #12]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d001      	beq.n	80123a8 <tcp_parseopt+0x88>
 80123a4:	89ba      	ldrh	r2, [r7, #12]
 80123a6:	e001      	b.n	80123ac <tcp_parseopt+0x8c>
 80123a8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80123b0:	e010      	b.n	80123d4 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80123b2:	f7ff ff7f 	bl	80122b4 <tcp_get_next_optbyte>
 80123b6:	4603      	mov	r3, r0
 80123b8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80123ba:	7afb      	ldrb	r3, [r7, #11]
 80123bc:	2b01      	cmp	r3, #1
 80123be:	d914      	bls.n	80123ea <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80123c0:	7afb      	ldrb	r3, [r7, #11]
 80123c2:	b29a      	uxth	r2, r3
 80123c4:	4b0f      	ldr	r3, [pc, #60]	; (8012404 <tcp_parseopt+0xe4>)
 80123c6:	881b      	ldrh	r3, [r3, #0]
 80123c8:	4413      	add	r3, r2
 80123ca:	b29b      	uxth	r3, r3
 80123cc:	3b02      	subs	r3, #2
 80123ce:	b29a      	uxth	r2, r3
 80123d0:	4b0c      	ldr	r3, [pc, #48]	; (8012404 <tcp_parseopt+0xe4>)
 80123d2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80123d4:	4b0b      	ldr	r3, [pc, #44]	; (8012404 <tcp_parseopt+0xe4>)
 80123d6:	881a      	ldrh	r2, [r3, #0]
 80123d8:	4b09      	ldr	r3, [pc, #36]	; (8012400 <tcp_parseopt+0xe0>)
 80123da:	881b      	ldrh	r3, [r3, #0]
 80123dc:	429a      	cmp	r2, r3
 80123de:	d3b5      	bcc.n	801234c <tcp_parseopt+0x2c>
 80123e0:	e004      	b.n	80123ec <tcp_parseopt+0xcc>
          return;
 80123e2:	bf00      	nop
 80123e4:	e002      	b.n	80123ec <tcp_parseopt+0xcc>
            return;
 80123e6:	bf00      	nop
 80123e8:	e000      	b.n	80123ec <tcp_parseopt+0xcc>
            return;
 80123ea:	bf00      	nop
      }
    }
  }
}
 80123ec:	3710      	adds	r7, #16
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bd80      	pop	{r7, pc}
 80123f2:	bf00      	nop
 80123f4:	0801ab30 	.word	0x0801ab30
 80123f8:	0801af94 	.word	0x0801af94
 80123fc:	0801ab7c 	.word	0x0801ab7c
 8012400:	20000490 	.word	0x20000490
 8012404:	20000498 	.word	0x20000498

08012408 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012408:	b480      	push	{r7}
 801240a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801240c:	4b05      	ldr	r3, [pc, #20]	; (8012424 <tcp_trigger_input_pcb_close+0x1c>)
 801240e:	781b      	ldrb	r3, [r3, #0]
 8012410:	f043 0310 	orr.w	r3, r3, #16
 8012414:	b2da      	uxtb	r2, r3
 8012416:	4b03      	ldr	r3, [pc, #12]	; (8012424 <tcp_trigger_input_pcb_close+0x1c>)
 8012418:	701a      	strb	r2, [r3, #0]
}
 801241a:	bf00      	nop
 801241c:	46bd      	mov	sp, r7
 801241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012422:	4770      	bx	lr
 8012424:	200004a9 	.word	0x200004a9

08012428 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b084      	sub	sp, #16
 801242c:	af00      	add	r7, sp, #0
 801242e:	60f8      	str	r0, [r7, #12]
 8012430:	60b9      	str	r1, [r7, #8]
 8012432:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d00a      	beq.n	8012450 <tcp_route+0x28>
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	7a1b      	ldrb	r3, [r3, #8]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d006      	beq.n	8012450 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	7a1b      	ldrb	r3, [r3, #8]
 8012446:	4618      	mov	r0, r3
 8012448:	f7fb fb60 	bl	800db0c <netif_get_by_index>
 801244c:	4603      	mov	r3, r0
 801244e:	e003      	b.n	8012458 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012450:	6878      	ldr	r0, [r7, #4]
 8012452:	f005 f841 	bl	80174d8 <ip4_route>
 8012456:	4603      	mov	r3, r0
  }
}
 8012458:	4618      	mov	r0, r3
 801245a:	3710      	adds	r7, #16
 801245c:	46bd      	mov	sp, r7
 801245e:	bd80      	pop	{r7, pc}

08012460 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012460:	b590      	push	{r4, r7, lr}
 8012462:	b087      	sub	sp, #28
 8012464:	af00      	add	r7, sp, #0
 8012466:	60f8      	str	r0, [r7, #12]
 8012468:	60b9      	str	r1, [r7, #8]
 801246a:	603b      	str	r3, [r7, #0]
 801246c:	4613      	mov	r3, r2
 801246e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d105      	bne.n	8012482 <tcp_create_segment+0x22>
 8012476:	4b44      	ldr	r3, [pc, #272]	; (8012588 <tcp_create_segment+0x128>)
 8012478:	22a3      	movs	r2, #163	; 0xa3
 801247a:	4944      	ldr	r1, [pc, #272]	; (801258c <tcp_create_segment+0x12c>)
 801247c:	4844      	ldr	r0, [pc, #272]	; (8012590 <tcp_create_segment+0x130>)
 801247e:	f006 fb27 	bl	8018ad0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012482:	68bb      	ldr	r3, [r7, #8]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d105      	bne.n	8012494 <tcp_create_segment+0x34>
 8012488:	4b3f      	ldr	r3, [pc, #252]	; (8012588 <tcp_create_segment+0x128>)
 801248a:	22a4      	movs	r2, #164	; 0xa4
 801248c:	4941      	ldr	r1, [pc, #260]	; (8012594 <tcp_create_segment+0x134>)
 801248e:	4840      	ldr	r0, [pc, #256]	; (8012590 <tcp_create_segment+0x130>)
 8012490:	f006 fb1e 	bl	8018ad0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012494:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012498:	009b      	lsls	r3, r3, #2
 801249a:	b2db      	uxtb	r3, r3
 801249c:	f003 0304 	and.w	r3, r3, #4
 80124a0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80124a2:	2003      	movs	r0, #3
 80124a4:	f7fb f842 	bl	800d52c <memp_malloc>
 80124a8:	6138      	str	r0, [r7, #16]
 80124aa:	693b      	ldr	r3, [r7, #16]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d104      	bne.n	80124ba <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80124b0:	68b8      	ldr	r0, [r7, #8]
 80124b2:	f7fb fe87 	bl	800e1c4 <pbuf_free>
    return NULL;
 80124b6:	2300      	movs	r3, #0
 80124b8:	e061      	b.n	801257e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80124ba:	693b      	ldr	r3, [r7, #16]
 80124bc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80124c0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80124c2:	693b      	ldr	r3, [r7, #16]
 80124c4:	2200      	movs	r2, #0
 80124c6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80124c8:	693b      	ldr	r3, [r7, #16]
 80124ca:	68ba      	ldr	r2, [r7, #8]
 80124cc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80124ce:	68bb      	ldr	r3, [r7, #8]
 80124d0:	891a      	ldrh	r2, [r3, #8]
 80124d2:	7dfb      	ldrb	r3, [r7, #23]
 80124d4:	b29b      	uxth	r3, r3
 80124d6:	429a      	cmp	r2, r3
 80124d8:	d205      	bcs.n	80124e6 <tcp_create_segment+0x86>
 80124da:	4b2b      	ldr	r3, [pc, #172]	; (8012588 <tcp_create_segment+0x128>)
 80124dc:	22b0      	movs	r2, #176	; 0xb0
 80124de:	492e      	ldr	r1, [pc, #184]	; (8012598 <tcp_create_segment+0x138>)
 80124e0:	482b      	ldr	r0, [pc, #172]	; (8012590 <tcp_create_segment+0x130>)
 80124e2:	f006 faf5 	bl	8018ad0 <iprintf>
  seg->len = p->tot_len - optlen;
 80124e6:	68bb      	ldr	r3, [r7, #8]
 80124e8:	891a      	ldrh	r2, [r3, #8]
 80124ea:	7dfb      	ldrb	r3, [r7, #23]
 80124ec:	b29b      	uxth	r3, r3
 80124ee:	1ad3      	subs	r3, r2, r3
 80124f0:	b29a      	uxth	r2, r3
 80124f2:	693b      	ldr	r3, [r7, #16]
 80124f4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80124f6:	2114      	movs	r1, #20
 80124f8:	68b8      	ldr	r0, [r7, #8]
 80124fa:	f7fb fdcd 	bl	800e098 <pbuf_add_header>
 80124fe:	4603      	mov	r3, r0
 8012500:	2b00      	cmp	r3, #0
 8012502:	d004      	beq.n	801250e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012504:	6938      	ldr	r0, [r7, #16]
 8012506:	f7fd f8d5 	bl	800f6b4 <tcp_seg_free>
    return NULL;
 801250a:	2300      	movs	r3, #0
 801250c:	e037      	b.n	801257e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801250e:	693b      	ldr	r3, [r7, #16]
 8012510:	685b      	ldr	r3, [r3, #4]
 8012512:	685a      	ldr	r2, [r3, #4]
 8012514:	693b      	ldr	r3, [r7, #16]
 8012516:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	8ada      	ldrh	r2, [r3, #22]
 801251c:	693b      	ldr	r3, [r7, #16]
 801251e:	68dc      	ldr	r4, [r3, #12]
 8012520:	4610      	mov	r0, r2
 8012522:	f7fa fbae 	bl	800cc82 <lwip_htons>
 8012526:	4603      	mov	r3, r0
 8012528:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	8b1a      	ldrh	r2, [r3, #24]
 801252e:	693b      	ldr	r3, [r7, #16]
 8012530:	68dc      	ldr	r4, [r3, #12]
 8012532:	4610      	mov	r0, r2
 8012534:	f7fa fba5 	bl	800cc82 <lwip_htons>
 8012538:	4603      	mov	r3, r0
 801253a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801253c:	693b      	ldr	r3, [r7, #16]
 801253e:	68dc      	ldr	r4, [r3, #12]
 8012540:	6838      	ldr	r0, [r7, #0]
 8012542:	f7fa fbb3 	bl	800ccac <lwip_htonl>
 8012546:	4603      	mov	r3, r0
 8012548:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801254a:	7dfb      	ldrb	r3, [r7, #23]
 801254c:	089b      	lsrs	r3, r3, #2
 801254e:	b2db      	uxtb	r3, r3
 8012550:	b29b      	uxth	r3, r3
 8012552:	3305      	adds	r3, #5
 8012554:	b29b      	uxth	r3, r3
 8012556:	031b      	lsls	r3, r3, #12
 8012558:	b29a      	uxth	r2, r3
 801255a:	79fb      	ldrb	r3, [r7, #7]
 801255c:	b29b      	uxth	r3, r3
 801255e:	4313      	orrs	r3, r2
 8012560:	b29a      	uxth	r2, r3
 8012562:	693b      	ldr	r3, [r7, #16]
 8012564:	68dc      	ldr	r4, [r3, #12]
 8012566:	4610      	mov	r0, r2
 8012568:	f7fa fb8b 	bl	800cc82 <lwip_htons>
 801256c:	4603      	mov	r3, r0
 801256e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012570:	693b      	ldr	r3, [r7, #16]
 8012572:	68db      	ldr	r3, [r3, #12]
 8012574:	2200      	movs	r2, #0
 8012576:	749a      	strb	r2, [r3, #18]
 8012578:	2200      	movs	r2, #0
 801257a:	74da      	strb	r2, [r3, #19]
  return seg;
 801257c:	693b      	ldr	r3, [r7, #16]
}
 801257e:	4618      	mov	r0, r3
 8012580:	371c      	adds	r7, #28
 8012582:	46bd      	mov	sp, r7
 8012584:	bd90      	pop	{r4, r7, pc}
 8012586:	bf00      	nop
 8012588:	0801afb0 	.word	0x0801afb0
 801258c:	0801afe4 	.word	0x0801afe4
 8012590:	0801b004 	.word	0x0801b004
 8012594:	0801b02c 	.word	0x0801b02c
 8012598:	0801b050 	.word	0x0801b050

0801259c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801259c:	b590      	push	{r4, r7, lr}
 801259e:	b08b      	sub	sp, #44	; 0x2c
 80125a0:	af02      	add	r7, sp, #8
 80125a2:	6078      	str	r0, [r7, #4]
 80125a4:	460b      	mov	r3, r1
 80125a6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80125a8:	2300      	movs	r3, #0
 80125aa:	61fb      	str	r3, [r7, #28]
 80125ac:	2300      	movs	r3, #0
 80125ae:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80125b0:	2300      	movs	r3, #0
 80125b2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d106      	bne.n	80125c8 <tcp_split_unsent_seg+0x2c>
 80125ba:	4b95      	ldr	r3, [pc, #596]	; (8012810 <tcp_split_unsent_seg+0x274>)
 80125bc:	f240 324b 	movw	r2, #843	; 0x34b
 80125c0:	4994      	ldr	r1, [pc, #592]	; (8012814 <tcp_split_unsent_seg+0x278>)
 80125c2:	4895      	ldr	r0, [pc, #596]	; (8012818 <tcp_split_unsent_seg+0x27c>)
 80125c4:	f006 fa84 	bl	8018ad0 <iprintf>

  useg = pcb->unsent;
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125cc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80125ce:	697b      	ldr	r3, [r7, #20]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d102      	bne.n	80125da <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80125d4:	f04f 33ff 	mov.w	r3, #4294967295
 80125d8:	e116      	b.n	8012808 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80125da:	887b      	ldrh	r3, [r7, #2]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d109      	bne.n	80125f4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80125e0:	4b8b      	ldr	r3, [pc, #556]	; (8012810 <tcp_split_unsent_seg+0x274>)
 80125e2:	f240 3253 	movw	r2, #851	; 0x353
 80125e6:	498d      	ldr	r1, [pc, #564]	; (801281c <tcp_split_unsent_seg+0x280>)
 80125e8:	488b      	ldr	r0, [pc, #556]	; (8012818 <tcp_split_unsent_seg+0x27c>)
 80125ea:	f006 fa71 	bl	8018ad0 <iprintf>
    return ERR_VAL;
 80125ee:	f06f 0305 	mvn.w	r3, #5
 80125f2:	e109      	b.n	8012808 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80125f4:	697b      	ldr	r3, [r7, #20]
 80125f6:	891b      	ldrh	r3, [r3, #8]
 80125f8:	887a      	ldrh	r2, [r7, #2]
 80125fa:	429a      	cmp	r2, r3
 80125fc:	d301      	bcc.n	8012602 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80125fe:	2300      	movs	r3, #0
 8012600:	e102      	b.n	8012808 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012606:	887a      	ldrh	r2, [r7, #2]
 8012608:	429a      	cmp	r2, r3
 801260a:	d906      	bls.n	801261a <tcp_split_unsent_seg+0x7e>
 801260c:	4b80      	ldr	r3, [pc, #512]	; (8012810 <tcp_split_unsent_seg+0x274>)
 801260e:	f240 325b 	movw	r2, #859	; 0x35b
 8012612:	4983      	ldr	r1, [pc, #524]	; (8012820 <tcp_split_unsent_seg+0x284>)
 8012614:	4880      	ldr	r0, [pc, #512]	; (8012818 <tcp_split_unsent_seg+0x27c>)
 8012616:	f006 fa5b 	bl	8018ad0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801261a:	697b      	ldr	r3, [r7, #20]
 801261c:	891b      	ldrh	r3, [r3, #8]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d106      	bne.n	8012630 <tcp_split_unsent_seg+0x94>
 8012622:	4b7b      	ldr	r3, [pc, #492]	; (8012810 <tcp_split_unsent_seg+0x274>)
 8012624:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012628:	497e      	ldr	r1, [pc, #504]	; (8012824 <tcp_split_unsent_seg+0x288>)
 801262a:	487b      	ldr	r0, [pc, #492]	; (8012818 <tcp_split_unsent_seg+0x27c>)
 801262c:	f006 fa50 	bl	8018ad0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012630:	697b      	ldr	r3, [r7, #20]
 8012632:	7a9b      	ldrb	r3, [r3, #10]
 8012634:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012636:	7bfb      	ldrb	r3, [r7, #15]
 8012638:	009b      	lsls	r3, r3, #2
 801263a:	b2db      	uxtb	r3, r3
 801263c:	f003 0304 	and.w	r3, r3, #4
 8012640:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012642:	697b      	ldr	r3, [r7, #20]
 8012644:	891a      	ldrh	r2, [r3, #8]
 8012646:	887b      	ldrh	r3, [r7, #2]
 8012648:	1ad3      	subs	r3, r2, r3
 801264a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801264c:	7bbb      	ldrb	r3, [r7, #14]
 801264e:	b29a      	uxth	r2, r3
 8012650:	89bb      	ldrh	r3, [r7, #12]
 8012652:	4413      	add	r3, r2
 8012654:	b29b      	uxth	r3, r3
 8012656:	f44f 7220 	mov.w	r2, #640	; 0x280
 801265a:	4619      	mov	r1, r3
 801265c:	2036      	movs	r0, #54	; 0x36
 801265e:	f7fb fad1 	bl	800dc04 <pbuf_alloc>
 8012662:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012664:	693b      	ldr	r3, [r7, #16]
 8012666:	2b00      	cmp	r3, #0
 8012668:	f000 80b7 	beq.w	80127da <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801266c:	697b      	ldr	r3, [r7, #20]
 801266e:	685b      	ldr	r3, [r3, #4]
 8012670:	891a      	ldrh	r2, [r3, #8]
 8012672:	697b      	ldr	r3, [r7, #20]
 8012674:	891b      	ldrh	r3, [r3, #8]
 8012676:	1ad3      	subs	r3, r2, r3
 8012678:	b29a      	uxth	r2, r3
 801267a:	887b      	ldrh	r3, [r7, #2]
 801267c:	4413      	add	r3, r2
 801267e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012680:	697b      	ldr	r3, [r7, #20]
 8012682:	6858      	ldr	r0, [r3, #4]
 8012684:	693b      	ldr	r3, [r7, #16]
 8012686:	685a      	ldr	r2, [r3, #4]
 8012688:	7bbb      	ldrb	r3, [r7, #14]
 801268a:	18d1      	adds	r1, r2, r3
 801268c:	897b      	ldrh	r3, [r7, #10]
 801268e:	89ba      	ldrh	r2, [r7, #12]
 8012690:	f7fb ff92 	bl	800e5b8 <pbuf_copy_partial>
 8012694:	4603      	mov	r3, r0
 8012696:	461a      	mov	r2, r3
 8012698:	89bb      	ldrh	r3, [r7, #12]
 801269a:	4293      	cmp	r3, r2
 801269c:	f040 809f 	bne.w	80127de <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80126a0:	697b      	ldr	r3, [r7, #20]
 80126a2:	68db      	ldr	r3, [r3, #12]
 80126a4:	899b      	ldrh	r3, [r3, #12]
 80126a6:	b29b      	uxth	r3, r3
 80126a8:	4618      	mov	r0, r3
 80126aa:	f7fa faea 	bl	800cc82 <lwip_htons>
 80126ae:	4603      	mov	r3, r0
 80126b0:	b2db      	uxtb	r3, r3
 80126b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80126b6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80126b8:	2300      	movs	r3, #0
 80126ba:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80126bc:	7efb      	ldrb	r3, [r7, #27]
 80126be:	f003 0308 	and.w	r3, r3, #8
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d007      	beq.n	80126d6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80126c6:	7efb      	ldrb	r3, [r7, #27]
 80126c8:	f023 0308 	bic.w	r3, r3, #8
 80126cc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80126ce:	7ebb      	ldrb	r3, [r7, #26]
 80126d0:	f043 0308 	orr.w	r3, r3, #8
 80126d4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80126d6:	7efb      	ldrb	r3, [r7, #27]
 80126d8:	f003 0301 	and.w	r3, r3, #1
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d007      	beq.n	80126f0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80126e0:	7efb      	ldrb	r3, [r7, #27]
 80126e2:	f023 0301 	bic.w	r3, r3, #1
 80126e6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80126e8:	7ebb      	ldrb	r3, [r7, #26]
 80126ea:	f043 0301 	orr.w	r3, r3, #1
 80126ee:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80126f0:	697b      	ldr	r3, [r7, #20]
 80126f2:	68db      	ldr	r3, [r3, #12]
 80126f4:	685b      	ldr	r3, [r3, #4]
 80126f6:	4618      	mov	r0, r3
 80126f8:	f7fa fad8 	bl	800ccac <lwip_htonl>
 80126fc:	4602      	mov	r2, r0
 80126fe:	887b      	ldrh	r3, [r7, #2]
 8012700:	18d1      	adds	r1, r2, r3
 8012702:	7eba      	ldrb	r2, [r7, #26]
 8012704:	7bfb      	ldrb	r3, [r7, #15]
 8012706:	9300      	str	r3, [sp, #0]
 8012708:	460b      	mov	r3, r1
 801270a:	6939      	ldr	r1, [r7, #16]
 801270c:	6878      	ldr	r0, [r7, #4]
 801270e:	f7ff fea7 	bl	8012460 <tcp_create_segment>
 8012712:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012714:	69fb      	ldr	r3, [r7, #28]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d063      	beq.n	80127e2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801271a:	697b      	ldr	r3, [r7, #20]
 801271c:	685b      	ldr	r3, [r3, #4]
 801271e:	4618      	mov	r0, r3
 8012720:	f7fb fdd8 	bl	800e2d4 <pbuf_clen>
 8012724:	4603      	mov	r3, r0
 8012726:	461a      	mov	r2, r3
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801272e:	1a9b      	subs	r3, r3, r2
 8012730:	b29a      	uxth	r2, r3
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012738:	697b      	ldr	r3, [r7, #20]
 801273a:	6858      	ldr	r0, [r3, #4]
 801273c:	697b      	ldr	r3, [r7, #20]
 801273e:	685b      	ldr	r3, [r3, #4]
 8012740:	891a      	ldrh	r2, [r3, #8]
 8012742:	89bb      	ldrh	r3, [r7, #12]
 8012744:	1ad3      	subs	r3, r2, r3
 8012746:	b29b      	uxth	r3, r3
 8012748:	4619      	mov	r1, r3
 801274a:	f7fb fbb5 	bl	800deb8 <pbuf_realloc>
  useg->len -= remainder;
 801274e:	697b      	ldr	r3, [r7, #20]
 8012750:	891a      	ldrh	r2, [r3, #8]
 8012752:	89bb      	ldrh	r3, [r7, #12]
 8012754:	1ad3      	subs	r3, r2, r3
 8012756:	b29a      	uxth	r2, r3
 8012758:	697b      	ldr	r3, [r7, #20]
 801275a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801275c:	697b      	ldr	r3, [r7, #20]
 801275e:	68db      	ldr	r3, [r3, #12]
 8012760:	899b      	ldrh	r3, [r3, #12]
 8012762:	b29c      	uxth	r4, r3
 8012764:	7efb      	ldrb	r3, [r7, #27]
 8012766:	b29b      	uxth	r3, r3
 8012768:	4618      	mov	r0, r3
 801276a:	f7fa fa8a 	bl	800cc82 <lwip_htons>
 801276e:	4603      	mov	r3, r0
 8012770:	461a      	mov	r2, r3
 8012772:	697b      	ldr	r3, [r7, #20]
 8012774:	68db      	ldr	r3, [r3, #12]
 8012776:	4322      	orrs	r2, r4
 8012778:	b292      	uxth	r2, r2
 801277a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801277c:	697b      	ldr	r3, [r7, #20]
 801277e:	685b      	ldr	r3, [r3, #4]
 8012780:	4618      	mov	r0, r3
 8012782:	f7fb fda7 	bl	800e2d4 <pbuf_clen>
 8012786:	4603      	mov	r3, r0
 8012788:	461a      	mov	r2, r3
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012790:	4413      	add	r3, r2
 8012792:	b29a      	uxth	r2, r3
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801279a:	69fb      	ldr	r3, [r7, #28]
 801279c:	685b      	ldr	r3, [r3, #4]
 801279e:	4618      	mov	r0, r3
 80127a0:	f7fb fd98 	bl	800e2d4 <pbuf_clen>
 80127a4:	4603      	mov	r3, r0
 80127a6:	461a      	mov	r2, r3
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80127ae:	4413      	add	r3, r2
 80127b0:	b29a      	uxth	r2, r3
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80127b8:	697b      	ldr	r3, [r7, #20]
 80127ba:	681a      	ldr	r2, [r3, #0]
 80127bc:	69fb      	ldr	r3, [r7, #28]
 80127be:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80127c0:	697b      	ldr	r3, [r7, #20]
 80127c2:	69fa      	ldr	r2, [r7, #28]
 80127c4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80127c6:	69fb      	ldr	r3, [r7, #28]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d103      	bne.n	80127d6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	2200      	movs	r2, #0
 80127d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80127d6:	2300      	movs	r3, #0
 80127d8:	e016      	b.n	8012808 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80127da:	bf00      	nop
 80127dc:	e002      	b.n	80127e4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80127de:	bf00      	nop
 80127e0:	e000      	b.n	80127e4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80127e2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80127e4:	69fb      	ldr	r3, [r7, #28]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d006      	beq.n	80127f8 <tcp_split_unsent_seg+0x25c>
 80127ea:	4b09      	ldr	r3, [pc, #36]	; (8012810 <tcp_split_unsent_seg+0x274>)
 80127ec:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80127f0:	490d      	ldr	r1, [pc, #52]	; (8012828 <tcp_split_unsent_seg+0x28c>)
 80127f2:	4809      	ldr	r0, [pc, #36]	; (8012818 <tcp_split_unsent_seg+0x27c>)
 80127f4:	f006 f96c 	bl	8018ad0 <iprintf>
  if (p != NULL) {
 80127f8:	693b      	ldr	r3, [r7, #16]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d002      	beq.n	8012804 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80127fe:	6938      	ldr	r0, [r7, #16]
 8012800:	f7fb fce0 	bl	800e1c4 <pbuf_free>
  }

  return ERR_MEM;
 8012804:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012808:	4618      	mov	r0, r3
 801280a:	3724      	adds	r7, #36	; 0x24
 801280c:	46bd      	mov	sp, r7
 801280e:	bd90      	pop	{r4, r7, pc}
 8012810:	0801afb0 	.word	0x0801afb0
 8012814:	0801b344 	.word	0x0801b344
 8012818:	0801b004 	.word	0x0801b004
 801281c:	0801b368 	.word	0x0801b368
 8012820:	0801b38c 	.word	0x0801b38c
 8012824:	0801b39c 	.word	0x0801b39c
 8012828:	0801b3ac 	.word	0x0801b3ac

0801282c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801282c:	b590      	push	{r4, r7, lr}
 801282e:	b085      	sub	sp, #20
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d106      	bne.n	8012848 <tcp_send_fin+0x1c>
 801283a:	4b21      	ldr	r3, [pc, #132]	; (80128c0 <tcp_send_fin+0x94>)
 801283c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012840:	4920      	ldr	r1, [pc, #128]	; (80128c4 <tcp_send_fin+0x98>)
 8012842:	4821      	ldr	r0, [pc, #132]	; (80128c8 <tcp_send_fin+0x9c>)
 8012844:	f006 f944 	bl	8018ad0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801284c:	2b00      	cmp	r3, #0
 801284e:	d02e      	beq.n	80128ae <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012854:	60fb      	str	r3, [r7, #12]
 8012856:	e002      	b.n	801285e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d1f8      	bne.n	8012858 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	68db      	ldr	r3, [r3, #12]
 801286a:	899b      	ldrh	r3, [r3, #12]
 801286c:	b29b      	uxth	r3, r3
 801286e:	4618      	mov	r0, r3
 8012870:	f7fa fa07 	bl	800cc82 <lwip_htons>
 8012874:	4603      	mov	r3, r0
 8012876:	b2db      	uxtb	r3, r3
 8012878:	f003 0307 	and.w	r3, r3, #7
 801287c:	2b00      	cmp	r3, #0
 801287e:	d116      	bne.n	80128ae <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	68db      	ldr	r3, [r3, #12]
 8012884:	899b      	ldrh	r3, [r3, #12]
 8012886:	b29c      	uxth	r4, r3
 8012888:	2001      	movs	r0, #1
 801288a:	f7fa f9fa 	bl	800cc82 <lwip_htons>
 801288e:	4603      	mov	r3, r0
 8012890:	461a      	mov	r2, r3
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	68db      	ldr	r3, [r3, #12]
 8012896:	4322      	orrs	r2, r4
 8012898:	b292      	uxth	r2, r2
 801289a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	8b5b      	ldrh	r3, [r3, #26]
 80128a0:	f043 0320 	orr.w	r3, r3, #32
 80128a4:	b29a      	uxth	r2, r3
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80128aa:	2300      	movs	r3, #0
 80128ac:	e004      	b.n	80128b8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80128ae:	2101      	movs	r1, #1
 80128b0:	6878      	ldr	r0, [r7, #4]
 80128b2:	f000 f80b 	bl	80128cc <tcp_enqueue_flags>
 80128b6:	4603      	mov	r3, r0
}
 80128b8:	4618      	mov	r0, r3
 80128ba:	3714      	adds	r7, #20
 80128bc:	46bd      	mov	sp, r7
 80128be:	bd90      	pop	{r4, r7, pc}
 80128c0:	0801afb0 	.word	0x0801afb0
 80128c4:	0801b3b8 	.word	0x0801b3b8
 80128c8:	0801b004 	.word	0x0801b004

080128cc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b08a      	sub	sp, #40	; 0x28
 80128d0:	af02      	add	r7, sp, #8
 80128d2:	6078      	str	r0, [r7, #4]
 80128d4:	460b      	mov	r3, r1
 80128d6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80128d8:	2300      	movs	r3, #0
 80128da:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80128dc:	2300      	movs	r3, #0
 80128de:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80128e0:	78fb      	ldrb	r3, [r7, #3]
 80128e2:	f003 0303 	and.w	r3, r3, #3
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d106      	bne.n	80128f8 <tcp_enqueue_flags+0x2c>
 80128ea:	4b67      	ldr	r3, [pc, #412]	; (8012a88 <tcp_enqueue_flags+0x1bc>)
 80128ec:	f240 4212 	movw	r2, #1042	; 0x412
 80128f0:	4966      	ldr	r1, [pc, #408]	; (8012a8c <tcp_enqueue_flags+0x1c0>)
 80128f2:	4867      	ldr	r0, [pc, #412]	; (8012a90 <tcp_enqueue_flags+0x1c4>)
 80128f4:	f006 f8ec 	bl	8018ad0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d106      	bne.n	801290c <tcp_enqueue_flags+0x40>
 80128fe:	4b62      	ldr	r3, [pc, #392]	; (8012a88 <tcp_enqueue_flags+0x1bc>)
 8012900:	f240 4213 	movw	r2, #1043	; 0x413
 8012904:	4963      	ldr	r1, [pc, #396]	; (8012a94 <tcp_enqueue_flags+0x1c8>)
 8012906:	4862      	ldr	r0, [pc, #392]	; (8012a90 <tcp_enqueue_flags+0x1c4>)
 8012908:	f006 f8e2 	bl	8018ad0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801290c:	78fb      	ldrb	r3, [r7, #3]
 801290e:	f003 0302 	and.w	r3, r3, #2
 8012912:	2b00      	cmp	r3, #0
 8012914:	d001      	beq.n	801291a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012916:	2301      	movs	r3, #1
 8012918:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801291a:	7ffb      	ldrb	r3, [r7, #31]
 801291c:	009b      	lsls	r3, r3, #2
 801291e:	b2db      	uxtb	r3, r3
 8012920:	f003 0304 	and.w	r3, r3, #4
 8012924:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012926:	7dfb      	ldrb	r3, [r7, #23]
 8012928:	b29b      	uxth	r3, r3
 801292a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801292e:	4619      	mov	r1, r3
 8012930:	2036      	movs	r0, #54	; 0x36
 8012932:	f7fb f967 	bl	800dc04 <pbuf_alloc>
 8012936:	6138      	str	r0, [r7, #16]
 8012938:	693b      	ldr	r3, [r7, #16]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d109      	bne.n	8012952 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	8b5b      	ldrh	r3, [r3, #26]
 8012942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012946:	b29a      	uxth	r2, r3
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801294c:	f04f 33ff 	mov.w	r3, #4294967295
 8012950:	e095      	b.n	8012a7e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012952:	693b      	ldr	r3, [r7, #16]
 8012954:	895a      	ldrh	r2, [r3, #10]
 8012956:	7dfb      	ldrb	r3, [r7, #23]
 8012958:	b29b      	uxth	r3, r3
 801295a:	429a      	cmp	r2, r3
 801295c:	d206      	bcs.n	801296c <tcp_enqueue_flags+0xa0>
 801295e:	4b4a      	ldr	r3, [pc, #296]	; (8012a88 <tcp_enqueue_flags+0x1bc>)
 8012960:	f240 423a 	movw	r2, #1082	; 0x43a
 8012964:	494c      	ldr	r1, [pc, #304]	; (8012a98 <tcp_enqueue_flags+0x1cc>)
 8012966:	484a      	ldr	r0, [pc, #296]	; (8012a90 <tcp_enqueue_flags+0x1c4>)
 8012968:	f006 f8b2 	bl	8018ad0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012970:	78fa      	ldrb	r2, [r7, #3]
 8012972:	7ffb      	ldrb	r3, [r7, #31]
 8012974:	9300      	str	r3, [sp, #0]
 8012976:	460b      	mov	r3, r1
 8012978:	6939      	ldr	r1, [r7, #16]
 801297a:	6878      	ldr	r0, [r7, #4]
 801297c:	f7ff fd70 	bl	8012460 <tcp_create_segment>
 8012980:	60f8      	str	r0, [r7, #12]
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d109      	bne.n	801299c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	8b5b      	ldrh	r3, [r3, #26]
 801298c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012990:	b29a      	uxth	r2, r3
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012996:	f04f 33ff 	mov.w	r3, #4294967295
 801299a:	e070      	b.n	8012a7e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	68db      	ldr	r3, [r3, #12]
 80129a0:	f003 0303 	and.w	r3, r3, #3
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d006      	beq.n	80129b6 <tcp_enqueue_flags+0xea>
 80129a8:	4b37      	ldr	r3, [pc, #220]	; (8012a88 <tcp_enqueue_flags+0x1bc>)
 80129aa:	f240 4242 	movw	r2, #1090	; 0x442
 80129ae:	493b      	ldr	r1, [pc, #236]	; (8012a9c <tcp_enqueue_flags+0x1d0>)
 80129b0:	4837      	ldr	r0, [pc, #220]	; (8012a90 <tcp_enqueue_flags+0x1c4>)
 80129b2:	f006 f88d 	bl	8018ad0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	891b      	ldrh	r3, [r3, #8]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d006      	beq.n	80129cc <tcp_enqueue_flags+0x100>
 80129be:	4b32      	ldr	r3, [pc, #200]	; (8012a88 <tcp_enqueue_flags+0x1bc>)
 80129c0:	f240 4243 	movw	r2, #1091	; 0x443
 80129c4:	4936      	ldr	r1, [pc, #216]	; (8012aa0 <tcp_enqueue_flags+0x1d4>)
 80129c6:	4832      	ldr	r0, [pc, #200]	; (8012a90 <tcp_enqueue_flags+0x1c4>)
 80129c8:	f006 f882 	bl	8018ad0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d103      	bne.n	80129dc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	68fa      	ldr	r2, [r7, #12]
 80129d8:	66da      	str	r2, [r3, #108]	; 0x6c
 80129da:	e00d      	b.n	80129f8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129e0:	61bb      	str	r3, [r7, #24]
 80129e2:	e002      	b.n	80129ea <tcp_enqueue_flags+0x11e>
 80129e4:	69bb      	ldr	r3, [r7, #24]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	61bb      	str	r3, [r7, #24]
 80129ea:	69bb      	ldr	r3, [r7, #24]
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d1f8      	bne.n	80129e4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80129f2:	69bb      	ldr	r3, [r7, #24]
 80129f4:	68fa      	ldr	r2, [r7, #12]
 80129f6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	2200      	movs	r2, #0
 80129fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012a00:	78fb      	ldrb	r3, [r7, #3]
 8012a02:	f003 0302 	and.w	r3, r3, #2
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d104      	bne.n	8012a14 <tcp_enqueue_flags+0x148>
 8012a0a:	78fb      	ldrb	r3, [r7, #3]
 8012a0c:	f003 0301 	and.w	r3, r3, #1
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d004      	beq.n	8012a1e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012a18:	1c5a      	adds	r2, r3, #1
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012a1e:	78fb      	ldrb	r3, [r7, #3]
 8012a20:	f003 0301 	and.w	r3, r3, #1
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d006      	beq.n	8012a36 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	8b5b      	ldrh	r3, [r3, #26]
 8012a2c:	f043 0320 	orr.w	r3, r3, #32
 8012a30:	b29a      	uxth	r2, r3
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	685b      	ldr	r3, [r3, #4]
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f7fb fc4a 	bl	800e2d4 <pbuf_clen>
 8012a40:	4603      	mov	r3, r0
 8012a42:	461a      	mov	r2, r3
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a4a:	4413      	add	r3, r2
 8012a4c:	b29a      	uxth	r2, r3
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d00e      	beq.n	8012a7c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d10a      	bne.n	8012a7c <tcp_enqueue_flags+0x1b0>
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d106      	bne.n	8012a7c <tcp_enqueue_flags+0x1b0>
 8012a6e:	4b06      	ldr	r3, [pc, #24]	; (8012a88 <tcp_enqueue_flags+0x1bc>)
 8012a70:	f240 4266 	movw	r2, #1126	; 0x466
 8012a74:	490b      	ldr	r1, [pc, #44]	; (8012aa4 <tcp_enqueue_flags+0x1d8>)
 8012a76:	4806      	ldr	r0, [pc, #24]	; (8012a90 <tcp_enqueue_flags+0x1c4>)
 8012a78:	f006 f82a 	bl	8018ad0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012a7c:	2300      	movs	r3, #0
}
 8012a7e:	4618      	mov	r0, r3
 8012a80:	3720      	adds	r7, #32
 8012a82:	46bd      	mov	sp, r7
 8012a84:	bd80      	pop	{r7, pc}
 8012a86:	bf00      	nop
 8012a88:	0801afb0 	.word	0x0801afb0
 8012a8c:	0801b3d4 	.word	0x0801b3d4
 8012a90:	0801b004 	.word	0x0801b004
 8012a94:	0801b42c 	.word	0x0801b42c
 8012a98:	0801b44c 	.word	0x0801b44c
 8012a9c:	0801b488 	.word	0x0801b488
 8012aa0:	0801b4a0 	.word	0x0801b4a0
 8012aa4:	0801b4cc 	.word	0x0801b4cc

08012aa8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012aa8:	b5b0      	push	{r4, r5, r7, lr}
 8012aaa:	b08a      	sub	sp, #40	; 0x28
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d106      	bne.n	8012ac4 <tcp_output+0x1c>
 8012ab6:	4ba0      	ldr	r3, [pc, #640]	; (8012d38 <tcp_output+0x290>)
 8012ab8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012abc:	499f      	ldr	r1, [pc, #636]	; (8012d3c <tcp_output+0x294>)
 8012abe:	48a0      	ldr	r0, [pc, #640]	; (8012d40 <tcp_output+0x298>)
 8012ac0:	f006 f806 	bl	8018ad0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	7d1b      	ldrb	r3, [r3, #20]
 8012ac8:	2b01      	cmp	r3, #1
 8012aca:	d106      	bne.n	8012ada <tcp_output+0x32>
 8012acc:	4b9a      	ldr	r3, [pc, #616]	; (8012d38 <tcp_output+0x290>)
 8012ace:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8012ad2:	499c      	ldr	r1, [pc, #624]	; (8012d44 <tcp_output+0x29c>)
 8012ad4:	489a      	ldr	r0, [pc, #616]	; (8012d40 <tcp_output+0x298>)
 8012ad6:	f005 fffb 	bl	8018ad0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012ada:	4b9b      	ldr	r3, [pc, #620]	; (8012d48 <tcp_output+0x2a0>)
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	687a      	ldr	r2, [r7, #4]
 8012ae0:	429a      	cmp	r2, r3
 8012ae2:	d101      	bne.n	8012ae8 <tcp_output+0x40>
    return ERR_OK;
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	e1d2      	b.n	8012e8e <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012af4:	429a      	cmp	r2, r3
 8012af6:	d203      	bcs.n	8012b00 <tcp_output+0x58>
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012afe:	e002      	b.n	8012b06 <tcp_output+0x5e>
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012b06:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b0c:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d10b      	bne.n	8012b2c <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	8b5b      	ldrh	r3, [r3, #26]
 8012b18:	f003 0302 	and.w	r3, r3, #2
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	f000 81a9 	beq.w	8012e74 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8012b22:	6878      	ldr	r0, [r7, #4]
 8012b24:	f000 fdd6 	bl	80136d4 <tcp_send_empty_ack>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	e1b0      	b.n	8012e8e <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012b2c:	6879      	ldr	r1, [r7, #4]
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	3304      	adds	r3, #4
 8012b32:	461a      	mov	r2, r3
 8012b34:	6878      	ldr	r0, [r7, #4]
 8012b36:	f7ff fc77 	bl	8012428 <tcp_route>
 8012b3a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012b3c:	697b      	ldr	r3, [r7, #20]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d102      	bne.n	8012b48 <tcp_output+0xa0>
    return ERR_RTE;
 8012b42:	f06f 0303 	mvn.w	r3, #3
 8012b46:	e1a2      	b.n	8012e8e <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d003      	beq.n	8012b56 <tcp_output+0xae>
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d111      	bne.n	8012b7a <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012b56:	697b      	ldr	r3, [r7, #20]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d002      	beq.n	8012b62 <tcp_output+0xba>
 8012b5c:	697b      	ldr	r3, [r7, #20]
 8012b5e:	3304      	adds	r3, #4
 8012b60:	e000      	b.n	8012b64 <tcp_output+0xbc>
 8012b62:	2300      	movs	r3, #0
 8012b64:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012b66:	693b      	ldr	r3, [r7, #16]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d102      	bne.n	8012b72 <tcp_output+0xca>
      return ERR_RTE;
 8012b6c:	f06f 0303 	mvn.w	r3, #3
 8012b70:	e18d      	b.n	8012e8e <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012b72:	693b      	ldr	r3, [r7, #16]
 8012b74:	681a      	ldr	r2, [r3, #0]
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b7c:	68db      	ldr	r3, [r3, #12]
 8012b7e:	685b      	ldr	r3, [r3, #4]
 8012b80:	4618      	mov	r0, r3
 8012b82:	f7fa f893 	bl	800ccac <lwip_htonl>
 8012b86:	4602      	mov	r2, r0
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b8c:	1ad3      	subs	r3, r2, r3
 8012b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b90:	8912      	ldrh	r2, [r2, #8]
 8012b92:	4413      	add	r3, r2
 8012b94:	69ba      	ldr	r2, [r7, #24]
 8012b96:	429a      	cmp	r2, r3
 8012b98:	d227      	bcs.n	8012bea <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012ba0:	461a      	mov	r2, r3
 8012ba2:	69bb      	ldr	r3, [r7, #24]
 8012ba4:	4293      	cmp	r3, r2
 8012ba6:	d114      	bne.n	8012bd2 <tcp_output+0x12a>
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d110      	bne.n	8012bd2 <tcp_output+0x12a>
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d10b      	bne.n	8012bd2 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	2201      	movs	r2, #1
 8012bc6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	2200      	movs	r2, #0
 8012bce:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	8b5b      	ldrh	r3, [r3, #26]
 8012bd6:	f003 0302 	and.w	r3, r3, #2
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	f000 814c 	beq.w	8012e78 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8012be0:	6878      	ldr	r0, [r7, #4]
 8012be2:	f000 fd77 	bl	80136d4 <tcp_send_empty_ack>
 8012be6:	4603      	mov	r3, r0
 8012be8:	e151      	b.n	8012e8e <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	2200      	movs	r2, #0
 8012bee:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bf6:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012bf8:	6a3b      	ldr	r3, [r7, #32]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	f000 811b 	beq.w	8012e36 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8012c00:	e002      	b.n	8012c08 <tcp_output+0x160>
 8012c02:	6a3b      	ldr	r3, [r7, #32]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	623b      	str	r3, [r7, #32]
 8012c08:	6a3b      	ldr	r3, [r7, #32]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d1f8      	bne.n	8012c02 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012c10:	e111      	b.n	8012e36 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c14:	68db      	ldr	r3, [r3, #12]
 8012c16:	899b      	ldrh	r3, [r3, #12]
 8012c18:	b29b      	uxth	r3, r3
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	f7fa f831 	bl	800cc82 <lwip_htons>
 8012c20:	4603      	mov	r3, r0
 8012c22:	b2db      	uxtb	r3, r3
 8012c24:	f003 0304 	and.w	r3, r3, #4
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d006      	beq.n	8012c3a <tcp_output+0x192>
 8012c2c:	4b42      	ldr	r3, [pc, #264]	; (8012d38 <tcp_output+0x290>)
 8012c2e:	f240 5237 	movw	r2, #1335	; 0x537
 8012c32:	4946      	ldr	r1, [pc, #280]	; (8012d4c <tcp_output+0x2a4>)
 8012c34:	4842      	ldr	r0, [pc, #264]	; (8012d40 <tcp_output+0x298>)
 8012c36:	f005 ff4b 	bl	8018ad0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d01f      	beq.n	8012c82 <tcp_output+0x1da>
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	8b5b      	ldrh	r3, [r3, #26]
 8012c46:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d119      	bne.n	8012c82 <tcp_output+0x1da>
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d00b      	beq.n	8012c6e <tcp_output+0x1c6>
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d110      	bne.n	8012c82 <tcp_output+0x1da>
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c64:	891a      	ldrh	r2, [r3, #8]
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c6a:	429a      	cmp	r2, r3
 8012c6c:	d209      	bcs.n	8012c82 <tcp_output+0x1da>
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d004      	beq.n	8012c82 <tcp_output+0x1da>
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012c7e:	2b08      	cmp	r3, #8
 8012c80:	d901      	bls.n	8012c86 <tcp_output+0x1de>
 8012c82:	2301      	movs	r3, #1
 8012c84:	e000      	b.n	8012c88 <tcp_output+0x1e0>
 8012c86:	2300      	movs	r3, #0
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d106      	bne.n	8012c9a <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	8b5b      	ldrh	r3, [r3, #26]
 8012c90:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	f000 80e3 	beq.w	8012e60 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	7d1b      	ldrb	r3, [r3, #20]
 8012c9e:	2b02      	cmp	r3, #2
 8012ca0:	d00d      	beq.n	8012cbe <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ca4:	68db      	ldr	r3, [r3, #12]
 8012ca6:	899b      	ldrh	r3, [r3, #12]
 8012ca8:	b29c      	uxth	r4, r3
 8012caa:	2010      	movs	r0, #16
 8012cac:	f7f9 ffe9 	bl	800cc82 <lwip_htons>
 8012cb0:	4603      	mov	r3, r0
 8012cb2:	461a      	mov	r2, r3
 8012cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cb6:	68db      	ldr	r3, [r3, #12]
 8012cb8:	4322      	orrs	r2, r4
 8012cba:	b292      	uxth	r2, r2
 8012cbc:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012cbe:	697a      	ldr	r2, [r7, #20]
 8012cc0:	6879      	ldr	r1, [r7, #4]
 8012cc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012cc4:	f000 f908 	bl	8012ed8 <tcp_output_segment>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d009      	beq.n	8012ce8 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	8b5b      	ldrh	r3, [r3, #26]
 8012cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012cdc:	b29a      	uxth	r2, r3
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	835a      	strh	r2, [r3, #26]
      return err;
 8012ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ce6:	e0d2      	b.n	8012e8e <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cea:	681a      	ldr	r2, [r3, #0]
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	7d1b      	ldrb	r3, [r3, #20]
 8012cf4:	2b02      	cmp	r3, #2
 8012cf6:	d006      	beq.n	8012d06 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	8b5b      	ldrh	r3, [r3, #26]
 8012cfc:	f023 0303 	bic.w	r3, r3, #3
 8012d00:	b29a      	uxth	r2, r3
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d08:	68db      	ldr	r3, [r3, #12]
 8012d0a:	685b      	ldr	r3, [r3, #4]
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f7f9 ffcd 	bl	800ccac <lwip_htonl>
 8012d12:	4604      	mov	r4, r0
 8012d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d16:	891b      	ldrh	r3, [r3, #8]
 8012d18:	461d      	mov	r5, r3
 8012d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d1c:	68db      	ldr	r3, [r3, #12]
 8012d1e:	899b      	ldrh	r3, [r3, #12]
 8012d20:	b29b      	uxth	r3, r3
 8012d22:	4618      	mov	r0, r3
 8012d24:	f7f9 ffad 	bl	800cc82 <lwip_htons>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	b2db      	uxtb	r3, r3
 8012d2c:	f003 0303 	and.w	r3, r3, #3
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d00d      	beq.n	8012d50 <tcp_output+0x2a8>
 8012d34:	2301      	movs	r3, #1
 8012d36:	e00c      	b.n	8012d52 <tcp_output+0x2aa>
 8012d38:	0801afb0 	.word	0x0801afb0
 8012d3c:	0801b4f4 	.word	0x0801b4f4
 8012d40:	0801b004 	.word	0x0801b004
 8012d44:	0801b50c 	.word	0x0801b50c
 8012d48:	20007ee0 	.word	0x20007ee0
 8012d4c:	0801b534 	.word	0x0801b534
 8012d50:	2300      	movs	r3, #0
 8012d52:	442b      	add	r3, r5
 8012d54:	4423      	add	r3, r4
 8012d56:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012d5c:	68bb      	ldr	r3, [r7, #8]
 8012d5e:	1ad3      	subs	r3, r2, r3
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	da02      	bge.n	8012d6a <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	68ba      	ldr	r2, [r7, #8]
 8012d68:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d6c:	891b      	ldrh	r3, [r3, #8]
 8012d6e:	461c      	mov	r4, r3
 8012d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d72:	68db      	ldr	r3, [r3, #12]
 8012d74:	899b      	ldrh	r3, [r3, #12]
 8012d76:	b29b      	uxth	r3, r3
 8012d78:	4618      	mov	r0, r3
 8012d7a:	f7f9 ff82 	bl	800cc82 <lwip_htons>
 8012d7e:	4603      	mov	r3, r0
 8012d80:	b2db      	uxtb	r3, r3
 8012d82:	f003 0303 	and.w	r3, r3, #3
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d001      	beq.n	8012d8e <tcp_output+0x2e6>
 8012d8a:	2301      	movs	r3, #1
 8012d8c:	e000      	b.n	8012d90 <tcp_output+0x2e8>
 8012d8e:	2300      	movs	r3, #0
 8012d90:	4423      	add	r3, r4
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d049      	beq.n	8012e2a <tcp_output+0x382>
      seg->next = NULL;
 8012d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d98:	2200      	movs	r2, #0
 8012d9a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d105      	bne.n	8012db0 <tcp_output+0x308>
        pcb->unacked = seg;
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012da8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dac:	623b      	str	r3, [r7, #32]
 8012dae:	e03f      	b.n	8012e30 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012db2:	68db      	ldr	r3, [r3, #12]
 8012db4:	685b      	ldr	r3, [r3, #4]
 8012db6:	4618      	mov	r0, r3
 8012db8:	f7f9 ff78 	bl	800ccac <lwip_htonl>
 8012dbc:	4604      	mov	r4, r0
 8012dbe:	6a3b      	ldr	r3, [r7, #32]
 8012dc0:	68db      	ldr	r3, [r3, #12]
 8012dc2:	685b      	ldr	r3, [r3, #4]
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	f7f9 ff71 	bl	800ccac <lwip_htonl>
 8012dca:	4603      	mov	r3, r0
 8012dcc:	1ae3      	subs	r3, r4, r3
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	da24      	bge.n	8012e1c <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	3370      	adds	r3, #112	; 0x70
 8012dd6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012dd8:	e002      	b.n	8012de0 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012dda:	69fb      	ldr	r3, [r7, #28]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012de0:	69fb      	ldr	r3, [r7, #28]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d011      	beq.n	8012e0c <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012de8:	69fb      	ldr	r3, [r7, #28]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	68db      	ldr	r3, [r3, #12]
 8012dee:	685b      	ldr	r3, [r3, #4]
 8012df0:	4618      	mov	r0, r3
 8012df2:	f7f9 ff5b 	bl	800ccac <lwip_htonl>
 8012df6:	4604      	mov	r4, r0
 8012df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dfa:	68db      	ldr	r3, [r3, #12]
 8012dfc:	685b      	ldr	r3, [r3, #4]
 8012dfe:	4618      	mov	r0, r3
 8012e00:	f7f9 ff54 	bl	800ccac <lwip_htonl>
 8012e04:	4603      	mov	r3, r0
 8012e06:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	dbe6      	blt.n	8012dda <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8012e0c:	69fb      	ldr	r3, [r7, #28]
 8012e0e:	681a      	ldr	r2, [r3, #0]
 8012e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e12:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012e14:	69fb      	ldr	r3, [r7, #28]
 8012e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e18:	601a      	str	r2, [r3, #0]
 8012e1a:	e009      	b.n	8012e30 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012e1c:	6a3b      	ldr	r3, [r7, #32]
 8012e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e20:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012e22:	6a3b      	ldr	r3, [r7, #32]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	623b      	str	r3, [r7, #32]
 8012e28:	e002      	b.n	8012e30 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012e2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e2c:	f7fc fc42 	bl	800f6b4 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e34:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d012      	beq.n	8012e62 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e3e:	68db      	ldr	r3, [r3, #12]
 8012e40:	685b      	ldr	r3, [r3, #4]
 8012e42:	4618      	mov	r0, r3
 8012e44:	f7f9 ff32 	bl	800ccac <lwip_htonl>
 8012e48:	4602      	mov	r2, r0
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e4e:	1ad3      	subs	r3, r2, r3
 8012e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e52:	8912      	ldrh	r2, [r2, #8]
 8012e54:	4413      	add	r3, r2
  while (seg != NULL &&
 8012e56:	69ba      	ldr	r2, [r7, #24]
 8012e58:	429a      	cmp	r2, r3
 8012e5a:	f4bf aeda 	bcs.w	8012c12 <tcp_output+0x16a>
 8012e5e:	e000      	b.n	8012e62 <tcp_output+0x3ba>
      break;
 8012e60:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d108      	bne.n	8012e7c <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012e72:	e004      	b.n	8012e7e <tcp_output+0x3d6>
    goto output_done;
 8012e74:	bf00      	nop
 8012e76:	e002      	b.n	8012e7e <tcp_output+0x3d6>
    goto output_done;
 8012e78:	bf00      	nop
 8012e7a:	e000      	b.n	8012e7e <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012e7c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	8b5b      	ldrh	r3, [r3, #26]
 8012e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012e86:	b29a      	uxth	r2, r3
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012e8c:	2300      	movs	r3, #0
}
 8012e8e:	4618      	mov	r0, r3
 8012e90:	3728      	adds	r7, #40	; 0x28
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bdb0      	pop	{r4, r5, r7, pc}
 8012e96:	bf00      	nop

08012e98 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b082      	sub	sp, #8
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d106      	bne.n	8012eb4 <tcp_output_segment_busy+0x1c>
 8012ea6:	4b09      	ldr	r3, [pc, #36]	; (8012ecc <tcp_output_segment_busy+0x34>)
 8012ea8:	f240 529a 	movw	r2, #1434	; 0x59a
 8012eac:	4908      	ldr	r1, [pc, #32]	; (8012ed0 <tcp_output_segment_busy+0x38>)
 8012eae:	4809      	ldr	r0, [pc, #36]	; (8012ed4 <tcp_output_segment_busy+0x3c>)
 8012eb0:	f005 fe0e 	bl	8018ad0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	685b      	ldr	r3, [r3, #4]
 8012eb8:	7b9b      	ldrb	r3, [r3, #14]
 8012eba:	2b01      	cmp	r3, #1
 8012ebc:	d001      	beq.n	8012ec2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012ebe:	2301      	movs	r3, #1
 8012ec0:	e000      	b.n	8012ec4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012ec2:	2300      	movs	r3, #0
}
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	3708      	adds	r7, #8
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd80      	pop	{r7, pc}
 8012ecc:	0801afb0 	.word	0x0801afb0
 8012ed0:	0801b54c 	.word	0x0801b54c
 8012ed4:	0801b004 	.word	0x0801b004

08012ed8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012ed8:	b5b0      	push	{r4, r5, r7, lr}
 8012eda:	b08c      	sub	sp, #48	; 0x30
 8012edc:	af04      	add	r7, sp, #16
 8012ede:	60f8      	str	r0, [r7, #12]
 8012ee0:	60b9      	str	r1, [r7, #8]
 8012ee2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d106      	bne.n	8012ef8 <tcp_output_segment+0x20>
 8012eea:	4b64      	ldr	r3, [pc, #400]	; (801307c <tcp_output_segment+0x1a4>)
 8012eec:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012ef0:	4963      	ldr	r1, [pc, #396]	; (8013080 <tcp_output_segment+0x1a8>)
 8012ef2:	4864      	ldr	r0, [pc, #400]	; (8013084 <tcp_output_segment+0x1ac>)
 8012ef4:	f005 fdec 	bl	8018ad0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012ef8:	68bb      	ldr	r3, [r7, #8]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d106      	bne.n	8012f0c <tcp_output_segment+0x34>
 8012efe:	4b5f      	ldr	r3, [pc, #380]	; (801307c <tcp_output_segment+0x1a4>)
 8012f00:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012f04:	4960      	ldr	r1, [pc, #384]	; (8013088 <tcp_output_segment+0x1b0>)
 8012f06:	485f      	ldr	r0, [pc, #380]	; (8013084 <tcp_output_segment+0x1ac>)
 8012f08:	f005 fde2 	bl	8018ad0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d106      	bne.n	8012f20 <tcp_output_segment+0x48>
 8012f12:	4b5a      	ldr	r3, [pc, #360]	; (801307c <tcp_output_segment+0x1a4>)
 8012f14:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012f18:	495c      	ldr	r1, [pc, #368]	; (801308c <tcp_output_segment+0x1b4>)
 8012f1a:	485a      	ldr	r0, [pc, #360]	; (8013084 <tcp_output_segment+0x1ac>)
 8012f1c:	f005 fdd8 	bl	8018ad0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012f20:	68f8      	ldr	r0, [r7, #12]
 8012f22:	f7ff ffb9 	bl	8012e98 <tcp_output_segment_busy>
 8012f26:	4603      	mov	r3, r0
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d001      	beq.n	8012f30 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	e0a0      	b.n	8013072 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012f30:	68bb      	ldr	r3, [r7, #8]
 8012f32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	68dc      	ldr	r4, [r3, #12]
 8012f38:	4610      	mov	r0, r2
 8012f3a:	f7f9 feb7 	bl	800ccac <lwip_htonl>
 8012f3e:	4603      	mov	r3, r0
 8012f40:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012f42:	68bb      	ldr	r3, [r7, #8]
 8012f44:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	68dc      	ldr	r4, [r3, #12]
 8012f4a:	4610      	mov	r0, r2
 8012f4c:	f7f9 fe99 	bl	800cc82 <lwip_htons>
 8012f50:	4603      	mov	r3, r0
 8012f52:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012f54:	68bb      	ldr	r3, [r7, #8]
 8012f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f58:	68ba      	ldr	r2, [r7, #8]
 8012f5a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012f5c:	441a      	add	r2, r3
 8012f5e:	68bb      	ldr	r3, [r7, #8]
 8012f60:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	68db      	ldr	r3, [r3, #12]
 8012f66:	3314      	adds	r3, #20
 8012f68:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	7a9b      	ldrb	r3, [r3, #10]
 8012f6e:	f003 0301 	and.w	r3, r3, #1
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d015      	beq.n	8012fa2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012f76:	68bb      	ldr	r3, [r7, #8]
 8012f78:	3304      	adds	r3, #4
 8012f7a:	461a      	mov	r2, r3
 8012f7c:	6879      	ldr	r1, [r7, #4]
 8012f7e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012f82:	f7fc fe8d 	bl	800fca0 <tcp_eff_send_mss_netif>
 8012f86:	4603      	mov	r3, r0
 8012f88:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012f8a:	8b7b      	ldrh	r3, [r7, #26]
 8012f8c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012f90:	4618      	mov	r0, r3
 8012f92:	f7f9 fe8b 	bl	800ccac <lwip_htonl>
 8012f96:	4602      	mov	r2, r0
 8012f98:	69fb      	ldr	r3, [r7, #28]
 8012f9a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012f9c:	69fb      	ldr	r3, [r7, #28]
 8012f9e:	3304      	adds	r3, #4
 8012fa0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012fa2:	68bb      	ldr	r3, [r7, #8]
 8012fa4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	da02      	bge.n	8012fb2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012fac:	68bb      	ldr	r3, [r7, #8]
 8012fae:	2200      	movs	r2, #0
 8012fb0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d10c      	bne.n	8012fd4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012fba:	4b35      	ldr	r3, [pc, #212]	; (8013090 <tcp_output_segment+0x1b8>)
 8012fbc:	681a      	ldr	r2, [r3, #0]
 8012fbe:	68bb      	ldr	r3, [r7, #8]
 8012fc0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	68db      	ldr	r3, [r3, #12]
 8012fc6:	685b      	ldr	r3, [r3, #4]
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f7f9 fe6f 	bl	800ccac <lwip_htonl>
 8012fce:	4602      	mov	r2, r0
 8012fd0:	68bb      	ldr	r3, [r7, #8]
 8012fd2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	68db      	ldr	r3, [r3, #12]
 8012fd8:	461a      	mov	r2, r3
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	685b      	ldr	r3, [r3, #4]
 8012fde:	685b      	ldr	r3, [r3, #4]
 8012fe0:	1ad3      	subs	r3, r2, r3
 8012fe2:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	685b      	ldr	r3, [r3, #4]
 8012fe8:	8959      	ldrh	r1, [r3, #10]
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	685b      	ldr	r3, [r3, #4]
 8012fee:	8b3a      	ldrh	r2, [r7, #24]
 8012ff0:	1a8a      	subs	r2, r1, r2
 8012ff2:	b292      	uxth	r2, r2
 8012ff4:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	685b      	ldr	r3, [r3, #4]
 8012ffa:	8919      	ldrh	r1, [r3, #8]
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	685b      	ldr	r3, [r3, #4]
 8013000:	8b3a      	ldrh	r2, [r7, #24]
 8013002:	1a8a      	subs	r2, r1, r2
 8013004:	b292      	uxth	r2, r2
 8013006:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	685b      	ldr	r3, [r3, #4]
 801300c:	68fa      	ldr	r2, [r7, #12]
 801300e:	68d2      	ldr	r2, [r2, #12]
 8013010:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	68db      	ldr	r3, [r3, #12]
 8013016:	2200      	movs	r2, #0
 8013018:	741a      	strb	r2, [r3, #16]
 801301a:	2200      	movs	r2, #0
 801301c:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	68db      	ldr	r3, [r3, #12]
 8013022:	f103 0214 	add.w	r2, r3, #20
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	7a9b      	ldrb	r3, [r3, #10]
 801302a:	009b      	lsls	r3, r3, #2
 801302c:	f003 0304 	and.w	r3, r3, #4
 8013030:	4413      	add	r3, r2
 8013032:	69fa      	ldr	r2, [r7, #28]
 8013034:	429a      	cmp	r2, r3
 8013036:	d006      	beq.n	8013046 <tcp_output_segment+0x16e>
 8013038:	4b10      	ldr	r3, [pc, #64]	; (801307c <tcp_output_segment+0x1a4>)
 801303a:	f240 621c 	movw	r2, #1564	; 0x61c
 801303e:	4915      	ldr	r1, [pc, #84]	; (8013094 <tcp_output_segment+0x1bc>)
 8013040:	4810      	ldr	r0, [pc, #64]	; (8013084 <tcp_output_segment+0x1ac>)
 8013042:	f005 fd45 	bl	8018ad0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	6858      	ldr	r0, [r3, #4]
 801304a:	68b9      	ldr	r1, [r7, #8]
 801304c:	68bb      	ldr	r3, [r7, #8]
 801304e:	1d1c      	adds	r4, r3, #4
 8013050:	68bb      	ldr	r3, [r7, #8]
 8013052:	7add      	ldrb	r5, [r3, #11]
 8013054:	68bb      	ldr	r3, [r7, #8]
 8013056:	7a9b      	ldrb	r3, [r3, #10]
 8013058:	687a      	ldr	r2, [r7, #4]
 801305a:	9202      	str	r2, [sp, #8]
 801305c:	2206      	movs	r2, #6
 801305e:	9201      	str	r2, [sp, #4]
 8013060:	9300      	str	r3, [sp, #0]
 8013062:	462b      	mov	r3, r5
 8013064:	4622      	mov	r2, r4
 8013066:	f004 fc11 	bl	801788c <ip4_output_if>
 801306a:	4603      	mov	r3, r0
 801306c:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801306e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013072:	4618      	mov	r0, r3
 8013074:	3720      	adds	r7, #32
 8013076:	46bd      	mov	sp, r7
 8013078:	bdb0      	pop	{r4, r5, r7, pc}
 801307a:	bf00      	nop
 801307c:	0801afb0 	.word	0x0801afb0
 8013080:	0801b574 	.word	0x0801b574
 8013084:	0801b004 	.word	0x0801b004
 8013088:	0801b594 	.word	0x0801b594
 801308c:	0801b5b4 	.word	0x0801b5b4
 8013090:	20007ed0 	.word	0x20007ed0
 8013094:	0801b5d8 	.word	0x0801b5d8

08013098 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013098:	b5b0      	push	{r4, r5, r7, lr}
 801309a:	b084      	sub	sp, #16
 801309c:	af00      	add	r7, sp, #0
 801309e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d106      	bne.n	80130b4 <tcp_rexmit_rto_prepare+0x1c>
 80130a6:	4b31      	ldr	r3, [pc, #196]	; (801316c <tcp_rexmit_rto_prepare+0xd4>)
 80130a8:	f240 6263 	movw	r2, #1635	; 0x663
 80130ac:	4930      	ldr	r1, [pc, #192]	; (8013170 <tcp_rexmit_rto_prepare+0xd8>)
 80130ae:	4831      	ldr	r0, [pc, #196]	; (8013174 <tcp_rexmit_rto_prepare+0xdc>)
 80130b0:	f005 fd0e 	bl	8018ad0 <iprintf>

  if (pcb->unacked == NULL) {
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d102      	bne.n	80130c2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80130bc:	f06f 0305 	mvn.w	r3, #5
 80130c0:	e050      	b.n	8013164 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130c6:	60fb      	str	r3, [r7, #12]
 80130c8:	e00b      	b.n	80130e2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80130ca:	68f8      	ldr	r0, [r7, #12]
 80130cc:	f7ff fee4 	bl	8012e98 <tcp_output_segment_busy>
 80130d0:	4603      	mov	r3, r0
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d002      	beq.n	80130dc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80130d6:	f06f 0305 	mvn.w	r3, #5
 80130da:	e043      	b.n	8013164 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	60fb      	str	r3, [r7, #12]
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d1ef      	bne.n	80130ca <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80130ea:	68f8      	ldr	r0, [r7, #12]
 80130ec:	f7ff fed4 	bl	8012e98 <tcp_output_segment_busy>
 80130f0:	4603      	mov	r3, r0
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d002      	beq.n	80130fc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80130f6:	f06f 0305 	mvn.w	r3, #5
 80130fa:	e033      	b.n	8013164 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	2200      	movs	r2, #0
 8013110:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	8b5b      	ldrh	r3, [r3, #26]
 8013116:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801311a:	b29a      	uxth	r2, r3
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	68db      	ldr	r3, [r3, #12]
 8013124:	685b      	ldr	r3, [r3, #4]
 8013126:	4618      	mov	r0, r3
 8013128:	f7f9 fdc0 	bl	800ccac <lwip_htonl>
 801312c:	4604      	mov	r4, r0
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	891b      	ldrh	r3, [r3, #8]
 8013132:	461d      	mov	r5, r3
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	68db      	ldr	r3, [r3, #12]
 8013138:	899b      	ldrh	r3, [r3, #12]
 801313a:	b29b      	uxth	r3, r3
 801313c:	4618      	mov	r0, r3
 801313e:	f7f9 fda0 	bl	800cc82 <lwip_htons>
 8013142:	4603      	mov	r3, r0
 8013144:	b2db      	uxtb	r3, r3
 8013146:	f003 0303 	and.w	r3, r3, #3
 801314a:	2b00      	cmp	r3, #0
 801314c:	d001      	beq.n	8013152 <tcp_rexmit_rto_prepare+0xba>
 801314e:	2301      	movs	r3, #1
 8013150:	e000      	b.n	8013154 <tcp_rexmit_rto_prepare+0xbc>
 8013152:	2300      	movs	r3, #0
 8013154:	442b      	add	r3, r5
 8013156:	18e2      	adds	r2, r4, r3
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	2200      	movs	r2, #0
 8013160:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013162:	2300      	movs	r3, #0
}
 8013164:	4618      	mov	r0, r3
 8013166:	3710      	adds	r7, #16
 8013168:	46bd      	mov	sp, r7
 801316a:	bdb0      	pop	{r4, r5, r7, pc}
 801316c:	0801afb0 	.word	0x0801afb0
 8013170:	0801b5ec 	.word	0x0801b5ec
 8013174:	0801b004 	.word	0x0801b004

08013178 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013178:	b580      	push	{r7, lr}
 801317a:	b082      	sub	sp, #8
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d106      	bne.n	8013194 <tcp_rexmit_rto_commit+0x1c>
 8013186:	4b0d      	ldr	r3, [pc, #52]	; (80131bc <tcp_rexmit_rto_commit+0x44>)
 8013188:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801318c:	490c      	ldr	r1, [pc, #48]	; (80131c0 <tcp_rexmit_rto_commit+0x48>)
 801318e:	480d      	ldr	r0, [pc, #52]	; (80131c4 <tcp_rexmit_rto_commit+0x4c>)
 8013190:	f005 fc9e 	bl	8018ad0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801319a:	2bff      	cmp	r3, #255	; 0xff
 801319c:	d007      	beq.n	80131ae <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80131a4:	3301      	adds	r3, #1
 80131a6:	b2da      	uxtb	r2, r3
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80131ae:	6878      	ldr	r0, [r7, #4]
 80131b0:	f7ff fc7a 	bl	8012aa8 <tcp_output>
}
 80131b4:	bf00      	nop
 80131b6:	3708      	adds	r7, #8
 80131b8:	46bd      	mov	sp, r7
 80131ba:	bd80      	pop	{r7, pc}
 80131bc:	0801afb0 	.word	0x0801afb0
 80131c0:	0801b610 	.word	0x0801b610
 80131c4:	0801b004 	.word	0x0801b004

080131c8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80131c8:	b580      	push	{r7, lr}
 80131ca:	b082      	sub	sp, #8
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d106      	bne.n	80131e4 <tcp_rexmit_rto+0x1c>
 80131d6:	4b0a      	ldr	r3, [pc, #40]	; (8013200 <tcp_rexmit_rto+0x38>)
 80131d8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80131dc:	4909      	ldr	r1, [pc, #36]	; (8013204 <tcp_rexmit_rto+0x3c>)
 80131de:	480a      	ldr	r0, [pc, #40]	; (8013208 <tcp_rexmit_rto+0x40>)
 80131e0:	f005 fc76 	bl	8018ad0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80131e4:	6878      	ldr	r0, [r7, #4]
 80131e6:	f7ff ff57 	bl	8013098 <tcp_rexmit_rto_prepare>
 80131ea:	4603      	mov	r3, r0
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d102      	bne.n	80131f6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80131f0:	6878      	ldr	r0, [r7, #4]
 80131f2:	f7ff ffc1 	bl	8013178 <tcp_rexmit_rto_commit>
  }
}
 80131f6:	bf00      	nop
 80131f8:	3708      	adds	r7, #8
 80131fa:	46bd      	mov	sp, r7
 80131fc:	bd80      	pop	{r7, pc}
 80131fe:	bf00      	nop
 8013200:	0801afb0 	.word	0x0801afb0
 8013204:	0801b634 	.word	0x0801b634
 8013208:	0801b004 	.word	0x0801b004

0801320c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801320c:	b590      	push	{r4, r7, lr}
 801320e:	b085      	sub	sp, #20
 8013210:	af00      	add	r7, sp, #0
 8013212:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d106      	bne.n	8013228 <tcp_rexmit+0x1c>
 801321a:	4b2f      	ldr	r3, [pc, #188]	; (80132d8 <tcp_rexmit+0xcc>)
 801321c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8013220:	492e      	ldr	r1, [pc, #184]	; (80132dc <tcp_rexmit+0xd0>)
 8013222:	482f      	ldr	r0, [pc, #188]	; (80132e0 <tcp_rexmit+0xd4>)
 8013224:	f005 fc54 	bl	8018ad0 <iprintf>

  if (pcb->unacked == NULL) {
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801322c:	2b00      	cmp	r3, #0
 801322e:	d102      	bne.n	8013236 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8013230:	f06f 0305 	mvn.w	r3, #5
 8013234:	e04c      	b.n	80132d0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801323a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801323c:	68b8      	ldr	r0, [r7, #8]
 801323e:	f7ff fe2b 	bl	8012e98 <tcp_output_segment_busy>
 8013242:	4603      	mov	r3, r0
 8013244:	2b00      	cmp	r3, #0
 8013246:	d002      	beq.n	801324e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8013248:	f06f 0305 	mvn.w	r3, #5
 801324c:	e040      	b.n	80132d0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801324e:	68bb      	ldr	r3, [r7, #8]
 8013250:	681a      	ldr	r2, [r3, #0]
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	336c      	adds	r3, #108	; 0x6c
 801325a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801325c:	e002      	b.n	8013264 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d011      	beq.n	8013290 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	68db      	ldr	r3, [r3, #12]
 8013272:	685b      	ldr	r3, [r3, #4]
 8013274:	4618      	mov	r0, r3
 8013276:	f7f9 fd19 	bl	800ccac <lwip_htonl>
 801327a:	4604      	mov	r4, r0
 801327c:	68bb      	ldr	r3, [r7, #8]
 801327e:	68db      	ldr	r3, [r3, #12]
 8013280:	685b      	ldr	r3, [r3, #4]
 8013282:	4618      	mov	r0, r3
 8013284:	f7f9 fd12 	bl	800ccac <lwip_htonl>
 8013288:	4603      	mov	r3, r0
 801328a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801328c:	2b00      	cmp	r3, #0
 801328e:	dbe6      	blt.n	801325e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	681a      	ldr	r2, [r3, #0]
 8013294:	68bb      	ldr	r3, [r7, #8]
 8013296:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	68ba      	ldr	r2, [r7, #8]
 801329c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801329e:	68bb      	ldr	r3, [r7, #8]
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d103      	bne.n	80132ae <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	2200      	movs	r2, #0
 80132aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80132b4:	2bff      	cmp	r3, #255	; 0xff
 80132b6:	d007      	beq.n	80132c8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80132be:	3301      	adds	r3, #1
 80132c0:	b2da      	uxtb	r2, r3
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2200      	movs	r2, #0
 80132cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80132ce:	2300      	movs	r3, #0
}
 80132d0:	4618      	mov	r0, r3
 80132d2:	3714      	adds	r7, #20
 80132d4:	46bd      	mov	sp, r7
 80132d6:	bd90      	pop	{r4, r7, pc}
 80132d8:	0801afb0 	.word	0x0801afb0
 80132dc:	0801b650 	.word	0x0801b650
 80132e0:	0801b004 	.word	0x0801b004

080132e4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b082      	sub	sp, #8
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d106      	bne.n	8013300 <tcp_rexmit_fast+0x1c>
 80132f2:	4b2e      	ldr	r3, [pc, #184]	; (80133ac <tcp_rexmit_fast+0xc8>)
 80132f4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80132f8:	492d      	ldr	r1, [pc, #180]	; (80133b0 <tcp_rexmit_fast+0xcc>)
 80132fa:	482e      	ldr	r0, [pc, #184]	; (80133b4 <tcp_rexmit_fast+0xd0>)
 80132fc:	f005 fbe8 	bl	8018ad0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013304:	2b00      	cmp	r3, #0
 8013306:	d04d      	beq.n	80133a4 <tcp_rexmit_fast+0xc0>
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	8b5b      	ldrh	r3, [r3, #26]
 801330c:	f003 0304 	and.w	r3, r3, #4
 8013310:	2b00      	cmp	r3, #0
 8013312:	d147      	bne.n	80133a4 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013314:	6878      	ldr	r0, [r7, #4]
 8013316:	f7ff ff79 	bl	801320c <tcp_rexmit>
 801331a:	4603      	mov	r3, r0
 801331c:	2b00      	cmp	r3, #0
 801331e:	d141      	bne.n	80133a4 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801332c:	429a      	cmp	r2, r3
 801332e:	d207      	bcs.n	8013340 <tcp_rexmit_fast+0x5c>
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013336:	0fda      	lsrs	r2, r3, #31
 8013338:	4413      	add	r3, r2
 801333a:	105b      	asrs	r3, r3, #1
 801333c:	b29b      	uxth	r3, r3
 801333e:	e006      	b.n	801334e <tcp_rexmit_fast+0x6a>
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013346:	0fda      	lsrs	r2, r3, #31
 8013348:	4413      	add	r3, r2
 801334a:	105b      	asrs	r3, r3, #1
 801334c:	b29b      	uxth	r3, r3
 801334e:	687a      	ldr	r2, [r7, #4]
 8013350:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801335a:	461a      	mov	r2, r3
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013360:	005b      	lsls	r3, r3, #1
 8013362:	429a      	cmp	r2, r3
 8013364:	d206      	bcs.n	8013374 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801336a:	005b      	lsls	r3, r3, #1
 801336c:	b29a      	uxth	r2, r3
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801337e:	4619      	mov	r1, r3
 8013380:	0049      	lsls	r1, r1, #1
 8013382:	440b      	add	r3, r1
 8013384:	b29b      	uxth	r3, r3
 8013386:	4413      	add	r3, r2
 8013388:	b29a      	uxth	r2, r3
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	8b5b      	ldrh	r3, [r3, #26]
 8013394:	f043 0304 	orr.w	r3, r3, #4
 8013398:	b29a      	uxth	r2, r3
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	2200      	movs	r2, #0
 80133a2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80133a4:	bf00      	nop
 80133a6:	3708      	adds	r7, #8
 80133a8:	46bd      	mov	sp, r7
 80133aa:	bd80      	pop	{r7, pc}
 80133ac:	0801afb0 	.word	0x0801afb0
 80133b0:	0801b668 	.word	0x0801b668
 80133b4:	0801b004 	.word	0x0801b004

080133b8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b086      	sub	sp, #24
 80133bc:	af00      	add	r7, sp, #0
 80133be:	60f8      	str	r0, [r7, #12]
 80133c0:	607b      	str	r3, [r7, #4]
 80133c2:	460b      	mov	r3, r1
 80133c4:	817b      	strh	r3, [r7, #10]
 80133c6:	4613      	mov	r3, r2
 80133c8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80133ca:	897a      	ldrh	r2, [r7, #10]
 80133cc:	893b      	ldrh	r3, [r7, #8]
 80133ce:	4413      	add	r3, r2
 80133d0:	b29b      	uxth	r3, r3
 80133d2:	3314      	adds	r3, #20
 80133d4:	b29b      	uxth	r3, r3
 80133d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80133da:	4619      	mov	r1, r3
 80133dc:	2022      	movs	r0, #34	; 0x22
 80133de:	f7fa fc11 	bl	800dc04 <pbuf_alloc>
 80133e2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80133e4:	697b      	ldr	r3, [r7, #20]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d04e      	beq.n	8013488 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80133ea:	697b      	ldr	r3, [r7, #20]
 80133ec:	895b      	ldrh	r3, [r3, #10]
 80133ee:	461a      	mov	r2, r3
 80133f0:	897b      	ldrh	r3, [r7, #10]
 80133f2:	3314      	adds	r3, #20
 80133f4:	429a      	cmp	r2, r3
 80133f6:	da06      	bge.n	8013406 <tcp_output_alloc_header_common+0x4e>
 80133f8:	4b26      	ldr	r3, [pc, #152]	; (8013494 <tcp_output_alloc_header_common+0xdc>)
 80133fa:	f240 7224 	movw	r2, #1828	; 0x724
 80133fe:	4926      	ldr	r1, [pc, #152]	; (8013498 <tcp_output_alloc_header_common+0xe0>)
 8013400:	4826      	ldr	r0, [pc, #152]	; (801349c <tcp_output_alloc_header_common+0xe4>)
 8013402:	f005 fb65 	bl	8018ad0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013406:	697b      	ldr	r3, [r7, #20]
 8013408:	685b      	ldr	r3, [r3, #4]
 801340a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801340c:	8c3b      	ldrh	r3, [r7, #32]
 801340e:	4618      	mov	r0, r3
 8013410:	f7f9 fc37 	bl	800cc82 <lwip_htons>
 8013414:	4603      	mov	r3, r0
 8013416:	461a      	mov	r2, r3
 8013418:	693b      	ldr	r3, [r7, #16]
 801341a:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801341c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801341e:	4618      	mov	r0, r3
 8013420:	f7f9 fc2f 	bl	800cc82 <lwip_htons>
 8013424:	4603      	mov	r3, r0
 8013426:	461a      	mov	r2, r3
 8013428:	693b      	ldr	r3, [r7, #16]
 801342a:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801342c:	693b      	ldr	r3, [r7, #16]
 801342e:	687a      	ldr	r2, [r7, #4]
 8013430:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013432:	68f8      	ldr	r0, [r7, #12]
 8013434:	f7f9 fc3a 	bl	800ccac <lwip_htonl>
 8013438:	4602      	mov	r2, r0
 801343a:	693b      	ldr	r3, [r7, #16]
 801343c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801343e:	897b      	ldrh	r3, [r7, #10]
 8013440:	089b      	lsrs	r3, r3, #2
 8013442:	b29b      	uxth	r3, r3
 8013444:	3305      	adds	r3, #5
 8013446:	b29b      	uxth	r3, r3
 8013448:	031b      	lsls	r3, r3, #12
 801344a:	b29a      	uxth	r2, r3
 801344c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013450:	b29b      	uxth	r3, r3
 8013452:	4313      	orrs	r3, r2
 8013454:	b29b      	uxth	r3, r3
 8013456:	4618      	mov	r0, r3
 8013458:	f7f9 fc13 	bl	800cc82 <lwip_htons>
 801345c:	4603      	mov	r3, r0
 801345e:	461a      	mov	r2, r3
 8013460:	693b      	ldr	r3, [r7, #16]
 8013462:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013464:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013466:	4618      	mov	r0, r3
 8013468:	f7f9 fc0b 	bl	800cc82 <lwip_htons>
 801346c:	4603      	mov	r3, r0
 801346e:	461a      	mov	r2, r3
 8013470:	693b      	ldr	r3, [r7, #16]
 8013472:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013474:	693b      	ldr	r3, [r7, #16]
 8013476:	2200      	movs	r2, #0
 8013478:	741a      	strb	r2, [r3, #16]
 801347a:	2200      	movs	r2, #0
 801347c:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801347e:	693b      	ldr	r3, [r7, #16]
 8013480:	2200      	movs	r2, #0
 8013482:	749a      	strb	r2, [r3, #18]
 8013484:	2200      	movs	r2, #0
 8013486:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013488:	697b      	ldr	r3, [r7, #20]
}
 801348a:	4618      	mov	r0, r3
 801348c:	3718      	adds	r7, #24
 801348e:	46bd      	mov	sp, r7
 8013490:	bd80      	pop	{r7, pc}
 8013492:	bf00      	nop
 8013494:	0801afb0 	.word	0x0801afb0
 8013498:	0801b688 	.word	0x0801b688
 801349c:	0801b004 	.word	0x0801b004

080134a0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80134a0:	b5b0      	push	{r4, r5, r7, lr}
 80134a2:	b08a      	sub	sp, #40	; 0x28
 80134a4:	af04      	add	r7, sp, #16
 80134a6:	60f8      	str	r0, [r7, #12]
 80134a8:	607b      	str	r3, [r7, #4]
 80134aa:	460b      	mov	r3, r1
 80134ac:	817b      	strh	r3, [r7, #10]
 80134ae:	4613      	mov	r3, r2
 80134b0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d106      	bne.n	80134c6 <tcp_output_alloc_header+0x26>
 80134b8:	4b15      	ldr	r3, [pc, #84]	; (8013510 <tcp_output_alloc_header+0x70>)
 80134ba:	f240 7242 	movw	r2, #1858	; 0x742
 80134be:	4915      	ldr	r1, [pc, #84]	; (8013514 <tcp_output_alloc_header+0x74>)
 80134c0:	4815      	ldr	r0, [pc, #84]	; (8013518 <tcp_output_alloc_header+0x78>)
 80134c2:	f005 fb05 	bl	8018ad0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	8adb      	ldrh	r3, [r3, #22]
 80134ce:	68fa      	ldr	r2, [r7, #12]
 80134d0:	8b12      	ldrh	r2, [r2, #24]
 80134d2:	68f9      	ldr	r1, [r7, #12]
 80134d4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80134d6:	893d      	ldrh	r5, [r7, #8]
 80134d8:	897c      	ldrh	r4, [r7, #10]
 80134da:	9103      	str	r1, [sp, #12]
 80134dc:	2110      	movs	r1, #16
 80134de:	9102      	str	r1, [sp, #8]
 80134e0:	9201      	str	r2, [sp, #4]
 80134e2:	9300      	str	r3, [sp, #0]
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	462a      	mov	r2, r5
 80134e8:	4621      	mov	r1, r4
 80134ea:	f7ff ff65 	bl	80133b8 <tcp_output_alloc_header_common>
 80134ee:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80134f0:	697b      	ldr	r3, [r7, #20]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d006      	beq.n	8013504 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134fa:	68fa      	ldr	r2, [r7, #12]
 80134fc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80134fe:	441a      	add	r2, r3
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013504:	697b      	ldr	r3, [r7, #20]
}
 8013506:	4618      	mov	r0, r3
 8013508:	3718      	adds	r7, #24
 801350a:	46bd      	mov	sp, r7
 801350c:	bdb0      	pop	{r4, r5, r7, pc}
 801350e:	bf00      	nop
 8013510:	0801afb0 	.word	0x0801afb0
 8013514:	0801b6b8 	.word	0x0801b6b8
 8013518:	0801b004 	.word	0x0801b004

0801351c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801351c:	b580      	push	{r7, lr}
 801351e:	b088      	sub	sp, #32
 8013520:	af00      	add	r7, sp, #0
 8013522:	60f8      	str	r0, [r7, #12]
 8013524:	60b9      	str	r1, [r7, #8]
 8013526:	4611      	mov	r1, r2
 8013528:	461a      	mov	r2, r3
 801352a:	460b      	mov	r3, r1
 801352c:	71fb      	strb	r3, [r7, #7]
 801352e:	4613      	mov	r3, r2
 8013530:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013532:	2300      	movs	r3, #0
 8013534:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013536:	68bb      	ldr	r3, [r7, #8]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d106      	bne.n	801354a <tcp_output_fill_options+0x2e>
 801353c:	4b13      	ldr	r3, [pc, #76]	; (801358c <tcp_output_fill_options+0x70>)
 801353e:	f240 7256 	movw	r2, #1878	; 0x756
 8013542:	4913      	ldr	r1, [pc, #76]	; (8013590 <tcp_output_fill_options+0x74>)
 8013544:	4813      	ldr	r0, [pc, #76]	; (8013594 <tcp_output_fill_options+0x78>)
 8013546:	f005 fac3 	bl	8018ad0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801354a:	68bb      	ldr	r3, [r7, #8]
 801354c:	685b      	ldr	r3, [r3, #4]
 801354e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013550:	69bb      	ldr	r3, [r7, #24]
 8013552:	3314      	adds	r3, #20
 8013554:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013556:	69bb      	ldr	r3, [r7, #24]
 8013558:	f103 0214 	add.w	r2, r3, #20
 801355c:	8bfb      	ldrh	r3, [r7, #30]
 801355e:	009b      	lsls	r3, r3, #2
 8013560:	4619      	mov	r1, r3
 8013562:	79fb      	ldrb	r3, [r7, #7]
 8013564:	009b      	lsls	r3, r3, #2
 8013566:	f003 0304 	and.w	r3, r3, #4
 801356a:	440b      	add	r3, r1
 801356c:	4413      	add	r3, r2
 801356e:	697a      	ldr	r2, [r7, #20]
 8013570:	429a      	cmp	r2, r3
 8013572:	d006      	beq.n	8013582 <tcp_output_fill_options+0x66>
 8013574:	4b05      	ldr	r3, [pc, #20]	; (801358c <tcp_output_fill_options+0x70>)
 8013576:	f240 7275 	movw	r2, #1909	; 0x775
 801357a:	4907      	ldr	r1, [pc, #28]	; (8013598 <tcp_output_fill_options+0x7c>)
 801357c:	4805      	ldr	r0, [pc, #20]	; (8013594 <tcp_output_fill_options+0x78>)
 801357e:	f005 faa7 	bl	8018ad0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013582:	bf00      	nop
 8013584:	3720      	adds	r7, #32
 8013586:	46bd      	mov	sp, r7
 8013588:	bd80      	pop	{r7, pc}
 801358a:	bf00      	nop
 801358c:	0801afb0 	.word	0x0801afb0
 8013590:	0801b6e0 	.word	0x0801b6e0
 8013594:	0801b004 	.word	0x0801b004
 8013598:	0801b5d8 	.word	0x0801b5d8

0801359c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b08a      	sub	sp, #40	; 0x28
 80135a0:	af04      	add	r7, sp, #16
 80135a2:	60f8      	str	r0, [r7, #12]
 80135a4:	60b9      	str	r1, [r7, #8]
 80135a6:	607a      	str	r2, [r7, #4]
 80135a8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80135aa:	68bb      	ldr	r3, [r7, #8]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d106      	bne.n	80135be <tcp_output_control_segment+0x22>
 80135b0:	4b1c      	ldr	r3, [pc, #112]	; (8013624 <tcp_output_control_segment+0x88>)
 80135b2:	f240 7287 	movw	r2, #1927	; 0x787
 80135b6:	491c      	ldr	r1, [pc, #112]	; (8013628 <tcp_output_control_segment+0x8c>)
 80135b8:	481c      	ldr	r0, [pc, #112]	; (801362c <tcp_output_control_segment+0x90>)
 80135ba:	f005 fa89 	bl	8018ad0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80135be:	683a      	ldr	r2, [r7, #0]
 80135c0:	6879      	ldr	r1, [r7, #4]
 80135c2:	68f8      	ldr	r0, [r7, #12]
 80135c4:	f7fe ff30 	bl	8012428 <tcp_route>
 80135c8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80135ca:	693b      	ldr	r3, [r7, #16]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d102      	bne.n	80135d6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80135d0:	23fc      	movs	r3, #252	; 0xfc
 80135d2:	75fb      	strb	r3, [r7, #23]
 80135d4:	e01c      	b.n	8013610 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d006      	beq.n	80135ea <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	7adb      	ldrb	r3, [r3, #11]
 80135e0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	7a9b      	ldrb	r3, [r3, #10]
 80135e6:	757b      	strb	r3, [r7, #21]
 80135e8:	e003      	b.n	80135f2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80135ea:	23ff      	movs	r3, #255	; 0xff
 80135ec:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80135ee:	2300      	movs	r3, #0
 80135f0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80135f2:	7dba      	ldrb	r2, [r7, #22]
 80135f4:	693b      	ldr	r3, [r7, #16]
 80135f6:	9302      	str	r3, [sp, #8]
 80135f8:	2306      	movs	r3, #6
 80135fa:	9301      	str	r3, [sp, #4]
 80135fc:	7d7b      	ldrb	r3, [r7, #21]
 80135fe:	9300      	str	r3, [sp, #0]
 8013600:	4613      	mov	r3, r2
 8013602:	683a      	ldr	r2, [r7, #0]
 8013604:	6879      	ldr	r1, [r7, #4]
 8013606:	68b8      	ldr	r0, [r7, #8]
 8013608:	f004 f940 	bl	801788c <ip4_output_if>
 801360c:	4603      	mov	r3, r0
 801360e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013610:	68b8      	ldr	r0, [r7, #8]
 8013612:	f7fa fdd7 	bl	800e1c4 <pbuf_free>
  return err;
 8013616:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801361a:	4618      	mov	r0, r3
 801361c:	3718      	adds	r7, #24
 801361e:	46bd      	mov	sp, r7
 8013620:	bd80      	pop	{r7, pc}
 8013622:	bf00      	nop
 8013624:	0801afb0 	.word	0x0801afb0
 8013628:	0801b708 	.word	0x0801b708
 801362c:	0801b004 	.word	0x0801b004

08013630 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013630:	b590      	push	{r4, r7, lr}
 8013632:	b08b      	sub	sp, #44	; 0x2c
 8013634:	af04      	add	r7, sp, #16
 8013636:	60f8      	str	r0, [r7, #12]
 8013638:	60b9      	str	r1, [r7, #8]
 801363a:	607a      	str	r2, [r7, #4]
 801363c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801363e:	683b      	ldr	r3, [r7, #0]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d106      	bne.n	8013652 <tcp_rst+0x22>
 8013644:	4b1f      	ldr	r3, [pc, #124]	; (80136c4 <tcp_rst+0x94>)
 8013646:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801364a:	491f      	ldr	r1, [pc, #124]	; (80136c8 <tcp_rst+0x98>)
 801364c:	481f      	ldr	r0, [pc, #124]	; (80136cc <tcp_rst+0x9c>)
 801364e:	f005 fa3f 	bl	8018ad0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013654:	2b00      	cmp	r3, #0
 8013656:	d106      	bne.n	8013666 <tcp_rst+0x36>
 8013658:	4b1a      	ldr	r3, [pc, #104]	; (80136c4 <tcp_rst+0x94>)
 801365a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801365e:	491c      	ldr	r1, [pc, #112]	; (80136d0 <tcp_rst+0xa0>)
 8013660:	481a      	ldr	r0, [pc, #104]	; (80136cc <tcp_rst+0x9c>)
 8013662:	f005 fa35 	bl	8018ad0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013666:	2300      	movs	r3, #0
 8013668:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801366a:	f246 0308 	movw	r3, #24584	; 0x6008
 801366e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013670:	7dfb      	ldrb	r3, [r7, #23]
 8013672:	b29c      	uxth	r4, r3
 8013674:	68b8      	ldr	r0, [r7, #8]
 8013676:	f7f9 fb19 	bl	800ccac <lwip_htonl>
 801367a:	4602      	mov	r2, r0
 801367c:	8abb      	ldrh	r3, [r7, #20]
 801367e:	9303      	str	r3, [sp, #12]
 8013680:	2314      	movs	r3, #20
 8013682:	9302      	str	r3, [sp, #8]
 8013684:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013686:	9301      	str	r3, [sp, #4]
 8013688:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801368a:	9300      	str	r3, [sp, #0]
 801368c:	4613      	mov	r3, r2
 801368e:	2200      	movs	r2, #0
 8013690:	4621      	mov	r1, r4
 8013692:	6878      	ldr	r0, [r7, #4]
 8013694:	f7ff fe90 	bl	80133b8 <tcp_output_alloc_header_common>
 8013698:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801369a:	693b      	ldr	r3, [r7, #16]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d00c      	beq.n	80136ba <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80136a0:	7dfb      	ldrb	r3, [r7, #23]
 80136a2:	2200      	movs	r2, #0
 80136a4:	6939      	ldr	r1, [r7, #16]
 80136a6:	68f8      	ldr	r0, [r7, #12]
 80136a8:	f7ff ff38 	bl	801351c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80136ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ae:	683a      	ldr	r2, [r7, #0]
 80136b0:	6939      	ldr	r1, [r7, #16]
 80136b2:	68f8      	ldr	r0, [r7, #12]
 80136b4:	f7ff ff72 	bl	801359c <tcp_output_control_segment>
 80136b8:	e000      	b.n	80136bc <tcp_rst+0x8c>
    return;
 80136ba:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80136bc:	371c      	adds	r7, #28
 80136be:	46bd      	mov	sp, r7
 80136c0:	bd90      	pop	{r4, r7, pc}
 80136c2:	bf00      	nop
 80136c4:	0801afb0 	.word	0x0801afb0
 80136c8:	0801b734 	.word	0x0801b734
 80136cc:	0801b004 	.word	0x0801b004
 80136d0:	0801b750 	.word	0x0801b750

080136d4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80136d4:	b590      	push	{r4, r7, lr}
 80136d6:	b087      	sub	sp, #28
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80136dc:	2300      	movs	r3, #0
 80136de:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80136e0:	2300      	movs	r3, #0
 80136e2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d106      	bne.n	80136f8 <tcp_send_empty_ack+0x24>
 80136ea:	4b28      	ldr	r3, [pc, #160]	; (801378c <tcp_send_empty_ack+0xb8>)
 80136ec:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80136f0:	4927      	ldr	r1, [pc, #156]	; (8013790 <tcp_send_empty_ack+0xbc>)
 80136f2:	4828      	ldr	r0, [pc, #160]	; (8013794 <tcp_send_empty_ack+0xc0>)
 80136f4:	f005 f9ec 	bl	8018ad0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80136f8:	7dfb      	ldrb	r3, [r7, #23]
 80136fa:	009b      	lsls	r3, r3, #2
 80136fc:	b2db      	uxtb	r3, r3
 80136fe:	f003 0304 	and.w	r3, r3, #4
 8013702:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013704:	7d7b      	ldrb	r3, [r7, #21]
 8013706:	b29c      	uxth	r4, r3
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801370c:	4618      	mov	r0, r3
 801370e:	f7f9 facd 	bl	800ccac <lwip_htonl>
 8013712:	4603      	mov	r3, r0
 8013714:	2200      	movs	r2, #0
 8013716:	4621      	mov	r1, r4
 8013718:	6878      	ldr	r0, [r7, #4]
 801371a:	f7ff fec1 	bl	80134a0 <tcp_output_alloc_header>
 801371e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013720:	693b      	ldr	r3, [r7, #16]
 8013722:	2b00      	cmp	r3, #0
 8013724:	d109      	bne.n	801373a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	8b5b      	ldrh	r3, [r3, #26]
 801372a:	f043 0303 	orr.w	r3, r3, #3
 801372e:	b29a      	uxth	r2, r3
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013734:	f06f 0301 	mvn.w	r3, #1
 8013738:	e023      	b.n	8013782 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801373a:	7dbb      	ldrb	r3, [r7, #22]
 801373c:	7dfa      	ldrb	r2, [r7, #23]
 801373e:	6939      	ldr	r1, [r7, #16]
 8013740:	6878      	ldr	r0, [r7, #4]
 8013742:	f7ff feeb 	bl	801351c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013746:	687a      	ldr	r2, [r7, #4]
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	3304      	adds	r3, #4
 801374c:	6939      	ldr	r1, [r7, #16]
 801374e:	6878      	ldr	r0, [r7, #4]
 8013750:	f7ff ff24 	bl	801359c <tcp_output_control_segment>
 8013754:	4603      	mov	r3, r0
 8013756:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d007      	beq.n	8013770 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	8b5b      	ldrh	r3, [r3, #26]
 8013764:	f043 0303 	orr.w	r3, r3, #3
 8013768:	b29a      	uxth	r2, r3
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	835a      	strh	r2, [r3, #26]
 801376e:	e006      	b.n	801377e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	8b5b      	ldrh	r3, [r3, #26]
 8013774:	f023 0303 	bic.w	r3, r3, #3
 8013778:	b29a      	uxth	r2, r3
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801377e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013782:	4618      	mov	r0, r3
 8013784:	371c      	adds	r7, #28
 8013786:	46bd      	mov	sp, r7
 8013788:	bd90      	pop	{r4, r7, pc}
 801378a:	bf00      	nop
 801378c:	0801afb0 	.word	0x0801afb0
 8013790:	0801b76c 	.word	0x0801b76c
 8013794:	0801b004 	.word	0x0801b004

08013798 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013798:	b590      	push	{r4, r7, lr}
 801379a:	b087      	sub	sp, #28
 801379c:	af00      	add	r7, sp, #0
 801379e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80137a0:	2300      	movs	r3, #0
 80137a2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d106      	bne.n	80137b8 <tcp_keepalive+0x20>
 80137aa:	4b18      	ldr	r3, [pc, #96]	; (801380c <tcp_keepalive+0x74>)
 80137ac:	f640 0224 	movw	r2, #2084	; 0x824
 80137b0:	4917      	ldr	r1, [pc, #92]	; (8013810 <tcp_keepalive+0x78>)
 80137b2:	4818      	ldr	r0, [pc, #96]	; (8013814 <tcp_keepalive+0x7c>)
 80137b4:	f005 f98c 	bl	8018ad0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80137b8:	7dfb      	ldrb	r3, [r7, #23]
 80137ba:	b29c      	uxth	r4, r3
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80137c0:	3b01      	subs	r3, #1
 80137c2:	4618      	mov	r0, r3
 80137c4:	f7f9 fa72 	bl	800ccac <lwip_htonl>
 80137c8:	4603      	mov	r3, r0
 80137ca:	2200      	movs	r2, #0
 80137cc:	4621      	mov	r1, r4
 80137ce:	6878      	ldr	r0, [r7, #4]
 80137d0:	f7ff fe66 	bl	80134a0 <tcp_output_alloc_header>
 80137d4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80137d6:	693b      	ldr	r3, [r7, #16]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d102      	bne.n	80137e2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80137dc:	f04f 33ff 	mov.w	r3, #4294967295
 80137e0:	e010      	b.n	8013804 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80137e2:	7dfb      	ldrb	r3, [r7, #23]
 80137e4:	2200      	movs	r2, #0
 80137e6:	6939      	ldr	r1, [r7, #16]
 80137e8:	6878      	ldr	r0, [r7, #4]
 80137ea:	f7ff fe97 	bl	801351c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80137ee:	687a      	ldr	r2, [r7, #4]
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	3304      	adds	r3, #4
 80137f4:	6939      	ldr	r1, [r7, #16]
 80137f6:	6878      	ldr	r0, [r7, #4]
 80137f8:	f7ff fed0 	bl	801359c <tcp_output_control_segment>
 80137fc:	4603      	mov	r3, r0
 80137fe:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013800:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013804:	4618      	mov	r0, r3
 8013806:	371c      	adds	r7, #28
 8013808:	46bd      	mov	sp, r7
 801380a:	bd90      	pop	{r4, r7, pc}
 801380c:	0801afb0 	.word	0x0801afb0
 8013810:	0801b78c 	.word	0x0801b78c
 8013814:	0801b004 	.word	0x0801b004

08013818 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013818:	b590      	push	{r4, r7, lr}
 801381a:	b08b      	sub	sp, #44	; 0x2c
 801381c:	af00      	add	r7, sp, #0
 801381e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013820:	2300      	movs	r3, #0
 8013822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d106      	bne.n	801383a <tcp_zero_window_probe+0x22>
 801382c:	4b4c      	ldr	r3, [pc, #304]	; (8013960 <tcp_zero_window_probe+0x148>)
 801382e:	f640 024f 	movw	r2, #2127	; 0x84f
 8013832:	494c      	ldr	r1, [pc, #304]	; (8013964 <tcp_zero_window_probe+0x14c>)
 8013834:	484c      	ldr	r0, [pc, #304]	; (8013968 <tcp_zero_window_probe+0x150>)
 8013836:	f005 f94b 	bl	8018ad0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801383e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013840:	6a3b      	ldr	r3, [r7, #32]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d101      	bne.n	801384a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013846:	2300      	movs	r3, #0
 8013848:	e086      	b.n	8013958 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013850:	2bff      	cmp	r3, #255	; 0xff
 8013852:	d007      	beq.n	8013864 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801385a:	3301      	adds	r3, #1
 801385c:	b2da      	uxtb	r2, r3
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013864:	6a3b      	ldr	r3, [r7, #32]
 8013866:	68db      	ldr	r3, [r3, #12]
 8013868:	899b      	ldrh	r3, [r3, #12]
 801386a:	b29b      	uxth	r3, r3
 801386c:	4618      	mov	r0, r3
 801386e:	f7f9 fa08 	bl	800cc82 <lwip_htons>
 8013872:	4603      	mov	r3, r0
 8013874:	b2db      	uxtb	r3, r3
 8013876:	f003 0301 	and.w	r3, r3, #1
 801387a:	2b00      	cmp	r3, #0
 801387c:	d005      	beq.n	801388a <tcp_zero_window_probe+0x72>
 801387e:	6a3b      	ldr	r3, [r7, #32]
 8013880:	891b      	ldrh	r3, [r3, #8]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d101      	bne.n	801388a <tcp_zero_window_probe+0x72>
 8013886:	2301      	movs	r3, #1
 8013888:	e000      	b.n	801388c <tcp_zero_window_probe+0x74>
 801388a:	2300      	movs	r3, #0
 801388c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801388e:	7ffb      	ldrb	r3, [r7, #31]
 8013890:	2b00      	cmp	r3, #0
 8013892:	bf0c      	ite	eq
 8013894:	2301      	moveq	r3, #1
 8013896:	2300      	movne	r3, #0
 8013898:	b2db      	uxtb	r3, r3
 801389a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801389c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80138a0:	b299      	uxth	r1, r3
 80138a2:	6a3b      	ldr	r3, [r7, #32]
 80138a4:	68db      	ldr	r3, [r3, #12]
 80138a6:	685b      	ldr	r3, [r3, #4]
 80138a8:	8bba      	ldrh	r2, [r7, #28]
 80138aa:	6878      	ldr	r0, [r7, #4]
 80138ac:	f7ff fdf8 	bl	80134a0 <tcp_output_alloc_header>
 80138b0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80138b2:	69bb      	ldr	r3, [r7, #24]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d102      	bne.n	80138be <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80138b8:	f04f 33ff 	mov.w	r3, #4294967295
 80138bc:	e04c      	b.n	8013958 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80138be:	69bb      	ldr	r3, [r7, #24]
 80138c0:	685b      	ldr	r3, [r3, #4]
 80138c2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80138c4:	7ffb      	ldrb	r3, [r7, #31]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d011      	beq.n	80138ee <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80138ca:	697b      	ldr	r3, [r7, #20]
 80138cc:	899b      	ldrh	r3, [r3, #12]
 80138ce:	b29b      	uxth	r3, r3
 80138d0:	b21b      	sxth	r3, r3
 80138d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80138d6:	b21c      	sxth	r4, r3
 80138d8:	2011      	movs	r0, #17
 80138da:	f7f9 f9d2 	bl	800cc82 <lwip_htons>
 80138de:	4603      	mov	r3, r0
 80138e0:	b21b      	sxth	r3, r3
 80138e2:	4323      	orrs	r3, r4
 80138e4:	b21b      	sxth	r3, r3
 80138e6:	b29a      	uxth	r2, r3
 80138e8:	697b      	ldr	r3, [r7, #20]
 80138ea:	819a      	strh	r2, [r3, #12]
 80138ec:	e010      	b.n	8013910 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80138ee:	69bb      	ldr	r3, [r7, #24]
 80138f0:	685b      	ldr	r3, [r3, #4]
 80138f2:	3314      	adds	r3, #20
 80138f4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80138f6:	6a3b      	ldr	r3, [r7, #32]
 80138f8:	6858      	ldr	r0, [r3, #4]
 80138fa:	6a3b      	ldr	r3, [r7, #32]
 80138fc:	685b      	ldr	r3, [r3, #4]
 80138fe:	891a      	ldrh	r2, [r3, #8]
 8013900:	6a3b      	ldr	r3, [r7, #32]
 8013902:	891b      	ldrh	r3, [r3, #8]
 8013904:	1ad3      	subs	r3, r2, r3
 8013906:	b29b      	uxth	r3, r3
 8013908:	2201      	movs	r2, #1
 801390a:	6939      	ldr	r1, [r7, #16]
 801390c:	f7fa fe54 	bl	800e5b8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013910:	6a3b      	ldr	r3, [r7, #32]
 8013912:	68db      	ldr	r3, [r3, #12]
 8013914:	685b      	ldr	r3, [r3, #4]
 8013916:	4618      	mov	r0, r3
 8013918:	f7f9 f9c8 	bl	800ccac <lwip_htonl>
 801391c:	4603      	mov	r3, r0
 801391e:	3301      	adds	r3, #1
 8013920:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	1ad3      	subs	r3, r2, r3
 801392a:	2b00      	cmp	r3, #0
 801392c:	da02      	bge.n	8013934 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	68fa      	ldr	r2, [r7, #12]
 8013932:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013938:	2200      	movs	r2, #0
 801393a:	69b9      	ldr	r1, [r7, #24]
 801393c:	6878      	ldr	r0, [r7, #4]
 801393e:	f7ff fded 	bl	801351c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013942:	687a      	ldr	r2, [r7, #4]
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	3304      	adds	r3, #4
 8013948:	69b9      	ldr	r1, [r7, #24]
 801394a:	6878      	ldr	r0, [r7, #4]
 801394c:	f7ff fe26 	bl	801359c <tcp_output_control_segment>
 8013950:	4603      	mov	r3, r0
 8013952:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013954:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013958:	4618      	mov	r0, r3
 801395a:	372c      	adds	r7, #44	; 0x2c
 801395c:	46bd      	mov	sp, r7
 801395e:	bd90      	pop	{r4, r7, pc}
 8013960:	0801afb0 	.word	0x0801afb0
 8013964:	0801b7a8 	.word	0x0801b7a8
 8013968:	0801b004 	.word	0x0801b004

0801396c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b082      	sub	sp, #8
 8013970:	af00      	add	r7, sp, #0
 8013972:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013974:	f7fa ff0e 	bl	800e794 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013978:	4b0a      	ldr	r3, [pc, #40]	; (80139a4 <tcpip_tcp_timer+0x38>)
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d103      	bne.n	8013988 <tcpip_tcp_timer+0x1c>
 8013980:	4b09      	ldr	r3, [pc, #36]	; (80139a8 <tcpip_tcp_timer+0x3c>)
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d005      	beq.n	8013994 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013988:	2200      	movs	r2, #0
 801398a:	4908      	ldr	r1, [pc, #32]	; (80139ac <tcpip_tcp_timer+0x40>)
 801398c:	20fa      	movs	r0, #250	; 0xfa
 801398e:	f000 f8f1 	bl	8013b74 <sys_timeout>
 8013992:	e002      	b.n	801399a <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013994:	4b06      	ldr	r3, [pc, #24]	; (80139b0 <tcpip_tcp_timer+0x44>)
 8013996:	2200      	movs	r2, #0
 8013998:	601a      	str	r2, [r3, #0]
  }
}
 801399a:	bf00      	nop
 801399c:	3708      	adds	r7, #8
 801399e:	46bd      	mov	sp, r7
 80139a0:	bd80      	pop	{r7, pc}
 80139a2:	bf00      	nop
 80139a4:	20007ecc 	.word	0x20007ecc
 80139a8:	20007edc 	.word	0x20007edc
 80139ac:	0801396d 	.word	0x0801396d
 80139b0:	200004b8 	.word	0x200004b8

080139b4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80139b8:	4b0a      	ldr	r3, [pc, #40]	; (80139e4 <tcp_timer_needed+0x30>)
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d10f      	bne.n	80139e0 <tcp_timer_needed+0x2c>
 80139c0:	4b09      	ldr	r3, [pc, #36]	; (80139e8 <tcp_timer_needed+0x34>)
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d103      	bne.n	80139d0 <tcp_timer_needed+0x1c>
 80139c8:	4b08      	ldr	r3, [pc, #32]	; (80139ec <tcp_timer_needed+0x38>)
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d007      	beq.n	80139e0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80139d0:	4b04      	ldr	r3, [pc, #16]	; (80139e4 <tcp_timer_needed+0x30>)
 80139d2:	2201      	movs	r2, #1
 80139d4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80139d6:	2200      	movs	r2, #0
 80139d8:	4905      	ldr	r1, [pc, #20]	; (80139f0 <tcp_timer_needed+0x3c>)
 80139da:	20fa      	movs	r0, #250	; 0xfa
 80139dc:	f000 f8ca 	bl	8013b74 <sys_timeout>
  }
}
 80139e0:	bf00      	nop
 80139e2:	bd80      	pop	{r7, pc}
 80139e4:	200004b8 	.word	0x200004b8
 80139e8:	20007ecc 	.word	0x20007ecc
 80139ec:	20007edc 	.word	0x20007edc
 80139f0:	0801396d 	.word	0x0801396d

080139f4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80139f4:	b580      	push	{r7, lr}
 80139f6:	b086      	sub	sp, #24
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	60f8      	str	r0, [r7, #12]
 80139fc:	60b9      	str	r1, [r7, #8]
 80139fe:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013a00:	2006      	movs	r0, #6
 8013a02:	f7f9 fd93 	bl	800d52c <memp_malloc>
 8013a06:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013a08:	693b      	ldr	r3, [r7, #16]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d109      	bne.n	8013a22 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013a0e:	693b      	ldr	r3, [r7, #16]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d151      	bne.n	8013ab8 <sys_timeout_abs+0xc4>
 8013a14:	4b2a      	ldr	r3, [pc, #168]	; (8013ac0 <sys_timeout_abs+0xcc>)
 8013a16:	22be      	movs	r2, #190	; 0xbe
 8013a18:	492a      	ldr	r1, [pc, #168]	; (8013ac4 <sys_timeout_abs+0xd0>)
 8013a1a:	482b      	ldr	r0, [pc, #172]	; (8013ac8 <sys_timeout_abs+0xd4>)
 8013a1c:	f005 f858 	bl	8018ad0 <iprintf>
    return;
 8013a20:	e04a      	b.n	8013ab8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013a22:	693b      	ldr	r3, [r7, #16]
 8013a24:	2200      	movs	r2, #0
 8013a26:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013a28:	693b      	ldr	r3, [r7, #16]
 8013a2a:	68ba      	ldr	r2, [r7, #8]
 8013a2c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013a2e:	693b      	ldr	r3, [r7, #16]
 8013a30:	687a      	ldr	r2, [r7, #4]
 8013a32:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013a34:	693b      	ldr	r3, [r7, #16]
 8013a36:	68fa      	ldr	r2, [r7, #12]
 8013a38:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013a3a:	4b24      	ldr	r3, [pc, #144]	; (8013acc <sys_timeout_abs+0xd8>)
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d103      	bne.n	8013a4a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013a42:	4a22      	ldr	r2, [pc, #136]	; (8013acc <sys_timeout_abs+0xd8>)
 8013a44:	693b      	ldr	r3, [r7, #16]
 8013a46:	6013      	str	r3, [r2, #0]
    return;
 8013a48:	e037      	b.n	8013aba <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013a4a:	693b      	ldr	r3, [r7, #16]
 8013a4c:	685a      	ldr	r2, [r3, #4]
 8013a4e:	4b1f      	ldr	r3, [pc, #124]	; (8013acc <sys_timeout_abs+0xd8>)
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	685b      	ldr	r3, [r3, #4]
 8013a54:	1ad3      	subs	r3, r2, r3
 8013a56:	0fdb      	lsrs	r3, r3, #31
 8013a58:	f003 0301 	and.w	r3, r3, #1
 8013a5c:	b2db      	uxtb	r3, r3
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d007      	beq.n	8013a72 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013a62:	4b1a      	ldr	r3, [pc, #104]	; (8013acc <sys_timeout_abs+0xd8>)
 8013a64:	681a      	ldr	r2, [r3, #0]
 8013a66:	693b      	ldr	r3, [r7, #16]
 8013a68:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013a6a:	4a18      	ldr	r2, [pc, #96]	; (8013acc <sys_timeout_abs+0xd8>)
 8013a6c:	693b      	ldr	r3, [r7, #16]
 8013a6e:	6013      	str	r3, [r2, #0]
 8013a70:	e023      	b.n	8013aba <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013a72:	4b16      	ldr	r3, [pc, #88]	; (8013acc <sys_timeout_abs+0xd8>)
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	617b      	str	r3, [r7, #20]
 8013a78:	e01a      	b.n	8013ab0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013a7a:	697b      	ldr	r3, [r7, #20]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d00b      	beq.n	8013a9a <sys_timeout_abs+0xa6>
 8013a82:	693b      	ldr	r3, [r7, #16]
 8013a84:	685a      	ldr	r2, [r3, #4]
 8013a86:	697b      	ldr	r3, [r7, #20]
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	685b      	ldr	r3, [r3, #4]
 8013a8c:	1ad3      	subs	r3, r2, r3
 8013a8e:	0fdb      	lsrs	r3, r3, #31
 8013a90:	f003 0301 	and.w	r3, r3, #1
 8013a94:	b2db      	uxtb	r3, r3
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d007      	beq.n	8013aaa <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013a9a:	697b      	ldr	r3, [r7, #20]
 8013a9c:	681a      	ldr	r2, [r3, #0]
 8013a9e:	693b      	ldr	r3, [r7, #16]
 8013aa0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013aa2:	697b      	ldr	r3, [r7, #20]
 8013aa4:	693a      	ldr	r2, [r7, #16]
 8013aa6:	601a      	str	r2, [r3, #0]
        break;
 8013aa8:	e007      	b.n	8013aba <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013aaa:	697b      	ldr	r3, [r7, #20]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	617b      	str	r3, [r7, #20]
 8013ab0:	697b      	ldr	r3, [r7, #20]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d1e1      	bne.n	8013a7a <sys_timeout_abs+0x86>
 8013ab6:	e000      	b.n	8013aba <sys_timeout_abs+0xc6>
    return;
 8013ab8:	bf00      	nop
      }
    }
  }
}
 8013aba:	3718      	adds	r7, #24
 8013abc:	46bd      	mov	sp, r7
 8013abe:	bd80      	pop	{r7, pc}
 8013ac0:	0801b7cc 	.word	0x0801b7cc
 8013ac4:	0801b800 	.word	0x0801b800
 8013ac8:	0801b840 	.word	0x0801b840
 8013acc:	200004b0 	.word	0x200004b0

08013ad0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b086      	sub	sp, #24
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013adc:	697b      	ldr	r3, [r7, #20]
 8013ade:	685b      	ldr	r3, [r3, #4]
 8013ae0:	4798      	blx	r3

  now = sys_now();
 8013ae2:	f7f9 f8c7 	bl	800cc74 <sys_now>
 8013ae6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013ae8:	697b      	ldr	r3, [r7, #20]
 8013aea:	681a      	ldr	r2, [r3, #0]
 8013aec:	4b0f      	ldr	r3, [pc, #60]	; (8013b2c <lwip_cyclic_timer+0x5c>)
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	4413      	add	r3, r2
 8013af2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013af4:	68fa      	ldr	r2, [r7, #12]
 8013af6:	693b      	ldr	r3, [r7, #16]
 8013af8:	1ad3      	subs	r3, r2, r3
 8013afa:	0fdb      	lsrs	r3, r3, #31
 8013afc:	f003 0301 	and.w	r3, r3, #1
 8013b00:	b2db      	uxtb	r3, r3
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d009      	beq.n	8013b1a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013b06:	697b      	ldr	r3, [r7, #20]
 8013b08:	681a      	ldr	r2, [r3, #0]
 8013b0a:	693b      	ldr	r3, [r7, #16]
 8013b0c:	4413      	add	r3, r2
 8013b0e:	687a      	ldr	r2, [r7, #4]
 8013b10:	4907      	ldr	r1, [pc, #28]	; (8013b30 <lwip_cyclic_timer+0x60>)
 8013b12:	4618      	mov	r0, r3
 8013b14:	f7ff ff6e 	bl	80139f4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013b18:	e004      	b.n	8013b24 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013b1a:	687a      	ldr	r2, [r7, #4]
 8013b1c:	4904      	ldr	r1, [pc, #16]	; (8013b30 <lwip_cyclic_timer+0x60>)
 8013b1e:	68f8      	ldr	r0, [r7, #12]
 8013b20:	f7ff ff68 	bl	80139f4 <sys_timeout_abs>
}
 8013b24:	bf00      	nop
 8013b26:	3718      	adds	r7, #24
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	bd80      	pop	{r7, pc}
 8013b2c:	200004b4 	.word	0x200004b4
 8013b30:	08013ad1 	.word	0x08013ad1

08013b34 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b082      	sub	sp, #8
 8013b38:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013b3a:	2301      	movs	r3, #1
 8013b3c:	607b      	str	r3, [r7, #4]
 8013b3e:	e00e      	b.n	8013b5e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013b40:	4a0a      	ldr	r2, [pc, #40]	; (8013b6c <sys_timeouts_init+0x38>)
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	00db      	lsls	r3, r3, #3
 8013b4c:	4a07      	ldr	r2, [pc, #28]	; (8013b6c <sys_timeouts_init+0x38>)
 8013b4e:	4413      	add	r3, r2
 8013b50:	461a      	mov	r2, r3
 8013b52:	4907      	ldr	r1, [pc, #28]	; (8013b70 <sys_timeouts_init+0x3c>)
 8013b54:	f000 f80e 	bl	8013b74 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	3301      	adds	r3, #1
 8013b5c:	607b      	str	r3, [r7, #4]
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	2b04      	cmp	r3, #4
 8013b62:	d9ed      	bls.n	8013b40 <sys_timeouts_init+0xc>
  }
}
 8013b64:	bf00      	nop
 8013b66:	3708      	adds	r7, #8
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	bd80      	pop	{r7, pc}
 8013b6c:	0802b568 	.word	0x0802b568
 8013b70:	08013ad1 	.word	0x08013ad1

08013b74 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013b74:	b580      	push	{r7, lr}
 8013b76:	b086      	sub	sp, #24
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	60f8      	str	r0, [r7, #12]
 8013b7c:	60b9      	str	r1, [r7, #8]
 8013b7e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013b86:	d306      	bcc.n	8013b96 <sys_timeout+0x22>
 8013b88:	4b0a      	ldr	r3, [pc, #40]	; (8013bb4 <sys_timeout+0x40>)
 8013b8a:	f240 1229 	movw	r2, #297	; 0x129
 8013b8e:	490a      	ldr	r1, [pc, #40]	; (8013bb8 <sys_timeout+0x44>)
 8013b90:	480a      	ldr	r0, [pc, #40]	; (8013bbc <sys_timeout+0x48>)
 8013b92:	f004 ff9d 	bl	8018ad0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013b96:	f7f9 f86d 	bl	800cc74 <sys_now>
 8013b9a:	4602      	mov	r2, r0
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	4413      	add	r3, r2
 8013ba0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013ba2:	687a      	ldr	r2, [r7, #4]
 8013ba4:	68b9      	ldr	r1, [r7, #8]
 8013ba6:	6978      	ldr	r0, [r7, #20]
 8013ba8:	f7ff ff24 	bl	80139f4 <sys_timeout_abs>
#endif
}
 8013bac:	bf00      	nop
 8013bae:	3718      	adds	r7, #24
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	bd80      	pop	{r7, pc}
 8013bb4:	0801b7cc 	.word	0x0801b7cc
 8013bb8:	0801b868 	.word	0x0801b868
 8013bbc:	0801b840 	.word	0x0801b840

08013bc0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b084      	sub	sp, #16
 8013bc4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013bc6:	f7f9 f855 	bl	800cc74 <sys_now>
 8013bca:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8013bcc:	4b1a      	ldr	r3, [pc, #104]	; (8013c38 <sys_check_timeouts+0x78>)
 8013bce:	781b      	ldrb	r3, [r3, #0]
 8013bd0:	b2db      	uxtb	r3, r3
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d001      	beq.n	8013bda <sys_check_timeouts+0x1a>
 8013bd6:	f7f9 ffbf 	bl	800db58 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8013bda:	4b18      	ldr	r3, [pc, #96]	; (8013c3c <sys_check_timeouts+0x7c>)
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013be0:	68bb      	ldr	r3, [r7, #8]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d022      	beq.n	8013c2c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013be6:	68bb      	ldr	r3, [r7, #8]
 8013be8:	685b      	ldr	r3, [r3, #4]
 8013bea:	68fa      	ldr	r2, [r7, #12]
 8013bec:	1ad3      	subs	r3, r2, r3
 8013bee:	0fdb      	lsrs	r3, r3, #31
 8013bf0:	f003 0301 	and.w	r3, r3, #1
 8013bf4:	b2db      	uxtb	r3, r3
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d11a      	bne.n	8013c30 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013bfa:	68bb      	ldr	r3, [r7, #8]
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	4a0f      	ldr	r2, [pc, #60]	; (8013c3c <sys_check_timeouts+0x7c>)
 8013c00:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013c02:	68bb      	ldr	r3, [r7, #8]
 8013c04:	689b      	ldr	r3, [r3, #8]
 8013c06:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013c08:	68bb      	ldr	r3, [r7, #8]
 8013c0a:	68db      	ldr	r3, [r3, #12]
 8013c0c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013c0e:	68bb      	ldr	r3, [r7, #8]
 8013c10:	685b      	ldr	r3, [r3, #4]
 8013c12:	4a0b      	ldr	r2, [pc, #44]	; (8013c40 <sys_check_timeouts+0x80>)
 8013c14:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013c16:	68b9      	ldr	r1, [r7, #8]
 8013c18:	2006      	movs	r0, #6
 8013c1a:	f7f9 fcd3 	bl	800d5c4 <memp_free>
    if (handler != NULL) {
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d0d3      	beq.n	8013bcc <sys_check_timeouts+0xc>
      handler(arg);
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	6838      	ldr	r0, [r7, #0]
 8013c28:	4798      	blx	r3
  do {
 8013c2a:	e7cf      	b.n	8013bcc <sys_check_timeouts+0xc>
      return;
 8013c2c:	bf00      	nop
 8013c2e:	e000      	b.n	8013c32 <sys_check_timeouts+0x72>
      return;
 8013c30:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013c32:	3710      	adds	r7, #16
 8013c34:	46bd      	mov	sp, r7
 8013c36:	bd80      	pop	{r7, pc}
 8013c38:	20007ec4 	.word	0x20007ec4
 8013c3c:	200004b0 	.word	0x200004b0
 8013c40:	200004b4 	.word	0x200004b4

08013c44 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013c48:	f004 ff5a 	bl	8018b00 <rand>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	b29b      	uxth	r3, r3
 8013c50:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013c54:	b29b      	uxth	r3, r3
 8013c56:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013c5a:	b29a      	uxth	r2, r3
 8013c5c:	4b01      	ldr	r3, [pc, #4]	; (8013c64 <udp_init+0x20>)
 8013c5e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013c60:	bf00      	nop
 8013c62:	bd80      	pop	{r7, pc}
 8013c64:	20000038 	.word	0x20000038

08013c68 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013c68:	b480      	push	{r7}
 8013c6a:	b083      	sub	sp, #12
 8013c6c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013c6e:	2300      	movs	r3, #0
 8013c70:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013c72:	4b17      	ldr	r3, [pc, #92]	; (8013cd0 <udp_new_port+0x68>)
 8013c74:	881b      	ldrh	r3, [r3, #0]
 8013c76:	1c5a      	adds	r2, r3, #1
 8013c78:	b291      	uxth	r1, r2
 8013c7a:	4a15      	ldr	r2, [pc, #84]	; (8013cd0 <udp_new_port+0x68>)
 8013c7c:	8011      	strh	r1, [r2, #0]
 8013c7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c82:	4293      	cmp	r3, r2
 8013c84:	d103      	bne.n	8013c8e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013c86:	4b12      	ldr	r3, [pc, #72]	; (8013cd0 <udp_new_port+0x68>)
 8013c88:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013c8c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013c8e:	4b11      	ldr	r3, [pc, #68]	; (8013cd4 <udp_new_port+0x6c>)
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	603b      	str	r3, [r7, #0]
 8013c94:	e011      	b.n	8013cba <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013c96:	683b      	ldr	r3, [r7, #0]
 8013c98:	8a5a      	ldrh	r2, [r3, #18]
 8013c9a:	4b0d      	ldr	r3, [pc, #52]	; (8013cd0 <udp_new_port+0x68>)
 8013c9c:	881b      	ldrh	r3, [r3, #0]
 8013c9e:	429a      	cmp	r2, r3
 8013ca0:	d108      	bne.n	8013cb4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013ca2:	88fb      	ldrh	r3, [r7, #6]
 8013ca4:	3301      	adds	r3, #1
 8013ca6:	80fb      	strh	r3, [r7, #6]
 8013ca8:	88fb      	ldrh	r3, [r7, #6]
 8013caa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013cae:	d3e0      	bcc.n	8013c72 <udp_new_port+0xa>
        return 0;
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	e007      	b.n	8013cc4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013cb4:	683b      	ldr	r3, [r7, #0]
 8013cb6:	68db      	ldr	r3, [r3, #12]
 8013cb8:	603b      	str	r3, [r7, #0]
 8013cba:	683b      	ldr	r3, [r7, #0]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d1ea      	bne.n	8013c96 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013cc0:	4b03      	ldr	r3, [pc, #12]	; (8013cd0 <udp_new_port+0x68>)
 8013cc2:	881b      	ldrh	r3, [r3, #0]
}
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	370c      	adds	r7, #12
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cce:	4770      	bx	lr
 8013cd0:	20000038 	.word	0x20000038
 8013cd4:	20007ee4 	.word	0x20007ee4

08013cd8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b084      	sub	sp, #16
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	60f8      	str	r0, [r7, #12]
 8013ce0:	60b9      	str	r1, [r7, #8]
 8013ce2:	4613      	mov	r3, r2
 8013ce4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d105      	bne.n	8013cf8 <udp_input_local_match+0x20>
 8013cec:	4b27      	ldr	r3, [pc, #156]	; (8013d8c <udp_input_local_match+0xb4>)
 8013cee:	2287      	movs	r2, #135	; 0x87
 8013cf0:	4927      	ldr	r1, [pc, #156]	; (8013d90 <udp_input_local_match+0xb8>)
 8013cf2:	4828      	ldr	r0, [pc, #160]	; (8013d94 <udp_input_local_match+0xbc>)
 8013cf4:	f004 feec 	bl	8018ad0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013cf8:	68bb      	ldr	r3, [r7, #8]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d105      	bne.n	8013d0a <udp_input_local_match+0x32>
 8013cfe:	4b23      	ldr	r3, [pc, #140]	; (8013d8c <udp_input_local_match+0xb4>)
 8013d00:	2288      	movs	r2, #136	; 0x88
 8013d02:	4925      	ldr	r1, [pc, #148]	; (8013d98 <udp_input_local_match+0xc0>)
 8013d04:	4823      	ldr	r0, [pc, #140]	; (8013d94 <udp_input_local_match+0xbc>)
 8013d06:	f004 fee3 	bl	8018ad0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	7a1b      	ldrb	r3, [r3, #8]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d00b      	beq.n	8013d2a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	7a1a      	ldrb	r2, [r3, #8]
 8013d16:	4b21      	ldr	r3, [pc, #132]	; (8013d9c <udp_input_local_match+0xc4>)
 8013d18:	685b      	ldr	r3, [r3, #4]
 8013d1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013d1e:	3301      	adds	r3, #1
 8013d20:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d22:	429a      	cmp	r2, r3
 8013d24:	d001      	beq.n	8013d2a <udp_input_local_match+0x52>
    return 0;
 8013d26:	2300      	movs	r3, #0
 8013d28:	e02b      	b.n	8013d82 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013d2a:	79fb      	ldrb	r3, [r7, #7]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d018      	beq.n	8013d62 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d013      	beq.n	8013d5e <udp_input_local_match+0x86>
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d00f      	beq.n	8013d5e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013d3e:	4b17      	ldr	r3, [pc, #92]	; (8013d9c <udp_input_local_match+0xc4>)
 8013d40:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d46:	d00a      	beq.n	8013d5e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	681a      	ldr	r2, [r3, #0]
 8013d4c:	4b13      	ldr	r3, [pc, #76]	; (8013d9c <udp_input_local_match+0xc4>)
 8013d4e:	695b      	ldr	r3, [r3, #20]
 8013d50:	405a      	eors	r2, r3
 8013d52:	68bb      	ldr	r3, [r7, #8]
 8013d54:	3308      	adds	r3, #8
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d110      	bne.n	8013d80 <udp_input_local_match+0xa8>
          return 1;
 8013d5e:	2301      	movs	r3, #1
 8013d60:	e00f      	b.n	8013d82 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d009      	beq.n	8013d7c <udp_input_local_match+0xa4>
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d005      	beq.n	8013d7c <udp_input_local_match+0xa4>
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	681a      	ldr	r2, [r3, #0]
 8013d74:	4b09      	ldr	r3, [pc, #36]	; (8013d9c <udp_input_local_match+0xc4>)
 8013d76:	695b      	ldr	r3, [r3, #20]
 8013d78:	429a      	cmp	r2, r3
 8013d7a:	d101      	bne.n	8013d80 <udp_input_local_match+0xa8>
        return 1;
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	e000      	b.n	8013d82 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013d80:	2300      	movs	r3, #0
}
 8013d82:	4618      	mov	r0, r3
 8013d84:	3710      	adds	r7, #16
 8013d86:	46bd      	mov	sp, r7
 8013d88:	bd80      	pop	{r7, pc}
 8013d8a:	bf00      	nop
 8013d8c:	0801b8b4 	.word	0x0801b8b4
 8013d90:	0801b8e4 	.word	0x0801b8e4
 8013d94:	0801b908 	.word	0x0801b908
 8013d98:	0801b930 	.word	0x0801b930
 8013d9c:	20004968 	.word	0x20004968

08013da0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013da0:	b590      	push	{r4, r7, lr}
 8013da2:	b08d      	sub	sp, #52	; 0x34
 8013da4:	af02      	add	r7, sp, #8
 8013da6:	6078      	str	r0, [r7, #4]
 8013da8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013daa:	2300      	movs	r3, #0
 8013dac:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d105      	bne.n	8013dc0 <udp_input+0x20>
 8013db4:	4b7c      	ldr	r3, [pc, #496]	; (8013fa8 <udp_input+0x208>)
 8013db6:	22cf      	movs	r2, #207	; 0xcf
 8013db8:	497c      	ldr	r1, [pc, #496]	; (8013fac <udp_input+0x20c>)
 8013dba:	487d      	ldr	r0, [pc, #500]	; (8013fb0 <udp_input+0x210>)
 8013dbc:	f004 fe88 	bl	8018ad0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013dc0:	683b      	ldr	r3, [r7, #0]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d105      	bne.n	8013dd2 <udp_input+0x32>
 8013dc6:	4b78      	ldr	r3, [pc, #480]	; (8013fa8 <udp_input+0x208>)
 8013dc8:	22d0      	movs	r2, #208	; 0xd0
 8013dca:	497a      	ldr	r1, [pc, #488]	; (8013fb4 <udp_input+0x214>)
 8013dcc:	4878      	ldr	r0, [pc, #480]	; (8013fb0 <udp_input+0x210>)
 8013dce:	f004 fe7f 	bl	8018ad0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	895b      	ldrh	r3, [r3, #10]
 8013dd6:	2b07      	cmp	r3, #7
 8013dd8:	d803      	bhi.n	8013de2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013dda:	6878      	ldr	r0, [r7, #4]
 8013ddc:	f7fa f9f2 	bl	800e1c4 <pbuf_free>
    goto end;
 8013de0:	e0de      	b.n	8013fa0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	685b      	ldr	r3, [r3, #4]
 8013de6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013de8:	4b73      	ldr	r3, [pc, #460]	; (8013fb8 <udp_input+0x218>)
 8013dea:	695a      	ldr	r2, [r3, #20]
 8013dec:	4b72      	ldr	r3, [pc, #456]	; (8013fb8 <udp_input+0x218>)
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	4619      	mov	r1, r3
 8013df2:	4610      	mov	r0, r2
 8013df4:	f003 fe22 	bl	8017a3c <ip4_addr_isbroadcast_u32>
 8013df8:	4603      	mov	r3, r0
 8013dfa:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013dfc:	697b      	ldr	r3, [r7, #20]
 8013dfe:	881b      	ldrh	r3, [r3, #0]
 8013e00:	b29b      	uxth	r3, r3
 8013e02:	4618      	mov	r0, r3
 8013e04:	f7f8 ff3d 	bl	800cc82 <lwip_htons>
 8013e08:	4603      	mov	r3, r0
 8013e0a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013e0c:	697b      	ldr	r3, [r7, #20]
 8013e0e:	885b      	ldrh	r3, [r3, #2]
 8013e10:	b29b      	uxth	r3, r3
 8013e12:	4618      	mov	r0, r3
 8013e14:	f7f8 ff35 	bl	800cc82 <lwip_htons>
 8013e18:	4603      	mov	r3, r0
 8013e1a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013e20:	2300      	movs	r3, #0
 8013e22:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013e24:	2300      	movs	r3, #0
 8013e26:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e28:	4b64      	ldr	r3, [pc, #400]	; (8013fbc <udp_input+0x21c>)
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8013e2e:	e054      	b.n	8013eda <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e32:	8a5b      	ldrh	r3, [r3, #18]
 8013e34:	89fa      	ldrh	r2, [r7, #14]
 8013e36:	429a      	cmp	r2, r3
 8013e38:	d14a      	bne.n	8013ed0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013e3a:	7cfb      	ldrb	r3, [r7, #19]
 8013e3c:	461a      	mov	r2, r3
 8013e3e:	6839      	ldr	r1, [r7, #0]
 8013e40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e42:	f7ff ff49 	bl	8013cd8 <udp_input_local_match>
 8013e46:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d041      	beq.n	8013ed0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e4e:	7c1b      	ldrb	r3, [r3, #16]
 8013e50:	f003 0304 	and.w	r3, r3, #4
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d11d      	bne.n	8013e94 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013e58:	69fb      	ldr	r3, [r7, #28]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d102      	bne.n	8013e64 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e60:	61fb      	str	r3, [r7, #28]
 8013e62:	e017      	b.n	8013e94 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013e64:	7cfb      	ldrb	r3, [r7, #19]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d014      	beq.n	8013e94 <udp_input+0xf4>
 8013e6a:	4b53      	ldr	r3, [pc, #332]	; (8013fb8 <udp_input+0x218>)
 8013e6c:	695b      	ldr	r3, [r3, #20]
 8013e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e72:	d10f      	bne.n	8013e94 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013e74:	69fb      	ldr	r3, [r7, #28]
 8013e76:	681a      	ldr	r2, [r3, #0]
 8013e78:	683b      	ldr	r3, [r7, #0]
 8013e7a:	3304      	adds	r3, #4
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	429a      	cmp	r2, r3
 8013e80:	d008      	beq.n	8013e94 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e84:	681a      	ldr	r2, [r3, #0]
 8013e86:	683b      	ldr	r3, [r7, #0]
 8013e88:	3304      	adds	r3, #4
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	429a      	cmp	r2, r3
 8013e8e:	d101      	bne.n	8013e94 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e92:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e96:	8a9b      	ldrh	r3, [r3, #20]
 8013e98:	8a3a      	ldrh	r2, [r7, #16]
 8013e9a:	429a      	cmp	r2, r3
 8013e9c:	d118      	bne.n	8013ed0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d005      	beq.n	8013eb2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea8:	685a      	ldr	r2, [r3, #4]
 8013eaa:	4b43      	ldr	r3, [pc, #268]	; (8013fb8 <udp_input+0x218>)
 8013eac:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013eae:	429a      	cmp	r2, r3
 8013eb0:	d10e      	bne.n	8013ed0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013eb2:	6a3b      	ldr	r3, [r7, #32]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d014      	beq.n	8013ee2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eba:	68da      	ldr	r2, [r3, #12]
 8013ebc:	6a3b      	ldr	r3, [r7, #32]
 8013ebe:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013ec0:	4b3e      	ldr	r3, [pc, #248]	; (8013fbc <udp_input+0x21c>)
 8013ec2:	681a      	ldr	r2, [r3, #0]
 8013ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ec6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013ec8:	4a3c      	ldr	r2, [pc, #240]	; (8013fbc <udp_input+0x21c>)
 8013eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ecc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013ece:	e008      	b.n	8013ee2 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ed2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ed6:	68db      	ldr	r3, [r3, #12]
 8013ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8013eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d1a7      	bne.n	8013e30 <udp_input+0x90>
 8013ee0:	e000      	b.n	8013ee4 <udp_input+0x144>
        break;
 8013ee2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d101      	bne.n	8013eee <udp_input+0x14e>
    pcb = uncon_pcb;
 8013eea:	69fb      	ldr	r3, [r7, #28]
 8013eec:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d002      	beq.n	8013efa <udp_input+0x15a>
    for_us = 1;
 8013ef4:	2301      	movs	r3, #1
 8013ef6:	76fb      	strb	r3, [r7, #27]
 8013ef8:	e00a      	b.n	8013f10 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013efa:	683b      	ldr	r3, [r7, #0]
 8013efc:	3304      	adds	r3, #4
 8013efe:	681a      	ldr	r2, [r3, #0]
 8013f00:	4b2d      	ldr	r3, [pc, #180]	; (8013fb8 <udp_input+0x218>)
 8013f02:	695b      	ldr	r3, [r3, #20]
 8013f04:	429a      	cmp	r2, r3
 8013f06:	bf0c      	ite	eq
 8013f08:	2301      	moveq	r3, #1
 8013f0a:	2300      	movne	r3, #0
 8013f0c:	b2db      	uxtb	r3, r3
 8013f0e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013f10:	7efb      	ldrb	r3, [r7, #27]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d041      	beq.n	8013f9a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013f16:	2108      	movs	r1, #8
 8013f18:	6878      	ldr	r0, [r7, #4]
 8013f1a:	f7fa f8cd 	bl	800e0b8 <pbuf_remove_header>
 8013f1e:	4603      	mov	r3, r0
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d00a      	beq.n	8013f3a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013f24:	4b20      	ldr	r3, [pc, #128]	; (8013fa8 <udp_input+0x208>)
 8013f26:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013f2a:	4925      	ldr	r1, [pc, #148]	; (8013fc0 <udp_input+0x220>)
 8013f2c:	4820      	ldr	r0, [pc, #128]	; (8013fb0 <udp_input+0x210>)
 8013f2e:	f004 fdcf 	bl	8018ad0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013f32:	6878      	ldr	r0, [r7, #4]
 8013f34:	f7fa f946 	bl	800e1c4 <pbuf_free>
      goto end;
 8013f38:	e032      	b.n	8013fa0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d012      	beq.n	8013f66 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f42:	699b      	ldr	r3, [r3, #24]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d00a      	beq.n	8013f5e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f4a:	699c      	ldr	r4, [r3, #24]
 8013f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f4e:	69d8      	ldr	r0, [r3, #28]
 8013f50:	8a3b      	ldrh	r3, [r7, #16]
 8013f52:	9300      	str	r3, [sp, #0]
 8013f54:	4b1b      	ldr	r3, [pc, #108]	; (8013fc4 <udp_input+0x224>)
 8013f56:	687a      	ldr	r2, [r7, #4]
 8013f58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013f5a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013f5c:	e021      	b.n	8013fa2 <udp_input+0x202>
        pbuf_free(p);
 8013f5e:	6878      	ldr	r0, [r7, #4]
 8013f60:	f7fa f930 	bl	800e1c4 <pbuf_free>
        goto end;
 8013f64:	e01c      	b.n	8013fa0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013f66:	7cfb      	ldrb	r3, [r7, #19]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d112      	bne.n	8013f92 <udp_input+0x1f2>
 8013f6c:	4b12      	ldr	r3, [pc, #72]	; (8013fb8 <udp_input+0x218>)
 8013f6e:	695b      	ldr	r3, [r3, #20]
 8013f70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013f74:	2be0      	cmp	r3, #224	; 0xe0
 8013f76:	d00c      	beq.n	8013f92 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013f78:	4b0f      	ldr	r3, [pc, #60]	; (8013fb8 <udp_input+0x218>)
 8013f7a:	899b      	ldrh	r3, [r3, #12]
 8013f7c:	3308      	adds	r3, #8
 8013f7e:	b29b      	uxth	r3, r3
 8013f80:	b21b      	sxth	r3, r3
 8013f82:	4619      	mov	r1, r3
 8013f84:	6878      	ldr	r0, [r7, #4]
 8013f86:	f7fa f90a 	bl	800e19e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013f8a:	2103      	movs	r1, #3
 8013f8c:	6878      	ldr	r0, [r7, #4]
 8013f8e:	f003 fa19 	bl	80173c4 <icmp_dest_unreach>
      pbuf_free(p);
 8013f92:	6878      	ldr	r0, [r7, #4]
 8013f94:	f7fa f916 	bl	800e1c4 <pbuf_free>
  return;
 8013f98:	e003      	b.n	8013fa2 <udp_input+0x202>
    pbuf_free(p);
 8013f9a:	6878      	ldr	r0, [r7, #4]
 8013f9c:	f7fa f912 	bl	800e1c4 <pbuf_free>
  return;
 8013fa0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013fa2:	372c      	adds	r7, #44	; 0x2c
 8013fa4:	46bd      	mov	sp, r7
 8013fa6:	bd90      	pop	{r4, r7, pc}
 8013fa8:	0801b8b4 	.word	0x0801b8b4
 8013fac:	0801b958 	.word	0x0801b958
 8013fb0:	0801b908 	.word	0x0801b908
 8013fb4:	0801b970 	.word	0x0801b970
 8013fb8:	20004968 	.word	0x20004968
 8013fbc:	20007ee4 	.word	0x20007ee4
 8013fc0:	0801b98c 	.word	0x0801b98c
 8013fc4:	20004978 	.word	0x20004978

08013fc8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b088      	sub	sp, #32
 8013fcc:	af02      	add	r7, sp, #8
 8013fce:	60f8      	str	r0, [r7, #12]
 8013fd0:	60b9      	str	r1, [r7, #8]
 8013fd2:	607a      	str	r2, [r7, #4]
 8013fd4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d109      	bne.n	8013ff0 <udp_sendto+0x28>
 8013fdc:	4b23      	ldr	r3, [pc, #140]	; (801406c <udp_sendto+0xa4>)
 8013fde:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013fe2:	4923      	ldr	r1, [pc, #140]	; (8014070 <udp_sendto+0xa8>)
 8013fe4:	4823      	ldr	r0, [pc, #140]	; (8014074 <udp_sendto+0xac>)
 8013fe6:	f004 fd73 	bl	8018ad0 <iprintf>
 8013fea:	f06f 030f 	mvn.w	r3, #15
 8013fee:	e038      	b.n	8014062 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8013ff0:	68bb      	ldr	r3, [r7, #8]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d109      	bne.n	801400a <udp_sendto+0x42>
 8013ff6:	4b1d      	ldr	r3, [pc, #116]	; (801406c <udp_sendto+0xa4>)
 8013ff8:	f240 2219 	movw	r2, #537	; 0x219
 8013ffc:	491e      	ldr	r1, [pc, #120]	; (8014078 <udp_sendto+0xb0>)
 8013ffe:	481d      	ldr	r0, [pc, #116]	; (8014074 <udp_sendto+0xac>)
 8014000:	f004 fd66 	bl	8018ad0 <iprintf>
 8014004:	f06f 030f 	mvn.w	r3, #15
 8014008:	e02b      	b.n	8014062 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d109      	bne.n	8014024 <udp_sendto+0x5c>
 8014010:	4b16      	ldr	r3, [pc, #88]	; (801406c <udp_sendto+0xa4>)
 8014012:	f240 221a 	movw	r2, #538	; 0x21a
 8014016:	4919      	ldr	r1, [pc, #100]	; (801407c <udp_sendto+0xb4>)
 8014018:	4816      	ldr	r0, [pc, #88]	; (8014074 <udp_sendto+0xac>)
 801401a:	f004 fd59 	bl	8018ad0 <iprintf>
 801401e:	f06f 030f 	mvn.w	r3, #15
 8014022:	e01e      	b.n	8014062 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	7a1b      	ldrb	r3, [r3, #8]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d006      	beq.n	801403a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	7a1b      	ldrb	r3, [r3, #8]
 8014030:	4618      	mov	r0, r3
 8014032:	f7f9 fd6b 	bl	800db0c <netif_get_by_index>
 8014036:	6178      	str	r0, [r7, #20]
 8014038:	e003      	b.n	8014042 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801403a:	6878      	ldr	r0, [r7, #4]
 801403c:	f003 fa4c 	bl	80174d8 <ip4_route>
 8014040:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8014042:	697b      	ldr	r3, [r7, #20]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d102      	bne.n	801404e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8014048:	f06f 0303 	mvn.w	r3, #3
 801404c:	e009      	b.n	8014062 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801404e:	887a      	ldrh	r2, [r7, #2]
 8014050:	697b      	ldr	r3, [r7, #20]
 8014052:	9300      	str	r3, [sp, #0]
 8014054:	4613      	mov	r3, r2
 8014056:	687a      	ldr	r2, [r7, #4]
 8014058:	68b9      	ldr	r1, [r7, #8]
 801405a:	68f8      	ldr	r0, [r7, #12]
 801405c:	f000 f810 	bl	8014080 <udp_sendto_if>
 8014060:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014062:	4618      	mov	r0, r3
 8014064:	3718      	adds	r7, #24
 8014066:	46bd      	mov	sp, r7
 8014068:	bd80      	pop	{r7, pc}
 801406a:	bf00      	nop
 801406c:	0801b8b4 	.word	0x0801b8b4
 8014070:	0801b9d8 	.word	0x0801b9d8
 8014074:	0801b908 	.word	0x0801b908
 8014078:	0801b9f0 	.word	0x0801b9f0
 801407c:	0801ba0c 	.word	0x0801ba0c

08014080 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8014080:	b580      	push	{r7, lr}
 8014082:	b088      	sub	sp, #32
 8014084:	af02      	add	r7, sp, #8
 8014086:	60f8      	str	r0, [r7, #12]
 8014088:	60b9      	str	r1, [r7, #8]
 801408a:	607a      	str	r2, [r7, #4]
 801408c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d109      	bne.n	80140a8 <udp_sendto_if+0x28>
 8014094:	4b2e      	ldr	r3, [pc, #184]	; (8014150 <udp_sendto_if+0xd0>)
 8014096:	f44f 7220 	mov.w	r2, #640	; 0x280
 801409a:	492e      	ldr	r1, [pc, #184]	; (8014154 <udp_sendto_if+0xd4>)
 801409c:	482e      	ldr	r0, [pc, #184]	; (8014158 <udp_sendto_if+0xd8>)
 801409e:	f004 fd17 	bl	8018ad0 <iprintf>
 80140a2:	f06f 030f 	mvn.w	r3, #15
 80140a6:	e04f      	b.n	8014148 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80140a8:	68bb      	ldr	r3, [r7, #8]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d109      	bne.n	80140c2 <udp_sendto_if+0x42>
 80140ae:	4b28      	ldr	r3, [pc, #160]	; (8014150 <udp_sendto_if+0xd0>)
 80140b0:	f240 2281 	movw	r2, #641	; 0x281
 80140b4:	4929      	ldr	r1, [pc, #164]	; (801415c <udp_sendto_if+0xdc>)
 80140b6:	4828      	ldr	r0, [pc, #160]	; (8014158 <udp_sendto_if+0xd8>)
 80140b8:	f004 fd0a 	bl	8018ad0 <iprintf>
 80140bc:	f06f 030f 	mvn.w	r3, #15
 80140c0:	e042      	b.n	8014148 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d109      	bne.n	80140dc <udp_sendto_if+0x5c>
 80140c8:	4b21      	ldr	r3, [pc, #132]	; (8014150 <udp_sendto_if+0xd0>)
 80140ca:	f240 2282 	movw	r2, #642	; 0x282
 80140ce:	4924      	ldr	r1, [pc, #144]	; (8014160 <udp_sendto_if+0xe0>)
 80140d0:	4821      	ldr	r0, [pc, #132]	; (8014158 <udp_sendto_if+0xd8>)
 80140d2:	f004 fcfd 	bl	8018ad0 <iprintf>
 80140d6:	f06f 030f 	mvn.w	r3, #15
 80140da:	e035      	b.n	8014148 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80140dc:	6a3b      	ldr	r3, [r7, #32]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d109      	bne.n	80140f6 <udp_sendto_if+0x76>
 80140e2:	4b1b      	ldr	r3, [pc, #108]	; (8014150 <udp_sendto_if+0xd0>)
 80140e4:	f240 2283 	movw	r2, #643	; 0x283
 80140e8:	491e      	ldr	r1, [pc, #120]	; (8014164 <udp_sendto_if+0xe4>)
 80140ea:	481b      	ldr	r0, [pc, #108]	; (8014158 <udp_sendto_if+0xd8>)
 80140ec:	f004 fcf0 	bl	8018ad0 <iprintf>
 80140f0:	f06f 030f 	mvn.w	r3, #15
 80140f4:	e028      	b.n	8014148 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d009      	beq.n	8014110 <udp_sendto_if+0x90>
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	2b00      	cmp	r3, #0
 8014102:	d005      	beq.n	8014110 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801410c:	2be0      	cmp	r3, #224	; 0xe0
 801410e:	d103      	bne.n	8014118 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8014110:	6a3b      	ldr	r3, [r7, #32]
 8014112:	3304      	adds	r3, #4
 8014114:	617b      	str	r3, [r7, #20]
 8014116:	e00b      	b.n	8014130 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	681a      	ldr	r2, [r3, #0]
 801411c:	6a3b      	ldr	r3, [r7, #32]
 801411e:	3304      	adds	r3, #4
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	429a      	cmp	r2, r3
 8014124:	d002      	beq.n	801412c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8014126:	f06f 0303 	mvn.w	r3, #3
 801412a:	e00d      	b.n	8014148 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8014130:	887a      	ldrh	r2, [r7, #2]
 8014132:	697b      	ldr	r3, [r7, #20]
 8014134:	9301      	str	r3, [sp, #4]
 8014136:	6a3b      	ldr	r3, [r7, #32]
 8014138:	9300      	str	r3, [sp, #0]
 801413a:	4613      	mov	r3, r2
 801413c:	687a      	ldr	r2, [r7, #4]
 801413e:	68b9      	ldr	r1, [r7, #8]
 8014140:	68f8      	ldr	r0, [r7, #12]
 8014142:	f000 f811 	bl	8014168 <udp_sendto_if_src>
 8014146:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014148:	4618      	mov	r0, r3
 801414a:	3718      	adds	r7, #24
 801414c:	46bd      	mov	sp, r7
 801414e:	bd80      	pop	{r7, pc}
 8014150:	0801b8b4 	.word	0x0801b8b4
 8014154:	0801ba28 	.word	0x0801ba28
 8014158:	0801b908 	.word	0x0801b908
 801415c:	0801ba44 	.word	0x0801ba44
 8014160:	0801ba60 	.word	0x0801ba60
 8014164:	0801ba80 	.word	0x0801ba80

08014168 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8014168:	b580      	push	{r7, lr}
 801416a:	b08c      	sub	sp, #48	; 0x30
 801416c:	af04      	add	r7, sp, #16
 801416e:	60f8      	str	r0, [r7, #12]
 8014170:	60b9      	str	r1, [r7, #8]
 8014172:	607a      	str	r2, [r7, #4]
 8014174:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d109      	bne.n	8014190 <udp_sendto_if_src+0x28>
 801417c:	4b65      	ldr	r3, [pc, #404]	; (8014314 <udp_sendto_if_src+0x1ac>)
 801417e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8014182:	4965      	ldr	r1, [pc, #404]	; (8014318 <udp_sendto_if_src+0x1b0>)
 8014184:	4865      	ldr	r0, [pc, #404]	; (801431c <udp_sendto_if_src+0x1b4>)
 8014186:	f004 fca3 	bl	8018ad0 <iprintf>
 801418a:	f06f 030f 	mvn.w	r3, #15
 801418e:	e0bc      	b.n	801430a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8014190:	68bb      	ldr	r3, [r7, #8]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d109      	bne.n	80141aa <udp_sendto_if_src+0x42>
 8014196:	4b5f      	ldr	r3, [pc, #380]	; (8014314 <udp_sendto_if_src+0x1ac>)
 8014198:	f240 22d2 	movw	r2, #722	; 0x2d2
 801419c:	4960      	ldr	r1, [pc, #384]	; (8014320 <udp_sendto_if_src+0x1b8>)
 801419e:	485f      	ldr	r0, [pc, #380]	; (801431c <udp_sendto_if_src+0x1b4>)
 80141a0:	f004 fc96 	bl	8018ad0 <iprintf>
 80141a4:	f06f 030f 	mvn.w	r3, #15
 80141a8:	e0af      	b.n	801430a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d109      	bne.n	80141c4 <udp_sendto_if_src+0x5c>
 80141b0:	4b58      	ldr	r3, [pc, #352]	; (8014314 <udp_sendto_if_src+0x1ac>)
 80141b2:	f240 22d3 	movw	r2, #723	; 0x2d3
 80141b6:	495b      	ldr	r1, [pc, #364]	; (8014324 <udp_sendto_if_src+0x1bc>)
 80141b8:	4858      	ldr	r0, [pc, #352]	; (801431c <udp_sendto_if_src+0x1b4>)
 80141ba:	f004 fc89 	bl	8018ad0 <iprintf>
 80141be:	f06f 030f 	mvn.w	r3, #15
 80141c2:	e0a2      	b.n	801430a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80141c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d109      	bne.n	80141de <udp_sendto_if_src+0x76>
 80141ca:	4b52      	ldr	r3, [pc, #328]	; (8014314 <udp_sendto_if_src+0x1ac>)
 80141cc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80141d0:	4955      	ldr	r1, [pc, #340]	; (8014328 <udp_sendto_if_src+0x1c0>)
 80141d2:	4852      	ldr	r0, [pc, #328]	; (801431c <udp_sendto_if_src+0x1b4>)
 80141d4:	f004 fc7c 	bl	8018ad0 <iprintf>
 80141d8:	f06f 030f 	mvn.w	r3, #15
 80141dc:	e095      	b.n	801430a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80141de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d109      	bne.n	80141f8 <udp_sendto_if_src+0x90>
 80141e4:	4b4b      	ldr	r3, [pc, #300]	; (8014314 <udp_sendto_if_src+0x1ac>)
 80141e6:	f240 22d5 	movw	r2, #725	; 0x2d5
 80141ea:	4950      	ldr	r1, [pc, #320]	; (801432c <udp_sendto_if_src+0x1c4>)
 80141ec:	484b      	ldr	r0, [pc, #300]	; (801431c <udp_sendto_if_src+0x1b4>)
 80141ee:	f004 fc6f 	bl	8018ad0 <iprintf>
 80141f2:	f06f 030f 	mvn.w	r3, #15
 80141f6:	e088      	b.n	801430a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	8a5b      	ldrh	r3, [r3, #18]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d10f      	bne.n	8014220 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014200:	68f9      	ldr	r1, [r7, #12]
 8014202:	68fb      	ldr	r3, [r7, #12]
 8014204:	8a5b      	ldrh	r3, [r3, #18]
 8014206:	461a      	mov	r2, r3
 8014208:	68f8      	ldr	r0, [r7, #12]
 801420a:	f000 f893 	bl	8014334 <udp_bind>
 801420e:	4603      	mov	r3, r0
 8014210:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8014212:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d002      	beq.n	8014220 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801421a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801421e:	e074      	b.n	801430a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8014220:	68bb      	ldr	r3, [r7, #8]
 8014222:	891b      	ldrh	r3, [r3, #8]
 8014224:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014228:	4293      	cmp	r3, r2
 801422a:	d902      	bls.n	8014232 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801422c:	f04f 33ff 	mov.w	r3, #4294967295
 8014230:	e06b      	b.n	801430a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8014232:	2108      	movs	r1, #8
 8014234:	68b8      	ldr	r0, [r7, #8]
 8014236:	f7f9 ff2f 	bl	800e098 <pbuf_add_header>
 801423a:	4603      	mov	r3, r0
 801423c:	2b00      	cmp	r3, #0
 801423e:	d015      	beq.n	801426c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8014240:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014244:	2108      	movs	r1, #8
 8014246:	2022      	movs	r0, #34	; 0x22
 8014248:	f7f9 fcdc 	bl	800dc04 <pbuf_alloc>
 801424c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801424e:	69fb      	ldr	r3, [r7, #28]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d102      	bne.n	801425a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014254:	f04f 33ff 	mov.w	r3, #4294967295
 8014258:	e057      	b.n	801430a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801425a:	68bb      	ldr	r3, [r7, #8]
 801425c:	891b      	ldrh	r3, [r3, #8]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d006      	beq.n	8014270 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8014262:	68b9      	ldr	r1, [r7, #8]
 8014264:	69f8      	ldr	r0, [r7, #28]
 8014266:	f7fa f8c5 	bl	800e3f4 <pbuf_chain>
 801426a:	e001      	b.n	8014270 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801426c:	68bb      	ldr	r3, [r7, #8]
 801426e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8014270:	69fb      	ldr	r3, [r7, #28]
 8014272:	895b      	ldrh	r3, [r3, #10]
 8014274:	2b07      	cmp	r3, #7
 8014276:	d806      	bhi.n	8014286 <udp_sendto_if_src+0x11e>
 8014278:	4b26      	ldr	r3, [pc, #152]	; (8014314 <udp_sendto_if_src+0x1ac>)
 801427a:	f240 320e 	movw	r2, #782	; 0x30e
 801427e:	492c      	ldr	r1, [pc, #176]	; (8014330 <udp_sendto_if_src+0x1c8>)
 8014280:	4826      	ldr	r0, [pc, #152]	; (801431c <udp_sendto_if_src+0x1b4>)
 8014282:	f004 fc25 	bl	8018ad0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8014286:	69fb      	ldr	r3, [r7, #28]
 8014288:	685b      	ldr	r3, [r3, #4]
 801428a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	8a5b      	ldrh	r3, [r3, #18]
 8014290:	4618      	mov	r0, r3
 8014292:	f7f8 fcf6 	bl	800cc82 <lwip_htons>
 8014296:	4603      	mov	r3, r0
 8014298:	461a      	mov	r2, r3
 801429a:	697b      	ldr	r3, [r7, #20]
 801429c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801429e:	887b      	ldrh	r3, [r7, #2]
 80142a0:	4618      	mov	r0, r3
 80142a2:	f7f8 fcee 	bl	800cc82 <lwip_htons>
 80142a6:	4603      	mov	r3, r0
 80142a8:	461a      	mov	r2, r3
 80142aa:	697b      	ldr	r3, [r7, #20]
 80142ac:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80142ae:	697b      	ldr	r3, [r7, #20]
 80142b0:	2200      	movs	r2, #0
 80142b2:	719a      	strb	r2, [r3, #6]
 80142b4:	2200      	movs	r2, #0
 80142b6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80142b8:	69fb      	ldr	r3, [r7, #28]
 80142ba:	891b      	ldrh	r3, [r3, #8]
 80142bc:	4618      	mov	r0, r3
 80142be:	f7f8 fce0 	bl	800cc82 <lwip_htons>
 80142c2:	4603      	mov	r3, r0
 80142c4:	461a      	mov	r2, r3
 80142c6:	697b      	ldr	r3, [r7, #20]
 80142c8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80142ca:	2311      	movs	r3, #17
 80142cc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	7adb      	ldrb	r3, [r3, #11]
 80142d2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	7a9b      	ldrb	r3, [r3, #10]
 80142d8:	7cb9      	ldrb	r1, [r7, #18]
 80142da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80142dc:	9202      	str	r2, [sp, #8]
 80142de:	7cfa      	ldrb	r2, [r7, #19]
 80142e0:	9201      	str	r2, [sp, #4]
 80142e2:	9300      	str	r3, [sp, #0]
 80142e4:	460b      	mov	r3, r1
 80142e6:	687a      	ldr	r2, [r7, #4]
 80142e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80142ea:	69f8      	ldr	r0, [r7, #28]
 80142ec:	f003 faf8 	bl	80178e0 <ip4_output_if_src>
 80142f0:	4603      	mov	r3, r0
 80142f2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80142f4:	69fa      	ldr	r2, [r7, #28]
 80142f6:	68bb      	ldr	r3, [r7, #8]
 80142f8:	429a      	cmp	r2, r3
 80142fa:	d004      	beq.n	8014306 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80142fc:	69f8      	ldr	r0, [r7, #28]
 80142fe:	f7f9 ff61 	bl	800e1c4 <pbuf_free>
    q = NULL;
 8014302:	2300      	movs	r3, #0
 8014304:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8014306:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801430a:	4618      	mov	r0, r3
 801430c:	3720      	adds	r7, #32
 801430e:	46bd      	mov	sp, r7
 8014310:	bd80      	pop	{r7, pc}
 8014312:	bf00      	nop
 8014314:	0801b8b4 	.word	0x0801b8b4
 8014318:	0801baa0 	.word	0x0801baa0
 801431c:	0801b908 	.word	0x0801b908
 8014320:	0801bac0 	.word	0x0801bac0
 8014324:	0801bae0 	.word	0x0801bae0
 8014328:	0801bb04 	.word	0x0801bb04
 801432c:	0801bb28 	.word	0x0801bb28
 8014330:	0801bb4c 	.word	0x0801bb4c

08014334 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014334:	b580      	push	{r7, lr}
 8014336:	b086      	sub	sp, #24
 8014338:	af00      	add	r7, sp, #0
 801433a:	60f8      	str	r0, [r7, #12]
 801433c:	60b9      	str	r1, [r7, #8]
 801433e:	4613      	mov	r3, r2
 8014340:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014342:	68bb      	ldr	r3, [r7, #8]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d101      	bne.n	801434c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014348:	4b39      	ldr	r3, [pc, #228]	; (8014430 <udp_bind+0xfc>)
 801434a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d109      	bne.n	8014366 <udp_bind+0x32>
 8014352:	4b38      	ldr	r3, [pc, #224]	; (8014434 <udp_bind+0x100>)
 8014354:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014358:	4937      	ldr	r1, [pc, #220]	; (8014438 <udp_bind+0x104>)
 801435a:	4838      	ldr	r0, [pc, #224]	; (801443c <udp_bind+0x108>)
 801435c:	f004 fbb8 	bl	8018ad0 <iprintf>
 8014360:	f06f 030f 	mvn.w	r3, #15
 8014364:	e060      	b.n	8014428 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014366:	2300      	movs	r3, #0
 8014368:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801436a:	4b35      	ldr	r3, [pc, #212]	; (8014440 <udp_bind+0x10c>)
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	617b      	str	r3, [r7, #20]
 8014370:	e009      	b.n	8014386 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014372:	68fa      	ldr	r2, [r7, #12]
 8014374:	697b      	ldr	r3, [r7, #20]
 8014376:	429a      	cmp	r2, r3
 8014378:	d102      	bne.n	8014380 <udp_bind+0x4c>
      rebind = 1;
 801437a:	2301      	movs	r3, #1
 801437c:	74fb      	strb	r3, [r7, #19]
      break;
 801437e:	e005      	b.n	801438c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014380:	697b      	ldr	r3, [r7, #20]
 8014382:	68db      	ldr	r3, [r3, #12]
 8014384:	617b      	str	r3, [r7, #20]
 8014386:	697b      	ldr	r3, [r7, #20]
 8014388:	2b00      	cmp	r3, #0
 801438a:	d1f2      	bne.n	8014372 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801438c:	88fb      	ldrh	r3, [r7, #6]
 801438e:	2b00      	cmp	r3, #0
 8014390:	d109      	bne.n	80143a6 <udp_bind+0x72>
    port = udp_new_port();
 8014392:	f7ff fc69 	bl	8013c68 <udp_new_port>
 8014396:	4603      	mov	r3, r0
 8014398:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801439a:	88fb      	ldrh	r3, [r7, #6]
 801439c:	2b00      	cmp	r3, #0
 801439e:	d12c      	bne.n	80143fa <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80143a0:	f06f 0307 	mvn.w	r3, #7
 80143a4:	e040      	b.n	8014428 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80143a6:	4b26      	ldr	r3, [pc, #152]	; (8014440 <udp_bind+0x10c>)
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	617b      	str	r3, [r7, #20]
 80143ac:	e022      	b.n	80143f4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80143ae:	68fa      	ldr	r2, [r7, #12]
 80143b0:	697b      	ldr	r3, [r7, #20]
 80143b2:	429a      	cmp	r2, r3
 80143b4:	d01b      	beq.n	80143ee <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80143b6:	697b      	ldr	r3, [r7, #20]
 80143b8:	8a5b      	ldrh	r3, [r3, #18]
 80143ba:	88fa      	ldrh	r2, [r7, #6]
 80143bc:	429a      	cmp	r2, r3
 80143be:	d116      	bne.n	80143ee <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80143c0:	697b      	ldr	r3, [r7, #20]
 80143c2:	681a      	ldr	r2, [r3, #0]
 80143c4:	68bb      	ldr	r3, [r7, #8]
 80143c6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80143c8:	429a      	cmp	r2, r3
 80143ca:	d00d      	beq.n	80143e8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80143cc:	68bb      	ldr	r3, [r7, #8]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d00a      	beq.n	80143e8 <udp_bind+0xb4>
 80143d2:	68bb      	ldr	r3, [r7, #8]
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d006      	beq.n	80143e8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80143da:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d003      	beq.n	80143e8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80143e0:	697b      	ldr	r3, [r7, #20]
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d102      	bne.n	80143ee <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80143e8:	f06f 0307 	mvn.w	r3, #7
 80143ec:	e01c      	b.n	8014428 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80143ee:	697b      	ldr	r3, [r7, #20]
 80143f0:	68db      	ldr	r3, [r3, #12]
 80143f2:	617b      	str	r3, [r7, #20]
 80143f4:	697b      	ldr	r3, [r7, #20]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d1d9      	bne.n	80143ae <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80143fa:	68bb      	ldr	r3, [r7, #8]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d002      	beq.n	8014406 <udp_bind+0xd2>
 8014400:	68bb      	ldr	r3, [r7, #8]
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	e000      	b.n	8014408 <udp_bind+0xd4>
 8014406:	2300      	movs	r3, #0
 8014408:	68fa      	ldr	r2, [r7, #12]
 801440a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	88fa      	ldrh	r2, [r7, #6]
 8014410:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014412:	7cfb      	ldrb	r3, [r7, #19]
 8014414:	2b00      	cmp	r3, #0
 8014416:	d106      	bne.n	8014426 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014418:	4b09      	ldr	r3, [pc, #36]	; (8014440 <udp_bind+0x10c>)
 801441a:	681a      	ldr	r2, [r3, #0]
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014420:	4a07      	ldr	r2, [pc, #28]	; (8014440 <udp_bind+0x10c>)
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014426:	2300      	movs	r3, #0
}
 8014428:	4618      	mov	r0, r3
 801442a:	3718      	adds	r7, #24
 801442c:	46bd      	mov	sp, r7
 801442e:	bd80      	pop	{r7, pc}
 8014430:	0802b590 	.word	0x0802b590
 8014434:	0801b8b4 	.word	0x0801b8b4
 8014438:	0801bb7c 	.word	0x0801bb7c
 801443c:	0801b908 	.word	0x0801b908
 8014440:	20007ee4 	.word	0x20007ee4

08014444 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014444:	b580      	push	{r7, lr}
 8014446:	b086      	sub	sp, #24
 8014448:	af00      	add	r7, sp, #0
 801444a:	60f8      	str	r0, [r7, #12]
 801444c:	60b9      	str	r1, [r7, #8]
 801444e:	4613      	mov	r3, r2
 8014450:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d109      	bne.n	801446c <udp_connect+0x28>
 8014458:	4b2c      	ldr	r3, [pc, #176]	; (801450c <udp_connect+0xc8>)
 801445a:	f240 4235 	movw	r2, #1077	; 0x435
 801445e:	492c      	ldr	r1, [pc, #176]	; (8014510 <udp_connect+0xcc>)
 8014460:	482c      	ldr	r0, [pc, #176]	; (8014514 <udp_connect+0xd0>)
 8014462:	f004 fb35 	bl	8018ad0 <iprintf>
 8014466:	f06f 030f 	mvn.w	r3, #15
 801446a:	e04b      	b.n	8014504 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801446c:	68bb      	ldr	r3, [r7, #8]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d109      	bne.n	8014486 <udp_connect+0x42>
 8014472:	4b26      	ldr	r3, [pc, #152]	; (801450c <udp_connect+0xc8>)
 8014474:	f240 4236 	movw	r2, #1078	; 0x436
 8014478:	4927      	ldr	r1, [pc, #156]	; (8014518 <udp_connect+0xd4>)
 801447a:	4826      	ldr	r0, [pc, #152]	; (8014514 <udp_connect+0xd0>)
 801447c:	f004 fb28 	bl	8018ad0 <iprintf>
 8014480:	f06f 030f 	mvn.w	r3, #15
 8014484:	e03e      	b.n	8014504 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	8a5b      	ldrh	r3, [r3, #18]
 801448a:	2b00      	cmp	r3, #0
 801448c:	d10f      	bne.n	80144ae <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801448e:	68f9      	ldr	r1, [r7, #12]
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	8a5b      	ldrh	r3, [r3, #18]
 8014494:	461a      	mov	r2, r3
 8014496:	68f8      	ldr	r0, [r7, #12]
 8014498:	f7ff ff4c 	bl	8014334 <udp_bind>
 801449c:	4603      	mov	r3, r0
 801449e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80144a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d002      	beq.n	80144ae <udp_connect+0x6a>
      return err;
 80144a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80144ac:	e02a      	b.n	8014504 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80144ae:	68bb      	ldr	r3, [r7, #8]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d002      	beq.n	80144ba <udp_connect+0x76>
 80144b4:	68bb      	ldr	r3, [r7, #8]
 80144b6:	681b      	ldr	r3, [r3, #0]
 80144b8:	e000      	b.n	80144bc <udp_connect+0x78>
 80144ba:	2300      	movs	r3, #0
 80144bc:	68fa      	ldr	r2, [r7, #12]
 80144be:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	88fa      	ldrh	r2, [r7, #6]
 80144c4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	7c1b      	ldrb	r3, [r3, #16]
 80144ca:	f043 0304 	orr.w	r3, r3, #4
 80144ce:	b2da      	uxtb	r2, r3
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80144d4:	4b11      	ldr	r3, [pc, #68]	; (801451c <udp_connect+0xd8>)
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	617b      	str	r3, [r7, #20]
 80144da:	e008      	b.n	80144ee <udp_connect+0xaa>
    if (pcb == ipcb) {
 80144dc:	68fa      	ldr	r2, [r7, #12]
 80144de:	697b      	ldr	r3, [r7, #20]
 80144e0:	429a      	cmp	r2, r3
 80144e2:	d101      	bne.n	80144e8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80144e4:	2300      	movs	r3, #0
 80144e6:	e00d      	b.n	8014504 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80144e8:	697b      	ldr	r3, [r7, #20]
 80144ea:	68db      	ldr	r3, [r3, #12]
 80144ec:	617b      	str	r3, [r7, #20]
 80144ee:	697b      	ldr	r3, [r7, #20]
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	d1f3      	bne.n	80144dc <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80144f4:	4b09      	ldr	r3, [pc, #36]	; (801451c <udp_connect+0xd8>)
 80144f6:	681a      	ldr	r2, [r3, #0]
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80144fc:	4a07      	ldr	r2, [pc, #28]	; (801451c <udp_connect+0xd8>)
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8014502:	2300      	movs	r3, #0
}
 8014504:	4618      	mov	r0, r3
 8014506:	3718      	adds	r7, #24
 8014508:	46bd      	mov	sp, r7
 801450a:	bd80      	pop	{r7, pc}
 801450c:	0801b8b4 	.word	0x0801b8b4
 8014510:	0801bb94 	.word	0x0801bb94
 8014514:	0801b908 	.word	0x0801b908
 8014518:	0801bbb0 	.word	0x0801bbb0
 801451c:	20007ee4 	.word	0x20007ee4

08014520 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014520:	b580      	push	{r7, lr}
 8014522:	b084      	sub	sp, #16
 8014524:	af00      	add	r7, sp, #0
 8014526:	60f8      	str	r0, [r7, #12]
 8014528:	60b9      	str	r1, [r7, #8]
 801452a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d107      	bne.n	8014542 <udp_recv+0x22>
 8014532:	4b08      	ldr	r3, [pc, #32]	; (8014554 <udp_recv+0x34>)
 8014534:	f240 428a 	movw	r2, #1162	; 0x48a
 8014538:	4907      	ldr	r1, [pc, #28]	; (8014558 <udp_recv+0x38>)
 801453a:	4808      	ldr	r0, [pc, #32]	; (801455c <udp_recv+0x3c>)
 801453c:	f004 fac8 	bl	8018ad0 <iprintf>
 8014540:	e005      	b.n	801454e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	68ba      	ldr	r2, [r7, #8]
 8014546:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	687a      	ldr	r2, [r7, #4]
 801454c:	61da      	str	r2, [r3, #28]
}
 801454e:	3710      	adds	r7, #16
 8014550:	46bd      	mov	sp, r7
 8014552:	bd80      	pop	{r7, pc}
 8014554:	0801b8b4 	.word	0x0801b8b4
 8014558:	0801bbe8 	.word	0x0801bbe8
 801455c:	0801b908 	.word	0x0801b908

08014560 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b084      	sub	sp, #16
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d107      	bne.n	801457e <udp_remove+0x1e>
 801456e:	4b19      	ldr	r3, [pc, #100]	; (80145d4 <udp_remove+0x74>)
 8014570:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014574:	4918      	ldr	r1, [pc, #96]	; (80145d8 <udp_remove+0x78>)
 8014576:	4819      	ldr	r0, [pc, #100]	; (80145dc <udp_remove+0x7c>)
 8014578:	f004 faaa 	bl	8018ad0 <iprintf>
 801457c:	e026      	b.n	80145cc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801457e:	4b18      	ldr	r3, [pc, #96]	; (80145e0 <udp_remove+0x80>)
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	687a      	ldr	r2, [r7, #4]
 8014584:	429a      	cmp	r2, r3
 8014586:	d105      	bne.n	8014594 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014588:	4b15      	ldr	r3, [pc, #84]	; (80145e0 <udp_remove+0x80>)
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	68db      	ldr	r3, [r3, #12]
 801458e:	4a14      	ldr	r2, [pc, #80]	; (80145e0 <udp_remove+0x80>)
 8014590:	6013      	str	r3, [r2, #0]
 8014592:	e017      	b.n	80145c4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014594:	4b12      	ldr	r3, [pc, #72]	; (80145e0 <udp_remove+0x80>)
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	60fb      	str	r3, [r7, #12]
 801459a:	e010      	b.n	80145be <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	68db      	ldr	r3, [r3, #12]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d009      	beq.n	80145b8 <udp_remove+0x58>
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	68db      	ldr	r3, [r3, #12]
 80145a8:	687a      	ldr	r2, [r7, #4]
 80145aa:	429a      	cmp	r2, r3
 80145ac:	d104      	bne.n	80145b8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	68da      	ldr	r2, [r3, #12]
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	60da      	str	r2, [r3, #12]
        break;
 80145b6:	e005      	b.n	80145c4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	68db      	ldr	r3, [r3, #12]
 80145bc:	60fb      	str	r3, [r7, #12]
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d1eb      	bne.n	801459c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80145c4:	6879      	ldr	r1, [r7, #4]
 80145c6:	2000      	movs	r0, #0
 80145c8:	f7f8 fffc 	bl	800d5c4 <memp_free>
}
 80145cc:	3710      	adds	r7, #16
 80145ce:	46bd      	mov	sp, r7
 80145d0:	bd80      	pop	{r7, pc}
 80145d2:	bf00      	nop
 80145d4:	0801b8b4 	.word	0x0801b8b4
 80145d8:	0801bc00 	.word	0x0801bc00
 80145dc:	0801b908 	.word	0x0801b908
 80145e0:	20007ee4 	.word	0x20007ee4

080145e4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80145e4:	b580      	push	{r7, lr}
 80145e6:	b082      	sub	sp, #8
 80145e8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80145ea:	2000      	movs	r0, #0
 80145ec:	f7f8 ff9e 	bl	800d52c <memp_malloc>
 80145f0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d007      	beq.n	8014608 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80145f8:	2220      	movs	r2, #32
 80145fa:	2100      	movs	r1, #0
 80145fc:	6878      	ldr	r0, [r7, #4]
 80145fe:	f004 f9b7 	bl	8018970 <memset>
    pcb->ttl = UDP_TTL;
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	22ff      	movs	r2, #255	; 0xff
 8014606:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014608:	687b      	ldr	r3, [r7, #4]
}
 801460a:	4618      	mov	r0, r3
 801460c:	3708      	adds	r7, #8
 801460e:	46bd      	mov	sp, r7
 8014610:	bd80      	pop	{r7, pc}
	...

08014614 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014614:	b480      	push	{r7}
 8014616:	b085      	sub	sp, #20
 8014618:	af00      	add	r7, sp, #0
 801461a:	6078      	str	r0, [r7, #4]
 801461c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d01e      	beq.n	8014662 <udp_netif_ip_addr_changed+0x4e>
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	2b00      	cmp	r3, #0
 801462a:	d01a      	beq.n	8014662 <udp_netif_ip_addr_changed+0x4e>
 801462c:	683b      	ldr	r3, [r7, #0]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d017      	beq.n	8014662 <udp_netif_ip_addr_changed+0x4e>
 8014632:	683b      	ldr	r3, [r7, #0]
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d013      	beq.n	8014662 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801463a:	4b0d      	ldr	r3, [pc, #52]	; (8014670 <udp_netif_ip_addr_changed+0x5c>)
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	60fb      	str	r3, [r7, #12]
 8014640:	e00c      	b.n	801465c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	681a      	ldr	r2, [r3, #0]
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	429a      	cmp	r2, r3
 801464c:	d103      	bne.n	8014656 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801464e:	683b      	ldr	r3, [r7, #0]
 8014650:	681a      	ldr	r2, [r3, #0]
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	68db      	ldr	r3, [r3, #12]
 801465a:	60fb      	str	r3, [r7, #12]
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d1ef      	bne.n	8014642 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014662:	bf00      	nop
 8014664:	3714      	adds	r7, #20
 8014666:	46bd      	mov	sp, r7
 8014668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801466c:	4770      	bx	lr
 801466e:	bf00      	nop
 8014670:	20007ee4 	.word	0x20007ee4

08014674 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8014674:	b580      	push	{r7, lr}
 8014676:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8014678:	4b20      	ldr	r3, [pc, #128]	; (80146fc <dhcp_inc_pcb_refcount+0x88>)
 801467a:	781b      	ldrb	r3, [r3, #0]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d133      	bne.n	80146e8 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8014680:	4b1f      	ldr	r3, [pc, #124]	; (8014700 <dhcp_inc_pcb_refcount+0x8c>)
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d005      	beq.n	8014694 <dhcp_inc_pcb_refcount+0x20>
 8014688:	4b1e      	ldr	r3, [pc, #120]	; (8014704 <dhcp_inc_pcb_refcount+0x90>)
 801468a:	22e5      	movs	r2, #229	; 0xe5
 801468c:	491e      	ldr	r1, [pc, #120]	; (8014708 <dhcp_inc_pcb_refcount+0x94>)
 801468e:	481f      	ldr	r0, [pc, #124]	; (801470c <dhcp_inc_pcb_refcount+0x98>)
 8014690:	f004 fa1e 	bl	8018ad0 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8014694:	f7ff ffa6 	bl	80145e4 <udp_new>
 8014698:	4602      	mov	r2, r0
 801469a:	4b19      	ldr	r3, [pc, #100]	; (8014700 <dhcp_inc_pcb_refcount+0x8c>)
 801469c:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 801469e:	4b18      	ldr	r3, [pc, #96]	; (8014700 <dhcp_inc_pcb_refcount+0x8c>)
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d102      	bne.n	80146ac <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80146a6:	f04f 33ff 	mov.w	r3, #4294967295
 80146aa:	e024      	b.n	80146f6 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80146ac:	4b14      	ldr	r3, [pc, #80]	; (8014700 <dhcp_inc_pcb_refcount+0x8c>)
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	7a5a      	ldrb	r2, [r3, #9]
 80146b2:	4b13      	ldr	r3, [pc, #76]	; (8014700 <dhcp_inc_pcb_refcount+0x8c>)
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	f042 0220 	orr.w	r2, r2, #32
 80146ba:	b2d2      	uxtb	r2, r2
 80146bc:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80146be:	4b10      	ldr	r3, [pc, #64]	; (8014700 <dhcp_inc_pcb_refcount+0x8c>)
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	2244      	movs	r2, #68	; 0x44
 80146c4:	4912      	ldr	r1, [pc, #72]	; (8014710 <dhcp_inc_pcb_refcount+0x9c>)
 80146c6:	4618      	mov	r0, r3
 80146c8:	f7ff fe34 	bl	8014334 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80146cc:	4b0c      	ldr	r3, [pc, #48]	; (8014700 <dhcp_inc_pcb_refcount+0x8c>)
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	2243      	movs	r2, #67	; 0x43
 80146d2:	490f      	ldr	r1, [pc, #60]	; (8014710 <dhcp_inc_pcb_refcount+0x9c>)
 80146d4:	4618      	mov	r0, r3
 80146d6:	f7ff feb5 	bl	8014444 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80146da:	4b09      	ldr	r3, [pc, #36]	; (8014700 <dhcp_inc_pcb_refcount+0x8c>)
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	2200      	movs	r2, #0
 80146e0:	490c      	ldr	r1, [pc, #48]	; (8014714 <dhcp_inc_pcb_refcount+0xa0>)
 80146e2:	4618      	mov	r0, r3
 80146e4:	f7ff ff1c 	bl	8014520 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80146e8:	4b04      	ldr	r3, [pc, #16]	; (80146fc <dhcp_inc_pcb_refcount+0x88>)
 80146ea:	781b      	ldrb	r3, [r3, #0]
 80146ec:	3301      	adds	r3, #1
 80146ee:	b2da      	uxtb	r2, r3
 80146f0:	4b02      	ldr	r3, [pc, #8]	; (80146fc <dhcp_inc_pcb_refcount+0x88>)
 80146f2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80146f4:	2300      	movs	r3, #0
}
 80146f6:	4618      	mov	r0, r3
 80146f8:	bd80      	pop	{r7, pc}
 80146fa:	bf00      	nop
 80146fc:	200004c0 	.word	0x200004c0
 8014700:	200004bc 	.word	0x200004bc
 8014704:	0801bc18 	.word	0x0801bc18
 8014708:	0801bc50 	.word	0x0801bc50
 801470c:	0801bc78 	.word	0x0801bc78
 8014710:	0802b590 	.word	0x0802b590
 8014714:	08015f31 	.word	0x08015f31

08014718 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8014718:	b580      	push	{r7, lr}
 801471a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801471c:	4b0e      	ldr	r3, [pc, #56]	; (8014758 <dhcp_dec_pcb_refcount+0x40>)
 801471e:	781b      	ldrb	r3, [r3, #0]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d105      	bne.n	8014730 <dhcp_dec_pcb_refcount+0x18>
 8014724:	4b0d      	ldr	r3, [pc, #52]	; (801475c <dhcp_dec_pcb_refcount+0x44>)
 8014726:	22ff      	movs	r2, #255	; 0xff
 8014728:	490d      	ldr	r1, [pc, #52]	; (8014760 <dhcp_dec_pcb_refcount+0x48>)
 801472a:	480e      	ldr	r0, [pc, #56]	; (8014764 <dhcp_dec_pcb_refcount+0x4c>)
 801472c:	f004 f9d0 	bl	8018ad0 <iprintf>
  dhcp_pcb_refcount--;
 8014730:	4b09      	ldr	r3, [pc, #36]	; (8014758 <dhcp_dec_pcb_refcount+0x40>)
 8014732:	781b      	ldrb	r3, [r3, #0]
 8014734:	3b01      	subs	r3, #1
 8014736:	b2da      	uxtb	r2, r3
 8014738:	4b07      	ldr	r3, [pc, #28]	; (8014758 <dhcp_dec_pcb_refcount+0x40>)
 801473a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801473c:	4b06      	ldr	r3, [pc, #24]	; (8014758 <dhcp_dec_pcb_refcount+0x40>)
 801473e:	781b      	ldrb	r3, [r3, #0]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d107      	bne.n	8014754 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8014744:	4b08      	ldr	r3, [pc, #32]	; (8014768 <dhcp_dec_pcb_refcount+0x50>)
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	4618      	mov	r0, r3
 801474a:	f7ff ff09 	bl	8014560 <udp_remove>
    dhcp_pcb = NULL;
 801474e:	4b06      	ldr	r3, [pc, #24]	; (8014768 <dhcp_dec_pcb_refcount+0x50>)
 8014750:	2200      	movs	r2, #0
 8014752:	601a      	str	r2, [r3, #0]
  }
}
 8014754:	bf00      	nop
 8014756:	bd80      	pop	{r7, pc}
 8014758:	200004c0 	.word	0x200004c0
 801475c:	0801bc18 	.word	0x0801bc18
 8014760:	0801bca0 	.word	0x0801bca0
 8014764:	0801bc78 	.word	0x0801bc78
 8014768:	200004bc 	.word	0x200004bc

0801476c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801476c:	b580      	push	{r7, lr}
 801476e:	b084      	sub	sp, #16
 8014770:	af00      	add	r7, sp, #0
 8014772:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	6a1b      	ldr	r3, [r3, #32]
 8014778:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801477a:	210c      	movs	r1, #12
 801477c:	68f8      	ldr	r0, [r7, #12]
 801477e:	f001 f819 	bl	80157b4 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014782:	4b06      	ldr	r3, [pc, #24]	; (801479c <dhcp_handle_nak+0x30>)
 8014784:	4a05      	ldr	r2, [pc, #20]	; (801479c <dhcp_handle_nak+0x30>)
 8014786:	4905      	ldr	r1, [pc, #20]	; (801479c <dhcp_handle_nak+0x30>)
 8014788:	6878      	ldr	r0, [r7, #4]
 801478a:	f7f9 f8b9 	bl	800d900 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801478e:	6878      	ldr	r0, [r7, #4]
 8014790:	f000 fc0c 	bl	8014fac <dhcp_discover>
}
 8014794:	bf00      	nop
 8014796:	3710      	adds	r7, #16
 8014798:	46bd      	mov	sp, r7
 801479a:	bd80      	pop	{r7, pc}
 801479c:	0802b590 	.word	0x0802b590

080147a0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80147a0:	b580      	push	{r7, lr}
 80147a2:	b084      	sub	sp, #16
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	6a1b      	ldr	r3, [r3, #32]
 80147ac:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80147ae:	2108      	movs	r1, #8
 80147b0:	68f8      	ldr	r0, [r7, #12]
 80147b2:	f000 ffff 	bl	80157b4 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	331c      	adds	r3, #28
 80147ba:	2200      	movs	r2, #0
 80147bc:	4619      	mov	r1, r3
 80147be:	6878      	ldr	r0, [r7, #4]
 80147c0:	f002 fafe 	bl	8016dc0 <etharp_query>
 80147c4:	4603      	mov	r3, r0
 80147c6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	799b      	ldrb	r3, [r3, #6]
 80147cc:	2bff      	cmp	r3, #255	; 0xff
 80147ce:	d005      	beq.n	80147dc <dhcp_check+0x3c>
    dhcp->tries++;
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	799b      	ldrb	r3, [r3, #6]
 80147d4:	3301      	adds	r3, #1
 80147d6:	b2da      	uxtb	r2, r3
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80147dc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80147e0:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80147e2:	893b      	ldrh	r3, [r7, #8]
 80147e4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80147e8:	4a06      	ldr	r2, [pc, #24]	; (8014804 <dhcp_check+0x64>)
 80147ea:	fb82 1203 	smull	r1, r2, r2, r3
 80147ee:	1152      	asrs	r2, r2, #5
 80147f0:	17db      	asrs	r3, r3, #31
 80147f2:	1ad3      	subs	r3, r2, r3
 80147f4:	b29a      	uxth	r2, r3
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80147fa:	bf00      	nop
 80147fc:	3710      	adds	r7, #16
 80147fe:	46bd      	mov	sp, r7
 8014800:	bd80      	pop	{r7, pc}
 8014802:	bf00      	nop
 8014804:	10624dd3 	.word	0x10624dd3

08014808 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014808:	b580      	push	{r7, lr}
 801480a:	b084      	sub	sp, #16
 801480c:	af00      	add	r7, sp, #0
 801480e:	6078      	str	r0, [r7, #4]
 8014810:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	6a1b      	ldr	r3, [r3, #32]
 8014816:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8014818:	4b0c      	ldr	r3, [pc, #48]	; (801484c <dhcp_handle_offer+0x44>)
 801481a:	789b      	ldrb	r3, [r3, #2]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d011      	beq.n	8014844 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	2200      	movs	r2, #0
 8014824:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8014826:	4b0a      	ldr	r3, [pc, #40]	; (8014850 <dhcp_handle_offer+0x48>)
 8014828:	689b      	ldr	r3, [r3, #8]
 801482a:	4618      	mov	r0, r3
 801482c:	f7f8 fa3e 	bl	800ccac <lwip_htonl>
 8014830:	4602      	mov	r2, r0
 8014832:	68fb      	ldr	r3, [r7, #12]
 8014834:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8014836:	683b      	ldr	r3, [r7, #0]
 8014838:	691a      	ldr	r2, [r3, #16]
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801483e:	6878      	ldr	r0, [r7, #4]
 8014840:	f000 f808 	bl	8014854 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8014844:	bf00      	nop
 8014846:	3710      	adds	r7, #16
 8014848:	46bd      	mov	sp, r7
 801484a:	bd80      	pop	{r7, pc}
 801484c:	20007ee8 	.word	0x20007ee8
 8014850:	20007ef0 	.word	0x20007ef0

08014854 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8014854:	b5b0      	push	{r4, r5, r7, lr}
 8014856:	b08a      	sub	sp, #40	; 0x28
 8014858:	af02      	add	r7, sp, #8
 801485a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d109      	bne.n	8014876 <dhcp_select+0x22>
 8014862:	4b71      	ldr	r3, [pc, #452]	; (8014a28 <dhcp_select+0x1d4>)
 8014864:	f240 1277 	movw	r2, #375	; 0x177
 8014868:	4970      	ldr	r1, [pc, #448]	; (8014a2c <dhcp_select+0x1d8>)
 801486a:	4871      	ldr	r0, [pc, #452]	; (8014a30 <dhcp_select+0x1dc>)
 801486c:	f004 f930 	bl	8018ad0 <iprintf>
 8014870:	f06f 030f 	mvn.w	r3, #15
 8014874:	e0d3      	b.n	8014a1e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	6a1b      	ldr	r3, [r3, #32]
 801487a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801487c:	69bb      	ldr	r3, [r7, #24]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d109      	bne.n	8014896 <dhcp_select+0x42>
 8014882:	4b69      	ldr	r3, [pc, #420]	; (8014a28 <dhcp_select+0x1d4>)
 8014884:	f240 1279 	movw	r2, #377	; 0x179
 8014888:	496a      	ldr	r1, [pc, #424]	; (8014a34 <dhcp_select+0x1e0>)
 801488a:	4869      	ldr	r0, [pc, #420]	; (8014a30 <dhcp_select+0x1dc>)
 801488c:	f004 f920 	bl	8018ad0 <iprintf>
 8014890:	f06f 0305 	mvn.w	r3, #5
 8014894:	e0c3      	b.n	8014a1e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8014896:	2101      	movs	r1, #1
 8014898:	69b8      	ldr	r0, [r7, #24]
 801489a:	f000 ff8b 	bl	80157b4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801489e:	f107 030c 	add.w	r3, r7, #12
 80148a2:	2203      	movs	r2, #3
 80148a4:	69b9      	ldr	r1, [r7, #24]
 80148a6:	6878      	ldr	r0, [r7, #4]
 80148a8:	f001 fc0e 	bl	80160c8 <dhcp_create_msg>
 80148ac:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80148ae:	697b      	ldr	r3, [r7, #20]
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	f000 8085 	beq.w	80149c0 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80148b6:	697b      	ldr	r3, [r7, #20]
 80148b8:	685b      	ldr	r3, [r3, #4]
 80148ba:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80148bc:	89b8      	ldrh	r0, [r7, #12]
 80148be:	693b      	ldr	r3, [r7, #16]
 80148c0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80148c4:	2302      	movs	r3, #2
 80148c6:	2239      	movs	r2, #57	; 0x39
 80148c8:	f000 ff8e 	bl	80157e8 <dhcp_option>
 80148cc:	4603      	mov	r3, r0
 80148ce:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80148d0:	89b8      	ldrh	r0, [r7, #12]
 80148d2:	693b      	ldr	r3, [r7, #16]
 80148d4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80148dc:	461a      	mov	r2, r3
 80148de:	f000 ffdd 	bl	801589c <dhcp_option_short>
 80148e2:	4603      	mov	r3, r0
 80148e4:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80148e6:	89b8      	ldrh	r0, [r7, #12]
 80148e8:	693b      	ldr	r3, [r7, #16]
 80148ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80148ee:	2304      	movs	r3, #4
 80148f0:	2232      	movs	r2, #50	; 0x32
 80148f2:	f000 ff79 	bl	80157e8 <dhcp_option>
 80148f6:	4603      	mov	r3, r0
 80148f8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80148fa:	89bc      	ldrh	r4, [r7, #12]
 80148fc:	693b      	ldr	r3, [r7, #16]
 80148fe:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014902:	69bb      	ldr	r3, [r7, #24]
 8014904:	69db      	ldr	r3, [r3, #28]
 8014906:	4618      	mov	r0, r3
 8014908:	f7f8 f9d0 	bl	800ccac <lwip_htonl>
 801490c:	4603      	mov	r3, r0
 801490e:	461a      	mov	r2, r3
 8014910:	4629      	mov	r1, r5
 8014912:	4620      	mov	r0, r4
 8014914:	f000 fff4 	bl	8015900 <dhcp_option_long>
 8014918:	4603      	mov	r3, r0
 801491a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801491c:	89b8      	ldrh	r0, [r7, #12]
 801491e:	693b      	ldr	r3, [r7, #16]
 8014920:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014924:	2304      	movs	r3, #4
 8014926:	2236      	movs	r2, #54	; 0x36
 8014928:	f000 ff5e 	bl	80157e8 <dhcp_option>
 801492c:	4603      	mov	r3, r0
 801492e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8014930:	89bc      	ldrh	r4, [r7, #12]
 8014932:	693b      	ldr	r3, [r7, #16]
 8014934:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014938:	69bb      	ldr	r3, [r7, #24]
 801493a:	699b      	ldr	r3, [r3, #24]
 801493c:	4618      	mov	r0, r3
 801493e:	f7f8 f9b5 	bl	800ccac <lwip_htonl>
 8014942:	4603      	mov	r3, r0
 8014944:	461a      	mov	r2, r3
 8014946:	4629      	mov	r1, r5
 8014948:	4620      	mov	r0, r4
 801494a:	f000 ffd9 	bl	8015900 <dhcp_option_long>
 801494e:	4603      	mov	r3, r0
 8014950:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014952:	89b8      	ldrh	r0, [r7, #12]
 8014954:	693b      	ldr	r3, [r7, #16]
 8014956:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801495a:	2303      	movs	r3, #3
 801495c:	2237      	movs	r2, #55	; 0x37
 801495e:	f000 ff43 	bl	80157e8 <dhcp_option>
 8014962:	4603      	mov	r3, r0
 8014964:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014966:	2300      	movs	r3, #0
 8014968:	77bb      	strb	r3, [r7, #30]
 801496a:	e00e      	b.n	801498a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801496c:	89b8      	ldrh	r0, [r7, #12]
 801496e:	693b      	ldr	r3, [r7, #16]
 8014970:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014974:	7fbb      	ldrb	r3, [r7, #30]
 8014976:	4a30      	ldr	r2, [pc, #192]	; (8014a38 <dhcp_select+0x1e4>)
 8014978:	5cd3      	ldrb	r3, [r2, r3]
 801497a:	461a      	mov	r2, r3
 801497c:	f000 ff68 	bl	8015850 <dhcp_option_byte>
 8014980:	4603      	mov	r3, r0
 8014982:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014984:	7fbb      	ldrb	r3, [r7, #30]
 8014986:	3301      	adds	r3, #1
 8014988:	77bb      	strb	r3, [r7, #30]
 801498a:	7fbb      	ldrb	r3, [r7, #30]
 801498c:	2b02      	cmp	r3, #2
 801498e:	d9ed      	bls.n	801496c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014990:	89b8      	ldrh	r0, [r7, #12]
 8014992:	693b      	ldr	r3, [r7, #16]
 8014994:	33f0      	adds	r3, #240	; 0xf0
 8014996:	697a      	ldr	r2, [r7, #20]
 8014998:	4619      	mov	r1, r3
 801499a:	f001 fc6b 	bl	8016274 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801499e:	4b27      	ldr	r3, [pc, #156]	; (8014a3c <dhcp_select+0x1e8>)
 80149a0:	6818      	ldr	r0, [r3, #0]
 80149a2:	4b27      	ldr	r3, [pc, #156]	; (8014a40 <dhcp_select+0x1ec>)
 80149a4:	9301      	str	r3, [sp, #4]
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	9300      	str	r3, [sp, #0]
 80149aa:	2343      	movs	r3, #67	; 0x43
 80149ac:	4a25      	ldr	r2, [pc, #148]	; (8014a44 <dhcp_select+0x1f0>)
 80149ae:	6979      	ldr	r1, [r7, #20]
 80149b0:	f7ff fbda 	bl	8014168 <udp_sendto_if_src>
 80149b4:	4603      	mov	r3, r0
 80149b6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80149b8:	6978      	ldr	r0, [r7, #20]
 80149ba:	f7f9 fc03 	bl	800e1c4 <pbuf_free>
 80149be:	e001      	b.n	80149c4 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80149c0:	23ff      	movs	r3, #255	; 0xff
 80149c2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80149c4:	69bb      	ldr	r3, [r7, #24]
 80149c6:	799b      	ldrb	r3, [r3, #6]
 80149c8:	2bff      	cmp	r3, #255	; 0xff
 80149ca:	d005      	beq.n	80149d8 <dhcp_select+0x184>
    dhcp->tries++;
 80149cc:	69bb      	ldr	r3, [r7, #24]
 80149ce:	799b      	ldrb	r3, [r3, #6]
 80149d0:	3301      	adds	r3, #1
 80149d2:	b2da      	uxtb	r2, r3
 80149d4:	69bb      	ldr	r3, [r7, #24]
 80149d6:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80149d8:	69bb      	ldr	r3, [r7, #24]
 80149da:	799b      	ldrb	r3, [r3, #6]
 80149dc:	2b05      	cmp	r3, #5
 80149de:	d80d      	bhi.n	80149fc <dhcp_select+0x1a8>
 80149e0:	69bb      	ldr	r3, [r7, #24]
 80149e2:	799b      	ldrb	r3, [r3, #6]
 80149e4:	461a      	mov	r2, r3
 80149e6:	2301      	movs	r3, #1
 80149e8:	4093      	lsls	r3, r2
 80149ea:	b29b      	uxth	r3, r3
 80149ec:	461a      	mov	r2, r3
 80149ee:	0152      	lsls	r2, r2, #5
 80149f0:	1ad2      	subs	r2, r2, r3
 80149f2:	0092      	lsls	r2, r2, #2
 80149f4:	4413      	add	r3, r2
 80149f6:	00db      	lsls	r3, r3, #3
 80149f8:	b29b      	uxth	r3, r3
 80149fa:	e001      	b.n	8014a00 <dhcp_select+0x1ac>
 80149fc:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014a00:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014a02:	89fb      	ldrh	r3, [r7, #14]
 8014a04:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014a08:	4a0f      	ldr	r2, [pc, #60]	; (8014a48 <dhcp_select+0x1f4>)
 8014a0a:	fb82 1203 	smull	r1, r2, r2, r3
 8014a0e:	1152      	asrs	r2, r2, #5
 8014a10:	17db      	asrs	r3, r3, #31
 8014a12:	1ad3      	subs	r3, r2, r3
 8014a14:	b29a      	uxth	r2, r3
 8014a16:	69bb      	ldr	r3, [r7, #24]
 8014a18:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014a1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014a1e:	4618      	mov	r0, r3
 8014a20:	3720      	adds	r7, #32
 8014a22:	46bd      	mov	sp, r7
 8014a24:	bdb0      	pop	{r4, r5, r7, pc}
 8014a26:	bf00      	nop
 8014a28:	0801bc18 	.word	0x0801bc18
 8014a2c:	0801bcc4 	.word	0x0801bcc4
 8014a30:	0801bc78 	.word	0x0801bc78
 8014a34:	0801bce0 	.word	0x0801bce0
 8014a38:	2000003c 	.word	0x2000003c
 8014a3c:	200004bc 	.word	0x200004bc
 8014a40:	0802b590 	.word	0x0802b590
 8014a44:	0802b594 	.word	0x0802b594
 8014a48:	10624dd3 	.word	0x10624dd3

08014a4c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b082      	sub	sp, #8
 8014a50:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8014a52:	4b27      	ldr	r3, [pc, #156]	; (8014af0 <dhcp_coarse_tmr+0xa4>)
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	607b      	str	r3, [r7, #4]
 8014a58:	e042      	b.n	8014ae0 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	6a1b      	ldr	r3, [r3, #32]
 8014a5e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8014a60:	683b      	ldr	r3, [r7, #0]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d039      	beq.n	8014ada <dhcp_coarse_tmr+0x8e>
 8014a66:	683b      	ldr	r3, [r7, #0]
 8014a68:	795b      	ldrb	r3, [r3, #5]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d035      	beq.n	8014ada <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8014a6e:	683b      	ldr	r3, [r7, #0]
 8014a70:	8a9b      	ldrh	r3, [r3, #20]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d012      	beq.n	8014a9c <dhcp_coarse_tmr+0x50>
 8014a76:	683b      	ldr	r3, [r7, #0]
 8014a78:	8a5b      	ldrh	r3, [r3, #18]
 8014a7a:	3301      	adds	r3, #1
 8014a7c:	b29a      	uxth	r2, r3
 8014a7e:	683b      	ldr	r3, [r7, #0]
 8014a80:	825a      	strh	r2, [r3, #18]
 8014a82:	683b      	ldr	r3, [r7, #0]
 8014a84:	8a5a      	ldrh	r2, [r3, #18]
 8014a86:	683b      	ldr	r3, [r7, #0]
 8014a88:	8a9b      	ldrh	r3, [r3, #20]
 8014a8a:	429a      	cmp	r2, r3
 8014a8c:	d106      	bne.n	8014a9c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8014a8e:	6878      	ldr	r0, [r7, #4]
 8014a90:	f000 fdf6 	bl	8015680 <dhcp_release_and_stop>
        dhcp_start(netif);
 8014a94:	6878      	ldr	r0, [r7, #4]
 8014a96:	f000 f969 	bl	8014d6c <dhcp_start>
 8014a9a:	e01e      	b.n	8014ada <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8014a9c:	683b      	ldr	r3, [r7, #0]
 8014a9e:	8a1b      	ldrh	r3, [r3, #16]
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d00b      	beq.n	8014abc <dhcp_coarse_tmr+0x70>
 8014aa4:	683b      	ldr	r3, [r7, #0]
 8014aa6:	8a1b      	ldrh	r3, [r3, #16]
 8014aa8:	1e5a      	subs	r2, r3, #1
 8014aaa:	b291      	uxth	r1, r2
 8014aac:	683a      	ldr	r2, [r7, #0]
 8014aae:	8211      	strh	r1, [r2, #16]
 8014ab0:	2b01      	cmp	r3, #1
 8014ab2:	d103      	bne.n	8014abc <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8014ab4:	6878      	ldr	r0, [r7, #4]
 8014ab6:	f000 f8c6 	bl	8014c46 <dhcp_t2_timeout>
 8014aba:	e00e      	b.n	8014ada <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014abc:	683b      	ldr	r3, [r7, #0]
 8014abe:	89db      	ldrh	r3, [r3, #14]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d00a      	beq.n	8014ada <dhcp_coarse_tmr+0x8e>
 8014ac4:	683b      	ldr	r3, [r7, #0]
 8014ac6:	89db      	ldrh	r3, [r3, #14]
 8014ac8:	1e5a      	subs	r2, r3, #1
 8014aca:	b291      	uxth	r1, r2
 8014acc:	683a      	ldr	r2, [r7, #0]
 8014ace:	81d1      	strh	r1, [r2, #14]
 8014ad0:	2b01      	cmp	r3, #1
 8014ad2:	d102      	bne.n	8014ada <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8014ad4:	6878      	ldr	r0, [r7, #4]
 8014ad6:	f000 f888 	bl	8014bea <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	607b      	str	r3, [r7, #4]
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d1b9      	bne.n	8014a5a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8014ae6:	bf00      	nop
 8014ae8:	3708      	adds	r7, #8
 8014aea:	46bd      	mov	sp, r7
 8014aec:	bd80      	pop	{r7, pc}
 8014aee:	bf00      	nop
 8014af0:	20007ebc 	.word	0x20007ebc

08014af4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8014af4:	b580      	push	{r7, lr}
 8014af6:	b082      	sub	sp, #8
 8014af8:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8014afa:	4b16      	ldr	r3, [pc, #88]	; (8014b54 <dhcp_fine_tmr+0x60>)
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	607b      	str	r3, [r7, #4]
 8014b00:	e020      	b.n	8014b44 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	6a1b      	ldr	r3, [r3, #32]
 8014b06:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8014b08:	683b      	ldr	r3, [r7, #0]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d017      	beq.n	8014b3e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8014b0e:	683b      	ldr	r3, [r7, #0]
 8014b10:	891b      	ldrh	r3, [r3, #8]
 8014b12:	2b01      	cmp	r3, #1
 8014b14:	d906      	bls.n	8014b24 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8014b16:	683b      	ldr	r3, [r7, #0]
 8014b18:	891b      	ldrh	r3, [r3, #8]
 8014b1a:	3b01      	subs	r3, #1
 8014b1c:	b29a      	uxth	r2, r3
 8014b1e:	683b      	ldr	r3, [r7, #0]
 8014b20:	811a      	strh	r2, [r3, #8]
 8014b22:	e00c      	b.n	8014b3e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8014b24:	683b      	ldr	r3, [r7, #0]
 8014b26:	891b      	ldrh	r3, [r3, #8]
 8014b28:	2b01      	cmp	r3, #1
 8014b2a:	d108      	bne.n	8014b3e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8014b2c:	683b      	ldr	r3, [r7, #0]
 8014b2e:	891b      	ldrh	r3, [r3, #8]
 8014b30:	3b01      	subs	r3, #1
 8014b32:	b29a      	uxth	r2, r3
 8014b34:	683b      	ldr	r3, [r7, #0]
 8014b36:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8014b38:	6878      	ldr	r0, [r7, #4]
 8014b3a:	f000 f80d 	bl	8014b58 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	607b      	str	r3, [r7, #4]
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d1db      	bne.n	8014b02 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8014b4a:	bf00      	nop
 8014b4c:	3708      	adds	r7, #8
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	bd80      	pop	{r7, pc}
 8014b52:	bf00      	nop
 8014b54:	20007ebc 	.word	0x20007ebc

08014b58 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8014b58:	b580      	push	{r7, lr}
 8014b5a:	b084      	sub	sp, #16
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	6a1b      	ldr	r3, [r3, #32]
 8014b64:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	795b      	ldrb	r3, [r3, #5]
 8014b6a:	2b0c      	cmp	r3, #12
 8014b6c:	d003      	beq.n	8014b76 <dhcp_timeout+0x1e>
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	795b      	ldrb	r3, [r3, #5]
 8014b72:	2b06      	cmp	r3, #6
 8014b74:	d103      	bne.n	8014b7e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8014b76:	6878      	ldr	r0, [r7, #4]
 8014b78:	f000 fa18 	bl	8014fac <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8014b7c:	e031      	b.n	8014be2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	795b      	ldrb	r3, [r3, #5]
 8014b82:	2b01      	cmp	r3, #1
 8014b84:	d10e      	bne.n	8014ba4 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	799b      	ldrb	r3, [r3, #6]
 8014b8a:	2b05      	cmp	r3, #5
 8014b8c:	d803      	bhi.n	8014b96 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8014b8e:	6878      	ldr	r0, [r7, #4]
 8014b90:	f7ff fe60 	bl	8014854 <dhcp_select>
}
 8014b94:	e025      	b.n	8014be2 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8014b96:	6878      	ldr	r0, [r7, #4]
 8014b98:	f000 fd72 	bl	8015680 <dhcp_release_and_stop>
      dhcp_start(netif);
 8014b9c:	6878      	ldr	r0, [r7, #4]
 8014b9e:	f000 f8e5 	bl	8014d6c <dhcp_start>
}
 8014ba2:	e01e      	b.n	8014be2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	795b      	ldrb	r3, [r3, #5]
 8014ba8:	2b08      	cmp	r3, #8
 8014baa:	d10b      	bne.n	8014bc4 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	799b      	ldrb	r3, [r3, #6]
 8014bb0:	2b01      	cmp	r3, #1
 8014bb2:	d803      	bhi.n	8014bbc <dhcp_timeout+0x64>
      dhcp_check(netif);
 8014bb4:	6878      	ldr	r0, [r7, #4]
 8014bb6:	f7ff fdf3 	bl	80147a0 <dhcp_check>
}
 8014bba:	e012      	b.n	8014be2 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8014bbc:	6878      	ldr	r0, [r7, #4]
 8014bbe:	f000 fa97 	bl	80150f0 <dhcp_bind>
}
 8014bc2:	e00e      	b.n	8014be2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	795b      	ldrb	r3, [r3, #5]
 8014bc8:	2b03      	cmp	r3, #3
 8014bca:	d10a      	bne.n	8014be2 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	799b      	ldrb	r3, [r3, #6]
 8014bd0:	2b01      	cmp	r3, #1
 8014bd2:	d803      	bhi.n	8014bdc <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8014bd4:	6878      	ldr	r0, [r7, #4]
 8014bd6:	f000 fc9d 	bl	8015514 <dhcp_reboot>
}
 8014bda:	e002      	b.n	8014be2 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8014bdc:	6878      	ldr	r0, [r7, #4]
 8014bde:	f000 f9e5 	bl	8014fac <dhcp_discover>
}
 8014be2:	bf00      	nop
 8014be4:	3710      	adds	r7, #16
 8014be6:	46bd      	mov	sp, r7
 8014be8:	bd80      	pop	{r7, pc}

08014bea <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8014bea:	b580      	push	{r7, lr}
 8014bec:	b084      	sub	sp, #16
 8014bee:	af00      	add	r7, sp, #0
 8014bf0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	6a1b      	ldr	r3, [r3, #32]
 8014bf6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	795b      	ldrb	r3, [r3, #5]
 8014bfc:	2b01      	cmp	r3, #1
 8014bfe:	d007      	beq.n	8014c10 <dhcp_t1_timeout+0x26>
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	795b      	ldrb	r3, [r3, #5]
 8014c04:	2b0a      	cmp	r3, #10
 8014c06:	d003      	beq.n	8014c10 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014c0c:	2b05      	cmp	r3, #5
 8014c0e:	d116      	bne.n	8014c3e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8014c10:	6878      	ldr	r0, [r7, #4]
 8014c12:	f000 fb47 	bl	80152a4 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	899b      	ldrh	r3, [r3, #12]
 8014c1a:	461a      	mov	r2, r3
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	8a5b      	ldrh	r3, [r3, #18]
 8014c20:	1ad3      	subs	r3, r2, r3
 8014c22:	2b01      	cmp	r3, #1
 8014c24:	dd0b      	ble.n	8014c3e <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	899b      	ldrh	r3, [r3, #12]
 8014c2a:	461a      	mov	r2, r3
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	8a5b      	ldrh	r3, [r3, #18]
 8014c30:	1ad3      	subs	r3, r2, r3
 8014c32:	0fda      	lsrs	r2, r3, #31
 8014c34:	4413      	add	r3, r2
 8014c36:	105b      	asrs	r3, r3, #1
 8014c38:	b29a      	uxth	r2, r3
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8014c3e:	bf00      	nop
 8014c40:	3710      	adds	r7, #16
 8014c42:	46bd      	mov	sp, r7
 8014c44:	bd80      	pop	{r7, pc}

08014c46 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8014c46:	b580      	push	{r7, lr}
 8014c48:	b084      	sub	sp, #16
 8014c4a:	af00      	add	r7, sp, #0
 8014c4c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	6a1b      	ldr	r3, [r3, #32]
 8014c52:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	795b      	ldrb	r3, [r3, #5]
 8014c58:	2b01      	cmp	r3, #1
 8014c5a:	d00b      	beq.n	8014c74 <dhcp_t2_timeout+0x2e>
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	795b      	ldrb	r3, [r3, #5]
 8014c60:	2b0a      	cmp	r3, #10
 8014c62:	d007      	beq.n	8014c74 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014c68:	2b05      	cmp	r3, #5
 8014c6a:	d003      	beq.n	8014c74 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	795b      	ldrb	r3, [r3, #5]
 8014c70:	2b04      	cmp	r3, #4
 8014c72:	d116      	bne.n	8014ca2 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8014c74:	6878      	ldr	r0, [r7, #4]
 8014c76:	f000 fbb1 	bl	80153dc <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	8a9b      	ldrh	r3, [r3, #20]
 8014c7e:	461a      	mov	r2, r3
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	8a5b      	ldrh	r3, [r3, #18]
 8014c84:	1ad3      	subs	r3, r2, r3
 8014c86:	2b01      	cmp	r3, #1
 8014c88:	dd0b      	ble.n	8014ca2 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	8a9b      	ldrh	r3, [r3, #20]
 8014c8e:	461a      	mov	r2, r3
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	8a5b      	ldrh	r3, [r3, #18]
 8014c94:	1ad3      	subs	r3, r2, r3
 8014c96:	0fda      	lsrs	r2, r3, #31
 8014c98:	4413      	add	r3, r2
 8014c9a:	105b      	asrs	r3, r3, #1
 8014c9c:	b29a      	uxth	r2, r3
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8014ca2:	bf00      	nop
 8014ca4:	3710      	adds	r7, #16
 8014ca6:	46bd      	mov	sp, r7
 8014ca8:	bd80      	pop	{r7, pc}
	...

08014cac <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b084      	sub	sp, #16
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	6078      	str	r0, [r7, #4]
 8014cb4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	6a1b      	ldr	r3, [r3, #32]
 8014cba:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	2200      	movs	r2, #0
 8014cc6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8014cc8:	4b26      	ldr	r3, [pc, #152]	; (8014d64 <dhcp_handle_ack+0xb8>)
 8014cca:	78db      	ldrb	r3, [r3, #3]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d003      	beq.n	8014cd8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8014cd0:	4b25      	ldr	r3, [pc, #148]	; (8014d68 <dhcp_handle_ack+0xbc>)
 8014cd2:	68da      	ldr	r2, [r3, #12]
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8014cd8:	4b22      	ldr	r3, [pc, #136]	; (8014d64 <dhcp_handle_ack+0xb8>)
 8014cda:	791b      	ldrb	r3, [r3, #4]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d004      	beq.n	8014cea <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8014ce0:	4b21      	ldr	r3, [pc, #132]	; (8014d68 <dhcp_handle_ack+0xbc>)
 8014ce2:	691a      	ldr	r2, [r3, #16]
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	62da      	str	r2, [r3, #44]	; 0x2c
 8014ce8:	e004      	b.n	8014cf4 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cee:	085a      	lsrs	r2, r3, #1
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8014cf4:	4b1b      	ldr	r3, [pc, #108]	; (8014d64 <dhcp_handle_ack+0xb8>)
 8014cf6:	795b      	ldrb	r3, [r3, #5]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d004      	beq.n	8014d06 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8014cfc:	4b1a      	ldr	r3, [pc, #104]	; (8014d68 <dhcp_handle_ack+0xbc>)
 8014cfe:	695a      	ldr	r2, [r3, #20]
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	631a      	str	r2, [r3, #48]	; 0x30
 8014d04:	e007      	b.n	8014d16 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014d0a:	4613      	mov	r3, r2
 8014d0c:	00db      	lsls	r3, r3, #3
 8014d0e:	1a9b      	subs	r3, r3, r2
 8014d10:	08da      	lsrs	r2, r3, #3
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8014d16:	683b      	ldr	r3, [r7, #0]
 8014d18:	691a      	ldr	r2, [r3, #16]
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8014d1e:	4b11      	ldr	r3, [pc, #68]	; (8014d64 <dhcp_handle_ack+0xb8>)
 8014d20:	799b      	ldrb	r3, [r3, #6]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d00b      	beq.n	8014d3e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8014d26:	4b10      	ldr	r3, [pc, #64]	; (8014d68 <dhcp_handle_ack+0xbc>)
 8014d28:	699b      	ldr	r3, [r3, #24]
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	f7f7 ffbe 	bl	800ccac <lwip_htonl>
 8014d30:	4602      	mov	r2, r0
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	2201      	movs	r2, #1
 8014d3a:	71da      	strb	r2, [r3, #7]
 8014d3c:	e002      	b.n	8014d44 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	2200      	movs	r2, #0
 8014d42:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8014d44:	4b07      	ldr	r3, [pc, #28]	; (8014d64 <dhcp_handle_ack+0xb8>)
 8014d46:	79db      	ldrb	r3, [r3, #7]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d007      	beq.n	8014d5c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8014d4c:	4b06      	ldr	r3, [pc, #24]	; (8014d68 <dhcp_handle_ack+0xbc>)
 8014d4e:	69db      	ldr	r3, [r3, #28]
 8014d50:	4618      	mov	r0, r3
 8014d52:	f7f7 ffab 	bl	800ccac <lwip_htonl>
 8014d56:	4602      	mov	r2, r0
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8014d5c:	bf00      	nop
 8014d5e:	3710      	adds	r7, #16
 8014d60:	46bd      	mov	sp, r7
 8014d62:	bd80      	pop	{r7, pc}
 8014d64:	20007ee8 	.word	0x20007ee8
 8014d68:	20007ef0 	.word	0x20007ef0

08014d6c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b084      	sub	sp, #16
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d109      	bne.n	8014d8e <dhcp_start+0x22>
 8014d7a:	4b37      	ldr	r3, [pc, #220]	; (8014e58 <dhcp_start+0xec>)
 8014d7c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8014d80:	4936      	ldr	r1, [pc, #216]	; (8014e5c <dhcp_start+0xf0>)
 8014d82:	4837      	ldr	r0, [pc, #220]	; (8014e60 <dhcp_start+0xf4>)
 8014d84:	f003 fea4 	bl	8018ad0 <iprintf>
 8014d88:	f06f 030f 	mvn.w	r3, #15
 8014d8c:	e060      	b.n	8014e50 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014d94:	f003 0301 	and.w	r3, r3, #1
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d109      	bne.n	8014db0 <dhcp_start+0x44>
 8014d9c:	4b2e      	ldr	r3, [pc, #184]	; (8014e58 <dhcp_start+0xec>)
 8014d9e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8014da2:	4930      	ldr	r1, [pc, #192]	; (8014e64 <dhcp_start+0xf8>)
 8014da4:	482e      	ldr	r0, [pc, #184]	; (8014e60 <dhcp_start+0xf4>)
 8014da6:	f003 fe93 	bl	8018ad0 <iprintf>
 8014daa:	f06f 030f 	mvn.w	r3, #15
 8014dae:	e04f      	b.n	8014e50 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	6a1b      	ldr	r3, [r3, #32]
 8014db4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014dba:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8014dbe:	d202      	bcs.n	8014dc6 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8014dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8014dc4:	e044      	b.n	8014e50 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d10d      	bne.n	8014de8 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8014dcc:	2034      	movs	r0, #52	; 0x34
 8014dce:	f7f8 fa3f 	bl	800d250 <mem_malloc>
 8014dd2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d102      	bne.n	8014de0 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8014dda:	f04f 33ff 	mov.w	r3, #4294967295
 8014dde:	e037      	b.n	8014e50 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	68fa      	ldr	r2, [r7, #12]
 8014de4:	621a      	str	r2, [r3, #32]
 8014de6:	e005      	b.n	8014df4 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	791b      	ldrb	r3, [r3, #4]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d001      	beq.n	8014df4 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014df0:	f7ff fc92 	bl	8014718 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8014df4:	2234      	movs	r2, #52	; 0x34
 8014df6:	2100      	movs	r1, #0
 8014df8:	68f8      	ldr	r0, [r7, #12]
 8014dfa:	f003 fdb9 	bl	8018970 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8014dfe:	f7ff fc39 	bl	8014674 <dhcp_inc_pcb_refcount>
 8014e02:	4603      	mov	r3, r0
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d002      	beq.n	8014e0e <dhcp_start+0xa2>
    return ERR_MEM;
 8014e08:	f04f 33ff 	mov.w	r3, #4294967295
 8014e0c:	e020      	b.n	8014e50 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	2201      	movs	r2, #1
 8014e12:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014e1a:	f003 0304 	and.w	r3, r3, #4
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d105      	bne.n	8014e2e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8014e22:	2102      	movs	r1, #2
 8014e24:	68f8      	ldr	r0, [r7, #12]
 8014e26:	f000 fcc5 	bl	80157b4 <dhcp_set_state>
    return ERR_OK;
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	e010      	b.n	8014e50 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8014e2e:	6878      	ldr	r0, [r7, #4]
 8014e30:	f000 f8bc 	bl	8014fac <dhcp_discover>
 8014e34:	4603      	mov	r3, r0
 8014e36:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8014e38:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d005      	beq.n	8014e4c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8014e40:	6878      	ldr	r0, [r7, #4]
 8014e42:	f000 fc1d 	bl	8015680 <dhcp_release_and_stop>
    return ERR_MEM;
 8014e46:	f04f 33ff 	mov.w	r3, #4294967295
 8014e4a:	e001      	b.n	8014e50 <dhcp_start+0xe4>
  }
  return result;
 8014e4c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014e50:	4618      	mov	r0, r3
 8014e52:	3710      	adds	r7, #16
 8014e54:	46bd      	mov	sp, r7
 8014e56:	bd80      	pop	{r7, pc}
 8014e58:	0801bc18 	.word	0x0801bc18
 8014e5c:	0801bcfc 	.word	0x0801bcfc
 8014e60:	0801bc78 	.word	0x0801bc78
 8014e64:	0801bd40 	.word	0x0801bd40

08014e68 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b084      	sub	sp, #16
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
 8014e70:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d107      	bne.n	8014e88 <dhcp_arp_reply+0x20>
 8014e78:	4b0e      	ldr	r3, [pc, #56]	; (8014eb4 <dhcp_arp_reply+0x4c>)
 8014e7a:	f240 328b 	movw	r2, #907	; 0x38b
 8014e7e:	490e      	ldr	r1, [pc, #56]	; (8014eb8 <dhcp_arp_reply+0x50>)
 8014e80:	480e      	ldr	r0, [pc, #56]	; (8014ebc <dhcp_arp_reply+0x54>)
 8014e82:	f003 fe25 	bl	8018ad0 <iprintf>
 8014e86:	e012      	b.n	8014eae <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	6a1b      	ldr	r3, [r3, #32]
 8014e8c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d00c      	beq.n	8014eae <dhcp_arp_reply+0x46>
 8014e94:	68fb      	ldr	r3, [r7, #12]
 8014e96:	795b      	ldrb	r3, [r3, #5]
 8014e98:	2b08      	cmp	r3, #8
 8014e9a:	d108      	bne.n	8014eae <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8014e9c:	683b      	ldr	r3, [r7, #0]
 8014e9e:	681a      	ldr	r2, [r3, #0]
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	69db      	ldr	r3, [r3, #28]
 8014ea4:	429a      	cmp	r2, r3
 8014ea6:	d102      	bne.n	8014eae <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8014ea8:	6878      	ldr	r0, [r7, #4]
 8014eaa:	f000 f809 	bl	8014ec0 <dhcp_decline>
    }
  }
}
 8014eae:	3710      	adds	r7, #16
 8014eb0:	46bd      	mov	sp, r7
 8014eb2:	bd80      	pop	{r7, pc}
 8014eb4:	0801bc18 	.word	0x0801bc18
 8014eb8:	0801bcfc 	.word	0x0801bcfc
 8014ebc:	0801bc78 	.word	0x0801bc78

08014ec0 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8014ec0:	b5b0      	push	{r4, r5, r7, lr}
 8014ec2:	b08a      	sub	sp, #40	; 0x28
 8014ec4:	af02      	add	r7, sp, #8
 8014ec6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	6a1b      	ldr	r3, [r3, #32]
 8014ecc:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014ece:	210c      	movs	r1, #12
 8014ed0:	69b8      	ldr	r0, [r7, #24]
 8014ed2:	f000 fc6f 	bl	80157b4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8014ed6:	f107 030c 	add.w	r3, r7, #12
 8014eda:	2204      	movs	r2, #4
 8014edc:	69b9      	ldr	r1, [r7, #24]
 8014ede:	6878      	ldr	r0, [r7, #4]
 8014ee0:	f001 f8f2 	bl	80160c8 <dhcp_create_msg>
 8014ee4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014ee6:	697b      	ldr	r3, [r7, #20]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d035      	beq.n	8014f58 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014eec:	697b      	ldr	r3, [r7, #20]
 8014eee:	685b      	ldr	r3, [r3, #4]
 8014ef0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014ef2:	89b8      	ldrh	r0, [r7, #12]
 8014ef4:	693b      	ldr	r3, [r7, #16]
 8014ef6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014efa:	2304      	movs	r3, #4
 8014efc:	2232      	movs	r2, #50	; 0x32
 8014efe:	f000 fc73 	bl	80157e8 <dhcp_option>
 8014f02:	4603      	mov	r3, r0
 8014f04:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014f06:	89bc      	ldrh	r4, [r7, #12]
 8014f08:	693b      	ldr	r3, [r7, #16]
 8014f0a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014f0e:	69bb      	ldr	r3, [r7, #24]
 8014f10:	69db      	ldr	r3, [r3, #28]
 8014f12:	4618      	mov	r0, r3
 8014f14:	f7f7 feca 	bl	800ccac <lwip_htonl>
 8014f18:	4603      	mov	r3, r0
 8014f1a:	461a      	mov	r2, r3
 8014f1c:	4629      	mov	r1, r5
 8014f1e:	4620      	mov	r0, r4
 8014f20:	f000 fcee 	bl	8015900 <dhcp_option_long>
 8014f24:	4603      	mov	r3, r0
 8014f26:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014f28:	89b8      	ldrh	r0, [r7, #12]
 8014f2a:	693b      	ldr	r3, [r7, #16]
 8014f2c:	33f0      	adds	r3, #240	; 0xf0
 8014f2e:	697a      	ldr	r2, [r7, #20]
 8014f30:	4619      	mov	r1, r3
 8014f32:	f001 f99f 	bl	8016274 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014f36:	4b19      	ldr	r3, [pc, #100]	; (8014f9c <dhcp_decline+0xdc>)
 8014f38:	6818      	ldr	r0, [r3, #0]
 8014f3a:	4b19      	ldr	r3, [pc, #100]	; (8014fa0 <dhcp_decline+0xe0>)
 8014f3c:	9301      	str	r3, [sp, #4]
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	9300      	str	r3, [sp, #0]
 8014f42:	2343      	movs	r3, #67	; 0x43
 8014f44:	4a17      	ldr	r2, [pc, #92]	; (8014fa4 <dhcp_decline+0xe4>)
 8014f46:	6979      	ldr	r1, [r7, #20]
 8014f48:	f7ff f90e 	bl	8014168 <udp_sendto_if_src>
 8014f4c:	4603      	mov	r3, r0
 8014f4e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014f50:	6978      	ldr	r0, [r7, #20]
 8014f52:	f7f9 f937 	bl	800e1c4 <pbuf_free>
 8014f56:	e001      	b.n	8014f5c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014f58:	23ff      	movs	r3, #255	; 0xff
 8014f5a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014f5c:	69bb      	ldr	r3, [r7, #24]
 8014f5e:	799b      	ldrb	r3, [r3, #6]
 8014f60:	2bff      	cmp	r3, #255	; 0xff
 8014f62:	d005      	beq.n	8014f70 <dhcp_decline+0xb0>
    dhcp->tries++;
 8014f64:	69bb      	ldr	r3, [r7, #24]
 8014f66:	799b      	ldrb	r3, [r3, #6]
 8014f68:	3301      	adds	r3, #1
 8014f6a:	b2da      	uxtb	r2, r3
 8014f6c:	69bb      	ldr	r3, [r7, #24]
 8014f6e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8014f70:	f242 7310 	movw	r3, #10000	; 0x2710
 8014f74:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014f76:	89fb      	ldrh	r3, [r7, #14]
 8014f78:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014f7c:	4a0a      	ldr	r2, [pc, #40]	; (8014fa8 <dhcp_decline+0xe8>)
 8014f7e:	fb82 1203 	smull	r1, r2, r2, r3
 8014f82:	1152      	asrs	r2, r2, #5
 8014f84:	17db      	asrs	r3, r3, #31
 8014f86:	1ad3      	subs	r3, r2, r3
 8014f88:	b29a      	uxth	r2, r3
 8014f8a:	69bb      	ldr	r3, [r7, #24]
 8014f8c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014f8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014f92:	4618      	mov	r0, r3
 8014f94:	3720      	adds	r7, #32
 8014f96:	46bd      	mov	sp, r7
 8014f98:	bdb0      	pop	{r4, r5, r7, pc}
 8014f9a:	bf00      	nop
 8014f9c:	200004bc 	.word	0x200004bc
 8014fa0:	0802b590 	.word	0x0802b590
 8014fa4:	0802b594 	.word	0x0802b594
 8014fa8:	10624dd3 	.word	0x10624dd3

08014fac <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8014fac:	b580      	push	{r7, lr}
 8014fae:	b08a      	sub	sp, #40	; 0x28
 8014fb0:	af02      	add	r7, sp, #8
 8014fb2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	6a1b      	ldr	r3, [r3, #32]
 8014fb8:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8014fba:	2300      	movs	r3, #0
 8014fbc:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8014fbe:	69bb      	ldr	r3, [r7, #24]
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8014fc4:	2106      	movs	r1, #6
 8014fc6:	69b8      	ldr	r0, [r7, #24]
 8014fc8:	f000 fbf4 	bl	80157b4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8014fcc:	f107 0308 	add.w	r3, r7, #8
 8014fd0:	2201      	movs	r2, #1
 8014fd2:	69b9      	ldr	r1, [r7, #24]
 8014fd4:	6878      	ldr	r0, [r7, #4]
 8014fd6:	f001 f877 	bl	80160c8 <dhcp_create_msg>
 8014fda:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8014fdc:	693b      	ldr	r3, [r7, #16]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d04b      	beq.n	801507a <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014fe2:	693b      	ldr	r3, [r7, #16]
 8014fe4:	685b      	ldr	r3, [r3, #4]
 8014fe6:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014fe8:	8938      	ldrh	r0, [r7, #8]
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014ff0:	2302      	movs	r3, #2
 8014ff2:	2239      	movs	r2, #57	; 0x39
 8014ff4:	f000 fbf8 	bl	80157e8 <dhcp_option>
 8014ff8:	4603      	mov	r3, r0
 8014ffa:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8014ffc:	8938      	ldrh	r0, [r7, #8]
 8014ffe:	68fb      	ldr	r3, [r7, #12]
 8015000:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015008:	461a      	mov	r2, r3
 801500a:	f000 fc47 	bl	801589c <dhcp_option_short>
 801500e:	4603      	mov	r3, r0
 8015010:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015012:	8938      	ldrh	r0, [r7, #8]
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801501a:	2303      	movs	r3, #3
 801501c:	2237      	movs	r2, #55	; 0x37
 801501e:	f000 fbe3 	bl	80157e8 <dhcp_option>
 8015022:	4603      	mov	r3, r0
 8015024:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015026:	2300      	movs	r3, #0
 8015028:	77fb      	strb	r3, [r7, #31]
 801502a:	e00e      	b.n	801504a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801502c:	8938      	ldrh	r0, [r7, #8]
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015034:	7ffb      	ldrb	r3, [r7, #31]
 8015036:	4a29      	ldr	r2, [pc, #164]	; (80150dc <dhcp_discover+0x130>)
 8015038:	5cd3      	ldrb	r3, [r2, r3]
 801503a:	461a      	mov	r2, r3
 801503c:	f000 fc08 	bl	8015850 <dhcp_option_byte>
 8015040:	4603      	mov	r3, r0
 8015042:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015044:	7ffb      	ldrb	r3, [r7, #31]
 8015046:	3301      	adds	r3, #1
 8015048:	77fb      	strb	r3, [r7, #31]
 801504a:	7ffb      	ldrb	r3, [r7, #31]
 801504c:	2b02      	cmp	r3, #2
 801504e:	d9ed      	bls.n	801502c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015050:	8938      	ldrh	r0, [r7, #8]
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	33f0      	adds	r3, #240	; 0xf0
 8015056:	693a      	ldr	r2, [r7, #16]
 8015058:	4619      	mov	r1, r3
 801505a:	f001 f90b 	bl	8016274 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801505e:	4b20      	ldr	r3, [pc, #128]	; (80150e0 <dhcp_discover+0x134>)
 8015060:	6818      	ldr	r0, [r3, #0]
 8015062:	4b20      	ldr	r3, [pc, #128]	; (80150e4 <dhcp_discover+0x138>)
 8015064:	9301      	str	r3, [sp, #4]
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	9300      	str	r3, [sp, #0]
 801506a:	2343      	movs	r3, #67	; 0x43
 801506c:	4a1e      	ldr	r2, [pc, #120]	; (80150e8 <dhcp_discover+0x13c>)
 801506e:	6939      	ldr	r1, [r7, #16]
 8015070:	f7ff f87a 	bl	8014168 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8015074:	6938      	ldr	r0, [r7, #16]
 8015076:	f7f9 f8a5 	bl	800e1c4 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801507a:	69bb      	ldr	r3, [r7, #24]
 801507c:	799b      	ldrb	r3, [r3, #6]
 801507e:	2bff      	cmp	r3, #255	; 0xff
 8015080:	d005      	beq.n	801508e <dhcp_discover+0xe2>
    dhcp->tries++;
 8015082:	69bb      	ldr	r3, [r7, #24]
 8015084:	799b      	ldrb	r3, [r3, #6]
 8015086:	3301      	adds	r3, #1
 8015088:	b2da      	uxtb	r2, r3
 801508a:	69bb      	ldr	r3, [r7, #24]
 801508c:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801508e:	69bb      	ldr	r3, [r7, #24]
 8015090:	799b      	ldrb	r3, [r3, #6]
 8015092:	2b05      	cmp	r3, #5
 8015094:	d80d      	bhi.n	80150b2 <dhcp_discover+0x106>
 8015096:	69bb      	ldr	r3, [r7, #24]
 8015098:	799b      	ldrb	r3, [r3, #6]
 801509a:	461a      	mov	r2, r3
 801509c:	2301      	movs	r3, #1
 801509e:	4093      	lsls	r3, r2
 80150a0:	b29b      	uxth	r3, r3
 80150a2:	461a      	mov	r2, r3
 80150a4:	0152      	lsls	r2, r2, #5
 80150a6:	1ad2      	subs	r2, r2, r3
 80150a8:	0092      	lsls	r2, r2, #2
 80150aa:	4413      	add	r3, r2
 80150ac:	00db      	lsls	r3, r3, #3
 80150ae:	b29b      	uxth	r3, r3
 80150b0:	e001      	b.n	80150b6 <dhcp_discover+0x10a>
 80150b2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80150b6:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80150b8:	897b      	ldrh	r3, [r7, #10]
 80150ba:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80150be:	4a0b      	ldr	r2, [pc, #44]	; (80150ec <dhcp_discover+0x140>)
 80150c0:	fb82 1203 	smull	r1, r2, r2, r3
 80150c4:	1152      	asrs	r2, r2, #5
 80150c6:	17db      	asrs	r3, r3, #31
 80150c8:	1ad3      	subs	r3, r2, r3
 80150ca:	b29a      	uxth	r2, r3
 80150cc:	69bb      	ldr	r3, [r7, #24]
 80150ce:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80150d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80150d4:	4618      	mov	r0, r3
 80150d6:	3720      	adds	r7, #32
 80150d8:	46bd      	mov	sp, r7
 80150da:	bd80      	pop	{r7, pc}
 80150dc:	2000003c 	.word	0x2000003c
 80150e0:	200004bc 	.word	0x200004bc
 80150e4:	0802b590 	.word	0x0802b590
 80150e8:	0802b594 	.word	0x0802b594
 80150ec:	10624dd3 	.word	0x10624dd3

080150f0 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80150f0:	b580      	push	{r7, lr}
 80150f2:	b088      	sub	sp, #32
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d107      	bne.n	801510e <dhcp_bind+0x1e>
 80150fe:	4b64      	ldr	r3, [pc, #400]	; (8015290 <dhcp_bind+0x1a0>)
 8015100:	f240 4215 	movw	r2, #1045	; 0x415
 8015104:	4963      	ldr	r1, [pc, #396]	; (8015294 <dhcp_bind+0x1a4>)
 8015106:	4864      	ldr	r0, [pc, #400]	; (8015298 <dhcp_bind+0x1a8>)
 8015108:	f003 fce2 	bl	8018ad0 <iprintf>
 801510c:	e0bc      	b.n	8015288 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	6a1b      	ldr	r3, [r3, #32]
 8015112:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8015114:	69bb      	ldr	r3, [r7, #24]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d107      	bne.n	801512a <dhcp_bind+0x3a>
 801511a:	4b5d      	ldr	r3, [pc, #372]	; (8015290 <dhcp_bind+0x1a0>)
 801511c:	f240 4217 	movw	r2, #1047	; 0x417
 8015120:	495e      	ldr	r1, [pc, #376]	; (801529c <dhcp_bind+0x1ac>)
 8015122:	485d      	ldr	r0, [pc, #372]	; (8015298 <dhcp_bind+0x1a8>)
 8015124:	f003 fcd4 	bl	8018ad0 <iprintf>
 8015128:	e0ae      	b.n	8015288 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801512a:	69bb      	ldr	r3, [r7, #24]
 801512c:	2200      	movs	r2, #0
 801512e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8015130:	69bb      	ldr	r3, [r7, #24]
 8015132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015138:	d019      	beq.n	801516e <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801513a:	69bb      	ldr	r3, [r7, #24]
 801513c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801513e:	331e      	adds	r3, #30
 8015140:	4a57      	ldr	r2, [pc, #348]	; (80152a0 <dhcp_bind+0x1b0>)
 8015142:	fba2 2303 	umull	r2, r3, r2, r3
 8015146:	095b      	lsrs	r3, r3, #5
 8015148:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801514a:	69fb      	ldr	r3, [r7, #28]
 801514c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015150:	d302      	bcc.n	8015158 <dhcp_bind+0x68>
      timeout = 0xffff;
 8015152:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015156:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8015158:	69fb      	ldr	r3, [r7, #28]
 801515a:	b29a      	uxth	r2, r3
 801515c:	69bb      	ldr	r3, [r7, #24]
 801515e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8015160:	69bb      	ldr	r3, [r7, #24]
 8015162:	8a9b      	ldrh	r3, [r3, #20]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d102      	bne.n	801516e <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8015168:	69bb      	ldr	r3, [r7, #24]
 801516a:	2201      	movs	r2, #1
 801516c:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801516e:	69bb      	ldr	r3, [r7, #24]
 8015170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015176:	d01d      	beq.n	80151b4 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015178:	69bb      	ldr	r3, [r7, #24]
 801517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801517c:	331e      	adds	r3, #30
 801517e:	4a48      	ldr	r2, [pc, #288]	; (80152a0 <dhcp_bind+0x1b0>)
 8015180:	fba2 2303 	umull	r2, r3, r2, r3
 8015184:	095b      	lsrs	r3, r3, #5
 8015186:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015188:	69fb      	ldr	r3, [r7, #28]
 801518a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801518e:	d302      	bcc.n	8015196 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8015190:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015194:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8015196:	69fb      	ldr	r3, [r7, #28]
 8015198:	b29a      	uxth	r2, r3
 801519a:	69bb      	ldr	r3, [r7, #24]
 801519c:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801519e:	69bb      	ldr	r3, [r7, #24]
 80151a0:	895b      	ldrh	r3, [r3, #10]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d102      	bne.n	80151ac <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80151a6:	69bb      	ldr	r3, [r7, #24]
 80151a8:	2201      	movs	r2, #1
 80151aa:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80151ac:	69bb      	ldr	r3, [r7, #24]
 80151ae:	895a      	ldrh	r2, [r3, #10]
 80151b0:	69bb      	ldr	r3, [r7, #24]
 80151b2:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80151b4:	69bb      	ldr	r3, [r7, #24]
 80151b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151bc:	d01d      	beq.n	80151fa <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80151be:	69bb      	ldr	r3, [r7, #24]
 80151c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151c2:	331e      	adds	r3, #30
 80151c4:	4a36      	ldr	r2, [pc, #216]	; (80152a0 <dhcp_bind+0x1b0>)
 80151c6:	fba2 2303 	umull	r2, r3, r2, r3
 80151ca:	095b      	lsrs	r3, r3, #5
 80151cc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80151ce:	69fb      	ldr	r3, [r7, #28]
 80151d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80151d4:	d302      	bcc.n	80151dc <dhcp_bind+0xec>
      timeout = 0xffff;
 80151d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80151da:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80151dc:	69fb      	ldr	r3, [r7, #28]
 80151de:	b29a      	uxth	r2, r3
 80151e0:	69bb      	ldr	r3, [r7, #24]
 80151e2:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80151e4:	69bb      	ldr	r3, [r7, #24]
 80151e6:	899b      	ldrh	r3, [r3, #12]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d102      	bne.n	80151f2 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80151ec:	69bb      	ldr	r3, [r7, #24]
 80151ee:	2201      	movs	r2, #1
 80151f0:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80151f2:	69bb      	ldr	r3, [r7, #24]
 80151f4:	899a      	ldrh	r2, [r3, #12]
 80151f6:	69bb      	ldr	r3, [r7, #24]
 80151f8:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80151fa:	69bb      	ldr	r3, [r7, #24]
 80151fc:	895a      	ldrh	r2, [r3, #10]
 80151fe:	69bb      	ldr	r3, [r7, #24]
 8015200:	899b      	ldrh	r3, [r3, #12]
 8015202:	429a      	cmp	r2, r3
 8015204:	d306      	bcc.n	8015214 <dhcp_bind+0x124>
 8015206:	69bb      	ldr	r3, [r7, #24]
 8015208:	899b      	ldrh	r3, [r3, #12]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d002      	beq.n	8015214 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801520e:	69bb      	ldr	r3, [r7, #24]
 8015210:	2200      	movs	r2, #0
 8015212:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8015214:	69bb      	ldr	r3, [r7, #24]
 8015216:	79db      	ldrb	r3, [r3, #7]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d003      	beq.n	8015224 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801521c:	69bb      	ldr	r3, [r7, #24]
 801521e:	6a1b      	ldr	r3, [r3, #32]
 8015220:	613b      	str	r3, [r7, #16]
 8015222:	e014      	b.n	801524e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8015224:	69bb      	ldr	r3, [r7, #24]
 8015226:	331c      	adds	r3, #28
 8015228:	781b      	ldrb	r3, [r3, #0]
 801522a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801522c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015230:	2b00      	cmp	r3, #0
 8015232:	db02      	blt.n	801523a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8015234:	23ff      	movs	r3, #255	; 0xff
 8015236:	613b      	str	r3, [r7, #16]
 8015238:	e009      	b.n	801524e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801523a:	7dfb      	ldrb	r3, [r7, #23]
 801523c:	2bbf      	cmp	r3, #191	; 0xbf
 801523e:	d903      	bls.n	8015248 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8015240:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8015244:	613b      	str	r3, [r7, #16]
 8015246:	e002      	b.n	801524e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8015248:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801524c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801524e:	69bb      	ldr	r3, [r7, #24]
 8015250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015252:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	2b00      	cmp	r3, #0
 8015258:	d108      	bne.n	801526c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801525a:	69bb      	ldr	r3, [r7, #24]
 801525c:	69da      	ldr	r2, [r3, #28]
 801525e:	693b      	ldr	r3, [r7, #16]
 8015260:	4013      	ands	r3, r2
 8015262:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8015264:	68fb      	ldr	r3, [r7, #12]
 8015266:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801526a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801526c:	210a      	movs	r1, #10
 801526e:	69b8      	ldr	r0, [r7, #24]
 8015270:	f000 faa0 	bl	80157b4 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8015274:	69bb      	ldr	r3, [r7, #24]
 8015276:	f103 011c 	add.w	r1, r3, #28
 801527a:	f107 030c 	add.w	r3, r7, #12
 801527e:	f107 0210 	add.w	r2, r7, #16
 8015282:	6878      	ldr	r0, [r7, #4]
 8015284:	f7f8 fb3c 	bl	800d900 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8015288:	3720      	adds	r7, #32
 801528a:	46bd      	mov	sp, r7
 801528c:	bd80      	pop	{r7, pc}
 801528e:	bf00      	nop
 8015290:	0801bc18 	.word	0x0801bc18
 8015294:	0801bd78 	.word	0x0801bd78
 8015298:	0801bc78 	.word	0x0801bc78
 801529c:	0801bd94 	.word	0x0801bd94
 80152a0:	88888889 	.word	0x88888889

080152a4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b08a      	sub	sp, #40	; 0x28
 80152a8:	af02      	add	r7, sp, #8
 80152aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	6a1b      	ldr	r3, [r3, #32]
 80152b0:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80152b2:	2105      	movs	r1, #5
 80152b4:	69b8      	ldr	r0, [r7, #24]
 80152b6:	f000 fa7d 	bl	80157b4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80152ba:	f107 030c 	add.w	r3, r7, #12
 80152be:	2203      	movs	r2, #3
 80152c0:	69b9      	ldr	r1, [r7, #24]
 80152c2:	6878      	ldr	r0, [r7, #4]
 80152c4:	f000 ff00 	bl	80160c8 <dhcp_create_msg>
 80152c8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80152ca:	697b      	ldr	r3, [r7, #20]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d04e      	beq.n	801536e <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80152d0:	697b      	ldr	r3, [r7, #20]
 80152d2:	685b      	ldr	r3, [r3, #4]
 80152d4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80152d6:	89b8      	ldrh	r0, [r7, #12]
 80152d8:	693b      	ldr	r3, [r7, #16]
 80152da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80152de:	2302      	movs	r3, #2
 80152e0:	2239      	movs	r2, #57	; 0x39
 80152e2:	f000 fa81 	bl	80157e8 <dhcp_option>
 80152e6:	4603      	mov	r3, r0
 80152e8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80152ea:	89b8      	ldrh	r0, [r7, #12]
 80152ec:	693b      	ldr	r3, [r7, #16]
 80152ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80152f2:	687b      	ldr	r3, [r7, #4]
 80152f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80152f6:	461a      	mov	r2, r3
 80152f8:	f000 fad0 	bl	801589c <dhcp_option_short>
 80152fc:	4603      	mov	r3, r0
 80152fe:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015300:	89b8      	ldrh	r0, [r7, #12]
 8015302:	693b      	ldr	r3, [r7, #16]
 8015304:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015308:	2303      	movs	r3, #3
 801530a:	2237      	movs	r2, #55	; 0x37
 801530c:	f000 fa6c 	bl	80157e8 <dhcp_option>
 8015310:	4603      	mov	r3, r0
 8015312:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015314:	2300      	movs	r3, #0
 8015316:	77bb      	strb	r3, [r7, #30]
 8015318:	e00e      	b.n	8015338 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801531a:	89b8      	ldrh	r0, [r7, #12]
 801531c:	693b      	ldr	r3, [r7, #16]
 801531e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015322:	7fbb      	ldrb	r3, [r7, #30]
 8015324:	4a2a      	ldr	r2, [pc, #168]	; (80153d0 <dhcp_renew+0x12c>)
 8015326:	5cd3      	ldrb	r3, [r2, r3]
 8015328:	461a      	mov	r2, r3
 801532a:	f000 fa91 	bl	8015850 <dhcp_option_byte>
 801532e:	4603      	mov	r3, r0
 8015330:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015332:	7fbb      	ldrb	r3, [r7, #30]
 8015334:	3301      	adds	r3, #1
 8015336:	77bb      	strb	r3, [r7, #30]
 8015338:	7fbb      	ldrb	r3, [r7, #30]
 801533a:	2b02      	cmp	r3, #2
 801533c:	d9ed      	bls.n	801531a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801533e:	89b8      	ldrh	r0, [r7, #12]
 8015340:	693b      	ldr	r3, [r7, #16]
 8015342:	33f0      	adds	r3, #240	; 0xf0
 8015344:	697a      	ldr	r2, [r7, #20]
 8015346:	4619      	mov	r1, r3
 8015348:	f000 ff94 	bl	8016274 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801534c:	4b21      	ldr	r3, [pc, #132]	; (80153d4 <dhcp_renew+0x130>)
 801534e:	6818      	ldr	r0, [r3, #0]
 8015350:	69bb      	ldr	r3, [r7, #24]
 8015352:	f103 0218 	add.w	r2, r3, #24
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	9300      	str	r3, [sp, #0]
 801535a:	2343      	movs	r3, #67	; 0x43
 801535c:	6979      	ldr	r1, [r7, #20]
 801535e:	f7fe fe8f 	bl	8014080 <udp_sendto_if>
 8015362:	4603      	mov	r3, r0
 8015364:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015366:	6978      	ldr	r0, [r7, #20]
 8015368:	f7f8 ff2c 	bl	800e1c4 <pbuf_free>
 801536c:	e001      	b.n	8015372 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801536e:	23ff      	movs	r3, #255	; 0xff
 8015370:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015372:	69bb      	ldr	r3, [r7, #24]
 8015374:	799b      	ldrb	r3, [r3, #6]
 8015376:	2bff      	cmp	r3, #255	; 0xff
 8015378:	d005      	beq.n	8015386 <dhcp_renew+0xe2>
    dhcp->tries++;
 801537a:	69bb      	ldr	r3, [r7, #24]
 801537c:	799b      	ldrb	r3, [r3, #6]
 801537e:	3301      	adds	r3, #1
 8015380:	b2da      	uxtb	r2, r3
 8015382:	69bb      	ldr	r3, [r7, #24]
 8015384:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8015386:	69bb      	ldr	r3, [r7, #24]
 8015388:	799b      	ldrb	r3, [r3, #6]
 801538a:	2b09      	cmp	r3, #9
 801538c:	d80a      	bhi.n	80153a4 <dhcp_renew+0x100>
 801538e:	69bb      	ldr	r3, [r7, #24]
 8015390:	799b      	ldrb	r3, [r3, #6]
 8015392:	b29b      	uxth	r3, r3
 8015394:	461a      	mov	r2, r3
 8015396:	0152      	lsls	r2, r2, #5
 8015398:	1ad2      	subs	r2, r2, r3
 801539a:	0092      	lsls	r2, r2, #2
 801539c:	4413      	add	r3, r2
 801539e:	011b      	lsls	r3, r3, #4
 80153a0:	b29b      	uxth	r3, r3
 80153a2:	e001      	b.n	80153a8 <dhcp_renew+0x104>
 80153a4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80153a8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80153aa:	89fb      	ldrh	r3, [r7, #14]
 80153ac:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80153b0:	4a09      	ldr	r2, [pc, #36]	; (80153d8 <dhcp_renew+0x134>)
 80153b2:	fb82 1203 	smull	r1, r2, r2, r3
 80153b6:	1152      	asrs	r2, r2, #5
 80153b8:	17db      	asrs	r3, r3, #31
 80153ba:	1ad3      	subs	r3, r2, r3
 80153bc:	b29a      	uxth	r2, r3
 80153be:	69bb      	ldr	r3, [r7, #24]
 80153c0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80153c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80153c6:	4618      	mov	r0, r3
 80153c8:	3720      	adds	r7, #32
 80153ca:	46bd      	mov	sp, r7
 80153cc:	bd80      	pop	{r7, pc}
 80153ce:	bf00      	nop
 80153d0:	2000003c 	.word	0x2000003c
 80153d4:	200004bc 	.word	0x200004bc
 80153d8:	10624dd3 	.word	0x10624dd3

080153dc <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80153dc:	b580      	push	{r7, lr}
 80153de:	b08a      	sub	sp, #40	; 0x28
 80153e0:	af02      	add	r7, sp, #8
 80153e2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	6a1b      	ldr	r3, [r3, #32]
 80153e8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80153ea:	2104      	movs	r1, #4
 80153ec:	69b8      	ldr	r0, [r7, #24]
 80153ee:	f000 f9e1 	bl	80157b4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80153f2:	f107 030c 	add.w	r3, r7, #12
 80153f6:	2203      	movs	r2, #3
 80153f8:	69b9      	ldr	r1, [r7, #24]
 80153fa:	6878      	ldr	r0, [r7, #4]
 80153fc:	f000 fe64 	bl	80160c8 <dhcp_create_msg>
 8015400:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015402:	697b      	ldr	r3, [r7, #20]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d04c      	beq.n	80154a2 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015408:	697b      	ldr	r3, [r7, #20]
 801540a:	685b      	ldr	r3, [r3, #4]
 801540c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801540e:	89b8      	ldrh	r0, [r7, #12]
 8015410:	693b      	ldr	r3, [r7, #16]
 8015412:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015416:	2302      	movs	r3, #2
 8015418:	2239      	movs	r2, #57	; 0x39
 801541a:	f000 f9e5 	bl	80157e8 <dhcp_option>
 801541e:	4603      	mov	r3, r0
 8015420:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015422:	89b8      	ldrh	r0, [r7, #12]
 8015424:	693b      	ldr	r3, [r7, #16]
 8015426:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801542e:	461a      	mov	r2, r3
 8015430:	f000 fa34 	bl	801589c <dhcp_option_short>
 8015434:	4603      	mov	r3, r0
 8015436:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015438:	89b8      	ldrh	r0, [r7, #12]
 801543a:	693b      	ldr	r3, [r7, #16]
 801543c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015440:	2303      	movs	r3, #3
 8015442:	2237      	movs	r2, #55	; 0x37
 8015444:	f000 f9d0 	bl	80157e8 <dhcp_option>
 8015448:	4603      	mov	r3, r0
 801544a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801544c:	2300      	movs	r3, #0
 801544e:	77bb      	strb	r3, [r7, #30]
 8015450:	e00e      	b.n	8015470 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015452:	89b8      	ldrh	r0, [r7, #12]
 8015454:	693b      	ldr	r3, [r7, #16]
 8015456:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801545a:	7fbb      	ldrb	r3, [r7, #30]
 801545c:	4a29      	ldr	r2, [pc, #164]	; (8015504 <dhcp_rebind+0x128>)
 801545e:	5cd3      	ldrb	r3, [r2, r3]
 8015460:	461a      	mov	r2, r3
 8015462:	f000 f9f5 	bl	8015850 <dhcp_option_byte>
 8015466:	4603      	mov	r3, r0
 8015468:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801546a:	7fbb      	ldrb	r3, [r7, #30]
 801546c:	3301      	adds	r3, #1
 801546e:	77bb      	strb	r3, [r7, #30]
 8015470:	7fbb      	ldrb	r3, [r7, #30]
 8015472:	2b02      	cmp	r3, #2
 8015474:	d9ed      	bls.n	8015452 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015476:	89b8      	ldrh	r0, [r7, #12]
 8015478:	693b      	ldr	r3, [r7, #16]
 801547a:	33f0      	adds	r3, #240	; 0xf0
 801547c:	697a      	ldr	r2, [r7, #20]
 801547e:	4619      	mov	r1, r3
 8015480:	f000 fef8 	bl	8016274 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015484:	4b20      	ldr	r3, [pc, #128]	; (8015508 <dhcp_rebind+0x12c>)
 8015486:	6818      	ldr	r0, [r3, #0]
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	9300      	str	r3, [sp, #0]
 801548c:	2343      	movs	r3, #67	; 0x43
 801548e:	4a1f      	ldr	r2, [pc, #124]	; (801550c <dhcp_rebind+0x130>)
 8015490:	6979      	ldr	r1, [r7, #20]
 8015492:	f7fe fdf5 	bl	8014080 <udp_sendto_if>
 8015496:	4603      	mov	r3, r0
 8015498:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801549a:	6978      	ldr	r0, [r7, #20]
 801549c:	f7f8 fe92 	bl	800e1c4 <pbuf_free>
 80154a0:	e001      	b.n	80154a6 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80154a2:	23ff      	movs	r3, #255	; 0xff
 80154a4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80154a6:	69bb      	ldr	r3, [r7, #24]
 80154a8:	799b      	ldrb	r3, [r3, #6]
 80154aa:	2bff      	cmp	r3, #255	; 0xff
 80154ac:	d005      	beq.n	80154ba <dhcp_rebind+0xde>
    dhcp->tries++;
 80154ae:	69bb      	ldr	r3, [r7, #24]
 80154b0:	799b      	ldrb	r3, [r3, #6]
 80154b2:	3301      	adds	r3, #1
 80154b4:	b2da      	uxtb	r2, r3
 80154b6:	69bb      	ldr	r3, [r7, #24]
 80154b8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80154ba:	69bb      	ldr	r3, [r7, #24]
 80154bc:	799b      	ldrb	r3, [r3, #6]
 80154be:	2b09      	cmp	r3, #9
 80154c0:	d80a      	bhi.n	80154d8 <dhcp_rebind+0xfc>
 80154c2:	69bb      	ldr	r3, [r7, #24]
 80154c4:	799b      	ldrb	r3, [r3, #6]
 80154c6:	b29b      	uxth	r3, r3
 80154c8:	461a      	mov	r2, r3
 80154ca:	0152      	lsls	r2, r2, #5
 80154cc:	1ad2      	subs	r2, r2, r3
 80154ce:	0092      	lsls	r2, r2, #2
 80154d0:	4413      	add	r3, r2
 80154d2:	00db      	lsls	r3, r3, #3
 80154d4:	b29b      	uxth	r3, r3
 80154d6:	e001      	b.n	80154dc <dhcp_rebind+0x100>
 80154d8:	f242 7310 	movw	r3, #10000	; 0x2710
 80154dc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80154de:	89fb      	ldrh	r3, [r7, #14]
 80154e0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80154e4:	4a0a      	ldr	r2, [pc, #40]	; (8015510 <dhcp_rebind+0x134>)
 80154e6:	fb82 1203 	smull	r1, r2, r2, r3
 80154ea:	1152      	asrs	r2, r2, #5
 80154ec:	17db      	asrs	r3, r3, #31
 80154ee:	1ad3      	subs	r3, r2, r3
 80154f0:	b29a      	uxth	r2, r3
 80154f2:	69bb      	ldr	r3, [r7, #24]
 80154f4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80154f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80154fa:	4618      	mov	r0, r3
 80154fc:	3720      	adds	r7, #32
 80154fe:	46bd      	mov	sp, r7
 8015500:	bd80      	pop	{r7, pc}
 8015502:	bf00      	nop
 8015504:	2000003c 	.word	0x2000003c
 8015508:	200004bc 	.word	0x200004bc
 801550c:	0802b594 	.word	0x0802b594
 8015510:	10624dd3 	.word	0x10624dd3

08015514 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8015514:	b5b0      	push	{r4, r5, r7, lr}
 8015516:	b08a      	sub	sp, #40	; 0x28
 8015518:	af02      	add	r7, sp, #8
 801551a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	6a1b      	ldr	r3, [r3, #32]
 8015520:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8015522:	2103      	movs	r1, #3
 8015524:	69b8      	ldr	r0, [r7, #24]
 8015526:	f000 f945 	bl	80157b4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801552a:	f107 030c 	add.w	r3, r7, #12
 801552e:	2203      	movs	r2, #3
 8015530:	69b9      	ldr	r1, [r7, #24]
 8015532:	6878      	ldr	r0, [r7, #4]
 8015534:	f000 fdc8 	bl	80160c8 <dhcp_create_msg>
 8015538:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801553a:	697b      	ldr	r3, [r7, #20]
 801553c:	2b00      	cmp	r3, #0
 801553e:	d066      	beq.n	801560e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015540:	697b      	ldr	r3, [r7, #20]
 8015542:	685b      	ldr	r3, [r3, #4]
 8015544:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015546:	89b8      	ldrh	r0, [r7, #12]
 8015548:	693b      	ldr	r3, [r7, #16]
 801554a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801554e:	2302      	movs	r3, #2
 8015550:	2239      	movs	r2, #57	; 0x39
 8015552:	f000 f949 	bl	80157e8 <dhcp_option>
 8015556:	4603      	mov	r3, r0
 8015558:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801555a:	89b8      	ldrh	r0, [r7, #12]
 801555c:	693b      	ldr	r3, [r7, #16]
 801555e:	33f0      	adds	r3, #240	; 0xf0
 8015560:	f44f 7210 	mov.w	r2, #576	; 0x240
 8015564:	4619      	mov	r1, r3
 8015566:	f000 f999 	bl	801589c <dhcp_option_short>
 801556a:	4603      	mov	r3, r0
 801556c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801556e:	89b8      	ldrh	r0, [r7, #12]
 8015570:	693b      	ldr	r3, [r7, #16]
 8015572:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015576:	2304      	movs	r3, #4
 8015578:	2232      	movs	r2, #50	; 0x32
 801557a:	f000 f935 	bl	80157e8 <dhcp_option>
 801557e:	4603      	mov	r3, r0
 8015580:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015582:	89bc      	ldrh	r4, [r7, #12]
 8015584:	693b      	ldr	r3, [r7, #16]
 8015586:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801558a:	69bb      	ldr	r3, [r7, #24]
 801558c:	69db      	ldr	r3, [r3, #28]
 801558e:	4618      	mov	r0, r3
 8015590:	f7f7 fb8c 	bl	800ccac <lwip_htonl>
 8015594:	4603      	mov	r3, r0
 8015596:	461a      	mov	r2, r3
 8015598:	4629      	mov	r1, r5
 801559a:	4620      	mov	r0, r4
 801559c:	f000 f9b0 	bl	8015900 <dhcp_option_long>
 80155a0:	4603      	mov	r3, r0
 80155a2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80155a4:	89b8      	ldrh	r0, [r7, #12]
 80155a6:	693b      	ldr	r3, [r7, #16]
 80155a8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80155ac:	2303      	movs	r3, #3
 80155ae:	2237      	movs	r2, #55	; 0x37
 80155b0:	f000 f91a 	bl	80157e8 <dhcp_option>
 80155b4:	4603      	mov	r3, r0
 80155b6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80155b8:	2300      	movs	r3, #0
 80155ba:	77bb      	strb	r3, [r7, #30]
 80155bc:	e00e      	b.n	80155dc <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80155be:	89b8      	ldrh	r0, [r7, #12]
 80155c0:	693b      	ldr	r3, [r7, #16]
 80155c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80155c6:	7fbb      	ldrb	r3, [r7, #30]
 80155c8:	4a29      	ldr	r2, [pc, #164]	; (8015670 <dhcp_reboot+0x15c>)
 80155ca:	5cd3      	ldrb	r3, [r2, r3]
 80155cc:	461a      	mov	r2, r3
 80155ce:	f000 f93f 	bl	8015850 <dhcp_option_byte>
 80155d2:	4603      	mov	r3, r0
 80155d4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80155d6:	7fbb      	ldrb	r3, [r7, #30]
 80155d8:	3301      	adds	r3, #1
 80155da:	77bb      	strb	r3, [r7, #30]
 80155dc:	7fbb      	ldrb	r3, [r7, #30]
 80155de:	2b02      	cmp	r3, #2
 80155e0:	d9ed      	bls.n	80155be <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80155e2:	89b8      	ldrh	r0, [r7, #12]
 80155e4:	693b      	ldr	r3, [r7, #16]
 80155e6:	33f0      	adds	r3, #240	; 0xf0
 80155e8:	697a      	ldr	r2, [r7, #20]
 80155ea:	4619      	mov	r1, r3
 80155ec:	f000 fe42 	bl	8016274 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80155f0:	4b20      	ldr	r3, [pc, #128]	; (8015674 <dhcp_reboot+0x160>)
 80155f2:	6818      	ldr	r0, [r3, #0]
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	9300      	str	r3, [sp, #0]
 80155f8:	2343      	movs	r3, #67	; 0x43
 80155fa:	4a1f      	ldr	r2, [pc, #124]	; (8015678 <dhcp_reboot+0x164>)
 80155fc:	6979      	ldr	r1, [r7, #20]
 80155fe:	f7fe fd3f 	bl	8014080 <udp_sendto_if>
 8015602:	4603      	mov	r3, r0
 8015604:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015606:	6978      	ldr	r0, [r7, #20]
 8015608:	f7f8 fddc 	bl	800e1c4 <pbuf_free>
 801560c:	e001      	b.n	8015612 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801560e:	23ff      	movs	r3, #255	; 0xff
 8015610:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015612:	69bb      	ldr	r3, [r7, #24]
 8015614:	799b      	ldrb	r3, [r3, #6]
 8015616:	2bff      	cmp	r3, #255	; 0xff
 8015618:	d005      	beq.n	8015626 <dhcp_reboot+0x112>
    dhcp->tries++;
 801561a:	69bb      	ldr	r3, [r7, #24]
 801561c:	799b      	ldrb	r3, [r3, #6]
 801561e:	3301      	adds	r3, #1
 8015620:	b2da      	uxtb	r2, r3
 8015622:	69bb      	ldr	r3, [r7, #24]
 8015624:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015626:	69bb      	ldr	r3, [r7, #24]
 8015628:	799b      	ldrb	r3, [r3, #6]
 801562a:	2b09      	cmp	r3, #9
 801562c:	d80a      	bhi.n	8015644 <dhcp_reboot+0x130>
 801562e:	69bb      	ldr	r3, [r7, #24]
 8015630:	799b      	ldrb	r3, [r3, #6]
 8015632:	b29b      	uxth	r3, r3
 8015634:	461a      	mov	r2, r3
 8015636:	0152      	lsls	r2, r2, #5
 8015638:	1ad2      	subs	r2, r2, r3
 801563a:	0092      	lsls	r2, r2, #2
 801563c:	4413      	add	r3, r2
 801563e:	00db      	lsls	r3, r3, #3
 8015640:	b29b      	uxth	r3, r3
 8015642:	e001      	b.n	8015648 <dhcp_reboot+0x134>
 8015644:	f242 7310 	movw	r3, #10000	; 0x2710
 8015648:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801564a:	89fb      	ldrh	r3, [r7, #14]
 801564c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015650:	4a0a      	ldr	r2, [pc, #40]	; (801567c <dhcp_reboot+0x168>)
 8015652:	fb82 1203 	smull	r1, r2, r2, r3
 8015656:	1152      	asrs	r2, r2, #5
 8015658:	17db      	asrs	r3, r3, #31
 801565a:	1ad3      	subs	r3, r2, r3
 801565c:	b29a      	uxth	r2, r3
 801565e:	69bb      	ldr	r3, [r7, #24]
 8015660:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015662:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015666:	4618      	mov	r0, r3
 8015668:	3720      	adds	r7, #32
 801566a:	46bd      	mov	sp, r7
 801566c:	bdb0      	pop	{r4, r5, r7, pc}
 801566e:	bf00      	nop
 8015670:	2000003c 	.word	0x2000003c
 8015674:	200004bc 	.word	0x200004bc
 8015678:	0802b594 	.word	0x0802b594
 801567c:	10624dd3 	.word	0x10624dd3

08015680 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8015680:	b5b0      	push	{r4, r5, r7, lr}
 8015682:	b08a      	sub	sp, #40	; 0x28
 8015684:	af02      	add	r7, sp, #8
 8015686:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	6a1b      	ldr	r3, [r3, #32]
 801568c:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801568e:	69fb      	ldr	r3, [r7, #28]
 8015690:	2b00      	cmp	r3, #0
 8015692:	f000 8084 	beq.w	801579e <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8015696:	69fb      	ldr	r3, [r7, #28]
 8015698:	795b      	ldrb	r3, [r3, #5]
 801569a:	2b00      	cmp	r3, #0
 801569c:	f000 8081 	beq.w	80157a2 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80156a0:	69fb      	ldr	r3, [r7, #28]
 80156a2:	699b      	ldr	r3, [r3, #24]
 80156a4:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80156a6:	69fb      	ldr	r3, [r7, #28]
 80156a8:	2200      	movs	r2, #0
 80156aa:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80156ac:	69fb      	ldr	r3, [r7, #28]
 80156ae:	2200      	movs	r2, #0
 80156b0:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80156b2:	69fb      	ldr	r3, [r7, #28]
 80156b4:	2200      	movs	r2, #0
 80156b6:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80156b8:	69fb      	ldr	r3, [r7, #28]
 80156ba:	2200      	movs	r2, #0
 80156bc:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80156be:	69fb      	ldr	r3, [r7, #28]
 80156c0:	2200      	movs	r2, #0
 80156c2:	631a      	str	r2, [r3, #48]	; 0x30
 80156c4:	69fb      	ldr	r3, [r7, #28]
 80156c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80156c8:	69fb      	ldr	r3, [r7, #28]
 80156ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80156cc:	69fb      	ldr	r3, [r7, #28]
 80156ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80156d0:	69fb      	ldr	r3, [r7, #28]
 80156d2:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80156d4:	69fb      	ldr	r3, [r7, #28]
 80156d6:	2200      	movs	r2, #0
 80156d8:	829a      	strh	r2, [r3, #20]
 80156da:	69fb      	ldr	r3, [r7, #28]
 80156dc:	8a9a      	ldrh	r2, [r3, #20]
 80156de:	69fb      	ldr	r3, [r7, #28]
 80156e0:	825a      	strh	r2, [r3, #18]
 80156e2:	69fb      	ldr	r3, [r7, #28]
 80156e4:	8a5a      	ldrh	r2, [r3, #18]
 80156e6:	69fb      	ldr	r3, [r7, #28]
 80156e8:	821a      	strh	r2, [r3, #16]
 80156ea:	69fb      	ldr	r3, [r7, #28]
 80156ec:	8a1a      	ldrh	r2, [r3, #16]
 80156ee:	69fb      	ldr	r3, [r7, #28]
 80156f0:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80156f2:	6878      	ldr	r0, [r7, #4]
 80156f4:	f000 fdec 	bl	80162d0 <dhcp_supplied_address>
 80156f8:	4603      	mov	r3, r0
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d03b      	beq.n	8015776 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80156fe:	f107 030e 	add.w	r3, r7, #14
 8015702:	2207      	movs	r2, #7
 8015704:	69f9      	ldr	r1, [r7, #28]
 8015706:	6878      	ldr	r0, [r7, #4]
 8015708:	f000 fcde 	bl	80160c8 <dhcp_create_msg>
 801570c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801570e:	69bb      	ldr	r3, [r7, #24]
 8015710:	2b00      	cmp	r3, #0
 8015712:	d030      	beq.n	8015776 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015714:	69bb      	ldr	r3, [r7, #24]
 8015716:	685b      	ldr	r3, [r3, #4]
 8015718:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801571a:	89f8      	ldrh	r0, [r7, #14]
 801571c:	697b      	ldr	r3, [r7, #20]
 801571e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015722:	2304      	movs	r3, #4
 8015724:	2236      	movs	r2, #54	; 0x36
 8015726:	f000 f85f 	bl	80157e8 <dhcp_option>
 801572a:	4603      	mov	r3, r0
 801572c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801572e:	89fc      	ldrh	r4, [r7, #14]
 8015730:	697b      	ldr	r3, [r7, #20]
 8015732:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015736:	693b      	ldr	r3, [r7, #16]
 8015738:	4618      	mov	r0, r3
 801573a:	f7f7 fab7 	bl	800ccac <lwip_htonl>
 801573e:	4603      	mov	r3, r0
 8015740:	461a      	mov	r2, r3
 8015742:	4629      	mov	r1, r5
 8015744:	4620      	mov	r0, r4
 8015746:	f000 f8db 	bl	8015900 <dhcp_option_long>
 801574a:	4603      	mov	r3, r0
 801574c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801574e:	89f8      	ldrh	r0, [r7, #14]
 8015750:	697b      	ldr	r3, [r7, #20]
 8015752:	33f0      	adds	r3, #240	; 0xf0
 8015754:	69ba      	ldr	r2, [r7, #24]
 8015756:	4619      	mov	r1, r3
 8015758:	f000 fd8c 	bl	8016274 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801575c:	4b13      	ldr	r3, [pc, #76]	; (80157ac <dhcp_release_and_stop+0x12c>)
 801575e:	6818      	ldr	r0, [r3, #0]
 8015760:	f107 0210 	add.w	r2, r7, #16
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	9300      	str	r3, [sp, #0]
 8015768:	2343      	movs	r3, #67	; 0x43
 801576a:	69b9      	ldr	r1, [r7, #24]
 801576c:	f7fe fc88 	bl	8014080 <udp_sendto_if>
      pbuf_free(p_out);
 8015770:	69b8      	ldr	r0, [r7, #24]
 8015772:	f7f8 fd27 	bl	800e1c4 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015776:	4b0e      	ldr	r3, [pc, #56]	; (80157b0 <dhcp_release_and_stop+0x130>)
 8015778:	4a0d      	ldr	r2, [pc, #52]	; (80157b0 <dhcp_release_and_stop+0x130>)
 801577a:	490d      	ldr	r1, [pc, #52]	; (80157b0 <dhcp_release_and_stop+0x130>)
 801577c:	6878      	ldr	r0, [r7, #4]
 801577e:	f7f8 f8bf 	bl	800d900 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8015782:	2100      	movs	r1, #0
 8015784:	69f8      	ldr	r0, [r7, #28]
 8015786:	f000 f815 	bl	80157b4 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801578a:	69fb      	ldr	r3, [r7, #28]
 801578c:	791b      	ldrb	r3, [r3, #4]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d008      	beq.n	80157a4 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015792:	f7fe ffc1 	bl	8014718 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8015796:	69fb      	ldr	r3, [r7, #28]
 8015798:	2200      	movs	r2, #0
 801579a:	711a      	strb	r2, [r3, #4]
 801579c:	e002      	b.n	80157a4 <dhcp_release_and_stop+0x124>
    return;
 801579e:	bf00      	nop
 80157a0:	e000      	b.n	80157a4 <dhcp_release_and_stop+0x124>
    return;
 80157a2:	bf00      	nop
  }
}
 80157a4:	3720      	adds	r7, #32
 80157a6:	46bd      	mov	sp, r7
 80157a8:	bdb0      	pop	{r4, r5, r7, pc}
 80157aa:	bf00      	nop
 80157ac:	200004bc 	.word	0x200004bc
 80157b0:	0802b590 	.word	0x0802b590

080157b4 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80157b4:	b480      	push	{r7}
 80157b6:	b083      	sub	sp, #12
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	6078      	str	r0, [r7, #4]
 80157bc:	460b      	mov	r3, r1
 80157be:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	795b      	ldrb	r3, [r3, #5]
 80157c4:	78fa      	ldrb	r2, [r7, #3]
 80157c6:	429a      	cmp	r2, r3
 80157c8:	d008      	beq.n	80157dc <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	78fa      	ldrb	r2, [r7, #3]
 80157ce:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	2200      	movs	r2, #0
 80157d4:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	2200      	movs	r2, #0
 80157da:	811a      	strh	r2, [r3, #8]
  }
}
 80157dc:	bf00      	nop
 80157de:	370c      	adds	r7, #12
 80157e0:	46bd      	mov	sp, r7
 80157e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e6:	4770      	bx	lr

080157e8 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80157e8:	b580      	push	{r7, lr}
 80157ea:	b082      	sub	sp, #8
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	6039      	str	r1, [r7, #0]
 80157f0:	4611      	mov	r1, r2
 80157f2:	461a      	mov	r2, r3
 80157f4:	4603      	mov	r3, r0
 80157f6:	80fb      	strh	r3, [r7, #6]
 80157f8:	460b      	mov	r3, r1
 80157fa:	717b      	strb	r3, [r7, #5]
 80157fc:	4613      	mov	r3, r2
 80157fe:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8015800:	88fa      	ldrh	r2, [r7, #6]
 8015802:	793b      	ldrb	r3, [r7, #4]
 8015804:	4413      	add	r3, r2
 8015806:	3302      	adds	r3, #2
 8015808:	2b44      	cmp	r3, #68	; 0x44
 801580a:	d906      	bls.n	801581a <dhcp_option+0x32>
 801580c:	4b0d      	ldr	r3, [pc, #52]	; (8015844 <dhcp_option+0x5c>)
 801580e:	f240 529a 	movw	r2, #1434	; 0x59a
 8015812:	490d      	ldr	r1, [pc, #52]	; (8015848 <dhcp_option+0x60>)
 8015814:	480d      	ldr	r0, [pc, #52]	; (801584c <dhcp_option+0x64>)
 8015816:	f003 f95b 	bl	8018ad0 <iprintf>
  options[options_out_len++] = option_type;
 801581a:	88fb      	ldrh	r3, [r7, #6]
 801581c:	1c5a      	adds	r2, r3, #1
 801581e:	80fa      	strh	r2, [r7, #6]
 8015820:	461a      	mov	r2, r3
 8015822:	683b      	ldr	r3, [r7, #0]
 8015824:	4413      	add	r3, r2
 8015826:	797a      	ldrb	r2, [r7, #5]
 8015828:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801582a:	88fb      	ldrh	r3, [r7, #6]
 801582c:	1c5a      	adds	r2, r3, #1
 801582e:	80fa      	strh	r2, [r7, #6]
 8015830:	461a      	mov	r2, r3
 8015832:	683b      	ldr	r3, [r7, #0]
 8015834:	4413      	add	r3, r2
 8015836:	793a      	ldrb	r2, [r7, #4]
 8015838:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801583a:	88fb      	ldrh	r3, [r7, #6]
}
 801583c:	4618      	mov	r0, r3
 801583e:	3708      	adds	r7, #8
 8015840:	46bd      	mov	sp, r7
 8015842:	bd80      	pop	{r7, pc}
 8015844:	0801bc18 	.word	0x0801bc18
 8015848:	0801bdac 	.word	0x0801bdac
 801584c:	0801bc78 	.word	0x0801bc78

08015850 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8015850:	b580      	push	{r7, lr}
 8015852:	b082      	sub	sp, #8
 8015854:	af00      	add	r7, sp, #0
 8015856:	4603      	mov	r3, r0
 8015858:	6039      	str	r1, [r7, #0]
 801585a:	80fb      	strh	r3, [r7, #6]
 801585c:	4613      	mov	r3, r2
 801585e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8015860:	88fb      	ldrh	r3, [r7, #6]
 8015862:	2b43      	cmp	r3, #67	; 0x43
 8015864:	d906      	bls.n	8015874 <dhcp_option_byte+0x24>
 8015866:	4b0a      	ldr	r3, [pc, #40]	; (8015890 <dhcp_option_byte+0x40>)
 8015868:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801586c:	4909      	ldr	r1, [pc, #36]	; (8015894 <dhcp_option_byte+0x44>)
 801586e:	480a      	ldr	r0, [pc, #40]	; (8015898 <dhcp_option_byte+0x48>)
 8015870:	f003 f92e 	bl	8018ad0 <iprintf>
  options[options_out_len++] = value;
 8015874:	88fb      	ldrh	r3, [r7, #6]
 8015876:	1c5a      	adds	r2, r3, #1
 8015878:	80fa      	strh	r2, [r7, #6]
 801587a:	461a      	mov	r2, r3
 801587c:	683b      	ldr	r3, [r7, #0]
 801587e:	4413      	add	r3, r2
 8015880:	797a      	ldrb	r2, [r7, #5]
 8015882:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015884:	88fb      	ldrh	r3, [r7, #6]
}
 8015886:	4618      	mov	r0, r3
 8015888:	3708      	adds	r7, #8
 801588a:	46bd      	mov	sp, r7
 801588c:	bd80      	pop	{r7, pc}
 801588e:	bf00      	nop
 8015890:	0801bc18 	.word	0x0801bc18
 8015894:	0801bdf0 	.word	0x0801bdf0
 8015898:	0801bc78 	.word	0x0801bc78

0801589c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801589c:	b580      	push	{r7, lr}
 801589e:	b082      	sub	sp, #8
 80158a0:	af00      	add	r7, sp, #0
 80158a2:	4603      	mov	r3, r0
 80158a4:	6039      	str	r1, [r7, #0]
 80158a6:	80fb      	strh	r3, [r7, #6]
 80158a8:	4613      	mov	r3, r2
 80158aa:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80158ac:	88fb      	ldrh	r3, [r7, #6]
 80158ae:	3302      	adds	r3, #2
 80158b0:	2b44      	cmp	r3, #68	; 0x44
 80158b2:	d906      	bls.n	80158c2 <dhcp_option_short+0x26>
 80158b4:	4b0f      	ldr	r3, [pc, #60]	; (80158f4 <dhcp_option_short+0x58>)
 80158b6:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80158ba:	490f      	ldr	r1, [pc, #60]	; (80158f8 <dhcp_option_short+0x5c>)
 80158bc:	480f      	ldr	r0, [pc, #60]	; (80158fc <dhcp_option_short+0x60>)
 80158be:	f003 f907 	bl	8018ad0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80158c2:	88bb      	ldrh	r3, [r7, #4]
 80158c4:	0a1b      	lsrs	r3, r3, #8
 80158c6:	b29a      	uxth	r2, r3
 80158c8:	88fb      	ldrh	r3, [r7, #6]
 80158ca:	1c59      	adds	r1, r3, #1
 80158cc:	80f9      	strh	r1, [r7, #6]
 80158ce:	4619      	mov	r1, r3
 80158d0:	683b      	ldr	r3, [r7, #0]
 80158d2:	440b      	add	r3, r1
 80158d4:	b2d2      	uxtb	r2, r2
 80158d6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80158d8:	88fb      	ldrh	r3, [r7, #6]
 80158da:	1c5a      	adds	r2, r3, #1
 80158dc:	80fa      	strh	r2, [r7, #6]
 80158de:	461a      	mov	r2, r3
 80158e0:	683b      	ldr	r3, [r7, #0]
 80158e2:	4413      	add	r3, r2
 80158e4:	88ba      	ldrh	r2, [r7, #4]
 80158e6:	b2d2      	uxtb	r2, r2
 80158e8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80158ea:	88fb      	ldrh	r3, [r7, #6]
}
 80158ec:	4618      	mov	r0, r3
 80158ee:	3708      	adds	r7, #8
 80158f0:	46bd      	mov	sp, r7
 80158f2:	bd80      	pop	{r7, pc}
 80158f4:	0801bc18 	.word	0x0801bc18
 80158f8:	0801be28 	.word	0x0801be28
 80158fc:	0801bc78 	.word	0x0801bc78

08015900 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8015900:	b580      	push	{r7, lr}
 8015902:	b084      	sub	sp, #16
 8015904:	af00      	add	r7, sp, #0
 8015906:	4603      	mov	r3, r0
 8015908:	60b9      	str	r1, [r7, #8]
 801590a:	607a      	str	r2, [r7, #4]
 801590c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801590e:	89fb      	ldrh	r3, [r7, #14]
 8015910:	3304      	adds	r3, #4
 8015912:	2b44      	cmp	r3, #68	; 0x44
 8015914:	d906      	bls.n	8015924 <dhcp_option_long+0x24>
 8015916:	4b19      	ldr	r3, [pc, #100]	; (801597c <dhcp_option_long+0x7c>)
 8015918:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801591c:	4918      	ldr	r1, [pc, #96]	; (8015980 <dhcp_option_long+0x80>)
 801591e:	4819      	ldr	r0, [pc, #100]	; (8015984 <dhcp_option_long+0x84>)
 8015920:	f003 f8d6 	bl	8018ad0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	0e1a      	lsrs	r2, r3, #24
 8015928:	89fb      	ldrh	r3, [r7, #14]
 801592a:	1c59      	adds	r1, r3, #1
 801592c:	81f9      	strh	r1, [r7, #14]
 801592e:	4619      	mov	r1, r3
 8015930:	68bb      	ldr	r3, [r7, #8]
 8015932:	440b      	add	r3, r1
 8015934:	b2d2      	uxtb	r2, r2
 8015936:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	0c1a      	lsrs	r2, r3, #16
 801593c:	89fb      	ldrh	r3, [r7, #14]
 801593e:	1c59      	adds	r1, r3, #1
 8015940:	81f9      	strh	r1, [r7, #14]
 8015942:	4619      	mov	r1, r3
 8015944:	68bb      	ldr	r3, [r7, #8]
 8015946:	440b      	add	r3, r1
 8015948:	b2d2      	uxtb	r2, r2
 801594a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	0a1a      	lsrs	r2, r3, #8
 8015950:	89fb      	ldrh	r3, [r7, #14]
 8015952:	1c59      	adds	r1, r3, #1
 8015954:	81f9      	strh	r1, [r7, #14]
 8015956:	4619      	mov	r1, r3
 8015958:	68bb      	ldr	r3, [r7, #8]
 801595a:	440b      	add	r3, r1
 801595c:	b2d2      	uxtb	r2, r2
 801595e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8015960:	89fb      	ldrh	r3, [r7, #14]
 8015962:	1c5a      	adds	r2, r3, #1
 8015964:	81fa      	strh	r2, [r7, #14]
 8015966:	461a      	mov	r2, r3
 8015968:	68bb      	ldr	r3, [r7, #8]
 801596a:	4413      	add	r3, r2
 801596c:	687a      	ldr	r2, [r7, #4]
 801596e:	b2d2      	uxtb	r2, r2
 8015970:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015972:	89fb      	ldrh	r3, [r7, #14]
}
 8015974:	4618      	mov	r0, r3
 8015976:	3710      	adds	r7, #16
 8015978:	46bd      	mov	sp, r7
 801597a:	bd80      	pop	{r7, pc}
 801597c:	0801bc18 	.word	0x0801bc18
 8015980:	0801be64 	.word	0x0801be64
 8015984:	0801bc78 	.word	0x0801bc78

08015988 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8015988:	b580      	push	{r7, lr}
 801598a:	b090      	sub	sp, #64	; 0x40
 801598c:	af00      	add	r7, sp, #0
 801598e:	6078      	str	r0, [r7, #4]
 8015990:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8015992:	2300      	movs	r3, #0
 8015994:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8015996:	2300      	movs	r3, #0
 8015998:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801599a:	2208      	movs	r2, #8
 801599c:	2100      	movs	r1, #0
 801599e:	48be      	ldr	r0, [pc, #760]	; (8015c98 <dhcp_parse_reply+0x310>)
 80159a0:	f002 ffe6 	bl	8018970 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	895b      	ldrh	r3, [r3, #10]
 80159a8:	2b2b      	cmp	r3, #43	; 0x2b
 80159aa:	d802      	bhi.n	80159b2 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80159ac:	f06f 0301 	mvn.w	r3, #1
 80159b0:	e2a8      	b.n	8015f04 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	685b      	ldr	r3, [r3, #4]
 80159b6:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80159b8:	23f0      	movs	r3, #240	; 0xf0
 80159ba:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	891b      	ldrh	r3, [r3, #8]
 80159c0:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80159c6:	e00c      	b.n	80159e2 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80159c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159ca:	895b      	ldrh	r3, [r3, #10]
 80159cc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80159ce:	1ad3      	subs	r3, r2, r3
 80159d0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80159d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159d4:	895b      	ldrh	r3, [r3, #10]
 80159d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80159d8:	1ad3      	subs	r3, r2, r3
 80159da:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 80159dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80159e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d004      	beq.n	80159f2 <dhcp_parse_reply+0x6a>
 80159e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159ea:	895b      	ldrh	r3, [r3, #10]
 80159ec:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80159ee:	429a      	cmp	r2, r3
 80159f0:	d2ea      	bcs.n	80159c8 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80159f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d102      	bne.n	80159fe <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80159f8:	f06f 0301 	mvn.w	r3, #1
 80159fc:	e282      	b.n	8015f04 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 80159fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015a00:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8015a02:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015a04:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8015a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a08:	685b      	ldr	r3, [r3, #4]
 8015a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015a0c:	e23a      	b.n	8015e84 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8015a0e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015a10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015a12:	4413      	add	r3, r2
 8015a14:	781b      	ldrb	r3, [r3, #0]
 8015a16:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8015a18:	2300      	movs	r3, #0
 8015a1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8015a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8015a22:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8015a24:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015a26:	3302      	adds	r3, #2
 8015a28:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8015a2a:	8bfa      	ldrh	r2, [r7, #30]
 8015a2c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015a2e:	429a      	cmp	r2, r3
 8015a30:	d202      	bcs.n	8015a38 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8015a32:	f06f 0301 	mvn.w	r3, #1
 8015a36:	e265      	b.n	8015f04 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8015a38:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015a3a:	3301      	adds	r3, #1
 8015a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015a3e:	8952      	ldrh	r2, [r2, #10]
 8015a40:	4293      	cmp	r3, r2
 8015a42:	da07      	bge.n	8015a54 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8015a44:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015a46:	3301      	adds	r3, #1
 8015a48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015a4a:	4413      	add	r3, r2
 8015a4c:	781b      	ldrb	r3, [r3, #0]
 8015a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015a52:	e00b      	b.n	8015a6c <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8015a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d004      	beq.n	8015a66 <dhcp_parse_reply+0xde>
 8015a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	685b      	ldr	r3, [r3, #4]
 8015a62:	781b      	ldrb	r3, [r3, #0]
 8015a64:	e000      	b.n	8015a68 <dhcp_parse_reply+0xe0>
 8015a66:	2300      	movs	r3, #0
 8015a68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8015a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015a70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8015a74:	7dfb      	ldrb	r3, [r7, #23]
 8015a76:	2b3b      	cmp	r3, #59	; 0x3b
 8015a78:	f200 812d 	bhi.w	8015cd6 <dhcp_parse_reply+0x34e>
 8015a7c:	a201      	add	r2, pc, #4	; (adr r2, 8015a84 <dhcp_parse_reply+0xfc>)
 8015a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a82:	bf00      	nop
 8015a84:	08015b75 	.word	0x08015b75
 8015a88:	08015b85 	.word	0x08015b85
 8015a8c:	08015cd7 	.word	0x08015cd7
 8015a90:	08015ba7 	.word	0x08015ba7
 8015a94:	08015cd7 	.word	0x08015cd7
 8015a98:	08015cd7 	.word	0x08015cd7
 8015a9c:	08015cd7 	.word	0x08015cd7
 8015aa0:	08015cd7 	.word	0x08015cd7
 8015aa4:	08015cd7 	.word	0x08015cd7
 8015aa8:	08015cd7 	.word	0x08015cd7
 8015aac:	08015cd7 	.word	0x08015cd7
 8015ab0:	08015cd7 	.word	0x08015cd7
 8015ab4:	08015cd7 	.word	0x08015cd7
 8015ab8:	08015cd7 	.word	0x08015cd7
 8015abc:	08015cd7 	.word	0x08015cd7
 8015ac0:	08015cd7 	.word	0x08015cd7
 8015ac4:	08015cd7 	.word	0x08015cd7
 8015ac8:	08015cd7 	.word	0x08015cd7
 8015acc:	08015cd7 	.word	0x08015cd7
 8015ad0:	08015cd7 	.word	0x08015cd7
 8015ad4:	08015cd7 	.word	0x08015cd7
 8015ad8:	08015cd7 	.word	0x08015cd7
 8015adc:	08015cd7 	.word	0x08015cd7
 8015ae0:	08015cd7 	.word	0x08015cd7
 8015ae4:	08015cd7 	.word	0x08015cd7
 8015ae8:	08015cd7 	.word	0x08015cd7
 8015aec:	08015cd7 	.word	0x08015cd7
 8015af0:	08015cd7 	.word	0x08015cd7
 8015af4:	08015cd7 	.word	0x08015cd7
 8015af8:	08015cd7 	.word	0x08015cd7
 8015afc:	08015cd7 	.word	0x08015cd7
 8015b00:	08015cd7 	.word	0x08015cd7
 8015b04:	08015cd7 	.word	0x08015cd7
 8015b08:	08015cd7 	.word	0x08015cd7
 8015b0c:	08015cd7 	.word	0x08015cd7
 8015b10:	08015cd7 	.word	0x08015cd7
 8015b14:	08015cd7 	.word	0x08015cd7
 8015b18:	08015cd7 	.word	0x08015cd7
 8015b1c:	08015cd7 	.word	0x08015cd7
 8015b20:	08015cd7 	.word	0x08015cd7
 8015b24:	08015cd7 	.word	0x08015cd7
 8015b28:	08015cd7 	.word	0x08015cd7
 8015b2c:	08015cd7 	.word	0x08015cd7
 8015b30:	08015cd7 	.word	0x08015cd7
 8015b34:	08015cd7 	.word	0x08015cd7
 8015b38:	08015cd7 	.word	0x08015cd7
 8015b3c:	08015cd7 	.word	0x08015cd7
 8015b40:	08015cd7 	.word	0x08015cd7
 8015b44:	08015cd7 	.word	0x08015cd7
 8015b48:	08015cd7 	.word	0x08015cd7
 8015b4c:	08015cd7 	.word	0x08015cd7
 8015b50:	08015bd3 	.word	0x08015bd3
 8015b54:	08015bf5 	.word	0x08015bf5
 8015b58:	08015c31 	.word	0x08015c31
 8015b5c:	08015c53 	.word	0x08015c53
 8015b60:	08015cd7 	.word	0x08015cd7
 8015b64:	08015cd7 	.word	0x08015cd7
 8015b68:	08015cd7 	.word	0x08015cd7
 8015b6c:	08015c75 	.word	0x08015c75
 8015b70:	08015cb5 	.word	0x08015cb5
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8015b74:	2300      	movs	r3, #0
 8015b76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015b7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8015b82:	e0ac      	b.n	8015cde <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015b84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015b88:	2b04      	cmp	r3, #4
 8015b8a:	d009      	beq.n	8015ba0 <dhcp_parse_reply+0x218>
 8015b8c:	4b43      	ldr	r3, [pc, #268]	; (8015c9c <dhcp_parse_reply+0x314>)
 8015b8e:	f240 622e 	movw	r2, #1582	; 0x62e
 8015b92:	4943      	ldr	r1, [pc, #268]	; (8015ca0 <dhcp_parse_reply+0x318>)
 8015b94:	4843      	ldr	r0, [pc, #268]	; (8015ca4 <dhcp_parse_reply+0x31c>)
 8015b96:	f002 ff9b 	bl	8018ad0 <iprintf>
 8015b9a:	f06f 0305 	mvn.w	r3, #5
 8015b9e:	e1b1      	b.n	8015f04 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8015ba0:	2306      	movs	r3, #6
 8015ba2:	623b      	str	r3, [r7, #32]
        break;
 8015ba4:	e09b      	b.n	8015cde <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8015ba6:	2304      	movs	r3, #4
 8015ba8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8015bac:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015bb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015bb4:	429a      	cmp	r2, r3
 8015bb6:	d209      	bcs.n	8015bcc <dhcp_parse_reply+0x244>
 8015bb8:	4b38      	ldr	r3, [pc, #224]	; (8015c9c <dhcp_parse_reply+0x314>)
 8015bba:	f240 6233 	movw	r2, #1587	; 0x633
 8015bbe:	493a      	ldr	r1, [pc, #232]	; (8015ca8 <dhcp_parse_reply+0x320>)
 8015bc0:	4838      	ldr	r0, [pc, #224]	; (8015ca4 <dhcp_parse_reply+0x31c>)
 8015bc2:	f002 ff85 	bl	8018ad0 <iprintf>
 8015bc6:	f06f 0305 	mvn.w	r3, #5
 8015bca:	e19b      	b.n	8015f04 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8015bcc:	2307      	movs	r3, #7
 8015bce:	623b      	str	r3, [r7, #32]
        break;
 8015bd0:	e085      	b.n	8015cde <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015bd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015bd6:	2b04      	cmp	r3, #4
 8015bd8:	d009      	beq.n	8015bee <dhcp_parse_reply+0x266>
 8015bda:	4b30      	ldr	r3, [pc, #192]	; (8015c9c <dhcp_parse_reply+0x314>)
 8015bdc:	f240 6241 	movw	r2, #1601	; 0x641
 8015be0:	492f      	ldr	r1, [pc, #188]	; (8015ca0 <dhcp_parse_reply+0x318>)
 8015be2:	4830      	ldr	r0, [pc, #192]	; (8015ca4 <dhcp_parse_reply+0x31c>)
 8015be4:	f002 ff74 	bl	8018ad0 <iprintf>
 8015be8:	f06f 0305 	mvn.w	r3, #5
 8015bec:	e18a      	b.n	8015f04 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8015bee:	2303      	movs	r3, #3
 8015bf0:	623b      	str	r3, [r7, #32]
        break;
 8015bf2:	e074      	b.n	8015cde <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015bf8:	2b01      	cmp	r3, #1
 8015bfa:	d009      	beq.n	8015c10 <dhcp_parse_reply+0x288>
 8015bfc:	4b27      	ldr	r3, [pc, #156]	; (8015c9c <dhcp_parse_reply+0x314>)
 8015bfe:	f240 624f 	movw	r2, #1615	; 0x64f
 8015c02:	492a      	ldr	r1, [pc, #168]	; (8015cac <dhcp_parse_reply+0x324>)
 8015c04:	4827      	ldr	r0, [pc, #156]	; (8015ca4 <dhcp_parse_reply+0x31c>)
 8015c06:	f002 ff63 	bl	8018ad0 <iprintf>
 8015c0a:	f06f 0305 	mvn.w	r3, #5
 8015c0e:	e179      	b.n	8015f04 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8015c10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015c12:	2bf0      	cmp	r3, #240	; 0xf0
 8015c14:	d009      	beq.n	8015c2a <dhcp_parse_reply+0x2a2>
 8015c16:	4b21      	ldr	r3, [pc, #132]	; (8015c9c <dhcp_parse_reply+0x314>)
 8015c18:	f240 6251 	movw	r2, #1617	; 0x651
 8015c1c:	4924      	ldr	r1, [pc, #144]	; (8015cb0 <dhcp_parse_reply+0x328>)
 8015c1e:	4821      	ldr	r0, [pc, #132]	; (8015ca4 <dhcp_parse_reply+0x31c>)
 8015c20:	f002 ff56 	bl	8018ad0 <iprintf>
 8015c24:	f06f 0305 	mvn.w	r3, #5
 8015c28:	e16c      	b.n	8015f04 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	623b      	str	r3, [r7, #32]
        break;
 8015c2e:	e056      	b.n	8015cde <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015c30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c34:	2b01      	cmp	r3, #1
 8015c36:	d009      	beq.n	8015c4c <dhcp_parse_reply+0x2c4>
 8015c38:	4b18      	ldr	r3, [pc, #96]	; (8015c9c <dhcp_parse_reply+0x314>)
 8015c3a:	f240 6255 	movw	r2, #1621	; 0x655
 8015c3e:	491b      	ldr	r1, [pc, #108]	; (8015cac <dhcp_parse_reply+0x324>)
 8015c40:	4818      	ldr	r0, [pc, #96]	; (8015ca4 <dhcp_parse_reply+0x31c>)
 8015c42:	f002 ff45 	bl	8018ad0 <iprintf>
 8015c46:	f06f 0305 	mvn.w	r3, #5
 8015c4a:	e15b      	b.n	8015f04 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8015c4c:	2301      	movs	r3, #1
 8015c4e:	623b      	str	r3, [r7, #32]
        break;
 8015c50:	e045      	b.n	8015cde <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015c52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c56:	2b04      	cmp	r3, #4
 8015c58:	d009      	beq.n	8015c6e <dhcp_parse_reply+0x2e6>
 8015c5a:	4b10      	ldr	r3, [pc, #64]	; (8015c9c <dhcp_parse_reply+0x314>)
 8015c5c:	f240 6259 	movw	r2, #1625	; 0x659
 8015c60:	490f      	ldr	r1, [pc, #60]	; (8015ca0 <dhcp_parse_reply+0x318>)
 8015c62:	4810      	ldr	r0, [pc, #64]	; (8015ca4 <dhcp_parse_reply+0x31c>)
 8015c64:	f002 ff34 	bl	8018ad0 <iprintf>
 8015c68:	f06f 0305 	mvn.w	r3, #5
 8015c6c:	e14a      	b.n	8015f04 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8015c6e:	2302      	movs	r3, #2
 8015c70:	623b      	str	r3, [r7, #32]
        break;
 8015c72:	e034      	b.n	8015cde <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c78:	2b04      	cmp	r3, #4
 8015c7a:	d009      	beq.n	8015c90 <dhcp_parse_reply+0x308>
 8015c7c:	4b07      	ldr	r3, [pc, #28]	; (8015c9c <dhcp_parse_reply+0x314>)
 8015c7e:	f240 625d 	movw	r2, #1629	; 0x65d
 8015c82:	4907      	ldr	r1, [pc, #28]	; (8015ca0 <dhcp_parse_reply+0x318>)
 8015c84:	4807      	ldr	r0, [pc, #28]	; (8015ca4 <dhcp_parse_reply+0x31c>)
 8015c86:	f002 ff23 	bl	8018ad0 <iprintf>
 8015c8a:	f06f 0305 	mvn.w	r3, #5
 8015c8e:	e139      	b.n	8015f04 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8015c90:	2304      	movs	r3, #4
 8015c92:	623b      	str	r3, [r7, #32]
        break;
 8015c94:	e023      	b.n	8015cde <dhcp_parse_reply+0x356>
 8015c96:	bf00      	nop
 8015c98:	20007ee8 	.word	0x20007ee8
 8015c9c:	0801bc18 	.word	0x0801bc18
 8015ca0:	0801bea0 	.word	0x0801bea0
 8015ca4:	0801bc78 	.word	0x0801bc78
 8015ca8:	0801beac 	.word	0x0801beac
 8015cac:	0801bec0 	.word	0x0801bec0
 8015cb0:	0801becc 	.word	0x0801becc
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cb8:	2b04      	cmp	r3, #4
 8015cba:	d009      	beq.n	8015cd0 <dhcp_parse_reply+0x348>
 8015cbc:	4b93      	ldr	r3, [pc, #588]	; (8015f0c <dhcp_parse_reply+0x584>)
 8015cbe:	f240 6261 	movw	r2, #1633	; 0x661
 8015cc2:	4993      	ldr	r1, [pc, #588]	; (8015f10 <dhcp_parse_reply+0x588>)
 8015cc4:	4893      	ldr	r0, [pc, #588]	; (8015f14 <dhcp_parse_reply+0x58c>)
 8015cc6:	f002 ff03 	bl	8018ad0 <iprintf>
 8015cca:	f06f 0305 	mvn.w	r3, #5
 8015cce:	e119      	b.n	8015f04 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8015cd0:	2305      	movs	r3, #5
 8015cd2:	623b      	str	r3, [r7, #32]
        break;
 8015cd4:	e003      	b.n	8015cde <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8015cd6:	2300      	movs	r3, #0
 8015cd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8015cdc:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8015cde:	7dfb      	ldrb	r3, [r7, #23]
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d103      	bne.n	8015cec <dhcp_parse_reply+0x364>
      offset++;
 8015ce4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015ce6:	3301      	adds	r3, #1
 8015ce8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015cea:	e0a1      	b.n	8015e30 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8015cec:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015cee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015cf2:	4413      	add	r3, r2
 8015cf4:	3302      	adds	r3, #2
 8015cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015cfa:	db02      	blt.n	8015d02 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8015cfc:	f06f 0301 	mvn.w	r3, #1
 8015d00:	e100      	b.n	8015f04 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8015d02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d06:	b29a      	uxth	r2, r3
 8015d08:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015d0a:	4413      	add	r3, r2
 8015d0c:	b29b      	uxth	r3, r3
 8015d0e:	3302      	adds	r3, #2
 8015d10:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8015d12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	f000 808a 	beq.w	8015e30 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8015d1c:	2300      	movs	r3, #0
 8015d1e:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8015d20:	6a3b      	ldr	r3, [r7, #32]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	db02      	blt.n	8015d2c <dhcp_parse_reply+0x3a4>
 8015d26:	6a3b      	ldr	r3, [r7, #32]
 8015d28:	2b07      	cmp	r3, #7
 8015d2a:	dd06      	ble.n	8015d3a <dhcp_parse_reply+0x3b2>
 8015d2c:	4b77      	ldr	r3, [pc, #476]	; (8015f0c <dhcp_parse_reply+0x584>)
 8015d2e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8015d32:	4979      	ldr	r1, [pc, #484]	; (8015f18 <dhcp_parse_reply+0x590>)
 8015d34:	4877      	ldr	r0, [pc, #476]	; (8015f14 <dhcp_parse_reply+0x58c>)
 8015d36:	f002 fecb 	bl	8018ad0 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8015d3a:	4a78      	ldr	r2, [pc, #480]	; (8015f1c <dhcp_parse_reply+0x594>)
 8015d3c:	6a3b      	ldr	r3, [r7, #32]
 8015d3e:	4413      	add	r3, r2
 8015d40:	781b      	ldrb	r3, [r3, #0]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d174      	bne.n	8015e30 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8015d46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015d4a:	2b04      	cmp	r3, #4
 8015d4c:	bf28      	it	cs
 8015d4e:	2304      	movcs	r3, #4
 8015d50:	b2db      	uxtb	r3, r3
 8015d52:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8015d54:	8bfb      	ldrh	r3, [r7, #30]
 8015d56:	8aba      	ldrh	r2, [r7, #20]
 8015d58:	f107 0108 	add.w	r1, r7, #8
 8015d5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d5e:	f7f8 fc2b 	bl	800e5b8 <pbuf_copy_partial>
 8015d62:	4603      	mov	r3, r0
 8015d64:	461a      	mov	r2, r3
 8015d66:	8abb      	ldrh	r3, [r7, #20]
 8015d68:	4293      	cmp	r3, r2
 8015d6a:	d002      	beq.n	8015d72 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8015d6c:	f06f 0301 	mvn.w	r3, #1
 8015d70:	e0c8      	b.n	8015f04 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8015d72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015d76:	2b04      	cmp	r3, #4
 8015d78:	d933      	bls.n	8015de2 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8015d7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015d7e:	f003 0303 	and.w	r3, r3, #3
 8015d82:	b2db      	uxtb	r3, r3
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d009      	beq.n	8015d9c <dhcp_parse_reply+0x414>
 8015d88:	4b60      	ldr	r3, [pc, #384]	; (8015f0c <dhcp_parse_reply+0x584>)
 8015d8a:	f240 6281 	movw	r2, #1665	; 0x681
 8015d8e:	4964      	ldr	r1, [pc, #400]	; (8015f20 <dhcp_parse_reply+0x598>)
 8015d90:	4860      	ldr	r0, [pc, #384]	; (8015f14 <dhcp_parse_reply+0x58c>)
 8015d92:	f002 fe9d 	bl	8018ad0 <iprintf>
 8015d96:	f06f 0305 	mvn.w	r3, #5
 8015d9a:	e0b3      	b.n	8015f04 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8015d9c:	4a5f      	ldr	r2, [pc, #380]	; (8015f1c <dhcp_parse_reply+0x594>)
 8015d9e:	6a3b      	ldr	r3, [r7, #32]
 8015da0:	4413      	add	r3, r2
 8015da2:	2201      	movs	r2, #1
 8015da4:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8015da6:	68bb      	ldr	r3, [r7, #8]
 8015da8:	4618      	mov	r0, r3
 8015daa:	f7f6 ff7f 	bl	800ccac <lwip_htonl>
 8015dae:	4601      	mov	r1, r0
 8015db0:	4a5c      	ldr	r2, [pc, #368]	; (8015f24 <dhcp_parse_reply+0x59c>)
 8015db2:	6a3b      	ldr	r3, [r7, #32]
 8015db4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8015db8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015dbc:	3b04      	subs	r3, #4
 8015dbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8015dc2:	8bfb      	ldrh	r3, [r7, #30]
 8015dc4:	3304      	adds	r3, #4
 8015dc6:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8015dc8:	8a7a      	ldrh	r2, [r7, #18]
 8015dca:	8bfb      	ldrh	r3, [r7, #30]
 8015dcc:	429a      	cmp	r2, r3
 8015dce:	d202      	bcs.n	8015dd6 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8015dd0:	f06f 0301 	mvn.w	r3, #1
 8015dd4:	e096      	b.n	8015f04 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8015dd6:	8a7b      	ldrh	r3, [r7, #18]
 8015dd8:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8015dda:	6a3b      	ldr	r3, [r7, #32]
 8015ddc:	3301      	adds	r3, #1
 8015dde:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8015de0:	e79e      	b.n	8015d20 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8015de2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015de6:	2b04      	cmp	r3, #4
 8015de8:	d106      	bne.n	8015df8 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8015dea:	68bb      	ldr	r3, [r7, #8]
 8015dec:	4618      	mov	r0, r3
 8015dee:	f7f6 ff5d 	bl	800ccac <lwip_htonl>
 8015df2:	4603      	mov	r3, r0
 8015df4:	60bb      	str	r3, [r7, #8]
 8015df6:	e011      	b.n	8015e1c <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8015df8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015dfc:	2b01      	cmp	r3, #1
 8015dfe:	d009      	beq.n	8015e14 <dhcp_parse_reply+0x48c>
 8015e00:	4b42      	ldr	r3, [pc, #264]	; (8015f0c <dhcp_parse_reply+0x584>)
 8015e02:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8015e06:	4948      	ldr	r1, [pc, #288]	; (8015f28 <dhcp_parse_reply+0x5a0>)
 8015e08:	4842      	ldr	r0, [pc, #264]	; (8015f14 <dhcp_parse_reply+0x58c>)
 8015e0a:	f002 fe61 	bl	8018ad0 <iprintf>
 8015e0e:	f06f 0305 	mvn.w	r3, #5
 8015e12:	e077      	b.n	8015f04 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8015e14:	f107 0308 	add.w	r3, r7, #8
 8015e18:	781b      	ldrb	r3, [r3, #0]
 8015e1a:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8015e1c:	4a3f      	ldr	r2, [pc, #252]	; (8015f1c <dhcp_parse_reply+0x594>)
 8015e1e:	6a3b      	ldr	r3, [r7, #32]
 8015e20:	4413      	add	r3, r2
 8015e22:	2201      	movs	r2, #1
 8015e24:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8015e26:	68ba      	ldr	r2, [r7, #8]
 8015e28:	493e      	ldr	r1, [pc, #248]	; (8015f24 <dhcp_parse_reply+0x59c>)
 8015e2a:	6a3b      	ldr	r3, [r7, #32]
 8015e2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8015e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e32:	895b      	ldrh	r3, [r3, #10]
 8015e34:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015e36:	429a      	cmp	r2, r3
 8015e38:	d324      	bcc.n	8015e84 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8015e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e3c:	895b      	ldrh	r3, [r3, #10]
 8015e3e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015e40:	1ad3      	subs	r3, r2, r3
 8015e42:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8015e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e46:	895b      	ldrh	r3, [r3, #10]
 8015e48:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8015e4a:	1ad3      	subs	r3, r2, r3
 8015e4c:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8015e4e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015e50:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015e52:	429a      	cmp	r2, r3
 8015e54:	d213      	bcs.n	8015e7e <dhcp_parse_reply+0x4f6>
        q = q->next;
 8015e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8015e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d109      	bne.n	8015e76 <dhcp_parse_reply+0x4ee>
 8015e62:	4b2a      	ldr	r3, [pc, #168]	; (8015f0c <dhcp_parse_reply+0x584>)
 8015e64:	f240 629d 	movw	r2, #1693	; 0x69d
 8015e68:	4930      	ldr	r1, [pc, #192]	; (8015f2c <dhcp_parse_reply+0x5a4>)
 8015e6a:	482a      	ldr	r0, [pc, #168]	; (8015f14 <dhcp_parse_reply+0x58c>)
 8015e6c:	f002 fe30 	bl	8018ad0 <iprintf>
 8015e70:	f06f 0305 	mvn.w	r3, #5
 8015e74:	e046      	b.n	8015f04 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8015e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e78:	685b      	ldr	r3, [r3, #4]
 8015e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015e7c:	e002      	b.n	8015e84 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8015e7e:	f06f 0301 	mvn.w	r3, #1
 8015e82:	e03f      	b.n	8015f04 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d00a      	beq.n	8015ea0 <dhcp_parse_reply+0x518>
 8015e8a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015e8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015e8e:	429a      	cmp	r2, r3
 8015e90:	d206      	bcs.n	8015ea0 <dhcp_parse_reply+0x518>
 8015e92:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015e96:	4413      	add	r3, r2
 8015e98:	781b      	ldrb	r3, [r3, #0]
 8015e9a:	2bff      	cmp	r3, #255	; 0xff
 8015e9c:	f47f adb7 	bne.w	8015a0e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8015ea0:	4b1e      	ldr	r3, [pc, #120]	; (8015f1c <dhcp_parse_reply+0x594>)
 8015ea2:	781b      	ldrb	r3, [r3, #0]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d018      	beq.n	8015eda <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015ea8:	4b1e      	ldr	r3, [pc, #120]	; (8015f24 <dhcp_parse_reply+0x59c>)
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015eae:	4b1b      	ldr	r3, [pc, #108]	; (8015f1c <dhcp_parse_reply+0x594>)
 8015eb0:	2200      	movs	r2, #0
 8015eb2:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	2b01      	cmp	r3, #1
 8015eb8:	d102      	bne.n	8015ec0 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8015eba:	2301      	movs	r3, #1
 8015ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015ebe:	e00c      	b.n	8015eda <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	2b02      	cmp	r3, #2
 8015ec4:	d102      	bne.n	8015ecc <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8015ec6:	2301      	movs	r3, #1
 8015ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8015eca:	e006      	b.n	8015eda <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	2b03      	cmp	r3, #3
 8015ed0:	d103      	bne.n	8015eda <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8015ed2:	2301      	movs	r3, #1
 8015ed4:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8015ed6:	2301      	movs	r3, #1
 8015ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8015eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d006      	beq.n	8015eee <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8015ee4:	236c      	movs	r3, #108	; 0x6c
 8015ee6:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8015ee8:	23ec      	movs	r3, #236	; 0xec
 8015eea:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8015eec:	e569      	b.n	80159c2 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8015eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d006      	beq.n	8015f02 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8015ef8:	232c      	movs	r3, #44	; 0x2c
 8015efa:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8015efc:	236c      	movs	r3, #108	; 0x6c
 8015efe:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8015f00:	e55f      	b.n	80159c2 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8015f02:	2300      	movs	r3, #0
}
 8015f04:	4618      	mov	r0, r3
 8015f06:	3740      	adds	r7, #64	; 0x40
 8015f08:	46bd      	mov	sp, r7
 8015f0a:	bd80      	pop	{r7, pc}
 8015f0c:	0801bc18 	.word	0x0801bc18
 8015f10:	0801bea0 	.word	0x0801bea0
 8015f14:	0801bc78 	.word	0x0801bc78
 8015f18:	0801bee4 	.word	0x0801bee4
 8015f1c:	20007ee8 	.word	0x20007ee8
 8015f20:	0801bef8 	.word	0x0801bef8
 8015f24:	20007ef0 	.word	0x20007ef0
 8015f28:	0801bf10 	.word	0x0801bf10
 8015f2c:	0801bf24 	.word	0x0801bf24

08015f30 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015f30:	b580      	push	{r7, lr}
 8015f32:	b08a      	sub	sp, #40	; 0x28
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	60f8      	str	r0, [r7, #12]
 8015f38:	60b9      	str	r1, [r7, #8]
 8015f3a:	607a      	str	r2, [r7, #4]
 8015f3c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8015f3e:	4b5f      	ldr	r3, [pc, #380]	; (80160bc <dhcp_recv+0x18c>)
 8015f40:	685b      	ldr	r3, [r3, #4]
 8015f42:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015f44:	6a3b      	ldr	r3, [r7, #32]
 8015f46:	6a1b      	ldr	r3, [r3, #32]
 8015f48:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	685b      	ldr	r3, [r3, #4]
 8015f4e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8015f50:	69fb      	ldr	r3, [r7, #28]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	f000 809d 	beq.w	8016092 <dhcp_recv+0x162>
 8015f58:	69fb      	ldr	r3, [r7, #28]
 8015f5a:	791b      	ldrb	r3, [r3, #4]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	f000 8098 	beq.w	8016092 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	895b      	ldrh	r3, [r3, #10]
 8015f66:	2b2b      	cmp	r3, #43	; 0x2b
 8015f68:	f240 8095 	bls.w	8016096 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8015f6c:	69bb      	ldr	r3, [r7, #24]
 8015f6e:	781b      	ldrb	r3, [r3, #0]
 8015f70:	2b02      	cmp	r3, #2
 8015f72:	f040 8092 	bne.w	801609a <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015f76:	2300      	movs	r3, #0
 8015f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015f7c:	e012      	b.n	8015fa4 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8015f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f82:	6a3a      	ldr	r2, [r7, #32]
 8015f84:	4413      	add	r3, r2
 8015f86:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8015f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f8e:	69b9      	ldr	r1, [r7, #24]
 8015f90:	440b      	add	r3, r1
 8015f92:	7f1b      	ldrb	r3, [r3, #28]
 8015f94:	429a      	cmp	r2, r3
 8015f96:	f040 8082 	bne.w	801609e <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f9e:	3301      	adds	r3, #1
 8015fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015fa4:	6a3b      	ldr	r3, [r7, #32]
 8015fa6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015faa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015fae:	429a      	cmp	r2, r3
 8015fb0:	d203      	bcs.n	8015fba <dhcp_recv+0x8a>
 8015fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015fb6:	2b05      	cmp	r3, #5
 8015fb8:	d9e1      	bls.n	8015f7e <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8015fba:	69bb      	ldr	r3, [r7, #24]
 8015fbc:	685b      	ldr	r3, [r3, #4]
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	f7f6 fe74 	bl	800ccac <lwip_htonl>
 8015fc4:	4602      	mov	r2, r0
 8015fc6:	69fb      	ldr	r3, [r7, #28]
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	429a      	cmp	r2, r3
 8015fcc:	d169      	bne.n	80160a2 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8015fce:	69f9      	ldr	r1, [r7, #28]
 8015fd0:	6878      	ldr	r0, [r7, #4]
 8015fd2:	f7ff fcd9 	bl	8015988 <dhcp_parse_reply>
 8015fd6:	4603      	mov	r3, r0
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d164      	bne.n	80160a6 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8015fdc:	4b38      	ldr	r3, [pc, #224]	; (80160c0 <dhcp_recv+0x190>)
 8015fde:	785b      	ldrb	r3, [r3, #1]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d062      	beq.n	80160aa <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	685b      	ldr	r3, [r3, #4]
 8015fe8:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8015fea:	4b36      	ldr	r3, [pc, #216]	; (80160c4 <dhcp_recv+0x194>)
 8015fec:	685b      	ldr	r3, [r3, #4]
 8015fee:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8015ff0:	7cfb      	ldrb	r3, [r7, #19]
 8015ff2:	2b05      	cmp	r3, #5
 8015ff4:	d12a      	bne.n	801604c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8015ff6:	69fb      	ldr	r3, [r7, #28]
 8015ff8:	795b      	ldrb	r3, [r3, #5]
 8015ffa:	2b01      	cmp	r3, #1
 8015ffc:	d112      	bne.n	8016024 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8015ffe:	6979      	ldr	r1, [r7, #20]
 8016000:	6a38      	ldr	r0, [r7, #32]
 8016002:	f7fe fe53 	bl	8014cac <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8016006:	6a3b      	ldr	r3, [r7, #32]
 8016008:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801600c:	f003 0308 	and.w	r3, r3, #8
 8016010:	2b00      	cmp	r3, #0
 8016012:	d003      	beq.n	801601c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8016014:	6a38      	ldr	r0, [r7, #32]
 8016016:	f7fe fbc3 	bl	80147a0 <dhcp_check>
 801601a:	e047      	b.n	80160ac <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801601c:	6a38      	ldr	r0, [r7, #32]
 801601e:	f7ff f867 	bl	80150f0 <dhcp_bind>
 8016022:	e043      	b.n	80160ac <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8016024:	69fb      	ldr	r3, [r7, #28]
 8016026:	795b      	ldrb	r3, [r3, #5]
 8016028:	2b03      	cmp	r3, #3
 801602a:	d007      	beq.n	801603c <dhcp_recv+0x10c>
 801602c:	69fb      	ldr	r3, [r7, #28]
 801602e:	795b      	ldrb	r3, [r3, #5]
 8016030:	2b04      	cmp	r3, #4
 8016032:	d003      	beq.n	801603c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8016034:	69fb      	ldr	r3, [r7, #28]
 8016036:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8016038:	2b05      	cmp	r3, #5
 801603a:	d137      	bne.n	80160ac <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 801603c:	6979      	ldr	r1, [r7, #20]
 801603e:	6a38      	ldr	r0, [r7, #32]
 8016040:	f7fe fe34 	bl	8014cac <dhcp_handle_ack>
      dhcp_bind(netif);
 8016044:	6a38      	ldr	r0, [r7, #32]
 8016046:	f7ff f853 	bl	80150f0 <dhcp_bind>
 801604a:	e02f      	b.n	80160ac <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801604c:	7cfb      	ldrb	r3, [r7, #19]
 801604e:	2b06      	cmp	r3, #6
 8016050:	d113      	bne.n	801607a <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016052:	69fb      	ldr	r3, [r7, #28]
 8016054:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8016056:	2b03      	cmp	r3, #3
 8016058:	d00b      	beq.n	8016072 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801605a:	69fb      	ldr	r3, [r7, #28]
 801605c:	795b      	ldrb	r3, [r3, #5]
 801605e:	2b01      	cmp	r3, #1
 8016060:	d007      	beq.n	8016072 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8016062:	69fb      	ldr	r3, [r7, #28]
 8016064:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016066:	2b04      	cmp	r3, #4
 8016068:	d003      	beq.n	8016072 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801606a:	69fb      	ldr	r3, [r7, #28]
 801606c:	795b      	ldrb	r3, [r3, #5]
 801606e:	2b05      	cmp	r3, #5
 8016070:	d103      	bne.n	801607a <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8016072:	6a38      	ldr	r0, [r7, #32]
 8016074:	f7fe fb7a 	bl	801476c <dhcp_handle_nak>
 8016078:	e018      	b.n	80160ac <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801607a:	7cfb      	ldrb	r3, [r7, #19]
 801607c:	2b02      	cmp	r3, #2
 801607e:	d108      	bne.n	8016092 <dhcp_recv+0x162>
 8016080:	69fb      	ldr	r3, [r7, #28]
 8016082:	795b      	ldrb	r3, [r3, #5]
 8016084:	2b06      	cmp	r3, #6
 8016086:	d104      	bne.n	8016092 <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8016088:	6979      	ldr	r1, [r7, #20]
 801608a:	6a38      	ldr	r0, [r7, #32]
 801608c:	f7fe fbbc 	bl	8014808 <dhcp_handle_offer>
 8016090:	e00c      	b.n	80160ac <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 8016092:	bf00      	nop
 8016094:	e00a      	b.n	80160ac <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8016096:	bf00      	nop
 8016098:	e008      	b.n	80160ac <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 801609a:	bf00      	nop
 801609c:	e006      	b.n	80160ac <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 801609e:	bf00      	nop
 80160a0:	e004      	b.n	80160ac <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80160a2:	bf00      	nop
 80160a4:	e002      	b.n	80160ac <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80160a6:	bf00      	nop
 80160a8:	e000      	b.n	80160ac <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80160aa:	bf00      	nop
  pbuf_free(p);
 80160ac:	6878      	ldr	r0, [r7, #4]
 80160ae:	f7f8 f889 	bl	800e1c4 <pbuf_free>
}
 80160b2:	bf00      	nop
 80160b4:	3728      	adds	r7, #40	; 0x28
 80160b6:	46bd      	mov	sp, r7
 80160b8:	bd80      	pop	{r7, pc}
 80160ba:	bf00      	nop
 80160bc:	20004968 	.word	0x20004968
 80160c0:	20007ee8 	.word	0x20007ee8
 80160c4:	20007ef0 	.word	0x20007ef0

080160c8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b088      	sub	sp, #32
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	60f8      	str	r0, [r7, #12]
 80160d0:	60b9      	str	r1, [r7, #8]
 80160d2:	603b      	str	r3, [r7, #0]
 80160d4:	4613      	mov	r3, r2
 80160d6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d108      	bne.n	80160f0 <dhcp_create_msg+0x28>
 80160de:	4b5f      	ldr	r3, [pc, #380]	; (801625c <dhcp_create_msg+0x194>)
 80160e0:	f240 7269 	movw	r2, #1897	; 0x769
 80160e4:	495e      	ldr	r1, [pc, #376]	; (8016260 <dhcp_create_msg+0x198>)
 80160e6:	485f      	ldr	r0, [pc, #380]	; (8016264 <dhcp_create_msg+0x19c>)
 80160e8:	f002 fcf2 	bl	8018ad0 <iprintf>
 80160ec:	2300      	movs	r3, #0
 80160ee:	e0b1      	b.n	8016254 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80160f0:	68bb      	ldr	r3, [r7, #8]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d108      	bne.n	8016108 <dhcp_create_msg+0x40>
 80160f6:	4b59      	ldr	r3, [pc, #356]	; (801625c <dhcp_create_msg+0x194>)
 80160f8:	f240 726a 	movw	r2, #1898	; 0x76a
 80160fc:	495a      	ldr	r1, [pc, #360]	; (8016268 <dhcp_create_msg+0x1a0>)
 80160fe:	4859      	ldr	r0, [pc, #356]	; (8016264 <dhcp_create_msg+0x19c>)
 8016100:	f002 fce6 	bl	8018ad0 <iprintf>
 8016104:	2300      	movs	r3, #0
 8016106:	e0a5      	b.n	8016254 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8016108:	f44f 7220 	mov.w	r2, #640	; 0x280
 801610c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8016110:	2036      	movs	r0, #54	; 0x36
 8016112:	f7f7 fd77 	bl	800dc04 <pbuf_alloc>
 8016116:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8016118:	69bb      	ldr	r3, [r7, #24]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d101      	bne.n	8016122 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801611e:	2300      	movs	r3, #0
 8016120:	e098      	b.n	8016254 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8016122:	69bb      	ldr	r3, [r7, #24]
 8016124:	895b      	ldrh	r3, [r3, #10]
 8016126:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801612a:	d206      	bcs.n	801613a <dhcp_create_msg+0x72>
 801612c:	4b4b      	ldr	r3, [pc, #300]	; (801625c <dhcp_create_msg+0x194>)
 801612e:	f240 7272 	movw	r2, #1906	; 0x772
 8016132:	494e      	ldr	r1, [pc, #312]	; (801626c <dhcp_create_msg+0x1a4>)
 8016134:	484b      	ldr	r0, [pc, #300]	; (8016264 <dhcp_create_msg+0x19c>)
 8016136:	f002 fccb 	bl	8018ad0 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801613a:	79fb      	ldrb	r3, [r7, #7]
 801613c:	2b03      	cmp	r3, #3
 801613e:	d103      	bne.n	8016148 <dhcp_create_msg+0x80>
 8016140:	68bb      	ldr	r3, [r7, #8]
 8016142:	795b      	ldrb	r3, [r3, #5]
 8016144:	2b03      	cmp	r3, #3
 8016146:	d10d      	bne.n	8016164 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8016148:	68bb      	ldr	r3, [r7, #8]
 801614a:	799b      	ldrb	r3, [r3, #6]
 801614c:	2b00      	cmp	r3, #0
 801614e:	d105      	bne.n	801615c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8016150:	f002 fcd6 	bl	8018b00 <rand>
 8016154:	4603      	mov	r3, r0
 8016156:	461a      	mov	r2, r3
 8016158:	4b45      	ldr	r3, [pc, #276]	; (8016270 <dhcp_create_msg+0x1a8>)
 801615a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801615c:	4b44      	ldr	r3, [pc, #272]	; (8016270 <dhcp_create_msg+0x1a8>)
 801615e:	681a      	ldr	r2, [r3, #0]
 8016160:	68bb      	ldr	r3, [r7, #8]
 8016162:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8016164:	69bb      	ldr	r3, [r7, #24]
 8016166:	685b      	ldr	r3, [r3, #4]
 8016168:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801616a:	f44f 729a 	mov.w	r2, #308	; 0x134
 801616e:	2100      	movs	r1, #0
 8016170:	6978      	ldr	r0, [r7, #20]
 8016172:	f002 fbfd 	bl	8018970 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8016176:	697b      	ldr	r3, [r7, #20]
 8016178:	2201      	movs	r2, #1
 801617a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801617c:	697b      	ldr	r3, [r7, #20]
 801617e:	2201      	movs	r2, #1
 8016180:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8016182:	68fb      	ldr	r3, [r7, #12]
 8016184:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8016188:	697b      	ldr	r3, [r7, #20]
 801618a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801618c:	68bb      	ldr	r3, [r7, #8]
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	4618      	mov	r0, r3
 8016192:	f7f6 fd8b 	bl	800ccac <lwip_htonl>
 8016196:	4602      	mov	r2, r0
 8016198:	697b      	ldr	r3, [r7, #20]
 801619a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801619c:	79fb      	ldrb	r3, [r7, #7]
 801619e:	2b08      	cmp	r3, #8
 80161a0:	d010      	beq.n	80161c4 <dhcp_create_msg+0xfc>
 80161a2:	79fb      	ldrb	r3, [r7, #7]
 80161a4:	2b04      	cmp	r3, #4
 80161a6:	d00d      	beq.n	80161c4 <dhcp_create_msg+0xfc>
 80161a8:	79fb      	ldrb	r3, [r7, #7]
 80161aa:	2b07      	cmp	r3, #7
 80161ac:	d00a      	beq.n	80161c4 <dhcp_create_msg+0xfc>
 80161ae:	79fb      	ldrb	r3, [r7, #7]
 80161b0:	2b03      	cmp	r3, #3
 80161b2:	d10c      	bne.n	80161ce <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80161b4:	68bb      	ldr	r3, [r7, #8]
 80161b6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80161b8:	2b05      	cmp	r3, #5
 80161ba:	d003      	beq.n	80161c4 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80161bc:	68bb      	ldr	r3, [r7, #8]
 80161be:	795b      	ldrb	r3, [r3, #5]
 80161c0:	2b04      	cmp	r3, #4
 80161c2:	d104      	bne.n	80161ce <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	3304      	adds	r3, #4
 80161c8:	681a      	ldr	r2, [r3, #0]
 80161ca:	697b      	ldr	r3, [r7, #20]
 80161cc:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80161ce:	2300      	movs	r3, #0
 80161d0:	83fb      	strh	r3, [r7, #30]
 80161d2:	e00c      	b.n	80161ee <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80161d4:	8bfa      	ldrh	r2, [r7, #30]
 80161d6:	8bfb      	ldrh	r3, [r7, #30]
 80161d8:	68f9      	ldr	r1, [r7, #12]
 80161da:	440a      	add	r2, r1
 80161dc:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
 80161e0:	697a      	ldr	r2, [r7, #20]
 80161e2:	4413      	add	r3, r2
 80161e4:	460a      	mov	r2, r1
 80161e6:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80161e8:	8bfb      	ldrh	r3, [r7, #30]
 80161ea:	3301      	adds	r3, #1
 80161ec:	83fb      	strh	r3, [r7, #30]
 80161ee:	8bfb      	ldrh	r3, [r7, #30]
 80161f0:	2b05      	cmp	r3, #5
 80161f2:	d9ef      	bls.n	80161d4 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80161f4:	697b      	ldr	r3, [r7, #20]
 80161f6:	2200      	movs	r2, #0
 80161f8:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80161fc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8016200:	2200      	movs	r2, #0
 8016202:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8016206:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801620a:	2200      	movs	r2, #0
 801620c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8016210:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8016214:	2200      	movs	r2, #0
 8016216:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801621a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801621e:	697b      	ldr	r3, [r7, #20]
 8016220:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016224:	2301      	movs	r3, #1
 8016226:	2235      	movs	r2, #53	; 0x35
 8016228:	2000      	movs	r0, #0
 801622a:	f7ff fadd 	bl	80157e8 <dhcp_option>
 801622e:	4603      	mov	r3, r0
 8016230:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8016232:	697b      	ldr	r3, [r7, #20]
 8016234:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8016238:	79fa      	ldrb	r2, [r7, #7]
 801623a:	8a7b      	ldrh	r3, [r7, #18]
 801623c:	4618      	mov	r0, r3
 801623e:	f7ff fb07 	bl	8015850 <dhcp_option_byte>
 8016242:	4603      	mov	r3, r0
 8016244:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8016246:	683b      	ldr	r3, [r7, #0]
 8016248:	2b00      	cmp	r3, #0
 801624a:	d002      	beq.n	8016252 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801624c:	683b      	ldr	r3, [r7, #0]
 801624e:	8a7a      	ldrh	r2, [r7, #18]
 8016250:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8016252:	69bb      	ldr	r3, [r7, #24]
}
 8016254:	4618      	mov	r0, r3
 8016256:	3720      	adds	r7, #32
 8016258:	46bd      	mov	sp, r7
 801625a:	bd80      	pop	{r7, pc}
 801625c:	0801bc18 	.word	0x0801bc18
 8016260:	0801bf38 	.word	0x0801bf38
 8016264:	0801bc78 	.word	0x0801bc78
 8016268:	0801bf58 	.word	0x0801bf58
 801626c:	0801bf78 	.word	0x0801bf78
 8016270:	200004c4 	.word	0x200004c4

08016274 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8016274:	b580      	push	{r7, lr}
 8016276:	b084      	sub	sp, #16
 8016278:	af00      	add	r7, sp, #0
 801627a:	4603      	mov	r3, r0
 801627c:	60b9      	str	r1, [r7, #8]
 801627e:	607a      	str	r2, [r7, #4]
 8016280:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8016282:	89fb      	ldrh	r3, [r7, #14]
 8016284:	1c5a      	adds	r2, r3, #1
 8016286:	81fa      	strh	r2, [r7, #14]
 8016288:	461a      	mov	r2, r3
 801628a:	68bb      	ldr	r3, [r7, #8]
 801628c:	4413      	add	r3, r2
 801628e:	22ff      	movs	r2, #255	; 0xff
 8016290:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016292:	e007      	b.n	80162a4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8016294:	89fb      	ldrh	r3, [r7, #14]
 8016296:	1c5a      	adds	r2, r3, #1
 8016298:	81fa      	strh	r2, [r7, #14]
 801629a:	461a      	mov	r2, r3
 801629c:	68bb      	ldr	r3, [r7, #8]
 801629e:	4413      	add	r3, r2
 80162a0:	2200      	movs	r2, #0
 80162a2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80162a4:	89fb      	ldrh	r3, [r7, #14]
 80162a6:	2b43      	cmp	r3, #67	; 0x43
 80162a8:	d904      	bls.n	80162b4 <dhcp_option_trailer+0x40>
 80162aa:	89fb      	ldrh	r3, [r7, #14]
 80162ac:	f003 0303 	and.w	r3, r3, #3
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d002      	beq.n	80162ba <dhcp_option_trailer+0x46>
 80162b4:	89fb      	ldrh	r3, [r7, #14]
 80162b6:	2b43      	cmp	r3, #67	; 0x43
 80162b8:	d9ec      	bls.n	8016294 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80162ba:	89fb      	ldrh	r3, [r7, #14]
 80162bc:	33f0      	adds	r3, #240	; 0xf0
 80162be:	b29b      	uxth	r3, r3
 80162c0:	4619      	mov	r1, r3
 80162c2:	6878      	ldr	r0, [r7, #4]
 80162c4:	f7f7 fdf8 	bl	800deb8 <pbuf_realloc>
}
 80162c8:	bf00      	nop
 80162ca:	3710      	adds	r7, #16
 80162cc:	46bd      	mov	sp, r7
 80162ce:	bd80      	pop	{r7, pc}

080162d0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80162d0:	b480      	push	{r7}
 80162d2:	b085      	sub	sp, #20
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d017      	beq.n	801630e <dhcp_supplied_address+0x3e>
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	6a1b      	ldr	r3, [r3, #32]
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d013      	beq.n	801630e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80162e6:	687b      	ldr	r3, [r7, #4]
 80162e8:	6a1b      	ldr	r3, [r3, #32]
 80162ea:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	795b      	ldrb	r3, [r3, #5]
 80162f0:	2b0a      	cmp	r3, #10
 80162f2:	d007      	beq.n	8016304 <dhcp_supplied_address+0x34>
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	795b      	ldrb	r3, [r3, #5]
 80162f8:	2b05      	cmp	r3, #5
 80162fa:	d003      	beq.n	8016304 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016300:	2b04      	cmp	r3, #4
 8016302:	d101      	bne.n	8016308 <dhcp_supplied_address+0x38>
 8016304:	2301      	movs	r3, #1
 8016306:	e000      	b.n	801630a <dhcp_supplied_address+0x3a>
 8016308:	2300      	movs	r3, #0
 801630a:	b2db      	uxtb	r3, r3
 801630c:	e000      	b.n	8016310 <dhcp_supplied_address+0x40>
  }
  return 0;
 801630e:	2300      	movs	r3, #0
}
 8016310:	4618      	mov	r0, r3
 8016312:	3714      	adds	r7, #20
 8016314:	46bd      	mov	sp, r7
 8016316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801631a:	4770      	bx	lr

0801631c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801631c:	b580      	push	{r7, lr}
 801631e:	b082      	sub	sp, #8
 8016320:	af00      	add	r7, sp, #0
 8016322:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016324:	4915      	ldr	r1, [pc, #84]	; (801637c <etharp_free_entry+0x60>)
 8016326:	687a      	ldr	r2, [r7, #4]
 8016328:	4613      	mov	r3, r2
 801632a:	005b      	lsls	r3, r3, #1
 801632c:	4413      	add	r3, r2
 801632e:	00db      	lsls	r3, r3, #3
 8016330:	440b      	add	r3, r1
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	2b00      	cmp	r3, #0
 8016336:	d013      	beq.n	8016360 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016338:	4910      	ldr	r1, [pc, #64]	; (801637c <etharp_free_entry+0x60>)
 801633a:	687a      	ldr	r2, [r7, #4]
 801633c:	4613      	mov	r3, r2
 801633e:	005b      	lsls	r3, r3, #1
 8016340:	4413      	add	r3, r2
 8016342:	00db      	lsls	r3, r3, #3
 8016344:	440b      	add	r3, r1
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	4618      	mov	r0, r3
 801634a:	f7f7 ff3b 	bl	800e1c4 <pbuf_free>
    arp_table[i].q = NULL;
 801634e:	490b      	ldr	r1, [pc, #44]	; (801637c <etharp_free_entry+0x60>)
 8016350:	687a      	ldr	r2, [r7, #4]
 8016352:	4613      	mov	r3, r2
 8016354:	005b      	lsls	r3, r3, #1
 8016356:	4413      	add	r3, r2
 8016358:	00db      	lsls	r3, r3, #3
 801635a:	440b      	add	r3, r1
 801635c:	2200      	movs	r2, #0
 801635e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016360:	4906      	ldr	r1, [pc, #24]	; (801637c <etharp_free_entry+0x60>)
 8016362:	687a      	ldr	r2, [r7, #4]
 8016364:	4613      	mov	r3, r2
 8016366:	005b      	lsls	r3, r3, #1
 8016368:	4413      	add	r3, r2
 801636a:	00db      	lsls	r3, r3, #3
 801636c:	440b      	add	r3, r1
 801636e:	3314      	adds	r3, #20
 8016370:	2200      	movs	r2, #0
 8016372:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016374:	bf00      	nop
 8016376:	3708      	adds	r7, #8
 8016378:	46bd      	mov	sp, r7
 801637a:	bd80      	pop	{r7, pc}
 801637c:	200004c8 	.word	0x200004c8

08016380 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b082      	sub	sp, #8
 8016384:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016386:	2300      	movs	r3, #0
 8016388:	607b      	str	r3, [r7, #4]
 801638a:	e096      	b.n	80164ba <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801638c:	494f      	ldr	r1, [pc, #316]	; (80164cc <etharp_tmr+0x14c>)
 801638e:	687a      	ldr	r2, [r7, #4]
 8016390:	4613      	mov	r3, r2
 8016392:	005b      	lsls	r3, r3, #1
 8016394:	4413      	add	r3, r2
 8016396:	00db      	lsls	r3, r3, #3
 8016398:	440b      	add	r3, r1
 801639a:	3314      	adds	r3, #20
 801639c:	781b      	ldrb	r3, [r3, #0]
 801639e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80163a0:	78fb      	ldrb	r3, [r7, #3]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	f000 8086 	beq.w	80164b4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80163a8:	4948      	ldr	r1, [pc, #288]	; (80164cc <etharp_tmr+0x14c>)
 80163aa:	687a      	ldr	r2, [r7, #4]
 80163ac:	4613      	mov	r3, r2
 80163ae:	005b      	lsls	r3, r3, #1
 80163b0:	4413      	add	r3, r2
 80163b2:	00db      	lsls	r3, r3, #3
 80163b4:	440b      	add	r3, r1
 80163b6:	3312      	adds	r3, #18
 80163b8:	881b      	ldrh	r3, [r3, #0]
 80163ba:	3301      	adds	r3, #1
 80163bc:	b298      	uxth	r0, r3
 80163be:	4943      	ldr	r1, [pc, #268]	; (80164cc <etharp_tmr+0x14c>)
 80163c0:	687a      	ldr	r2, [r7, #4]
 80163c2:	4613      	mov	r3, r2
 80163c4:	005b      	lsls	r3, r3, #1
 80163c6:	4413      	add	r3, r2
 80163c8:	00db      	lsls	r3, r3, #3
 80163ca:	440b      	add	r3, r1
 80163cc:	3312      	adds	r3, #18
 80163ce:	4602      	mov	r2, r0
 80163d0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80163d2:	493e      	ldr	r1, [pc, #248]	; (80164cc <etharp_tmr+0x14c>)
 80163d4:	687a      	ldr	r2, [r7, #4]
 80163d6:	4613      	mov	r3, r2
 80163d8:	005b      	lsls	r3, r3, #1
 80163da:	4413      	add	r3, r2
 80163dc:	00db      	lsls	r3, r3, #3
 80163de:	440b      	add	r3, r1
 80163e0:	3312      	adds	r3, #18
 80163e2:	881b      	ldrh	r3, [r3, #0]
 80163e4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80163e8:	d215      	bcs.n	8016416 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80163ea:	4938      	ldr	r1, [pc, #224]	; (80164cc <etharp_tmr+0x14c>)
 80163ec:	687a      	ldr	r2, [r7, #4]
 80163ee:	4613      	mov	r3, r2
 80163f0:	005b      	lsls	r3, r3, #1
 80163f2:	4413      	add	r3, r2
 80163f4:	00db      	lsls	r3, r3, #3
 80163f6:	440b      	add	r3, r1
 80163f8:	3314      	adds	r3, #20
 80163fa:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80163fc:	2b01      	cmp	r3, #1
 80163fe:	d10e      	bne.n	801641e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016400:	4932      	ldr	r1, [pc, #200]	; (80164cc <etharp_tmr+0x14c>)
 8016402:	687a      	ldr	r2, [r7, #4]
 8016404:	4613      	mov	r3, r2
 8016406:	005b      	lsls	r3, r3, #1
 8016408:	4413      	add	r3, r2
 801640a:	00db      	lsls	r3, r3, #3
 801640c:	440b      	add	r3, r1
 801640e:	3312      	adds	r3, #18
 8016410:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016412:	2b04      	cmp	r3, #4
 8016414:	d903      	bls.n	801641e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016416:	6878      	ldr	r0, [r7, #4]
 8016418:	f7ff ff80 	bl	801631c <etharp_free_entry>
 801641c:	e04a      	b.n	80164b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801641e:	492b      	ldr	r1, [pc, #172]	; (80164cc <etharp_tmr+0x14c>)
 8016420:	687a      	ldr	r2, [r7, #4]
 8016422:	4613      	mov	r3, r2
 8016424:	005b      	lsls	r3, r3, #1
 8016426:	4413      	add	r3, r2
 8016428:	00db      	lsls	r3, r3, #3
 801642a:	440b      	add	r3, r1
 801642c:	3314      	adds	r3, #20
 801642e:	781b      	ldrb	r3, [r3, #0]
 8016430:	2b03      	cmp	r3, #3
 8016432:	d10a      	bne.n	801644a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016434:	4925      	ldr	r1, [pc, #148]	; (80164cc <etharp_tmr+0x14c>)
 8016436:	687a      	ldr	r2, [r7, #4]
 8016438:	4613      	mov	r3, r2
 801643a:	005b      	lsls	r3, r3, #1
 801643c:	4413      	add	r3, r2
 801643e:	00db      	lsls	r3, r3, #3
 8016440:	440b      	add	r3, r1
 8016442:	3314      	adds	r3, #20
 8016444:	2204      	movs	r2, #4
 8016446:	701a      	strb	r2, [r3, #0]
 8016448:	e034      	b.n	80164b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801644a:	4920      	ldr	r1, [pc, #128]	; (80164cc <etharp_tmr+0x14c>)
 801644c:	687a      	ldr	r2, [r7, #4]
 801644e:	4613      	mov	r3, r2
 8016450:	005b      	lsls	r3, r3, #1
 8016452:	4413      	add	r3, r2
 8016454:	00db      	lsls	r3, r3, #3
 8016456:	440b      	add	r3, r1
 8016458:	3314      	adds	r3, #20
 801645a:	781b      	ldrb	r3, [r3, #0]
 801645c:	2b04      	cmp	r3, #4
 801645e:	d10a      	bne.n	8016476 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016460:	491a      	ldr	r1, [pc, #104]	; (80164cc <etharp_tmr+0x14c>)
 8016462:	687a      	ldr	r2, [r7, #4]
 8016464:	4613      	mov	r3, r2
 8016466:	005b      	lsls	r3, r3, #1
 8016468:	4413      	add	r3, r2
 801646a:	00db      	lsls	r3, r3, #3
 801646c:	440b      	add	r3, r1
 801646e:	3314      	adds	r3, #20
 8016470:	2202      	movs	r2, #2
 8016472:	701a      	strb	r2, [r3, #0]
 8016474:	e01e      	b.n	80164b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016476:	4915      	ldr	r1, [pc, #84]	; (80164cc <etharp_tmr+0x14c>)
 8016478:	687a      	ldr	r2, [r7, #4]
 801647a:	4613      	mov	r3, r2
 801647c:	005b      	lsls	r3, r3, #1
 801647e:	4413      	add	r3, r2
 8016480:	00db      	lsls	r3, r3, #3
 8016482:	440b      	add	r3, r1
 8016484:	3314      	adds	r3, #20
 8016486:	781b      	ldrb	r3, [r3, #0]
 8016488:	2b01      	cmp	r3, #1
 801648a:	d113      	bne.n	80164b4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801648c:	490f      	ldr	r1, [pc, #60]	; (80164cc <etharp_tmr+0x14c>)
 801648e:	687a      	ldr	r2, [r7, #4]
 8016490:	4613      	mov	r3, r2
 8016492:	005b      	lsls	r3, r3, #1
 8016494:	4413      	add	r3, r2
 8016496:	00db      	lsls	r3, r3, #3
 8016498:	440b      	add	r3, r1
 801649a:	3308      	adds	r3, #8
 801649c:	6818      	ldr	r0, [r3, #0]
 801649e:	687a      	ldr	r2, [r7, #4]
 80164a0:	4613      	mov	r3, r2
 80164a2:	005b      	lsls	r3, r3, #1
 80164a4:	4413      	add	r3, r2
 80164a6:	00db      	lsls	r3, r3, #3
 80164a8:	4a08      	ldr	r2, [pc, #32]	; (80164cc <etharp_tmr+0x14c>)
 80164aa:	4413      	add	r3, r2
 80164ac:	3304      	adds	r3, #4
 80164ae:	4619      	mov	r1, r3
 80164b0:	f000 fe72 	bl	8017198 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	3301      	adds	r3, #1
 80164b8:	607b      	str	r3, [r7, #4]
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	2b09      	cmp	r3, #9
 80164be:	f77f af65 	ble.w	801638c <etharp_tmr+0xc>
      }
    }
  }
}
 80164c2:	bf00      	nop
 80164c4:	3708      	adds	r7, #8
 80164c6:	46bd      	mov	sp, r7
 80164c8:	bd80      	pop	{r7, pc}
 80164ca:	bf00      	nop
 80164cc:	200004c8 	.word	0x200004c8

080164d0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80164d0:	b580      	push	{r7, lr}
 80164d2:	b08a      	sub	sp, #40	; 0x28
 80164d4:	af00      	add	r7, sp, #0
 80164d6:	60f8      	str	r0, [r7, #12]
 80164d8:	460b      	mov	r3, r1
 80164da:	607a      	str	r2, [r7, #4]
 80164dc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80164de:	230a      	movs	r3, #10
 80164e0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80164e2:	230a      	movs	r3, #10
 80164e4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80164e6:	230a      	movs	r3, #10
 80164e8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80164ea:	2300      	movs	r3, #0
 80164ec:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80164ee:	230a      	movs	r3, #10
 80164f0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80164f2:	2300      	movs	r3, #0
 80164f4:	83bb      	strh	r3, [r7, #28]
 80164f6:	2300      	movs	r3, #0
 80164f8:	837b      	strh	r3, [r7, #26]
 80164fa:	2300      	movs	r3, #0
 80164fc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80164fe:	2300      	movs	r3, #0
 8016500:	843b      	strh	r3, [r7, #32]
 8016502:	e0ae      	b.n	8016662 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016504:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016508:	49a6      	ldr	r1, [pc, #664]	; (80167a4 <etharp_find_entry+0x2d4>)
 801650a:	4613      	mov	r3, r2
 801650c:	005b      	lsls	r3, r3, #1
 801650e:	4413      	add	r3, r2
 8016510:	00db      	lsls	r3, r3, #3
 8016512:	440b      	add	r3, r1
 8016514:	3314      	adds	r3, #20
 8016516:	781b      	ldrb	r3, [r3, #0]
 8016518:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801651a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801651e:	2b0a      	cmp	r3, #10
 8016520:	d105      	bne.n	801652e <etharp_find_entry+0x5e>
 8016522:	7dfb      	ldrb	r3, [r7, #23]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d102      	bne.n	801652e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016528:	8c3b      	ldrh	r3, [r7, #32]
 801652a:	847b      	strh	r3, [r7, #34]	; 0x22
 801652c:	e095      	b.n	801665a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801652e:	7dfb      	ldrb	r3, [r7, #23]
 8016530:	2b00      	cmp	r3, #0
 8016532:	f000 8092 	beq.w	801665a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016536:	7dfb      	ldrb	r3, [r7, #23]
 8016538:	2b01      	cmp	r3, #1
 801653a:	d009      	beq.n	8016550 <etharp_find_entry+0x80>
 801653c:	7dfb      	ldrb	r3, [r7, #23]
 801653e:	2b01      	cmp	r3, #1
 8016540:	d806      	bhi.n	8016550 <etharp_find_entry+0x80>
 8016542:	4b99      	ldr	r3, [pc, #612]	; (80167a8 <etharp_find_entry+0x2d8>)
 8016544:	f44f 7292 	mov.w	r2, #292	; 0x124
 8016548:	4998      	ldr	r1, [pc, #608]	; (80167ac <etharp_find_entry+0x2dc>)
 801654a:	4899      	ldr	r0, [pc, #612]	; (80167b0 <etharp_find_entry+0x2e0>)
 801654c:	f002 fac0 	bl	8018ad0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	2b00      	cmp	r3, #0
 8016554:	d020      	beq.n	8016598 <etharp_find_entry+0xc8>
 8016556:	68fb      	ldr	r3, [r7, #12]
 8016558:	6819      	ldr	r1, [r3, #0]
 801655a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801655e:	4891      	ldr	r0, [pc, #580]	; (80167a4 <etharp_find_entry+0x2d4>)
 8016560:	4613      	mov	r3, r2
 8016562:	005b      	lsls	r3, r3, #1
 8016564:	4413      	add	r3, r2
 8016566:	00db      	lsls	r3, r3, #3
 8016568:	4403      	add	r3, r0
 801656a:	3304      	adds	r3, #4
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	4299      	cmp	r1, r3
 8016570:	d112      	bne.n	8016598 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	2b00      	cmp	r3, #0
 8016576:	d00c      	beq.n	8016592 <etharp_find_entry+0xc2>
 8016578:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801657c:	4989      	ldr	r1, [pc, #548]	; (80167a4 <etharp_find_entry+0x2d4>)
 801657e:	4613      	mov	r3, r2
 8016580:	005b      	lsls	r3, r3, #1
 8016582:	4413      	add	r3, r2
 8016584:	00db      	lsls	r3, r3, #3
 8016586:	440b      	add	r3, r1
 8016588:	3308      	adds	r3, #8
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	687a      	ldr	r2, [r7, #4]
 801658e:	429a      	cmp	r2, r3
 8016590:	d102      	bne.n	8016598 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016592:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016596:	e100      	b.n	801679a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016598:	7dfb      	ldrb	r3, [r7, #23]
 801659a:	2b01      	cmp	r3, #1
 801659c:	d140      	bne.n	8016620 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801659e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165a2:	4980      	ldr	r1, [pc, #512]	; (80167a4 <etharp_find_entry+0x2d4>)
 80165a4:	4613      	mov	r3, r2
 80165a6:	005b      	lsls	r3, r3, #1
 80165a8:	4413      	add	r3, r2
 80165aa:	00db      	lsls	r3, r3, #3
 80165ac:	440b      	add	r3, r1
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d01a      	beq.n	80165ea <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80165b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165b8:	497a      	ldr	r1, [pc, #488]	; (80167a4 <etharp_find_entry+0x2d4>)
 80165ba:	4613      	mov	r3, r2
 80165bc:	005b      	lsls	r3, r3, #1
 80165be:	4413      	add	r3, r2
 80165c0:	00db      	lsls	r3, r3, #3
 80165c2:	440b      	add	r3, r1
 80165c4:	3312      	adds	r3, #18
 80165c6:	881b      	ldrh	r3, [r3, #0]
 80165c8:	8bba      	ldrh	r2, [r7, #28]
 80165ca:	429a      	cmp	r2, r3
 80165cc:	d845      	bhi.n	801665a <etharp_find_entry+0x18a>
            old_queue = i;
 80165ce:	8c3b      	ldrh	r3, [r7, #32]
 80165d0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80165d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165d6:	4973      	ldr	r1, [pc, #460]	; (80167a4 <etharp_find_entry+0x2d4>)
 80165d8:	4613      	mov	r3, r2
 80165da:	005b      	lsls	r3, r3, #1
 80165dc:	4413      	add	r3, r2
 80165de:	00db      	lsls	r3, r3, #3
 80165e0:	440b      	add	r3, r1
 80165e2:	3312      	adds	r3, #18
 80165e4:	881b      	ldrh	r3, [r3, #0]
 80165e6:	83bb      	strh	r3, [r7, #28]
 80165e8:	e037      	b.n	801665a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80165ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165ee:	496d      	ldr	r1, [pc, #436]	; (80167a4 <etharp_find_entry+0x2d4>)
 80165f0:	4613      	mov	r3, r2
 80165f2:	005b      	lsls	r3, r3, #1
 80165f4:	4413      	add	r3, r2
 80165f6:	00db      	lsls	r3, r3, #3
 80165f8:	440b      	add	r3, r1
 80165fa:	3312      	adds	r3, #18
 80165fc:	881b      	ldrh	r3, [r3, #0]
 80165fe:	8b7a      	ldrh	r2, [r7, #26]
 8016600:	429a      	cmp	r2, r3
 8016602:	d82a      	bhi.n	801665a <etharp_find_entry+0x18a>
            old_pending = i;
 8016604:	8c3b      	ldrh	r3, [r7, #32]
 8016606:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016608:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801660c:	4965      	ldr	r1, [pc, #404]	; (80167a4 <etharp_find_entry+0x2d4>)
 801660e:	4613      	mov	r3, r2
 8016610:	005b      	lsls	r3, r3, #1
 8016612:	4413      	add	r3, r2
 8016614:	00db      	lsls	r3, r3, #3
 8016616:	440b      	add	r3, r1
 8016618:	3312      	adds	r3, #18
 801661a:	881b      	ldrh	r3, [r3, #0]
 801661c:	837b      	strh	r3, [r7, #26]
 801661e:	e01c      	b.n	801665a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016620:	7dfb      	ldrb	r3, [r7, #23]
 8016622:	2b01      	cmp	r3, #1
 8016624:	d919      	bls.n	801665a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016626:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801662a:	495e      	ldr	r1, [pc, #376]	; (80167a4 <etharp_find_entry+0x2d4>)
 801662c:	4613      	mov	r3, r2
 801662e:	005b      	lsls	r3, r3, #1
 8016630:	4413      	add	r3, r2
 8016632:	00db      	lsls	r3, r3, #3
 8016634:	440b      	add	r3, r1
 8016636:	3312      	adds	r3, #18
 8016638:	881b      	ldrh	r3, [r3, #0]
 801663a:	8b3a      	ldrh	r2, [r7, #24]
 801663c:	429a      	cmp	r2, r3
 801663e:	d80c      	bhi.n	801665a <etharp_find_entry+0x18a>
            old_stable = i;
 8016640:	8c3b      	ldrh	r3, [r7, #32]
 8016642:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016644:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016648:	4956      	ldr	r1, [pc, #344]	; (80167a4 <etharp_find_entry+0x2d4>)
 801664a:	4613      	mov	r3, r2
 801664c:	005b      	lsls	r3, r3, #1
 801664e:	4413      	add	r3, r2
 8016650:	00db      	lsls	r3, r3, #3
 8016652:	440b      	add	r3, r1
 8016654:	3312      	adds	r3, #18
 8016656:	881b      	ldrh	r3, [r3, #0]
 8016658:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801665a:	8c3b      	ldrh	r3, [r7, #32]
 801665c:	3301      	adds	r3, #1
 801665e:	b29b      	uxth	r3, r3
 8016660:	843b      	strh	r3, [r7, #32]
 8016662:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016666:	2b09      	cmp	r3, #9
 8016668:	f77f af4c 	ble.w	8016504 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801666c:	7afb      	ldrb	r3, [r7, #11]
 801666e:	f003 0302 	and.w	r3, r3, #2
 8016672:	2b00      	cmp	r3, #0
 8016674:	d108      	bne.n	8016688 <etharp_find_entry+0x1b8>
 8016676:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801667a:	2b0a      	cmp	r3, #10
 801667c:	d107      	bne.n	801668e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801667e:	7afb      	ldrb	r3, [r7, #11]
 8016680:	f003 0301 	and.w	r3, r3, #1
 8016684:	2b00      	cmp	r3, #0
 8016686:	d102      	bne.n	801668e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016688:	f04f 33ff 	mov.w	r3, #4294967295
 801668c:	e085      	b.n	801679a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801668e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016692:	2b09      	cmp	r3, #9
 8016694:	dc02      	bgt.n	801669c <etharp_find_entry+0x1cc>
    i = empty;
 8016696:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016698:	843b      	strh	r3, [r7, #32]
 801669a:	e039      	b.n	8016710 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801669c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80166a0:	2b09      	cmp	r3, #9
 80166a2:	dc14      	bgt.n	80166ce <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80166a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80166a6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80166a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80166ac:	493d      	ldr	r1, [pc, #244]	; (80167a4 <etharp_find_entry+0x2d4>)
 80166ae:	4613      	mov	r3, r2
 80166b0:	005b      	lsls	r3, r3, #1
 80166b2:	4413      	add	r3, r2
 80166b4:	00db      	lsls	r3, r3, #3
 80166b6:	440b      	add	r3, r1
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d018      	beq.n	80166f0 <etharp_find_entry+0x220>
 80166be:	4b3a      	ldr	r3, [pc, #232]	; (80167a8 <etharp_find_entry+0x2d8>)
 80166c0:	f240 126d 	movw	r2, #365	; 0x16d
 80166c4:	493b      	ldr	r1, [pc, #236]	; (80167b4 <etharp_find_entry+0x2e4>)
 80166c6:	483a      	ldr	r0, [pc, #232]	; (80167b0 <etharp_find_entry+0x2e0>)
 80166c8:	f002 fa02 	bl	8018ad0 <iprintf>
 80166cc:	e010      	b.n	80166f0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80166ce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80166d2:	2b09      	cmp	r3, #9
 80166d4:	dc02      	bgt.n	80166dc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80166d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80166d8:	843b      	strh	r3, [r7, #32]
 80166da:	e009      	b.n	80166f0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80166dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80166e0:	2b09      	cmp	r3, #9
 80166e2:	dc02      	bgt.n	80166ea <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80166e4:	8bfb      	ldrh	r3, [r7, #30]
 80166e6:	843b      	strh	r3, [r7, #32]
 80166e8:	e002      	b.n	80166f0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80166ea:	f04f 33ff 	mov.w	r3, #4294967295
 80166ee:	e054      	b.n	801679a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80166f0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80166f4:	2b09      	cmp	r3, #9
 80166f6:	dd06      	ble.n	8016706 <etharp_find_entry+0x236>
 80166f8:	4b2b      	ldr	r3, [pc, #172]	; (80167a8 <etharp_find_entry+0x2d8>)
 80166fa:	f240 127f 	movw	r2, #383	; 0x17f
 80166fe:	492e      	ldr	r1, [pc, #184]	; (80167b8 <etharp_find_entry+0x2e8>)
 8016700:	482b      	ldr	r0, [pc, #172]	; (80167b0 <etharp_find_entry+0x2e0>)
 8016702:	f002 f9e5 	bl	8018ad0 <iprintf>
    etharp_free_entry(i);
 8016706:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801670a:	4618      	mov	r0, r3
 801670c:	f7ff fe06 	bl	801631c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016710:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016714:	2b09      	cmp	r3, #9
 8016716:	dd06      	ble.n	8016726 <etharp_find_entry+0x256>
 8016718:	4b23      	ldr	r3, [pc, #140]	; (80167a8 <etharp_find_entry+0x2d8>)
 801671a:	f240 1283 	movw	r2, #387	; 0x183
 801671e:	4926      	ldr	r1, [pc, #152]	; (80167b8 <etharp_find_entry+0x2e8>)
 8016720:	4823      	ldr	r0, [pc, #140]	; (80167b0 <etharp_find_entry+0x2e0>)
 8016722:	f002 f9d5 	bl	8018ad0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016726:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801672a:	491e      	ldr	r1, [pc, #120]	; (80167a4 <etharp_find_entry+0x2d4>)
 801672c:	4613      	mov	r3, r2
 801672e:	005b      	lsls	r3, r3, #1
 8016730:	4413      	add	r3, r2
 8016732:	00db      	lsls	r3, r3, #3
 8016734:	440b      	add	r3, r1
 8016736:	3314      	adds	r3, #20
 8016738:	781b      	ldrb	r3, [r3, #0]
 801673a:	2b00      	cmp	r3, #0
 801673c:	d006      	beq.n	801674c <etharp_find_entry+0x27c>
 801673e:	4b1a      	ldr	r3, [pc, #104]	; (80167a8 <etharp_find_entry+0x2d8>)
 8016740:	f240 1285 	movw	r2, #389	; 0x185
 8016744:	491d      	ldr	r1, [pc, #116]	; (80167bc <etharp_find_entry+0x2ec>)
 8016746:	481a      	ldr	r0, [pc, #104]	; (80167b0 <etharp_find_entry+0x2e0>)
 8016748:	f002 f9c2 	bl	8018ad0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801674c:	68fb      	ldr	r3, [r7, #12]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d00b      	beq.n	801676a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016752:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	6819      	ldr	r1, [r3, #0]
 801675a:	4812      	ldr	r0, [pc, #72]	; (80167a4 <etharp_find_entry+0x2d4>)
 801675c:	4613      	mov	r3, r2
 801675e:	005b      	lsls	r3, r3, #1
 8016760:	4413      	add	r3, r2
 8016762:	00db      	lsls	r3, r3, #3
 8016764:	4403      	add	r3, r0
 8016766:	3304      	adds	r3, #4
 8016768:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801676a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801676e:	490d      	ldr	r1, [pc, #52]	; (80167a4 <etharp_find_entry+0x2d4>)
 8016770:	4613      	mov	r3, r2
 8016772:	005b      	lsls	r3, r3, #1
 8016774:	4413      	add	r3, r2
 8016776:	00db      	lsls	r3, r3, #3
 8016778:	440b      	add	r3, r1
 801677a:	3312      	adds	r3, #18
 801677c:	2200      	movs	r2, #0
 801677e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016780:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016784:	4907      	ldr	r1, [pc, #28]	; (80167a4 <etharp_find_entry+0x2d4>)
 8016786:	4613      	mov	r3, r2
 8016788:	005b      	lsls	r3, r3, #1
 801678a:	4413      	add	r3, r2
 801678c:	00db      	lsls	r3, r3, #3
 801678e:	440b      	add	r3, r1
 8016790:	3308      	adds	r3, #8
 8016792:	687a      	ldr	r2, [r7, #4]
 8016794:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016796:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801679a:	4618      	mov	r0, r3
 801679c:	3728      	adds	r7, #40	; 0x28
 801679e:	46bd      	mov	sp, r7
 80167a0:	bd80      	pop	{r7, pc}
 80167a2:	bf00      	nop
 80167a4:	200004c8 	.word	0x200004c8
 80167a8:	0801bfb8 	.word	0x0801bfb8
 80167ac:	0801bff0 	.word	0x0801bff0
 80167b0:	0801c030 	.word	0x0801c030
 80167b4:	0801c058 	.word	0x0801c058
 80167b8:	0801c070 	.word	0x0801c070
 80167bc:	0801c084 	.word	0x0801c084

080167c0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80167c0:	b580      	push	{r7, lr}
 80167c2:	b088      	sub	sp, #32
 80167c4:	af02      	add	r7, sp, #8
 80167c6:	60f8      	str	r0, [r7, #12]
 80167c8:	60b9      	str	r1, [r7, #8]
 80167ca:	607a      	str	r2, [r7, #4]
 80167cc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80167d4:	2b06      	cmp	r3, #6
 80167d6:	d006      	beq.n	80167e6 <etharp_update_arp_entry+0x26>
 80167d8:	4b48      	ldr	r3, [pc, #288]	; (80168fc <etharp_update_arp_entry+0x13c>)
 80167da:	f240 12a9 	movw	r2, #425	; 0x1a9
 80167de:	4948      	ldr	r1, [pc, #288]	; (8016900 <etharp_update_arp_entry+0x140>)
 80167e0:	4848      	ldr	r0, [pc, #288]	; (8016904 <etharp_update_arp_entry+0x144>)
 80167e2:	f002 f975 	bl	8018ad0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80167e6:	68bb      	ldr	r3, [r7, #8]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d012      	beq.n	8016812 <etharp_update_arp_entry+0x52>
 80167ec:	68bb      	ldr	r3, [r7, #8]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d00e      	beq.n	8016812 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80167f4:	68bb      	ldr	r3, [r7, #8]
 80167f6:	681b      	ldr	r3, [r3, #0]
 80167f8:	68f9      	ldr	r1, [r7, #12]
 80167fa:	4618      	mov	r0, r3
 80167fc:	f001 f91e 	bl	8017a3c <ip4_addr_isbroadcast_u32>
 8016800:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016802:	2b00      	cmp	r3, #0
 8016804:	d105      	bne.n	8016812 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016806:	68bb      	ldr	r3, [r7, #8]
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801680e:	2be0      	cmp	r3, #224	; 0xe0
 8016810:	d102      	bne.n	8016818 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016812:	f06f 030f 	mvn.w	r3, #15
 8016816:	e06c      	b.n	80168f2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016818:	78fb      	ldrb	r3, [r7, #3]
 801681a:	68fa      	ldr	r2, [r7, #12]
 801681c:	4619      	mov	r1, r3
 801681e:	68b8      	ldr	r0, [r7, #8]
 8016820:	f7ff fe56 	bl	80164d0 <etharp_find_entry>
 8016824:	4603      	mov	r3, r0
 8016826:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016828:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801682c:	2b00      	cmp	r3, #0
 801682e:	da02      	bge.n	8016836 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016830:	8afb      	ldrh	r3, [r7, #22]
 8016832:	b25b      	sxtb	r3, r3
 8016834:	e05d      	b.n	80168f2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016836:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801683a:	4933      	ldr	r1, [pc, #204]	; (8016908 <etharp_update_arp_entry+0x148>)
 801683c:	4613      	mov	r3, r2
 801683e:	005b      	lsls	r3, r3, #1
 8016840:	4413      	add	r3, r2
 8016842:	00db      	lsls	r3, r3, #3
 8016844:	440b      	add	r3, r1
 8016846:	3314      	adds	r3, #20
 8016848:	2202      	movs	r2, #2
 801684a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801684c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016850:	492d      	ldr	r1, [pc, #180]	; (8016908 <etharp_update_arp_entry+0x148>)
 8016852:	4613      	mov	r3, r2
 8016854:	005b      	lsls	r3, r3, #1
 8016856:	4413      	add	r3, r2
 8016858:	00db      	lsls	r3, r3, #3
 801685a:	440b      	add	r3, r1
 801685c:	3308      	adds	r3, #8
 801685e:	68fa      	ldr	r2, [r7, #12]
 8016860:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016862:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016866:	4613      	mov	r3, r2
 8016868:	005b      	lsls	r3, r3, #1
 801686a:	4413      	add	r3, r2
 801686c:	00db      	lsls	r3, r3, #3
 801686e:	3308      	adds	r3, #8
 8016870:	4a25      	ldr	r2, [pc, #148]	; (8016908 <etharp_update_arp_entry+0x148>)
 8016872:	4413      	add	r3, r2
 8016874:	3304      	adds	r3, #4
 8016876:	2206      	movs	r2, #6
 8016878:	6879      	ldr	r1, [r7, #4]
 801687a:	4618      	mov	r0, r3
 801687c:	f002 f86d 	bl	801895a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016880:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016884:	4920      	ldr	r1, [pc, #128]	; (8016908 <etharp_update_arp_entry+0x148>)
 8016886:	4613      	mov	r3, r2
 8016888:	005b      	lsls	r3, r3, #1
 801688a:	4413      	add	r3, r2
 801688c:	00db      	lsls	r3, r3, #3
 801688e:	440b      	add	r3, r1
 8016890:	3312      	adds	r3, #18
 8016892:	2200      	movs	r2, #0
 8016894:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016896:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801689a:	491b      	ldr	r1, [pc, #108]	; (8016908 <etharp_update_arp_entry+0x148>)
 801689c:	4613      	mov	r3, r2
 801689e:	005b      	lsls	r3, r3, #1
 80168a0:	4413      	add	r3, r2
 80168a2:	00db      	lsls	r3, r3, #3
 80168a4:	440b      	add	r3, r1
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d021      	beq.n	80168f0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80168ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80168b0:	4915      	ldr	r1, [pc, #84]	; (8016908 <etharp_update_arp_entry+0x148>)
 80168b2:	4613      	mov	r3, r2
 80168b4:	005b      	lsls	r3, r3, #1
 80168b6:	4413      	add	r3, r2
 80168b8:	00db      	lsls	r3, r3, #3
 80168ba:	440b      	add	r3, r1
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80168c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80168c4:	4910      	ldr	r1, [pc, #64]	; (8016908 <etharp_update_arp_entry+0x148>)
 80168c6:	4613      	mov	r3, r2
 80168c8:	005b      	lsls	r3, r3, #1
 80168ca:	4413      	add	r3, r2
 80168cc:	00db      	lsls	r3, r3, #3
 80168ce:	440b      	add	r3, r1
 80168d0:	2200      	movs	r2, #0
 80168d2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80168da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80168de:	9300      	str	r3, [sp, #0]
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	6939      	ldr	r1, [r7, #16]
 80168e4:	68f8      	ldr	r0, [r7, #12]
 80168e6:	f001 ffad 	bl	8018844 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80168ea:	6938      	ldr	r0, [r7, #16]
 80168ec:	f7f7 fc6a 	bl	800e1c4 <pbuf_free>
  }
  return ERR_OK;
 80168f0:	2300      	movs	r3, #0
}
 80168f2:	4618      	mov	r0, r3
 80168f4:	3718      	adds	r7, #24
 80168f6:	46bd      	mov	sp, r7
 80168f8:	bd80      	pop	{r7, pc}
 80168fa:	bf00      	nop
 80168fc:	0801bfb8 	.word	0x0801bfb8
 8016900:	0801c0b0 	.word	0x0801c0b0
 8016904:	0801c030 	.word	0x0801c030
 8016908:	200004c8 	.word	0x200004c8

0801690c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801690c:	b580      	push	{r7, lr}
 801690e:	b084      	sub	sp, #16
 8016910:	af00      	add	r7, sp, #0
 8016912:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016914:	2300      	movs	r3, #0
 8016916:	60fb      	str	r3, [r7, #12]
 8016918:	e01e      	b.n	8016958 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801691a:	4913      	ldr	r1, [pc, #76]	; (8016968 <etharp_cleanup_netif+0x5c>)
 801691c:	68fa      	ldr	r2, [r7, #12]
 801691e:	4613      	mov	r3, r2
 8016920:	005b      	lsls	r3, r3, #1
 8016922:	4413      	add	r3, r2
 8016924:	00db      	lsls	r3, r3, #3
 8016926:	440b      	add	r3, r1
 8016928:	3314      	adds	r3, #20
 801692a:	781b      	ldrb	r3, [r3, #0]
 801692c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801692e:	7afb      	ldrb	r3, [r7, #11]
 8016930:	2b00      	cmp	r3, #0
 8016932:	d00e      	beq.n	8016952 <etharp_cleanup_netif+0x46>
 8016934:	490c      	ldr	r1, [pc, #48]	; (8016968 <etharp_cleanup_netif+0x5c>)
 8016936:	68fa      	ldr	r2, [r7, #12]
 8016938:	4613      	mov	r3, r2
 801693a:	005b      	lsls	r3, r3, #1
 801693c:	4413      	add	r3, r2
 801693e:	00db      	lsls	r3, r3, #3
 8016940:	440b      	add	r3, r1
 8016942:	3308      	adds	r3, #8
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	687a      	ldr	r2, [r7, #4]
 8016948:	429a      	cmp	r2, r3
 801694a:	d102      	bne.n	8016952 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801694c:	68f8      	ldr	r0, [r7, #12]
 801694e:	f7ff fce5 	bl	801631c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016952:	68fb      	ldr	r3, [r7, #12]
 8016954:	3301      	adds	r3, #1
 8016956:	60fb      	str	r3, [r7, #12]
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	2b09      	cmp	r3, #9
 801695c:	dddd      	ble.n	801691a <etharp_cleanup_netif+0xe>
    }
  }
}
 801695e:	bf00      	nop
 8016960:	3710      	adds	r7, #16
 8016962:	46bd      	mov	sp, r7
 8016964:	bd80      	pop	{r7, pc}
 8016966:	bf00      	nop
 8016968:	200004c8 	.word	0x200004c8

0801696c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801696c:	b5b0      	push	{r4, r5, r7, lr}
 801696e:	b08a      	sub	sp, #40	; 0x28
 8016970:	af04      	add	r7, sp, #16
 8016972:	6078      	str	r0, [r7, #4]
 8016974:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016976:	683b      	ldr	r3, [r7, #0]
 8016978:	2b00      	cmp	r3, #0
 801697a:	d107      	bne.n	801698c <etharp_input+0x20>
 801697c:	4b3f      	ldr	r3, [pc, #252]	; (8016a7c <etharp_input+0x110>)
 801697e:	f240 228a 	movw	r2, #650	; 0x28a
 8016982:	493f      	ldr	r1, [pc, #252]	; (8016a80 <etharp_input+0x114>)
 8016984:	483f      	ldr	r0, [pc, #252]	; (8016a84 <etharp_input+0x118>)
 8016986:	f002 f8a3 	bl	8018ad0 <iprintf>
 801698a:	e074      	b.n	8016a76 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	685b      	ldr	r3, [r3, #4]
 8016990:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016992:	693b      	ldr	r3, [r7, #16]
 8016994:	881b      	ldrh	r3, [r3, #0]
 8016996:	b29b      	uxth	r3, r3
 8016998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801699c:	d10c      	bne.n	80169b8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801699e:	693b      	ldr	r3, [r7, #16]
 80169a0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80169a2:	2b06      	cmp	r3, #6
 80169a4:	d108      	bne.n	80169b8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80169a6:	693b      	ldr	r3, [r7, #16]
 80169a8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80169aa:	2b04      	cmp	r3, #4
 80169ac:	d104      	bne.n	80169b8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80169ae:	693b      	ldr	r3, [r7, #16]
 80169b0:	885b      	ldrh	r3, [r3, #2]
 80169b2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80169b4:	2b08      	cmp	r3, #8
 80169b6:	d003      	beq.n	80169c0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80169b8:	6878      	ldr	r0, [r7, #4]
 80169ba:	f7f7 fc03 	bl	800e1c4 <pbuf_free>
    return;
 80169be:	e05a      	b.n	8016a76 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80169c0:	693b      	ldr	r3, [r7, #16]
 80169c2:	330e      	adds	r3, #14
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80169c8:	693b      	ldr	r3, [r7, #16]
 80169ca:	3318      	adds	r3, #24
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80169d0:	683b      	ldr	r3, [r7, #0]
 80169d2:	3304      	adds	r3, #4
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d102      	bne.n	80169e0 <etharp_input+0x74>
    for_us = 0;
 80169da:	2300      	movs	r3, #0
 80169dc:	75fb      	strb	r3, [r7, #23]
 80169de:	e009      	b.n	80169f4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80169e0:	68ba      	ldr	r2, [r7, #8]
 80169e2:	683b      	ldr	r3, [r7, #0]
 80169e4:	3304      	adds	r3, #4
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	429a      	cmp	r2, r3
 80169ea:	bf0c      	ite	eq
 80169ec:	2301      	moveq	r3, #1
 80169ee:	2300      	movne	r3, #0
 80169f0:	b2db      	uxtb	r3, r3
 80169f2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80169f4:	693b      	ldr	r3, [r7, #16]
 80169f6:	f103 0208 	add.w	r2, r3, #8
 80169fa:	7dfb      	ldrb	r3, [r7, #23]
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d001      	beq.n	8016a04 <etharp_input+0x98>
 8016a00:	2301      	movs	r3, #1
 8016a02:	e000      	b.n	8016a06 <etharp_input+0x9a>
 8016a04:	2302      	movs	r3, #2
 8016a06:	f107 010c 	add.w	r1, r7, #12
 8016a0a:	6838      	ldr	r0, [r7, #0]
 8016a0c:	f7ff fed8 	bl	80167c0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016a10:	693b      	ldr	r3, [r7, #16]
 8016a12:	88db      	ldrh	r3, [r3, #6]
 8016a14:	b29b      	uxth	r3, r3
 8016a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016a1a:	d003      	beq.n	8016a24 <etharp_input+0xb8>
 8016a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016a20:	d01e      	beq.n	8016a60 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016a22:	e025      	b.n	8016a70 <etharp_input+0x104>
      if (for_us) {
 8016a24:	7dfb      	ldrb	r3, [r7, #23]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d021      	beq.n	8016a6e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016a2a:	683b      	ldr	r3, [r7, #0]
 8016a2c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016a30:	693b      	ldr	r3, [r7, #16]
 8016a32:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016a36:	683b      	ldr	r3, [r7, #0]
 8016a38:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8016a3c:	683b      	ldr	r3, [r7, #0]
 8016a3e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016a40:	693a      	ldr	r2, [r7, #16]
 8016a42:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016a44:	2102      	movs	r1, #2
 8016a46:	9103      	str	r1, [sp, #12]
 8016a48:	f107 010c 	add.w	r1, r7, #12
 8016a4c:	9102      	str	r1, [sp, #8]
 8016a4e:	9201      	str	r2, [sp, #4]
 8016a50:	9300      	str	r3, [sp, #0]
 8016a52:	462b      	mov	r3, r5
 8016a54:	4622      	mov	r2, r4
 8016a56:	4601      	mov	r1, r0
 8016a58:	6838      	ldr	r0, [r7, #0]
 8016a5a:	f000 faef 	bl	801703c <etharp_raw>
      break;
 8016a5e:	e006      	b.n	8016a6e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8016a60:	f107 030c 	add.w	r3, r7, #12
 8016a64:	4619      	mov	r1, r3
 8016a66:	6838      	ldr	r0, [r7, #0]
 8016a68:	f7fe f9fe 	bl	8014e68 <dhcp_arp_reply>
      break;
 8016a6c:	e000      	b.n	8016a70 <etharp_input+0x104>
      break;
 8016a6e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016a70:	6878      	ldr	r0, [r7, #4]
 8016a72:	f7f7 fba7 	bl	800e1c4 <pbuf_free>
}
 8016a76:	3718      	adds	r7, #24
 8016a78:	46bd      	mov	sp, r7
 8016a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8016a7c:	0801bfb8 	.word	0x0801bfb8
 8016a80:	0801c108 	.word	0x0801c108
 8016a84:	0801c030 	.word	0x0801c030

08016a88 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016a88:	b580      	push	{r7, lr}
 8016a8a:	b086      	sub	sp, #24
 8016a8c:	af02      	add	r7, sp, #8
 8016a8e:	60f8      	str	r0, [r7, #12]
 8016a90:	60b9      	str	r1, [r7, #8]
 8016a92:	4613      	mov	r3, r2
 8016a94:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016a96:	79fa      	ldrb	r2, [r7, #7]
 8016a98:	4944      	ldr	r1, [pc, #272]	; (8016bac <etharp_output_to_arp_index+0x124>)
 8016a9a:	4613      	mov	r3, r2
 8016a9c:	005b      	lsls	r3, r3, #1
 8016a9e:	4413      	add	r3, r2
 8016aa0:	00db      	lsls	r3, r3, #3
 8016aa2:	440b      	add	r3, r1
 8016aa4:	3314      	adds	r3, #20
 8016aa6:	781b      	ldrb	r3, [r3, #0]
 8016aa8:	2b01      	cmp	r3, #1
 8016aaa:	d806      	bhi.n	8016aba <etharp_output_to_arp_index+0x32>
 8016aac:	4b40      	ldr	r3, [pc, #256]	; (8016bb0 <etharp_output_to_arp_index+0x128>)
 8016aae:	f240 22ef 	movw	r2, #751	; 0x2ef
 8016ab2:	4940      	ldr	r1, [pc, #256]	; (8016bb4 <etharp_output_to_arp_index+0x12c>)
 8016ab4:	4840      	ldr	r0, [pc, #256]	; (8016bb8 <etharp_output_to_arp_index+0x130>)
 8016ab6:	f002 f80b 	bl	8018ad0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016aba:	79fa      	ldrb	r2, [r7, #7]
 8016abc:	493b      	ldr	r1, [pc, #236]	; (8016bac <etharp_output_to_arp_index+0x124>)
 8016abe:	4613      	mov	r3, r2
 8016ac0:	005b      	lsls	r3, r3, #1
 8016ac2:	4413      	add	r3, r2
 8016ac4:	00db      	lsls	r3, r3, #3
 8016ac6:	440b      	add	r3, r1
 8016ac8:	3314      	adds	r3, #20
 8016aca:	781b      	ldrb	r3, [r3, #0]
 8016acc:	2b02      	cmp	r3, #2
 8016ace:	d153      	bne.n	8016b78 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016ad0:	79fa      	ldrb	r2, [r7, #7]
 8016ad2:	4936      	ldr	r1, [pc, #216]	; (8016bac <etharp_output_to_arp_index+0x124>)
 8016ad4:	4613      	mov	r3, r2
 8016ad6:	005b      	lsls	r3, r3, #1
 8016ad8:	4413      	add	r3, r2
 8016ada:	00db      	lsls	r3, r3, #3
 8016adc:	440b      	add	r3, r1
 8016ade:	3312      	adds	r3, #18
 8016ae0:	881b      	ldrh	r3, [r3, #0]
 8016ae2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016ae6:	d919      	bls.n	8016b1c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016ae8:	79fa      	ldrb	r2, [r7, #7]
 8016aea:	4613      	mov	r3, r2
 8016aec:	005b      	lsls	r3, r3, #1
 8016aee:	4413      	add	r3, r2
 8016af0:	00db      	lsls	r3, r3, #3
 8016af2:	4a2e      	ldr	r2, [pc, #184]	; (8016bac <etharp_output_to_arp_index+0x124>)
 8016af4:	4413      	add	r3, r2
 8016af6:	3304      	adds	r3, #4
 8016af8:	4619      	mov	r1, r3
 8016afa:	68f8      	ldr	r0, [r7, #12]
 8016afc:	f000 fb4c 	bl	8017198 <etharp_request>
 8016b00:	4603      	mov	r3, r0
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d138      	bne.n	8016b78 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016b06:	79fa      	ldrb	r2, [r7, #7]
 8016b08:	4928      	ldr	r1, [pc, #160]	; (8016bac <etharp_output_to_arp_index+0x124>)
 8016b0a:	4613      	mov	r3, r2
 8016b0c:	005b      	lsls	r3, r3, #1
 8016b0e:	4413      	add	r3, r2
 8016b10:	00db      	lsls	r3, r3, #3
 8016b12:	440b      	add	r3, r1
 8016b14:	3314      	adds	r3, #20
 8016b16:	2203      	movs	r2, #3
 8016b18:	701a      	strb	r2, [r3, #0]
 8016b1a:	e02d      	b.n	8016b78 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016b1c:	79fa      	ldrb	r2, [r7, #7]
 8016b1e:	4923      	ldr	r1, [pc, #140]	; (8016bac <etharp_output_to_arp_index+0x124>)
 8016b20:	4613      	mov	r3, r2
 8016b22:	005b      	lsls	r3, r3, #1
 8016b24:	4413      	add	r3, r2
 8016b26:	00db      	lsls	r3, r3, #3
 8016b28:	440b      	add	r3, r1
 8016b2a:	3312      	adds	r3, #18
 8016b2c:	881b      	ldrh	r3, [r3, #0]
 8016b2e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016b32:	d321      	bcc.n	8016b78 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016b34:	79fa      	ldrb	r2, [r7, #7]
 8016b36:	4613      	mov	r3, r2
 8016b38:	005b      	lsls	r3, r3, #1
 8016b3a:	4413      	add	r3, r2
 8016b3c:	00db      	lsls	r3, r3, #3
 8016b3e:	4a1b      	ldr	r2, [pc, #108]	; (8016bac <etharp_output_to_arp_index+0x124>)
 8016b40:	4413      	add	r3, r2
 8016b42:	1d19      	adds	r1, r3, #4
 8016b44:	79fa      	ldrb	r2, [r7, #7]
 8016b46:	4613      	mov	r3, r2
 8016b48:	005b      	lsls	r3, r3, #1
 8016b4a:	4413      	add	r3, r2
 8016b4c:	00db      	lsls	r3, r3, #3
 8016b4e:	3308      	adds	r3, #8
 8016b50:	4a16      	ldr	r2, [pc, #88]	; (8016bac <etharp_output_to_arp_index+0x124>)
 8016b52:	4413      	add	r3, r2
 8016b54:	3304      	adds	r3, #4
 8016b56:	461a      	mov	r2, r3
 8016b58:	68f8      	ldr	r0, [r7, #12]
 8016b5a:	f000 fafb 	bl	8017154 <etharp_request_dst>
 8016b5e:	4603      	mov	r3, r0
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d109      	bne.n	8016b78 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016b64:	79fa      	ldrb	r2, [r7, #7]
 8016b66:	4911      	ldr	r1, [pc, #68]	; (8016bac <etharp_output_to_arp_index+0x124>)
 8016b68:	4613      	mov	r3, r2
 8016b6a:	005b      	lsls	r3, r3, #1
 8016b6c:	4413      	add	r3, r2
 8016b6e:	00db      	lsls	r3, r3, #3
 8016b70:	440b      	add	r3, r1
 8016b72:	3314      	adds	r3, #20
 8016b74:	2203      	movs	r2, #3
 8016b76:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8016b7e:	79fa      	ldrb	r2, [r7, #7]
 8016b80:	4613      	mov	r3, r2
 8016b82:	005b      	lsls	r3, r3, #1
 8016b84:	4413      	add	r3, r2
 8016b86:	00db      	lsls	r3, r3, #3
 8016b88:	3308      	adds	r3, #8
 8016b8a:	4a08      	ldr	r2, [pc, #32]	; (8016bac <etharp_output_to_arp_index+0x124>)
 8016b8c:	4413      	add	r3, r2
 8016b8e:	1d1a      	adds	r2, r3, #4
 8016b90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016b94:	9300      	str	r3, [sp, #0]
 8016b96:	4613      	mov	r3, r2
 8016b98:	460a      	mov	r2, r1
 8016b9a:	68b9      	ldr	r1, [r7, #8]
 8016b9c:	68f8      	ldr	r0, [r7, #12]
 8016b9e:	f001 fe51 	bl	8018844 <ethernet_output>
 8016ba2:	4603      	mov	r3, r0
}
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	3710      	adds	r7, #16
 8016ba8:	46bd      	mov	sp, r7
 8016baa:	bd80      	pop	{r7, pc}
 8016bac:	200004c8 	.word	0x200004c8
 8016bb0:	0801bfb8 	.word	0x0801bfb8
 8016bb4:	0801c128 	.word	0x0801c128
 8016bb8:	0801c030 	.word	0x0801c030

08016bbc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016bbc:	b580      	push	{r7, lr}
 8016bbe:	b08a      	sub	sp, #40	; 0x28
 8016bc0:	af02      	add	r7, sp, #8
 8016bc2:	60f8      	str	r0, [r7, #12]
 8016bc4:	60b9      	str	r1, [r7, #8]
 8016bc6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d106      	bne.n	8016be0 <etharp_output+0x24>
 8016bd2:	4b73      	ldr	r3, [pc, #460]	; (8016da0 <etharp_output+0x1e4>)
 8016bd4:	f240 321e 	movw	r2, #798	; 0x31e
 8016bd8:	4972      	ldr	r1, [pc, #456]	; (8016da4 <etharp_output+0x1e8>)
 8016bda:	4873      	ldr	r0, [pc, #460]	; (8016da8 <etharp_output+0x1ec>)
 8016bdc:	f001 ff78 	bl	8018ad0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016be0:	68bb      	ldr	r3, [r7, #8]
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d106      	bne.n	8016bf4 <etharp_output+0x38>
 8016be6:	4b6e      	ldr	r3, [pc, #440]	; (8016da0 <etharp_output+0x1e4>)
 8016be8:	f240 321f 	movw	r2, #799	; 0x31f
 8016bec:	496f      	ldr	r1, [pc, #444]	; (8016dac <etharp_output+0x1f0>)
 8016bee:	486e      	ldr	r0, [pc, #440]	; (8016da8 <etharp_output+0x1ec>)
 8016bf0:	f001 ff6e 	bl	8018ad0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d106      	bne.n	8016c08 <etharp_output+0x4c>
 8016bfa:	4b69      	ldr	r3, [pc, #420]	; (8016da0 <etharp_output+0x1e4>)
 8016bfc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016c00:	496b      	ldr	r1, [pc, #428]	; (8016db0 <etharp_output+0x1f4>)
 8016c02:	4869      	ldr	r0, [pc, #420]	; (8016da8 <etharp_output+0x1ec>)
 8016c04:	f001 ff64 	bl	8018ad0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	681b      	ldr	r3, [r3, #0]
 8016c0c:	68f9      	ldr	r1, [r7, #12]
 8016c0e:	4618      	mov	r0, r3
 8016c10:	f000 ff14 	bl	8017a3c <ip4_addr_isbroadcast_u32>
 8016c14:	4603      	mov	r3, r0
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d002      	beq.n	8016c20 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016c1a:	4b66      	ldr	r3, [pc, #408]	; (8016db4 <etharp_output+0x1f8>)
 8016c1c:	61fb      	str	r3, [r7, #28]
 8016c1e:	e0af      	b.n	8016d80 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	681b      	ldr	r3, [r3, #0]
 8016c24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016c28:	2be0      	cmp	r3, #224	; 0xe0
 8016c2a:	d118      	bne.n	8016c5e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016c2c:	2301      	movs	r3, #1
 8016c2e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016c30:	2300      	movs	r3, #0
 8016c32:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016c34:	235e      	movs	r3, #94	; 0x5e
 8016c36:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	3301      	adds	r3, #1
 8016c3c:	781b      	ldrb	r3, [r3, #0]
 8016c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016c42:	b2db      	uxtb	r3, r3
 8016c44:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	3302      	adds	r3, #2
 8016c4a:	781b      	ldrb	r3, [r3, #0]
 8016c4c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	3303      	adds	r3, #3
 8016c52:	781b      	ldrb	r3, [r3, #0]
 8016c54:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016c56:	f107 0310 	add.w	r3, r7, #16
 8016c5a:	61fb      	str	r3, [r7, #28]
 8016c5c:	e090      	b.n	8016d80 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	681a      	ldr	r2, [r3, #0]
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	3304      	adds	r3, #4
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	405a      	eors	r2, r3
 8016c6a:	68fb      	ldr	r3, [r7, #12]
 8016c6c:	3308      	adds	r3, #8
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	4013      	ands	r3, r2
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d012      	beq.n	8016c9c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016c7c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016c80:	4293      	cmp	r3, r2
 8016c82:	d00b      	beq.n	8016c9c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016c84:	68fb      	ldr	r3, [r7, #12]
 8016c86:	330c      	adds	r3, #12
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d003      	beq.n	8016c96 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	330c      	adds	r3, #12
 8016c92:	61bb      	str	r3, [r7, #24]
 8016c94:	e002      	b.n	8016c9c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016c96:	f06f 0303 	mvn.w	r3, #3
 8016c9a:	e07d      	b.n	8016d98 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016c9c:	4b46      	ldr	r3, [pc, #280]	; (8016db8 <etharp_output+0x1fc>)
 8016c9e:	781b      	ldrb	r3, [r3, #0]
 8016ca0:	4619      	mov	r1, r3
 8016ca2:	4a46      	ldr	r2, [pc, #280]	; (8016dbc <etharp_output+0x200>)
 8016ca4:	460b      	mov	r3, r1
 8016ca6:	005b      	lsls	r3, r3, #1
 8016ca8:	440b      	add	r3, r1
 8016caa:	00db      	lsls	r3, r3, #3
 8016cac:	4413      	add	r3, r2
 8016cae:	3314      	adds	r3, #20
 8016cb0:	781b      	ldrb	r3, [r3, #0]
 8016cb2:	2b01      	cmp	r3, #1
 8016cb4:	d925      	bls.n	8016d02 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016cb6:	4b40      	ldr	r3, [pc, #256]	; (8016db8 <etharp_output+0x1fc>)
 8016cb8:	781b      	ldrb	r3, [r3, #0]
 8016cba:	4619      	mov	r1, r3
 8016cbc:	4a3f      	ldr	r2, [pc, #252]	; (8016dbc <etharp_output+0x200>)
 8016cbe:	460b      	mov	r3, r1
 8016cc0:	005b      	lsls	r3, r3, #1
 8016cc2:	440b      	add	r3, r1
 8016cc4:	00db      	lsls	r3, r3, #3
 8016cc6:	4413      	add	r3, r2
 8016cc8:	3308      	adds	r3, #8
 8016cca:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016ccc:	68fa      	ldr	r2, [r7, #12]
 8016cce:	429a      	cmp	r2, r3
 8016cd0:	d117      	bne.n	8016d02 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016cd2:	69bb      	ldr	r3, [r7, #24]
 8016cd4:	681a      	ldr	r2, [r3, #0]
 8016cd6:	4b38      	ldr	r3, [pc, #224]	; (8016db8 <etharp_output+0x1fc>)
 8016cd8:	781b      	ldrb	r3, [r3, #0]
 8016cda:	4618      	mov	r0, r3
 8016cdc:	4937      	ldr	r1, [pc, #220]	; (8016dbc <etharp_output+0x200>)
 8016cde:	4603      	mov	r3, r0
 8016ce0:	005b      	lsls	r3, r3, #1
 8016ce2:	4403      	add	r3, r0
 8016ce4:	00db      	lsls	r3, r3, #3
 8016ce6:	440b      	add	r3, r1
 8016ce8:	3304      	adds	r3, #4
 8016cea:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016cec:	429a      	cmp	r2, r3
 8016cee:	d108      	bne.n	8016d02 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016cf0:	4b31      	ldr	r3, [pc, #196]	; (8016db8 <etharp_output+0x1fc>)
 8016cf2:	781b      	ldrb	r3, [r3, #0]
 8016cf4:	461a      	mov	r2, r3
 8016cf6:	68b9      	ldr	r1, [r7, #8]
 8016cf8:	68f8      	ldr	r0, [r7, #12]
 8016cfa:	f7ff fec5 	bl	8016a88 <etharp_output_to_arp_index>
 8016cfe:	4603      	mov	r3, r0
 8016d00:	e04a      	b.n	8016d98 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016d02:	2300      	movs	r3, #0
 8016d04:	75fb      	strb	r3, [r7, #23]
 8016d06:	e031      	b.n	8016d6c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016d08:	7dfa      	ldrb	r2, [r7, #23]
 8016d0a:	492c      	ldr	r1, [pc, #176]	; (8016dbc <etharp_output+0x200>)
 8016d0c:	4613      	mov	r3, r2
 8016d0e:	005b      	lsls	r3, r3, #1
 8016d10:	4413      	add	r3, r2
 8016d12:	00db      	lsls	r3, r3, #3
 8016d14:	440b      	add	r3, r1
 8016d16:	3314      	adds	r3, #20
 8016d18:	781b      	ldrb	r3, [r3, #0]
 8016d1a:	2b01      	cmp	r3, #1
 8016d1c:	d923      	bls.n	8016d66 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016d1e:	7dfa      	ldrb	r2, [r7, #23]
 8016d20:	4926      	ldr	r1, [pc, #152]	; (8016dbc <etharp_output+0x200>)
 8016d22:	4613      	mov	r3, r2
 8016d24:	005b      	lsls	r3, r3, #1
 8016d26:	4413      	add	r3, r2
 8016d28:	00db      	lsls	r3, r3, #3
 8016d2a:	440b      	add	r3, r1
 8016d2c:	3308      	adds	r3, #8
 8016d2e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016d30:	68fa      	ldr	r2, [r7, #12]
 8016d32:	429a      	cmp	r2, r3
 8016d34:	d117      	bne.n	8016d66 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016d36:	69bb      	ldr	r3, [r7, #24]
 8016d38:	6819      	ldr	r1, [r3, #0]
 8016d3a:	7dfa      	ldrb	r2, [r7, #23]
 8016d3c:	481f      	ldr	r0, [pc, #124]	; (8016dbc <etharp_output+0x200>)
 8016d3e:	4613      	mov	r3, r2
 8016d40:	005b      	lsls	r3, r3, #1
 8016d42:	4413      	add	r3, r2
 8016d44:	00db      	lsls	r3, r3, #3
 8016d46:	4403      	add	r3, r0
 8016d48:	3304      	adds	r3, #4
 8016d4a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016d4c:	4299      	cmp	r1, r3
 8016d4e:	d10a      	bne.n	8016d66 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016d50:	4a19      	ldr	r2, [pc, #100]	; (8016db8 <etharp_output+0x1fc>)
 8016d52:	7dfb      	ldrb	r3, [r7, #23]
 8016d54:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016d56:	7dfb      	ldrb	r3, [r7, #23]
 8016d58:	461a      	mov	r2, r3
 8016d5a:	68b9      	ldr	r1, [r7, #8]
 8016d5c:	68f8      	ldr	r0, [r7, #12]
 8016d5e:	f7ff fe93 	bl	8016a88 <etharp_output_to_arp_index>
 8016d62:	4603      	mov	r3, r0
 8016d64:	e018      	b.n	8016d98 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016d66:	7dfb      	ldrb	r3, [r7, #23]
 8016d68:	3301      	adds	r3, #1
 8016d6a:	75fb      	strb	r3, [r7, #23]
 8016d6c:	7dfb      	ldrb	r3, [r7, #23]
 8016d6e:	2b09      	cmp	r3, #9
 8016d70:	d9ca      	bls.n	8016d08 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016d72:	68ba      	ldr	r2, [r7, #8]
 8016d74:	69b9      	ldr	r1, [r7, #24]
 8016d76:	68f8      	ldr	r0, [r7, #12]
 8016d78:	f000 f822 	bl	8016dc0 <etharp_query>
 8016d7c:	4603      	mov	r3, r0
 8016d7e:	e00b      	b.n	8016d98 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8016d86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016d8a:	9300      	str	r3, [sp, #0]
 8016d8c:	69fb      	ldr	r3, [r7, #28]
 8016d8e:	68b9      	ldr	r1, [r7, #8]
 8016d90:	68f8      	ldr	r0, [r7, #12]
 8016d92:	f001 fd57 	bl	8018844 <ethernet_output>
 8016d96:	4603      	mov	r3, r0
}
 8016d98:	4618      	mov	r0, r3
 8016d9a:	3720      	adds	r7, #32
 8016d9c:	46bd      	mov	sp, r7
 8016d9e:	bd80      	pop	{r7, pc}
 8016da0:	0801bfb8 	.word	0x0801bfb8
 8016da4:	0801c108 	.word	0x0801c108
 8016da8:	0801c030 	.word	0x0801c030
 8016dac:	0801c158 	.word	0x0801c158
 8016db0:	0801c0f8 	.word	0x0801c0f8
 8016db4:	0802b598 	.word	0x0802b598
 8016db8:	200005b8 	.word	0x200005b8
 8016dbc:	200004c8 	.word	0x200004c8

08016dc0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016dc0:	b580      	push	{r7, lr}
 8016dc2:	b08c      	sub	sp, #48	; 0x30
 8016dc4:	af02      	add	r7, sp, #8
 8016dc6:	60f8      	str	r0, [r7, #12]
 8016dc8:	60b9      	str	r1, [r7, #8]
 8016dca:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	3326      	adds	r3, #38	; 0x26
 8016dd0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016dd2:	23ff      	movs	r3, #255	; 0xff
 8016dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016dd8:	2300      	movs	r3, #0
 8016dda:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016ddc:	68bb      	ldr	r3, [r7, #8]
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	68f9      	ldr	r1, [r7, #12]
 8016de2:	4618      	mov	r0, r3
 8016de4:	f000 fe2a 	bl	8017a3c <ip4_addr_isbroadcast_u32>
 8016de8:	4603      	mov	r3, r0
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d10c      	bne.n	8016e08 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016dee:	68bb      	ldr	r3, [r7, #8]
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016df6:	2be0      	cmp	r3, #224	; 0xe0
 8016df8:	d006      	beq.n	8016e08 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016dfa:	68bb      	ldr	r3, [r7, #8]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d003      	beq.n	8016e08 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016e00:	68bb      	ldr	r3, [r7, #8]
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d102      	bne.n	8016e0e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016e08:	f06f 030f 	mvn.w	r3, #15
 8016e0c:	e102      	b.n	8017014 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016e0e:	68fa      	ldr	r2, [r7, #12]
 8016e10:	2101      	movs	r1, #1
 8016e12:	68b8      	ldr	r0, [r7, #8]
 8016e14:	f7ff fb5c 	bl	80164d0 <etharp_find_entry>
 8016e18:	4603      	mov	r3, r0
 8016e1a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016e1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	da02      	bge.n	8016e2a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016e24:	8a7b      	ldrh	r3, [r7, #18]
 8016e26:	b25b      	sxtb	r3, r3
 8016e28:	e0f4      	b.n	8017014 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016e2a:	8a7b      	ldrh	r3, [r7, #18]
 8016e2c:	2b7e      	cmp	r3, #126	; 0x7e
 8016e2e:	d906      	bls.n	8016e3e <etharp_query+0x7e>
 8016e30:	4b7a      	ldr	r3, [pc, #488]	; (801701c <etharp_query+0x25c>)
 8016e32:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016e36:	497a      	ldr	r1, [pc, #488]	; (8017020 <etharp_query+0x260>)
 8016e38:	487a      	ldr	r0, [pc, #488]	; (8017024 <etharp_query+0x264>)
 8016e3a:	f001 fe49 	bl	8018ad0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016e3e:	8a7b      	ldrh	r3, [r7, #18]
 8016e40:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016e42:	7c7a      	ldrb	r2, [r7, #17]
 8016e44:	4978      	ldr	r1, [pc, #480]	; (8017028 <etharp_query+0x268>)
 8016e46:	4613      	mov	r3, r2
 8016e48:	005b      	lsls	r3, r3, #1
 8016e4a:	4413      	add	r3, r2
 8016e4c:	00db      	lsls	r3, r3, #3
 8016e4e:	440b      	add	r3, r1
 8016e50:	3314      	adds	r3, #20
 8016e52:	781b      	ldrb	r3, [r3, #0]
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d115      	bne.n	8016e84 <etharp_query+0xc4>
    is_new_entry = 1;
 8016e58:	2301      	movs	r3, #1
 8016e5a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016e5c:	7c7a      	ldrb	r2, [r7, #17]
 8016e5e:	4972      	ldr	r1, [pc, #456]	; (8017028 <etharp_query+0x268>)
 8016e60:	4613      	mov	r3, r2
 8016e62:	005b      	lsls	r3, r3, #1
 8016e64:	4413      	add	r3, r2
 8016e66:	00db      	lsls	r3, r3, #3
 8016e68:	440b      	add	r3, r1
 8016e6a:	3314      	adds	r3, #20
 8016e6c:	2201      	movs	r2, #1
 8016e6e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016e70:	7c7a      	ldrb	r2, [r7, #17]
 8016e72:	496d      	ldr	r1, [pc, #436]	; (8017028 <etharp_query+0x268>)
 8016e74:	4613      	mov	r3, r2
 8016e76:	005b      	lsls	r3, r3, #1
 8016e78:	4413      	add	r3, r2
 8016e7a:	00db      	lsls	r3, r3, #3
 8016e7c:	440b      	add	r3, r1
 8016e7e:	3308      	adds	r3, #8
 8016e80:	68fa      	ldr	r2, [r7, #12]
 8016e82:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016e84:	7c7a      	ldrb	r2, [r7, #17]
 8016e86:	4968      	ldr	r1, [pc, #416]	; (8017028 <etharp_query+0x268>)
 8016e88:	4613      	mov	r3, r2
 8016e8a:	005b      	lsls	r3, r3, #1
 8016e8c:	4413      	add	r3, r2
 8016e8e:	00db      	lsls	r3, r3, #3
 8016e90:	440b      	add	r3, r1
 8016e92:	3314      	adds	r3, #20
 8016e94:	781b      	ldrb	r3, [r3, #0]
 8016e96:	2b01      	cmp	r3, #1
 8016e98:	d011      	beq.n	8016ebe <etharp_query+0xfe>
 8016e9a:	7c7a      	ldrb	r2, [r7, #17]
 8016e9c:	4962      	ldr	r1, [pc, #392]	; (8017028 <etharp_query+0x268>)
 8016e9e:	4613      	mov	r3, r2
 8016ea0:	005b      	lsls	r3, r3, #1
 8016ea2:	4413      	add	r3, r2
 8016ea4:	00db      	lsls	r3, r3, #3
 8016ea6:	440b      	add	r3, r1
 8016ea8:	3314      	adds	r3, #20
 8016eaa:	781b      	ldrb	r3, [r3, #0]
 8016eac:	2b01      	cmp	r3, #1
 8016eae:	d806      	bhi.n	8016ebe <etharp_query+0xfe>
 8016eb0:	4b5a      	ldr	r3, [pc, #360]	; (801701c <etharp_query+0x25c>)
 8016eb2:	f240 32cf 	movw	r2, #975	; 0x3cf
 8016eb6:	495d      	ldr	r1, [pc, #372]	; (801702c <etharp_query+0x26c>)
 8016eb8:	485a      	ldr	r0, [pc, #360]	; (8017024 <etharp_query+0x264>)
 8016eba:	f001 fe09 	bl	8018ad0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016ebe:	6a3b      	ldr	r3, [r7, #32]
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d102      	bne.n	8016eca <etharp_query+0x10a>
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d10c      	bne.n	8016ee4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016eca:	68b9      	ldr	r1, [r7, #8]
 8016ecc:	68f8      	ldr	r0, [r7, #12]
 8016ece:	f000 f963 	bl	8017198 <etharp_request>
 8016ed2:	4603      	mov	r3, r0
 8016ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d102      	bne.n	8016ee4 <etharp_query+0x124>
      return result;
 8016ede:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016ee2:	e097      	b.n	8017014 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d106      	bne.n	8016ef8 <etharp_query+0x138>
 8016eea:	4b4c      	ldr	r3, [pc, #304]	; (801701c <etharp_query+0x25c>)
 8016eec:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016ef0:	494f      	ldr	r1, [pc, #316]	; (8017030 <etharp_query+0x270>)
 8016ef2:	484c      	ldr	r0, [pc, #304]	; (8017024 <etharp_query+0x264>)
 8016ef4:	f001 fdec 	bl	8018ad0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016ef8:	7c7a      	ldrb	r2, [r7, #17]
 8016efa:	494b      	ldr	r1, [pc, #300]	; (8017028 <etharp_query+0x268>)
 8016efc:	4613      	mov	r3, r2
 8016efe:	005b      	lsls	r3, r3, #1
 8016f00:	4413      	add	r3, r2
 8016f02:	00db      	lsls	r3, r3, #3
 8016f04:	440b      	add	r3, r1
 8016f06:	3314      	adds	r3, #20
 8016f08:	781b      	ldrb	r3, [r3, #0]
 8016f0a:	2b01      	cmp	r3, #1
 8016f0c:	d918      	bls.n	8016f40 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016f0e:	4a49      	ldr	r2, [pc, #292]	; (8017034 <etharp_query+0x274>)
 8016f10:	7c7b      	ldrb	r3, [r7, #17]
 8016f12:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016f14:	7c7a      	ldrb	r2, [r7, #17]
 8016f16:	4613      	mov	r3, r2
 8016f18:	005b      	lsls	r3, r3, #1
 8016f1a:	4413      	add	r3, r2
 8016f1c:	00db      	lsls	r3, r3, #3
 8016f1e:	3308      	adds	r3, #8
 8016f20:	4a41      	ldr	r2, [pc, #260]	; (8017028 <etharp_query+0x268>)
 8016f22:	4413      	add	r3, r2
 8016f24:	1d1a      	adds	r2, r3, #4
 8016f26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016f2a:	9300      	str	r3, [sp, #0]
 8016f2c:	4613      	mov	r3, r2
 8016f2e:	697a      	ldr	r2, [r7, #20]
 8016f30:	6879      	ldr	r1, [r7, #4]
 8016f32:	68f8      	ldr	r0, [r7, #12]
 8016f34:	f001 fc86 	bl	8018844 <ethernet_output>
 8016f38:	4603      	mov	r3, r0
 8016f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016f3e:	e067      	b.n	8017010 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016f40:	7c7a      	ldrb	r2, [r7, #17]
 8016f42:	4939      	ldr	r1, [pc, #228]	; (8017028 <etharp_query+0x268>)
 8016f44:	4613      	mov	r3, r2
 8016f46:	005b      	lsls	r3, r3, #1
 8016f48:	4413      	add	r3, r2
 8016f4a:	00db      	lsls	r3, r3, #3
 8016f4c:	440b      	add	r3, r1
 8016f4e:	3314      	adds	r3, #20
 8016f50:	781b      	ldrb	r3, [r3, #0]
 8016f52:	2b01      	cmp	r3, #1
 8016f54:	d15c      	bne.n	8017010 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016f56:	2300      	movs	r3, #0
 8016f58:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016f5e:	e01c      	b.n	8016f9a <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016f60:	69fb      	ldr	r3, [r7, #28]
 8016f62:	895a      	ldrh	r2, [r3, #10]
 8016f64:	69fb      	ldr	r3, [r7, #28]
 8016f66:	891b      	ldrh	r3, [r3, #8]
 8016f68:	429a      	cmp	r2, r3
 8016f6a:	d10a      	bne.n	8016f82 <etharp_query+0x1c2>
 8016f6c:	69fb      	ldr	r3, [r7, #28]
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d006      	beq.n	8016f82 <etharp_query+0x1c2>
 8016f74:	4b29      	ldr	r3, [pc, #164]	; (801701c <etharp_query+0x25c>)
 8016f76:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016f7a:	492f      	ldr	r1, [pc, #188]	; (8017038 <etharp_query+0x278>)
 8016f7c:	4829      	ldr	r0, [pc, #164]	; (8017024 <etharp_query+0x264>)
 8016f7e:	f001 fda7 	bl	8018ad0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016f82:	69fb      	ldr	r3, [r7, #28]
 8016f84:	7b1b      	ldrb	r3, [r3, #12]
 8016f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d002      	beq.n	8016f94 <etharp_query+0x1d4>
        copy_needed = 1;
 8016f8e:	2301      	movs	r3, #1
 8016f90:	61bb      	str	r3, [r7, #24]
        break;
 8016f92:	e005      	b.n	8016fa0 <etharp_query+0x1e0>
      }
      p = p->next;
 8016f94:	69fb      	ldr	r3, [r7, #28]
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016f9a:	69fb      	ldr	r3, [r7, #28]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d1df      	bne.n	8016f60 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8016fa0:	69bb      	ldr	r3, [r7, #24]
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d007      	beq.n	8016fb6 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016fa6:	687a      	ldr	r2, [r7, #4]
 8016fa8:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016fac:	200e      	movs	r0, #14
 8016fae:	f7f7 fb75 	bl	800e69c <pbuf_clone>
 8016fb2:	61f8      	str	r0, [r7, #28]
 8016fb4:	e004      	b.n	8016fc0 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016fba:	69f8      	ldr	r0, [r7, #28]
 8016fbc:	f7f7 f9a2 	bl	800e304 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016fc0:	69fb      	ldr	r3, [r7, #28]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d021      	beq.n	801700a <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016fc6:	7c7a      	ldrb	r2, [r7, #17]
 8016fc8:	4917      	ldr	r1, [pc, #92]	; (8017028 <etharp_query+0x268>)
 8016fca:	4613      	mov	r3, r2
 8016fcc:	005b      	lsls	r3, r3, #1
 8016fce:	4413      	add	r3, r2
 8016fd0:	00db      	lsls	r3, r3, #3
 8016fd2:	440b      	add	r3, r1
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d00a      	beq.n	8016ff0 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016fda:	7c7a      	ldrb	r2, [r7, #17]
 8016fdc:	4912      	ldr	r1, [pc, #72]	; (8017028 <etharp_query+0x268>)
 8016fde:	4613      	mov	r3, r2
 8016fe0:	005b      	lsls	r3, r3, #1
 8016fe2:	4413      	add	r3, r2
 8016fe4:	00db      	lsls	r3, r3, #3
 8016fe6:	440b      	add	r3, r1
 8016fe8:	681b      	ldr	r3, [r3, #0]
 8016fea:	4618      	mov	r0, r3
 8016fec:	f7f7 f8ea 	bl	800e1c4 <pbuf_free>
      }
      arp_table[i].q = p;
 8016ff0:	7c7a      	ldrb	r2, [r7, #17]
 8016ff2:	490d      	ldr	r1, [pc, #52]	; (8017028 <etharp_query+0x268>)
 8016ff4:	4613      	mov	r3, r2
 8016ff6:	005b      	lsls	r3, r3, #1
 8016ff8:	4413      	add	r3, r2
 8016ffa:	00db      	lsls	r3, r3, #3
 8016ffc:	440b      	add	r3, r1
 8016ffe:	69fa      	ldr	r2, [r7, #28]
 8017000:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017002:	2300      	movs	r3, #0
 8017004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017008:	e002      	b.n	8017010 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801700a:	23ff      	movs	r3, #255	; 0xff
 801700c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8017010:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8017014:	4618      	mov	r0, r3
 8017016:	3728      	adds	r7, #40	; 0x28
 8017018:	46bd      	mov	sp, r7
 801701a:	bd80      	pop	{r7, pc}
 801701c:	0801bfb8 	.word	0x0801bfb8
 8017020:	0801c164 	.word	0x0801c164
 8017024:	0801c030 	.word	0x0801c030
 8017028:	200004c8 	.word	0x200004c8
 801702c:	0801c174 	.word	0x0801c174
 8017030:	0801c158 	.word	0x0801c158
 8017034:	200005b8 	.word	0x200005b8
 8017038:	0801c19c 	.word	0x0801c19c

0801703c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801703c:	b580      	push	{r7, lr}
 801703e:	b08a      	sub	sp, #40	; 0x28
 8017040:	af02      	add	r7, sp, #8
 8017042:	60f8      	str	r0, [r7, #12]
 8017044:	60b9      	str	r1, [r7, #8]
 8017046:	607a      	str	r2, [r7, #4]
 8017048:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801704a:	2300      	movs	r3, #0
 801704c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801704e:	68fb      	ldr	r3, [r7, #12]
 8017050:	2b00      	cmp	r3, #0
 8017052:	d106      	bne.n	8017062 <etharp_raw+0x26>
 8017054:	4b3a      	ldr	r3, [pc, #232]	; (8017140 <etharp_raw+0x104>)
 8017056:	f240 4257 	movw	r2, #1111	; 0x457
 801705a:	493a      	ldr	r1, [pc, #232]	; (8017144 <etharp_raw+0x108>)
 801705c:	483a      	ldr	r0, [pc, #232]	; (8017148 <etharp_raw+0x10c>)
 801705e:	f001 fd37 	bl	8018ad0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017062:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017066:	211c      	movs	r1, #28
 8017068:	200e      	movs	r0, #14
 801706a:	f7f6 fdcb 	bl	800dc04 <pbuf_alloc>
 801706e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017070:	69bb      	ldr	r3, [r7, #24]
 8017072:	2b00      	cmp	r3, #0
 8017074:	d102      	bne.n	801707c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017076:	f04f 33ff 	mov.w	r3, #4294967295
 801707a:	e05d      	b.n	8017138 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801707c:	69bb      	ldr	r3, [r7, #24]
 801707e:	895b      	ldrh	r3, [r3, #10]
 8017080:	2b1b      	cmp	r3, #27
 8017082:	d806      	bhi.n	8017092 <etharp_raw+0x56>
 8017084:	4b2e      	ldr	r3, [pc, #184]	; (8017140 <etharp_raw+0x104>)
 8017086:	f240 4263 	movw	r2, #1123	; 0x463
 801708a:	4930      	ldr	r1, [pc, #192]	; (801714c <etharp_raw+0x110>)
 801708c:	482e      	ldr	r0, [pc, #184]	; (8017148 <etharp_raw+0x10c>)
 801708e:	f001 fd1f 	bl	8018ad0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017092:	69bb      	ldr	r3, [r7, #24]
 8017094:	685b      	ldr	r3, [r3, #4]
 8017096:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017098:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801709a:	4618      	mov	r0, r3
 801709c:	f7f5 fdf1 	bl	800cc82 <lwip_htons>
 80170a0:	4603      	mov	r3, r0
 80170a2:	461a      	mov	r2, r3
 80170a4:	697b      	ldr	r3, [r7, #20]
 80170a6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80170a8:	68fb      	ldr	r3, [r7, #12]
 80170aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80170ae:	2b06      	cmp	r3, #6
 80170b0:	d006      	beq.n	80170c0 <etharp_raw+0x84>
 80170b2:	4b23      	ldr	r3, [pc, #140]	; (8017140 <etharp_raw+0x104>)
 80170b4:	f240 426a 	movw	r2, #1130	; 0x46a
 80170b8:	4925      	ldr	r1, [pc, #148]	; (8017150 <etharp_raw+0x114>)
 80170ba:	4823      	ldr	r0, [pc, #140]	; (8017148 <etharp_raw+0x10c>)
 80170bc:	f001 fd08 	bl	8018ad0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80170c0:	697b      	ldr	r3, [r7, #20]
 80170c2:	3308      	adds	r3, #8
 80170c4:	2206      	movs	r2, #6
 80170c6:	6839      	ldr	r1, [r7, #0]
 80170c8:	4618      	mov	r0, r3
 80170ca:	f001 fc46 	bl	801895a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80170ce:	697b      	ldr	r3, [r7, #20]
 80170d0:	3312      	adds	r3, #18
 80170d2:	2206      	movs	r2, #6
 80170d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80170d6:	4618      	mov	r0, r3
 80170d8:	f001 fc3f 	bl	801895a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80170dc:	697b      	ldr	r3, [r7, #20]
 80170de:	330e      	adds	r3, #14
 80170e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80170e2:	6812      	ldr	r2, [r2, #0]
 80170e4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80170e6:	697b      	ldr	r3, [r7, #20]
 80170e8:	3318      	adds	r3, #24
 80170ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80170ec:	6812      	ldr	r2, [r2, #0]
 80170ee:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80170f0:	697b      	ldr	r3, [r7, #20]
 80170f2:	2200      	movs	r2, #0
 80170f4:	701a      	strb	r2, [r3, #0]
 80170f6:	2200      	movs	r2, #0
 80170f8:	f042 0201 	orr.w	r2, r2, #1
 80170fc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80170fe:	697b      	ldr	r3, [r7, #20]
 8017100:	2200      	movs	r2, #0
 8017102:	f042 0208 	orr.w	r2, r2, #8
 8017106:	709a      	strb	r2, [r3, #2]
 8017108:	2200      	movs	r2, #0
 801710a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801710c:	697b      	ldr	r3, [r7, #20]
 801710e:	2206      	movs	r2, #6
 8017110:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017112:	697b      	ldr	r3, [r7, #20]
 8017114:	2204      	movs	r2, #4
 8017116:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017118:	f640 0306 	movw	r3, #2054	; 0x806
 801711c:	9300      	str	r3, [sp, #0]
 801711e:	687b      	ldr	r3, [r7, #4]
 8017120:	68ba      	ldr	r2, [r7, #8]
 8017122:	69b9      	ldr	r1, [r7, #24]
 8017124:	68f8      	ldr	r0, [r7, #12]
 8017126:	f001 fb8d 	bl	8018844 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801712a:	69b8      	ldr	r0, [r7, #24]
 801712c:	f7f7 f84a 	bl	800e1c4 <pbuf_free>
  p = NULL;
 8017130:	2300      	movs	r3, #0
 8017132:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017134:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017138:	4618      	mov	r0, r3
 801713a:	3720      	adds	r7, #32
 801713c:	46bd      	mov	sp, r7
 801713e:	bd80      	pop	{r7, pc}
 8017140:	0801bfb8 	.word	0x0801bfb8
 8017144:	0801c108 	.word	0x0801c108
 8017148:	0801c030 	.word	0x0801c030
 801714c:	0801c1b8 	.word	0x0801c1b8
 8017150:	0801c1ec 	.word	0x0801c1ec

08017154 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017154:	b580      	push	{r7, lr}
 8017156:	b088      	sub	sp, #32
 8017158:	af04      	add	r7, sp, #16
 801715a:	60f8      	str	r0, [r7, #12]
 801715c:	60b9      	str	r1, [r7, #8]
 801715e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017170:	2201      	movs	r2, #1
 8017172:	9203      	str	r2, [sp, #12]
 8017174:	68ba      	ldr	r2, [r7, #8]
 8017176:	9202      	str	r2, [sp, #8]
 8017178:	4a06      	ldr	r2, [pc, #24]	; (8017194 <etharp_request_dst+0x40>)
 801717a:	9201      	str	r2, [sp, #4]
 801717c:	9300      	str	r3, [sp, #0]
 801717e:	4603      	mov	r3, r0
 8017180:	687a      	ldr	r2, [r7, #4]
 8017182:	68f8      	ldr	r0, [r7, #12]
 8017184:	f7ff ff5a 	bl	801703c <etharp_raw>
 8017188:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801718a:	4618      	mov	r0, r3
 801718c:	3710      	adds	r7, #16
 801718e:	46bd      	mov	sp, r7
 8017190:	bd80      	pop	{r7, pc}
 8017192:	bf00      	nop
 8017194:	0802b5a0 	.word	0x0802b5a0

08017198 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017198:	b580      	push	{r7, lr}
 801719a:	b082      	sub	sp, #8
 801719c:	af00      	add	r7, sp, #0
 801719e:	6078      	str	r0, [r7, #4]
 80171a0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80171a2:	4a05      	ldr	r2, [pc, #20]	; (80171b8 <etharp_request+0x20>)
 80171a4:	6839      	ldr	r1, [r7, #0]
 80171a6:	6878      	ldr	r0, [r7, #4]
 80171a8:	f7ff ffd4 	bl	8017154 <etharp_request_dst>
 80171ac:	4603      	mov	r3, r0
}
 80171ae:	4618      	mov	r0, r3
 80171b0:	3708      	adds	r7, #8
 80171b2:	46bd      	mov	sp, r7
 80171b4:	bd80      	pop	{r7, pc}
 80171b6:	bf00      	nop
 80171b8:	0802b598 	.word	0x0802b598

080171bc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80171bc:	b580      	push	{r7, lr}
 80171be:	b08e      	sub	sp, #56	; 0x38
 80171c0:	af04      	add	r7, sp, #16
 80171c2:	6078      	str	r0, [r7, #4]
 80171c4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80171c6:	4b79      	ldr	r3, [pc, #484]	; (80173ac <icmp_input+0x1f0>)
 80171c8:	689b      	ldr	r3, [r3, #8]
 80171ca:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80171cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171ce:	781b      	ldrb	r3, [r3, #0]
 80171d0:	f003 030f 	and.w	r3, r3, #15
 80171d4:	b2db      	uxtb	r3, r3
 80171d6:	009b      	lsls	r3, r3, #2
 80171d8:	b2db      	uxtb	r3, r3
 80171da:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80171dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80171de:	2b13      	cmp	r3, #19
 80171e0:	f240 80cd 	bls.w	801737e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	895b      	ldrh	r3, [r3, #10]
 80171e8:	2b03      	cmp	r3, #3
 80171ea:	f240 80ca 	bls.w	8017382 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	685b      	ldr	r3, [r3, #4]
 80171f2:	781b      	ldrb	r3, [r3, #0]
 80171f4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80171f8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	f000 80b7 	beq.w	8017370 <icmp_input+0x1b4>
 8017202:	2b08      	cmp	r3, #8
 8017204:	f040 80b7 	bne.w	8017376 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017208:	4b69      	ldr	r3, [pc, #420]	; (80173b0 <icmp_input+0x1f4>)
 801720a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801720c:	4b67      	ldr	r3, [pc, #412]	; (80173ac <icmp_input+0x1f0>)
 801720e:	695b      	ldr	r3, [r3, #20]
 8017210:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017214:	2be0      	cmp	r3, #224	; 0xe0
 8017216:	f000 80bb 	beq.w	8017390 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801721a:	4b64      	ldr	r3, [pc, #400]	; (80173ac <icmp_input+0x1f0>)
 801721c:	695a      	ldr	r2, [r3, #20]
 801721e:	4b63      	ldr	r3, [pc, #396]	; (80173ac <icmp_input+0x1f0>)
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	4619      	mov	r1, r3
 8017224:	4610      	mov	r0, r2
 8017226:	f000 fc09 	bl	8017a3c <ip4_addr_isbroadcast_u32>
 801722a:	4603      	mov	r3, r0
 801722c:	2b00      	cmp	r3, #0
 801722e:	f040 80b1 	bne.w	8017394 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	891b      	ldrh	r3, [r3, #8]
 8017236:	2b07      	cmp	r3, #7
 8017238:	f240 80a5 	bls.w	8017386 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801723c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801723e:	330e      	adds	r3, #14
 8017240:	4619      	mov	r1, r3
 8017242:	6878      	ldr	r0, [r7, #4]
 8017244:	f7f6 ff28 	bl	800e098 <pbuf_add_header>
 8017248:	4603      	mov	r3, r0
 801724a:	2b00      	cmp	r3, #0
 801724c:	d04b      	beq.n	80172e6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	891a      	ldrh	r2, [r3, #8]
 8017252:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017254:	4413      	add	r3, r2
 8017256:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	891b      	ldrh	r3, [r3, #8]
 801725c:	8b7a      	ldrh	r2, [r7, #26]
 801725e:	429a      	cmp	r2, r3
 8017260:	f0c0 809a 	bcc.w	8017398 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017264:	8b7b      	ldrh	r3, [r7, #26]
 8017266:	f44f 7220 	mov.w	r2, #640	; 0x280
 801726a:	4619      	mov	r1, r3
 801726c:	200e      	movs	r0, #14
 801726e:	f7f6 fcc9 	bl	800dc04 <pbuf_alloc>
 8017272:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017274:	697b      	ldr	r3, [r7, #20]
 8017276:	2b00      	cmp	r3, #0
 8017278:	f000 8090 	beq.w	801739c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801727c:	697b      	ldr	r3, [r7, #20]
 801727e:	895b      	ldrh	r3, [r3, #10]
 8017280:	461a      	mov	r2, r3
 8017282:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017284:	3308      	adds	r3, #8
 8017286:	429a      	cmp	r2, r3
 8017288:	d203      	bcs.n	8017292 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801728a:	6978      	ldr	r0, [r7, #20]
 801728c:	f7f6 ff9a 	bl	800e1c4 <pbuf_free>
          goto icmperr;
 8017290:	e085      	b.n	801739e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017292:	697b      	ldr	r3, [r7, #20]
 8017294:	685b      	ldr	r3, [r3, #4]
 8017296:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017298:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801729a:	4618      	mov	r0, r3
 801729c:	f001 fb5d 	bl	801895a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80172a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80172a2:	4619      	mov	r1, r3
 80172a4:	6978      	ldr	r0, [r7, #20]
 80172a6:	f7f6 ff07 	bl	800e0b8 <pbuf_remove_header>
 80172aa:	4603      	mov	r3, r0
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d009      	beq.n	80172c4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80172b0:	4b40      	ldr	r3, [pc, #256]	; (80173b4 <icmp_input+0x1f8>)
 80172b2:	22b6      	movs	r2, #182	; 0xb6
 80172b4:	4940      	ldr	r1, [pc, #256]	; (80173b8 <icmp_input+0x1fc>)
 80172b6:	4841      	ldr	r0, [pc, #260]	; (80173bc <icmp_input+0x200>)
 80172b8:	f001 fc0a 	bl	8018ad0 <iprintf>
          pbuf_free(r);
 80172bc:	6978      	ldr	r0, [r7, #20]
 80172be:	f7f6 ff81 	bl	800e1c4 <pbuf_free>
          goto icmperr;
 80172c2:	e06c      	b.n	801739e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80172c4:	6879      	ldr	r1, [r7, #4]
 80172c6:	6978      	ldr	r0, [r7, #20]
 80172c8:	f7f7 f8a4 	bl	800e414 <pbuf_copy>
 80172cc:	4603      	mov	r3, r0
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d003      	beq.n	80172da <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80172d2:	6978      	ldr	r0, [r7, #20]
 80172d4:	f7f6 ff76 	bl	800e1c4 <pbuf_free>
          goto icmperr;
 80172d8:	e061      	b.n	801739e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80172da:	6878      	ldr	r0, [r7, #4]
 80172dc:	f7f6 ff72 	bl	800e1c4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80172e0:	697b      	ldr	r3, [r7, #20]
 80172e2:	607b      	str	r3, [r7, #4]
 80172e4:	e00f      	b.n	8017306 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80172e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80172e8:	330e      	adds	r3, #14
 80172ea:	4619      	mov	r1, r3
 80172ec:	6878      	ldr	r0, [r7, #4]
 80172ee:	f7f6 fee3 	bl	800e0b8 <pbuf_remove_header>
 80172f2:	4603      	mov	r3, r0
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d006      	beq.n	8017306 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80172f8:	4b2e      	ldr	r3, [pc, #184]	; (80173b4 <icmp_input+0x1f8>)
 80172fa:	22c7      	movs	r2, #199	; 0xc7
 80172fc:	4930      	ldr	r1, [pc, #192]	; (80173c0 <icmp_input+0x204>)
 80172fe:	482f      	ldr	r0, [pc, #188]	; (80173bc <icmp_input+0x200>)
 8017300:	f001 fbe6 	bl	8018ad0 <iprintf>
          goto icmperr;
 8017304:	e04b      	b.n	801739e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	685b      	ldr	r3, [r3, #4]
 801730a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801730c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801730e:	4619      	mov	r1, r3
 8017310:	6878      	ldr	r0, [r7, #4]
 8017312:	f7f6 fec1 	bl	800e098 <pbuf_add_header>
 8017316:	4603      	mov	r3, r0
 8017318:	2b00      	cmp	r3, #0
 801731a:	d12b      	bne.n	8017374 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	685b      	ldr	r3, [r3, #4]
 8017320:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017322:	69fb      	ldr	r3, [r7, #28]
 8017324:	681a      	ldr	r2, [r3, #0]
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801732a:	4b20      	ldr	r3, [pc, #128]	; (80173ac <icmp_input+0x1f0>)
 801732c:	691a      	ldr	r2, [r3, #16]
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017332:	693b      	ldr	r3, [r7, #16]
 8017334:	2200      	movs	r2, #0
 8017336:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017338:	693b      	ldr	r3, [r7, #16]
 801733a:	2200      	movs	r2, #0
 801733c:	709a      	strb	r2, [r3, #2]
 801733e:	2200      	movs	r2, #0
 8017340:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	22ff      	movs	r2, #255	; 0xff
 8017346:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017348:	68fb      	ldr	r3, [r7, #12]
 801734a:	2200      	movs	r2, #0
 801734c:	729a      	strb	r2, [r3, #10]
 801734e:	2200      	movs	r2, #0
 8017350:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017352:	683b      	ldr	r3, [r7, #0]
 8017354:	9302      	str	r3, [sp, #8]
 8017356:	2301      	movs	r3, #1
 8017358:	9301      	str	r3, [sp, #4]
 801735a:	2300      	movs	r3, #0
 801735c:	9300      	str	r3, [sp, #0]
 801735e:	23ff      	movs	r3, #255	; 0xff
 8017360:	2200      	movs	r2, #0
 8017362:	69f9      	ldr	r1, [r7, #28]
 8017364:	6878      	ldr	r0, [r7, #4]
 8017366:	f000 fa91 	bl	801788c <ip4_output_if>
 801736a:	4603      	mov	r3, r0
 801736c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801736e:	e001      	b.n	8017374 <icmp_input+0x1b8>
      break;
 8017370:	bf00      	nop
 8017372:	e000      	b.n	8017376 <icmp_input+0x1ba>
      break;
 8017374:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017376:	6878      	ldr	r0, [r7, #4]
 8017378:	f7f6 ff24 	bl	800e1c4 <pbuf_free>
  return;
 801737c:	e013      	b.n	80173a6 <icmp_input+0x1ea>
    goto lenerr;
 801737e:	bf00      	nop
 8017380:	e002      	b.n	8017388 <icmp_input+0x1cc>
    goto lenerr;
 8017382:	bf00      	nop
 8017384:	e000      	b.n	8017388 <icmp_input+0x1cc>
        goto lenerr;
 8017386:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017388:	6878      	ldr	r0, [r7, #4]
 801738a:	f7f6 ff1b 	bl	800e1c4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801738e:	e00a      	b.n	80173a6 <icmp_input+0x1ea>
        goto icmperr;
 8017390:	bf00      	nop
 8017392:	e004      	b.n	801739e <icmp_input+0x1e2>
        goto icmperr;
 8017394:	bf00      	nop
 8017396:	e002      	b.n	801739e <icmp_input+0x1e2>
          goto icmperr;
 8017398:	bf00      	nop
 801739a:	e000      	b.n	801739e <icmp_input+0x1e2>
          goto icmperr;
 801739c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801739e:	6878      	ldr	r0, [r7, #4]
 80173a0:	f7f6 ff10 	bl	800e1c4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80173a4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80173a6:	3728      	adds	r7, #40	; 0x28
 80173a8:	46bd      	mov	sp, r7
 80173aa:	bd80      	pop	{r7, pc}
 80173ac:	20004968 	.word	0x20004968
 80173b0:	2000497c 	.word	0x2000497c
 80173b4:	0801c230 	.word	0x0801c230
 80173b8:	0801c268 	.word	0x0801c268
 80173bc:	0801c2a0 	.word	0x0801c2a0
 80173c0:	0801c2c8 	.word	0x0801c2c8

080173c4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80173c4:	b580      	push	{r7, lr}
 80173c6:	b082      	sub	sp, #8
 80173c8:	af00      	add	r7, sp, #0
 80173ca:	6078      	str	r0, [r7, #4]
 80173cc:	460b      	mov	r3, r1
 80173ce:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80173d0:	78fb      	ldrb	r3, [r7, #3]
 80173d2:	461a      	mov	r2, r3
 80173d4:	2103      	movs	r1, #3
 80173d6:	6878      	ldr	r0, [r7, #4]
 80173d8:	f000 f814 	bl	8017404 <icmp_send_response>
}
 80173dc:	bf00      	nop
 80173de:	3708      	adds	r7, #8
 80173e0:	46bd      	mov	sp, r7
 80173e2:	bd80      	pop	{r7, pc}

080173e4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80173e4:	b580      	push	{r7, lr}
 80173e6:	b082      	sub	sp, #8
 80173e8:	af00      	add	r7, sp, #0
 80173ea:	6078      	str	r0, [r7, #4]
 80173ec:	460b      	mov	r3, r1
 80173ee:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80173f0:	78fb      	ldrb	r3, [r7, #3]
 80173f2:	461a      	mov	r2, r3
 80173f4:	210b      	movs	r1, #11
 80173f6:	6878      	ldr	r0, [r7, #4]
 80173f8:	f000 f804 	bl	8017404 <icmp_send_response>
}
 80173fc:	bf00      	nop
 80173fe:	3708      	adds	r7, #8
 8017400:	46bd      	mov	sp, r7
 8017402:	bd80      	pop	{r7, pc}

08017404 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017404:	b580      	push	{r7, lr}
 8017406:	b08c      	sub	sp, #48	; 0x30
 8017408:	af04      	add	r7, sp, #16
 801740a:	6078      	str	r0, [r7, #4]
 801740c:	460b      	mov	r3, r1
 801740e:	70fb      	strb	r3, [r7, #3]
 8017410:	4613      	mov	r3, r2
 8017412:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017414:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017418:	2124      	movs	r1, #36	; 0x24
 801741a:	2022      	movs	r0, #34	; 0x22
 801741c:	f7f6 fbf2 	bl	800dc04 <pbuf_alloc>
 8017420:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017422:	69fb      	ldr	r3, [r7, #28]
 8017424:	2b00      	cmp	r3, #0
 8017426:	d04c      	beq.n	80174c2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017428:	69fb      	ldr	r3, [r7, #28]
 801742a:	895b      	ldrh	r3, [r3, #10]
 801742c:	2b23      	cmp	r3, #35	; 0x23
 801742e:	d806      	bhi.n	801743e <icmp_send_response+0x3a>
 8017430:	4b26      	ldr	r3, [pc, #152]	; (80174cc <icmp_send_response+0xc8>)
 8017432:	f240 1269 	movw	r2, #361	; 0x169
 8017436:	4926      	ldr	r1, [pc, #152]	; (80174d0 <icmp_send_response+0xcc>)
 8017438:	4826      	ldr	r0, [pc, #152]	; (80174d4 <icmp_send_response+0xd0>)
 801743a:	f001 fb49 	bl	8018ad0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	685b      	ldr	r3, [r3, #4]
 8017442:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017444:	69fb      	ldr	r3, [r7, #28]
 8017446:	685b      	ldr	r3, [r3, #4]
 8017448:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801744a:	697b      	ldr	r3, [r7, #20]
 801744c:	78fa      	ldrb	r2, [r7, #3]
 801744e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017450:	697b      	ldr	r3, [r7, #20]
 8017452:	78ba      	ldrb	r2, [r7, #2]
 8017454:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017456:	697b      	ldr	r3, [r7, #20]
 8017458:	2200      	movs	r2, #0
 801745a:	711a      	strb	r2, [r3, #4]
 801745c:	2200      	movs	r2, #0
 801745e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017460:	697b      	ldr	r3, [r7, #20]
 8017462:	2200      	movs	r2, #0
 8017464:	719a      	strb	r2, [r3, #6]
 8017466:	2200      	movs	r2, #0
 8017468:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801746a:	69fb      	ldr	r3, [r7, #28]
 801746c:	685b      	ldr	r3, [r3, #4]
 801746e:	f103 0008 	add.w	r0, r3, #8
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	685b      	ldr	r3, [r3, #4]
 8017476:	221c      	movs	r2, #28
 8017478:	4619      	mov	r1, r3
 801747a:	f001 fa6e 	bl	801895a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801747e:	69bb      	ldr	r3, [r7, #24]
 8017480:	68db      	ldr	r3, [r3, #12]
 8017482:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017484:	f107 030c 	add.w	r3, r7, #12
 8017488:	4618      	mov	r0, r3
 801748a:	f000 f825 	bl	80174d8 <ip4_route>
 801748e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017490:	693b      	ldr	r3, [r7, #16]
 8017492:	2b00      	cmp	r3, #0
 8017494:	d011      	beq.n	80174ba <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017496:	697b      	ldr	r3, [r7, #20]
 8017498:	2200      	movs	r2, #0
 801749a:	709a      	strb	r2, [r3, #2]
 801749c:	2200      	movs	r2, #0
 801749e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80174a0:	f107 020c 	add.w	r2, r7, #12
 80174a4:	693b      	ldr	r3, [r7, #16]
 80174a6:	9302      	str	r3, [sp, #8]
 80174a8:	2301      	movs	r3, #1
 80174aa:	9301      	str	r3, [sp, #4]
 80174ac:	2300      	movs	r3, #0
 80174ae:	9300      	str	r3, [sp, #0]
 80174b0:	23ff      	movs	r3, #255	; 0xff
 80174b2:	2100      	movs	r1, #0
 80174b4:	69f8      	ldr	r0, [r7, #28]
 80174b6:	f000 f9e9 	bl	801788c <ip4_output_if>
  }
  pbuf_free(q);
 80174ba:	69f8      	ldr	r0, [r7, #28]
 80174bc:	f7f6 fe82 	bl	800e1c4 <pbuf_free>
 80174c0:	e000      	b.n	80174c4 <icmp_send_response+0xc0>
    return;
 80174c2:	bf00      	nop
}
 80174c4:	3720      	adds	r7, #32
 80174c6:	46bd      	mov	sp, r7
 80174c8:	bd80      	pop	{r7, pc}
 80174ca:	bf00      	nop
 80174cc:	0801c230 	.word	0x0801c230
 80174d0:	0801c2fc 	.word	0x0801c2fc
 80174d4:	0801c2a0 	.word	0x0801c2a0

080174d8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80174d8:	b480      	push	{r7}
 80174da:	b085      	sub	sp, #20
 80174dc:	af00      	add	r7, sp, #0
 80174de:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80174e0:	4b33      	ldr	r3, [pc, #204]	; (80175b0 <ip4_route+0xd8>)
 80174e2:	681b      	ldr	r3, [r3, #0]
 80174e4:	60fb      	str	r3, [r7, #12]
 80174e6:	e036      	b.n	8017556 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80174e8:	68fb      	ldr	r3, [r7, #12]
 80174ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80174ee:	f003 0301 	and.w	r3, r3, #1
 80174f2:	b2db      	uxtb	r3, r3
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d02b      	beq.n	8017550 <ip4_route+0x78>
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80174fe:	089b      	lsrs	r3, r3, #2
 8017500:	f003 0301 	and.w	r3, r3, #1
 8017504:	b2db      	uxtb	r3, r3
 8017506:	2b00      	cmp	r3, #0
 8017508:	d022      	beq.n	8017550 <ip4_route+0x78>
 801750a:	68fb      	ldr	r3, [r7, #12]
 801750c:	3304      	adds	r3, #4
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	2b00      	cmp	r3, #0
 8017512:	d01d      	beq.n	8017550 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	681a      	ldr	r2, [r3, #0]
 8017518:	68fb      	ldr	r3, [r7, #12]
 801751a:	3304      	adds	r3, #4
 801751c:	681b      	ldr	r3, [r3, #0]
 801751e:	405a      	eors	r2, r3
 8017520:	68fb      	ldr	r3, [r7, #12]
 8017522:	3308      	adds	r3, #8
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	4013      	ands	r3, r2
 8017528:	2b00      	cmp	r3, #0
 801752a:	d101      	bne.n	8017530 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	e038      	b.n	80175a2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017536:	f003 0302 	and.w	r3, r3, #2
 801753a:	2b00      	cmp	r3, #0
 801753c:	d108      	bne.n	8017550 <ip4_route+0x78>
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	681a      	ldr	r2, [r3, #0]
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	330c      	adds	r3, #12
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	429a      	cmp	r2, r3
 801754a:	d101      	bne.n	8017550 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801754c:	68fb      	ldr	r3, [r7, #12]
 801754e:	e028      	b.n	80175a2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	681b      	ldr	r3, [r3, #0]
 8017554:	60fb      	str	r3, [r7, #12]
 8017556:	68fb      	ldr	r3, [r7, #12]
 8017558:	2b00      	cmp	r3, #0
 801755a:	d1c5      	bne.n	80174e8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801755c:	4b15      	ldr	r3, [pc, #84]	; (80175b4 <ip4_route+0xdc>)
 801755e:	681b      	ldr	r3, [r3, #0]
 8017560:	2b00      	cmp	r3, #0
 8017562:	d01a      	beq.n	801759a <ip4_route+0xc2>
 8017564:	4b13      	ldr	r3, [pc, #76]	; (80175b4 <ip4_route+0xdc>)
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801756c:	f003 0301 	and.w	r3, r3, #1
 8017570:	2b00      	cmp	r3, #0
 8017572:	d012      	beq.n	801759a <ip4_route+0xc2>
 8017574:	4b0f      	ldr	r3, [pc, #60]	; (80175b4 <ip4_route+0xdc>)
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801757c:	f003 0304 	and.w	r3, r3, #4
 8017580:	2b00      	cmp	r3, #0
 8017582:	d00a      	beq.n	801759a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017584:	4b0b      	ldr	r3, [pc, #44]	; (80175b4 <ip4_route+0xdc>)
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	3304      	adds	r3, #4
 801758a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801758c:	2b00      	cmp	r3, #0
 801758e:	d004      	beq.n	801759a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	681b      	ldr	r3, [r3, #0]
 8017594:	b2db      	uxtb	r3, r3
 8017596:	2b7f      	cmp	r3, #127	; 0x7f
 8017598:	d101      	bne.n	801759e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801759a:	2300      	movs	r3, #0
 801759c:	e001      	b.n	80175a2 <ip4_route+0xca>
  }

  return netif_default;
 801759e:	4b05      	ldr	r3, [pc, #20]	; (80175b4 <ip4_route+0xdc>)
 80175a0:	681b      	ldr	r3, [r3, #0]
}
 80175a2:	4618      	mov	r0, r3
 80175a4:	3714      	adds	r7, #20
 80175a6:	46bd      	mov	sp, r7
 80175a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ac:	4770      	bx	lr
 80175ae:	bf00      	nop
 80175b0:	20007ebc 	.word	0x20007ebc
 80175b4:	20007ec0 	.word	0x20007ec0

080175b8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	b082      	sub	sp, #8
 80175bc:	af00      	add	r7, sp, #0
 80175be:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80175c6:	f003 0301 	and.w	r3, r3, #1
 80175ca:	b2db      	uxtb	r3, r3
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d016      	beq.n	80175fe <ip4_input_accept+0x46>
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	3304      	adds	r3, #4
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d011      	beq.n	80175fe <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80175da:	4b0b      	ldr	r3, [pc, #44]	; (8017608 <ip4_input_accept+0x50>)
 80175dc:	695a      	ldr	r2, [r3, #20]
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	3304      	adds	r3, #4
 80175e2:	681b      	ldr	r3, [r3, #0]
 80175e4:	429a      	cmp	r2, r3
 80175e6:	d008      	beq.n	80175fa <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80175e8:	4b07      	ldr	r3, [pc, #28]	; (8017608 <ip4_input_accept+0x50>)
 80175ea:	695b      	ldr	r3, [r3, #20]
 80175ec:	6879      	ldr	r1, [r7, #4]
 80175ee:	4618      	mov	r0, r3
 80175f0:	f000 fa24 	bl	8017a3c <ip4_addr_isbroadcast_u32>
 80175f4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d001      	beq.n	80175fe <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80175fa:	2301      	movs	r3, #1
 80175fc:	e000      	b.n	8017600 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80175fe:	2300      	movs	r3, #0
}
 8017600:	4618      	mov	r0, r3
 8017602:	3708      	adds	r7, #8
 8017604:	46bd      	mov	sp, r7
 8017606:	bd80      	pop	{r7, pc}
 8017608:	20004968 	.word	0x20004968

0801760c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801760c:	b580      	push	{r7, lr}
 801760e:	b088      	sub	sp, #32
 8017610:	af00      	add	r7, sp, #0
 8017612:	6078      	str	r0, [r7, #4]
 8017614:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8017616:	2301      	movs	r3, #1
 8017618:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	685b      	ldr	r3, [r3, #4]
 801761e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8017620:	69fb      	ldr	r3, [r7, #28]
 8017622:	781b      	ldrb	r3, [r3, #0]
 8017624:	091b      	lsrs	r3, r3, #4
 8017626:	b2db      	uxtb	r3, r3
 8017628:	2b04      	cmp	r3, #4
 801762a:	d004      	beq.n	8017636 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801762c:	6878      	ldr	r0, [r7, #4]
 801762e:	f7f6 fdc9 	bl	800e1c4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017632:	2300      	movs	r3, #0
 8017634:	e121      	b.n	801787a <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017636:	69fb      	ldr	r3, [r7, #28]
 8017638:	781b      	ldrb	r3, [r3, #0]
 801763a:	f003 030f 	and.w	r3, r3, #15
 801763e:	b2db      	uxtb	r3, r3
 8017640:	009b      	lsls	r3, r3, #2
 8017642:	b2db      	uxtb	r3, r3
 8017644:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017646:	69fb      	ldr	r3, [r7, #28]
 8017648:	885b      	ldrh	r3, [r3, #2]
 801764a:	b29b      	uxth	r3, r3
 801764c:	4618      	mov	r0, r3
 801764e:	f7f5 fb18 	bl	800cc82 <lwip_htons>
 8017652:	4603      	mov	r3, r0
 8017654:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	891b      	ldrh	r3, [r3, #8]
 801765a:	8a3a      	ldrh	r2, [r7, #16]
 801765c:	429a      	cmp	r2, r3
 801765e:	d204      	bcs.n	801766a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8017660:	8a3b      	ldrh	r3, [r7, #16]
 8017662:	4619      	mov	r1, r3
 8017664:	6878      	ldr	r0, [r7, #4]
 8017666:	f7f6 fc27 	bl	800deb8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	895b      	ldrh	r3, [r3, #10]
 801766e:	8a7a      	ldrh	r2, [r7, #18]
 8017670:	429a      	cmp	r2, r3
 8017672:	d807      	bhi.n	8017684 <ip4_input+0x78>
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	891b      	ldrh	r3, [r3, #8]
 8017678:	8a3a      	ldrh	r2, [r7, #16]
 801767a:	429a      	cmp	r2, r3
 801767c:	d802      	bhi.n	8017684 <ip4_input+0x78>
 801767e:	8a7b      	ldrh	r3, [r7, #18]
 8017680:	2b13      	cmp	r3, #19
 8017682:	d804      	bhi.n	801768e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017684:	6878      	ldr	r0, [r7, #4]
 8017686:	f7f6 fd9d 	bl	800e1c4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801768a:	2300      	movs	r3, #0
 801768c:	e0f5      	b.n	801787a <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801768e:	69fb      	ldr	r3, [r7, #28]
 8017690:	691b      	ldr	r3, [r3, #16]
 8017692:	4a7c      	ldr	r2, [pc, #496]	; (8017884 <ip4_input+0x278>)
 8017694:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017696:	69fb      	ldr	r3, [r7, #28]
 8017698:	68db      	ldr	r3, [r3, #12]
 801769a:	4a7a      	ldr	r2, [pc, #488]	; (8017884 <ip4_input+0x278>)
 801769c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801769e:	4b79      	ldr	r3, [pc, #484]	; (8017884 <ip4_input+0x278>)
 80176a0:	695b      	ldr	r3, [r3, #20]
 80176a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80176a6:	2be0      	cmp	r3, #224	; 0xe0
 80176a8:	d112      	bne.n	80176d0 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80176aa:	683b      	ldr	r3, [r7, #0]
 80176ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80176b0:	f003 0301 	and.w	r3, r3, #1
 80176b4:	b2db      	uxtb	r3, r3
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d007      	beq.n	80176ca <ip4_input+0xbe>
 80176ba:	683b      	ldr	r3, [r7, #0]
 80176bc:	3304      	adds	r3, #4
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d002      	beq.n	80176ca <ip4_input+0xbe>
      netif = inp;
 80176c4:	683b      	ldr	r3, [r7, #0]
 80176c6:	61bb      	str	r3, [r7, #24]
 80176c8:	e02a      	b.n	8017720 <ip4_input+0x114>
    } else {
      netif = NULL;
 80176ca:	2300      	movs	r3, #0
 80176cc:	61bb      	str	r3, [r7, #24]
 80176ce:	e027      	b.n	8017720 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80176d0:	6838      	ldr	r0, [r7, #0]
 80176d2:	f7ff ff71 	bl	80175b8 <ip4_input_accept>
 80176d6:	4603      	mov	r3, r0
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d002      	beq.n	80176e2 <ip4_input+0xd6>
      netif = inp;
 80176dc:	683b      	ldr	r3, [r7, #0]
 80176de:	61bb      	str	r3, [r7, #24]
 80176e0:	e01e      	b.n	8017720 <ip4_input+0x114>
    } else {
      netif = NULL;
 80176e2:	2300      	movs	r3, #0
 80176e4:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80176e6:	4b67      	ldr	r3, [pc, #412]	; (8017884 <ip4_input+0x278>)
 80176e8:	695b      	ldr	r3, [r3, #20]
 80176ea:	b2db      	uxtb	r3, r3
 80176ec:	2b7f      	cmp	r3, #127	; 0x7f
 80176ee:	d017      	beq.n	8017720 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80176f0:	4b65      	ldr	r3, [pc, #404]	; (8017888 <ip4_input+0x27c>)
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	61bb      	str	r3, [r7, #24]
 80176f6:	e00e      	b.n	8017716 <ip4_input+0x10a>
          if (netif == inp) {
 80176f8:	69ba      	ldr	r2, [r7, #24]
 80176fa:	683b      	ldr	r3, [r7, #0]
 80176fc:	429a      	cmp	r2, r3
 80176fe:	d006      	beq.n	801770e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017700:	69b8      	ldr	r0, [r7, #24]
 8017702:	f7ff ff59 	bl	80175b8 <ip4_input_accept>
 8017706:	4603      	mov	r3, r0
 8017708:	2b00      	cmp	r3, #0
 801770a:	d108      	bne.n	801771e <ip4_input+0x112>
 801770c:	e000      	b.n	8017710 <ip4_input+0x104>
            continue;
 801770e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017710:	69bb      	ldr	r3, [r7, #24]
 8017712:	681b      	ldr	r3, [r3, #0]
 8017714:	61bb      	str	r3, [r7, #24]
 8017716:	69bb      	ldr	r3, [r7, #24]
 8017718:	2b00      	cmp	r3, #0
 801771a:	d1ed      	bne.n	80176f8 <ip4_input+0xec>
 801771c:	e000      	b.n	8017720 <ip4_input+0x114>
            break;
 801771e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8017720:	69bb      	ldr	r3, [r7, #24]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d111      	bne.n	801774a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8017726:	69fb      	ldr	r3, [r7, #28]
 8017728:	7a5b      	ldrb	r3, [r3, #9]
 801772a:	2b11      	cmp	r3, #17
 801772c:	d10d      	bne.n	801774a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801772e:	8a7b      	ldrh	r3, [r7, #18]
 8017730:	69fa      	ldr	r2, [r7, #28]
 8017732:	4413      	add	r3, r2
 8017734:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8017736:	68fb      	ldr	r3, [r7, #12]
 8017738:	885b      	ldrh	r3, [r3, #2]
 801773a:	b29b      	uxth	r3, r3
 801773c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8017740:	d103      	bne.n	801774a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8017742:	683b      	ldr	r3, [r7, #0]
 8017744:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8017746:	2300      	movs	r3, #0
 8017748:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801774a:	697b      	ldr	r3, [r7, #20]
 801774c:	2b00      	cmp	r3, #0
 801774e:	d017      	beq.n	8017780 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8017750:	4b4c      	ldr	r3, [pc, #304]	; (8017884 <ip4_input+0x278>)
 8017752:	691b      	ldr	r3, [r3, #16]
 8017754:	2b00      	cmp	r3, #0
 8017756:	d013      	beq.n	8017780 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017758:	4b4a      	ldr	r3, [pc, #296]	; (8017884 <ip4_input+0x278>)
 801775a:	691b      	ldr	r3, [r3, #16]
 801775c:	6839      	ldr	r1, [r7, #0]
 801775e:	4618      	mov	r0, r3
 8017760:	f000 f96c 	bl	8017a3c <ip4_addr_isbroadcast_u32>
 8017764:	4603      	mov	r3, r0
 8017766:	2b00      	cmp	r3, #0
 8017768:	d105      	bne.n	8017776 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801776a:	4b46      	ldr	r3, [pc, #280]	; (8017884 <ip4_input+0x278>)
 801776c:	691b      	ldr	r3, [r3, #16]
 801776e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017772:	2be0      	cmp	r3, #224	; 0xe0
 8017774:	d104      	bne.n	8017780 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017776:	6878      	ldr	r0, [r7, #4]
 8017778:	f7f6 fd24 	bl	800e1c4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801777c:	2300      	movs	r3, #0
 801777e:	e07c      	b.n	801787a <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017780:	69bb      	ldr	r3, [r7, #24]
 8017782:	2b00      	cmp	r3, #0
 8017784:	d104      	bne.n	8017790 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017786:	6878      	ldr	r0, [r7, #4]
 8017788:	f7f6 fd1c 	bl	800e1c4 <pbuf_free>
    return ERR_OK;
 801778c:	2300      	movs	r3, #0
 801778e:	e074      	b.n	801787a <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017790:	69fb      	ldr	r3, [r7, #28]
 8017792:	88db      	ldrh	r3, [r3, #6]
 8017794:	b29b      	uxth	r3, r3
 8017796:	461a      	mov	r2, r3
 8017798:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801779c:	4013      	ands	r3, r2
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d00b      	beq.n	80177ba <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80177a2:	6878      	ldr	r0, [r7, #4]
 80177a4:	f000 fc90 	bl	80180c8 <ip4_reass>
 80177a8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d101      	bne.n	80177b4 <ip4_input+0x1a8>
      return ERR_OK;
 80177b0:	2300      	movs	r3, #0
 80177b2:	e062      	b.n	801787a <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	685b      	ldr	r3, [r3, #4]
 80177b8:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80177ba:	4a32      	ldr	r2, [pc, #200]	; (8017884 <ip4_input+0x278>)
 80177bc:	69bb      	ldr	r3, [r7, #24]
 80177be:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80177c0:	4a30      	ldr	r2, [pc, #192]	; (8017884 <ip4_input+0x278>)
 80177c2:	683b      	ldr	r3, [r7, #0]
 80177c4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80177c6:	4a2f      	ldr	r2, [pc, #188]	; (8017884 <ip4_input+0x278>)
 80177c8:	69fb      	ldr	r3, [r7, #28]
 80177ca:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80177cc:	69fb      	ldr	r3, [r7, #28]
 80177ce:	781b      	ldrb	r3, [r3, #0]
 80177d0:	f003 030f 	and.w	r3, r3, #15
 80177d4:	b2db      	uxtb	r3, r3
 80177d6:	009b      	lsls	r3, r3, #2
 80177d8:	b2db      	uxtb	r3, r3
 80177da:	b29a      	uxth	r2, r3
 80177dc:	4b29      	ldr	r3, [pc, #164]	; (8017884 <ip4_input+0x278>)
 80177de:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80177e0:	8a7b      	ldrh	r3, [r7, #18]
 80177e2:	4619      	mov	r1, r3
 80177e4:	6878      	ldr	r0, [r7, #4]
 80177e6:	f7f6 fc67 	bl	800e0b8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80177ea:	69fb      	ldr	r3, [r7, #28]
 80177ec:	7a5b      	ldrb	r3, [r3, #9]
 80177ee:	2b06      	cmp	r3, #6
 80177f0:	d009      	beq.n	8017806 <ip4_input+0x1fa>
 80177f2:	2b11      	cmp	r3, #17
 80177f4:	d002      	beq.n	80177fc <ip4_input+0x1f0>
 80177f6:	2b01      	cmp	r3, #1
 80177f8:	d00a      	beq.n	8017810 <ip4_input+0x204>
 80177fa:	e00e      	b.n	801781a <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80177fc:	6839      	ldr	r1, [r7, #0]
 80177fe:	6878      	ldr	r0, [r7, #4]
 8017800:	f7fc face 	bl	8013da0 <udp_input>
        break;
 8017804:	e026      	b.n	8017854 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017806:	6839      	ldr	r1, [r7, #0]
 8017808:	6878      	ldr	r0, [r7, #4]
 801780a:	f7f8 fb07 	bl	800fe1c <tcp_input>
        break;
 801780e:	e021      	b.n	8017854 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017810:	6839      	ldr	r1, [r7, #0]
 8017812:	6878      	ldr	r0, [r7, #4]
 8017814:	f7ff fcd2 	bl	80171bc <icmp_input>
        break;
 8017818:	e01c      	b.n	8017854 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801781a:	4b1a      	ldr	r3, [pc, #104]	; (8017884 <ip4_input+0x278>)
 801781c:	695b      	ldr	r3, [r3, #20]
 801781e:	69b9      	ldr	r1, [r7, #24]
 8017820:	4618      	mov	r0, r3
 8017822:	f000 f90b 	bl	8017a3c <ip4_addr_isbroadcast_u32>
 8017826:	4603      	mov	r3, r0
 8017828:	2b00      	cmp	r3, #0
 801782a:	d10f      	bne.n	801784c <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801782c:	4b15      	ldr	r3, [pc, #84]	; (8017884 <ip4_input+0x278>)
 801782e:	695b      	ldr	r3, [r3, #20]
 8017830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017834:	2be0      	cmp	r3, #224	; 0xe0
 8017836:	d009      	beq.n	801784c <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017838:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801783c:	4619      	mov	r1, r3
 801783e:	6878      	ldr	r0, [r7, #4]
 8017840:	f7f6 fcad 	bl	800e19e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017844:	2102      	movs	r1, #2
 8017846:	6878      	ldr	r0, [r7, #4]
 8017848:	f7ff fdbc 	bl	80173c4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801784c:	6878      	ldr	r0, [r7, #4]
 801784e:	f7f6 fcb9 	bl	800e1c4 <pbuf_free>
        break;
 8017852:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017854:	4b0b      	ldr	r3, [pc, #44]	; (8017884 <ip4_input+0x278>)
 8017856:	2200      	movs	r2, #0
 8017858:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801785a:	4b0a      	ldr	r3, [pc, #40]	; (8017884 <ip4_input+0x278>)
 801785c:	2200      	movs	r2, #0
 801785e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017860:	4b08      	ldr	r3, [pc, #32]	; (8017884 <ip4_input+0x278>)
 8017862:	2200      	movs	r2, #0
 8017864:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017866:	4b07      	ldr	r3, [pc, #28]	; (8017884 <ip4_input+0x278>)
 8017868:	2200      	movs	r2, #0
 801786a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801786c:	4b05      	ldr	r3, [pc, #20]	; (8017884 <ip4_input+0x278>)
 801786e:	2200      	movs	r2, #0
 8017870:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017872:	4b04      	ldr	r3, [pc, #16]	; (8017884 <ip4_input+0x278>)
 8017874:	2200      	movs	r2, #0
 8017876:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017878:	2300      	movs	r3, #0
}
 801787a:	4618      	mov	r0, r3
 801787c:	3720      	adds	r7, #32
 801787e:	46bd      	mov	sp, r7
 8017880:	bd80      	pop	{r7, pc}
 8017882:	bf00      	nop
 8017884:	20004968 	.word	0x20004968
 8017888:	20007ebc 	.word	0x20007ebc

0801788c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801788c:	b580      	push	{r7, lr}
 801788e:	b08a      	sub	sp, #40	; 0x28
 8017890:	af04      	add	r7, sp, #16
 8017892:	60f8      	str	r0, [r7, #12]
 8017894:	60b9      	str	r1, [r7, #8]
 8017896:	607a      	str	r2, [r7, #4]
 8017898:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801789a:	68bb      	ldr	r3, [r7, #8]
 801789c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d009      	beq.n	80178b8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80178a4:	68bb      	ldr	r3, [r7, #8]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d003      	beq.n	80178b2 <ip4_output_if+0x26>
 80178aa:	68bb      	ldr	r3, [r7, #8]
 80178ac:	681b      	ldr	r3, [r3, #0]
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d102      	bne.n	80178b8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80178b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178b4:	3304      	adds	r3, #4
 80178b6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80178b8:	78fa      	ldrb	r2, [r7, #3]
 80178ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178bc:	9302      	str	r3, [sp, #8]
 80178be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80178c2:	9301      	str	r3, [sp, #4]
 80178c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80178c8:	9300      	str	r3, [sp, #0]
 80178ca:	4613      	mov	r3, r2
 80178cc:	687a      	ldr	r2, [r7, #4]
 80178ce:	6979      	ldr	r1, [r7, #20]
 80178d0:	68f8      	ldr	r0, [r7, #12]
 80178d2:	f000 f805 	bl	80178e0 <ip4_output_if_src>
 80178d6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80178d8:	4618      	mov	r0, r3
 80178da:	3718      	adds	r7, #24
 80178dc:	46bd      	mov	sp, r7
 80178de:	bd80      	pop	{r7, pc}

080178e0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80178e0:	b580      	push	{r7, lr}
 80178e2:	b088      	sub	sp, #32
 80178e4:	af00      	add	r7, sp, #0
 80178e6:	60f8      	str	r0, [r7, #12]
 80178e8:	60b9      	str	r1, [r7, #8]
 80178ea:	607a      	str	r2, [r7, #4]
 80178ec:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	7b9b      	ldrb	r3, [r3, #14]
 80178f2:	2b01      	cmp	r3, #1
 80178f4:	d006      	beq.n	8017904 <ip4_output_if_src+0x24>
 80178f6:	4b4b      	ldr	r3, [pc, #300]	; (8017a24 <ip4_output_if_src+0x144>)
 80178f8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80178fc:	494a      	ldr	r1, [pc, #296]	; (8017a28 <ip4_output_if_src+0x148>)
 80178fe:	484b      	ldr	r0, [pc, #300]	; (8017a2c <ip4_output_if_src+0x14c>)
 8017900:	f001 f8e6 	bl	8018ad0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	2b00      	cmp	r3, #0
 8017908:	d060      	beq.n	80179cc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801790a:	2314      	movs	r3, #20
 801790c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801790e:	2114      	movs	r1, #20
 8017910:	68f8      	ldr	r0, [r7, #12]
 8017912:	f7f6 fbc1 	bl	800e098 <pbuf_add_header>
 8017916:	4603      	mov	r3, r0
 8017918:	2b00      	cmp	r3, #0
 801791a:	d002      	beq.n	8017922 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801791c:	f06f 0301 	mvn.w	r3, #1
 8017920:	e07c      	b.n	8017a1c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	685b      	ldr	r3, [r3, #4]
 8017926:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	895b      	ldrh	r3, [r3, #10]
 801792c:	2b13      	cmp	r3, #19
 801792e:	d806      	bhi.n	801793e <ip4_output_if_src+0x5e>
 8017930:	4b3c      	ldr	r3, [pc, #240]	; (8017a24 <ip4_output_if_src+0x144>)
 8017932:	f240 3289 	movw	r2, #905	; 0x389
 8017936:	493e      	ldr	r1, [pc, #248]	; (8017a30 <ip4_output_if_src+0x150>)
 8017938:	483c      	ldr	r0, [pc, #240]	; (8017a2c <ip4_output_if_src+0x14c>)
 801793a:	f001 f8c9 	bl	8018ad0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801793e:	69fb      	ldr	r3, [r7, #28]
 8017940:	78fa      	ldrb	r2, [r7, #3]
 8017942:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017944:	69fb      	ldr	r3, [r7, #28]
 8017946:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801794a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	681a      	ldr	r2, [r3, #0]
 8017950:	69fb      	ldr	r3, [r7, #28]
 8017952:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017954:	8b7b      	ldrh	r3, [r7, #26]
 8017956:	089b      	lsrs	r3, r3, #2
 8017958:	b29b      	uxth	r3, r3
 801795a:	b2db      	uxtb	r3, r3
 801795c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017960:	b2da      	uxtb	r2, r3
 8017962:	69fb      	ldr	r3, [r7, #28]
 8017964:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017966:	69fb      	ldr	r3, [r7, #28]
 8017968:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801796c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	891b      	ldrh	r3, [r3, #8]
 8017972:	4618      	mov	r0, r3
 8017974:	f7f5 f985 	bl	800cc82 <lwip_htons>
 8017978:	4603      	mov	r3, r0
 801797a:	461a      	mov	r2, r3
 801797c:	69fb      	ldr	r3, [r7, #28]
 801797e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017980:	69fb      	ldr	r3, [r7, #28]
 8017982:	2200      	movs	r2, #0
 8017984:	719a      	strb	r2, [r3, #6]
 8017986:	2200      	movs	r2, #0
 8017988:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801798a:	4b2a      	ldr	r3, [pc, #168]	; (8017a34 <ip4_output_if_src+0x154>)
 801798c:	881b      	ldrh	r3, [r3, #0]
 801798e:	4618      	mov	r0, r3
 8017990:	f7f5 f977 	bl	800cc82 <lwip_htons>
 8017994:	4603      	mov	r3, r0
 8017996:	461a      	mov	r2, r3
 8017998:	69fb      	ldr	r3, [r7, #28]
 801799a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801799c:	4b25      	ldr	r3, [pc, #148]	; (8017a34 <ip4_output_if_src+0x154>)
 801799e:	881b      	ldrh	r3, [r3, #0]
 80179a0:	3301      	adds	r3, #1
 80179a2:	b29a      	uxth	r2, r3
 80179a4:	4b23      	ldr	r3, [pc, #140]	; (8017a34 <ip4_output_if_src+0x154>)
 80179a6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80179a8:	68bb      	ldr	r3, [r7, #8]
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d104      	bne.n	80179b8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80179ae:	4b22      	ldr	r3, [pc, #136]	; (8017a38 <ip4_output_if_src+0x158>)
 80179b0:	681a      	ldr	r2, [r3, #0]
 80179b2:	69fb      	ldr	r3, [r7, #28]
 80179b4:	60da      	str	r2, [r3, #12]
 80179b6:	e003      	b.n	80179c0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80179b8:	68bb      	ldr	r3, [r7, #8]
 80179ba:	681a      	ldr	r2, [r3, #0]
 80179bc:	69fb      	ldr	r3, [r7, #28]
 80179be:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80179c0:	69fb      	ldr	r3, [r7, #28]
 80179c2:	2200      	movs	r2, #0
 80179c4:	729a      	strb	r2, [r3, #10]
 80179c6:	2200      	movs	r2, #0
 80179c8:	72da      	strb	r2, [r3, #11]
 80179ca:	e00f      	b.n	80179ec <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80179cc:	68fb      	ldr	r3, [r7, #12]
 80179ce:	895b      	ldrh	r3, [r3, #10]
 80179d0:	2b13      	cmp	r3, #19
 80179d2:	d802      	bhi.n	80179da <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80179d4:	f06f 0301 	mvn.w	r3, #1
 80179d8:	e020      	b.n	8017a1c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80179da:	68fb      	ldr	r3, [r7, #12]
 80179dc:	685b      	ldr	r3, [r3, #4]
 80179de:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80179e0:	69fb      	ldr	r3, [r7, #28]
 80179e2:	691b      	ldr	r3, [r3, #16]
 80179e4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80179e6:	f107 0314 	add.w	r3, r7, #20
 80179ea:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80179ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d00c      	beq.n	8017a0e <ip4_output_if_src+0x12e>
 80179f4:	68fb      	ldr	r3, [r7, #12]
 80179f6:	891a      	ldrh	r2, [r3, #8]
 80179f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80179fc:	429a      	cmp	r2, r3
 80179fe:	d906      	bls.n	8017a0e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017a00:	687a      	ldr	r2, [r7, #4]
 8017a02:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017a04:	68f8      	ldr	r0, [r7, #12]
 8017a06:	f000 fd4b 	bl	80184a0 <ip4_frag>
 8017a0a:	4603      	mov	r3, r0
 8017a0c:	e006      	b.n	8017a1c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a10:	695b      	ldr	r3, [r3, #20]
 8017a12:	687a      	ldr	r2, [r7, #4]
 8017a14:	68f9      	ldr	r1, [r7, #12]
 8017a16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a18:	4798      	blx	r3
 8017a1a:	4603      	mov	r3, r0
}
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	3720      	adds	r7, #32
 8017a20:	46bd      	mov	sp, r7
 8017a22:	bd80      	pop	{r7, pc}
 8017a24:	0801c328 	.word	0x0801c328
 8017a28:	0801c35c 	.word	0x0801c35c
 8017a2c:	0801c368 	.word	0x0801c368
 8017a30:	0801c390 	.word	0x0801c390
 8017a34:	200005ba 	.word	0x200005ba
 8017a38:	0802b590 	.word	0x0802b590

08017a3c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017a3c:	b480      	push	{r7}
 8017a3e:	b085      	sub	sp, #20
 8017a40:	af00      	add	r7, sp, #0
 8017a42:	6078      	str	r0, [r7, #4]
 8017a44:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a50:	d002      	beq.n	8017a58 <ip4_addr_isbroadcast_u32+0x1c>
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	d101      	bne.n	8017a5c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017a58:	2301      	movs	r3, #1
 8017a5a:	e02a      	b.n	8017ab2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017a5c:	683b      	ldr	r3, [r7, #0]
 8017a5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017a62:	f003 0302 	and.w	r3, r3, #2
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	d101      	bne.n	8017a6e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017a6a:	2300      	movs	r3, #0
 8017a6c:	e021      	b.n	8017ab2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017a6e:	683b      	ldr	r3, [r7, #0]
 8017a70:	3304      	adds	r3, #4
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	687a      	ldr	r2, [r7, #4]
 8017a76:	429a      	cmp	r2, r3
 8017a78:	d101      	bne.n	8017a7e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017a7a:	2300      	movs	r3, #0
 8017a7c:	e019      	b.n	8017ab2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017a7e:	68fa      	ldr	r2, [r7, #12]
 8017a80:	683b      	ldr	r3, [r7, #0]
 8017a82:	3304      	adds	r3, #4
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	405a      	eors	r2, r3
 8017a88:	683b      	ldr	r3, [r7, #0]
 8017a8a:	3308      	adds	r3, #8
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	4013      	ands	r3, r2
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d10d      	bne.n	8017ab0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017a94:	683b      	ldr	r3, [r7, #0]
 8017a96:	3308      	adds	r3, #8
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	43da      	mvns	r2, r3
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017aa0:	683b      	ldr	r3, [r7, #0]
 8017aa2:	3308      	adds	r3, #8
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017aa8:	429a      	cmp	r2, r3
 8017aaa:	d101      	bne.n	8017ab0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017aac:	2301      	movs	r3, #1
 8017aae:	e000      	b.n	8017ab2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017ab0:	2300      	movs	r3, #0
  }
}
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	3714      	adds	r7, #20
 8017ab6:	46bd      	mov	sp, r7
 8017ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017abc:	4770      	bx	lr
	...

08017ac0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017ac0:	b580      	push	{r7, lr}
 8017ac2:	b084      	sub	sp, #16
 8017ac4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017ac6:	2300      	movs	r3, #0
 8017ac8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017aca:	4b12      	ldr	r3, [pc, #72]	; (8017b14 <ip_reass_tmr+0x54>)
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017ad0:	e018      	b.n	8017b04 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	7fdb      	ldrb	r3, [r3, #31]
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d00b      	beq.n	8017af2 <ip_reass_tmr+0x32>
      r->timer--;
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	7fdb      	ldrb	r3, [r3, #31]
 8017ade:	3b01      	subs	r3, #1
 8017ae0:	b2da      	uxtb	r2, r3
 8017ae2:	68fb      	ldr	r3, [r7, #12]
 8017ae4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017aea:	68fb      	ldr	r3, [r7, #12]
 8017aec:	681b      	ldr	r3, [r3, #0]
 8017aee:	60fb      	str	r3, [r7, #12]
 8017af0:	e008      	b.n	8017b04 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017af2:	68fb      	ldr	r3, [r7, #12]
 8017af4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017af6:	68fb      	ldr	r3, [r7, #12]
 8017af8:	681b      	ldr	r3, [r3, #0]
 8017afa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017afc:	68b9      	ldr	r1, [r7, #8]
 8017afe:	6878      	ldr	r0, [r7, #4]
 8017b00:	f000 f80a 	bl	8017b18 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017b04:	68fb      	ldr	r3, [r7, #12]
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d1e3      	bne.n	8017ad2 <ip_reass_tmr+0x12>
    }
  }
}
 8017b0a:	bf00      	nop
 8017b0c:	3710      	adds	r7, #16
 8017b0e:	46bd      	mov	sp, r7
 8017b10:	bd80      	pop	{r7, pc}
 8017b12:	bf00      	nop
 8017b14:	200005bc 	.word	0x200005bc

08017b18 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017b18:	b580      	push	{r7, lr}
 8017b1a:	b088      	sub	sp, #32
 8017b1c:	af00      	add	r7, sp, #0
 8017b1e:	6078      	str	r0, [r7, #4]
 8017b20:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017b22:	2300      	movs	r3, #0
 8017b24:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017b26:	683a      	ldr	r2, [r7, #0]
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	429a      	cmp	r2, r3
 8017b2c:	d105      	bne.n	8017b3a <ip_reass_free_complete_datagram+0x22>
 8017b2e:	4b45      	ldr	r3, [pc, #276]	; (8017c44 <ip_reass_free_complete_datagram+0x12c>)
 8017b30:	22ab      	movs	r2, #171	; 0xab
 8017b32:	4945      	ldr	r1, [pc, #276]	; (8017c48 <ip_reass_free_complete_datagram+0x130>)
 8017b34:	4845      	ldr	r0, [pc, #276]	; (8017c4c <ip_reass_free_complete_datagram+0x134>)
 8017b36:	f000 ffcb 	bl	8018ad0 <iprintf>
  if (prev != NULL) {
 8017b3a:	683b      	ldr	r3, [r7, #0]
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d00a      	beq.n	8017b56 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017b40:	683b      	ldr	r3, [r7, #0]
 8017b42:	681b      	ldr	r3, [r3, #0]
 8017b44:	687a      	ldr	r2, [r7, #4]
 8017b46:	429a      	cmp	r2, r3
 8017b48:	d005      	beq.n	8017b56 <ip_reass_free_complete_datagram+0x3e>
 8017b4a:	4b3e      	ldr	r3, [pc, #248]	; (8017c44 <ip_reass_free_complete_datagram+0x12c>)
 8017b4c:	22ad      	movs	r2, #173	; 0xad
 8017b4e:	4940      	ldr	r1, [pc, #256]	; (8017c50 <ip_reass_free_complete_datagram+0x138>)
 8017b50:	483e      	ldr	r0, [pc, #248]	; (8017c4c <ip_reass_free_complete_datagram+0x134>)
 8017b52:	f000 ffbd 	bl	8018ad0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	685b      	ldr	r3, [r3, #4]
 8017b5a:	685b      	ldr	r3, [r3, #4]
 8017b5c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017b5e:	697b      	ldr	r3, [r7, #20]
 8017b60:	889b      	ldrh	r3, [r3, #4]
 8017b62:	b29b      	uxth	r3, r3
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d12a      	bne.n	8017bbe <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	685b      	ldr	r3, [r3, #4]
 8017b6c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017b6e:	697b      	ldr	r3, [r7, #20]
 8017b70:	681a      	ldr	r2, [r3, #0]
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017b76:	69bb      	ldr	r3, [r7, #24]
 8017b78:	6858      	ldr	r0, [r3, #4]
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	3308      	adds	r3, #8
 8017b7e:	2214      	movs	r2, #20
 8017b80:	4619      	mov	r1, r3
 8017b82:	f000 feea 	bl	801895a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017b86:	2101      	movs	r1, #1
 8017b88:	69b8      	ldr	r0, [r7, #24]
 8017b8a:	f7ff fc2b 	bl	80173e4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017b8e:	69b8      	ldr	r0, [r7, #24]
 8017b90:	f7f6 fba0 	bl	800e2d4 <pbuf_clen>
 8017b94:	4603      	mov	r3, r0
 8017b96:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017b98:	8bfa      	ldrh	r2, [r7, #30]
 8017b9a:	8a7b      	ldrh	r3, [r7, #18]
 8017b9c:	4413      	add	r3, r2
 8017b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017ba2:	db05      	blt.n	8017bb0 <ip_reass_free_complete_datagram+0x98>
 8017ba4:	4b27      	ldr	r3, [pc, #156]	; (8017c44 <ip_reass_free_complete_datagram+0x12c>)
 8017ba6:	22bc      	movs	r2, #188	; 0xbc
 8017ba8:	492a      	ldr	r1, [pc, #168]	; (8017c54 <ip_reass_free_complete_datagram+0x13c>)
 8017baa:	4828      	ldr	r0, [pc, #160]	; (8017c4c <ip_reass_free_complete_datagram+0x134>)
 8017bac:	f000 ff90 	bl	8018ad0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017bb0:	8bfa      	ldrh	r2, [r7, #30]
 8017bb2:	8a7b      	ldrh	r3, [r7, #18]
 8017bb4:	4413      	add	r3, r2
 8017bb6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017bb8:	69b8      	ldr	r0, [r7, #24]
 8017bba:	f7f6 fb03 	bl	800e1c4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	685b      	ldr	r3, [r3, #4]
 8017bc2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017bc4:	e01f      	b.n	8017c06 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017bc6:	69bb      	ldr	r3, [r7, #24]
 8017bc8:	685b      	ldr	r3, [r3, #4]
 8017bca:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017bcc:	69bb      	ldr	r3, [r7, #24]
 8017bce:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017bd0:	697b      	ldr	r3, [r7, #20]
 8017bd2:	681b      	ldr	r3, [r3, #0]
 8017bd4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017bd6:	68f8      	ldr	r0, [r7, #12]
 8017bd8:	f7f6 fb7c 	bl	800e2d4 <pbuf_clen>
 8017bdc:	4603      	mov	r3, r0
 8017bde:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017be0:	8bfa      	ldrh	r2, [r7, #30]
 8017be2:	8a7b      	ldrh	r3, [r7, #18]
 8017be4:	4413      	add	r3, r2
 8017be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017bea:	db05      	blt.n	8017bf8 <ip_reass_free_complete_datagram+0xe0>
 8017bec:	4b15      	ldr	r3, [pc, #84]	; (8017c44 <ip_reass_free_complete_datagram+0x12c>)
 8017bee:	22cc      	movs	r2, #204	; 0xcc
 8017bf0:	4918      	ldr	r1, [pc, #96]	; (8017c54 <ip_reass_free_complete_datagram+0x13c>)
 8017bf2:	4816      	ldr	r0, [pc, #88]	; (8017c4c <ip_reass_free_complete_datagram+0x134>)
 8017bf4:	f000 ff6c 	bl	8018ad0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017bf8:	8bfa      	ldrh	r2, [r7, #30]
 8017bfa:	8a7b      	ldrh	r3, [r7, #18]
 8017bfc:	4413      	add	r3, r2
 8017bfe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017c00:	68f8      	ldr	r0, [r7, #12]
 8017c02:	f7f6 fadf 	bl	800e1c4 <pbuf_free>
  while (p != NULL) {
 8017c06:	69bb      	ldr	r3, [r7, #24]
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d1dc      	bne.n	8017bc6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017c0c:	6839      	ldr	r1, [r7, #0]
 8017c0e:	6878      	ldr	r0, [r7, #4]
 8017c10:	f000 f8c2 	bl	8017d98 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017c14:	4b10      	ldr	r3, [pc, #64]	; (8017c58 <ip_reass_free_complete_datagram+0x140>)
 8017c16:	881b      	ldrh	r3, [r3, #0]
 8017c18:	8bfa      	ldrh	r2, [r7, #30]
 8017c1a:	429a      	cmp	r2, r3
 8017c1c:	d905      	bls.n	8017c2a <ip_reass_free_complete_datagram+0x112>
 8017c1e:	4b09      	ldr	r3, [pc, #36]	; (8017c44 <ip_reass_free_complete_datagram+0x12c>)
 8017c20:	22d2      	movs	r2, #210	; 0xd2
 8017c22:	490e      	ldr	r1, [pc, #56]	; (8017c5c <ip_reass_free_complete_datagram+0x144>)
 8017c24:	4809      	ldr	r0, [pc, #36]	; (8017c4c <ip_reass_free_complete_datagram+0x134>)
 8017c26:	f000 ff53 	bl	8018ad0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017c2a:	4b0b      	ldr	r3, [pc, #44]	; (8017c58 <ip_reass_free_complete_datagram+0x140>)
 8017c2c:	881a      	ldrh	r2, [r3, #0]
 8017c2e:	8bfb      	ldrh	r3, [r7, #30]
 8017c30:	1ad3      	subs	r3, r2, r3
 8017c32:	b29a      	uxth	r2, r3
 8017c34:	4b08      	ldr	r3, [pc, #32]	; (8017c58 <ip_reass_free_complete_datagram+0x140>)
 8017c36:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017c38:	8bfb      	ldrh	r3, [r7, #30]
}
 8017c3a:	4618      	mov	r0, r3
 8017c3c:	3720      	adds	r7, #32
 8017c3e:	46bd      	mov	sp, r7
 8017c40:	bd80      	pop	{r7, pc}
 8017c42:	bf00      	nop
 8017c44:	0801c3c0 	.word	0x0801c3c0
 8017c48:	0801c3fc 	.word	0x0801c3fc
 8017c4c:	0801c408 	.word	0x0801c408
 8017c50:	0801c430 	.word	0x0801c430
 8017c54:	0801c444 	.word	0x0801c444
 8017c58:	200005c0 	.word	0x200005c0
 8017c5c:	0801c464 	.word	0x0801c464

08017c60 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017c60:	b580      	push	{r7, lr}
 8017c62:	b08a      	sub	sp, #40	; 0x28
 8017c64:	af00      	add	r7, sp, #0
 8017c66:	6078      	str	r0, [r7, #4]
 8017c68:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017c6a:	2300      	movs	r3, #0
 8017c6c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017c6e:	2300      	movs	r3, #0
 8017c70:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017c72:	2300      	movs	r3, #0
 8017c74:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017c76:	2300      	movs	r3, #0
 8017c78:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017c7a:	2300      	movs	r3, #0
 8017c7c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017c7e:	4b28      	ldr	r3, [pc, #160]	; (8017d20 <ip_reass_remove_oldest_datagram+0xc0>)
 8017c80:	681b      	ldr	r3, [r3, #0]
 8017c82:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017c84:	e030      	b.n	8017ce8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c88:	695a      	ldr	r2, [r3, #20]
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	68db      	ldr	r3, [r3, #12]
 8017c8e:	429a      	cmp	r2, r3
 8017c90:	d10c      	bne.n	8017cac <ip_reass_remove_oldest_datagram+0x4c>
 8017c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c94:	699a      	ldr	r2, [r3, #24]
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	691b      	ldr	r3, [r3, #16]
 8017c9a:	429a      	cmp	r2, r3
 8017c9c:	d106      	bne.n	8017cac <ip_reass_remove_oldest_datagram+0x4c>
 8017c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ca0:	899a      	ldrh	r2, [r3, #12]
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	889b      	ldrh	r3, [r3, #4]
 8017ca6:	b29b      	uxth	r3, r3
 8017ca8:	429a      	cmp	r2, r3
 8017caa:	d014      	beq.n	8017cd6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017cac:	693b      	ldr	r3, [r7, #16]
 8017cae:	3301      	adds	r3, #1
 8017cb0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017cb2:	6a3b      	ldr	r3, [r7, #32]
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d104      	bne.n	8017cc2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cba:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017cbc:	69fb      	ldr	r3, [r7, #28]
 8017cbe:	61bb      	str	r3, [r7, #24]
 8017cc0:	e009      	b.n	8017cd6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cc4:	7fda      	ldrb	r2, [r3, #31]
 8017cc6:	6a3b      	ldr	r3, [r7, #32]
 8017cc8:	7fdb      	ldrb	r3, [r3, #31]
 8017cca:	429a      	cmp	r2, r3
 8017ccc:	d803      	bhi.n	8017cd6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cd0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017cd2:	69fb      	ldr	r3, [r7, #28]
 8017cd4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cd8:	681b      	ldr	r3, [r3, #0]
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d001      	beq.n	8017ce2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ce0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	d1cb      	bne.n	8017c86 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017cee:	6a3b      	ldr	r3, [r7, #32]
 8017cf0:	2b00      	cmp	r3, #0
 8017cf2:	d008      	beq.n	8017d06 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017cf4:	69b9      	ldr	r1, [r7, #24]
 8017cf6:	6a38      	ldr	r0, [r7, #32]
 8017cf8:	f7ff ff0e 	bl	8017b18 <ip_reass_free_complete_datagram>
 8017cfc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017cfe:	697a      	ldr	r2, [r7, #20]
 8017d00:	68fb      	ldr	r3, [r7, #12]
 8017d02:	4413      	add	r3, r2
 8017d04:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017d06:	697a      	ldr	r2, [r7, #20]
 8017d08:	683b      	ldr	r3, [r7, #0]
 8017d0a:	429a      	cmp	r2, r3
 8017d0c:	da02      	bge.n	8017d14 <ip_reass_remove_oldest_datagram+0xb4>
 8017d0e:	693b      	ldr	r3, [r7, #16]
 8017d10:	2b01      	cmp	r3, #1
 8017d12:	dcac      	bgt.n	8017c6e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017d14:	697b      	ldr	r3, [r7, #20]
}
 8017d16:	4618      	mov	r0, r3
 8017d18:	3728      	adds	r7, #40	; 0x28
 8017d1a:	46bd      	mov	sp, r7
 8017d1c:	bd80      	pop	{r7, pc}
 8017d1e:	bf00      	nop
 8017d20:	200005bc 	.word	0x200005bc

08017d24 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017d24:	b580      	push	{r7, lr}
 8017d26:	b084      	sub	sp, #16
 8017d28:	af00      	add	r7, sp, #0
 8017d2a:	6078      	str	r0, [r7, #4]
 8017d2c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017d2e:	2004      	movs	r0, #4
 8017d30:	f7f5 fbfc 	bl	800d52c <memp_malloc>
 8017d34:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d110      	bne.n	8017d5e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017d3c:	6839      	ldr	r1, [r7, #0]
 8017d3e:	6878      	ldr	r0, [r7, #4]
 8017d40:	f7ff ff8e 	bl	8017c60 <ip_reass_remove_oldest_datagram>
 8017d44:	4602      	mov	r2, r0
 8017d46:	683b      	ldr	r3, [r7, #0]
 8017d48:	4293      	cmp	r3, r2
 8017d4a:	dc03      	bgt.n	8017d54 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017d4c:	2004      	movs	r0, #4
 8017d4e:	f7f5 fbed 	bl	800d52c <memp_malloc>
 8017d52:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017d54:	68fb      	ldr	r3, [r7, #12]
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d101      	bne.n	8017d5e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	e016      	b.n	8017d8c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017d5e:	2220      	movs	r2, #32
 8017d60:	2100      	movs	r1, #0
 8017d62:	68f8      	ldr	r0, [r7, #12]
 8017d64:	f000 fe04 	bl	8018970 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	220f      	movs	r2, #15
 8017d6c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017d6e:	4b09      	ldr	r3, [pc, #36]	; (8017d94 <ip_reass_enqueue_new_datagram+0x70>)
 8017d70:	681a      	ldr	r2, [r3, #0]
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017d76:	4a07      	ldr	r2, [pc, #28]	; (8017d94 <ip_reass_enqueue_new_datagram+0x70>)
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017d7c:	68fb      	ldr	r3, [r7, #12]
 8017d7e:	3308      	adds	r3, #8
 8017d80:	2214      	movs	r2, #20
 8017d82:	6879      	ldr	r1, [r7, #4]
 8017d84:	4618      	mov	r0, r3
 8017d86:	f000 fde8 	bl	801895a <memcpy>
  return ipr;
 8017d8a:	68fb      	ldr	r3, [r7, #12]
}
 8017d8c:	4618      	mov	r0, r3
 8017d8e:	3710      	adds	r7, #16
 8017d90:	46bd      	mov	sp, r7
 8017d92:	bd80      	pop	{r7, pc}
 8017d94:	200005bc 	.word	0x200005bc

08017d98 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017d98:	b580      	push	{r7, lr}
 8017d9a:	b082      	sub	sp, #8
 8017d9c:	af00      	add	r7, sp, #0
 8017d9e:	6078      	str	r0, [r7, #4]
 8017da0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017da2:	4b10      	ldr	r3, [pc, #64]	; (8017de4 <ip_reass_dequeue_datagram+0x4c>)
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	687a      	ldr	r2, [r7, #4]
 8017da8:	429a      	cmp	r2, r3
 8017daa:	d104      	bne.n	8017db6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	681b      	ldr	r3, [r3, #0]
 8017db0:	4a0c      	ldr	r2, [pc, #48]	; (8017de4 <ip_reass_dequeue_datagram+0x4c>)
 8017db2:	6013      	str	r3, [r2, #0]
 8017db4:	e00d      	b.n	8017dd2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017db6:	683b      	ldr	r3, [r7, #0]
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d106      	bne.n	8017dca <ip_reass_dequeue_datagram+0x32>
 8017dbc:	4b0a      	ldr	r3, [pc, #40]	; (8017de8 <ip_reass_dequeue_datagram+0x50>)
 8017dbe:	f240 1245 	movw	r2, #325	; 0x145
 8017dc2:	490a      	ldr	r1, [pc, #40]	; (8017dec <ip_reass_dequeue_datagram+0x54>)
 8017dc4:	480a      	ldr	r0, [pc, #40]	; (8017df0 <ip_reass_dequeue_datagram+0x58>)
 8017dc6:	f000 fe83 	bl	8018ad0 <iprintf>
    prev->next = ipr->next;
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	681a      	ldr	r2, [r3, #0]
 8017dce:	683b      	ldr	r3, [r7, #0]
 8017dd0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017dd2:	6879      	ldr	r1, [r7, #4]
 8017dd4:	2004      	movs	r0, #4
 8017dd6:	f7f5 fbf5 	bl	800d5c4 <memp_free>
}
 8017dda:	bf00      	nop
 8017ddc:	3708      	adds	r7, #8
 8017dde:	46bd      	mov	sp, r7
 8017de0:	bd80      	pop	{r7, pc}
 8017de2:	bf00      	nop
 8017de4:	200005bc 	.word	0x200005bc
 8017de8:	0801c3c0 	.word	0x0801c3c0
 8017dec:	0801c488 	.word	0x0801c488
 8017df0:	0801c408 	.word	0x0801c408

08017df4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017df4:	b580      	push	{r7, lr}
 8017df6:	b08c      	sub	sp, #48	; 0x30
 8017df8:	af00      	add	r7, sp, #0
 8017dfa:	60f8      	str	r0, [r7, #12]
 8017dfc:	60b9      	str	r1, [r7, #8]
 8017dfe:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017e00:	2300      	movs	r3, #0
 8017e02:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017e04:	2301      	movs	r3, #1
 8017e06:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017e08:	68bb      	ldr	r3, [r7, #8]
 8017e0a:	685b      	ldr	r3, [r3, #4]
 8017e0c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017e0e:	69fb      	ldr	r3, [r7, #28]
 8017e10:	885b      	ldrh	r3, [r3, #2]
 8017e12:	b29b      	uxth	r3, r3
 8017e14:	4618      	mov	r0, r3
 8017e16:	f7f4 ff34 	bl	800cc82 <lwip_htons>
 8017e1a:	4603      	mov	r3, r0
 8017e1c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017e1e:	69fb      	ldr	r3, [r7, #28]
 8017e20:	781b      	ldrb	r3, [r3, #0]
 8017e22:	f003 030f 	and.w	r3, r3, #15
 8017e26:	b2db      	uxtb	r3, r3
 8017e28:	009b      	lsls	r3, r3, #2
 8017e2a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017e2c:	7e7b      	ldrb	r3, [r7, #25]
 8017e2e:	b29b      	uxth	r3, r3
 8017e30:	8b7a      	ldrh	r2, [r7, #26]
 8017e32:	429a      	cmp	r2, r3
 8017e34:	d202      	bcs.n	8017e3c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017e36:	f04f 33ff 	mov.w	r3, #4294967295
 8017e3a:	e135      	b.n	80180a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017e3c:	7e7b      	ldrb	r3, [r7, #25]
 8017e3e:	b29b      	uxth	r3, r3
 8017e40:	8b7a      	ldrh	r2, [r7, #26]
 8017e42:	1ad3      	subs	r3, r2, r3
 8017e44:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017e46:	69fb      	ldr	r3, [r7, #28]
 8017e48:	88db      	ldrh	r3, [r3, #6]
 8017e4a:	b29b      	uxth	r3, r3
 8017e4c:	4618      	mov	r0, r3
 8017e4e:	f7f4 ff18 	bl	800cc82 <lwip_htons>
 8017e52:	4603      	mov	r3, r0
 8017e54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017e58:	b29b      	uxth	r3, r3
 8017e5a:	00db      	lsls	r3, r3, #3
 8017e5c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017e5e:	68bb      	ldr	r3, [r7, #8]
 8017e60:	685b      	ldr	r3, [r3, #4]
 8017e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e66:	2200      	movs	r2, #0
 8017e68:	701a      	strb	r2, [r3, #0]
 8017e6a:	2200      	movs	r2, #0
 8017e6c:	705a      	strb	r2, [r3, #1]
 8017e6e:	2200      	movs	r2, #0
 8017e70:	709a      	strb	r2, [r3, #2]
 8017e72:	2200      	movs	r2, #0
 8017e74:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e78:	8afa      	ldrh	r2, [r7, #22]
 8017e7a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017e7c:	8afa      	ldrh	r2, [r7, #22]
 8017e7e:	8b7b      	ldrh	r3, [r7, #26]
 8017e80:	4413      	add	r3, r2
 8017e82:	b29a      	uxth	r2, r3
 8017e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e86:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e8a:	88db      	ldrh	r3, [r3, #6]
 8017e8c:	b29b      	uxth	r3, r3
 8017e8e:	8afa      	ldrh	r2, [r7, #22]
 8017e90:	429a      	cmp	r2, r3
 8017e92:	d902      	bls.n	8017e9a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017e94:	f04f 33ff 	mov.w	r3, #4294967295
 8017e98:	e106      	b.n	80180a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017e9a:	68fb      	ldr	r3, [r7, #12]
 8017e9c:	685b      	ldr	r3, [r3, #4]
 8017e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8017ea0:	e068      	b.n	8017f74 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ea4:	685b      	ldr	r3, [r3, #4]
 8017ea6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eaa:	889b      	ldrh	r3, [r3, #4]
 8017eac:	b29a      	uxth	r2, r3
 8017eae:	693b      	ldr	r3, [r7, #16]
 8017eb0:	889b      	ldrh	r3, [r3, #4]
 8017eb2:	b29b      	uxth	r3, r3
 8017eb4:	429a      	cmp	r2, r3
 8017eb6:	d235      	bcs.n	8017f24 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ebc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d020      	beq.n	8017f06 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ec6:	889b      	ldrh	r3, [r3, #4]
 8017ec8:	b29a      	uxth	r2, r3
 8017eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ecc:	88db      	ldrh	r3, [r3, #6]
 8017ece:	b29b      	uxth	r3, r3
 8017ed0:	429a      	cmp	r2, r3
 8017ed2:	d307      	bcc.n	8017ee4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ed6:	88db      	ldrh	r3, [r3, #6]
 8017ed8:	b29a      	uxth	r2, r3
 8017eda:	693b      	ldr	r3, [r7, #16]
 8017edc:	889b      	ldrh	r3, [r3, #4]
 8017ede:	b29b      	uxth	r3, r3
 8017ee0:	429a      	cmp	r2, r3
 8017ee2:	d902      	bls.n	8017eea <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8017ee8:	e0de      	b.n	80180a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eec:	68ba      	ldr	r2, [r7, #8]
 8017eee:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ef2:	88db      	ldrh	r3, [r3, #6]
 8017ef4:	b29a      	uxth	r2, r3
 8017ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ef8:	889b      	ldrh	r3, [r3, #4]
 8017efa:	b29b      	uxth	r3, r3
 8017efc:	429a      	cmp	r2, r3
 8017efe:	d03d      	beq.n	8017f7c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017f00:	2300      	movs	r3, #0
 8017f02:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017f04:	e03a      	b.n	8017f7c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f08:	88db      	ldrh	r3, [r3, #6]
 8017f0a:	b29a      	uxth	r2, r3
 8017f0c:	693b      	ldr	r3, [r7, #16]
 8017f0e:	889b      	ldrh	r3, [r3, #4]
 8017f10:	b29b      	uxth	r3, r3
 8017f12:	429a      	cmp	r2, r3
 8017f14:	d902      	bls.n	8017f1c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017f16:	f04f 33ff 	mov.w	r3, #4294967295
 8017f1a:	e0c5      	b.n	80180a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017f1c:	68fb      	ldr	r3, [r7, #12]
 8017f1e:	68ba      	ldr	r2, [r7, #8]
 8017f20:	605a      	str	r2, [r3, #4]
      break;
 8017f22:	e02b      	b.n	8017f7c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f26:	889b      	ldrh	r3, [r3, #4]
 8017f28:	b29a      	uxth	r2, r3
 8017f2a:	693b      	ldr	r3, [r7, #16]
 8017f2c:	889b      	ldrh	r3, [r3, #4]
 8017f2e:	b29b      	uxth	r3, r3
 8017f30:	429a      	cmp	r2, r3
 8017f32:	d102      	bne.n	8017f3a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017f34:	f04f 33ff 	mov.w	r3, #4294967295
 8017f38:	e0b6      	b.n	80180a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f3c:	889b      	ldrh	r3, [r3, #4]
 8017f3e:	b29a      	uxth	r2, r3
 8017f40:	693b      	ldr	r3, [r7, #16]
 8017f42:	88db      	ldrh	r3, [r3, #6]
 8017f44:	b29b      	uxth	r3, r3
 8017f46:	429a      	cmp	r2, r3
 8017f48:	d202      	bcs.n	8017f50 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8017f4e:	e0ab      	b.n	80180a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d009      	beq.n	8017f6a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f58:	88db      	ldrh	r3, [r3, #6]
 8017f5a:	b29a      	uxth	r2, r3
 8017f5c:	693b      	ldr	r3, [r7, #16]
 8017f5e:	889b      	ldrh	r3, [r3, #4]
 8017f60:	b29b      	uxth	r3, r3
 8017f62:	429a      	cmp	r2, r3
 8017f64:	d001      	beq.n	8017f6a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017f66:	2300      	movs	r3, #0
 8017f68:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017f6a:	693b      	ldr	r3, [r7, #16]
 8017f6c:	681b      	ldr	r3, [r3, #0]
 8017f6e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017f70:	693b      	ldr	r3, [r7, #16]
 8017f72:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d193      	bne.n	8017ea2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017f7a:	e000      	b.n	8017f7e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017f7c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d12d      	bne.n	8017fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d01c      	beq.n	8017fc4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f8c:	88db      	ldrh	r3, [r3, #6]
 8017f8e:	b29a      	uxth	r2, r3
 8017f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f92:	889b      	ldrh	r3, [r3, #4]
 8017f94:	b29b      	uxth	r3, r3
 8017f96:	429a      	cmp	r2, r3
 8017f98:	d906      	bls.n	8017fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017f9a:	4b45      	ldr	r3, [pc, #276]	; (80180b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017f9c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017fa0:	4944      	ldr	r1, [pc, #272]	; (80180b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017fa2:	4845      	ldr	r0, [pc, #276]	; (80180b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017fa4:	f000 fd94 	bl	8018ad0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017faa:	68ba      	ldr	r2, [r7, #8]
 8017fac:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fb0:	88db      	ldrh	r3, [r3, #6]
 8017fb2:	b29a      	uxth	r2, r3
 8017fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fb6:	889b      	ldrh	r3, [r3, #4]
 8017fb8:	b29b      	uxth	r3, r3
 8017fba:	429a      	cmp	r2, r3
 8017fbc:	d010      	beq.n	8017fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017fbe:	2300      	movs	r3, #0
 8017fc0:	623b      	str	r3, [r7, #32]
 8017fc2:	e00d      	b.n	8017fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017fc4:	68fb      	ldr	r3, [r7, #12]
 8017fc6:	685b      	ldr	r3, [r3, #4]
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d006      	beq.n	8017fda <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017fcc:	4b38      	ldr	r3, [pc, #224]	; (80180b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017fce:	f240 12bf 	movw	r2, #447	; 0x1bf
 8017fd2:	493a      	ldr	r1, [pc, #232]	; (80180bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017fd4:	4838      	ldr	r0, [pc, #224]	; (80180b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017fd6:	f000 fd7b 	bl	8018ad0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	68ba      	ldr	r2, [r7, #8]
 8017fde:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d105      	bne.n	8017ff2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017fe6:	68fb      	ldr	r3, [r7, #12]
 8017fe8:	7f9b      	ldrb	r3, [r3, #30]
 8017fea:	f003 0301 	and.w	r3, r3, #1
 8017fee:	2b00      	cmp	r3, #0
 8017ff0:	d059      	beq.n	80180a6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017ff2:	6a3b      	ldr	r3, [r7, #32]
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d04f      	beq.n	8018098 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017ff8:	68fb      	ldr	r3, [r7, #12]
 8017ffa:	685b      	ldr	r3, [r3, #4]
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d006      	beq.n	801800e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018000:	68fb      	ldr	r3, [r7, #12]
 8018002:	685b      	ldr	r3, [r3, #4]
 8018004:	685b      	ldr	r3, [r3, #4]
 8018006:	889b      	ldrh	r3, [r3, #4]
 8018008:	b29b      	uxth	r3, r3
 801800a:	2b00      	cmp	r3, #0
 801800c:	d002      	beq.n	8018014 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801800e:	2300      	movs	r3, #0
 8018010:	623b      	str	r3, [r7, #32]
 8018012:	e041      	b.n	8018098 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018016:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801801e:	e012      	b.n	8018046 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018022:	685b      	ldr	r3, [r3, #4]
 8018024:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8018026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018028:	88db      	ldrh	r3, [r3, #6]
 801802a:	b29a      	uxth	r2, r3
 801802c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801802e:	889b      	ldrh	r3, [r3, #4]
 8018030:	b29b      	uxth	r3, r3
 8018032:	429a      	cmp	r2, r3
 8018034:	d002      	beq.n	801803c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018036:	2300      	movs	r3, #0
 8018038:	623b      	str	r3, [r7, #32]
            break;
 801803a:	e007      	b.n	801804c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801803c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801803e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018042:	681b      	ldr	r3, [r3, #0]
 8018044:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018048:	2b00      	cmp	r3, #0
 801804a:	d1e9      	bne.n	8018020 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801804c:	6a3b      	ldr	r3, [r7, #32]
 801804e:	2b00      	cmp	r3, #0
 8018050:	d022      	beq.n	8018098 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018052:	68fb      	ldr	r3, [r7, #12]
 8018054:	685b      	ldr	r3, [r3, #4]
 8018056:	2b00      	cmp	r3, #0
 8018058:	d106      	bne.n	8018068 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801805a:	4b15      	ldr	r3, [pc, #84]	; (80180b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801805c:	f240 12df 	movw	r2, #479	; 0x1df
 8018060:	4917      	ldr	r1, [pc, #92]	; (80180c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018062:	4815      	ldr	r0, [pc, #84]	; (80180b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018064:	f000 fd34 	bl	8018ad0 <iprintf>
          LWIP_ASSERT("sanity check",
 8018068:	68fb      	ldr	r3, [r7, #12]
 801806a:	685b      	ldr	r3, [r3, #4]
 801806c:	685b      	ldr	r3, [r3, #4]
 801806e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018070:	429a      	cmp	r2, r3
 8018072:	d106      	bne.n	8018082 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018074:	4b0e      	ldr	r3, [pc, #56]	; (80180b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018076:	f240 12e1 	movw	r2, #481	; 0x1e1
 801807a:	4911      	ldr	r1, [pc, #68]	; (80180c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801807c:	480e      	ldr	r0, [pc, #56]	; (80180b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801807e:	f000 fd27 	bl	8018ad0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018084:	681b      	ldr	r3, [r3, #0]
 8018086:	2b00      	cmp	r3, #0
 8018088:	d006      	beq.n	8018098 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801808a:	4b09      	ldr	r3, [pc, #36]	; (80180b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801808c:	f240 12e3 	movw	r2, #483	; 0x1e3
 8018090:	490c      	ldr	r1, [pc, #48]	; (80180c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018092:	4809      	ldr	r0, [pc, #36]	; (80180b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018094:	f000 fd1c 	bl	8018ad0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018098:	6a3b      	ldr	r3, [r7, #32]
 801809a:	2b00      	cmp	r3, #0
 801809c:	bf14      	ite	ne
 801809e:	2301      	movne	r3, #1
 80180a0:	2300      	moveq	r3, #0
 80180a2:	b2db      	uxtb	r3, r3
 80180a4:	e000      	b.n	80180a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80180a6:	2300      	movs	r3, #0
}
 80180a8:	4618      	mov	r0, r3
 80180aa:	3730      	adds	r7, #48	; 0x30
 80180ac:	46bd      	mov	sp, r7
 80180ae:	bd80      	pop	{r7, pc}
 80180b0:	0801c3c0 	.word	0x0801c3c0
 80180b4:	0801c4a4 	.word	0x0801c4a4
 80180b8:	0801c408 	.word	0x0801c408
 80180bc:	0801c4c4 	.word	0x0801c4c4
 80180c0:	0801c4fc 	.word	0x0801c4fc
 80180c4:	0801c50c 	.word	0x0801c50c

080180c8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80180c8:	b580      	push	{r7, lr}
 80180ca:	b08e      	sub	sp, #56	; 0x38
 80180cc:	af00      	add	r7, sp, #0
 80180ce:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	685b      	ldr	r3, [r3, #4]
 80180d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80180d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180d8:	781b      	ldrb	r3, [r3, #0]
 80180da:	f003 030f 	and.w	r3, r3, #15
 80180de:	b2db      	uxtb	r3, r3
 80180e0:	009b      	lsls	r3, r3, #2
 80180e2:	b2db      	uxtb	r3, r3
 80180e4:	2b14      	cmp	r3, #20
 80180e6:	f040 8167 	bne.w	80183b8 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80180ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180ec:	88db      	ldrh	r3, [r3, #6]
 80180ee:	b29b      	uxth	r3, r3
 80180f0:	4618      	mov	r0, r3
 80180f2:	f7f4 fdc6 	bl	800cc82 <lwip_htons>
 80180f6:	4603      	mov	r3, r0
 80180f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80180fc:	b29b      	uxth	r3, r3
 80180fe:	00db      	lsls	r3, r3, #3
 8018100:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018104:	885b      	ldrh	r3, [r3, #2]
 8018106:	b29b      	uxth	r3, r3
 8018108:	4618      	mov	r0, r3
 801810a:	f7f4 fdba 	bl	800cc82 <lwip_htons>
 801810e:	4603      	mov	r3, r0
 8018110:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018114:	781b      	ldrb	r3, [r3, #0]
 8018116:	f003 030f 	and.w	r3, r3, #15
 801811a:	b2db      	uxtb	r3, r3
 801811c:	009b      	lsls	r3, r3, #2
 801811e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8018122:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018126:	b29b      	uxth	r3, r3
 8018128:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801812a:	429a      	cmp	r2, r3
 801812c:	f0c0 8146 	bcc.w	80183bc <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018130:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018134:	b29b      	uxth	r3, r3
 8018136:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018138:	1ad3      	subs	r3, r2, r3
 801813a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801813c:	6878      	ldr	r0, [r7, #4]
 801813e:	f7f6 f8c9 	bl	800e2d4 <pbuf_clen>
 8018142:	4603      	mov	r3, r0
 8018144:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018146:	4ba3      	ldr	r3, [pc, #652]	; (80183d4 <ip4_reass+0x30c>)
 8018148:	881b      	ldrh	r3, [r3, #0]
 801814a:	461a      	mov	r2, r3
 801814c:	8c3b      	ldrh	r3, [r7, #32]
 801814e:	4413      	add	r3, r2
 8018150:	2b0a      	cmp	r3, #10
 8018152:	dd10      	ble.n	8018176 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018154:	8c3b      	ldrh	r3, [r7, #32]
 8018156:	4619      	mov	r1, r3
 8018158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801815a:	f7ff fd81 	bl	8017c60 <ip_reass_remove_oldest_datagram>
 801815e:	4603      	mov	r3, r0
 8018160:	2b00      	cmp	r3, #0
 8018162:	f000 812d 	beq.w	80183c0 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018166:	4b9b      	ldr	r3, [pc, #620]	; (80183d4 <ip4_reass+0x30c>)
 8018168:	881b      	ldrh	r3, [r3, #0]
 801816a:	461a      	mov	r2, r3
 801816c:	8c3b      	ldrh	r3, [r7, #32]
 801816e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018170:	2b0a      	cmp	r3, #10
 8018172:	f300 8125 	bgt.w	80183c0 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018176:	4b98      	ldr	r3, [pc, #608]	; (80183d8 <ip4_reass+0x310>)
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	633b      	str	r3, [r7, #48]	; 0x30
 801817c:	e015      	b.n	80181aa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801817e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018180:	695a      	ldr	r2, [r3, #20]
 8018182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018184:	68db      	ldr	r3, [r3, #12]
 8018186:	429a      	cmp	r2, r3
 8018188:	d10c      	bne.n	80181a4 <ip4_reass+0xdc>
 801818a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801818c:	699a      	ldr	r2, [r3, #24]
 801818e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018190:	691b      	ldr	r3, [r3, #16]
 8018192:	429a      	cmp	r2, r3
 8018194:	d106      	bne.n	80181a4 <ip4_reass+0xdc>
 8018196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018198:	899a      	ldrh	r2, [r3, #12]
 801819a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801819c:	889b      	ldrh	r3, [r3, #4]
 801819e:	b29b      	uxth	r3, r3
 80181a0:	429a      	cmp	r2, r3
 80181a2:	d006      	beq.n	80181b2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80181a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	633b      	str	r3, [r7, #48]	; 0x30
 80181aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d1e6      	bne.n	801817e <ip4_reass+0xb6>
 80181b0:	e000      	b.n	80181b4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80181b2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80181b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d109      	bne.n	80181ce <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80181ba:	8c3b      	ldrh	r3, [r7, #32]
 80181bc:	4619      	mov	r1, r3
 80181be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80181c0:	f7ff fdb0 	bl	8017d24 <ip_reass_enqueue_new_datagram>
 80181c4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80181c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d11c      	bne.n	8018206 <ip4_reass+0x13e>
      goto nullreturn;
 80181cc:	e0f9      	b.n	80183c2 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80181ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181d0:	88db      	ldrh	r3, [r3, #6]
 80181d2:	b29b      	uxth	r3, r3
 80181d4:	4618      	mov	r0, r3
 80181d6:	f7f4 fd54 	bl	800cc82 <lwip_htons>
 80181da:	4603      	mov	r3, r0
 80181dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d110      	bne.n	8018206 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80181e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181e6:	89db      	ldrh	r3, [r3, #14]
 80181e8:	4618      	mov	r0, r3
 80181ea:	f7f4 fd4a 	bl	800cc82 <lwip_htons>
 80181ee:	4603      	mov	r3, r0
 80181f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d006      	beq.n	8018206 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80181f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181fa:	3308      	adds	r3, #8
 80181fc:	2214      	movs	r2, #20
 80181fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018200:	4618      	mov	r0, r3
 8018202:	f000 fbaa 	bl	801895a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018208:	88db      	ldrh	r3, [r3, #6]
 801820a:	b29b      	uxth	r3, r3
 801820c:	f003 0320 	and.w	r3, r3, #32
 8018210:	2b00      	cmp	r3, #0
 8018212:	bf0c      	ite	eq
 8018214:	2301      	moveq	r3, #1
 8018216:	2300      	movne	r3, #0
 8018218:	b2db      	uxtb	r3, r3
 801821a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801821c:	69fb      	ldr	r3, [r7, #28]
 801821e:	2b00      	cmp	r3, #0
 8018220:	d00e      	beq.n	8018240 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018222:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018224:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018226:	4413      	add	r3, r2
 8018228:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801822a:	8b7a      	ldrh	r2, [r7, #26]
 801822c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801822e:	429a      	cmp	r2, r3
 8018230:	f0c0 80a0 	bcc.w	8018374 <ip4_reass+0x2ac>
 8018234:	8b7b      	ldrh	r3, [r7, #26]
 8018236:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801823a:	4293      	cmp	r3, r2
 801823c:	f200 809a 	bhi.w	8018374 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018240:	69fa      	ldr	r2, [r7, #28]
 8018242:	6879      	ldr	r1, [r7, #4]
 8018244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018246:	f7ff fdd5 	bl	8017df4 <ip_reass_chain_frag_into_datagram_and_validate>
 801824a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801824c:	697b      	ldr	r3, [r7, #20]
 801824e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018252:	f000 8091 	beq.w	8018378 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018256:	4b5f      	ldr	r3, [pc, #380]	; (80183d4 <ip4_reass+0x30c>)
 8018258:	881a      	ldrh	r2, [r3, #0]
 801825a:	8c3b      	ldrh	r3, [r7, #32]
 801825c:	4413      	add	r3, r2
 801825e:	b29a      	uxth	r2, r3
 8018260:	4b5c      	ldr	r3, [pc, #368]	; (80183d4 <ip4_reass+0x30c>)
 8018262:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018264:	69fb      	ldr	r3, [r7, #28]
 8018266:	2b00      	cmp	r3, #0
 8018268:	d00d      	beq.n	8018286 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801826a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801826c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801826e:	4413      	add	r3, r2
 8018270:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018274:	8a7a      	ldrh	r2, [r7, #18]
 8018276:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801827a:	7f9b      	ldrb	r3, [r3, #30]
 801827c:	f043 0301 	orr.w	r3, r3, #1
 8018280:	b2da      	uxtb	r2, r3
 8018282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018284:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018286:	697b      	ldr	r3, [r7, #20]
 8018288:	2b01      	cmp	r3, #1
 801828a:	d171      	bne.n	8018370 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801828c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801828e:	8b9b      	ldrh	r3, [r3, #28]
 8018290:	3314      	adds	r3, #20
 8018292:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018296:	685b      	ldr	r3, [r3, #4]
 8018298:	685b      	ldr	r3, [r3, #4]
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801829e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182a0:	685b      	ldr	r3, [r3, #4]
 80182a2:	685b      	ldr	r3, [r3, #4]
 80182a4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80182a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182a8:	3308      	adds	r3, #8
 80182aa:	2214      	movs	r2, #20
 80182ac:	4619      	mov	r1, r3
 80182ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80182b0:	f000 fb53 	bl	801895a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80182b4:	8a3b      	ldrh	r3, [r7, #16]
 80182b6:	4618      	mov	r0, r3
 80182b8:	f7f4 fce3 	bl	800cc82 <lwip_htons>
 80182bc:	4603      	mov	r3, r0
 80182be:	461a      	mov	r2, r3
 80182c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182c2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80182c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182c6:	2200      	movs	r2, #0
 80182c8:	719a      	strb	r2, [r3, #6]
 80182ca:	2200      	movs	r2, #0
 80182cc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80182ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182d0:	2200      	movs	r2, #0
 80182d2:	729a      	strb	r2, [r3, #10]
 80182d4:	2200      	movs	r2, #0
 80182d6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80182d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182da:	685b      	ldr	r3, [r3, #4]
 80182dc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80182de:	e00d      	b.n	80182fc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80182e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182e2:	685b      	ldr	r3, [r3, #4]
 80182e4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80182e6:	2114      	movs	r1, #20
 80182e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80182ea:	f7f5 fee5 	bl	800e0b8 <pbuf_remove_header>
      pbuf_cat(p, r);
 80182ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80182f0:	6878      	ldr	r0, [r7, #4]
 80182f2:	f7f6 f829 	bl	800e348 <pbuf_cat>
      r = iprh->next_pbuf;
 80182f6:	68fb      	ldr	r3, [r7, #12]
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80182fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d1ee      	bne.n	80182e0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018302:	4b35      	ldr	r3, [pc, #212]	; (80183d8 <ip4_reass+0x310>)
 8018304:	681b      	ldr	r3, [r3, #0]
 8018306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018308:	429a      	cmp	r2, r3
 801830a:	d102      	bne.n	8018312 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801830c:	2300      	movs	r3, #0
 801830e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018310:	e010      	b.n	8018334 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018312:	4b31      	ldr	r3, [pc, #196]	; (80183d8 <ip4_reass+0x310>)
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018318:	e007      	b.n	801832a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801831a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018320:	429a      	cmp	r2, r3
 8018322:	d006      	beq.n	8018332 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	62fb      	str	r3, [r7, #44]	; 0x2c
 801832a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801832c:	2b00      	cmp	r3, #0
 801832e:	d1f4      	bne.n	801831a <ip4_reass+0x252>
 8018330:	e000      	b.n	8018334 <ip4_reass+0x26c>
          break;
 8018332:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018334:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018336:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018338:	f7ff fd2e 	bl	8017d98 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801833c:	6878      	ldr	r0, [r7, #4]
 801833e:	f7f5 ffc9 	bl	800e2d4 <pbuf_clen>
 8018342:	4603      	mov	r3, r0
 8018344:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018346:	4b23      	ldr	r3, [pc, #140]	; (80183d4 <ip4_reass+0x30c>)
 8018348:	881b      	ldrh	r3, [r3, #0]
 801834a:	8c3a      	ldrh	r2, [r7, #32]
 801834c:	429a      	cmp	r2, r3
 801834e:	d906      	bls.n	801835e <ip4_reass+0x296>
 8018350:	4b22      	ldr	r3, [pc, #136]	; (80183dc <ip4_reass+0x314>)
 8018352:	f240 229b 	movw	r2, #667	; 0x29b
 8018356:	4922      	ldr	r1, [pc, #136]	; (80183e0 <ip4_reass+0x318>)
 8018358:	4822      	ldr	r0, [pc, #136]	; (80183e4 <ip4_reass+0x31c>)
 801835a:	f000 fbb9 	bl	8018ad0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801835e:	4b1d      	ldr	r3, [pc, #116]	; (80183d4 <ip4_reass+0x30c>)
 8018360:	881a      	ldrh	r2, [r3, #0]
 8018362:	8c3b      	ldrh	r3, [r7, #32]
 8018364:	1ad3      	subs	r3, r2, r3
 8018366:	b29a      	uxth	r2, r3
 8018368:	4b1a      	ldr	r3, [pc, #104]	; (80183d4 <ip4_reass+0x30c>)
 801836a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	e02c      	b.n	80183ca <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018370:	2300      	movs	r3, #0
 8018372:	e02a      	b.n	80183ca <ip4_reass+0x302>

nullreturn_ipr:
 8018374:	bf00      	nop
 8018376:	e000      	b.n	801837a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8018378:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801837a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801837c:	2b00      	cmp	r3, #0
 801837e:	d106      	bne.n	801838e <ip4_reass+0x2c6>
 8018380:	4b16      	ldr	r3, [pc, #88]	; (80183dc <ip4_reass+0x314>)
 8018382:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018386:	4918      	ldr	r1, [pc, #96]	; (80183e8 <ip4_reass+0x320>)
 8018388:	4816      	ldr	r0, [pc, #88]	; (80183e4 <ip4_reass+0x31c>)
 801838a:	f000 fba1 	bl	8018ad0 <iprintf>
  if (ipr->p == NULL) {
 801838e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018390:	685b      	ldr	r3, [r3, #4]
 8018392:	2b00      	cmp	r3, #0
 8018394:	d114      	bne.n	80183c0 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018396:	4b10      	ldr	r3, [pc, #64]	; (80183d8 <ip4_reass+0x310>)
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801839c:	429a      	cmp	r2, r3
 801839e:	d006      	beq.n	80183ae <ip4_reass+0x2e6>
 80183a0:	4b0e      	ldr	r3, [pc, #56]	; (80183dc <ip4_reass+0x314>)
 80183a2:	f240 22ab 	movw	r2, #683	; 0x2ab
 80183a6:	4911      	ldr	r1, [pc, #68]	; (80183ec <ip4_reass+0x324>)
 80183a8:	480e      	ldr	r0, [pc, #56]	; (80183e4 <ip4_reass+0x31c>)
 80183aa:	f000 fb91 	bl	8018ad0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80183ae:	2100      	movs	r1, #0
 80183b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80183b2:	f7ff fcf1 	bl	8017d98 <ip_reass_dequeue_datagram>
 80183b6:	e004      	b.n	80183c2 <ip4_reass+0x2fa>
    goto nullreturn;
 80183b8:	bf00      	nop
 80183ba:	e002      	b.n	80183c2 <ip4_reass+0x2fa>
    goto nullreturn;
 80183bc:	bf00      	nop
 80183be:	e000      	b.n	80183c2 <ip4_reass+0x2fa>
  }

nullreturn:
 80183c0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80183c2:	6878      	ldr	r0, [r7, #4]
 80183c4:	f7f5 fefe 	bl	800e1c4 <pbuf_free>
  return NULL;
 80183c8:	2300      	movs	r3, #0
}
 80183ca:	4618      	mov	r0, r3
 80183cc:	3738      	adds	r7, #56	; 0x38
 80183ce:	46bd      	mov	sp, r7
 80183d0:	bd80      	pop	{r7, pc}
 80183d2:	bf00      	nop
 80183d4:	200005c0 	.word	0x200005c0
 80183d8:	200005bc 	.word	0x200005bc
 80183dc:	0801c3c0 	.word	0x0801c3c0
 80183e0:	0801c530 	.word	0x0801c530
 80183e4:	0801c408 	.word	0x0801c408
 80183e8:	0801c54c 	.word	0x0801c54c
 80183ec:	0801c558 	.word	0x0801c558

080183f0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80183f0:	b580      	push	{r7, lr}
 80183f2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80183f4:	2005      	movs	r0, #5
 80183f6:	f7f5 f899 	bl	800d52c <memp_malloc>
 80183fa:	4603      	mov	r3, r0
}
 80183fc:	4618      	mov	r0, r3
 80183fe:	bd80      	pop	{r7, pc}

08018400 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018400:	b580      	push	{r7, lr}
 8018402:	b082      	sub	sp, #8
 8018404:	af00      	add	r7, sp, #0
 8018406:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	2b00      	cmp	r3, #0
 801840c:	d106      	bne.n	801841c <ip_frag_free_pbuf_custom_ref+0x1c>
 801840e:	4b07      	ldr	r3, [pc, #28]	; (801842c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018410:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018414:	4906      	ldr	r1, [pc, #24]	; (8018430 <ip_frag_free_pbuf_custom_ref+0x30>)
 8018416:	4807      	ldr	r0, [pc, #28]	; (8018434 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018418:	f000 fb5a 	bl	8018ad0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801841c:	6879      	ldr	r1, [r7, #4]
 801841e:	2005      	movs	r0, #5
 8018420:	f7f5 f8d0 	bl	800d5c4 <memp_free>
}
 8018424:	bf00      	nop
 8018426:	3708      	adds	r7, #8
 8018428:	46bd      	mov	sp, r7
 801842a:	bd80      	pop	{r7, pc}
 801842c:	0801c3c0 	.word	0x0801c3c0
 8018430:	0801c578 	.word	0x0801c578
 8018434:	0801c408 	.word	0x0801c408

08018438 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018438:	b580      	push	{r7, lr}
 801843a:	b084      	sub	sp, #16
 801843c:	af00      	add	r7, sp, #0
 801843e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	2b00      	cmp	r3, #0
 8018448:	d106      	bne.n	8018458 <ipfrag_free_pbuf_custom+0x20>
 801844a:	4b11      	ldr	r3, [pc, #68]	; (8018490 <ipfrag_free_pbuf_custom+0x58>)
 801844c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018450:	4910      	ldr	r1, [pc, #64]	; (8018494 <ipfrag_free_pbuf_custom+0x5c>)
 8018452:	4811      	ldr	r0, [pc, #68]	; (8018498 <ipfrag_free_pbuf_custom+0x60>)
 8018454:	f000 fb3c 	bl	8018ad0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018458:	68fa      	ldr	r2, [r7, #12]
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	429a      	cmp	r2, r3
 801845e:	d006      	beq.n	801846e <ipfrag_free_pbuf_custom+0x36>
 8018460:	4b0b      	ldr	r3, [pc, #44]	; (8018490 <ipfrag_free_pbuf_custom+0x58>)
 8018462:	f240 22cf 	movw	r2, #719	; 0x2cf
 8018466:	490d      	ldr	r1, [pc, #52]	; (801849c <ipfrag_free_pbuf_custom+0x64>)
 8018468:	480b      	ldr	r0, [pc, #44]	; (8018498 <ipfrag_free_pbuf_custom+0x60>)
 801846a:	f000 fb31 	bl	8018ad0 <iprintf>
  if (pcr->original != NULL) {
 801846e:	68fb      	ldr	r3, [r7, #12]
 8018470:	695b      	ldr	r3, [r3, #20]
 8018472:	2b00      	cmp	r3, #0
 8018474:	d004      	beq.n	8018480 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018476:	68fb      	ldr	r3, [r7, #12]
 8018478:	695b      	ldr	r3, [r3, #20]
 801847a:	4618      	mov	r0, r3
 801847c:	f7f5 fea2 	bl	800e1c4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018480:	68f8      	ldr	r0, [r7, #12]
 8018482:	f7ff ffbd 	bl	8018400 <ip_frag_free_pbuf_custom_ref>
}
 8018486:	bf00      	nop
 8018488:	3710      	adds	r7, #16
 801848a:	46bd      	mov	sp, r7
 801848c:	bd80      	pop	{r7, pc}
 801848e:	bf00      	nop
 8018490:	0801c3c0 	.word	0x0801c3c0
 8018494:	0801c584 	.word	0x0801c584
 8018498:	0801c408 	.word	0x0801c408
 801849c:	0801c590 	.word	0x0801c590

080184a0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80184a0:	b580      	push	{r7, lr}
 80184a2:	b094      	sub	sp, #80	; 0x50
 80184a4:	af02      	add	r7, sp, #8
 80184a6:	60f8      	str	r0, [r7, #12]
 80184a8:	60b9      	str	r1, [r7, #8]
 80184aa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80184ac:	2300      	movs	r3, #0
 80184ae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80184b2:	68bb      	ldr	r3, [r7, #8]
 80184b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80184b6:	3b14      	subs	r3, #20
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	da00      	bge.n	80184be <ip4_frag+0x1e>
 80184bc:	3307      	adds	r3, #7
 80184be:	10db      	asrs	r3, r3, #3
 80184c0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80184c2:	2314      	movs	r3, #20
 80184c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80184c6:	68fb      	ldr	r3, [r7, #12]
 80184c8:	685b      	ldr	r3, [r3, #4]
 80184ca:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80184cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184ce:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80184d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184d2:	781b      	ldrb	r3, [r3, #0]
 80184d4:	f003 030f 	and.w	r3, r3, #15
 80184d8:	b2db      	uxtb	r3, r3
 80184da:	009b      	lsls	r3, r3, #2
 80184dc:	b2db      	uxtb	r3, r3
 80184de:	2b14      	cmp	r3, #20
 80184e0:	d002      	beq.n	80184e8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80184e2:	f06f 0305 	mvn.w	r3, #5
 80184e6:	e10f      	b.n	8018708 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	895b      	ldrh	r3, [r3, #10]
 80184ec:	2b13      	cmp	r3, #19
 80184ee:	d809      	bhi.n	8018504 <ip4_frag+0x64>
 80184f0:	4b87      	ldr	r3, [pc, #540]	; (8018710 <ip4_frag+0x270>)
 80184f2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80184f6:	4987      	ldr	r1, [pc, #540]	; (8018714 <ip4_frag+0x274>)
 80184f8:	4887      	ldr	r0, [pc, #540]	; (8018718 <ip4_frag+0x278>)
 80184fa:	f000 fae9 	bl	8018ad0 <iprintf>
 80184fe:	f06f 0305 	mvn.w	r3, #5
 8018502:	e101      	b.n	8018708 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018506:	88db      	ldrh	r3, [r3, #6]
 8018508:	b29b      	uxth	r3, r3
 801850a:	4618      	mov	r0, r3
 801850c:	f7f4 fbb9 	bl	800cc82 <lwip_htons>
 8018510:	4603      	mov	r3, r0
 8018512:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018514:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018516:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801851a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801851e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018520:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018524:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018526:	68fb      	ldr	r3, [r7, #12]
 8018528:	891b      	ldrh	r3, [r3, #8]
 801852a:	3b14      	subs	r3, #20
 801852c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018530:	e0e0      	b.n	80186f4 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018532:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018534:	00db      	lsls	r3, r3, #3
 8018536:	b29b      	uxth	r3, r3
 8018538:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801853c:	4293      	cmp	r3, r2
 801853e:	bf28      	it	cs
 8018540:	4613      	movcs	r3, r2
 8018542:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018544:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018548:	2114      	movs	r1, #20
 801854a:	200e      	movs	r0, #14
 801854c:	f7f5 fb5a 	bl	800dc04 <pbuf_alloc>
 8018550:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018554:	2b00      	cmp	r3, #0
 8018556:	f000 80d4 	beq.w	8018702 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801855c:	895b      	ldrh	r3, [r3, #10]
 801855e:	2b13      	cmp	r3, #19
 8018560:	d806      	bhi.n	8018570 <ip4_frag+0xd0>
 8018562:	4b6b      	ldr	r3, [pc, #428]	; (8018710 <ip4_frag+0x270>)
 8018564:	f240 3225 	movw	r2, #805	; 0x325
 8018568:	496c      	ldr	r1, [pc, #432]	; (801871c <ip4_frag+0x27c>)
 801856a:	486b      	ldr	r0, [pc, #428]	; (8018718 <ip4_frag+0x278>)
 801856c:	f000 fab0 	bl	8018ad0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018572:	685b      	ldr	r3, [r3, #4]
 8018574:	2214      	movs	r2, #20
 8018576:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018578:	4618      	mov	r0, r3
 801857a:	f000 f9ee 	bl	801895a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801857e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018580:	685b      	ldr	r3, [r3, #4]
 8018582:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018584:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018586:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801858a:	e064      	b.n	8018656 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801858c:	68fb      	ldr	r3, [r7, #12]
 801858e:	895a      	ldrh	r2, [r3, #10]
 8018590:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018592:	1ad3      	subs	r3, r2, r3
 8018594:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018596:	68fb      	ldr	r3, [r7, #12]
 8018598:	895b      	ldrh	r3, [r3, #10]
 801859a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801859c:	429a      	cmp	r2, r3
 801859e:	d906      	bls.n	80185ae <ip4_frag+0x10e>
 80185a0:	4b5b      	ldr	r3, [pc, #364]	; (8018710 <ip4_frag+0x270>)
 80185a2:	f240 322d 	movw	r2, #813	; 0x32d
 80185a6:	495e      	ldr	r1, [pc, #376]	; (8018720 <ip4_frag+0x280>)
 80185a8:	485b      	ldr	r0, [pc, #364]	; (8018718 <ip4_frag+0x278>)
 80185aa:	f000 fa91 	bl	8018ad0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80185ae:	8bfa      	ldrh	r2, [r7, #30]
 80185b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80185b4:	4293      	cmp	r3, r2
 80185b6:	bf28      	it	cs
 80185b8:	4613      	movcs	r3, r2
 80185ba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80185be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d105      	bne.n	80185d2 <ip4_frag+0x132>
        poff = 0;
 80185c6:	2300      	movs	r3, #0
 80185c8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80185ca:	68fb      	ldr	r3, [r7, #12]
 80185cc:	681b      	ldr	r3, [r3, #0]
 80185ce:	60fb      	str	r3, [r7, #12]
        continue;
 80185d0:	e041      	b.n	8018656 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80185d2:	f7ff ff0d 	bl	80183f0 <ip_frag_alloc_pbuf_custom_ref>
 80185d6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80185d8:	69bb      	ldr	r3, [r7, #24]
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d103      	bne.n	80185e6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80185de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80185e0:	f7f5 fdf0 	bl	800e1c4 <pbuf_free>
        goto memerr;
 80185e4:	e08e      	b.n	8018704 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80185e6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80185e8:	68fb      	ldr	r3, [r7, #12]
 80185ea:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80185ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80185ee:	4413      	add	r3, r2
 80185f0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80185f4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80185f8:	9201      	str	r2, [sp, #4]
 80185fa:	9300      	str	r3, [sp, #0]
 80185fc:	4603      	mov	r3, r0
 80185fe:	2241      	movs	r2, #65	; 0x41
 8018600:	2000      	movs	r0, #0
 8018602:	f7f5 fc25 	bl	800de50 <pbuf_alloced_custom>
 8018606:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018608:	697b      	ldr	r3, [r7, #20]
 801860a:	2b00      	cmp	r3, #0
 801860c:	d106      	bne.n	801861c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801860e:	69b8      	ldr	r0, [r7, #24]
 8018610:	f7ff fef6 	bl	8018400 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018614:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018616:	f7f5 fdd5 	bl	800e1c4 <pbuf_free>
        goto memerr;
 801861a:	e073      	b.n	8018704 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 801861c:	68f8      	ldr	r0, [r7, #12]
 801861e:	f7f5 fe71 	bl	800e304 <pbuf_ref>
      pcr->original = p;
 8018622:	69bb      	ldr	r3, [r7, #24]
 8018624:	68fa      	ldr	r2, [r7, #12]
 8018626:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018628:	69bb      	ldr	r3, [r7, #24]
 801862a:	4a3e      	ldr	r2, [pc, #248]	; (8018724 <ip4_frag+0x284>)
 801862c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801862e:	6979      	ldr	r1, [r7, #20]
 8018630:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018632:	f7f5 fe89 	bl	800e348 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018636:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801863a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801863e:	1ad3      	subs	r3, r2, r3
 8018640:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018644:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018648:	2b00      	cmp	r3, #0
 801864a:	d004      	beq.n	8018656 <ip4_frag+0x1b6>
        poff = 0;
 801864c:	2300      	movs	r3, #0
 801864e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	681b      	ldr	r3, [r3, #0]
 8018654:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018656:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801865a:	2b00      	cmp	r3, #0
 801865c:	d196      	bne.n	801858c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801865e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018660:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018664:	4413      	add	r3, r2
 8018666:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018668:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801866c:	68bb      	ldr	r3, [r7, #8]
 801866e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018670:	3b14      	subs	r3, #20
 8018672:	429a      	cmp	r2, r3
 8018674:	bfd4      	ite	le
 8018676:	2301      	movle	r3, #1
 8018678:	2300      	movgt	r3, #0
 801867a:	b2db      	uxtb	r3, r3
 801867c:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801867e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018682:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018686:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018688:	6a3b      	ldr	r3, [r7, #32]
 801868a:	2b00      	cmp	r3, #0
 801868c:	d002      	beq.n	8018694 <ip4_frag+0x1f4>
 801868e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018690:	2b00      	cmp	r3, #0
 8018692:	d003      	beq.n	801869c <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018694:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018696:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801869a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801869c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801869e:	4618      	mov	r0, r3
 80186a0:	f7f4 faef 	bl	800cc82 <lwip_htons>
 80186a4:	4603      	mov	r3, r0
 80186a6:	461a      	mov	r2, r3
 80186a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186aa:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80186ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80186ae:	3314      	adds	r3, #20
 80186b0:	b29b      	uxth	r3, r3
 80186b2:	4618      	mov	r0, r3
 80186b4:	f7f4 fae5 	bl	800cc82 <lwip_htons>
 80186b8:	4603      	mov	r3, r0
 80186ba:	461a      	mov	r2, r3
 80186bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186be:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80186c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186c2:	2200      	movs	r2, #0
 80186c4:	729a      	strb	r2, [r3, #10]
 80186c6:	2200      	movs	r2, #0
 80186c8:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80186ca:	68bb      	ldr	r3, [r7, #8]
 80186cc:	695b      	ldr	r3, [r3, #20]
 80186ce:	687a      	ldr	r2, [r7, #4]
 80186d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80186d2:	68b8      	ldr	r0, [r7, #8]
 80186d4:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80186d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80186d8:	f7f5 fd74 	bl	800e1c4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80186dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80186e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80186e2:	1ad3      	subs	r3, r2, r3
 80186e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80186e8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80186ec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80186ee:	4413      	add	r3, r2
 80186f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80186f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	f47f af1a 	bne.w	8018532 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80186fe:	2300      	movs	r3, #0
 8018700:	e002      	b.n	8018708 <ip4_frag+0x268>
      goto memerr;
 8018702:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018704:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018708:	4618      	mov	r0, r3
 801870a:	3748      	adds	r7, #72	; 0x48
 801870c:	46bd      	mov	sp, r7
 801870e:	bd80      	pop	{r7, pc}
 8018710:	0801c3c0 	.word	0x0801c3c0
 8018714:	0801c59c 	.word	0x0801c59c
 8018718:	0801c408 	.word	0x0801c408
 801871c:	0801c5b8 	.word	0x0801c5b8
 8018720:	0801c5d8 	.word	0x0801c5d8
 8018724:	08018439 	.word	0x08018439

08018728 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018728:	b580      	push	{r7, lr}
 801872a:	b086      	sub	sp, #24
 801872c:	af00      	add	r7, sp, #0
 801872e:	6078      	str	r0, [r7, #4]
 8018730:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018732:	230e      	movs	r3, #14
 8018734:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	895b      	ldrh	r3, [r3, #10]
 801873a:	2b0e      	cmp	r3, #14
 801873c:	d96e      	bls.n	801881c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801873e:	687b      	ldr	r3, [r7, #4]
 8018740:	7bdb      	ldrb	r3, [r3, #15]
 8018742:	2b00      	cmp	r3, #0
 8018744:	d106      	bne.n	8018754 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018746:	683b      	ldr	r3, [r7, #0]
 8018748:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801874c:	3301      	adds	r3, #1
 801874e:	b2da      	uxtb	r2, r3
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	685b      	ldr	r3, [r3, #4]
 8018758:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801875a:	693b      	ldr	r3, [r7, #16]
 801875c:	7b1a      	ldrb	r2, [r3, #12]
 801875e:	7b5b      	ldrb	r3, [r3, #13]
 8018760:	021b      	lsls	r3, r3, #8
 8018762:	4313      	orrs	r3, r2
 8018764:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018766:	693b      	ldr	r3, [r7, #16]
 8018768:	781b      	ldrb	r3, [r3, #0]
 801876a:	f003 0301 	and.w	r3, r3, #1
 801876e:	2b00      	cmp	r3, #0
 8018770:	d023      	beq.n	80187ba <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018772:	693b      	ldr	r3, [r7, #16]
 8018774:	781b      	ldrb	r3, [r3, #0]
 8018776:	2b01      	cmp	r3, #1
 8018778:	d10f      	bne.n	801879a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801877a:	693b      	ldr	r3, [r7, #16]
 801877c:	785b      	ldrb	r3, [r3, #1]
 801877e:	2b00      	cmp	r3, #0
 8018780:	d11b      	bne.n	80187ba <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018782:	693b      	ldr	r3, [r7, #16]
 8018784:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018786:	2b5e      	cmp	r3, #94	; 0x5e
 8018788:	d117      	bne.n	80187ba <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	7b5b      	ldrb	r3, [r3, #13]
 801878e:	f043 0310 	orr.w	r3, r3, #16
 8018792:	b2da      	uxtb	r2, r3
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	735a      	strb	r2, [r3, #13]
 8018798:	e00f      	b.n	80187ba <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801879a:	693b      	ldr	r3, [r7, #16]
 801879c:	2206      	movs	r2, #6
 801879e:	4928      	ldr	r1, [pc, #160]	; (8018840 <ethernet_input+0x118>)
 80187a0:	4618      	mov	r0, r3
 80187a2:	f000 f8cb 	bl	801893c <memcmp>
 80187a6:	4603      	mov	r3, r0
 80187a8:	2b00      	cmp	r3, #0
 80187aa:	d106      	bne.n	80187ba <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	7b5b      	ldrb	r3, [r3, #13]
 80187b0:	f043 0308 	orr.w	r3, r3, #8
 80187b4:	b2da      	uxtb	r2, r3
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80187ba:	89fb      	ldrh	r3, [r7, #14]
 80187bc:	2b08      	cmp	r3, #8
 80187be:	d003      	beq.n	80187c8 <ethernet_input+0xa0>
 80187c0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80187c4:	d014      	beq.n	80187f0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80187c6:	e032      	b.n	801882e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80187c8:	683b      	ldr	r3, [r7, #0]
 80187ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80187ce:	f003 0308 	and.w	r3, r3, #8
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d024      	beq.n	8018820 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80187d6:	8afb      	ldrh	r3, [r7, #22]
 80187d8:	4619      	mov	r1, r3
 80187da:	6878      	ldr	r0, [r7, #4]
 80187dc:	f7f5 fc6c 	bl	800e0b8 <pbuf_remove_header>
 80187e0:	4603      	mov	r3, r0
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d11e      	bne.n	8018824 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80187e6:	6839      	ldr	r1, [r7, #0]
 80187e8:	6878      	ldr	r0, [r7, #4]
 80187ea:	f7fe ff0f 	bl	801760c <ip4_input>
      break;
 80187ee:	e013      	b.n	8018818 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80187f0:	683b      	ldr	r3, [r7, #0]
 80187f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80187f6:	f003 0308 	and.w	r3, r3, #8
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d014      	beq.n	8018828 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80187fe:	8afb      	ldrh	r3, [r7, #22]
 8018800:	4619      	mov	r1, r3
 8018802:	6878      	ldr	r0, [r7, #4]
 8018804:	f7f5 fc58 	bl	800e0b8 <pbuf_remove_header>
 8018808:	4603      	mov	r3, r0
 801880a:	2b00      	cmp	r3, #0
 801880c:	d10e      	bne.n	801882c <ethernet_input+0x104>
        etharp_input(p, netif);
 801880e:	6839      	ldr	r1, [r7, #0]
 8018810:	6878      	ldr	r0, [r7, #4]
 8018812:	f7fe f8ab 	bl	801696c <etharp_input>
      break;
 8018816:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018818:	2300      	movs	r3, #0
 801881a:	e00c      	b.n	8018836 <ethernet_input+0x10e>
    goto free_and_return;
 801881c:	bf00      	nop
 801881e:	e006      	b.n	801882e <ethernet_input+0x106>
        goto free_and_return;
 8018820:	bf00      	nop
 8018822:	e004      	b.n	801882e <ethernet_input+0x106>
        goto free_and_return;
 8018824:	bf00      	nop
 8018826:	e002      	b.n	801882e <ethernet_input+0x106>
        goto free_and_return;
 8018828:	bf00      	nop
 801882a:	e000      	b.n	801882e <ethernet_input+0x106>
        goto free_and_return;
 801882c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801882e:	6878      	ldr	r0, [r7, #4]
 8018830:	f7f5 fcc8 	bl	800e1c4 <pbuf_free>
  return ERR_OK;
 8018834:	2300      	movs	r3, #0
}
 8018836:	4618      	mov	r0, r3
 8018838:	3718      	adds	r7, #24
 801883a:	46bd      	mov	sp, r7
 801883c:	bd80      	pop	{r7, pc}
 801883e:	bf00      	nop
 8018840:	0802b598 	.word	0x0802b598

08018844 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018844:	b580      	push	{r7, lr}
 8018846:	b086      	sub	sp, #24
 8018848:	af00      	add	r7, sp, #0
 801884a:	60f8      	str	r0, [r7, #12]
 801884c:	60b9      	str	r1, [r7, #8]
 801884e:	607a      	str	r2, [r7, #4]
 8018850:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018852:	8c3b      	ldrh	r3, [r7, #32]
 8018854:	4618      	mov	r0, r3
 8018856:	f7f4 fa14 	bl	800cc82 <lwip_htons>
 801885a:	4603      	mov	r3, r0
 801885c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801885e:	210e      	movs	r1, #14
 8018860:	68b8      	ldr	r0, [r7, #8]
 8018862:	f7f5 fc19 	bl	800e098 <pbuf_add_header>
 8018866:	4603      	mov	r3, r0
 8018868:	2b00      	cmp	r3, #0
 801886a:	d125      	bne.n	80188b8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801886c:	68bb      	ldr	r3, [r7, #8]
 801886e:	685b      	ldr	r3, [r3, #4]
 8018870:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018872:	693b      	ldr	r3, [r7, #16]
 8018874:	8afa      	ldrh	r2, [r7, #22]
 8018876:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018878:	693b      	ldr	r3, [r7, #16]
 801887a:	2206      	movs	r2, #6
 801887c:	6839      	ldr	r1, [r7, #0]
 801887e:	4618      	mov	r0, r3
 8018880:	f000 f86b 	bl	801895a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018884:	693b      	ldr	r3, [r7, #16]
 8018886:	3306      	adds	r3, #6
 8018888:	2206      	movs	r2, #6
 801888a:	6879      	ldr	r1, [r7, #4]
 801888c:	4618      	mov	r0, r3
 801888e:	f000 f864 	bl	801895a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018892:	68fb      	ldr	r3, [r7, #12]
 8018894:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018898:	2b06      	cmp	r3, #6
 801889a:	d006      	beq.n	80188aa <ethernet_output+0x66>
 801889c:	4b0a      	ldr	r3, [pc, #40]	; (80188c8 <ethernet_output+0x84>)
 801889e:	f240 1233 	movw	r2, #307	; 0x133
 80188a2:	490a      	ldr	r1, [pc, #40]	; (80188cc <ethernet_output+0x88>)
 80188a4:	480a      	ldr	r0, [pc, #40]	; (80188d0 <ethernet_output+0x8c>)
 80188a6:	f000 f913 	bl	8018ad0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80188aa:	68fb      	ldr	r3, [r7, #12]
 80188ac:	699b      	ldr	r3, [r3, #24]
 80188ae:	68b9      	ldr	r1, [r7, #8]
 80188b0:	68f8      	ldr	r0, [r7, #12]
 80188b2:	4798      	blx	r3
 80188b4:	4603      	mov	r3, r0
 80188b6:	e002      	b.n	80188be <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80188b8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80188ba:	f06f 0301 	mvn.w	r3, #1
}
 80188be:	4618      	mov	r0, r3
 80188c0:	3718      	adds	r7, #24
 80188c2:	46bd      	mov	sp, r7
 80188c4:	bd80      	pop	{r7, pc}
 80188c6:	bf00      	nop
 80188c8:	0801c5e8 	.word	0x0801c5e8
 80188cc:	0801c620 	.word	0x0801c620
 80188d0:	0801c654 	.word	0x0801c654

080188d4 <__libc_init_array>:
 80188d4:	b570      	push	{r4, r5, r6, lr}
 80188d6:	4e0d      	ldr	r6, [pc, #52]	; (801890c <__libc_init_array+0x38>)
 80188d8:	4c0d      	ldr	r4, [pc, #52]	; (8018910 <__libc_init_array+0x3c>)
 80188da:	1ba4      	subs	r4, r4, r6
 80188dc:	10a4      	asrs	r4, r4, #2
 80188de:	2500      	movs	r5, #0
 80188e0:	42a5      	cmp	r5, r4
 80188e2:	d109      	bne.n	80188f8 <__libc_init_array+0x24>
 80188e4:	4e0b      	ldr	r6, [pc, #44]	; (8018914 <__libc_init_array+0x40>)
 80188e6:	4c0c      	ldr	r4, [pc, #48]	; (8018918 <__libc_init_array+0x44>)
 80188e8:	f000 ff62 	bl	80197b0 <_init>
 80188ec:	1ba4      	subs	r4, r4, r6
 80188ee:	10a4      	asrs	r4, r4, #2
 80188f0:	2500      	movs	r5, #0
 80188f2:	42a5      	cmp	r5, r4
 80188f4:	d105      	bne.n	8018902 <__libc_init_array+0x2e>
 80188f6:	bd70      	pop	{r4, r5, r6, pc}
 80188f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80188fc:	4798      	blx	r3
 80188fe:	3501      	adds	r5, #1
 8018900:	e7ee      	b.n	80188e0 <__libc_init_array+0xc>
 8018902:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018906:	4798      	blx	r3
 8018908:	3501      	adds	r5, #1
 801890a:	e7f2      	b.n	80188f2 <__libc_init_array+0x1e>
 801890c:	0802b648 	.word	0x0802b648
 8018910:	0802b648 	.word	0x0802b648
 8018914:	0802b648 	.word	0x0802b648
 8018918:	0802b64c 	.word	0x0802b64c

0801891c <malloc>:
 801891c:	4b02      	ldr	r3, [pc, #8]	; (8018928 <malloc+0xc>)
 801891e:	4601      	mov	r1, r0
 8018920:	6818      	ldr	r0, [r3, #0]
 8018922:	f000 b87b 	b.w	8018a1c <_malloc_r>
 8018926:	bf00      	nop
 8018928:	20000040 	.word	0x20000040

0801892c <free>:
 801892c:	4b02      	ldr	r3, [pc, #8]	; (8018938 <free+0xc>)
 801892e:	4601      	mov	r1, r0
 8018930:	6818      	ldr	r0, [r3, #0]
 8018932:	f000 b825 	b.w	8018980 <_free_r>
 8018936:	bf00      	nop
 8018938:	20000040 	.word	0x20000040

0801893c <memcmp>:
 801893c:	b530      	push	{r4, r5, lr}
 801893e:	2400      	movs	r4, #0
 8018940:	42a2      	cmp	r2, r4
 8018942:	d101      	bne.n	8018948 <memcmp+0xc>
 8018944:	2000      	movs	r0, #0
 8018946:	e007      	b.n	8018958 <memcmp+0x1c>
 8018948:	5d03      	ldrb	r3, [r0, r4]
 801894a:	3401      	adds	r4, #1
 801894c:	190d      	adds	r5, r1, r4
 801894e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8018952:	42ab      	cmp	r3, r5
 8018954:	d0f4      	beq.n	8018940 <memcmp+0x4>
 8018956:	1b58      	subs	r0, r3, r5
 8018958:	bd30      	pop	{r4, r5, pc}

0801895a <memcpy>:
 801895a:	b510      	push	{r4, lr}
 801895c:	1e43      	subs	r3, r0, #1
 801895e:	440a      	add	r2, r1
 8018960:	4291      	cmp	r1, r2
 8018962:	d100      	bne.n	8018966 <memcpy+0xc>
 8018964:	bd10      	pop	{r4, pc}
 8018966:	f811 4b01 	ldrb.w	r4, [r1], #1
 801896a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801896e:	e7f7      	b.n	8018960 <memcpy+0x6>

08018970 <memset>:
 8018970:	4402      	add	r2, r0
 8018972:	4603      	mov	r3, r0
 8018974:	4293      	cmp	r3, r2
 8018976:	d100      	bne.n	801897a <memset+0xa>
 8018978:	4770      	bx	lr
 801897a:	f803 1b01 	strb.w	r1, [r3], #1
 801897e:	e7f9      	b.n	8018974 <memset+0x4>

08018980 <_free_r>:
 8018980:	b538      	push	{r3, r4, r5, lr}
 8018982:	4605      	mov	r5, r0
 8018984:	2900      	cmp	r1, #0
 8018986:	d045      	beq.n	8018a14 <_free_r+0x94>
 8018988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801898c:	1f0c      	subs	r4, r1, #4
 801898e:	2b00      	cmp	r3, #0
 8018990:	bfb8      	it	lt
 8018992:	18e4      	addlt	r4, r4, r3
 8018994:	f000 fb96 	bl	80190c4 <__malloc_lock>
 8018998:	4a1f      	ldr	r2, [pc, #124]	; (8018a18 <_free_r+0x98>)
 801899a:	6813      	ldr	r3, [r2, #0]
 801899c:	4610      	mov	r0, r2
 801899e:	b933      	cbnz	r3, 80189ae <_free_r+0x2e>
 80189a0:	6063      	str	r3, [r4, #4]
 80189a2:	6014      	str	r4, [r2, #0]
 80189a4:	4628      	mov	r0, r5
 80189a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80189aa:	f000 bb8c 	b.w	80190c6 <__malloc_unlock>
 80189ae:	42a3      	cmp	r3, r4
 80189b0:	d90c      	bls.n	80189cc <_free_r+0x4c>
 80189b2:	6821      	ldr	r1, [r4, #0]
 80189b4:	1862      	adds	r2, r4, r1
 80189b6:	4293      	cmp	r3, r2
 80189b8:	bf04      	itt	eq
 80189ba:	681a      	ldreq	r2, [r3, #0]
 80189bc:	685b      	ldreq	r3, [r3, #4]
 80189be:	6063      	str	r3, [r4, #4]
 80189c0:	bf04      	itt	eq
 80189c2:	1852      	addeq	r2, r2, r1
 80189c4:	6022      	streq	r2, [r4, #0]
 80189c6:	6004      	str	r4, [r0, #0]
 80189c8:	e7ec      	b.n	80189a4 <_free_r+0x24>
 80189ca:	4613      	mov	r3, r2
 80189cc:	685a      	ldr	r2, [r3, #4]
 80189ce:	b10a      	cbz	r2, 80189d4 <_free_r+0x54>
 80189d0:	42a2      	cmp	r2, r4
 80189d2:	d9fa      	bls.n	80189ca <_free_r+0x4a>
 80189d4:	6819      	ldr	r1, [r3, #0]
 80189d6:	1858      	adds	r0, r3, r1
 80189d8:	42a0      	cmp	r0, r4
 80189da:	d10b      	bne.n	80189f4 <_free_r+0x74>
 80189dc:	6820      	ldr	r0, [r4, #0]
 80189de:	4401      	add	r1, r0
 80189e0:	1858      	adds	r0, r3, r1
 80189e2:	4282      	cmp	r2, r0
 80189e4:	6019      	str	r1, [r3, #0]
 80189e6:	d1dd      	bne.n	80189a4 <_free_r+0x24>
 80189e8:	6810      	ldr	r0, [r2, #0]
 80189ea:	6852      	ldr	r2, [r2, #4]
 80189ec:	605a      	str	r2, [r3, #4]
 80189ee:	4401      	add	r1, r0
 80189f0:	6019      	str	r1, [r3, #0]
 80189f2:	e7d7      	b.n	80189a4 <_free_r+0x24>
 80189f4:	d902      	bls.n	80189fc <_free_r+0x7c>
 80189f6:	230c      	movs	r3, #12
 80189f8:	602b      	str	r3, [r5, #0]
 80189fa:	e7d3      	b.n	80189a4 <_free_r+0x24>
 80189fc:	6820      	ldr	r0, [r4, #0]
 80189fe:	1821      	adds	r1, r4, r0
 8018a00:	428a      	cmp	r2, r1
 8018a02:	bf04      	itt	eq
 8018a04:	6811      	ldreq	r1, [r2, #0]
 8018a06:	6852      	ldreq	r2, [r2, #4]
 8018a08:	6062      	str	r2, [r4, #4]
 8018a0a:	bf04      	itt	eq
 8018a0c:	1809      	addeq	r1, r1, r0
 8018a0e:	6021      	streq	r1, [r4, #0]
 8018a10:	605c      	str	r4, [r3, #4]
 8018a12:	e7c7      	b.n	80189a4 <_free_r+0x24>
 8018a14:	bd38      	pop	{r3, r4, r5, pc}
 8018a16:	bf00      	nop
 8018a18:	200005c4 	.word	0x200005c4

08018a1c <_malloc_r>:
 8018a1c:	b570      	push	{r4, r5, r6, lr}
 8018a1e:	1ccd      	adds	r5, r1, #3
 8018a20:	f025 0503 	bic.w	r5, r5, #3
 8018a24:	3508      	adds	r5, #8
 8018a26:	2d0c      	cmp	r5, #12
 8018a28:	bf38      	it	cc
 8018a2a:	250c      	movcc	r5, #12
 8018a2c:	2d00      	cmp	r5, #0
 8018a2e:	4606      	mov	r6, r0
 8018a30:	db01      	blt.n	8018a36 <_malloc_r+0x1a>
 8018a32:	42a9      	cmp	r1, r5
 8018a34:	d903      	bls.n	8018a3e <_malloc_r+0x22>
 8018a36:	230c      	movs	r3, #12
 8018a38:	6033      	str	r3, [r6, #0]
 8018a3a:	2000      	movs	r0, #0
 8018a3c:	bd70      	pop	{r4, r5, r6, pc}
 8018a3e:	f000 fb41 	bl	80190c4 <__malloc_lock>
 8018a42:	4a21      	ldr	r2, [pc, #132]	; (8018ac8 <_malloc_r+0xac>)
 8018a44:	6814      	ldr	r4, [r2, #0]
 8018a46:	4621      	mov	r1, r4
 8018a48:	b991      	cbnz	r1, 8018a70 <_malloc_r+0x54>
 8018a4a:	4c20      	ldr	r4, [pc, #128]	; (8018acc <_malloc_r+0xb0>)
 8018a4c:	6823      	ldr	r3, [r4, #0]
 8018a4e:	b91b      	cbnz	r3, 8018a58 <_malloc_r+0x3c>
 8018a50:	4630      	mov	r0, r6
 8018a52:	f000 f889 	bl	8018b68 <_sbrk_r>
 8018a56:	6020      	str	r0, [r4, #0]
 8018a58:	4629      	mov	r1, r5
 8018a5a:	4630      	mov	r0, r6
 8018a5c:	f000 f884 	bl	8018b68 <_sbrk_r>
 8018a60:	1c43      	adds	r3, r0, #1
 8018a62:	d124      	bne.n	8018aae <_malloc_r+0x92>
 8018a64:	230c      	movs	r3, #12
 8018a66:	6033      	str	r3, [r6, #0]
 8018a68:	4630      	mov	r0, r6
 8018a6a:	f000 fb2c 	bl	80190c6 <__malloc_unlock>
 8018a6e:	e7e4      	b.n	8018a3a <_malloc_r+0x1e>
 8018a70:	680b      	ldr	r3, [r1, #0]
 8018a72:	1b5b      	subs	r3, r3, r5
 8018a74:	d418      	bmi.n	8018aa8 <_malloc_r+0x8c>
 8018a76:	2b0b      	cmp	r3, #11
 8018a78:	d90f      	bls.n	8018a9a <_malloc_r+0x7e>
 8018a7a:	600b      	str	r3, [r1, #0]
 8018a7c:	50cd      	str	r5, [r1, r3]
 8018a7e:	18cc      	adds	r4, r1, r3
 8018a80:	4630      	mov	r0, r6
 8018a82:	f000 fb20 	bl	80190c6 <__malloc_unlock>
 8018a86:	f104 000b 	add.w	r0, r4, #11
 8018a8a:	1d23      	adds	r3, r4, #4
 8018a8c:	f020 0007 	bic.w	r0, r0, #7
 8018a90:	1ac3      	subs	r3, r0, r3
 8018a92:	d0d3      	beq.n	8018a3c <_malloc_r+0x20>
 8018a94:	425a      	negs	r2, r3
 8018a96:	50e2      	str	r2, [r4, r3]
 8018a98:	e7d0      	b.n	8018a3c <_malloc_r+0x20>
 8018a9a:	428c      	cmp	r4, r1
 8018a9c:	684b      	ldr	r3, [r1, #4]
 8018a9e:	bf16      	itet	ne
 8018aa0:	6063      	strne	r3, [r4, #4]
 8018aa2:	6013      	streq	r3, [r2, #0]
 8018aa4:	460c      	movne	r4, r1
 8018aa6:	e7eb      	b.n	8018a80 <_malloc_r+0x64>
 8018aa8:	460c      	mov	r4, r1
 8018aaa:	6849      	ldr	r1, [r1, #4]
 8018aac:	e7cc      	b.n	8018a48 <_malloc_r+0x2c>
 8018aae:	1cc4      	adds	r4, r0, #3
 8018ab0:	f024 0403 	bic.w	r4, r4, #3
 8018ab4:	42a0      	cmp	r0, r4
 8018ab6:	d005      	beq.n	8018ac4 <_malloc_r+0xa8>
 8018ab8:	1a21      	subs	r1, r4, r0
 8018aba:	4630      	mov	r0, r6
 8018abc:	f000 f854 	bl	8018b68 <_sbrk_r>
 8018ac0:	3001      	adds	r0, #1
 8018ac2:	d0cf      	beq.n	8018a64 <_malloc_r+0x48>
 8018ac4:	6025      	str	r5, [r4, #0]
 8018ac6:	e7db      	b.n	8018a80 <_malloc_r+0x64>
 8018ac8:	200005c4 	.word	0x200005c4
 8018acc:	200005c8 	.word	0x200005c8

08018ad0 <iprintf>:
 8018ad0:	b40f      	push	{r0, r1, r2, r3}
 8018ad2:	4b0a      	ldr	r3, [pc, #40]	; (8018afc <iprintf+0x2c>)
 8018ad4:	b513      	push	{r0, r1, r4, lr}
 8018ad6:	681c      	ldr	r4, [r3, #0]
 8018ad8:	b124      	cbz	r4, 8018ae4 <iprintf+0x14>
 8018ada:	69a3      	ldr	r3, [r4, #24]
 8018adc:	b913      	cbnz	r3, 8018ae4 <iprintf+0x14>
 8018ade:	4620      	mov	r0, r4
 8018ae0:	f000 fa02 	bl	8018ee8 <__sinit>
 8018ae4:	ab05      	add	r3, sp, #20
 8018ae6:	9a04      	ldr	r2, [sp, #16]
 8018ae8:	68a1      	ldr	r1, [r4, #8]
 8018aea:	9301      	str	r3, [sp, #4]
 8018aec:	4620      	mov	r0, r4
 8018aee:	f000 fb15 	bl	801911c <_vfiprintf_r>
 8018af2:	b002      	add	sp, #8
 8018af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018af8:	b004      	add	sp, #16
 8018afa:	4770      	bx	lr
 8018afc:	20000040 	.word	0x20000040

08018b00 <rand>:
 8018b00:	b538      	push	{r3, r4, r5, lr}
 8018b02:	4b13      	ldr	r3, [pc, #76]	; (8018b50 <rand+0x50>)
 8018b04:	681c      	ldr	r4, [r3, #0]
 8018b06:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018b08:	b97b      	cbnz	r3, 8018b2a <rand+0x2a>
 8018b0a:	2018      	movs	r0, #24
 8018b0c:	f7ff ff06 	bl	801891c <malloc>
 8018b10:	4a10      	ldr	r2, [pc, #64]	; (8018b54 <rand+0x54>)
 8018b12:	4b11      	ldr	r3, [pc, #68]	; (8018b58 <rand+0x58>)
 8018b14:	63a0      	str	r0, [r4, #56]	; 0x38
 8018b16:	e9c0 2300 	strd	r2, r3, [r0]
 8018b1a:	4b10      	ldr	r3, [pc, #64]	; (8018b5c <rand+0x5c>)
 8018b1c:	6083      	str	r3, [r0, #8]
 8018b1e:	230b      	movs	r3, #11
 8018b20:	8183      	strh	r3, [r0, #12]
 8018b22:	2201      	movs	r2, #1
 8018b24:	2300      	movs	r3, #0
 8018b26:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8018b2a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018b2c:	480c      	ldr	r0, [pc, #48]	; (8018b60 <rand+0x60>)
 8018b2e:	690a      	ldr	r2, [r1, #16]
 8018b30:	694b      	ldr	r3, [r1, #20]
 8018b32:	4c0c      	ldr	r4, [pc, #48]	; (8018b64 <rand+0x64>)
 8018b34:	4350      	muls	r0, r2
 8018b36:	fb04 0003 	mla	r0, r4, r3, r0
 8018b3a:	fba2 2304 	umull	r2, r3, r2, r4
 8018b3e:	4403      	add	r3, r0
 8018b40:	1c54      	adds	r4, r2, #1
 8018b42:	f143 0500 	adc.w	r5, r3, #0
 8018b46:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8018b4a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8018b4e:	bd38      	pop	{r3, r4, r5, pc}
 8018b50:	20000040 	.word	0x20000040
 8018b54:	abcd330e 	.word	0xabcd330e
 8018b58:	e66d1234 	.word	0xe66d1234
 8018b5c:	0005deec 	.word	0x0005deec
 8018b60:	5851f42d 	.word	0x5851f42d
 8018b64:	4c957f2d 	.word	0x4c957f2d

08018b68 <_sbrk_r>:
 8018b68:	b538      	push	{r3, r4, r5, lr}
 8018b6a:	4c06      	ldr	r4, [pc, #24]	; (8018b84 <_sbrk_r+0x1c>)
 8018b6c:	2300      	movs	r3, #0
 8018b6e:	4605      	mov	r5, r0
 8018b70:	4608      	mov	r0, r1
 8018b72:	6023      	str	r3, [r4, #0]
 8018b74:	f7ee fe80 	bl	8007878 <_sbrk>
 8018b78:	1c43      	adds	r3, r0, #1
 8018b7a:	d102      	bne.n	8018b82 <_sbrk_r+0x1a>
 8018b7c:	6823      	ldr	r3, [r4, #0]
 8018b7e:	b103      	cbz	r3, 8018b82 <_sbrk_r+0x1a>
 8018b80:	602b      	str	r3, [r5, #0]
 8018b82:	bd38      	pop	{r3, r4, r5, pc}
 8018b84:	20007f10 	.word	0x20007f10

08018b88 <__swbuf_r>:
 8018b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b8a:	460e      	mov	r6, r1
 8018b8c:	4614      	mov	r4, r2
 8018b8e:	4605      	mov	r5, r0
 8018b90:	b118      	cbz	r0, 8018b9a <__swbuf_r+0x12>
 8018b92:	6983      	ldr	r3, [r0, #24]
 8018b94:	b90b      	cbnz	r3, 8018b9a <__swbuf_r+0x12>
 8018b96:	f000 f9a7 	bl	8018ee8 <__sinit>
 8018b9a:	4b21      	ldr	r3, [pc, #132]	; (8018c20 <__swbuf_r+0x98>)
 8018b9c:	429c      	cmp	r4, r3
 8018b9e:	d12a      	bne.n	8018bf6 <__swbuf_r+0x6e>
 8018ba0:	686c      	ldr	r4, [r5, #4]
 8018ba2:	69a3      	ldr	r3, [r4, #24]
 8018ba4:	60a3      	str	r3, [r4, #8]
 8018ba6:	89a3      	ldrh	r3, [r4, #12]
 8018ba8:	071a      	lsls	r2, r3, #28
 8018baa:	d52e      	bpl.n	8018c0a <__swbuf_r+0x82>
 8018bac:	6923      	ldr	r3, [r4, #16]
 8018bae:	b363      	cbz	r3, 8018c0a <__swbuf_r+0x82>
 8018bb0:	6923      	ldr	r3, [r4, #16]
 8018bb2:	6820      	ldr	r0, [r4, #0]
 8018bb4:	1ac0      	subs	r0, r0, r3
 8018bb6:	6963      	ldr	r3, [r4, #20]
 8018bb8:	b2f6      	uxtb	r6, r6
 8018bba:	4283      	cmp	r3, r0
 8018bbc:	4637      	mov	r7, r6
 8018bbe:	dc04      	bgt.n	8018bca <__swbuf_r+0x42>
 8018bc0:	4621      	mov	r1, r4
 8018bc2:	4628      	mov	r0, r5
 8018bc4:	f000 f926 	bl	8018e14 <_fflush_r>
 8018bc8:	bb28      	cbnz	r0, 8018c16 <__swbuf_r+0x8e>
 8018bca:	68a3      	ldr	r3, [r4, #8]
 8018bcc:	3b01      	subs	r3, #1
 8018bce:	60a3      	str	r3, [r4, #8]
 8018bd0:	6823      	ldr	r3, [r4, #0]
 8018bd2:	1c5a      	adds	r2, r3, #1
 8018bd4:	6022      	str	r2, [r4, #0]
 8018bd6:	701e      	strb	r6, [r3, #0]
 8018bd8:	6963      	ldr	r3, [r4, #20]
 8018bda:	3001      	adds	r0, #1
 8018bdc:	4283      	cmp	r3, r0
 8018bde:	d004      	beq.n	8018bea <__swbuf_r+0x62>
 8018be0:	89a3      	ldrh	r3, [r4, #12]
 8018be2:	07db      	lsls	r3, r3, #31
 8018be4:	d519      	bpl.n	8018c1a <__swbuf_r+0x92>
 8018be6:	2e0a      	cmp	r6, #10
 8018be8:	d117      	bne.n	8018c1a <__swbuf_r+0x92>
 8018bea:	4621      	mov	r1, r4
 8018bec:	4628      	mov	r0, r5
 8018bee:	f000 f911 	bl	8018e14 <_fflush_r>
 8018bf2:	b190      	cbz	r0, 8018c1a <__swbuf_r+0x92>
 8018bf4:	e00f      	b.n	8018c16 <__swbuf_r+0x8e>
 8018bf6:	4b0b      	ldr	r3, [pc, #44]	; (8018c24 <__swbuf_r+0x9c>)
 8018bf8:	429c      	cmp	r4, r3
 8018bfa:	d101      	bne.n	8018c00 <__swbuf_r+0x78>
 8018bfc:	68ac      	ldr	r4, [r5, #8]
 8018bfe:	e7d0      	b.n	8018ba2 <__swbuf_r+0x1a>
 8018c00:	4b09      	ldr	r3, [pc, #36]	; (8018c28 <__swbuf_r+0xa0>)
 8018c02:	429c      	cmp	r4, r3
 8018c04:	bf08      	it	eq
 8018c06:	68ec      	ldreq	r4, [r5, #12]
 8018c08:	e7cb      	b.n	8018ba2 <__swbuf_r+0x1a>
 8018c0a:	4621      	mov	r1, r4
 8018c0c:	4628      	mov	r0, r5
 8018c0e:	f000 f80d 	bl	8018c2c <__swsetup_r>
 8018c12:	2800      	cmp	r0, #0
 8018c14:	d0cc      	beq.n	8018bb0 <__swbuf_r+0x28>
 8018c16:	f04f 37ff 	mov.w	r7, #4294967295
 8018c1a:	4638      	mov	r0, r7
 8018c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c1e:	bf00      	nop
 8018c20:	0802b5cc 	.word	0x0802b5cc
 8018c24:	0802b5ec 	.word	0x0802b5ec
 8018c28:	0802b5ac 	.word	0x0802b5ac

08018c2c <__swsetup_r>:
 8018c2c:	4b32      	ldr	r3, [pc, #200]	; (8018cf8 <__swsetup_r+0xcc>)
 8018c2e:	b570      	push	{r4, r5, r6, lr}
 8018c30:	681d      	ldr	r5, [r3, #0]
 8018c32:	4606      	mov	r6, r0
 8018c34:	460c      	mov	r4, r1
 8018c36:	b125      	cbz	r5, 8018c42 <__swsetup_r+0x16>
 8018c38:	69ab      	ldr	r3, [r5, #24]
 8018c3a:	b913      	cbnz	r3, 8018c42 <__swsetup_r+0x16>
 8018c3c:	4628      	mov	r0, r5
 8018c3e:	f000 f953 	bl	8018ee8 <__sinit>
 8018c42:	4b2e      	ldr	r3, [pc, #184]	; (8018cfc <__swsetup_r+0xd0>)
 8018c44:	429c      	cmp	r4, r3
 8018c46:	d10f      	bne.n	8018c68 <__swsetup_r+0x3c>
 8018c48:	686c      	ldr	r4, [r5, #4]
 8018c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c4e:	b29a      	uxth	r2, r3
 8018c50:	0715      	lsls	r5, r2, #28
 8018c52:	d42c      	bmi.n	8018cae <__swsetup_r+0x82>
 8018c54:	06d0      	lsls	r0, r2, #27
 8018c56:	d411      	bmi.n	8018c7c <__swsetup_r+0x50>
 8018c58:	2209      	movs	r2, #9
 8018c5a:	6032      	str	r2, [r6, #0]
 8018c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018c60:	81a3      	strh	r3, [r4, #12]
 8018c62:	f04f 30ff 	mov.w	r0, #4294967295
 8018c66:	e03e      	b.n	8018ce6 <__swsetup_r+0xba>
 8018c68:	4b25      	ldr	r3, [pc, #148]	; (8018d00 <__swsetup_r+0xd4>)
 8018c6a:	429c      	cmp	r4, r3
 8018c6c:	d101      	bne.n	8018c72 <__swsetup_r+0x46>
 8018c6e:	68ac      	ldr	r4, [r5, #8]
 8018c70:	e7eb      	b.n	8018c4a <__swsetup_r+0x1e>
 8018c72:	4b24      	ldr	r3, [pc, #144]	; (8018d04 <__swsetup_r+0xd8>)
 8018c74:	429c      	cmp	r4, r3
 8018c76:	bf08      	it	eq
 8018c78:	68ec      	ldreq	r4, [r5, #12]
 8018c7a:	e7e6      	b.n	8018c4a <__swsetup_r+0x1e>
 8018c7c:	0751      	lsls	r1, r2, #29
 8018c7e:	d512      	bpl.n	8018ca6 <__swsetup_r+0x7a>
 8018c80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018c82:	b141      	cbz	r1, 8018c96 <__swsetup_r+0x6a>
 8018c84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018c88:	4299      	cmp	r1, r3
 8018c8a:	d002      	beq.n	8018c92 <__swsetup_r+0x66>
 8018c8c:	4630      	mov	r0, r6
 8018c8e:	f7ff fe77 	bl	8018980 <_free_r>
 8018c92:	2300      	movs	r3, #0
 8018c94:	6363      	str	r3, [r4, #52]	; 0x34
 8018c96:	89a3      	ldrh	r3, [r4, #12]
 8018c98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018c9c:	81a3      	strh	r3, [r4, #12]
 8018c9e:	2300      	movs	r3, #0
 8018ca0:	6063      	str	r3, [r4, #4]
 8018ca2:	6923      	ldr	r3, [r4, #16]
 8018ca4:	6023      	str	r3, [r4, #0]
 8018ca6:	89a3      	ldrh	r3, [r4, #12]
 8018ca8:	f043 0308 	orr.w	r3, r3, #8
 8018cac:	81a3      	strh	r3, [r4, #12]
 8018cae:	6923      	ldr	r3, [r4, #16]
 8018cb0:	b94b      	cbnz	r3, 8018cc6 <__swsetup_r+0x9a>
 8018cb2:	89a3      	ldrh	r3, [r4, #12]
 8018cb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018cbc:	d003      	beq.n	8018cc6 <__swsetup_r+0x9a>
 8018cbe:	4621      	mov	r1, r4
 8018cc0:	4630      	mov	r0, r6
 8018cc2:	f000 f9bf 	bl	8019044 <__smakebuf_r>
 8018cc6:	89a2      	ldrh	r2, [r4, #12]
 8018cc8:	f012 0301 	ands.w	r3, r2, #1
 8018ccc:	d00c      	beq.n	8018ce8 <__swsetup_r+0xbc>
 8018cce:	2300      	movs	r3, #0
 8018cd0:	60a3      	str	r3, [r4, #8]
 8018cd2:	6963      	ldr	r3, [r4, #20]
 8018cd4:	425b      	negs	r3, r3
 8018cd6:	61a3      	str	r3, [r4, #24]
 8018cd8:	6923      	ldr	r3, [r4, #16]
 8018cda:	b953      	cbnz	r3, 8018cf2 <__swsetup_r+0xc6>
 8018cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018ce0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8018ce4:	d1ba      	bne.n	8018c5c <__swsetup_r+0x30>
 8018ce6:	bd70      	pop	{r4, r5, r6, pc}
 8018ce8:	0792      	lsls	r2, r2, #30
 8018cea:	bf58      	it	pl
 8018cec:	6963      	ldrpl	r3, [r4, #20]
 8018cee:	60a3      	str	r3, [r4, #8]
 8018cf0:	e7f2      	b.n	8018cd8 <__swsetup_r+0xac>
 8018cf2:	2000      	movs	r0, #0
 8018cf4:	e7f7      	b.n	8018ce6 <__swsetup_r+0xba>
 8018cf6:	bf00      	nop
 8018cf8:	20000040 	.word	0x20000040
 8018cfc:	0802b5cc 	.word	0x0802b5cc
 8018d00:	0802b5ec 	.word	0x0802b5ec
 8018d04:	0802b5ac 	.word	0x0802b5ac

08018d08 <__sflush_r>:
 8018d08:	898a      	ldrh	r2, [r1, #12]
 8018d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d0e:	4605      	mov	r5, r0
 8018d10:	0710      	lsls	r0, r2, #28
 8018d12:	460c      	mov	r4, r1
 8018d14:	d458      	bmi.n	8018dc8 <__sflush_r+0xc0>
 8018d16:	684b      	ldr	r3, [r1, #4]
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	dc05      	bgt.n	8018d28 <__sflush_r+0x20>
 8018d1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	dc02      	bgt.n	8018d28 <__sflush_r+0x20>
 8018d22:	2000      	movs	r0, #0
 8018d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018d2a:	2e00      	cmp	r6, #0
 8018d2c:	d0f9      	beq.n	8018d22 <__sflush_r+0x1a>
 8018d2e:	2300      	movs	r3, #0
 8018d30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018d34:	682f      	ldr	r7, [r5, #0]
 8018d36:	6a21      	ldr	r1, [r4, #32]
 8018d38:	602b      	str	r3, [r5, #0]
 8018d3a:	d032      	beq.n	8018da2 <__sflush_r+0x9a>
 8018d3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018d3e:	89a3      	ldrh	r3, [r4, #12]
 8018d40:	075a      	lsls	r2, r3, #29
 8018d42:	d505      	bpl.n	8018d50 <__sflush_r+0x48>
 8018d44:	6863      	ldr	r3, [r4, #4]
 8018d46:	1ac0      	subs	r0, r0, r3
 8018d48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018d4a:	b10b      	cbz	r3, 8018d50 <__sflush_r+0x48>
 8018d4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018d4e:	1ac0      	subs	r0, r0, r3
 8018d50:	2300      	movs	r3, #0
 8018d52:	4602      	mov	r2, r0
 8018d54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018d56:	6a21      	ldr	r1, [r4, #32]
 8018d58:	4628      	mov	r0, r5
 8018d5a:	47b0      	blx	r6
 8018d5c:	1c43      	adds	r3, r0, #1
 8018d5e:	89a3      	ldrh	r3, [r4, #12]
 8018d60:	d106      	bne.n	8018d70 <__sflush_r+0x68>
 8018d62:	6829      	ldr	r1, [r5, #0]
 8018d64:	291d      	cmp	r1, #29
 8018d66:	d848      	bhi.n	8018dfa <__sflush_r+0xf2>
 8018d68:	4a29      	ldr	r2, [pc, #164]	; (8018e10 <__sflush_r+0x108>)
 8018d6a:	40ca      	lsrs	r2, r1
 8018d6c:	07d6      	lsls	r6, r2, #31
 8018d6e:	d544      	bpl.n	8018dfa <__sflush_r+0xf2>
 8018d70:	2200      	movs	r2, #0
 8018d72:	6062      	str	r2, [r4, #4]
 8018d74:	04d9      	lsls	r1, r3, #19
 8018d76:	6922      	ldr	r2, [r4, #16]
 8018d78:	6022      	str	r2, [r4, #0]
 8018d7a:	d504      	bpl.n	8018d86 <__sflush_r+0x7e>
 8018d7c:	1c42      	adds	r2, r0, #1
 8018d7e:	d101      	bne.n	8018d84 <__sflush_r+0x7c>
 8018d80:	682b      	ldr	r3, [r5, #0]
 8018d82:	b903      	cbnz	r3, 8018d86 <__sflush_r+0x7e>
 8018d84:	6560      	str	r0, [r4, #84]	; 0x54
 8018d86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018d88:	602f      	str	r7, [r5, #0]
 8018d8a:	2900      	cmp	r1, #0
 8018d8c:	d0c9      	beq.n	8018d22 <__sflush_r+0x1a>
 8018d8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018d92:	4299      	cmp	r1, r3
 8018d94:	d002      	beq.n	8018d9c <__sflush_r+0x94>
 8018d96:	4628      	mov	r0, r5
 8018d98:	f7ff fdf2 	bl	8018980 <_free_r>
 8018d9c:	2000      	movs	r0, #0
 8018d9e:	6360      	str	r0, [r4, #52]	; 0x34
 8018da0:	e7c0      	b.n	8018d24 <__sflush_r+0x1c>
 8018da2:	2301      	movs	r3, #1
 8018da4:	4628      	mov	r0, r5
 8018da6:	47b0      	blx	r6
 8018da8:	1c41      	adds	r1, r0, #1
 8018daa:	d1c8      	bne.n	8018d3e <__sflush_r+0x36>
 8018dac:	682b      	ldr	r3, [r5, #0]
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d0c5      	beq.n	8018d3e <__sflush_r+0x36>
 8018db2:	2b1d      	cmp	r3, #29
 8018db4:	d001      	beq.n	8018dba <__sflush_r+0xb2>
 8018db6:	2b16      	cmp	r3, #22
 8018db8:	d101      	bne.n	8018dbe <__sflush_r+0xb6>
 8018dba:	602f      	str	r7, [r5, #0]
 8018dbc:	e7b1      	b.n	8018d22 <__sflush_r+0x1a>
 8018dbe:	89a3      	ldrh	r3, [r4, #12]
 8018dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018dc4:	81a3      	strh	r3, [r4, #12]
 8018dc6:	e7ad      	b.n	8018d24 <__sflush_r+0x1c>
 8018dc8:	690f      	ldr	r7, [r1, #16]
 8018dca:	2f00      	cmp	r7, #0
 8018dcc:	d0a9      	beq.n	8018d22 <__sflush_r+0x1a>
 8018dce:	0793      	lsls	r3, r2, #30
 8018dd0:	680e      	ldr	r6, [r1, #0]
 8018dd2:	bf08      	it	eq
 8018dd4:	694b      	ldreq	r3, [r1, #20]
 8018dd6:	600f      	str	r7, [r1, #0]
 8018dd8:	bf18      	it	ne
 8018dda:	2300      	movne	r3, #0
 8018ddc:	eba6 0807 	sub.w	r8, r6, r7
 8018de0:	608b      	str	r3, [r1, #8]
 8018de2:	f1b8 0f00 	cmp.w	r8, #0
 8018de6:	dd9c      	ble.n	8018d22 <__sflush_r+0x1a>
 8018de8:	4643      	mov	r3, r8
 8018dea:	463a      	mov	r2, r7
 8018dec:	6a21      	ldr	r1, [r4, #32]
 8018dee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018df0:	4628      	mov	r0, r5
 8018df2:	47b0      	blx	r6
 8018df4:	2800      	cmp	r0, #0
 8018df6:	dc06      	bgt.n	8018e06 <__sflush_r+0xfe>
 8018df8:	89a3      	ldrh	r3, [r4, #12]
 8018dfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018dfe:	81a3      	strh	r3, [r4, #12]
 8018e00:	f04f 30ff 	mov.w	r0, #4294967295
 8018e04:	e78e      	b.n	8018d24 <__sflush_r+0x1c>
 8018e06:	4407      	add	r7, r0
 8018e08:	eba8 0800 	sub.w	r8, r8, r0
 8018e0c:	e7e9      	b.n	8018de2 <__sflush_r+0xda>
 8018e0e:	bf00      	nop
 8018e10:	20400001 	.word	0x20400001

08018e14 <_fflush_r>:
 8018e14:	b538      	push	{r3, r4, r5, lr}
 8018e16:	690b      	ldr	r3, [r1, #16]
 8018e18:	4605      	mov	r5, r0
 8018e1a:	460c      	mov	r4, r1
 8018e1c:	b1db      	cbz	r3, 8018e56 <_fflush_r+0x42>
 8018e1e:	b118      	cbz	r0, 8018e28 <_fflush_r+0x14>
 8018e20:	6983      	ldr	r3, [r0, #24]
 8018e22:	b90b      	cbnz	r3, 8018e28 <_fflush_r+0x14>
 8018e24:	f000 f860 	bl	8018ee8 <__sinit>
 8018e28:	4b0c      	ldr	r3, [pc, #48]	; (8018e5c <_fflush_r+0x48>)
 8018e2a:	429c      	cmp	r4, r3
 8018e2c:	d109      	bne.n	8018e42 <_fflush_r+0x2e>
 8018e2e:	686c      	ldr	r4, [r5, #4]
 8018e30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018e34:	b17b      	cbz	r3, 8018e56 <_fflush_r+0x42>
 8018e36:	4621      	mov	r1, r4
 8018e38:	4628      	mov	r0, r5
 8018e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018e3e:	f7ff bf63 	b.w	8018d08 <__sflush_r>
 8018e42:	4b07      	ldr	r3, [pc, #28]	; (8018e60 <_fflush_r+0x4c>)
 8018e44:	429c      	cmp	r4, r3
 8018e46:	d101      	bne.n	8018e4c <_fflush_r+0x38>
 8018e48:	68ac      	ldr	r4, [r5, #8]
 8018e4a:	e7f1      	b.n	8018e30 <_fflush_r+0x1c>
 8018e4c:	4b05      	ldr	r3, [pc, #20]	; (8018e64 <_fflush_r+0x50>)
 8018e4e:	429c      	cmp	r4, r3
 8018e50:	bf08      	it	eq
 8018e52:	68ec      	ldreq	r4, [r5, #12]
 8018e54:	e7ec      	b.n	8018e30 <_fflush_r+0x1c>
 8018e56:	2000      	movs	r0, #0
 8018e58:	bd38      	pop	{r3, r4, r5, pc}
 8018e5a:	bf00      	nop
 8018e5c:	0802b5cc 	.word	0x0802b5cc
 8018e60:	0802b5ec 	.word	0x0802b5ec
 8018e64:	0802b5ac 	.word	0x0802b5ac

08018e68 <std>:
 8018e68:	2300      	movs	r3, #0
 8018e6a:	b510      	push	{r4, lr}
 8018e6c:	4604      	mov	r4, r0
 8018e6e:	e9c0 3300 	strd	r3, r3, [r0]
 8018e72:	6083      	str	r3, [r0, #8]
 8018e74:	8181      	strh	r1, [r0, #12]
 8018e76:	6643      	str	r3, [r0, #100]	; 0x64
 8018e78:	81c2      	strh	r2, [r0, #14]
 8018e7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018e7e:	6183      	str	r3, [r0, #24]
 8018e80:	4619      	mov	r1, r3
 8018e82:	2208      	movs	r2, #8
 8018e84:	305c      	adds	r0, #92	; 0x5c
 8018e86:	f7ff fd73 	bl	8018970 <memset>
 8018e8a:	4b05      	ldr	r3, [pc, #20]	; (8018ea0 <std+0x38>)
 8018e8c:	6263      	str	r3, [r4, #36]	; 0x24
 8018e8e:	4b05      	ldr	r3, [pc, #20]	; (8018ea4 <std+0x3c>)
 8018e90:	62a3      	str	r3, [r4, #40]	; 0x28
 8018e92:	4b05      	ldr	r3, [pc, #20]	; (8018ea8 <std+0x40>)
 8018e94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018e96:	4b05      	ldr	r3, [pc, #20]	; (8018eac <std+0x44>)
 8018e98:	6224      	str	r4, [r4, #32]
 8018e9a:	6323      	str	r3, [r4, #48]	; 0x30
 8018e9c:	bd10      	pop	{r4, pc}
 8018e9e:	bf00      	nop
 8018ea0:	08019659 	.word	0x08019659
 8018ea4:	0801967b 	.word	0x0801967b
 8018ea8:	080196b3 	.word	0x080196b3
 8018eac:	080196d7 	.word	0x080196d7

08018eb0 <_cleanup_r>:
 8018eb0:	4901      	ldr	r1, [pc, #4]	; (8018eb8 <_cleanup_r+0x8>)
 8018eb2:	f000 b885 	b.w	8018fc0 <_fwalk_reent>
 8018eb6:	bf00      	nop
 8018eb8:	08018e15 	.word	0x08018e15

08018ebc <__sfmoreglue>:
 8018ebc:	b570      	push	{r4, r5, r6, lr}
 8018ebe:	1e4a      	subs	r2, r1, #1
 8018ec0:	2568      	movs	r5, #104	; 0x68
 8018ec2:	4355      	muls	r5, r2
 8018ec4:	460e      	mov	r6, r1
 8018ec6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018eca:	f7ff fda7 	bl	8018a1c <_malloc_r>
 8018ece:	4604      	mov	r4, r0
 8018ed0:	b140      	cbz	r0, 8018ee4 <__sfmoreglue+0x28>
 8018ed2:	2100      	movs	r1, #0
 8018ed4:	e9c0 1600 	strd	r1, r6, [r0]
 8018ed8:	300c      	adds	r0, #12
 8018eda:	60a0      	str	r0, [r4, #8]
 8018edc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018ee0:	f7ff fd46 	bl	8018970 <memset>
 8018ee4:	4620      	mov	r0, r4
 8018ee6:	bd70      	pop	{r4, r5, r6, pc}

08018ee8 <__sinit>:
 8018ee8:	6983      	ldr	r3, [r0, #24]
 8018eea:	b510      	push	{r4, lr}
 8018eec:	4604      	mov	r4, r0
 8018eee:	bb33      	cbnz	r3, 8018f3e <__sinit+0x56>
 8018ef0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8018ef4:	6503      	str	r3, [r0, #80]	; 0x50
 8018ef6:	4b12      	ldr	r3, [pc, #72]	; (8018f40 <__sinit+0x58>)
 8018ef8:	4a12      	ldr	r2, [pc, #72]	; (8018f44 <__sinit+0x5c>)
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	6282      	str	r2, [r0, #40]	; 0x28
 8018efe:	4298      	cmp	r0, r3
 8018f00:	bf04      	itt	eq
 8018f02:	2301      	moveq	r3, #1
 8018f04:	6183      	streq	r3, [r0, #24]
 8018f06:	f000 f81f 	bl	8018f48 <__sfp>
 8018f0a:	6060      	str	r0, [r4, #4]
 8018f0c:	4620      	mov	r0, r4
 8018f0e:	f000 f81b 	bl	8018f48 <__sfp>
 8018f12:	60a0      	str	r0, [r4, #8]
 8018f14:	4620      	mov	r0, r4
 8018f16:	f000 f817 	bl	8018f48 <__sfp>
 8018f1a:	2200      	movs	r2, #0
 8018f1c:	60e0      	str	r0, [r4, #12]
 8018f1e:	2104      	movs	r1, #4
 8018f20:	6860      	ldr	r0, [r4, #4]
 8018f22:	f7ff ffa1 	bl	8018e68 <std>
 8018f26:	2201      	movs	r2, #1
 8018f28:	2109      	movs	r1, #9
 8018f2a:	68a0      	ldr	r0, [r4, #8]
 8018f2c:	f7ff ff9c 	bl	8018e68 <std>
 8018f30:	2202      	movs	r2, #2
 8018f32:	2112      	movs	r1, #18
 8018f34:	68e0      	ldr	r0, [r4, #12]
 8018f36:	f7ff ff97 	bl	8018e68 <std>
 8018f3a:	2301      	movs	r3, #1
 8018f3c:	61a3      	str	r3, [r4, #24]
 8018f3e:	bd10      	pop	{r4, pc}
 8018f40:	0802b5a8 	.word	0x0802b5a8
 8018f44:	08018eb1 	.word	0x08018eb1

08018f48 <__sfp>:
 8018f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f4a:	4b1b      	ldr	r3, [pc, #108]	; (8018fb8 <__sfp+0x70>)
 8018f4c:	681e      	ldr	r6, [r3, #0]
 8018f4e:	69b3      	ldr	r3, [r6, #24]
 8018f50:	4607      	mov	r7, r0
 8018f52:	b913      	cbnz	r3, 8018f5a <__sfp+0x12>
 8018f54:	4630      	mov	r0, r6
 8018f56:	f7ff ffc7 	bl	8018ee8 <__sinit>
 8018f5a:	3648      	adds	r6, #72	; 0x48
 8018f5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018f60:	3b01      	subs	r3, #1
 8018f62:	d503      	bpl.n	8018f6c <__sfp+0x24>
 8018f64:	6833      	ldr	r3, [r6, #0]
 8018f66:	b133      	cbz	r3, 8018f76 <__sfp+0x2e>
 8018f68:	6836      	ldr	r6, [r6, #0]
 8018f6a:	e7f7      	b.n	8018f5c <__sfp+0x14>
 8018f6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018f70:	b16d      	cbz	r5, 8018f8e <__sfp+0x46>
 8018f72:	3468      	adds	r4, #104	; 0x68
 8018f74:	e7f4      	b.n	8018f60 <__sfp+0x18>
 8018f76:	2104      	movs	r1, #4
 8018f78:	4638      	mov	r0, r7
 8018f7a:	f7ff ff9f 	bl	8018ebc <__sfmoreglue>
 8018f7e:	6030      	str	r0, [r6, #0]
 8018f80:	2800      	cmp	r0, #0
 8018f82:	d1f1      	bne.n	8018f68 <__sfp+0x20>
 8018f84:	230c      	movs	r3, #12
 8018f86:	603b      	str	r3, [r7, #0]
 8018f88:	4604      	mov	r4, r0
 8018f8a:	4620      	mov	r0, r4
 8018f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f8e:	4b0b      	ldr	r3, [pc, #44]	; (8018fbc <__sfp+0x74>)
 8018f90:	6665      	str	r5, [r4, #100]	; 0x64
 8018f92:	e9c4 5500 	strd	r5, r5, [r4]
 8018f96:	60a5      	str	r5, [r4, #8]
 8018f98:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8018f9c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8018fa0:	2208      	movs	r2, #8
 8018fa2:	4629      	mov	r1, r5
 8018fa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018fa8:	f7ff fce2 	bl	8018970 <memset>
 8018fac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018fb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018fb4:	e7e9      	b.n	8018f8a <__sfp+0x42>
 8018fb6:	bf00      	nop
 8018fb8:	0802b5a8 	.word	0x0802b5a8
 8018fbc:	ffff0001 	.word	0xffff0001

08018fc0 <_fwalk_reent>:
 8018fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018fc4:	4680      	mov	r8, r0
 8018fc6:	4689      	mov	r9, r1
 8018fc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018fcc:	2600      	movs	r6, #0
 8018fce:	b914      	cbnz	r4, 8018fd6 <_fwalk_reent+0x16>
 8018fd0:	4630      	mov	r0, r6
 8018fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018fd6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8018fda:	3f01      	subs	r7, #1
 8018fdc:	d501      	bpl.n	8018fe2 <_fwalk_reent+0x22>
 8018fde:	6824      	ldr	r4, [r4, #0]
 8018fe0:	e7f5      	b.n	8018fce <_fwalk_reent+0xe>
 8018fe2:	89ab      	ldrh	r3, [r5, #12]
 8018fe4:	2b01      	cmp	r3, #1
 8018fe6:	d907      	bls.n	8018ff8 <_fwalk_reent+0x38>
 8018fe8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018fec:	3301      	adds	r3, #1
 8018fee:	d003      	beq.n	8018ff8 <_fwalk_reent+0x38>
 8018ff0:	4629      	mov	r1, r5
 8018ff2:	4640      	mov	r0, r8
 8018ff4:	47c8      	blx	r9
 8018ff6:	4306      	orrs	r6, r0
 8018ff8:	3568      	adds	r5, #104	; 0x68
 8018ffa:	e7ee      	b.n	8018fda <_fwalk_reent+0x1a>

08018ffc <__swhatbuf_r>:
 8018ffc:	b570      	push	{r4, r5, r6, lr}
 8018ffe:	460e      	mov	r6, r1
 8019000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019004:	2900      	cmp	r1, #0
 8019006:	b096      	sub	sp, #88	; 0x58
 8019008:	4614      	mov	r4, r2
 801900a:	461d      	mov	r5, r3
 801900c:	da07      	bge.n	801901e <__swhatbuf_r+0x22>
 801900e:	2300      	movs	r3, #0
 8019010:	602b      	str	r3, [r5, #0]
 8019012:	89b3      	ldrh	r3, [r6, #12]
 8019014:	061a      	lsls	r2, r3, #24
 8019016:	d410      	bmi.n	801903a <__swhatbuf_r+0x3e>
 8019018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801901c:	e00e      	b.n	801903c <__swhatbuf_r+0x40>
 801901e:	466a      	mov	r2, sp
 8019020:	f000 fb80 	bl	8019724 <_fstat_r>
 8019024:	2800      	cmp	r0, #0
 8019026:	dbf2      	blt.n	801900e <__swhatbuf_r+0x12>
 8019028:	9a01      	ldr	r2, [sp, #4]
 801902a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801902e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019032:	425a      	negs	r2, r3
 8019034:	415a      	adcs	r2, r3
 8019036:	602a      	str	r2, [r5, #0]
 8019038:	e7ee      	b.n	8019018 <__swhatbuf_r+0x1c>
 801903a:	2340      	movs	r3, #64	; 0x40
 801903c:	2000      	movs	r0, #0
 801903e:	6023      	str	r3, [r4, #0]
 8019040:	b016      	add	sp, #88	; 0x58
 8019042:	bd70      	pop	{r4, r5, r6, pc}

08019044 <__smakebuf_r>:
 8019044:	898b      	ldrh	r3, [r1, #12]
 8019046:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019048:	079d      	lsls	r5, r3, #30
 801904a:	4606      	mov	r6, r0
 801904c:	460c      	mov	r4, r1
 801904e:	d507      	bpl.n	8019060 <__smakebuf_r+0x1c>
 8019050:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019054:	6023      	str	r3, [r4, #0]
 8019056:	6123      	str	r3, [r4, #16]
 8019058:	2301      	movs	r3, #1
 801905a:	6163      	str	r3, [r4, #20]
 801905c:	b002      	add	sp, #8
 801905e:	bd70      	pop	{r4, r5, r6, pc}
 8019060:	ab01      	add	r3, sp, #4
 8019062:	466a      	mov	r2, sp
 8019064:	f7ff ffca 	bl	8018ffc <__swhatbuf_r>
 8019068:	9900      	ldr	r1, [sp, #0]
 801906a:	4605      	mov	r5, r0
 801906c:	4630      	mov	r0, r6
 801906e:	f7ff fcd5 	bl	8018a1c <_malloc_r>
 8019072:	b948      	cbnz	r0, 8019088 <__smakebuf_r+0x44>
 8019074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019078:	059a      	lsls	r2, r3, #22
 801907a:	d4ef      	bmi.n	801905c <__smakebuf_r+0x18>
 801907c:	f023 0303 	bic.w	r3, r3, #3
 8019080:	f043 0302 	orr.w	r3, r3, #2
 8019084:	81a3      	strh	r3, [r4, #12]
 8019086:	e7e3      	b.n	8019050 <__smakebuf_r+0xc>
 8019088:	4b0d      	ldr	r3, [pc, #52]	; (80190c0 <__smakebuf_r+0x7c>)
 801908a:	62b3      	str	r3, [r6, #40]	; 0x28
 801908c:	89a3      	ldrh	r3, [r4, #12]
 801908e:	6020      	str	r0, [r4, #0]
 8019090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019094:	81a3      	strh	r3, [r4, #12]
 8019096:	9b00      	ldr	r3, [sp, #0]
 8019098:	6163      	str	r3, [r4, #20]
 801909a:	9b01      	ldr	r3, [sp, #4]
 801909c:	6120      	str	r0, [r4, #16]
 801909e:	b15b      	cbz	r3, 80190b8 <__smakebuf_r+0x74>
 80190a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80190a4:	4630      	mov	r0, r6
 80190a6:	f000 fb4f 	bl	8019748 <_isatty_r>
 80190aa:	b128      	cbz	r0, 80190b8 <__smakebuf_r+0x74>
 80190ac:	89a3      	ldrh	r3, [r4, #12]
 80190ae:	f023 0303 	bic.w	r3, r3, #3
 80190b2:	f043 0301 	orr.w	r3, r3, #1
 80190b6:	81a3      	strh	r3, [r4, #12]
 80190b8:	89a3      	ldrh	r3, [r4, #12]
 80190ba:	431d      	orrs	r5, r3
 80190bc:	81a5      	strh	r5, [r4, #12]
 80190be:	e7cd      	b.n	801905c <__smakebuf_r+0x18>
 80190c0:	08018eb1 	.word	0x08018eb1

080190c4 <__malloc_lock>:
 80190c4:	4770      	bx	lr

080190c6 <__malloc_unlock>:
 80190c6:	4770      	bx	lr

080190c8 <__sfputc_r>:
 80190c8:	6893      	ldr	r3, [r2, #8]
 80190ca:	3b01      	subs	r3, #1
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	b410      	push	{r4}
 80190d0:	6093      	str	r3, [r2, #8]
 80190d2:	da08      	bge.n	80190e6 <__sfputc_r+0x1e>
 80190d4:	6994      	ldr	r4, [r2, #24]
 80190d6:	42a3      	cmp	r3, r4
 80190d8:	db01      	blt.n	80190de <__sfputc_r+0x16>
 80190da:	290a      	cmp	r1, #10
 80190dc:	d103      	bne.n	80190e6 <__sfputc_r+0x1e>
 80190de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80190e2:	f7ff bd51 	b.w	8018b88 <__swbuf_r>
 80190e6:	6813      	ldr	r3, [r2, #0]
 80190e8:	1c58      	adds	r0, r3, #1
 80190ea:	6010      	str	r0, [r2, #0]
 80190ec:	7019      	strb	r1, [r3, #0]
 80190ee:	4608      	mov	r0, r1
 80190f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80190f4:	4770      	bx	lr

080190f6 <__sfputs_r>:
 80190f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80190f8:	4606      	mov	r6, r0
 80190fa:	460f      	mov	r7, r1
 80190fc:	4614      	mov	r4, r2
 80190fe:	18d5      	adds	r5, r2, r3
 8019100:	42ac      	cmp	r4, r5
 8019102:	d101      	bne.n	8019108 <__sfputs_r+0x12>
 8019104:	2000      	movs	r0, #0
 8019106:	e007      	b.n	8019118 <__sfputs_r+0x22>
 8019108:	463a      	mov	r2, r7
 801910a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801910e:	4630      	mov	r0, r6
 8019110:	f7ff ffda 	bl	80190c8 <__sfputc_r>
 8019114:	1c43      	adds	r3, r0, #1
 8019116:	d1f3      	bne.n	8019100 <__sfputs_r+0xa>
 8019118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801911c <_vfiprintf_r>:
 801911c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019120:	460c      	mov	r4, r1
 8019122:	b09d      	sub	sp, #116	; 0x74
 8019124:	4617      	mov	r7, r2
 8019126:	461d      	mov	r5, r3
 8019128:	4606      	mov	r6, r0
 801912a:	b118      	cbz	r0, 8019134 <_vfiprintf_r+0x18>
 801912c:	6983      	ldr	r3, [r0, #24]
 801912e:	b90b      	cbnz	r3, 8019134 <_vfiprintf_r+0x18>
 8019130:	f7ff feda 	bl	8018ee8 <__sinit>
 8019134:	4b7c      	ldr	r3, [pc, #496]	; (8019328 <_vfiprintf_r+0x20c>)
 8019136:	429c      	cmp	r4, r3
 8019138:	d158      	bne.n	80191ec <_vfiprintf_r+0xd0>
 801913a:	6874      	ldr	r4, [r6, #4]
 801913c:	89a3      	ldrh	r3, [r4, #12]
 801913e:	0718      	lsls	r0, r3, #28
 8019140:	d55e      	bpl.n	8019200 <_vfiprintf_r+0xe4>
 8019142:	6923      	ldr	r3, [r4, #16]
 8019144:	2b00      	cmp	r3, #0
 8019146:	d05b      	beq.n	8019200 <_vfiprintf_r+0xe4>
 8019148:	2300      	movs	r3, #0
 801914a:	9309      	str	r3, [sp, #36]	; 0x24
 801914c:	2320      	movs	r3, #32
 801914e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019152:	2330      	movs	r3, #48	; 0x30
 8019154:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019158:	9503      	str	r5, [sp, #12]
 801915a:	f04f 0b01 	mov.w	fp, #1
 801915e:	46b8      	mov	r8, r7
 8019160:	4645      	mov	r5, r8
 8019162:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019166:	b10b      	cbz	r3, 801916c <_vfiprintf_r+0x50>
 8019168:	2b25      	cmp	r3, #37	; 0x25
 801916a:	d154      	bne.n	8019216 <_vfiprintf_r+0xfa>
 801916c:	ebb8 0a07 	subs.w	sl, r8, r7
 8019170:	d00b      	beq.n	801918a <_vfiprintf_r+0x6e>
 8019172:	4653      	mov	r3, sl
 8019174:	463a      	mov	r2, r7
 8019176:	4621      	mov	r1, r4
 8019178:	4630      	mov	r0, r6
 801917a:	f7ff ffbc 	bl	80190f6 <__sfputs_r>
 801917e:	3001      	adds	r0, #1
 8019180:	f000 80c2 	beq.w	8019308 <_vfiprintf_r+0x1ec>
 8019184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019186:	4453      	add	r3, sl
 8019188:	9309      	str	r3, [sp, #36]	; 0x24
 801918a:	f898 3000 	ldrb.w	r3, [r8]
 801918e:	2b00      	cmp	r3, #0
 8019190:	f000 80ba 	beq.w	8019308 <_vfiprintf_r+0x1ec>
 8019194:	2300      	movs	r3, #0
 8019196:	f04f 32ff 	mov.w	r2, #4294967295
 801919a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801919e:	9304      	str	r3, [sp, #16]
 80191a0:	9307      	str	r3, [sp, #28]
 80191a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80191a6:	931a      	str	r3, [sp, #104]	; 0x68
 80191a8:	46a8      	mov	r8, r5
 80191aa:	2205      	movs	r2, #5
 80191ac:	f818 1b01 	ldrb.w	r1, [r8], #1
 80191b0:	485e      	ldr	r0, [pc, #376]	; (801932c <_vfiprintf_r+0x210>)
 80191b2:	f7e7 f81d 	bl	80001f0 <memchr>
 80191b6:	9b04      	ldr	r3, [sp, #16]
 80191b8:	bb78      	cbnz	r0, 801921a <_vfiprintf_r+0xfe>
 80191ba:	06d9      	lsls	r1, r3, #27
 80191bc:	bf44      	itt	mi
 80191be:	2220      	movmi	r2, #32
 80191c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80191c4:	071a      	lsls	r2, r3, #28
 80191c6:	bf44      	itt	mi
 80191c8:	222b      	movmi	r2, #43	; 0x2b
 80191ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80191ce:	782a      	ldrb	r2, [r5, #0]
 80191d0:	2a2a      	cmp	r2, #42	; 0x2a
 80191d2:	d02a      	beq.n	801922a <_vfiprintf_r+0x10e>
 80191d4:	9a07      	ldr	r2, [sp, #28]
 80191d6:	46a8      	mov	r8, r5
 80191d8:	2000      	movs	r0, #0
 80191da:	250a      	movs	r5, #10
 80191dc:	4641      	mov	r1, r8
 80191de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80191e2:	3b30      	subs	r3, #48	; 0x30
 80191e4:	2b09      	cmp	r3, #9
 80191e6:	d969      	bls.n	80192bc <_vfiprintf_r+0x1a0>
 80191e8:	b360      	cbz	r0, 8019244 <_vfiprintf_r+0x128>
 80191ea:	e024      	b.n	8019236 <_vfiprintf_r+0x11a>
 80191ec:	4b50      	ldr	r3, [pc, #320]	; (8019330 <_vfiprintf_r+0x214>)
 80191ee:	429c      	cmp	r4, r3
 80191f0:	d101      	bne.n	80191f6 <_vfiprintf_r+0xda>
 80191f2:	68b4      	ldr	r4, [r6, #8]
 80191f4:	e7a2      	b.n	801913c <_vfiprintf_r+0x20>
 80191f6:	4b4f      	ldr	r3, [pc, #316]	; (8019334 <_vfiprintf_r+0x218>)
 80191f8:	429c      	cmp	r4, r3
 80191fa:	bf08      	it	eq
 80191fc:	68f4      	ldreq	r4, [r6, #12]
 80191fe:	e79d      	b.n	801913c <_vfiprintf_r+0x20>
 8019200:	4621      	mov	r1, r4
 8019202:	4630      	mov	r0, r6
 8019204:	f7ff fd12 	bl	8018c2c <__swsetup_r>
 8019208:	2800      	cmp	r0, #0
 801920a:	d09d      	beq.n	8019148 <_vfiprintf_r+0x2c>
 801920c:	f04f 30ff 	mov.w	r0, #4294967295
 8019210:	b01d      	add	sp, #116	; 0x74
 8019212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019216:	46a8      	mov	r8, r5
 8019218:	e7a2      	b.n	8019160 <_vfiprintf_r+0x44>
 801921a:	4a44      	ldr	r2, [pc, #272]	; (801932c <_vfiprintf_r+0x210>)
 801921c:	1a80      	subs	r0, r0, r2
 801921e:	fa0b f000 	lsl.w	r0, fp, r0
 8019222:	4318      	orrs	r0, r3
 8019224:	9004      	str	r0, [sp, #16]
 8019226:	4645      	mov	r5, r8
 8019228:	e7be      	b.n	80191a8 <_vfiprintf_r+0x8c>
 801922a:	9a03      	ldr	r2, [sp, #12]
 801922c:	1d11      	adds	r1, r2, #4
 801922e:	6812      	ldr	r2, [r2, #0]
 8019230:	9103      	str	r1, [sp, #12]
 8019232:	2a00      	cmp	r2, #0
 8019234:	db01      	blt.n	801923a <_vfiprintf_r+0x11e>
 8019236:	9207      	str	r2, [sp, #28]
 8019238:	e004      	b.n	8019244 <_vfiprintf_r+0x128>
 801923a:	4252      	negs	r2, r2
 801923c:	f043 0302 	orr.w	r3, r3, #2
 8019240:	9207      	str	r2, [sp, #28]
 8019242:	9304      	str	r3, [sp, #16]
 8019244:	f898 3000 	ldrb.w	r3, [r8]
 8019248:	2b2e      	cmp	r3, #46	; 0x2e
 801924a:	d10e      	bne.n	801926a <_vfiprintf_r+0x14e>
 801924c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8019250:	2b2a      	cmp	r3, #42	; 0x2a
 8019252:	d138      	bne.n	80192c6 <_vfiprintf_r+0x1aa>
 8019254:	9b03      	ldr	r3, [sp, #12]
 8019256:	1d1a      	adds	r2, r3, #4
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	9203      	str	r2, [sp, #12]
 801925c:	2b00      	cmp	r3, #0
 801925e:	bfb8      	it	lt
 8019260:	f04f 33ff 	movlt.w	r3, #4294967295
 8019264:	f108 0802 	add.w	r8, r8, #2
 8019268:	9305      	str	r3, [sp, #20]
 801926a:	4d33      	ldr	r5, [pc, #204]	; (8019338 <_vfiprintf_r+0x21c>)
 801926c:	f898 1000 	ldrb.w	r1, [r8]
 8019270:	2203      	movs	r2, #3
 8019272:	4628      	mov	r0, r5
 8019274:	f7e6 ffbc 	bl	80001f0 <memchr>
 8019278:	b140      	cbz	r0, 801928c <_vfiprintf_r+0x170>
 801927a:	2340      	movs	r3, #64	; 0x40
 801927c:	1b40      	subs	r0, r0, r5
 801927e:	fa03 f000 	lsl.w	r0, r3, r0
 8019282:	9b04      	ldr	r3, [sp, #16]
 8019284:	4303      	orrs	r3, r0
 8019286:	f108 0801 	add.w	r8, r8, #1
 801928a:	9304      	str	r3, [sp, #16]
 801928c:	f898 1000 	ldrb.w	r1, [r8]
 8019290:	482a      	ldr	r0, [pc, #168]	; (801933c <_vfiprintf_r+0x220>)
 8019292:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019296:	2206      	movs	r2, #6
 8019298:	f108 0701 	add.w	r7, r8, #1
 801929c:	f7e6 ffa8 	bl	80001f0 <memchr>
 80192a0:	2800      	cmp	r0, #0
 80192a2:	d037      	beq.n	8019314 <_vfiprintf_r+0x1f8>
 80192a4:	4b26      	ldr	r3, [pc, #152]	; (8019340 <_vfiprintf_r+0x224>)
 80192a6:	bb1b      	cbnz	r3, 80192f0 <_vfiprintf_r+0x1d4>
 80192a8:	9b03      	ldr	r3, [sp, #12]
 80192aa:	3307      	adds	r3, #7
 80192ac:	f023 0307 	bic.w	r3, r3, #7
 80192b0:	3308      	adds	r3, #8
 80192b2:	9303      	str	r3, [sp, #12]
 80192b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80192b6:	444b      	add	r3, r9
 80192b8:	9309      	str	r3, [sp, #36]	; 0x24
 80192ba:	e750      	b.n	801915e <_vfiprintf_r+0x42>
 80192bc:	fb05 3202 	mla	r2, r5, r2, r3
 80192c0:	2001      	movs	r0, #1
 80192c2:	4688      	mov	r8, r1
 80192c4:	e78a      	b.n	80191dc <_vfiprintf_r+0xc0>
 80192c6:	2300      	movs	r3, #0
 80192c8:	f108 0801 	add.w	r8, r8, #1
 80192cc:	9305      	str	r3, [sp, #20]
 80192ce:	4619      	mov	r1, r3
 80192d0:	250a      	movs	r5, #10
 80192d2:	4640      	mov	r0, r8
 80192d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80192d8:	3a30      	subs	r2, #48	; 0x30
 80192da:	2a09      	cmp	r2, #9
 80192dc:	d903      	bls.n	80192e6 <_vfiprintf_r+0x1ca>
 80192de:	2b00      	cmp	r3, #0
 80192e0:	d0c3      	beq.n	801926a <_vfiprintf_r+0x14e>
 80192e2:	9105      	str	r1, [sp, #20]
 80192e4:	e7c1      	b.n	801926a <_vfiprintf_r+0x14e>
 80192e6:	fb05 2101 	mla	r1, r5, r1, r2
 80192ea:	2301      	movs	r3, #1
 80192ec:	4680      	mov	r8, r0
 80192ee:	e7f0      	b.n	80192d2 <_vfiprintf_r+0x1b6>
 80192f0:	ab03      	add	r3, sp, #12
 80192f2:	9300      	str	r3, [sp, #0]
 80192f4:	4622      	mov	r2, r4
 80192f6:	4b13      	ldr	r3, [pc, #76]	; (8019344 <_vfiprintf_r+0x228>)
 80192f8:	a904      	add	r1, sp, #16
 80192fa:	4630      	mov	r0, r6
 80192fc:	f3af 8000 	nop.w
 8019300:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019304:	4681      	mov	r9, r0
 8019306:	d1d5      	bne.n	80192b4 <_vfiprintf_r+0x198>
 8019308:	89a3      	ldrh	r3, [r4, #12]
 801930a:	065b      	lsls	r3, r3, #25
 801930c:	f53f af7e 	bmi.w	801920c <_vfiprintf_r+0xf0>
 8019310:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019312:	e77d      	b.n	8019210 <_vfiprintf_r+0xf4>
 8019314:	ab03      	add	r3, sp, #12
 8019316:	9300      	str	r3, [sp, #0]
 8019318:	4622      	mov	r2, r4
 801931a:	4b0a      	ldr	r3, [pc, #40]	; (8019344 <_vfiprintf_r+0x228>)
 801931c:	a904      	add	r1, sp, #16
 801931e:	4630      	mov	r0, r6
 8019320:	f000 f888 	bl	8019434 <_printf_i>
 8019324:	e7ec      	b.n	8019300 <_vfiprintf_r+0x1e4>
 8019326:	bf00      	nop
 8019328:	0802b5cc 	.word	0x0802b5cc
 801932c:	0802b60c 	.word	0x0802b60c
 8019330:	0802b5ec 	.word	0x0802b5ec
 8019334:	0802b5ac 	.word	0x0802b5ac
 8019338:	0802b612 	.word	0x0802b612
 801933c:	0802b616 	.word	0x0802b616
 8019340:	00000000 	.word	0x00000000
 8019344:	080190f7 	.word	0x080190f7

08019348 <_printf_common>:
 8019348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801934c:	4691      	mov	r9, r2
 801934e:	461f      	mov	r7, r3
 8019350:	688a      	ldr	r2, [r1, #8]
 8019352:	690b      	ldr	r3, [r1, #16]
 8019354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019358:	4293      	cmp	r3, r2
 801935a:	bfb8      	it	lt
 801935c:	4613      	movlt	r3, r2
 801935e:	f8c9 3000 	str.w	r3, [r9]
 8019362:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019366:	4606      	mov	r6, r0
 8019368:	460c      	mov	r4, r1
 801936a:	b112      	cbz	r2, 8019372 <_printf_common+0x2a>
 801936c:	3301      	adds	r3, #1
 801936e:	f8c9 3000 	str.w	r3, [r9]
 8019372:	6823      	ldr	r3, [r4, #0]
 8019374:	0699      	lsls	r1, r3, #26
 8019376:	bf42      	ittt	mi
 8019378:	f8d9 3000 	ldrmi.w	r3, [r9]
 801937c:	3302      	addmi	r3, #2
 801937e:	f8c9 3000 	strmi.w	r3, [r9]
 8019382:	6825      	ldr	r5, [r4, #0]
 8019384:	f015 0506 	ands.w	r5, r5, #6
 8019388:	d107      	bne.n	801939a <_printf_common+0x52>
 801938a:	f104 0a19 	add.w	sl, r4, #25
 801938e:	68e3      	ldr	r3, [r4, #12]
 8019390:	f8d9 2000 	ldr.w	r2, [r9]
 8019394:	1a9b      	subs	r3, r3, r2
 8019396:	42ab      	cmp	r3, r5
 8019398:	dc28      	bgt.n	80193ec <_printf_common+0xa4>
 801939a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801939e:	6822      	ldr	r2, [r4, #0]
 80193a0:	3300      	adds	r3, #0
 80193a2:	bf18      	it	ne
 80193a4:	2301      	movne	r3, #1
 80193a6:	0692      	lsls	r2, r2, #26
 80193a8:	d42d      	bmi.n	8019406 <_printf_common+0xbe>
 80193aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80193ae:	4639      	mov	r1, r7
 80193b0:	4630      	mov	r0, r6
 80193b2:	47c0      	blx	r8
 80193b4:	3001      	adds	r0, #1
 80193b6:	d020      	beq.n	80193fa <_printf_common+0xb2>
 80193b8:	6823      	ldr	r3, [r4, #0]
 80193ba:	68e5      	ldr	r5, [r4, #12]
 80193bc:	f8d9 2000 	ldr.w	r2, [r9]
 80193c0:	f003 0306 	and.w	r3, r3, #6
 80193c4:	2b04      	cmp	r3, #4
 80193c6:	bf08      	it	eq
 80193c8:	1aad      	subeq	r5, r5, r2
 80193ca:	68a3      	ldr	r3, [r4, #8]
 80193cc:	6922      	ldr	r2, [r4, #16]
 80193ce:	bf0c      	ite	eq
 80193d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80193d4:	2500      	movne	r5, #0
 80193d6:	4293      	cmp	r3, r2
 80193d8:	bfc4      	itt	gt
 80193da:	1a9b      	subgt	r3, r3, r2
 80193dc:	18ed      	addgt	r5, r5, r3
 80193de:	f04f 0900 	mov.w	r9, #0
 80193e2:	341a      	adds	r4, #26
 80193e4:	454d      	cmp	r5, r9
 80193e6:	d11a      	bne.n	801941e <_printf_common+0xd6>
 80193e8:	2000      	movs	r0, #0
 80193ea:	e008      	b.n	80193fe <_printf_common+0xb6>
 80193ec:	2301      	movs	r3, #1
 80193ee:	4652      	mov	r2, sl
 80193f0:	4639      	mov	r1, r7
 80193f2:	4630      	mov	r0, r6
 80193f4:	47c0      	blx	r8
 80193f6:	3001      	adds	r0, #1
 80193f8:	d103      	bne.n	8019402 <_printf_common+0xba>
 80193fa:	f04f 30ff 	mov.w	r0, #4294967295
 80193fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019402:	3501      	adds	r5, #1
 8019404:	e7c3      	b.n	801938e <_printf_common+0x46>
 8019406:	18e1      	adds	r1, r4, r3
 8019408:	1c5a      	adds	r2, r3, #1
 801940a:	2030      	movs	r0, #48	; 0x30
 801940c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019410:	4422      	add	r2, r4
 8019412:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019416:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801941a:	3302      	adds	r3, #2
 801941c:	e7c5      	b.n	80193aa <_printf_common+0x62>
 801941e:	2301      	movs	r3, #1
 8019420:	4622      	mov	r2, r4
 8019422:	4639      	mov	r1, r7
 8019424:	4630      	mov	r0, r6
 8019426:	47c0      	blx	r8
 8019428:	3001      	adds	r0, #1
 801942a:	d0e6      	beq.n	80193fa <_printf_common+0xb2>
 801942c:	f109 0901 	add.w	r9, r9, #1
 8019430:	e7d8      	b.n	80193e4 <_printf_common+0x9c>
	...

08019434 <_printf_i>:
 8019434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019438:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801943c:	460c      	mov	r4, r1
 801943e:	7e09      	ldrb	r1, [r1, #24]
 8019440:	b085      	sub	sp, #20
 8019442:	296e      	cmp	r1, #110	; 0x6e
 8019444:	4617      	mov	r7, r2
 8019446:	4606      	mov	r6, r0
 8019448:	4698      	mov	r8, r3
 801944a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801944c:	f000 80b3 	beq.w	80195b6 <_printf_i+0x182>
 8019450:	d822      	bhi.n	8019498 <_printf_i+0x64>
 8019452:	2963      	cmp	r1, #99	; 0x63
 8019454:	d036      	beq.n	80194c4 <_printf_i+0x90>
 8019456:	d80a      	bhi.n	801946e <_printf_i+0x3a>
 8019458:	2900      	cmp	r1, #0
 801945a:	f000 80b9 	beq.w	80195d0 <_printf_i+0x19c>
 801945e:	2958      	cmp	r1, #88	; 0x58
 8019460:	f000 8083 	beq.w	801956a <_printf_i+0x136>
 8019464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019468:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801946c:	e032      	b.n	80194d4 <_printf_i+0xa0>
 801946e:	2964      	cmp	r1, #100	; 0x64
 8019470:	d001      	beq.n	8019476 <_printf_i+0x42>
 8019472:	2969      	cmp	r1, #105	; 0x69
 8019474:	d1f6      	bne.n	8019464 <_printf_i+0x30>
 8019476:	6820      	ldr	r0, [r4, #0]
 8019478:	6813      	ldr	r3, [r2, #0]
 801947a:	0605      	lsls	r5, r0, #24
 801947c:	f103 0104 	add.w	r1, r3, #4
 8019480:	d52a      	bpl.n	80194d8 <_printf_i+0xa4>
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	6011      	str	r1, [r2, #0]
 8019486:	2b00      	cmp	r3, #0
 8019488:	da03      	bge.n	8019492 <_printf_i+0x5e>
 801948a:	222d      	movs	r2, #45	; 0x2d
 801948c:	425b      	negs	r3, r3
 801948e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8019492:	486f      	ldr	r0, [pc, #444]	; (8019650 <_printf_i+0x21c>)
 8019494:	220a      	movs	r2, #10
 8019496:	e039      	b.n	801950c <_printf_i+0xd8>
 8019498:	2973      	cmp	r1, #115	; 0x73
 801949a:	f000 809d 	beq.w	80195d8 <_printf_i+0x1a4>
 801949e:	d808      	bhi.n	80194b2 <_printf_i+0x7e>
 80194a0:	296f      	cmp	r1, #111	; 0x6f
 80194a2:	d020      	beq.n	80194e6 <_printf_i+0xb2>
 80194a4:	2970      	cmp	r1, #112	; 0x70
 80194a6:	d1dd      	bne.n	8019464 <_printf_i+0x30>
 80194a8:	6823      	ldr	r3, [r4, #0]
 80194aa:	f043 0320 	orr.w	r3, r3, #32
 80194ae:	6023      	str	r3, [r4, #0]
 80194b0:	e003      	b.n	80194ba <_printf_i+0x86>
 80194b2:	2975      	cmp	r1, #117	; 0x75
 80194b4:	d017      	beq.n	80194e6 <_printf_i+0xb2>
 80194b6:	2978      	cmp	r1, #120	; 0x78
 80194b8:	d1d4      	bne.n	8019464 <_printf_i+0x30>
 80194ba:	2378      	movs	r3, #120	; 0x78
 80194bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80194c0:	4864      	ldr	r0, [pc, #400]	; (8019654 <_printf_i+0x220>)
 80194c2:	e055      	b.n	8019570 <_printf_i+0x13c>
 80194c4:	6813      	ldr	r3, [r2, #0]
 80194c6:	1d19      	adds	r1, r3, #4
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	6011      	str	r1, [r2, #0]
 80194cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80194d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80194d4:	2301      	movs	r3, #1
 80194d6:	e08c      	b.n	80195f2 <_printf_i+0x1be>
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	6011      	str	r1, [r2, #0]
 80194dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80194e0:	bf18      	it	ne
 80194e2:	b21b      	sxthne	r3, r3
 80194e4:	e7cf      	b.n	8019486 <_printf_i+0x52>
 80194e6:	6813      	ldr	r3, [r2, #0]
 80194e8:	6825      	ldr	r5, [r4, #0]
 80194ea:	1d18      	adds	r0, r3, #4
 80194ec:	6010      	str	r0, [r2, #0]
 80194ee:	0628      	lsls	r0, r5, #24
 80194f0:	d501      	bpl.n	80194f6 <_printf_i+0xc2>
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	e002      	b.n	80194fc <_printf_i+0xc8>
 80194f6:	0668      	lsls	r0, r5, #25
 80194f8:	d5fb      	bpl.n	80194f2 <_printf_i+0xbe>
 80194fa:	881b      	ldrh	r3, [r3, #0]
 80194fc:	4854      	ldr	r0, [pc, #336]	; (8019650 <_printf_i+0x21c>)
 80194fe:	296f      	cmp	r1, #111	; 0x6f
 8019500:	bf14      	ite	ne
 8019502:	220a      	movne	r2, #10
 8019504:	2208      	moveq	r2, #8
 8019506:	2100      	movs	r1, #0
 8019508:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801950c:	6865      	ldr	r5, [r4, #4]
 801950e:	60a5      	str	r5, [r4, #8]
 8019510:	2d00      	cmp	r5, #0
 8019512:	f2c0 8095 	blt.w	8019640 <_printf_i+0x20c>
 8019516:	6821      	ldr	r1, [r4, #0]
 8019518:	f021 0104 	bic.w	r1, r1, #4
 801951c:	6021      	str	r1, [r4, #0]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d13d      	bne.n	801959e <_printf_i+0x16a>
 8019522:	2d00      	cmp	r5, #0
 8019524:	f040 808e 	bne.w	8019644 <_printf_i+0x210>
 8019528:	4665      	mov	r5, ip
 801952a:	2a08      	cmp	r2, #8
 801952c:	d10b      	bne.n	8019546 <_printf_i+0x112>
 801952e:	6823      	ldr	r3, [r4, #0]
 8019530:	07db      	lsls	r3, r3, #31
 8019532:	d508      	bpl.n	8019546 <_printf_i+0x112>
 8019534:	6923      	ldr	r3, [r4, #16]
 8019536:	6862      	ldr	r2, [r4, #4]
 8019538:	429a      	cmp	r2, r3
 801953a:	bfde      	ittt	le
 801953c:	2330      	movle	r3, #48	; 0x30
 801953e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019542:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019546:	ebac 0305 	sub.w	r3, ip, r5
 801954a:	6123      	str	r3, [r4, #16]
 801954c:	f8cd 8000 	str.w	r8, [sp]
 8019550:	463b      	mov	r3, r7
 8019552:	aa03      	add	r2, sp, #12
 8019554:	4621      	mov	r1, r4
 8019556:	4630      	mov	r0, r6
 8019558:	f7ff fef6 	bl	8019348 <_printf_common>
 801955c:	3001      	adds	r0, #1
 801955e:	d14d      	bne.n	80195fc <_printf_i+0x1c8>
 8019560:	f04f 30ff 	mov.w	r0, #4294967295
 8019564:	b005      	add	sp, #20
 8019566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801956a:	4839      	ldr	r0, [pc, #228]	; (8019650 <_printf_i+0x21c>)
 801956c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8019570:	6813      	ldr	r3, [r2, #0]
 8019572:	6821      	ldr	r1, [r4, #0]
 8019574:	1d1d      	adds	r5, r3, #4
 8019576:	681b      	ldr	r3, [r3, #0]
 8019578:	6015      	str	r5, [r2, #0]
 801957a:	060a      	lsls	r2, r1, #24
 801957c:	d50b      	bpl.n	8019596 <_printf_i+0x162>
 801957e:	07ca      	lsls	r2, r1, #31
 8019580:	bf44      	itt	mi
 8019582:	f041 0120 	orrmi.w	r1, r1, #32
 8019586:	6021      	strmi	r1, [r4, #0]
 8019588:	b91b      	cbnz	r3, 8019592 <_printf_i+0x15e>
 801958a:	6822      	ldr	r2, [r4, #0]
 801958c:	f022 0220 	bic.w	r2, r2, #32
 8019590:	6022      	str	r2, [r4, #0]
 8019592:	2210      	movs	r2, #16
 8019594:	e7b7      	b.n	8019506 <_printf_i+0xd2>
 8019596:	064d      	lsls	r5, r1, #25
 8019598:	bf48      	it	mi
 801959a:	b29b      	uxthmi	r3, r3
 801959c:	e7ef      	b.n	801957e <_printf_i+0x14a>
 801959e:	4665      	mov	r5, ip
 80195a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80195a4:	fb02 3311 	mls	r3, r2, r1, r3
 80195a8:	5cc3      	ldrb	r3, [r0, r3]
 80195aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80195ae:	460b      	mov	r3, r1
 80195b0:	2900      	cmp	r1, #0
 80195b2:	d1f5      	bne.n	80195a0 <_printf_i+0x16c>
 80195b4:	e7b9      	b.n	801952a <_printf_i+0xf6>
 80195b6:	6813      	ldr	r3, [r2, #0]
 80195b8:	6825      	ldr	r5, [r4, #0]
 80195ba:	6961      	ldr	r1, [r4, #20]
 80195bc:	1d18      	adds	r0, r3, #4
 80195be:	6010      	str	r0, [r2, #0]
 80195c0:	0628      	lsls	r0, r5, #24
 80195c2:	681b      	ldr	r3, [r3, #0]
 80195c4:	d501      	bpl.n	80195ca <_printf_i+0x196>
 80195c6:	6019      	str	r1, [r3, #0]
 80195c8:	e002      	b.n	80195d0 <_printf_i+0x19c>
 80195ca:	066a      	lsls	r2, r5, #25
 80195cc:	d5fb      	bpl.n	80195c6 <_printf_i+0x192>
 80195ce:	8019      	strh	r1, [r3, #0]
 80195d0:	2300      	movs	r3, #0
 80195d2:	6123      	str	r3, [r4, #16]
 80195d4:	4665      	mov	r5, ip
 80195d6:	e7b9      	b.n	801954c <_printf_i+0x118>
 80195d8:	6813      	ldr	r3, [r2, #0]
 80195da:	1d19      	adds	r1, r3, #4
 80195dc:	6011      	str	r1, [r2, #0]
 80195de:	681d      	ldr	r5, [r3, #0]
 80195e0:	6862      	ldr	r2, [r4, #4]
 80195e2:	2100      	movs	r1, #0
 80195e4:	4628      	mov	r0, r5
 80195e6:	f7e6 fe03 	bl	80001f0 <memchr>
 80195ea:	b108      	cbz	r0, 80195f0 <_printf_i+0x1bc>
 80195ec:	1b40      	subs	r0, r0, r5
 80195ee:	6060      	str	r0, [r4, #4]
 80195f0:	6863      	ldr	r3, [r4, #4]
 80195f2:	6123      	str	r3, [r4, #16]
 80195f4:	2300      	movs	r3, #0
 80195f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80195fa:	e7a7      	b.n	801954c <_printf_i+0x118>
 80195fc:	6923      	ldr	r3, [r4, #16]
 80195fe:	462a      	mov	r2, r5
 8019600:	4639      	mov	r1, r7
 8019602:	4630      	mov	r0, r6
 8019604:	47c0      	blx	r8
 8019606:	3001      	adds	r0, #1
 8019608:	d0aa      	beq.n	8019560 <_printf_i+0x12c>
 801960a:	6823      	ldr	r3, [r4, #0]
 801960c:	079b      	lsls	r3, r3, #30
 801960e:	d413      	bmi.n	8019638 <_printf_i+0x204>
 8019610:	68e0      	ldr	r0, [r4, #12]
 8019612:	9b03      	ldr	r3, [sp, #12]
 8019614:	4298      	cmp	r0, r3
 8019616:	bfb8      	it	lt
 8019618:	4618      	movlt	r0, r3
 801961a:	e7a3      	b.n	8019564 <_printf_i+0x130>
 801961c:	2301      	movs	r3, #1
 801961e:	464a      	mov	r2, r9
 8019620:	4639      	mov	r1, r7
 8019622:	4630      	mov	r0, r6
 8019624:	47c0      	blx	r8
 8019626:	3001      	adds	r0, #1
 8019628:	d09a      	beq.n	8019560 <_printf_i+0x12c>
 801962a:	3501      	adds	r5, #1
 801962c:	68e3      	ldr	r3, [r4, #12]
 801962e:	9a03      	ldr	r2, [sp, #12]
 8019630:	1a9b      	subs	r3, r3, r2
 8019632:	42ab      	cmp	r3, r5
 8019634:	dcf2      	bgt.n	801961c <_printf_i+0x1e8>
 8019636:	e7eb      	b.n	8019610 <_printf_i+0x1dc>
 8019638:	2500      	movs	r5, #0
 801963a:	f104 0919 	add.w	r9, r4, #25
 801963e:	e7f5      	b.n	801962c <_printf_i+0x1f8>
 8019640:	2b00      	cmp	r3, #0
 8019642:	d1ac      	bne.n	801959e <_printf_i+0x16a>
 8019644:	7803      	ldrb	r3, [r0, #0]
 8019646:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801964a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801964e:	e76c      	b.n	801952a <_printf_i+0xf6>
 8019650:	0802b61d 	.word	0x0802b61d
 8019654:	0802b62e 	.word	0x0802b62e

08019658 <__sread>:
 8019658:	b510      	push	{r4, lr}
 801965a:	460c      	mov	r4, r1
 801965c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019660:	f000 f894 	bl	801978c <_read_r>
 8019664:	2800      	cmp	r0, #0
 8019666:	bfab      	itete	ge
 8019668:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801966a:	89a3      	ldrhlt	r3, [r4, #12]
 801966c:	181b      	addge	r3, r3, r0
 801966e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019672:	bfac      	ite	ge
 8019674:	6563      	strge	r3, [r4, #84]	; 0x54
 8019676:	81a3      	strhlt	r3, [r4, #12]
 8019678:	bd10      	pop	{r4, pc}

0801967a <__swrite>:
 801967a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801967e:	461f      	mov	r7, r3
 8019680:	898b      	ldrh	r3, [r1, #12]
 8019682:	05db      	lsls	r3, r3, #23
 8019684:	4605      	mov	r5, r0
 8019686:	460c      	mov	r4, r1
 8019688:	4616      	mov	r6, r2
 801968a:	d505      	bpl.n	8019698 <__swrite+0x1e>
 801968c:	2302      	movs	r3, #2
 801968e:	2200      	movs	r2, #0
 8019690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019694:	f000 f868 	bl	8019768 <_lseek_r>
 8019698:	89a3      	ldrh	r3, [r4, #12]
 801969a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801969e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80196a2:	81a3      	strh	r3, [r4, #12]
 80196a4:	4632      	mov	r2, r6
 80196a6:	463b      	mov	r3, r7
 80196a8:	4628      	mov	r0, r5
 80196aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80196ae:	f000 b817 	b.w	80196e0 <_write_r>

080196b2 <__sseek>:
 80196b2:	b510      	push	{r4, lr}
 80196b4:	460c      	mov	r4, r1
 80196b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80196ba:	f000 f855 	bl	8019768 <_lseek_r>
 80196be:	1c43      	adds	r3, r0, #1
 80196c0:	89a3      	ldrh	r3, [r4, #12]
 80196c2:	bf15      	itete	ne
 80196c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80196c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80196ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80196ce:	81a3      	strheq	r3, [r4, #12]
 80196d0:	bf18      	it	ne
 80196d2:	81a3      	strhne	r3, [r4, #12]
 80196d4:	bd10      	pop	{r4, pc}

080196d6 <__sclose>:
 80196d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80196da:	f000 b813 	b.w	8019704 <_close_r>
	...

080196e0 <_write_r>:
 80196e0:	b538      	push	{r3, r4, r5, lr}
 80196e2:	4c07      	ldr	r4, [pc, #28]	; (8019700 <_write_r+0x20>)
 80196e4:	4605      	mov	r5, r0
 80196e6:	4608      	mov	r0, r1
 80196e8:	4611      	mov	r1, r2
 80196ea:	2200      	movs	r2, #0
 80196ec:	6022      	str	r2, [r4, #0]
 80196ee:	461a      	mov	r2, r3
 80196f0:	f7ee f871 	bl	80077d6 <_write>
 80196f4:	1c43      	adds	r3, r0, #1
 80196f6:	d102      	bne.n	80196fe <_write_r+0x1e>
 80196f8:	6823      	ldr	r3, [r4, #0]
 80196fa:	b103      	cbz	r3, 80196fe <_write_r+0x1e>
 80196fc:	602b      	str	r3, [r5, #0]
 80196fe:	bd38      	pop	{r3, r4, r5, pc}
 8019700:	20007f10 	.word	0x20007f10

08019704 <_close_r>:
 8019704:	b538      	push	{r3, r4, r5, lr}
 8019706:	4c06      	ldr	r4, [pc, #24]	; (8019720 <_close_r+0x1c>)
 8019708:	2300      	movs	r3, #0
 801970a:	4605      	mov	r5, r0
 801970c:	4608      	mov	r0, r1
 801970e:	6023      	str	r3, [r4, #0]
 8019710:	f7ee f87d 	bl	800780e <_close>
 8019714:	1c43      	adds	r3, r0, #1
 8019716:	d102      	bne.n	801971e <_close_r+0x1a>
 8019718:	6823      	ldr	r3, [r4, #0]
 801971a:	b103      	cbz	r3, 801971e <_close_r+0x1a>
 801971c:	602b      	str	r3, [r5, #0]
 801971e:	bd38      	pop	{r3, r4, r5, pc}
 8019720:	20007f10 	.word	0x20007f10

08019724 <_fstat_r>:
 8019724:	b538      	push	{r3, r4, r5, lr}
 8019726:	4c07      	ldr	r4, [pc, #28]	; (8019744 <_fstat_r+0x20>)
 8019728:	2300      	movs	r3, #0
 801972a:	4605      	mov	r5, r0
 801972c:	4608      	mov	r0, r1
 801972e:	4611      	mov	r1, r2
 8019730:	6023      	str	r3, [r4, #0]
 8019732:	f7ee f878 	bl	8007826 <_fstat>
 8019736:	1c43      	adds	r3, r0, #1
 8019738:	d102      	bne.n	8019740 <_fstat_r+0x1c>
 801973a:	6823      	ldr	r3, [r4, #0]
 801973c:	b103      	cbz	r3, 8019740 <_fstat_r+0x1c>
 801973e:	602b      	str	r3, [r5, #0]
 8019740:	bd38      	pop	{r3, r4, r5, pc}
 8019742:	bf00      	nop
 8019744:	20007f10 	.word	0x20007f10

08019748 <_isatty_r>:
 8019748:	b538      	push	{r3, r4, r5, lr}
 801974a:	4c06      	ldr	r4, [pc, #24]	; (8019764 <_isatty_r+0x1c>)
 801974c:	2300      	movs	r3, #0
 801974e:	4605      	mov	r5, r0
 8019750:	4608      	mov	r0, r1
 8019752:	6023      	str	r3, [r4, #0]
 8019754:	f7ee f877 	bl	8007846 <_isatty>
 8019758:	1c43      	adds	r3, r0, #1
 801975a:	d102      	bne.n	8019762 <_isatty_r+0x1a>
 801975c:	6823      	ldr	r3, [r4, #0]
 801975e:	b103      	cbz	r3, 8019762 <_isatty_r+0x1a>
 8019760:	602b      	str	r3, [r5, #0]
 8019762:	bd38      	pop	{r3, r4, r5, pc}
 8019764:	20007f10 	.word	0x20007f10

08019768 <_lseek_r>:
 8019768:	b538      	push	{r3, r4, r5, lr}
 801976a:	4c07      	ldr	r4, [pc, #28]	; (8019788 <_lseek_r+0x20>)
 801976c:	4605      	mov	r5, r0
 801976e:	4608      	mov	r0, r1
 8019770:	4611      	mov	r1, r2
 8019772:	2200      	movs	r2, #0
 8019774:	6022      	str	r2, [r4, #0]
 8019776:	461a      	mov	r2, r3
 8019778:	f7ee f870 	bl	800785c <_lseek>
 801977c:	1c43      	adds	r3, r0, #1
 801977e:	d102      	bne.n	8019786 <_lseek_r+0x1e>
 8019780:	6823      	ldr	r3, [r4, #0]
 8019782:	b103      	cbz	r3, 8019786 <_lseek_r+0x1e>
 8019784:	602b      	str	r3, [r5, #0]
 8019786:	bd38      	pop	{r3, r4, r5, pc}
 8019788:	20007f10 	.word	0x20007f10

0801978c <_read_r>:
 801978c:	b538      	push	{r3, r4, r5, lr}
 801978e:	4c07      	ldr	r4, [pc, #28]	; (80197ac <_read_r+0x20>)
 8019790:	4605      	mov	r5, r0
 8019792:	4608      	mov	r0, r1
 8019794:	4611      	mov	r1, r2
 8019796:	2200      	movs	r2, #0
 8019798:	6022      	str	r2, [r4, #0]
 801979a:	461a      	mov	r2, r3
 801979c:	f7ed fffe 	bl	800779c <_read>
 80197a0:	1c43      	adds	r3, r0, #1
 80197a2:	d102      	bne.n	80197aa <_read_r+0x1e>
 80197a4:	6823      	ldr	r3, [r4, #0]
 80197a6:	b103      	cbz	r3, 80197aa <_read_r+0x1e>
 80197a8:	602b      	str	r3, [r5, #0]
 80197aa:	bd38      	pop	{r3, r4, r5, pc}
 80197ac:	20007f10 	.word	0x20007f10

080197b0 <_init>:
 80197b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197b2:	bf00      	nop
 80197b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80197b6:	bc08      	pop	{r3}
 80197b8:	469e      	mov	lr, r3
 80197ba:	4770      	bx	lr

080197bc <_fini>:
 80197bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197be:	bf00      	nop
 80197c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80197c2:	bc08      	pop	{r3}
 80197c4:	469e      	mov	lr, r3
 80197c6:	4770      	bx	lr
