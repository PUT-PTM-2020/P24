
Ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017274  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000119b8  08017404  08017404  00027404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028dbc  08028dbc  00040088  2**0
                  CONTENTS
  4 .ARM          00000008  08028dbc  08028dbc  00038dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028dc4  08028dc4  00040088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028dc4  08028dc4  00038dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08028dc8  08028dc8  00038dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08028dcc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007abc  20000088  08028e54  00040088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20007b44  08028e54  00047b44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f77b  00000000  00000000  000400b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000059b3  00000000  00000000  0006f833  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001730  00000000  00000000  000751e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001658  00000000  00000000  00076918  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002d857  00000000  00000000  00077f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ff51  00000000  00000000  000a57c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000df8ee  00000000  00000000  000c5718  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a5006  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000647c  00000000  00000000  001a5084  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080173ec 	.word	0x080173ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080173ec 	.word	0x080173ec

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <SELECT>:

static BYTE PowerFlag = 0; /* indicates if "power" is on */

static
inline void SELECT(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0

}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr

0800059e <DESELECT>:

static
inline void DESELECT(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0

}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <xmit_spi>:

extern SPI_HandleTypeDef hspi1;

static
void xmit_spi(BYTE Data)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80005b6:	bf00      	nop
 80005b8:	4808      	ldr	r0, [pc, #32]	; (80005dc <xmit_spi+0x30>)
 80005ba:	f009 fd89 	bl	800a0d0 <HAL_SPI_GetState>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d1f9      	bne.n	80005b8 <xmit_spi+0xc>
	HAL_SPI_Transmit(&hspi1, &Data, 1, 5000);
 80005c4:	1df9      	adds	r1, r7, #7
 80005c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80005ca:	2201      	movs	r2, #1
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <xmit_spi+0x30>)
 80005ce:	f009 faa9 	bl	8009b24 <HAL_SPI_Transmit>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200005e4 	.word	0x200005e4

080005e0 <rcvr_spi>:

static BYTE rcvr_spi(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af02      	add	r7, sp, #8
	unsigned char Dummy, Data;
	Dummy = 0xFF;
 80005e6:	23ff      	movs	r3, #255	; 0xff
 80005e8:	71fb      	strb	r3, [r7, #7]
	Data = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	71bb      	strb	r3, [r7, #6]
	while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80005ee:	bf00      	nop
 80005f0:	4809      	ldr	r0, [pc, #36]	; (8000618 <rcvr_spi+0x38>)
 80005f2:	f009 fd6d 	bl	800a0d0 <HAL_SPI_GetState>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d1f9      	bne.n	80005f0 <rcvr_spi+0x10>
	HAL_SPI_TransmitReceive(&hspi1, &Dummy, &Data, 1, 5000);
 80005fc:	1dba      	adds	r2, r7, #6
 80005fe:	1df9      	adds	r1, r7, #7
 8000600:	f241 3388 	movw	r3, #5000	; 0x1388
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2301      	movs	r3, #1
 8000608:	4803      	ldr	r0, [pc, #12]	; (8000618 <rcvr_spi+0x38>)
 800060a:	f009 fbbf 	bl	8009d8c <HAL_SPI_TransmitReceive>

	return Data;
 800060e:	79bb      	ldrb	r3, [r7, #6]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	200005e4 	.word	0x200005e4

0800061c <rcvr_spi_m>:

static
void rcvr_spi_m(BYTE *dst) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	*dst = rcvr_spi();
 8000624:	f7ff ffdc 	bl	80005e0 <rcvr_spi>
 8000628:	4603      	mov	r3, r0
 800062a:	461a      	mov	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	701a      	strb	r2, [r3, #0]
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <wait_ready>:

/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------z------------------------------------------*/

static BYTE wait_ready(void) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
	BYTE res;

	Timer2 = 50;
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <wait_ready+0x34>)
 8000640:	2232      	movs	r2, #50	; 0x32
 8000642:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
 8000644:	f7ff ffcc 	bl	80005e0 <rcvr_spi>
	do
		res = rcvr_spi();
 8000648:	f7ff ffca 	bl	80005e0 <rcvr_spi>
 800064c:	4603      	mov	r3, r0
 800064e:	71fb      	strb	r3, [r7, #7]
	while ((res != 0xFF) && Timer2);
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	2bff      	cmp	r3, #255	; 0xff
 8000654:	d004      	beq.n	8000660 <wait_ready+0x28>
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <wait_ready+0x34>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	b2db      	uxtb	r3, r3
 800065c:	2b00      	cmp	r3, #0
 800065e:	d1f3      	bne.n	8000648 <wait_ready+0x10>

	return res;
 8000660:	79fb      	ldrb	r3, [r7, #7]
}
 8000662:	4618      	mov	r0, r3
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	200000a5 	.word	0x200000a5

08000670 <power_on>:
/*-----------------------------------------------------------------------*/
/* When the target system does not support socket power control, there   */
/* is nothing to do in these functions and chk_power always returns 1.   */

static
void power_on(void) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
	unsigned char i, cmd_arg[6];
	unsigned int Count = 0x1FFF;
 8000676:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800067a:	60bb      	str	r3, [r7, #8]

	DESELECT();
 800067c:	f7ff ff8f 	bl	800059e <DESELECT>

	for (i = 0; i < 10; i++)
 8000680:	2300      	movs	r3, #0
 8000682:	73fb      	strb	r3, [r7, #15]
 8000684:	e005      	b.n	8000692 <power_on+0x22>
		xmit_spi(0xFF);
 8000686:	20ff      	movs	r0, #255	; 0xff
 8000688:	f7ff ff90 	bl	80005ac <xmit_spi>
	for (i = 0; i < 10; i++)
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	3301      	adds	r3, #1
 8000690:	73fb      	strb	r3, [r7, #15]
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	2b09      	cmp	r3, #9
 8000696:	d9f6      	bls.n	8000686 <power_on+0x16>

	SELECT();
 8000698:	f7ff ff7a 	bl	8000590 <SELECT>

	cmd_arg[0] = (CMD0 | 0x40);
 800069c:	2340      	movs	r3, #64	; 0x40
 800069e:	703b      	strb	r3, [r7, #0]
	cmd_arg[1] = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	707b      	strb	r3, [r7, #1]
	cmd_arg[2] = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	70bb      	strb	r3, [r7, #2]
	cmd_arg[3] = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	70fb      	strb	r3, [r7, #3]
	cmd_arg[4] = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	713b      	strb	r3, [r7, #4]
	cmd_arg[5] = 0x95;
 80006b0:	2395      	movs	r3, #149	; 0x95
 80006b2:	717b      	strb	r3, [r7, #5]

	for (i = 0; i < 6; i++)
 80006b4:	2300      	movs	r3, #0
 80006b6:	73fb      	strb	r3, [r7, #15]
 80006b8:	e00b      	b.n	80006d2 <power_on+0x62>
		xmit_spi(cmd_arg[i]);
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	f107 0210 	add.w	r2, r7, #16
 80006c0:	4413      	add	r3, r2
 80006c2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff70 	bl	80005ac <xmit_spi>
	for (i = 0; i < 6; i++)
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
 80006ce:	3301      	adds	r3, #1
 80006d0:	73fb      	strb	r3, [r7, #15]
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	2b05      	cmp	r3, #5
 80006d6:	d9f0      	bls.n	80006ba <power_on+0x4a>

	while ((rcvr_spi() != 0x01) && Count)
 80006d8:	e002      	b.n	80006e0 <power_on+0x70>
		Count--;
 80006da:	68bb      	ldr	r3, [r7, #8]
 80006dc:	3b01      	subs	r3, #1
 80006de:	60bb      	str	r3, [r7, #8]
	while ((rcvr_spi() != 0x01) && Count)
 80006e0:	f7ff ff7e 	bl	80005e0 <rcvr_spi>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d002      	beq.n	80006f0 <power_on+0x80>
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d1f4      	bne.n	80006da <power_on+0x6a>

	DESELECT();
 80006f0:	f7ff ff55 	bl	800059e <DESELECT>
	xmit_spi(0XFF);
 80006f4:	20ff      	movs	r0, #255	; 0xff
 80006f6:	f7ff ff59 	bl	80005ac <xmit_spi>

	PowerFlag = 1;
 80006fa:	4b03      	ldr	r3, [pc, #12]	; (8000708 <power_on+0x98>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	701a      	strb	r2, [r3, #0]
}
 8000700:	bf00      	nop
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	200000a7 	.word	0x200000a7

0800070c <power_off>:

static
void power_off(void) {
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000710:	4b03      	ldr	r3, [pc, #12]	; (8000720 <power_off+0x14>)
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
}
 8000716:	bf00      	nop
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	200000a7 	.word	0x200000a7

08000724 <chk_power>:

static
int chk_power(void) /* Socket power state: 0=off, 1=on */
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <chk_power+0x14>)
 800072a:	781b      	ldrb	r3, [r3, #0]
}
 800072c:	4618      	mov	r0, r3
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	200000a7 	.word	0x200000a7

0800073c <rcvr_datablock>:
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static bool rcvr_datablock(BYTE *buff, /* Data buffer to store received data */
UINT btr /* Byte count (must be even number) */
) {
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	6039      	str	r1, [r7, #0]
	BYTE token;

	Timer1 = 10;
 8000746:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <rcvr_datablock+0x68>)
 8000748:	220a      	movs	r2, #10
 800074a:	701a      	strb	r2, [r3, #0]
	do { /* Wait for data packet in timeout of 100ms */
		token = rcvr_spi();
 800074c:	f7ff ff48 	bl	80005e0 <rcvr_spi>
 8000750:	4603      	mov	r3, r0
 8000752:	73fb      	strb	r3, [r7, #15]
	} while ((token == 0xFF) && Timer1);
 8000754:	7bfb      	ldrb	r3, [r7, #15]
 8000756:	2bff      	cmp	r3, #255	; 0xff
 8000758:	d104      	bne.n	8000764 <rcvr_datablock+0x28>
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <rcvr_datablock+0x68>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	2b00      	cmp	r3, #0
 8000762:	d1f3      	bne.n	800074c <rcvr_datablock+0x10>
	if (token != 0xFE)
 8000764:	7bfb      	ldrb	r3, [r7, #15]
 8000766:	2bfe      	cmp	r3, #254	; 0xfe
 8000768:	d001      	beq.n	800076e <rcvr_datablock+0x32>
		return FALSE; /* If not valid data token, retutn with error */
 800076a:	2300      	movs	r3, #0
 800076c:	e016      	b.n	800079c <rcvr_datablock+0x60>

	do { /* Receive the data block into buffer */
		rcvr_spi_m(buff++);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	1c5a      	adds	r2, r3, #1
 8000772:	607a      	str	r2, [r7, #4]
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff51 	bl	800061c <rcvr_spi_m>
		rcvr_spi_m(buff++);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	1c5a      	adds	r2, r3, #1
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff4b 	bl	800061c <rcvr_spi_m>
	} while (btr -= 2);
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	3b02      	subs	r3, #2
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1ed      	bne.n	800076e <rcvr_datablock+0x32>
	rcvr_spi(); /* Discard CRC */
 8000792:	f7ff ff25 	bl	80005e0 <rcvr_spi>
	rcvr_spi();
 8000796:	f7ff ff23 	bl	80005e0 <rcvr_spi>

	return TRUE; /* Return with success */
 800079a:	2301      	movs	r3, #1
}
 800079c:	4618      	mov	r0, r3
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200000a4 	.word	0x200000a4

080007a8 <xmit_datablock>:
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
static bool xmit_datablock(const BYTE *buff, /* 512 byte data block to be transmitted */
BYTE token /* Data/Stop token */
) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	460b      	mov	r3, r1
 80007b2:	70fb      	strb	r3, [r7, #3]
	BYTE resp, wc;
	uint32_t i = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]

	if (wait_ready() != 0xFF)
 80007b8:	f7ff ff3e 	bl	8000638 <wait_ready>
 80007bc:	4603      	mov	r3, r0
 80007be:	2bff      	cmp	r3, #255	; 0xff
 80007c0:	d001      	beq.n	80007c6 <xmit_datablock+0x1e>
		return FALSE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	e040      	b.n	8000848 <xmit_datablock+0xa0>

	xmit_spi(token); /* Xmit data token */
 80007c6:	78fb      	ldrb	r3, [r7, #3]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff feef 	bl	80005ac <xmit_spi>
	if (token != 0xFD) { /* Is data token */
 80007ce:	78fb      	ldrb	r3, [r7, #3]
 80007d0:	2bfd      	cmp	r3, #253	; 0xfd
 80007d2:	d031      	beq.n	8000838 <xmit_datablock+0x90>
		wc = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	73bb      	strb	r3, [r7, #14]
		do { /* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	607a      	str	r2, [r7, #4]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fee3 	bl	80005ac <xmit_spi>
			xmit_spi(*buff++);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	1c5a      	adds	r2, r3, #1
 80007ea:	607a      	str	r2, [r7, #4]
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fedc 	bl	80005ac <xmit_spi>
		} while (--wc);
 80007f4:	7bbb      	ldrb	r3, [r7, #14]
 80007f6:	3b01      	subs	r3, #1
 80007f8:	73bb      	strb	r3, [r7, #14]
 80007fa:	7bbb      	ldrb	r3, [r7, #14]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d1eb      	bne.n	80007d8 <xmit_datablock+0x30>

		rcvr_spi();
 8000800:	f7ff feee 	bl	80005e0 <rcvr_spi>
		rcvr_spi();
 8000804:	f7ff feec 	bl	80005e0 <rcvr_spi>

		while (i <= 64) {
 8000808:	e00b      	b.n	8000822 <xmit_datablock+0x7a>
			resp = rcvr_spi(); /* Reveive data response */
 800080a:	f7ff fee9 	bl	80005e0 <rcvr_spi>
 800080e:	4603      	mov	r3, r0
 8000810:	73fb      	strb	r3, [r7, #15]
			if ((resp & 0x1F) == 0x05) /* If not accepted, return with error */
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	f003 031f 	and.w	r3, r3, #31
 8000818:	2b05      	cmp	r3, #5
 800081a:	d006      	beq.n	800082a <xmit_datablock+0x82>
				break;
			i++;
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	3301      	adds	r3, #1
 8000820:	60bb      	str	r3, [r7, #8]
		while (i <= 64) {
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	2b40      	cmp	r3, #64	; 0x40
 8000826:	d9f0      	bls.n	800080a <xmit_datablock+0x62>
 8000828:	e000      	b.n	800082c <xmit_datablock+0x84>
				break;
 800082a:	bf00      	nop
		}
		while (rcvr_spi() == 0)
 800082c:	bf00      	nop
 800082e:	f7ff fed7 	bl	80005e0 <rcvr_spi>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d0fa      	beq.n	800082e <xmit_datablock+0x86>
			;
	}
	if ((resp & 0x1F) == 0x05)
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	f003 031f 	and.w	r3, r3, #31
 800083e:	2b05      	cmp	r3, #5
 8000840:	d101      	bne.n	8000846 <xmit_datablock+0x9e>
		return TRUE;
 8000842:	2301      	movs	r3, #1
 8000844:	e000      	b.n	8000848 <xmit_datablock+0xa0>
	else
		return FALSE;
 8000846:	2300      	movs	r3, #0
}
 8000848:	4618      	mov	r0, r3
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <send_cmd>:
/* Send a command packet to MMC                                          */
/*-----------------------------------------------------------------------*/

static BYTE send_cmd(BYTE cmd, /* Command byte */
DWORD arg /* Argument */
) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	6039      	str	r1, [r7, #0]
 800085a:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (wait_ready() != 0xFF)
 800085c:	f7ff feec 	bl	8000638 <wait_ready>
 8000860:	4603      	mov	r3, r0
 8000862:	2bff      	cmp	r3, #255	; 0xff
 8000864:	d001      	beq.n	800086a <send_cmd+0x1a>
		return 0xFF;
 8000866:	23ff      	movs	r3, #255	; 0xff
 8000868:	e040      	b.n	80008ec <send_cmd+0x9c>

	/* Send command packet */
	xmit_spi(cmd); /* Command */
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fe9d 	bl	80005ac <xmit_spi>
	xmit_spi((BYTE) (arg >> 24)); /* Argument[31..24] */
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	0e1b      	lsrs	r3, r3, #24
 8000876:	b2db      	uxtb	r3, r3
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fe97 	bl	80005ac <xmit_spi>
	xmit_spi((BYTE) (arg >> 16)); /* Argument[23..16] */
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	0c1b      	lsrs	r3, r3, #16
 8000882:	b2db      	uxtb	r3, r3
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fe91 	bl	80005ac <xmit_spi>
	xmit_spi((BYTE) (arg >> 8)); /* Argument[15..8] */
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	0a1b      	lsrs	r3, r3, #8
 800088e:	b2db      	uxtb	r3, r3
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff fe8b 	bl	80005ac <xmit_spi>
	xmit_spi((BYTE) arg); /* Argument[7..0] */
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fe86 	bl	80005ac <xmit_spi>
	n = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	2b40      	cmp	r3, #64	; 0x40
 80008a8:	d101      	bne.n	80008ae <send_cmd+0x5e>
		n = 0x95; /* CRC for CMD0(0) */
 80008aa:	2395      	movs	r3, #149	; 0x95
 80008ac:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	2b48      	cmp	r3, #72	; 0x48
 80008b2:	d101      	bne.n	80008b8 <send_cmd+0x68>
		n = 0x87; /* CRC for CMD8(0x1AA) */
 80008b4:	2387      	movs	r3, #135	; 0x87
 80008b6:	73fb      	strb	r3, [r7, #15]
	xmit_spi(n);
 80008b8:	7bfb      	ldrb	r3, [r7, #15]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff fe76 	bl	80005ac <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12)
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	2b4c      	cmp	r3, #76	; 0x4c
 80008c4:	d101      	bne.n	80008ca <send_cmd+0x7a>
		rcvr_spi(); /* Skip a stuff byte when stop reading */
 80008c6:	f7ff fe8b 	bl	80005e0 <rcvr_spi>
	n = 10; /* Wait for a valid response in timeout of 10 attempts */
 80008ca:	230a      	movs	r3, #10
 80008cc:	73fb      	strb	r3, [r7, #15]
	do
		res = rcvr_spi();
 80008ce:	f7ff fe87 	bl	80005e0 <rcvr_spi>
 80008d2:	4603      	mov	r3, r0
 80008d4:	73bb      	strb	r3, [r7, #14]
	while ((res & 0x80) && --n);
 80008d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	da05      	bge.n	80008ea <send_cmd+0x9a>
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	3b01      	subs	r3, #1
 80008e2:	73fb      	strb	r3, [r7, #15]
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d1f1      	bne.n	80008ce <send_cmd+0x7e>

	return res; /* Return with the response value */
 80008ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize(BYTE drv /* Physical drive nmuber (0) */
) {
 80008f4:	b590      	push	{r4, r7, lr}
 80008f6:	b085      	sub	sp, #20
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	71fb      	strb	r3, [r7, #7]
	BYTE n, ty, ocr[4];

	if (drv)
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <disk_initialize+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8000904:	2301      	movs	r3, #1
 8000906:	e0d5      	b.n	8000ab4 <disk_initialize+0x1c0>
	if (Stat & STA_NODISK)
 8000908:	4b6c      	ldr	r3, [pc, #432]	; (8000abc <disk_initialize+0x1c8>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	b2db      	uxtb	r3, r3
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	2b00      	cmp	r3, #0
 8000914:	d003      	beq.n	800091e <disk_initialize+0x2a>
		return Stat; /* No card in the socket */
 8000916:	4b69      	ldr	r3, [pc, #420]	; (8000abc <disk_initialize+0x1c8>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b2db      	uxtb	r3, r3
 800091c:	e0ca      	b.n	8000ab4 <disk_initialize+0x1c0>

	power_on(); /* Force socket power on */
 800091e:	f7ff fea7 	bl	8000670 <power_on>
	//send_initial_clock_train();

	SELECT(); /* CS = L */
 8000922:	f7ff fe35 	bl	8000590 <SELECT>
	ty = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	73bb      	strb	r3, [r7, #14]
	if (send_cmd(CMD0, 0) == 1) { /* Enter Idle state */
 800092a:	2100      	movs	r1, #0
 800092c:	2040      	movs	r0, #64	; 0x40
 800092e:	f7ff ff8f 	bl	8000850 <send_cmd>
 8000932:	4603      	mov	r3, r0
 8000934:	2b01      	cmp	r3, #1
 8000936:	f040 80a5 	bne.w	8000a84 <disk_initialize+0x190>
		Timer1 = 100; /* Initialization timeout of 1000 msec */
 800093a:	4b61      	ldr	r3, [pc, #388]	; (8000ac0 <disk_initialize+0x1cc>)
 800093c:	2264      	movs	r2, #100	; 0x64
 800093e:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) { /* SDC Ver2+ */
 8000940:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000944:	2048      	movs	r0, #72	; 0x48
 8000946:	f7ff ff83 	bl	8000850 <send_cmd>
 800094a:	4603      	mov	r3, r0
 800094c:	2b01      	cmp	r3, #1
 800094e:	d158      	bne.n	8000a02 <disk_initialize+0x10e>
			for (n = 0; n < 4; n++)
 8000950:	2300      	movs	r3, #0
 8000952:	73fb      	strb	r3, [r7, #15]
 8000954:	e00c      	b.n	8000970 <disk_initialize+0x7c>
				ocr[n] = rcvr_spi();
 8000956:	7bfc      	ldrb	r4, [r7, #15]
 8000958:	f7ff fe42 	bl	80005e0 <rcvr_spi>
 800095c:	4603      	mov	r3, r0
 800095e:	461a      	mov	r2, r3
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	4423      	add	r3, r4
 8000966:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	3301      	adds	r3, #1
 800096e:	73fb      	strb	r3, [r7, #15]
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	2b03      	cmp	r3, #3
 8000974:	d9ef      	bls.n	8000956 <disk_initialize+0x62>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) { /* The card can work at vdd range of 2.7-3.6V */
 8000976:	7abb      	ldrb	r3, [r7, #10]
 8000978:	2b01      	cmp	r3, #1
 800097a:	f040 8083 	bne.w	8000a84 <disk_initialize+0x190>
 800097e:	7afb      	ldrb	r3, [r7, #11]
 8000980:	2baa      	cmp	r3, #170	; 0xaa
 8000982:	d17f      	bne.n	8000a84 <disk_initialize+0x190>
				do {
					if (send_cmd(CMD55, 0) <= 1
 8000984:	2100      	movs	r1, #0
 8000986:	2077      	movs	r0, #119	; 0x77
 8000988:	f7ff ff62 	bl	8000850 <send_cmd>
 800098c:	4603      	mov	r3, r0
 800098e:	2b01      	cmp	r3, #1
 8000990:	d807      	bhi.n	80009a2 <disk_initialize+0xae>
							&& send_cmd(CMD41, 1UL << 30) == 0)
 8000992:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000996:	2069      	movs	r0, #105	; 0x69
 8000998:	f7ff ff5a 	bl	8000850 <send_cmd>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d005      	beq.n	80009ae <disk_initialize+0xba>
						break; /* ACMD41 with HCS bit */
				} while (Timer1);
 80009a2:	4b47      	ldr	r3, [pc, #284]	; (8000ac0 <disk_initialize+0x1cc>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1eb      	bne.n	8000984 <disk_initialize+0x90>
 80009ac:	e000      	b.n	80009b0 <disk_initialize+0xbc>
						break; /* ACMD41 with HCS bit */
 80009ae:	bf00      	nop
				if (Timer1 && send_cmd(CMD58, 0) == 0) { /* Check CCS bit */
 80009b0:	4b43      	ldr	r3, [pc, #268]	; (8000ac0 <disk_initialize+0x1cc>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d064      	beq.n	8000a84 <disk_initialize+0x190>
 80009ba:	2100      	movs	r1, #0
 80009bc:	207a      	movs	r0, #122	; 0x7a
 80009be:	f7ff ff47 	bl	8000850 <send_cmd>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d15d      	bne.n	8000a84 <disk_initialize+0x190>
					for (n = 0; n < 4; n++)
 80009c8:	2300      	movs	r3, #0
 80009ca:	73fb      	strb	r3, [r7, #15]
 80009cc:	e00c      	b.n	80009e8 <disk_initialize+0xf4>
						ocr[n] = rcvr_spi();
 80009ce:	7bfc      	ldrb	r4, [r7, #15]
 80009d0:	f7ff fe06 	bl	80005e0 <rcvr_spi>
 80009d4:	4603      	mov	r3, r0
 80009d6:	461a      	mov	r2, r3
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	4423      	add	r3, r4
 80009de:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	3301      	adds	r3, #1
 80009e6:	73fb      	strb	r3, [r7, #15]
 80009e8:	7bfb      	ldrb	r3, [r7, #15]
 80009ea:	2b03      	cmp	r3, #3
 80009ec:	d9ef      	bls.n	80009ce <disk_initialize+0xda>
					ty = (ocr[0] & 0x40) ? 6 : 2;
 80009ee:	7a3b      	ldrb	r3, [r7, #8]
 80009f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <disk_initialize+0x108>
 80009f8:	2306      	movs	r3, #6
 80009fa:	e000      	b.n	80009fe <disk_initialize+0x10a>
 80009fc:	2302      	movs	r3, #2
 80009fe:	73bb      	strb	r3, [r7, #14]
 8000a00:	e040      	b.n	8000a84 <disk_initialize+0x190>
				}
			}
		} else { /* SDC Ver1 or MMC */
			ty = (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8000a02:	2100      	movs	r1, #0
 8000a04:	2077      	movs	r0, #119	; 0x77
 8000a06:	f7ff ff23 	bl	8000850 <send_cmd>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d808      	bhi.n	8000a22 <disk_initialize+0x12e>
 8000a10:	2100      	movs	r1, #0
 8000a12:	2069      	movs	r0, #105	; 0x69
 8000a14:	f7ff ff1c 	bl	8000850 <send_cmd>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d801      	bhi.n	8000a22 <disk_initialize+0x12e>
 8000a1e:	2302      	movs	r3, #2
 8000a20:	e000      	b.n	8000a24 <disk_initialize+0x130>
 8000a22:	2301      	movs	r3, #1
 8000a24:	73bb      	strb	r3, [r7, #14]
			do {
				if (ty == 2) {
 8000a26:	7bbb      	ldrb	r3, [r7, #14]
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	d10e      	bne.n	8000a4a <disk_initialize+0x156>
					if (send_cmd(CMD55, 0) <= 1 && send_cmd(CMD41, 0) == 0)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2077      	movs	r0, #119	; 0x77
 8000a30:	f7ff ff0e 	bl	8000850 <send_cmd>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d80e      	bhi.n	8000a58 <disk_initialize+0x164>
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2069      	movs	r0, #105	; 0x69
 8000a3e:	f7ff ff07 	bl	8000850 <send_cmd>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d107      	bne.n	8000a58 <disk_initialize+0x164>
						break; /* ACMD41 */
 8000a48:	e00d      	b.n	8000a66 <disk_initialize+0x172>
				} else {
					if (send_cmd(CMD1, 0) == 0)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2041      	movs	r0, #65	; 0x41
 8000a4e:	f7ff feff 	bl	8000850 <send_cmd>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d005      	beq.n	8000a64 <disk_initialize+0x170>
						break; /* CMD1 */
				}
			} while (Timer1);
 8000a58:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <disk_initialize+0x1cc>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d1e1      	bne.n	8000a26 <disk_initialize+0x132>
 8000a62:	e000      	b.n	8000a66 <disk_initialize+0x172>
						break; /* CMD1 */
 8000a64:	bf00      	nop
			if (!Timer1 || send_cmd(CMD16, 512) != 0) /* Select R/W block length */
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <disk_initialize+0x1cc>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d007      	beq.n	8000a80 <disk_initialize+0x18c>
 8000a70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a74:	2050      	movs	r0, #80	; 0x50
 8000a76:	f7ff feeb 	bl	8000850 <send_cmd>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <disk_initialize+0x190>
				ty = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	73bb      	strb	r3, [r7, #14]
		}
	}
	CardType = ty;
 8000a84:	4a0f      	ldr	r2, [pc, #60]	; (8000ac4 <disk_initialize+0x1d0>)
 8000a86:	7bbb      	ldrb	r3, [r7, #14]
 8000a88:	7013      	strb	r3, [r2, #0]
	DESELECT(); /* CS = H */
 8000a8a:	f7ff fd88 	bl	800059e <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8000a8e:	f7ff fda7 	bl	80005e0 <rcvr_spi>

	if (ty) /* Initialization succeded */
 8000a92:	7bbb      	ldrb	r3, [r7, #14]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d008      	beq.n	8000aaa <disk_initialize+0x1b6>
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT */
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <disk_initialize+0x1c8>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	f023 0301 	bic.w	r3, r3, #1
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	4b05      	ldr	r3, [pc, #20]	; (8000abc <disk_initialize+0x1c8>)
 8000aa6:	701a      	strb	r2, [r3, #0]
 8000aa8:	e001      	b.n	8000aae <disk_initialize+0x1ba>
	else
		/* Initialization failed */
		power_off();
 8000aaa:	f7ff fe2f 	bl	800070c <power_off>

	return Stat;
 8000aae:	4b03      	ldr	r3, [pc, #12]	; (8000abc <disk_initialize+0x1c8>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	b2db      	uxtb	r3, r3
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd90      	pop	{r4, r7, pc}
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	200000a4 	.word	0x200000a4
 8000ac4:	200000a6 	.word	0x200000a6

08000ac8 <disk_status>:
/*-----------------------------------------------------------------------*/
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS disk_status(BYTE drv /* Physical drive nmuber (0) */
) {
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <disk_status+0x14>
		return STA_NOINIT; /* Supports only single drive */
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e002      	b.n	8000ae2 <disk_status+0x1a>
	return Stat;
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <disk_status+0x28>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b2db      	uxtb	r3, r3
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000000 	.word	0x20000000

08000af4 <disk_read>:

/*-----------------------------------------------------------------------*/
/* Read Sector(s)                                                        */
/*-----------------------------------------------------------------------*/

DRESULT disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	4603      	mov	r3, r0
 8000b02:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d102      	bne.n	8000b10 <disk_read+0x1c>
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d101      	bne.n	8000b14 <disk_read+0x20>
		return RES_PARERR;
 8000b10:	2304      	movs	r3, #4
 8000b12:	e051      	b.n	8000bb8 <disk_read+0xc4>
	if (Stat & STA_NOINIT)
 8000b14:	4b2a      	ldr	r3, [pc, #168]	; (8000bc0 <disk_read+0xcc>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <disk_read+0x32>
		return RES_NOTRDY;
 8000b22:	2303      	movs	r3, #3
 8000b24:	e048      	b.n	8000bb8 <disk_read+0xc4>

	if (!(CardType & 4))
 8000b26:	4b27      	ldr	r3, [pc, #156]	; (8000bc4 <disk_read+0xd0>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d102      	bne.n	8000b38 <disk_read+0x44>
		sector *= 512; /* Convert to byte address if needed */
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	025b      	lsls	r3, r3, #9
 8000b36:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8000b38:	f7ff fd2a 	bl	8000590 <SELECT>

	if (count == 1) { /* Single block read */
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d111      	bne.n	8000b66 <disk_read+0x72>
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	2051      	movs	r0, #81	; 0x51
 8000b46:	f7ff fe83 	bl	8000850 <send_cmd>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d129      	bne.n	8000ba4 <disk_read+0xb0>
		&& rcvr_datablock(buff, 512))
 8000b50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b54:	68b8      	ldr	r0, [r7, #8]
 8000b56:	f7ff fdf1 	bl	800073c <rcvr_datablock>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d021      	beq.n	8000ba4 <disk_read+0xb0>
			count = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	e01e      	b.n	8000ba4 <disk_read+0xb0>
	} else { /* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	2052      	movs	r0, #82	; 0x52
 8000b6a:	f7ff fe71 	bl	8000850 <send_cmd>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d117      	bne.n	8000ba4 <disk_read+0xb0>
			do {
				if (!rcvr_datablock(buff, 512))
 8000b74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b78:	68b8      	ldr	r0, [r7, #8]
 8000b7a:	f7ff fddf 	bl	800073c <rcvr_datablock>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d00a      	beq.n	8000b9a <disk_read+0xa6>
					break;
				buff += 512;
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b8a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1ed      	bne.n	8000b74 <disk_read+0x80>
 8000b98:	e000      	b.n	8000b9c <disk_read+0xa8>
					break;
 8000b9a:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	204c      	movs	r0, #76	; 0x4c
 8000ba0:	f7ff fe56 	bl	8000850 <send_cmd>
		}
	}

	DESELECT(); /* CS = H */
 8000ba4:	f7ff fcfb 	bl	800059e <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8000ba8:	f7ff fd1a 	bl	80005e0 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	bf14      	ite	ne
 8000bb2:	2301      	movne	r3, #1
 8000bb4:	2300      	moveq	r3, #0
 8000bb6:	b2db      	uxtb	r3, r3
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000000 	.word	0x20000000
 8000bc4:	200000a6 	.word	0x200000a6

08000bc8 <disk_write>:
/*-----------------------------------------------------------------------*/
/* Write Sector(s)                                                       */
/*-----------------------------------------------------------------------*/

#if _READONLY == 0
DRESULT disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60b9      	str	r1, [r7, #8]
 8000bd0:	607a      	str	r2, [r7, #4]
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	73fb      	strb	r3, [r7, #15]
	if (pdrv || !count)
 8000bd8:	7bfb      	ldrb	r3, [r7, #15]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d102      	bne.n	8000be4 <disk_write+0x1c>
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d101      	bne.n	8000be8 <disk_write+0x20>
		return RES_PARERR;
 8000be4:	2304      	movs	r3, #4
 8000be6:	e06b      	b.n	8000cc0 <disk_write+0xf8>
	if (Stat & STA_NOINIT)
 8000be8:	4b37      	ldr	r3, [pc, #220]	; (8000cc8 <disk_write+0x100>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <disk_write+0x32>
		return RES_NOTRDY;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	e062      	b.n	8000cc0 <disk_write+0xf8>
	if (Stat & STA_PROTECT)
 8000bfa:	4b33      	ldr	r3, [pc, #204]	; (8000cc8 <disk_write+0x100>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	f003 0304 	and.w	r3, r3, #4
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <disk_write+0x44>
		return RES_WRPRT;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	e059      	b.n	8000cc0 <disk_write+0xf8>

	if (!(CardType & 4))
 8000c0c:	4b2f      	ldr	r3, [pc, #188]	; (8000ccc <disk_write+0x104>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	f003 0304 	and.w	r3, r3, #4
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d102      	bne.n	8000c1e <disk_write+0x56>
		sector *= 512; /* Convert to byte address if needed */
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	025b      	lsls	r3, r3, #9
 8000c1c:	607b      	str	r3, [r7, #4]

	SELECT(); /* CS = L */
 8000c1e:	f7ff fcb7 	bl	8000590 <SELECT>

	if (count == 1) { /* Single block write */
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d110      	bne.n	8000c4a <disk_write+0x82>
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 8000c28:	6879      	ldr	r1, [r7, #4]
 8000c2a:	2058      	movs	r0, #88	; 0x58
 8000c2c:	f7ff fe10 	bl	8000850 <send_cmd>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d13a      	bne.n	8000cac <disk_write+0xe4>
		&& xmit_datablock(buff, 0xFE))
 8000c36:	21fe      	movs	r1, #254	; 0xfe
 8000c38:	68b8      	ldr	r0, [r7, #8]
 8000c3a:	f7ff fdb5 	bl	80007a8 <xmit_datablock>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d033      	beq.n	8000cac <disk_write+0xe4>
			count = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	e030      	b.n	8000cac <disk_write+0xe4>
	} else { /* Multiple block write */
		if (CardType & 2) {
 8000c4a:	4b20      	ldr	r3, [pc, #128]	; (8000ccc <disk_write+0x104>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	f003 0302 	and.w	r3, r3, #2
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d007      	beq.n	8000c66 <disk_write+0x9e>
			send_cmd(CMD55, 0);
 8000c56:	2100      	movs	r1, #0
 8000c58:	2077      	movs	r0, #119	; 0x77
 8000c5a:	f7ff fdf9 	bl	8000850 <send_cmd>
			send_cmd(CMD23, count); /* ACMD23 */
 8000c5e:	6839      	ldr	r1, [r7, #0]
 8000c60:	2057      	movs	r0, #87	; 0x57
 8000c62:	f7ff fdf5 	bl	8000850 <send_cmd>
		}
		if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	2059      	movs	r0, #89	; 0x59
 8000c6a:	f7ff fdf1 	bl	8000850 <send_cmd>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d11b      	bne.n	8000cac <disk_write+0xe4>
			do {
				if (!xmit_datablock(buff, 0xFC))
 8000c74:	21fc      	movs	r1, #252	; 0xfc
 8000c76:	68b8      	ldr	r0, [r7, #8]
 8000c78:	f7ff fd96 	bl	80007a8 <xmit_datablock>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d00a      	beq.n	8000c98 <disk_write+0xd0>
					break;
				buff += 512;
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000c88:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	3b01      	subs	r3, #1
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d1ee      	bne.n	8000c74 <disk_write+0xac>
 8000c96:	e000      	b.n	8000c9a <disk_write+0xd2>
					break;
 8000c98:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) /* STOP_TRAN token */
 8000c9a:	21fd      	movs	r1, #253	; 0xfd
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f7ff fd83 	bl	80007a8 <xmit_datablock>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d101      	bne.n	8000cac <disk_write+0xe4>
				count = 1;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	603b      	str	r3, [r7, #0]
		}
	}

	DESELECT(); /* CS = H */
 8000cac:	f7ff fc77 	bl	800059e <DESELECT>
	rcvr_spi(); /* Idle (Release DO) */
 8000cb0:	f7ff fc96 	bl	80005e0 <rcvr_spi>

	return count ? RES_ERROR : RES_OK;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	bf14      	ite	ne
 8000cba:	2301      	movne	r3, #1
 8000cbc:	2300      	moveq	r3, #0
 8000cbe:	b2db      	uxtb	r3, r3
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3710      	adds	r7, #16
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	200000a6 	.word	0x200000a6

08000cd0 <disk_ioctl>:
/*-----------------------------------------------------------------------*/

DRESULT disk_ioctl(BYTE drv, /* Physical drive nmuber (0) */
BYTE ctrl, /* Control code */
void *buff /* Buffer to send/receive control data */
) {
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b08b      	sub	sp, #44	; 0x2c
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	603a      	str	r2, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	623b      	str	r3, [r7, #32]
	WORD csize;

	if (drv)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <disk_ioctl+0x1e>
		return RES_PARERR;
 8000cea:	2304      	movs	r3, #4
 8000cec:	e16a      	b.n	8000fc4 <disk_ioctl+0x2f4>

	res = RES_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER_OFF) {
 8000cf4:	79bb      	ldrb	r3, [r7, #6]
 8000cf6:	2b07      	cmp	r3, #7
 8000cf8:	d127      	bne.n	8000d4a <disk_ioctl+0x7a>
		switch (*ptr) {
 8000cfa:	6a3b      	ldr	r3, [r7, #32]
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d00e      	beq.n	8000d20 <disk_ioctl+0x50>
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d012      	beq.n	8000d2c <disk_ioctl+0x5c>
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d11b      	bne.n	8000d42 <disk_ioctl+0x72>
		case 0: /* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
 8000d0a:	f7ff fd0b 	bl	8000724 <chk_power>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <disk_ioctl+0x48>
				power_off(); /* Power off */
 8000d14:	f7ff fcfa 	bl	800070c <power_off>
			res = RES_OK;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d1e:	e14f      	b.n	8000fc0 <disk_ioctl+0x2f0>
		case 1: /* Sub control code == 1 (POWER_ON) */
			power_on(); /* Power on */
 8000d20:	f7ff fca6 	bl	8000670 <power_on>
			res = RES_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d2a:	e149      	b.n	8000fc0 <disk_ioctl+0x2f0>
		case 2: /* Sub control code == 2 (POWER_GET) */
			*(ptr + 1) = (BYTE) chk_power();
 8000d2c:	f7ff fcfa 	bl	8000724 <chk_power>
 8000d30:	4602      	mov	r2, r0
 8000d32:	6a3b      	ldr	r3, [r7, #32]
 8000d34:	3301      	adds	r3, #1
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	701a      	strb	r2, [r3, #0]
			res = RES_OK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000d40:	e13e      	b.n	8000fc0 <disk_ioctl+0x2f0>
		default:
			res = RES_PARERR;
 8000d42:	2304      	movs	r3, #4
 8000d44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000d48:	e13a      	b.n	8000fc0 <disk_ioctl+0x2f0>
		}
	} else {
		if (Stat & STA_NOINIT)
 8000d4a:	4ba0      	ldr	r3, [pc, #640]	; (8000fcc <disk_ioctl+0x2fc>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <disk_ioctl+0x8c>
			return RES_NOTRDY;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	e133      	b.n	8000fc4 <disk_ioctl+0x2f4>

		SELECT(); /* CS = L */
 8000d5c:	f7ff fc18 	bl	8000590 <SELECT>

		switch (ctrl) {
 8000d60:	79bb      	ldrb	r3, [r7, #6]
 8000d62:	2b35      	cmp	r3, #53	; 0x35
 8000d64:	f200 811d 	bhi.w	8000fa2 <disk_ioctl+0x2d2>
 8000d68:	a201      	add	r2, pc, #4	; (adr r2, 8000d70 <disk_ioctl+0xa0>)
 8000d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6e:	bf00      	nop
 8000d70:	08000f0b 	.word	0x08000f0b
 8000d74:	08000e49 	.word	0x08000e49
 8000d78:	08000efb 	.word	0x08000efb
 8000d7c:	08000fa3 	.word	0x08000fa3
 8000d80:	08000fa3 	.word	0x08000fa3
 8000d84:	08000fa3 	.word	0x08000fa3
 8000d88:	08000fa3 	.word	0x08000fa3
 8000d8c:	08000fa3 	.word	0x08000fa3
 8000d90:	08000fa3 	.word	0x08000fa3
 8000d94:	08000fa3 	.word	0x08000fa3
 8000d98:	08000fa3 	.word	0x08000fa3
 8000d9c:	08000fa3 	.word	0x08000fa3
 8000da0:	08000fa3 	.word	0x08000fa3
 8000da4:	08000fa3 	.word	0x08000fa3
 8000da8:	08000fa3 	.word	0x08000fa3
 8000dac:	08000fa3 	.word	0x08000fa3
 8000db0:	08000fa3 	.word	0x08000fa3
 8000db4:	08000fa3 	.word	0x08000fa3
 8000db8:	08000fa3 	.word	0x08000fa3
 8000dbc:	08000fa3 	.word	0x08000fa3
 8000dc0:	08000fa3 	.word	0x08000fa3
 8000dc4:	08000fa3 	.word	0x08000fa3
 8000dc8:	08000fa3 	.word	0x08000fa3
 8000dcc:	08000fa3 	.word	0x08000fa3
 8000dd0:	08000fa3 	.word	0x08000fa3
 8000dd4:	08000fa3 	.word	0x08000fa3
 8000dd8:	08000fa3 	.word	0x08000fa3
 8000ddc:	08000fa3 	.word	0x08000fa3
 8000de0:	08000fa3 	.word	0x08000fa3
 8000de4:	08000fa3 	.word	0x08000fa3
 8000de8:	08000fa3 	.word	0x08000fa3
 8000dec:	08000fa3 	.word	0x08000fa3
 8000df0:	08000fa3 	.word	0x08000fa3
 8000df4:	08000fa3 	.word	0x08000fa3
 8000df8:	08000fa3 	.word	0x08000fa3
 8000dfc:	08000fa3 	.word	0x08000fa3
 8000e00:	08000fa3 	.word	0x08000fa3
 8000e04:	08000fa3 	.word	0x08000fa3
 8000e08:	08000fa3 	.word	0x08000fa3
 8000e0c:	08000fa3 	.word	0x08000fa3
 8000e10:	08000fa3 	.word	0x08000fa3
 8000e14:	08000fa3 	.word	0x08000fa3
 8000e18:	08000fa3 	.word	0x08000fa3
 8000e1c:	08000fa3 	.word	0x08000fa3
 8000e20:	08000fa3 	.word	0x08000fa3
 8000e24:	08000fa3 	.word	0x08000fa3
 8000e28:	08000fa3 	.word	0x08000fa3
 8000e2c:	08000fa3 	.word	0x08000fa3
 8000e30:	08000fa3 	.word	0x08000fa3
 8000e34:	08000fa3 	.word	0x08000fa3
 8000e38:	08000fa3 	.word	0x08000fa3
 8000e3c:	08000f1d 	.word	0x08000f1d
 8000e40:	08000f41 	.word	0x08000f41
 8000e44:	08000f65 	.word	0x08000f65
		case GET_SECTOR_COUNT: /* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2049      	movs	r0, #73	; 0x49
 8000e4c:	f7ff fd00 	bl	8000850 <send_cmd>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f040 80a9 	bne.w	8000faa <disk_ioctl+0x2da>
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	2110      	movs	r1, #16
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff fc6c 	bl	800073c <rcvr_datablock>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	f000 809f 	beq.w	8000faa <disk_ioctl+0x2da>
				if ((csd[0] >> 6) == 1) { /* SDC ver 2.00 */
 8000e6c:	7b3b      	ldrb	r3, [r7, #12]
 8000e6e:	099b      	lsrs	r3, r3, #6
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d10e      	bne.n	8000e94 <disk_ioctl+0x1c4>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000e76:	7d7b      	ldrb	r3, [r7, #21]
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	7d3b      	ldrb	r3, [r7, #20]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	4413      	add	r3, r2
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	3301      	adds	r3, #1
 8000e88:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000e8a:	8bfb      	ldrh	r3, [r7, #30]
 8000e8c:	029a      	lsls	r2, r3, #10
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	e02e      	b.n	8000ef2 <disk_ioctl+0x222>
				} else { /* MMC or SDC ver 1.XX */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8000e94:	7c7b      	ldrb	r3, [r7, #17]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	7dbb      	ldrb	r3, [r7, #22]
 8000e9e:	09db      	lsrs	r3, r3, #7
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	b2da      	uxtb	r2, r3
							+ ((csd[9] & 3) << 1) + 2;
 8000ea6:	7d7b      	ldrb	r3, [r7, #21]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	f003 0306 	and.w	r3, r3, #6
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	4413      	add	r3, r2
 8000eb4:	b2db      	uxtb	r3, r3
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7)
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8000ebc:	7d3b      	ldrb	r3, [r7, #20]
 8000ebe:	099b      	lsrs	r3, r3, #6
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	7cfb      	ldrb	r3, [r7, #19]
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	4413      	add	r3, r2
 8000ece:	b29a      	uxth	r2, r3
							+ ((WORD) (csd[6] & 3) << 10) + 1;
 8000ed0:	7cbb      	ldrb	r3, [r7, #18]
 8000ed2:	029b      	lsls	r3, r3, #10
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	4413      	add	r3, r2
 8000ede:	b29b      	uxth	r3, r3
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2)
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000ee4:	8bfa      	ldrh	r2, [r7, #30]
 8000ee6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000eea:	3b09      	subs	r3, #9
 8000eec:	409a      	lsls	r2, r3
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000ef8:	e057      	b.n	8000faa <disk_ioctl+0x2da>

		case GET_SECTOR_SIZE: /* Get sectors on the disk (WORD) */
			*(WORD*) buff = 512;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f00:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000f08:	e056      	b.n	8000fb8 <disk_ioctl+0x2e8>

		case CTRL_SYNC: /* Make sure that data has been written */
			if (wait_ready() == 0xFF)
 8000f0a:	f7ff fb95 	bl	8000638 <wait_ready>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2bff      	cmp	r3, #255	; 0xff
 8000f12:	d14c      	bne.n	8000fae <disk_ioctl+0x2de>
				res = RES_OK;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000f1a:	e048      	b.n	8000fae <disk_ioctl+0x2de>

		case MMC_GET_CSD: /* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0 /* READ_CSD */
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	2049      	movs	r0, #73	; 0x49
 8000f20:	f7ff fc96 	bl	8000850 <send_cmd>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d143      	bne.n	8000fb2 <disk_ioctl+0x2e2>
			&& rcvr_datablock(ptr, 16))
 8000f2a:	2110      	movs	r1, #16
 8000f2c:	6a38      	ldr	r0, [r7, #32]
 8000f2e:	f7ff fc05 	bl	800073c <rcvr_datablock>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d03c      	beq.n	8000fb2 <disk_ioctl+0x2e2>
				res = RES_OK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000f3e:	e038      	b.n	8000fb2 <disk_ioctl+0x2e2>

		case MMC_GET_CID: /* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0 /* READ_CID */
 8000f40:	2100      	movs	r1, #0
 8000f42:	204a      	movs	r0, #74	; 0x4a
 8000f44:	f7ff fc84 	bl	8000850 <send_cmd>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d133      	bne.n	8000fb6 <disk_ioctl+0x2e6>
			&& rcvr_datablock(ptr, 16))
 8000f4e:	2110      	movs	r1, #16
 8000f50:	6a38      	ldr	r0, [r7, #32]
 8000f52:	f7ff fbf3 	bl	800073c <rcvr_datablock>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d02c      	beq.n	8000fb6 <disk_ioctl+0x2e6>
				res = RES_OK;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000f62:	e028      	b.n	8000fb6 <disk_ioctl+0x2e6>

		case MMC_GET_OCR: /* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) { /* READ_OCR */
 8000f64:	2100      	movs	r1, #0
 8000f66:	207a      	movs	r0, #122	; 0x7a
 8000f68:	f7ff fc72 	bl	8000850 <send_cmd>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d117      	bne.n	8000fa2 <disk_ioctl+0x2d2>
				for (n = 0; n < 4; n++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f78:	e00b      	b.n	8000f92 <disk_ioctl+0x2c2>
					*ptr++ = rcvr_spi();
 8000f7a:	6a3c      	ldr	r4, [r7, #32]
 8000f7c:	1c63      	adds	r3, r4, #1
 8000f7e:	623b      	str	r3, [r7, #32]
 8000f80:	f7ff fb2e 	bl	80005e0 <rcvr_spi>
 8000f84:	4603      	mov	r3, r0
 8000f86:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000f88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000f92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000f96:	2b03      	cmp	r3, #3
 8000f98:	d9ef      	bls.n	8000f7a <disk_ioctl+0x2aa>
				res = RES_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
 8000fa0:	e00a      	b.n	8000fb8 <disk_ioctl+0x2e8>
//            *ptr = CardType;
//            res = RES_OK;
//            break;

		default:
			res = RES_PARERR;
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000fa8:	e006      	b.n	8000fb8 <disk_ioctl+0x2e8>
			break;
 8000faa:	bf00      	nop
 8000fac:	e004      	b.n	8000fb8 <disk_ioctl+0x2e8>
			break;
 8000fae:	bf00      	nop
 8000fb0:	e002      	b.n	8000fb8 <disk_ioctl+0x2e8>
			break;
 8000fb2:	bf00      	nop
 8000fb4:	e000      	b.n	8000fb8 <disk_ioctl+0x2e8>
			break;
 8000fb6:	bf00      	nop
		}

		DESELECT(); /* CS = H */
 8000fb8:	f7ff faf1 	bl	800059e <DESELECT>
		rcvr_spi(); /* Idle (Release DO) */
 8000fbc:	f7ff fb10 	bl	80005e0 <rcvr_spi>
	}

	return res;
 8000fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	372c      	adds	r7, #44	; 0x2c
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd90      	pop	{r4, r7, pc}
 8000fcc:	20000000 	.word	0x20000000

08000fd0 <disk_timerproc>:
/*-----------------------------------------------------------------------*/
/* Device Timer Interrupt Procedure  (Platform dependent)                */
/*-----------------------------------------------------------------------*/
/* This function must be called in period of 10ms                        */

void disk_timerproc(void) {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
//    BYTE n, s;
	BYTE n;

	n = Timer1; /* 100Hz decrement timer */
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <disk_timerproc+0x44>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
	if (n)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d005      	beq.n	8000fee <disk_timerproc+0x1e>
		Timer1 = --n;
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	71fb      	strb	r3, [r7, #7]
 8000fe8:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <disk_timerproc+0x44>)
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	7013      	strb	r3, [r2, #0]
	n = Timer2;
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <disk_timerproc+0x48>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	71fb      	strb	r3, [r7, #7]
	if (n)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d005      	beq.n	8001006 <disk_timerproc+0x36>
		Timer2 = --n;
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	3b01      	subs	r3, #1
 8000ffe:	71fb      	strb	r3, [r7, #7]
 8001000:	4a05      	ldr	r2, [pc, #20]	; (8001018 <disk_timerproc+0x48>)
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	7013      	strb	r3, [r2, #0]

}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	200000a4 	.word	0x200000a4
 8001018:	200000a5 	.word	0x200000a5

0800101c <sdcard_systick_timerproc>:

volatile unsigned short int sdcard_timer;

void sdcard_systick_timerproc(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	++sdcard_timer;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <sdcard_systick_timerproc+0x2c>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	b29b      	uxth	r3, r3
 8001026:	3301      	adds	r3, #1
 8001028:	b29a      	uxth	r2, r3
 800102a:	4b07      	ldr	r3, [pc, #28]	; (8001048 <sdcard_systick_timerproc+0x2c>)
 800102c:	801a      	strh	r2, [r3, #0]
	if (sdcard_timer >= 10) {
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <sdcard_systick_timerproc+0x2c>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	b29b      	uxth	r3, r3
 8001034:	2b09      	cmp	r3, #9
 8001036:	d904      	bls.n	8001042 <sdcard_systick_timerproc+0x26>
		sdcard_timer = 0;
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <sdcard_systick_timerproc+0x2c>)
 800103a:	2200      	movs	r2, #0
 800103c:	801a      	strh	r2, [r3, #0]
		disk_timerproc();
 800103e:	f7ff ffc7 	bl	8000fd0 <disk_timerproc>
	}
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200005ac 	.word	0x200005ac

0800104c <get_fattime>:
/*---------------------------------------------------------*/
/* This is a real time clock service to be called from     */
/* FatFs module. Any valid time must be returned even if   */
/* the system does not support a real time clock.          */

DWORD get_fattime(void) {
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

	return ((2007UL - 1980) << 25) // Year = 2007
 8001050:	4b02      	ldr	r3, [pc, #8]	; (800105c <get_fattime+0x10>)
			| (11U << 11) // Hour = 11
			| (38U << 5) // Min = 38
			| (0U >> 1) // Sec = 0
	;

}
 8001052:	4618      	mov	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	36c55cc0 	.word	0x36c55cc0

08001060 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3301      	adds	r3, #1
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8001070:	89fb      	ldrh	r3, [r7, #14]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	b21a      	sxth	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b21b      	sxth	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b21b      	sxth	r3, r3
 8001080:	81fb      	strh	r3, [r7, #14]
	return rv;
 8001082:	89fb      	ldrh	r3, [r7, #14]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3303      	adds	r3, #3
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	3202      	adds	r2, #2
 80010a8:	7812      	ldrb	r2, [r2, #0]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	3201      	adds	r2, #1
 80010b6:	7812      	ldrb	r2, [r2, #0]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	021b      	lsls	r3, r3, #8
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	7812      	ldrb	r2, [r2, #0]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	60fb      	str	r3, [r7, #12]
	return rv;
 80010c8:	68fb      	ldr	r3, [r7, #12]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <ld_qword>:

#if FF_FS_EXFAT
static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 80010d6:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	QWORD rv;

	rv = ptr[7];
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3307      	adds	r3, #7
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	f04f 0400 	mov.w	r4, #0
 80010ec:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[6];
 80010f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80010f4:	f04f 0b00 	mov.w	fp, #0
 80010f8:	f04f 0c00 	mov.w	ip, #0
 80010fc:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8001100:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8001104:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	3206      	adds	r2, #6
 800110c:	7812      	ldrb	r2, [r2, #0]
 800110e:	b2d1      	uxtb	r1, r2
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	ea4b 0301 	orr.w	r3, fp, r1
 8001118:	ea4c 0402 	orr.w	r4, ip, r2
 800111c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[5];
 8001120:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001124:	f04f 0b00 	mov.w	fp, #0
 8001128:	f04f 0c00 	mov.w	ip, #0
 800112c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8001130:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8001134:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	3205      	adds	r2, #5
 800113c:	7812      	ldrb	r2, [r2, #0]
 800113e:	b2d1      	uxtb	r1, r2
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	ea4b 0301 	orr.w	r3, fp, r1
 8001148:	ea4c 0402 	orr.w	r4, ip, r2
 800114c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[4];
 8001150:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001154:	f04f 0b00 	mov.w	fp, #0
 8001158:	f04f 0c00 	mov.w	ip, #0
 800115c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8001160:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8001164:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	3204      	adds	r2, #4
 800116c:	7812      	ldrb	r2, [r2, #0]
 800116e:	b2d1      	uxtb	r1, r2
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	ea4b 0301 	orr.w	r3, fp, r1
 8001178:	ea4c 0402 	orr.w	r4, ip, r2
 800117c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[3];
 8001180:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001184:	f04f 0b00 	mov.w	fp, #0
 8001188:	f04f 0c00 	mov.w	ip, #0
 800118c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8001190:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8001194:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	3203      	adds	r2, #3
 800119c:	7812      	ldrb	r2, [r2, #0]
 800119e:	b2d1      	uxtb	r1, r2
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	ea4b 0301 	orr.w	r3, fp, r1
 80011a8:	ea4c 0402 	orr.w	r4, ip, r2
 80011ac:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[2];
 80011b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80011b4:	f04f 0b00 	mov.w	fp, #0
 80011b8:	f04f 0c00 	mov.w	ip, #0
 80011bc:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80011c0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80011c4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	3202      	adds	r2, #2
 80011cc:	7812      	ldrb	r2, [r2, #0]
 80011ce:	b2d1      	uxtb	r1, r2
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	ea4b 0301 	orr.w	r3, fp, r1
 80011d8:	ea4c 0402 	orr.w	r4, ip, r2
 80011dc:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[1];
 80011e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80011e4:	f04f 0b00 	mov.w	fp, #0
 80011e8:	f04f 0c00 	mov.w	ip, #0
 80011ec:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 80011f0:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 80011f4:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	3201      	adds	r2, #1
 80011fc:	7812      	ldrb	r2, [r2, #0]
 80011fe:	b2d1      	uxtb	r1, r2
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	ea4b 0301 	orr.w	r3, fp, r1
 8001208:	ea4c 0402 	orr.w	r4, ip, r2
 800120c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	rv = rv << 8 | ptr[0];
 8001210:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001214:	f04f 0b00 	mov.w	fp, #0
 8001218:	f04f 0c00 	mov.w	ip, #0
 800121c:	ea4f 2c02 	mov.w	ip, r2, lsl #8
 8001220:	ea4c 6c11 	orr.w	ip, ip, r1, lsr #24
 8001224:	ea4f 2b01 	mov.w	fp, r1, lsl #8
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	7812      	ldrb	r2, [r2, #0]
 800122c:	b2d1      	uxtb	r1, r2
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	ea4b 0301 	orr.w	r3, fp, r1
 8001236:	ea4c 0402 	orr.w	r4, ip, r2
 800123a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return rv;
 800123e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
}
 8001242:	4618      	mov	r0, r3
 8001244:	4621      	mov	r1, r4
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800124e:	4770      	bx	lr

08001250 <st_word>:
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	1c5a      	adds	r2, r3, #1
 8001260:	607a      	str	r2, [r7, #4]
 8001262:	887a      	ldrh	r2, [r7, #2]
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	701a      	strb	r2, [r3, #0]
 8001268:	887b      	ldrh	r3, [r7, #2]
 800126a:	0a1b      	lsrs	r3, r3, #8
 800126c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	1c5a      	adds	r2, r3, #1
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	887a      	ldrh	r2, [r7, #2]
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	701a      	strb	r2, [r3, #0]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	1c5a      	adds	r2, r3, #1
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	701a      	strb	r2, [r3, #0]
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	0a1b      	lsrs	r3, r3, #8
 80012a0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	607a      	str	r2, [r7, #4]
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	b2d2      	uxtb	r2, r2
 80012ac:	701a      	strb	r2, [r3, #0]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	1c5a      	adds	r2, r3, #1
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	701a      	strb	r2, [r3, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	0a1b      	lsrs	r3, r3, #8
 80012c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	1c5a      	adds	r2, r3, #1
 80012ca:	607a      	str	r2, [r7, #4]
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	701a      	strb	r2, [r3, #0]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <st_qword>:

#if FF_FS_EXFAT
static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 80012de:	b490      	push	{r4, r7}
 80012e0:	b084      	sub	sp, #16
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	60f8      	str	r0, [r7, #12]
 80012e6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	1c5a      	adds	r2, r3, #1
 80012ee:	60fa      	str	r2, [r7, #12]
 80012f0:	783a      	ldrb	r2, [r7, #0]
 80012f2:	701a      	strb	r2, [r3, #0]
 80012f4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80012f8:	f04f 0300 	mov.w	r3, #0
 80012fc:	f04f 0400 	mov.w	r4, #0
 8001300:	0a0b      	lsrs	r3, r1, #8
 8001302:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001306:	0a14      	lsrs	r4, r2, #8
 8001308:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	60fa      	str	r2, [r7, #12]
 8001312:	783a      	ldrb	r2, [r7, #0]
 8001314:	701a      	strb	r2, [r3, #0]
 8001316:	e9d7 1200 	ldrd	r1, r2, [r7]
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	f04f 0400 	mov.w	r4, #0
 8001322:	0a0b      	lsrs	r3, r1, #8
 8001324:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001328:	0a14      	lsrs	r4, r2, #8
 800132a:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	1c5a      	adds	r2, r3, #1
 8001332:	60fa      	str	r2, [r7, #12]
 8001334:	783a      	ldrb	r2, [r7, #0]
 8001336:	701a      	strb	r2, [r3, #0]
 8001338:	e9d7 1200 	ldrd	r1, r2, [r7]
 800133c:	f04f 0300 	mov.w	r3, #0
 8001340:	f04f 0400 	mov.w	r4, #0
 8001344:	0a0b      	lsrs	r3, r1, #8
 8001346:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800134a:	0a14      	lsrs	r4, r2, #8
 800134c:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	1c5a      	adds	r2, r3, #1
 8001354:	60fa      	str	r2, [r7, #12]
 8001356:	783a      	ldrb	r2, [r7, #0]
 8001358:	701a      	strb	r2, [r3, #0]
 800135a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800135e:	f04f 0300 	mov.w	r3, #0
 8001362:	f04f 0400 	mov.w	r4, #0
 8001366:	0a0b      	lsrs	r3, r1, #8
 8001368:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800136c:	0a14      	lsrs	r4, r2, #8
 800136e:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	1c5a      	adds	r2, r3, #1
 8001376:	60fa      	str	r2, [r7, #12]
 8001378:	783a      	ldrb	r2, [r7, #0]
 800137a:	701a      	strb	r2, [r3, #0]
 800137c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	f04f 0400 	mov.w	r4, #0
 8001388:	0a0b      	lsrs	r3, r1, #8
 800138a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800138e:	0a14      	lsrs	r4, r2, #8
 8001390:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	1c5a      	adds	r2, r3, #1
 8001398:	60fa      	str	r2, [r7, #12]
 800139a:	783a      	ldrb	r2, [r7, #0]
 800139c:	701a      	strb	r2, [r3, #0]
 800139e:	e9d7 1200 	ldrd	r1, r2, [r7]
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	f04f 0400 	mov.w	r4, #0
 80013aa:	0a0b      	lsrs	r3, r1, #8
 80013ac:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80013b0:	0a14      	lsrs	r4, r2, #8
 80013b2:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	60fa      	str	r2, [r7, #12]
 80013bc:	783a      	ldrb	r2, [r7, #0]
 80013be:	701a      	strb	r2, [r3, #0]
 80013c0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80013c4:	f04f 0300 	mov.w	r3, #0
 80013c8:	f04f 0400 	mov.w	r4, #0
 80013cc:	0a0b      	lsrs	r3, r1, #8
 80013ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80013d2:	0a14      	lsrs	r4, r2, #8
 80013d4:	e9c7 3400 	strd	r3, r4, [r7]
	*ptr++ = (BYTE)val;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	60fa      	str	r2, [r7, #12]
 80013de:	783a      	ldrb	r2, [r7, #0]
 80013e0:	701a      	strb	r2, [r3, #0]
}
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc90      	pop	{r4, r7}
 80013ea:	4770      	bx	lr

080013ec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b087      	sub	sp, #28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	613b      	str	r3, [r7, #16]

	if (cnt != 0) {
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00d      	beq.n	8001422 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	1c53      	adds	r3, r2, #1
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	1c59      	adds	r1, r3, #1
 8001410:	6179      	str	r1, [r7, #20]
 8001412:	7812      	ldrb	r2, [r2, #0]
 8001414:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3b01      	subs	r3, #1
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f1      	bne.n	8001406 <mem_cpy+0x1a>
	}
}
 8001422:	bf00      	nop
 8001424:	371c      	adds	r7, #28
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
 800142e:	b480      	push	{r7}
 8001430:	b087      	sub	sp, #28
 8001432:	af00      	add	r7, sp, #0
 8001434:	60f8      	str	r0, [r7, #12]
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	1c5a      	adds	r2, r3, #1
 8001442:	617a      	str	r2, [r7, #20]
 8001444:	68ba      	ldr	r2, [r7, #8]
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3b01      	subs	r3, #1
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f3      	bne.n	800143e <mem_set+0x10>
}
 8001456:	bf00      	nop
 8001458:	371c      	adds	r7, #28
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
 8001462:	b480      	push	{r7}
 8001464:	b089      	sub	sp, #36	; 0x24
 8001466:	af00      	add	r7, sp, #0
 8001468:	60f8      	str	r0, [r7, #12]
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	61fb      	str	r3, [r7, #28]
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	61fa      	str	r2, [r7, #28]
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	4619      	mov	r1, r3
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	61ba      	str	r2, [r7, #24]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	1acb      	subs	r3, r1, r3
 800148e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d002      	beq.n	80014a2 <mem_cmp+0x40>
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0eb      	beq.n	800147a <mem_cmp+0x18>

	return r;
 80014a2:	697b      	ldr	r3, [r7, #20]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3724      	adds	r7, #36	; 0x24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <chk_chr>:


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80014ba:	e002      	b.n	80014c2 <chk_chr+0x12>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3301      	adds	r3, #1
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d005      	beq.n	80014d6 <chk_chr+0x26>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d1f2      	bne.n	80014bc <chk_chr+0xc>
	return *str;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	781b      	ldrb	r3, [r3, #0]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <dbc_1st>:


/* Test if the character is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	71fb      	strb	r3, [r7, #7]
	if (DbcTbl && c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[0]) {
 80014f0:	2281      	movs	r2, #129	; 0x81
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d30f      	bcc.n	8001518 <dbc_1st+0x32>
		if (c <= DbcTbl[1]) return 1;
 80014f8:	229f      	movs	r2, #159	; 0x9f
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d801      	bhi.n	8001504 <dbc_1st+0x1e>
 8001500:	2301      	movs	r3, #1
 8001502:	e00a      	b.n	800151a <dbc_1st+0x34>
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 8001504:	22e0      	movs	r2, #224	; 0xe0
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	4293      	cmp	r3, r2
 800150a:	d305      	bcc.n	8001518 <dbc_1st+0x32>
 800150c:	22fc      	movs	r2, #252	; 0xfc
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	4293      	cmp	r3, r2
 8001512:	d801      	bhi.n	8001518 <dbc_1st+0x32>
 8001514:	2301      	movs	r3, #1
 8001516:	e000      	b.n	800151a <dbc_1st+0x34>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <dbc_2nd>:


/* Test if the character is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	4603      	mov	r3, r0
 800152e:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
	}
#elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
	if (c >= DbcTbl[4]) {
 8001530:	2240      	movs	r2, #64	; 0x40
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	4293      	cmp	r3, r2
 8001536:	d319      	bcc.n	800156c <dbc_2nd+0x46>
		if (c <= DbcTbl[5]) return 1;
 8001538:	227e      	movs	r2, #126	; 0x7e
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	4293      	cmp	r3, r2
 800153e:	d801      	bhi.n	8001544 <dbc_2nd+0x1e>
 8001540:	2301      	movs	r3, #1
 8001542:	e014      	b.n	800156e <dbc_2nd+0x48>
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 8001544:	2280      	movs	r2, #128	; 0x80
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	4293      	cmp	r3, r2
 800154a:	d305      	bcc.n	8001558 <dbc_2nd+0x32>
 800154c:	22fc      	movs	r2, #252	; 0xfc
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	4293      	cmp	r3, r2
 8001552:	d801      	bhi.n	8001558 <dbc_2nd+0x32>
 8001554:	2301      	movs	r3, #1
 8001556:	e00a      	b.n	800156e <dbc_2nd+0x48>
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 8001558:	2200      	movs	r2, #0
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	4293      	cmp	r3, r2
 800155e:	d305      	bcc.n	800156c <dbc_2nd+0x46>
 8001560:	2200      	movs	r2, #0
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	4293      	cmp	r3, r2
 8001566:	d801      	bhi.n	800156c <dbc_2nd+0x46>
 8001568:	2301      	movs	r3, #1
 800156a:	e000      	b.n	800156e <dbc_2nd+0x48>
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
#endif
	return 0;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <tchar2uni>:

/* Get a character from TCHAR string in defined API encodeing */
static DWORD tchar2uni (	/* Returns character in UTF-16 encoding (>=0x10000 on double encoding unit, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
	DWORD uc;
	const TCHAR *p = *str;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	617b      	str	r3, [r7, #20]

#else		/* ANSI/OEM input */
	BYTE b;
	WCHAR wc;

	wc = (BYTE)*p++;			/* Get a byte */
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	1c5a      	adds	r2, r3, #1
 800158c:	617a      	str	r2, [r7, #20]
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	827b      	strh	r3, [r7, #18]
	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 8001592:	8a7b      	ldrh	r3, [r7, #18]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff ffa5 	bl	80014e6 <dbc_1st>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d015      	beq.n	80015ce <tchar2uni+0x54>
		b = (BYTE)*p++;			/* Get 2nd byte */
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	1c5a      	adds	r2, r3, #1
 80015a6:	617a      	str	r2, [r7, #20]
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	747b      	strb	r3, [r7, #17]
		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
 80015ac:	7c7b      	ldrb	r3, [r7, #17]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff ffb9 	bl	8001526 <dbc_2nd>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d102      	bne.n	80015c0 <tchar2uni+0x46>
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295
 80015be:	e01d      	b.n	80015fc <tchar2uni+0x82>
		wc = (wc << 8) + b;		/* Make a DBC */
 80015c0:	8a7b      	ldrh	r3, [r7, #18]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	7c7b      	ldrb	r3, [r7, #17]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	4413      	add	r3, r2
 80015cc:	827b      	strh	r3, [r7, #18]
	}
	if (wc != 0) {
 80015ce:	8a7b      	ldrh	r3, [r7, #18]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00d      	beq.n	80015f0 <tchar2uni+0x76>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 80015d4:	8a7b      	ldrh	r3, [r7, #18]
 80015d6:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80015da:	4618      	mov	r0, r3
 80015dc:	f004 ffc4 	bl	8006568 <ff_oem2uni>
 80015e0:	4603      	mov	r3, r0
 80015e2:	827b      	strh	r3, [r7, #18]
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 80015e4:	8a7b      	ldrh	r3, [r7, #18]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d102      	bne.n	80015f0 <tchar2uni+0x76>
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
 80015ee:	e005      	b.n	80015fc <tchar2uni+0x82>
	}
	uc = wc;
 80015f0:	8a7b      	ldrh	r3, [r7, #18]
 80015f2:	60fb      	str	r3, [r7, #12]

#endif
	*str = p;	/* Next read pointer */
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	601a      	str	r2, [r3, #0]
	return uc;
 80015fa:	68fb      	ldr	r3, [r7, #12]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <put_utf>:
static BYTE put_utf (	/* Returns number of encoding units written (0:buffer overflow or wrong encoding) */
	DWORD chr,	/* UTF-16 encoded character (Double encoding unit char if >=0x10000) */
	TCHAR* buf,	/* Output buffer */
	UINT szb	/* Size of the buffer */
)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
	return 1;

#else						/* ANSI/OEM output */
	WCHAR wc;

	wc = ff_uni2oem(chr, CODEPAGE);
 8001610:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f004 ff4b 	bl	80064b0 <ff_uni2oem>
 800161a:	4603      	mov	r3, r0
 800161c:	82fb      	strh	r3, [r7, #22]
	if (wc >= 0x100) {	/* Is this a DBC? */
 800161e:	8afb      	ldrh	r3, [r7, #22]
 8001620:	2bff      	cmp	r3, #255	; 0xff
 8001622:	d914      	bls.n	800164e <put_utf+0x4a>
		if (szb < 2) return 0;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d801      	bhi.n	800162e <put_utf+0x2a>
 800162a:	2300      	movs	r3, #0
 800162c:	e01e      	b.n	800166c <put_utf+0x68>
		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
 800162e:	8afb      	ldrh	r3, [r7, #22]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	b299      	uxth	r1, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	1c5a      	adds	r2, r3, #1
 8001638:	60ba      	str	r2, [r7, #8]
 800163a:	b2ca      	uxtb	r2, r1
 800163c:	701a      	strb	r2, [r3, #0]
		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	60ba      	str	r2, [r7, #8]
 8001644:	8afa      	ldrh	r2, [r7, #22]
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	701a      	strb	r2, [r3, #0]
		return 2;
 800164a:	2302      	movs	r3, #2
 800164c:	e00e      	b.n	800166c <put_utf+0x68>
	}
	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
 800164e:	8afb      	ldrh	r3, [r7, #22]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <put_utf+0x56>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <put_utf+0x5a>
 800165a:	2300      	movs	r3, #0
 800165c:	e006      	b.n	800166c <put_utf+0x68>
	*buf++ = (TCHAR)wc;					/* Store the character */
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	1c5a      	adds	r2, r3, #1
 8001662:	60ba      	str	r2, [r7, #8]
 8001664:	8afa      	ldrh	r2, [r7, #22]
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	701a      	strb	r2, [r3, #0]
	return 1;
 800166a:	2301      	movs	r3, #1
#endif
}
 800166c:	4618      	mov	r0, r3
 800166e:	3718      	adds	r7, #24
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 800167c:	2300      	movs	r3, #0
 800167e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty */
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	78db      	ldrb	r3, [r3, #3]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d02c      	beq.n	80016e2 <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	7858      	ldrb	r0, [r3, #1]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001696:	2301      	movs	r3, #1
 8001698:	f7ff fa96 	bl	8000bc8 <disk_write>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d11d      	bne.n	80016de <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	70da      	strb	r2, [r3, #3]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b0:	1ad2      	subs	r2, r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d213      	bcs.n	80016e2 <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	789b      	ldrb	r3, [r3, #2]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d10f      	bne.n	80016e2 <sync_window+0x6e>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	7858      	ldrb	r0, [r3, #1]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	441a      	add	r2, r3
 80016d6:	2301      	movs	r3, #1
 80016d8:	f7ff fa76 	bl	8000bc8 <disk_write>
 80016dc:	e001      	b.n	80016e2 <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 80016de:	2301      	movs	r3, #1
 80016e0:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d01b      	beq.n	800173c <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ffb5 	bl	8001674 <sync_window>
 800170a:	4603      	mov	r3, r0
 800170c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d113      	bne.n	800173c <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7858      	ldrb	r0, [r3, #1]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 800171e:	2301      	movs	r3, #1
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	f7ff f9e7 	bl	8000af4 <disk_read>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d004      	beq.n	8001736 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
 800172c:	f04f 33ff 	mov.w	r3, #4294967295
 8001730:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8001732:	2301      	movs	r3, #1
 8001734:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	649a      	str	r2, [r3, #72]	; 0x48
		}
	}
	return res;
 800173c:	7bfb      	ldrb	r3, [r7, #15]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff ff8f 	bl	8001674 <sync_window>
 8001756:	4603      	mov	r3, r0
 8001758:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d158      	bne.n	8001812 <sync_fs+0xca>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b03      	cmp	r3, #3
 8001766:	d148      	bne.n	80017fa <sync_fs+0xb2>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	791b      	ldrb	r3, [r3, #4]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d144      	bne.n	80017fa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, sizeof fs->win);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	334c      	adds	r3, #76	; 0x4c
 8001774:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fe57 	bl	800142e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	334c      	adds	r3, #76	; 0x4c
 8001784:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8001788:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fd5f 	bl	8001250 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	334c      	adds	r3, #76	; 0x4c
 8001796:	4921      	ldr	r1, [pc, #132]	; (800181c <sync_fs+0xd4>)
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff fd74 	bl	8001286 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	334c      	adds	r3, #76	; 0x4c
 80017a2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80017a6:	491e      	ldr	r1, [pc, #120]	; (8001820 <sync_fs+0xd8>)
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fd6c 	bl	8001286 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	334c      	adds	r3, #76	; 0x4c
 80017b2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	699b      	ldr	r3, [r3, #24]
 80017ba:	4619      	mov	r1, r3
 80017bc:	4610      	mov	r0, r2
 80017be:	f7ff fd62 	bl	8001286 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	334c      	adds	r3, #76	; 0x4c
 80017c6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	4619      	mov	r1, r3
 80017d0:	4610      	mov	r0, r2
 80017d2:	f7ff fd58 	bl	8001286 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	649a      	str	r2, [r3, #72]	; 0x48
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	7858      	ldrb	r0, [r3, #1]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80017ee:	2301      	movs	r3, #1
 80017f0:	f7ff f9ea 	bl	8000bc8 <disk_write>
			fs->fsi_flag = 0;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	785b      	ldrb	r3, [r3, #1]
 80017fe:	2200      	movs	r2, #0
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fa64 	bl	8000cd0 <disk_ioctl>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <sync_fs+0xca>
 800180e:	2301      	movs	r3, #1
 8001810:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8001812:	7bfb      	ldrb	r3, [r7, #15]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	41615252 	.word	0x41615252
 8001820:	61417272 	.word	0x61417272

08001824 <clst2sect>:

static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	3b02      	subs	r3, #2
 8001832:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001838:	3b02      	subs	r3, #2
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d301      	bcc.n	8001844 <clst2sect+0x20>
 8001840:	2300      	movs	r3, #0
 8001842:	e008      	b.n	8001856 <clst2sect+0x32>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	895b      	ldrh	r3, [r3, #10]
 800184c:	4619      	mov	r1, r3
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	fb03 f301 	mul.w	r3, r3, r1
 8001854:	4413      	add	r3, r2
}
 8001856:	4618      	mov	r0, r3
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d904      	bls.n	8001884 <get_fat+0x20>
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	429a      	cmp	r2, r3
 8001882:	d302      	bcc.n	800188a <get_fat+0x26>
		val = 1;	/* Internal error */
 8001884:	2301      	movs	r3, #1
 8001886:	61fb      	str	r3, [r7, #28]
 8001888:	e10b      	b.n	8001aa2 <get_fat+0x23e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
 800188e:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	3b01      	subs	r3, #1
 8001896:	2b03      	cmp	r3, #3
 8001898:	f200 80f7 	bhi.w	8001a8a <get_fat+0x226>
 800189c:	a201      	add	r2, pc, #4	; (adr r2, 80018a4 <get_fat+0x40>)
 800189e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a2:	bf00      	nop
 80018a4:	080018b5 	.word	0x080018b5
 80018a8:	0800193d 	.word	0x0800193d
 80018ac:	08001973 	.word	0x08001973
 80018b0:	080019ad 	.word	0x080019ad
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	085b      	lsrs	r3, r3, #1
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	4413      	add	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	0a5b      	lsrs	r3, r3, #9
 80018ca:	4413      	add	r3, r2
 80018cc:	4619      	mov	r1, r3
 80018ce:	69b8      	ldr	r0, [r7, #24]
 80018d0:	f7ff ff0c 	bl	80016ec <move_window>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f040 80da 	bne.w	8001a90 <get_fat+0x22c>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	1c5a      	adds	r2, r3, #1
 80018e0:	60fa      	str	r2, [r7, #12]
 80018e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4413      	add	r3, r2
 80018ea:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80018ee:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	0a5b      	lsrs	r3, r3, #9
 80018f8:	4413      	add	r3, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	69b8      	ldr	r0, [r7, #24]
 80018fe:	f7ff fef5 	bl	80016ec <move_window>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	f040 80c5 	bne.w	8001a94 <get_fat+0x230>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4413      	add	r3, r2
 8001914:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001918:	021b      	lsls	r3, r3, #8
 800191a:	461a      	mov	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	4313      	orrs	r3, r2
 8001920:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b00      	cmp	r3, #0
 800192a:	d002      	beq.n	8001932 <get_fat+0xce>
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	091b      	lsrs	r3, r3, #4
 8001930:	e002      	b.n	8001938 <get_fat+0xd4>
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001938:	61fb      	str	r3, [r7, #28]
			break;
 800193a:	e0b2      	b.n	8001aa2 <get_fat+0x23e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	0a1b      	lsrs	r3, r3, #8
 8001944:	4413      	add	r3, r2
 8001946:	4619      	mov	r1, r3
 8001948:	69b8      	ldr	r0, [r7, #24]
 800194a:	f7ff fecf 	bl	80016ec <move_window>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	f040 80a1 	bne.w	8001a98 <get_fat+0x234>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8001964:	4413      	add	r3, r2
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fb7a 	bl	8001060 <ld_word>
 800196c:	4603      	mov	r3, r0
 800196e:	61fb      	str	r3, [r7, #28]
			break;
 8001970:	e097      	b.n	8001aa2 <get_fat+0x23e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	09db      	lsrs	r3, r3, #7
 800197a:	4413      	add	r3, r2
 800197c:	4619      	mov	r1, r3
 800197e:	69b8      	ldr	r0, [r7, #24]
 8001980:	f7ff feb4 	bl	80016ec <move_window>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	f040 8088 	bne.w	8001a9c <get_fat+0x238>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800199a:	4413      	add	r3, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fb77 	bl	8001090 <ld_dword>
 80019a2:	4603      	mov	r3, r0
 80019a4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80019a8:	61fb      	str	r3, [r7, #28]
			break;
 80019aa:	e07a      	b.n	8001aa2 <get_fat+0x23e>
#if FF_FS_EXFAT
		case FS_EXFAT :
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80019b2:	4323      	orrs	r3, r4
 80019b4:	d003      	beq.n	80019be <get_fat+0x15a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d103      	bne.n	80019c6 <get_fat+0x162>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	79db      	ldrb	r3, [r3, #7]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d161      	bne.n	8001a8a <get_fat+0x226>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80019d6:	f113 31ff 	adds.w	r1, r3, #4294967295
 80019da:	f144 32ff 	adc.w	r2, r4, #4294967295
 80019de:	f04f 0300 	mov.w	r3, #0
 80019e2:	f04f 0400 	mov.w	r4, #0
 80019e6:	0a4b      	lsrs	r3, r1, #9
 80019e8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80019ec:	0a54      	lsrs	r4, r2, #9
 80019ee:	461a      	mov	r2, r3
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	895b      	ldrh	r3, [r3, #10]
 80019f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f8:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	79db      	ldrb	r3, [r3, #7]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d10e      	bne.n	8001a20 <get_fat+0x1bc>
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d80a      	bhi.n	8001a20 <get_fat+0x1bc>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d002      	beq.n	8001a18 <get_fat+0x1b4>
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	3301      	adds	r3, #1
 8001a16:	e001      	b.n	8001a1c <get_fat+0x1b8>
 8001a18:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001a1c:	61fb      	str	r3, [r7, #28]
					break;
 8001a1e:	e040      	b.n	8001aa2 <get_fat+0x23e>
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	79db      	ldrb	r3, [r3, #7]
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d108      	bne.n	8001a3a <get_fat+0x1d6>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d203      	bcs.n	8001a3a <get_fat+0x1d6>
					val = clst + 1; 	/* Generate the value */
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	3301      	adds	r3, #1
 8001a36:	61fb      	str	r3, [r7, #28]
					break;
 8001a38:	e033      	b.n	8001aa2 <get_fat+0x23e>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	79db      	ldrb	r3, [r3, #7]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d023      	beq.n	8001a8a <get_fat+0x226>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <get_fat+0x1ee>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8001a4a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8001a4e:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8001a50:	e027      	b.n	8001aa2 <get_fat+0x23e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	09db      	lsrs	r3, r3, #7
 8001a5a:	4413      	add	r3, r2
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	69b8      	ldr	r0, [r7, #24]
 8001a60:	f7ff fe44 	bl	80016ec <move_window>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d11a      	bne.n	8001aa0 <get_fat+0x23c>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001a78:	4413      	add	r3, r2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fb08 	bl	8001090 <ld_dword>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a86:	61fb      	str	r3, [r7, #28]
					break;
 8001a88:	e00b      	b.n	8001aa2 <get_fat+0x23e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	e008      	b.n	8001aa2 <get_fat+0x23e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001a90:	bf00      	nop
 8001a92:	e006      	b.n	8001aa2 <get_fat+0x23e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8001a94:	bf00      	nop
 8001a96:	e004      	b.n	8001aa2 <get_fat+0x23e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8001a98:	bf00      	nop
 8001a9a:	e002      	b.n	8001aa2 <get_fat+0x23e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001a9c:	bf00      	nop
 8001a9e:	e000      	b.n	8001aa2 <get_fat+0x23e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8001aa0:	bf00      	nop
		}
	}

	return val;
 8001aa2:	69fb      	ldr	r3, [r7, #28]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3724      	adds	r7, #36	; 0x24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd90      	pop	{r4, r7, pc}

08001aac <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b089      	sub	sp, #36	; 0x24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	f240 80e2 	bls.w	8001c88 <put_fat+0x1dc>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	f080 80dc 	bcs.w	8001c88 <put_fat+0x1dc>
		switch (fs->fs_type) {
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	2b03      	cmp	r3, #3
 8001ad8:	f200 80d6 	bhi.w	8001c88 <put_fat+0x1dc>
 8001adc:	a201      	add	r2, pc, #4	; (adr r2, 8001ae4 <put_fat+0x38>)
 8001ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae2:	bf00      	nop
 8001ae4:	08001af5 	.word	0x08001af5
 8001ae8:	08001bd1 	.word	0x08001bd1
 8001aec:	08001c11 	.word	0x08001c11
 8001af0:	08001c11 	.word	0x08001c11
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	61bb      	str	r3, [r7, #24]
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	085b      	lsrs	r3, r3, #1
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4413      	add	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	0a5b      	lsrs	r3, r3, #9
 8001b0a:	4413      	add	r3, r2
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f7ff fdec 	bl	80016ec <move_window>
 8001b14:	4603      	mov	r3, r0
 8001b16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001b18:	7ffb      	ldrb	r3, [r7, #31]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f040 80ad 	bne.w	8001c7a <put_fat+0x1ce>
			p = fs->win + bc++ % SS(fs);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	1c59      	adds	r1, r3, #1
 8001b2a:	61b9      	str	r1, [r7, #24]
 8001b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b30:	4413      	add	r3, r2
 8001b32:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00d      	beq.n	8001b5a <put_fat+0xae>
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	b25b      	sxtb	r3, r3
 8001b44:	f003 030f 	and.w	r3, r3, #15
 8001b48:	b25a      	sxtb	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	011b      	lsls	r3, r3, #4
 8001b50:	b25b      	sxtb	r3, r3
 8001b52:	4313      	orrs	r3, r2
 8001b54:	b25b      	sxtb	r3, r3
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	e001      	b.n	8001b5e <put_fat+0xb2>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2201      	movs	r2, #1
 8001b66:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	0a5b      	lsrs	r3, r3, #9
 8001b70:	4413      	add	r3, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f7ff fdb9 	bl	80016ec <move_window>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001b7e:	7ffb      	ldrb	r3, [r7, #31]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d17c      	bne.n	8001c7e <put_fat+0x1d2>
			p = fs->win + bc % SS(fs);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b90:	4413      	add	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <put_fat+0xfa>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	e00e      	b.n	8001bc4 <put_fat+0x118>
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	b25b      	sxtb	r3, r3
 8001bac:	f023 030f 	bic.w	r3, r3, #15
 8001bb0:	b25a      	sxtb	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	0a1b      	lsrs	r3, r3, #8
 8001bb6:	b25b      	sxtb	r3, r3
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	b25b      	sxtb	r3, r3
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	b25b      	sxtb	r3, r3
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	70da      	strb	r2, [r3, #3]
			break;
 8001bce:	e05b      	b.n	8001c88 <put_fat+0x1dc>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	0a1b      	lsrs	r3, r3, #8
 8001bd8:	4413      	add	r3, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f7ff fd85 	bl	80016ec <move_window>
 8001be2:	4603      	mov	r3, r0
 8001be4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001be6:	7ffb      	ldrb	r3, [r7, #31]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d14a      	bne.n	8001c82 <put_fat+0x1d6>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8001bfa:	4413      	add	r3, r2
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	b292      	uxth	r2, r2
 8001c00:	4611      	mov	r1, r2
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fb24 	bl	8001250 <st_word>
			fs->wflag = 1;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	70da      	strb	r2, [r3, #3]
			break;
 8001c0e:	e03b      	b.n	8001c88 <put_fat+0x1dc>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	09db      	lsrs	r3, r3, #7
 8001c18:	4413      	add	r3, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f7ff fd65 	bl	80016ec <move_window>
 8001c22:	4603      	mov	r3, r0
 8001c24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8001c26:	7ffb      	ldrb	r3, [r7, #31]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d12c      	bne.n	8001c86 <put_fat+0x1da>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d012      	beq.n	8001c5a <put_fat+0x1ae>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001c48:	4413      	add	r3, r2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fa20 	bl	8001090 <ld_dword>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001c56:	4323      	orrs	r3, r4
 8001c58:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8001c68:	4413      	add	r3, r2
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fb0a 	bl	8001286 <st_dword>
			fs->wflag = 1;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2201      	movs	r2, #1
 8001c76:	70da      	strb	r2, [r3, #3]
			break;
 8001c78:	e006      	b.n	8001c88 <put_fat+0x1dc>
			if (res != FR_OK) break;
 8001c7a:	bf00      	nop
 8001c7c:	e004      	b.n	8001c88 <put_fat+0x1dc>
			if (res != FR_OK) break;
 8001c7e:	bf00      	nop
 8001c80:	e002      	b.n	8001c88 <put_fat+0x1dc>
			if (res != FR_OK) break;
 8001c82:	bf00      	nop
 8001c84:	e000      	b.n	8001c88 <put_fat+0x1dc>
			if (res != FR_OK) break;
 8001c86:	bf00      	nop
		}
	}
	return res;
 8001c88:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3724      	adds	r7, #36	; 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd90      	pop	{r4, r7, pc}
 8001c92:	bf00      	nop

08001c94 <find_bitmap>:
static DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	; 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	3b02      	subs	r3, #2
 8001ca4:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001caa:	3b02      	subs	r3, #2
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d301      	bcc.n	8001cb6 <find_bitmap+0x22>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	61bb      	str	r3, [r7, #24]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	0b1b      	lsrs	r3, r3, #12
 8001cca:	4413      	add	r3, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f7ff fd0c 	bl	80016ec <move_window>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d002      	beq.n	8001ce0 <find_bitmap+0x4c>
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295
 8001cde:	e051      	b.n	8001d84 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	08db      	lsrs	r3, r3, #3
 8001ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ce8:	623b      	str	r3, [r7, #32]
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	4413      	add	r3, r2
 8001d00:	334c      	adds	r3, #76	; 0x4c
 8001d02:	781a      	ldrb	r2, [r3, #0]
 8001d04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d08:	4013      	ands	r3, r2
 8001d0a:	74fb      	strb	r3, [r7, #19]
 8001d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	61fb      	str	r3, [r7, #28]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d20:	3b02      	subs	r3, #2
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d307      	bcc.n	8001d38 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d36:	623b      	str	r3, [r7, #32]
				}
				if (bv == 0) {	/* Is it a free cluster? */
 8001d38:	7cfb      	ldrb	r3, [r7, #19]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d109      	bne.n	8001d52 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	3301      	adds	r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d106      	bne.n	8001d5a <find_bitmap+0xc6>
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	3302      	adds	r3, #2
 8001d50:	e018      	b.n	8001d84 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	61bb      	str	r3, [r7, #24]
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8001d5a:	69fa      	ldr	r2, [r7, #28]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d101      	bne.n	8001d66 <find_bitmap+0xd2>
 8001d62:	2300      	movs	r3, #0
 8001d64:	e00e      	b.n	8001d84 <find_bitmap+0xf0>
			} while (bm != 0);
 8001d66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1c5      	bne.n	8001cfa <find_bitmap+0x66>
			bm = 1;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	3301      	adds	r3, #1
 8001d78:	623b      	str	r3, [r7, #32]
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
 8001d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d80:	d3bb      	bcc.n	8001cfa <find_bitmap+0x66>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 8001d82:	e79e      	b.n	8001cc2 <find_bitmap+0x2e>
	}
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3728      	adds	r7, #40	; 0x28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <change_bitmap>:
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
 8001d98:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;


	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	3b02      	subs	r3, #2
 8001d9e:	60bb      	str	r3, [r7, #8]
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	0b1b      	lsrs	r3, r3, #12
 8001da8:	4413      	add	r3, r2
 8001daa:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	08db      	lsrs	r3, r3, #3
 8001db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001db4:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	1c5a      	adds	r2, r3, #1
 8001dc8:	617a      	str	r2, [r7, #20]
 8001dca:	4619      	mov	r1, r3
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f7ff fc8d 	bl	80016ec <move_window>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <change_bitmap+0x50>
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e03d      	b.n	8001e58 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	4413      	add	r3, r2
 8001de2:	334c      	adds	r3, #76	; 0x4c
 8001de4:	781a      	ldrb	r2, [r3, #0]
 8001de6:	7ffb      	ldrb	r3, [r7, #31]
 8001de8:	4013      	ands	r3, r2
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf14      	ite	ne
 8001df0:	2301      	movne	r3, #1
 8001df2:	2300      	moveq	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	461a      	mov	r2, r3
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d101      	bne.n	8001e02 <change_bitmap+0x76>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e02a      	b.n	8001e58 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	4413      	add	r3, r2
 8001e08:	334c      	adds	r3, #76	; 0x4c
 8001e0a:	781a      	ldrb	r2, [r3, #0]
 8001e0c:	7ffb      	ldrb	r3, [r7, #31]
 8001e0e:	4053      	eors	r3, r2
 8001e10:	b2d9      	uxtb	r1, r3
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	4413      	add	r3, r2
 8001e18:	334c      	adds	r3, #76	; 0x4c
 8001e1a:	460a      	mov	r2, r1
 8001e1c:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2201      	movs	r2, #1
 8001e22:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <change_bitmap+0xa8>
 8001e30:	2300      	movs	r3, #0
 8001e32:	e011      	b.n	8001e58 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 8001e34:	7ffb      	ldrb	r3, [r7, #31]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	77fb      	strb	r3, [r7, #31]
 8001e3a:	7ffb      	ldrb	r3, [r7, #31]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1cd      	bne.n	8001ddc <change_bitmap+0x50>
			bm = 1;
 8001e40:	2301      	movs	r3, #1
 8001e42:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	3301      	adds	r3, #1
 8001e48:	61bb      	str	r3, [r7, #24]
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e50:	d3c4      	bcc.n	8001ddc <change_bitmap+0x50>
		i = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8001e56:	e7b5      	b.n	8001dc4 <change_bitmap+0x38>
	}
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3720      	adds	r7, #32
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <fill_first_frag>:
/*---------------------------------------------*/

static FRESULT fill_first_frag (
	FFOBJID* obj	/* Pointer to the corresponding object */
)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;


	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	79db      	ldrb	r3, [r3, #7]
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d121      	bne.n	8001eb4 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	617b      	str	r3, [r7, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	e014      	b.n	8001ea8 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	3301      	adds	r3, #1
 8001e86:	461a      	mov	r2, r3
 8001e88:	6979      	ldr	r1, [r7, #20]
 8001e8a:	f7ff fe0f 	bl	8001aac <put_fat>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <fill_first_frag+0x3c>
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	e00c      	b.n	8001eb6 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1e7      	bne.n	8001e7e <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <fill_last_frag>:
static FRESULT fill_last_frag (
	FFOBJID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,		/* Last cluster of the fragment */
	DWORD term		/* Value to set the last FAT entry */
)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
	FRESULT res;


	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 8001eca:	e020      	b.n	8001f0e <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6818      	ldr	r0, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	68ba      	ldr	r2, [r7, #8]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	1c59      	adds	r1, r3, #1
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d905      	bls.n	8001eee <fill_last_frag+0x30>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	3302      	adds	r3, #2
 8001eec:	e000      	b.n	8001ef0 <fill_last_frag+0x32>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	f7ff fddb 	bl	8001aac <put_fat>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8001efa:	7dfb      	ldrb	r3, [r7, #23]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <fill_last_frag+0x46>
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
 8001f02:	e009      	b.n	8001f18 <fill_last_frag+0x5a>
		obj->n_frag--;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	1e5a      	subs	r2, r3, #1
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1da      	bne.n	8001ecc <fill_last_frag+0xe>
	}
	return FR_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	; 0x28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	61bb      	str	r3, [r7, #24]
#if FF_FS_EXFAT || FF_USE_TRIM
	DWORD scl = clst, ecl = clst;
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	623b      	str	r3, [r7, #32]
#endif
#if FF_USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d904      	bls.n	8001f4e <remove_chain+0x2e>
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d301      	bcc.n	8001f52 <remove_chain+0x32>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e0c4      	b.n	80020dc <remove_chain+0x1bc>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d014      	beq.n	8001f82 <remove_chain+0x62>
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d103      	bne.n	8001f68 <remove_chain+0x48>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	79db      	ldrb	r3, [r3, #7]
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d00c      	beq.n	8001f82 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8001f68:	f04f 32ff 	mov.w	r2, #4294967295
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	69b8      	ldr	r0, [r7, #24]
 8001f70:	f7ff fd9c 	bl	8001aac <put_fat>
 8001f74:	4603      	mov	r3, r0
 8001f76:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8001f78:	7ffb      	ldrb	r3, [r7, #31]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <remove_chain+0x62>
 8001f7e:	7ffb      	ldrb	r3, [r7, #31]
 8001f80:	e0ac      	b.n	80020dc <remove_chain+0x1bc>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8001f82:	68b9      	ldr	r1, [r7, #8]
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f7ff fc6d 	bl	8001864 <get_fat>
 8001f8a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d055      	beq.n	800203e <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <remove_chain+0x7c>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e09f      	b.n	80020dc <remove_chain+0x1bc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa2:	d101      	bne.n	8001fa8 <remove_chain+0x88>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e099      	b.n	80020dc <remove_chain+0x1bc>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d00b      	beq.n	8001fc8 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	68b9      	ldr	r1, [r7, #8]
 8001fb4:	69b8      	ldr	r0, [r7, #24]
 8001fb6:	f7ff fd79 	bl	8001aac <put_fat>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8001fbe:	7ffb      	ldrb	r3, [r7, #31]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <remove_chain+0xa8>
 8001fc4:	7ffb      	ldrb	r3, [r7, #31]
 8001fc6:	e089      	b.n	80020dc <remove_chain+0x1bc>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	699a      	ldr	r2, [r3, #24]
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd0:	3b02      	subs	r3, #2
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d20b      	bcs.n	8001fee <remove_chain+0xce>
			fs->free_clst++;
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	1c5a      	adds	r2, r3, #1
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	791b      	ldrb	r3, [r3, #4]
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	711a      	strb	r2, [r3, #4]
		}
#if FF_FS_EXFAT || FF_USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8001fee:	6a3b      	ldr	r3, [r7, #32]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d102      	bne.n	8001ffe <remove_chain+0xde>
			ecl = nxt;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	623b      	str	r3, [r7, #32]
 8001ffc:	e017      	b.n	800202e <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b04      	cmp	r3, #4
 8002004:	d10f      	bne.n	8002026 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8002006:	6a3a      	ldr	r2, [r7, #32]
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	2300      	movs	r3, #0
 8002010:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002012:	69b8      	ldr	r0, [r7, #24]
 8002014:	f7ff feba 	bl	8001d8c <change_bitmap>
 8002018:	4603      	mov	r3, r0
 800201a:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800201c:	7ffb      	ldrb	r3, [r7, #31]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <remove_chain+0x106>
 8002022:	7ffb      	ldrb	r3, [r7, #31]
 8002024:	e05a      	b.n	80020dc <remove_chain+0x1bc>
#if FF_USE_TRIM
			rt[0] = clst2sect(fs, scl);					/* Start of data area freed */
			rt[1] = clst2sect(fs, ecl) + fs->csize - 1;	/* End of data area freed */
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform device the data in the block is no longer needed */
#endif
			scl = ecl = nxt;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	623b      	str	r3, [r7, #32]
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	429a      	cmp	r2, r3
 800203a:	d3a2      	bcc.n	8001f82 <remove_chain+0x62>
 800203c:	e000      	b.n	8002040 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800203e:	bf00      	nop

#if FF_FS_EXFAT
	/* Some post processes for chain status */
	if (fs->fs_type == FS_EXFAT) {
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b04      	cmp	r3, #4
 8002046:	d148      	bne.n	80020da <remove_chain+0x1ba>
		if (pclst == 0) {	/* Has the entire chain been removed? */
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d103      	bne.n	8002056 <remove_chain+0x136>
			obj->stat = 0;		/* Change the chain status 'initial' */
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	71da      	strb	r2, [r3, #7]
 8002054:	e041      	b.n	80020da <remove_chain+0x1ba>
		} else {
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	79db      	ldrb	r3, [r3, #7]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d129      	bne.n	80020b2 <remove_chain+0x192>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 8002064:	e017      	b.n	8002096 <remove_chain+0x176>
					nxt = get_fat(obj, clst);
 8002066:	68b9      	ldr	r1, [r7, #8]
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f7ff fbfb 	bl	8001864 <get_fat>
 800206e:	6178      	str	r0, [r7, #20]
					if (nxt < 2) return FR_INT_ERR;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d801      	bhi.n	800207a <remove_chain+0x15a>
 8002076:	2302      	movs	r3, #2
 8002078:	e030      	b.n	80020dc <remove_chain+0x1bc>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002080:	d101      	bne.n	8002086 <remove_chain+0x166>
 8002082:	2301      	movs	r3, #1
 8002084:	e02a      	b.n	80020dc <remove_chain+0x1bc>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	3301      	adds	r3, #1
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	429a      	cmp	r2, r3
 800208e:	d107      	bne.n	80020a0 <remove_chain+0x180>
					clst++;
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	3301      	adds	r3, #1
 8002094:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	429a      	cmp	r2, r3
 800209c:	d1e3      	bne.n	8002066 <remove_chain+0x146>
 800209e:	e000      	b.n	80020a2 <remove_chain+0x182>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 80020a0:	bf00      	nop
				}
				if (clst == pclst) {	/* Has the chain got contiguous again? */
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d117      	bne.n	80020da <remove_chain+0x1ba>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2202      	movs	r2, #2
 80020ae:	71da      	strb	r2, [r3, #7]
 80020b0:	e013      	b.n	80020da <remove_chain+0x1ba>
				}
			} else {
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	79db      	ldrb	r3, [r3, #7]
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	d10f      	bne.n	80020da <remove_chain+0x1ba>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d30a      	bcc.n	80020da <remove_chain+0x1ba>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	4413      	add	r3, r2
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d802      	bhi.n	80020da <remove_chain+0x1ba>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2202      	movs	r2, #2
 80020d8:	71da      	strb	r2, [r3, #7]
				}
			}
		}
	}
#endif
	return FR_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3728      	adds	r7, #40	; 0x28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b088      	sub	sp, #32
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10d      	bne.n	8002116 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d004      	beq.n	8002110 <create_chain+0x2c>
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	429a      	cmp	r2, r3
 800210e:	d31b      	bcc.n	8002148 <create_chain+0x64>
 8002110:	2301      	movs	r3, #1
 8002112:	61bb      	str	r3, [r7, #24]
 8002114:	e018      	b.n	8002148 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8002116:	6839      	ldr	r1, [r7, #0]
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff fba3 	bl	8001864 <get_fat>
 800211e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d801      	bhi.n	800212a <create_chain+0x46>
 8002126:	2301      	movs	r3, #1
 8002128:	e113      	b.n	8002352 <create_chain+0x26e>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002130:	d101      	bne.n	8002136 <create_chain+0x52>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	e10d      	b.n	8002352 <create_chain+0x26e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	429a      	cmp	r2, r3
 800213e:	d201      	bcs.n	8002144 <create_chain+0x60>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	e106      	b.n	8002352 <create_chain+0x26e>
		scl = clst;							/* Cluster to start to find */
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <create_chain+0x70>
 8002150:	2300      	movs	r3, #0
 8002152:	e0fe      	b.n	8002352 <create_chain+0x26e>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b04      	cmp	r3, #4
 800215a:	d165      	bne.n	8002228 <create_chain+0x144>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800215c:	2201      	movs	r2, #1
 800215e:	69b9      	ldr	r1, [r7, #24]
 8002160:	6938      	ldr	r0, [r7, #16]
 8002162:	f7ff fd97 	bl	8001c94 <find_bitmap>
 8002166:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <create_chain+0x92>
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002174:	d101      	bne.n	800217a <create_chain+0x96>
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	e0eb      	b.n	8002352 <create_chain+0x26e>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800217a:	2301      	movs	r3, #1
 800217c:	2201      	movs	r2, #1
 800217e:	69f9      	ldr	r1, [r7, #28]
 8002180:	6938      	ldr	r0, [r7, #16]
 8002182:	f7ff fe03 	bl	8001d8c <change_bitmap>
 8002186:	4603      	mov	r3, r0
 8002188:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800218a:	7dfb      	ldrb	r3, [r7, #23]
 800218c:	2b02      	cmp	r3, #2
 800218e:	d101      	bne.n	8002194 <create_chain+0xb0>
 8002190:	2301      	movs	r3, #1
 8002192:	e0de      	b.n	8002352 <create_chain+0x26e>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8002194:	7dfb      	ldrb	r3, [r7, #23]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d102      	bne.n	80021a0 <create_chain+0xbc>
 800219a:	f04f 33ff 	mov.w	r3, #4294967295
 800219e:	e0d8      	b.n	8002352 <create_chain+0x26e>
		if (clst == 0) {							/* Is it a new chain? */
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d103      	bne.n	80021ae <create_chain+0xca>
			obj->stat = 2;							/* Set status 'contiguous' */
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2202      	movs	r2, #2
 80021aa:	71da      	strb	r2, [r3, #7]
 80021ac:	e011      	b.n	80021d2 <create_chain+0xee>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	79db      	ldrb	r3, [r3, #7]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d10d      	bne.n	80021d2 <create_chain+0xee>
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	3301      	adds	r3, #1
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d008      	beq.n	80021d2 <create_chain+0xee>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	1ad2      	subs	r2, r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2203      	movs	r2, #3
 80021d0:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	79db      	ldrb	r3, [r3, #7]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	f000 8098 	beq.w	800230c <create_chain+0x228>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	3301      	adds	r3, #1
 80021e0:	69fa      	ldr	r2, [r7, #28]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d10b      	bne.n	80021fe <create_chain+0x11a>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <create_chain+0x112>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	3301      	adds	r3, #1
 80021f4:	e000      	b.n	80021f8 <create_chain+0x114>
 80021f6:	2302      	movs	r3, #2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	61d3      	str	r3, [r2, #28]
 80021fc:	e086      	b.n	800230c <create_chain+0x228>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d102      	bne.n	800220c <create_chain+0x128>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800220c:	69fa      	ldr	r2, [r7, #28]
 800220e:	6839      	ldr	r1, [r7, #0]
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff fe54 	bl	8001ebe <fill_last_frag>
 8002216:	4603      	mov	r3, r0
 8002218:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800221a:	7dfb      	ldrb	r3, [r7, #23]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d175      	bne.n	800230c <create_chain+0x228>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	61da      	str	r2, [r3, #28]
 8002226:	e071      	b.n	800230c <create_chain+0x228>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d129      	bne.n	8002288 <create_chain+0x1a4>
			ncl = scl + 1;						/* Test if next cluster is free */
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	3301      	adds	r3, #1
 8002238:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223e:	69fa      	ldr	r2, [r7, #28]
 8002240:	429a      	cmp	r2, r3
 8002242:	d301      	bcc.n	8002248 <create_chain+0x164>
 8002244:	2302      	movs	r3, #2
 8002246:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8002248:	69f9      	ldr	r1, [r7, #28]
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff fb0a 	bl	8001864 <get_fat>
 8002250:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d003      	beq.n	8002260 <create_chain+0x17c>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225e:	d101      	bne.n	8002264 <create_chain+0x180>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	e076      	b.n	8002352 <create_chain+0x26e>
			if (cs != 0) {						/* Not free? */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00e      	beq.n	8002288 <create_chain+0x1a4>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d906      	bls.n	8002284 <create_chain+0x1a0>
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	429a      	cmp	r2, r3
 800227e:	d201      	bcs.n	8002284 <create_chain+0x1a0>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d129      	bne.n	80022e2 <create_chain+0x1fe>
			ncl = scl;	/* Start cluster */
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3301      	adds	r3, #1
 8002296:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	69fa      	ldr	r2, [r7, #28]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d307      	bcc.n	80022b2 <create_chain+0x1ce>
					ncl = 2;
 80022a2:	2302      	movs	r3, #2
 80022a4:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d901      	bls.n	80022b2 <create_chain+0x1ce>
 80022ae:	2300      	movs	r3, #0
 80022b0:	e04f      	b.n	8002352 <create_chain+0x26e>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 80022b2:	69f9      	ldr	r1, [r7, #28]
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff fad5 	bl	8001864 <get_fat>
 80022ba:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00e      	beq.n	80022e0 <create_chain+0x1fc>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d003      	beq.n	80022d0 <create_chain+0x1ec>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ce:	d101      	bne.n	80022d4 <create_chain+0x1f0>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	e03e      	b.n	8002352 <create_chain+0x26e>
				if (ncl == scl) return 0;		/* No free cluster found? */
 80022d4:	69fa      	ldr	r2, [r7, #28]
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d1da      	bne.n	8002292 <create_chain+0x1ae>
 80022dc:	2300      	movs	r3, #0
 80022de:	e038      	b.n	8002352 <create_chain+0x26e>
				if (cs == 0) break;				/* Found a free cluster? */
 80022e0:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 80022e2:	f04f 32ff 	mov.w	r2, #4294967295
 80022e6:	69f9      	ldr	r1, [r7, #28]
 80022e8:	6938      	ldr	r0, [r7, #16]
 80022ea:	f7ff fbdf 	bl	8001aac <put_fat>
 80022ee:	4603      	mov	r3, r0
 80022f0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80022f2:	7dfb      	ldrb	r3, [r7, #23]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d109      	bne.n	800230c <create_chain+0x228>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d006      	beq.n	800230c <create_chain+0x228>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 80022fe:	69fa      	ldr	r2, [r7, #28]
 8002300:	6839      	ldr	r1, [r7, #0]
 8002302:	6938      	ldr	r0, [r7, #16]
 8002304:	f7ff fbd2 	bl	8001aac <put_fat>
 8002308:	4603      	mov	r3, r0
 800230a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800230c:	7dfb      	ldrb	r3, [r7, #23]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d116      	bne.n	8002340 <create_chain+0x25c>
		fs->last_clst = ncl;
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	69fa      	ldr	r2, [r7, #28]
 8002316:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	699a      	ldr	r2, [r3, #24]
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002320:	3b02      	subs	r3, #2
 8002322:	429a      	cmp	r2, r3
 8002324:	d804      	bhi.n	8002330 <create_chain+0x24c>
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	1e5a      	subs	r2, r3, #1
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	791b      	ldrb	r3, [r3, #4]
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	b2da      	uxtb	r2, r3
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	711a      	strb	r2, [r3, #4]
 800233e:	e007      	b.n	8002350 <create_chain+0x26c>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8002340:	7dfb      	ldrb	r3, [r7, #23]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d102      	bne.n	800234c <create_chain+0x268>
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
 800234a:	e000      	b.n	800234e <create_chain+0x26a>
 800234c:	2301      	movs	r3, #1
 800234e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8002350:	69fb      	ldr	r3, [r7, #28]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3720      	adds	r7, #32
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b086      	sub	sp, #24
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	6039      	str	r1, [r7, #0]
	DWORD sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7ff f985 	bl	8001674 <sync_window>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <dir_clear+0x1a>
 8002370:	2301      	movs	r3, #1
 8002372:	e07d      	b.n	8002470 <dir_clear+0x116>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 8002374:	6839      	ldr	r1, [r7, #0]
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7ff fa54 	bl	8001824 <clst2sect>
 800237c:	60b8      	str	r0, [r7, #8]
	fs->winsect = sect;				/* Set window to top of the cluster */
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	649a      	str	r2, [r3, #72]	; 0x48
	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	334c      	adds	r3, #76	; 0x4c
 8002388:	f44f 7200 	mov.w	r2, #512	; 0x200
 800238c:	2100      	movs	r1, #0
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff f84d 	bl	800142e <mem_set>
#if FF_USE_LFN == 3		/* Quick table clear by using multi-secter write */
	/* Allocate a temporary buffer */
	for (szb = ((DWORD)fs->csize * SS(fs) >= MAX_MALLOC) ? MAX_MALLOC : fs->csize * SS(fs), ibuf = 0; szb > SS(fs) && (ibuf = ff_memalloc(szb)) == 0; szb /= 2) ;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	895b      	ldrh	r3, [r3, #10]
 8002398:	025b      	lsls	r3, r3, #9
 800239a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800239e:	d203      	bcs.n	80023a8 <dir_clear+0x4e>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	895b      	ldrh	r3, [r3, #10]
 80023a4:	025b      	lsls	r3, r3, #9
 80023a6:	e001      	b.n	80023ac <dir_clear+0x52>
 80023a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	e002      	b.n	80023ba <dir_clear+0x60>
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	085b      	lsrs	r3, r3, #1
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023c0:	d906      	bls.n	80023d0 <dir_clear+0x76>
 80023c2:	6938      	ldr	r0, [r7, #16]
 80023c4:	f004 f85c 	bl	8006480 <ff_memalloc>
 80023c8:	60f8      	str	r0, [r7, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f1      	beq.n	80023b4 <dir_clear+0x5a>
	if (szb > SS(fs)) {		/* Buffer allocated? */
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023d6:	d924      	bls.n	8002422 <dir_clear+0xc8>
		mem_set(ibuf, 0, szb);
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	2100      	movs	r1, #0
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f7ff f826 	bl	800142e <mem_set>
		szb /= SS(fs);		/* Bytes -> Sectors */
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	0a5b      	lsrs	r3, r3, #9
 80023e6:	613b      	str	r3, [r7, #16]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	e003      	b.n	80023f6 <dir_clear+0x9c>
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4413      	add	r3, r2
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	895b      	ldrh	r3, [r3, #10]
 80023fa:	461a      	mov	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	4293      	cmp	r3, r2
 8002400:	d20b      	bcs.n	800241a <dir_clear+0xc0>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	7858      	ldrb	r0, [r3, #1]
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	441a      	add	r2, r3
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	68f9      	ldr	r1, [r7, #12]
 8002410:	f7fe fbda 	bl	8000bc8 <disk_write>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0e9      	beq.n	80023ee <dir_clear+0x94>
		ff_memfree(ibuf);
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f004 f83c 	bl	8006498 <ff_memfree>
 8002420:	e01d      	b.n	800245e <dir_clear+0x104>
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	334c      	adds	r3, #76	; 0x4c
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	2301      	movs	r3, #1
 800242a:	613b      	str	r3, [r7, #16]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	e003      	b.n	800243a <dir_clear+0xe0>
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4413      	add	r3, r2
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	895b      	ldrh	r3, [r3, #10]
 800243e:	461a      	mov	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	4293      	cmp	r3, r2
 8002444:	d20b      	bcs.n	800245e <dir_clear+0x104>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	7858      	ldrb	r0, [r3, #1]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	441a      	add	r2, r3
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	68f9      	ldr	r1, [r7, #12]
 8002454:	f7fe fbb8 	bl	8000bc8 <disk_write>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0e9      	beq.n	8002432 <dir_clear+0xd8>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	895b      	ldrh	r3, [r3, #10]
 8002462:	461a      	mov	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	4293      	cmp	r3, r2
 8002468:	bf14      	ite	ne
 800246a:	2301      	movne	r3, #1
 800246c:	2300      	moveq	r3, #0
 800246e:	b2db      	uxtb	r3, r3
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b04      	cmp	r3, #4
 800248e:	d102      	bne.n	8002496 <dir_sdi+0x1e>
 8002490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002494:	e001      	b.n	800249a <dir_sdi+0x22>
 8002496:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d904      	bls.n	80024aa <dir_sdi+0x32>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	f003 031f 	and.w	r3, r3, #31
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <dir_sdi+0x36>
		return FR_INT_ERR;
 80024aa:	2302      	movs	r3, #2
 80024ac:	e066      	b.n	800257c <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d109      	bne.n	80024d4 <dir_sdi+0x5c>
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d905      	bls.n	80024d4 <dir_sdi+0x5c>
		clst = fs->dirbase;
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024cc:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10c      	bne.n	80024f4 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	095b      	lsrs	r3, r3, #5
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	8912      	ldrh	r2, [r2, #8]
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d301      	bcc.n	80024ea <dir_sdi+0x72>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e048      	b.n	800257c <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	639a      	str	r2, [r3, #56]	; 0x38
 80024f2:	e029      	b.n	8002548 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	895b      	ldrh	r3, [r3, #10]
 80024f8:	025b      	lsls	r3, r3, #9
 80024fa:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80024fc:	e019      	b.n	8002532 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6979      	ldr	r1, [r7, #20]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff f9ae 	bl	8001864 <get_fat>
 8002508:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002510:	d101      	bne.n	8002516 <dir_sdi+0x9e>
 8002512:	2301      	movs	r3, #1
 8002514:	e032      	b.n	800257c <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d904      	bls.n	8002526 <dir_sdi+0xae>
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	429a      	cmp	r2, r3
 8002524:	d301      	bcc.n	800252a <dir_sdi+0xb2>
 8002526:	2302      	movs	r3, #2
 8002528:	e028      	b.n	800257c <dir_sdi+0x104>
			ofs -= csz;
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	429a      	cmp	r2, r3
 8002538:	d2e1      	bcs.n	80024fe <dir_sdi+0x86>
		}
		dp->sect = clst2sect(fs, clst);
 800253a:	6979      	ldr	r1, [r7, #20]
 800253c:	6938      	ldr	r0, [r7, #16]
 800253e:	f7ff f971 	bl	8001824 <clst2sect>
 8002542:	4602      	mov	r2, r0
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	635a      	str	r2, [r3, #52]	; 0x34
	if (dp->sect == 0) return FR_INT_ERR;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <dir_sdi+0xe2>
 8002556:	2302      	movs	r3, #2
 8002558:	e010      	b.n	800257c <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	0a5b      	lsrs	r3, r3, #9
 8002562:	441a      	add	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002574:	441a      	add	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	3320      	adds	r3, #32
 800259a:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d102      	bne.n	80025aa <dir_next+0x26>
 80025a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025a8:	e001      	b.n	80025ae <dir_next+0x2a>
 80025aa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d802      	bhi.n	80025ba <dir_next+0x36>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	639a      	str	r2, [r3, #56]	; 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <dir_next+0x42>
 80025c2:	2304      	movs	r3, #4
 80025c4:	e07f      	b.n	80026c6 <dir_next+0x142>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d16d      	bne.n	80026ac <dir_next+0x128>
		dp->sect++;				/* Next sector */
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d4:	1c5a      	adds	r2, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	639a      	str	r2, [r3, #56]	; 0x38

		if (dp->clust == 0) {	/* Static table */
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10a      	bne.n	80025f8 <dir_next+0x74>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	095b      	lsrs	r3, r3, #5
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	8912      	ldrh	r2, [r2, #8]
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d35e      	bcc.n	80026ac <dir_next+0x128>
				dp->sect = 0; return FR_NO_FILE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	639a      	str	r2, [r3, #56]	; 0x38
 80025f4:	2304      	movs	r3, #4
 80025f6:	e066      	b.n	80026c6 <dir_next+0x142>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	0a5b      	lsrs	r3, r3, #9
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	8952      	ldrh	r2, [r2, #10]
 8002600:	3a01      	subs	r2, #1
 8002602:	4013      	ands	r3, r2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d151      	bne.n	80026ac <dir_next+0x128>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800260e:	4619      	mov	r1, r3
 8002610:	4610      	mov	r0, r2
 8002612:	f7ff f927 	bl	8001864 <get_fat>
 8002616:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d801      	bhi.n	8002622 <dir_next+0x9e>
 800261e:	2302      	movs	r3, #2
 8002620:	e051      	b.n	80026c6 <dir_next+0x142>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d101      	bne.n	800262e <dir_next+0xaa>
 800262a:	2301      	movs	r3, #1
 800262c:	e04b      	b.n	80026c6 <dir_next+0x142>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	429a      	cmp	r2, r3
 8002636:	d32f      	bcc.n	8002698 <dir_next+0x114>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d104      	bne.n	8002648 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	639a      	str	r2, [r3, #56]	; 0x38
 8002644:	2304      	movs	r3, #4
 8002646:	e03e      	b.n	80026c6 <dir_next+0x142>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800264e:	4619      	mov	r1, r3
 8002650:	4610      	mov	r0, r2
 8002652:	f7ff fd47 	bl	80020e4 <create_chain>
 8002656:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <dir_next+0xde>
 800265e:	2307      	movs	r3, #7
 8002660:	e031      	b.n	80026c6 <dir_next+0x142>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <dir_next+0xe8>
 8002668:	2302      	movs	r3, #2
 800266a:	e02c      	b.n	80026c6 <dir_next+0x142>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002672:	d101      	bne.n	8002678 <dir_next+0xf4>
 8002674:	2301      	movs	r3, #1
 8002676:	e026      	b.n	80026c6 <dir_next+0x142>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 8002678:	6979      	ldr	r1, [r7, #20]
 800267a:	6938      	ldr	r0, [r7, #16]
 800267c:	f7ff fe6d 	bl	800235a <dir_clear>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <dir_next+0x106>
 8002686:	2301      	movs	r3, #1
 8002688:	e01d      	b.n	80026c6 <dir_next+0x142>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	79db      	ldrb	r3, [r3, #7]
 800268e:	f043 0304 	orr.w	r3, r3, #4
 8002692:	b2da      	uxtb	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	71da      	strb	r2, [r3, #7]
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clst2sect(fs, clst);
 800269e:	6979      	ldr	r1, [r7, #20]
 80026a0:	6938      	ldr	r0, [r7, #16]
 80026a2:	f7ff f8bf 	bl	8001824 <clst2sect>
 80026a6:	4602      	mov	r2, r0
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026be:	441a      	add	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT nent				/* Number of contiguous entries to allocate */
)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b086      	sub	sp, #24
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80026de:	2100      	movs	r1, #0
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff fec9 	bl	8002478 <dir_sdi>
 80026e6:	4603      	mov	r3, r0
 80026e8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80026ea:	7dfb      	ldrb	r3, [r7, #23]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d140      	bne.n	8002772 <dir_alloc+0xa4>
		n = 0;
 80026f0:	2300      	movs	r3, #0
 80026f2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f8:	4619      	mov	r1, r3
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f7fe fff6 	bl	80016ec <move_window>
 8002700:	4603      	mov	r3, r0
 8002702:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8002704:	7dfb      	ldrb	r3, [r7, #23]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d132      	bne.n	8002770 <dir_alloc+0xa2>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b04      	cmp	r3, #4
 8002710:	d108      	bne.n	8002724 <dir_alloc+0x56>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	b25b      	sxtb	r3, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	b2db      	uxtb	r3, r3
 800271e:	09db      	lsrs	r3, r3, #7
 8002720:	b2db      	uxtb	r3, r3
 8002722:	e00f      	b.n	8002744 <dir_alloc+0x76>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2be5      	cmp	r3, #229	; 0xe5
 800272c:	d004      	beq.n	8002738 <dir_alloc+0x6a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <dir_alloc+0x6e>
 8002738:	2301      	movs	r3, #1
 800273a:	e000      	b.n	800273e <dir_alloc+0x70>
 800273c:	2300      	movs	r3, #0
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d007      	beq.n	8002758 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	3301      	adds	r3, #1
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d102      	bne.n	800275c <dir_alloc+0x8e>
 8002756:	e00c      	b.n	8002772 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8002758:	2300      	movs	r3, #0
 800275a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800275c:	2101      	movs	r1, #1
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff ff10 	bl	8002584 <dir_next>
 8002764:	4603      	mov	r3, r0
 8002766:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8002768:	7dfb      	ldrb	r3, [r7, #23]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0c2      	beq.n	80026f4 <dir_alloc+0x26>
 800276e:	e000      	b.n	8002772 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8002770:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8002772:	7dfb      	ldrb	r3, [r7, #23]
 8002774:	2b04      	cmp	r3, #4
 8002776:	d101      	bne.n	800277c <dir_alloc+0xae>
 8002778:	2307      	movs	r3, #7
 800277a:	75fb      	strb	r3, [r7, #23]
	return res;
 800277c:	7dfb      	ldrb	r3, [r7, #23]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	331a      	adds	r3, #26
 8002794:	4618      	mov	r0, r3
 8002796:	f7fe fc63 	bl	8001060 <ld_word>
 800279a:	4603      	mov	r3, r0
 800279c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b03      	cmp	r3, #3
 80027a4:	d109      	bne.n	80027ba <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	3314      	adds	r3, #20
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fe fc58 	bl	8001060 <ld_word>
 80027b0:	4603      	mov	r3, r0
 80027b2:	041b      	lsls	r3, r3, #16
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80027ba:	68fb      	ldr	r3, [r7, #12]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	331a      	adds	r3, #26
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	b292      	uxth	r2, r2
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe fd38 	bl	8001250 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d109      	bne.n	80027fc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f103 0214 	add.w	r2, r3, #20
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	0c1b      	lsrs	r3, r3, #16
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	4619      	mov	r1, r3
 80027f6:	4610      	mov	r0, r2
 80027f8:	f7fe fd2a 	bl	8001250 <st_word>
	}
}
 80027fc:	bf00      	nop
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <cmp_lfn>:

static int cmp_lfn (		/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	331a      	adds	r3, #26
 8002812:	4618      	mov	r0, r3
 8002814:	f7fe fc24 	bl	8001060 <ld_word>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <cmp_lfn+0x1e>
 800281e:	2300      	movs	r3, #0
 8002820:	e058      	b.n	80028d4 <cmp_lfn+0xd0>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800282a:	1e5a      	subs	r2, r3, #1
 800282c:	4613      	mov	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8002838:	2301      	movs	r3, #1
 800283a:	81fb      	strh	r3, [r7, #14]
 800283c:	2300      	movs	r3, #0
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	e032      	b.n	80028a8 <cmp_lfn+0xa4>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8002842:	4a26      	ldr	r2, [pc, #152]	; (80028dc <cmp_lfn+0xd8>)
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4413      	add	r3, r2
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	4413      	add	r3, r2
 8002850:	4618      	mov	r0, r3
 8002852:	f7fe fc05 	bl	8001060 <ld_word>
 8002856:	4603      	mov	r3, r0
 8002858:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 800285a:	89fb      	ldrh	r3, [r7, #14]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d019      	beq.n	8002894 <cmp_lfn+0x90>
			if (i >= FF_MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2bfe      	cmp	r3, #254	; 0xfe
 8002864:	d811      	bhi.n	800288a <cmp_lfn+0x86>
 8002866:	89bb      	ldrh	r3, [r7, #12]
 8002868:	4618      	mov	r0, r3
 800286a:	f003 fed5 	bl	8006618 <ff_wtoupper>
 800286e:	4604      	mov	r4, r0
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	617a      	str	r2, [r7, #20]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	4413      	add	r3, r2
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f003 feca 	bl	8006618 <ff_wtoupper>
 8002884:	4603      	mov	r3, r0
 8002886:	429c      	cmp	r4, r3
 8002888:	d001      	beq.n	800288e <cmp_lfn+0x8a>
				return 0;					/* Not matched */
 800288a:	2300      	movs	r3, #0
 800288c:	e022      	b.n	80028d4 <cmp_lfn+0xd0>
			}
			wc = uc;
 800288e:	89bb      	ldrh	r3, [r7, #12]
 8002890:	81fb      	strh	r3, [r7, #14]
 8002892:	e006      	b.n	80028a2 <cmp_lfn+0x9e>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8002894:	89bb      	ldrh	r3, [r7, #12]
 8002896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800289a:	4293      	cmp	r3, r2
 800289c:	d001      	beq.n	80028a2 <cmp_lfn+0x9e>
 800289e:	2300      	movs	r3, #0
 80028a0:	e018      	b.n	80028d4 <cmp_lfn+0xd0>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	3301      	adds	r3, #1
 80028a6:	613b      	str	r3, [r7, #16]
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	2b0c      	cmp	r3, #12
 80028ac:	d9c9      	bls.n	8002842 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00b      	beq.n	80028d2 <cmp_lfn+0xce>
 80028ba:	89fb      	ldrh	r3, [r7, #14]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <cmp_lfn+0xce>
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	4413      	add	r3, r2
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <cmp_lfn+0xce>
 80028ce:	2300      	movs	r3, #0
 80028d0:	e000      	b.n	80028d4 <cmp_lfn+0xd0>

	return 1;		/* The part of LFN matched */
 80028d2:	2301      	movs	r3, #1
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	371c      	adds	r7, #28
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd90      	pop	{r4, r7, pc}
 80028dc:	0801a26c 	.word	0x0801a26c

080028e0 <pick_lfn>:

static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	331a      	adds	r3, #26
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7fe fbb6 	bl	8001060 <ld_word>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <pick_lfn+0x1e>
 80028fa:	2300      	movs	r3, #0
 80028fc:	e04d      	b.n	800299a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002906:	1e5a      	subs	r2, r3, #1
 8002908:	4613      	mov	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4413      	add	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8002914:	2301      	movs	r3, #1
 8002916:	81fb      	strh	r3, [r7, #14]
 8002918:	2300      	movs	r3, #0
 800291a:	613b      	str	r3, [r7, #16]
 800291c:	e028      	b.n	8002970 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800291e:	4a21      	ldr	r2, [pc, #132]	; (80029a4 <pick_lfn+0xc4>)
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4413      	add	r3, r2
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	461a      	mov	r2, r3
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	4413      	add	r3, r2
 800292c:	4618      	mov	r0, r3
 800292e:	f7fe fb97 	bl	8001060 <ld_word>
 8002932:	4603      	mov	r3, r0
 8002934:	81bb      	strh	r3, [r7, #12]
		if (wc != 0) {
 8002936:	89fb      	ldrh	r3, [r7, #14]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00f      	beq.n	800295c <pick_lfn+0x7c>
			if (i >= FF_MAX_LFN) return 0;	/* Buffer overflow? */
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2bfe      	cmp	r3, #254	; 0xfe
 8002940:	d901      	bls.n	8002946 <pick_lfn+0x66>
 8002942:	2300      	movs	r3, #0
 8002944:	e029      	b.n	800299a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8002946:	89bb      	ldrh	r3, [r7, #12]
 8002948:	81fb      	strh	r3, [r7, #14]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	617a      	str	r2, [r7, #20]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	4413      	add	r3, r2
 8002956:	89fa      	ldrh	r2, [r7, #14]
 8002958:	801a      	strh	r2, [r3, #0]
 800295a:	e006      	b.n	800296a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800295c:	89bb      	ldrh	r3, [r7, #12]
 800295e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002962:	4293      	cmp	r3, r2
 8002964:	d001      	beq.n	800296a <pick_lfn+0x8a>
 8002966:	2300      	movs	r3, #0
 8002968:	e017      	b.n	800299a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	3301      	adds	r3, #1
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	2b0c      	cmp	r3, #12
 8002974:	d9d3      	bls.n	800291e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <pick_lfn+0xb8>
		if (i >= FF_MAX_LFN) return 0;		/* Buffer overflow? */
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2bfe      	cmp	r3, #254	; 0xfe
 8002986:	d901      	bls.n	800298c <pick_lfn+0xac>
 8002988:	2300      	movs	r3, #0
 800298a:	e006      	b.n	800299a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	4413      	add	r3, r2
 8002994:	2200      	movs	r2, #0
 8002996:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8002998:	2301      	movs	r3, #1
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	0801a26c 	.word	0x0801a26c

080029a8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b088      	sub	sp, #32
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	4611      	mov	r1, r2
 80029b4:	461a      	mov	r2, r3
 80029b6:	460b      	mov	r3, r1
 80029b8:	71fb      	strb	r3, [r7, #7]
 80029ba:	4613      	mov	r3, r2
 80029bc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	330d      	adds	r3, #13
 80029c2:	79ba      	ldrb	r2, [r7, #6]
 80029c4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	330b      	adds	r3, #11
 80029ca:	220f      	movs	r2, #15
 80029cc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	330c      	adds	r3, #12
 80029d2:	2200      	movs	r2, #0
 80029d4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	331a      	adds	r3, #26
 80029da:	2100      	movs	r1, #0
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fe fc37 	bl	8001250 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	1e5a      	subs	r2, r3, #1
 80029e6:	4613      	mov	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	82fb      	strh	r3, [r7, #22]
 80029f6:	2300      	movs	r3, #0
 80029f8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80029fa:	8afb      	ldrh	r3, [r7, #22]
 80029fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d007      	beq.n	8002a14 <put_lfn+0x6c>
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	61fa      	str	r2, [r7, #28]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	4413      	add	r3, r2
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8002a14:	4a17      	ldr	r2, [pc, #92]	; (8002a74 <put_lfn+0xcc>)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	4413      	add	r3, r2
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	4413      	add	r3, r2
 8002a22:	8afa      	ldrh	r2, [r7, #22]
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fe fc12 	bl	8001250 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8002a2c:	8afb      	ldrh	r3, [r7, #22]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d102      	bne.n	8002a38 <put_lfn+0x90>
 8002a32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a36:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	61bb      	str	r3, [r7, #24]
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	2b0c      	cmp	r3, #12
 8002a42:	d9da      	bls.n	80029fa <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8002a44:	8afb      	ldrh	r3, [r7, #22]
 8002a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d006      	beq.n	8002a5c <put_lfn+0xb4>
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4413      	add	r3, r2
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d103      	bne.n	8002a64 <put_lfn+0xbc>
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a62:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	79fa      	ldrb	r2, [r7, #7]
 8002a68:	701a      	strb	r2, [r3, #0]
}
 8002a6a:	bf00      	nop
 8002a6c:	3720      	adds	r7, #32
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	0801a26c 	.word	0x0801a26c

08002a78 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08c      	sub	sp, #48	; 0x30
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
 8002a84:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8002a86:	220b      	movs	r2, #11
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f7fe fcae 	bl	80013ec <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	2b05      	cmp	r3, #5
 8002a94:	d92b      	bls.n	8002aee <gen_numname+0x76>
		sr = seq;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC as hash value */
 8002a9a:	e022      	b.n	8002ae2 <gen_numname+0x6a>
			wc = *lfn++;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	1c9a      	adds	r2, r3, #2
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aaa:	e017      	b.n	8002adc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	005a      	lsls	r2, r3, #1
 8002ab0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	4413      	add	r3, r2
 8002ab8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8002aba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002abc:	085b      	lsrs	r3, r3, #1
 8002abe:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d005      	beq.n	8002ad6 <gen_numname+0x5e>
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8002ad0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8002ad4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8002ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad8:	3301      	adds	r3, #1
 8002ada:	62bb      	str	r3, [r7, #40]	; 0x28
 8002adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ade:	2b0f      	cmp	r3, #15
 8002ae0:	d9e4      	bls.n	8002aac <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC as hash value */
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1d8      	bne.n	8002a9c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8002aee:	2307      	movs	r3, #7
 8002af0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	3330      	adds	r3, #48	; 0x30
 8002afe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8002b02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b06:	2b39      	cmp	r3, #57	; 0x39
 8002b08:	d904      	bls.n	8002b14 <gen_numname+0x9c>
 8002b0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002b0e:	3307      	adds	r3, #7
 8002b10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8002b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b16:	1e5a      	subs	r2, r3, #1
 8002b18:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b1a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002b1e:	4413      	add	r3, r2
 8002b20:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002b24:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	603b      	str	r3, [r7, #0]
	} while (seq);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1de      	bne.n	8002af2 <gen_numname+0x7a>
	ns[i] = '~';
 8002b34:	f107 0214 	add.w	r2, r7, #20
 8002b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3a:	4413      	add	r3, r2
 8002b3c:	227e      	movs	r2, #126	; 0x7e
 8002b3e:	701a      	strb	r2, [r3, #0]

	/* Append the number to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8002b40:	2300      	movs	r3, #0
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
 8002b44:	e014      	b.n	8002b70 <gen_numname+0xf8>
		if (dbc_1st(dst[j])) {
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	4413      	add	r3, r2
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe fcc9 	bl	80014e6 <dbc_1st>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d007      	beq.n	8002b6a <gen_numname+0xf2>
			if (j == i - 1) break;
 8002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d010      	beq.n	8002b86 <gen_numname+0x10e>
			j++;
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	3301      	adds	r3, #1
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d207      	bcs.n	8002b88 <gen_numname+0x110>
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	4413      	add	r3, r2
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	d1e0      	bne.n	8002b46 <gen_numname+0xce>
 8002b84:	e000      	b.n	8002b88 <gen_numname+0x110>
			if (j == i - 1) break;
 8002b86:	bf00      	nop
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	2b07      	cmp	r3, #7
 8002b8c:	d808      	bhi.n	8002ba0 <gen_numname+0x128>
 8002b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b94:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002b98:	4413      	add	r3, r2
 8002b9a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8002b9e:	e000      	b.n	8002ba2 <gen_numname+0x12a>
 8002ba0:	2120      	movs	r1, #32
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	1c5a      	adds	r2, r3, #1
 8002ba6:	627a      	str	r2, [r7, #36]	; 0x24
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4413      	add	r3, r2
 8002bac:	460a      	mov	r2, r1
 8002bae:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	2b07      	cmp	r3, #7
 8002bb4:	d9e8      	bls.n	8002b88 <gen_numname+0x110>
}
 8002bb6:	bf00      	nop
 8002bb8:	3730      	adds	r7, #48	; 0x30
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b085      	sub	sp, #20
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8002bca:	230b      	movs	r3, #11
 8002bcc:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	0852      	lsrs	r2, r2, #1
 8002bd4:	01db      	lsls	r3, r3, #7
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	b2da      	uxtb	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	1c59      	adds	r1, r3, #1
 8002bde:	6079      	str	r1, [r7, #4]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	4413      	add	r3, r2
 8002be4:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1ed      	bne.n	8002bce <sum_sfn+0x10>
	return sum;
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b087      	sub	sp, #28
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	015b      	lsls	r3, r3, #5
 8002c12:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8002c14:	2300      	movs	r3, #0
 8002c16:	827b      	strh	r3, [r7, #18]
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	e018      	b.n	8002c50 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d103      	bne.n	8002c2c <xdir_sum+0x2c>
			i++;
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	3301      	adds	r3, #1
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	e00e      	b.n	8002c4a <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8002c2c:	8a7b      	ldrh	r3, [r7, #18]
 8002c2e:	03db      	lsls	r3, r3, #15
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	8a7b      	ldrh	r3, [r7, #18]
 8002c34:	085b      	lsrs	r3, r3, #1
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	440b      	add	r3, r1
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	4413      	add	r3, r2
 8002c48:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d3e2      	bcc.n	8002c1e <xdir_sum+0x1e>
		}
	}
	return sum;
 8002c58:	8a7b      	ldrh	r3, [r7, #18]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	371c      	adds	r7, #28
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <xname_sum>:


static WORD xname_sum (	/* Get check sum (to be used as hash) of the file name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8002c72:	e01f      	b.n	8002cb4 <xname_sum+0x4e>
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 8002c74:	89bb      	ldrh	r3, [r7, #12]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f003 fcce 	bl	8006618 <ff_wtoupper>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8002c80:	89fb      	ldrh	r3, [r7, #14]
 8002c82:	03db      	lsls	r3, r3, #15
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	89fb      	ldrh	r3, [r7, #14]
 8002c88:	085b      	lsrs	r3, r3, #1
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	89bb      	ldrh	r3, [r7, #12]
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8002c9a:	89fb      	ldrh	r3, [r7, #14]
 8002c9c:	03db      	lsls	r3, r3, #15
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	89fb      	ldrh	r3, [r7, #14]
 8002ca2:	085b      	lsrs	r3, r3, #1
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	89bb      	ldrh	r3, [r7, #12]
 8002cac:	0a1b      	lsrs	r3, r3, #8
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	1c9a      	adds	r2, r3, #2
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	81bb      	strh	r3, [r7, #12]
 8002cbe:	89bb      	ldrh	r3, [r7, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1d7      	bne.n	8002c74 <xname_sum+0xe>
	}
	return sum;
 8002cc4:	89fb      	ldrh	r3, [r7, #14]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <get_xfileinfo>:

static void get_xfileinfo (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 8002cce:	b590      	push	{r4, r7, lr}
 8002cd0:	b089      	sub	sp, #36	; 0x24
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	6039      	str	r1, [r7, #0]
	WCHAR wc, hs;
	UINT di, si, nc;

	/* Get file name from the entry block */
	si = SZDIRE * 2;	/* 1st C1 entry */
 8002cd8:	2340      	movs	r3, #64	; 0x40
 8002cda:	617b      	str	r3, [r7, #20]
	nc = 0; hs = 0; di = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	83fb      	strh	r3, [r7, #30]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61bb      	str	r3, [r7, #24]
	while (nc < dirb[XDIR_NumName]) {
 8002ce8:	e048      	b.n	8002d7c <get_xfileinfo+0xae>
		if (si >= MAXDIRB(FF_MAX_LFN)) { di = 0; break; }	/* Truncated directory block? */
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8002cf0:	d302      	bcc.n	8002cf8 <get_xfileinfo+0x2a>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61bb      	str	r3, [r7, #24]
 8002cf6:	e048      	b.n	8002d8a <get_xfileinfo+0xbc>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f003 031f 	and.w	r3, r3, #31
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d102      	bne.n	8002d08 <get_xfileinfo+0x3a>
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	3302      	adds	r3, #2
 8002d06:	617b      	str	r3, [r7, #20]
		wc = ld_word(dirb + si); si += 2; nc++;	/* Get a character */
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fe f9a6 	bl	8001060 <ld_word>
 8002d14:	4603      	mov	r3, r0
 8002d16:	81fb      	strh	r3, [r7, #14]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	3302      	adds	r3, #2
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	3301      	adds	r3, #1
 8002d22:	613b      	str	r3, [r7, #16]
		if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 8002d24:	8bfb      	ldrh	r3, [r7, #30]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10a      	bne.n	8002d40 <get_xfileinfo+0x72>
 8002d2a:	89fb      	ldrh	r3, [r7, #14]
 8002d2c:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8002d30:	d306      	bcc.n	8002d40 <get_xfileinfo+0x72>
 8002d32:	89fb      	ldrh	r3, [r7, #14]
 8002d34:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8002d38:	d202      	bcs.n	8002d40 <get_xfileinfo+0x72>
			hs = wc; continue;	/* Get low surrogate */
 8002d3a:	89fb      	ldrh	r3, [r7, #14]
 8002d3c:	83fb      	strh	r3, [r7, #30]
 8002d3e:	e01d      	b.n	8002d7c <get_xfileinfo+0xae>
		}
		wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 8002d40:	8bfb      	ldrh	r3, [r7, #30]
 8002d42:	041a      	lsls	r2, r3, #16
 8002d44:	89fb      	ldrh	r3, [r7, #14]
 8002d46:	ea42 0003 	orr.w	r0, r2, r3
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	3318      	adds	r3, #24
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	4413      	add	r3, r2
 8002d52:	1c99      	adds	r1, r3, #2
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f7fe fc52 	bl	8001604 <put_utf>
 8002d60:	4603      	mov	r3, r0
 8002d62:	81fb      	strh	r3, [r7, #14]
		if (wc == 0) { di = 0; break; }	/* Buffer overflow or wrong encoding? */
 8002d64:	89fb      	ldrh	r3, [r7, #14]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d102      	bne.n	8002d70 <get_xfileinfo+0xa2>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61bb      	str	r3, [r7, #24]
 8002d6e:	e00c      	b.n	8002d8a <get_xfileinfo+0xbc>
		di += wc;
 8002d70:	89fb      	ldrh	r3, [r7, #14]
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4413      	add	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
		hs = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	83fb      	strh	r3, [r7, #30]
	while (nc < dirb[XDIR_NumName]) {
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3323      	adds	r3, #35	; 0x23
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d3af      	bcc.n	8002cea <get_xfileinfo+0x1c>
	}
	if (hs != 0) di = 0;					/* Broken surrogate pair? */
 8002d8a:	8bfb      	ldrh	r3, [r7, #30]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <get_xfileinfo+0xc6>
 8002d90:	2300      	movs	r3, #0
 8002d92:	61bb      	str	r3, [r7, #24]
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d106      	bne.n	8002da8 <get_xfileinfo+0xda>
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	61ba      	str	r2, [r7, #24]
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	4413      	add	r3, r2
 8002da4:	223f      	movs	r2, #63	; 0x3f
 8002da6:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate the name */
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	4413      	add	r3, r2
 8002dae:	331a      	adds	r3, #26
 8002db0:	2200      	movs	r2, #0
 8002db2:	701a      	strb	r2, [r3, #0]
	fno->altname[0] = 0;					/* exFAT does not support SFN */
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	2200      	movs	r2, #0
 8002db8:	735a      	strb	r2, [r3, #13]

	fno->fattrib = dirb[XDIR_Attr];			/* Attribute */
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	791a      	ldrb	r2, [r3, #4]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	7b1b      	ldrb	r3, [r3, #12]
 8002dc6:	f003 0310 	and.w	r3, r3, #16
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d107      	bne.n	8002dde <get_xfileinfo+0x110>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3338      	adds	r3, #56	; 0x38
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fe f97f 	bl	80010d6 <ld_qword>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	460c      	mov	r4, r1
 8002ddc:	e003      	b.n	8002de6 <get_xfileinfo+0x118>
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	f04f 0400 	mov.w	r4, #0
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	e9c2 3400 	strd	r3, r4, [r2]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	330c      	adds	r3, #12
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fe f935 	bl	8001060 <ld_word>
 8002df6:	4603      	mov	r3, r0
 8002df8:	461a      	mov	r2, r3
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	330e      	adds	r3, #14
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fe f92c 	bl	8001060 <ld_word>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	811a      	strh	r2, [r3, #8]
}
 8002e10:	bf00      	nop
 8002e12:	3724      	adds	r7, #36	; 0x24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd90      	pop	{r4, r7, pc}

08002e18 <load_xdir>:
/*-----------------------------------*/

static FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp					/* Reading direcotry object pointing top of the entry block to load */
)
{
 8002e18:	b590      	push	{r4, r7, lr}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	60fb      	str	r3, [r7, #12]


	/* Load file-directory entry */
	res = move_window(dp->obj.fs, dp->sect);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	4619      	mov	r1, r3
 8002e32:	4610      	mov	r0, r2
 8002e34:	f7fe fc5a 	bl	80016ec <move_window>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8002e3c:	7dfb      	ldrb	r3, [r7, #23]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <load_xdir+0x2e>
 8002e42:	7dfb      	ldrb	r3, [r7, #23]
 8002e44:	e0a9      	b.n	8002f9a <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b85      	cmp	r3, #133	; 0x85
 8002e4e:	d001      	beq.n	8002e54 <load_xdir+0x3c>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e0a2      	b.n	8002f9a <load_xdir+0x182>
	mem_cpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e58:	2220      	movs	r2, #32
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f7fe fac5 	bl	80013ec <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	3301      	adds	r3, #1
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	015b      	lsls	r3, r3, #5
 8002e6c:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2b5f      	cmp	r3, #95	; 0x5f
 8002e72:	d903      	bls.n	8002e7c <load_xdir+0x64>
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8002e7a:	d901      	bls.n	8002e80 <load_xdir+0x68>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e08c      	b.n	8002f9a <load_xdir+0x182>

	/* Load stream-extension entry */
	res = dir_next(dp, 0);
 8002e80:	2100      	movs	r1, #0
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff fb7e 	bl	8002584 <dir_next>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d101      	bne.n	8002e96 <load_xdir+0x7e>
 8002e92:	2302      	movs	r3, #2
 8002e94:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8002e96:	7dfb      	ldrb	r3, [r7, #23]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <load_xdir+0x88>
 8002e9c:	7dfb      	ldrb	r3, [r7, #23]
 8002e9e:	e07c      	b.n	8002f9a <load_xdir+0x182>
	res = move_window(dp->obj.fs, dp->sect);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4610      	mov	r0, r2
 8002eac:	f7fe fc1e 	bl	80016ec <move_window>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8002eb4:	7dfb      	ldrb	r3, [r7, #23]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <load_xdir+0xa6>
 8002eba:	7dfb      	ldrb	r3, [r7, #23]
 8002ebc:	e06d      	b.n	8002f9a <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2bc0      	cmp	r3, #192	; 0xc0
 8002ec6:	d001      	beq.n	8002ecc <load_xdir+0xb4>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e066      	b.n	8002f9a <load_xdir+0x182>
	mem_cpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f103 0020 	add.w	r0, r3, #32
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	4619      	mov	r1, r3
 8002eda:	f7fe fa87 	bl	80013ec <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	3323      	adds	r3, #35	; 0x23
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	332c      	adds	r3, #44	; 0x2c
 8002ee6:	4a2f      	ldr	r2, [pc, #188]	; (8002fa4 <load_xdir+0x18c>)
 8002ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8002eec:	08db      	lsrs	r3, r3, #3
 8002eee:	015b      	lsls	r3, r3, #5
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d201      	bcs.n	8002efa <load_xdir+0xe2>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e04f      	b.n	8002f9a <load_xdir+0x182>

	/* Load file-name entries */
	i = 2 * SZDIRE;	/* Name offset to load */
 8002efa:	2340      	movs	r3, #64	; 0x40
 8002efc:	613b      	str	r3, [r7, #16]
	do {
		res = dir_next(dp, 0);
 8002efe:	2100      	movs	r1, #0
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7ff fb3f 	bl	8002584 <dir_next>
 8002f06:	4603      	mov	r3, r0
 8002f08:	75fb      	strb	r3, [r7, #23]
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 8002f0a:	7dfb      	ldrb	r3, [r7, #23]
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d101      	bne.n	8002f14 <load_xdir+0xfc>
 8002f10:	2302      	movs	r3, #2
 8002f12:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8002f14:	7dfb      	ldrb	r3, [r7, #23]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <load_xdir+0x106>
 8002f1a:	7dfb      	ldrb	r3, [r7, #23]
 8002f1c:	e03d      	b.n	8002f9a <load_xdir+0x182>
		res = move_window(dp->obj.fs, dp->sect);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f26:	4619      	mov	r1, r3
 8002f28:	4610      	mov	r0, r2
 8002f2a:	f7fe fbdf 	bl	80016ec <move_window>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8002f32:	7dfb      	ldrb	r3, [r7, #23]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <load_xdir+0x124>
 8002f38:	7dfb      	ldrb	r3, [r7, #23]
 8002f3a:	e02e      	b.n	8002f9a <load_xdir+0x182>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2bc1      	cmp	r3, #193	; 0xc1
 8002f44:	d001      	beq.n	8002f4a <load_xdir+0x132>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e027      	b.n	8002f9a <load_xdir+0x182>
		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8002f50:	d208      	bcs.n	8002f64 <load_xdir+0x14c>
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	18d0      	adds	r0, r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	4619      	mov	r1, r3
 8002f60:	f7fe fa44 	bl	80013ec <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	3320      	adds	r3, #32
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	693a      	ldr	r2, [r7, #16]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d3c5      	bcc.n	8002efe <load_xdir+0xe6>

	/* Sanity check (do it for only accessible object) */
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8002f78:	d80e      	bhi.n	8002f98 <load_xdir+0x180>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f7ff fe40 	bl	8002c00 <xdir_sum>
 8002f80:	4603      	mov	r3, r0
 8002f82:	461c      	mov	r4, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	3302      	adds	r3, #2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fe f869 	bl	8001060 <ld_word>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	429c      	cmp	r4, r3
 8002f92:	d001      	beq.n	8002f98 <load_xdir+0x180>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e000      	b.n	8002f9a <load_xdir+0x182>
	}
	return FR_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	371c      	adds	r7, #28
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd90      	pop	{r4, r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	88888889 	.word	0x88888889

08002fa8 <init_alloc_info>:

static void init_alloc_info (
	FATFS* fs,		/* Filesystem object */
	FFOBJID* obj	/* Object allocation information to be initialized */
)
{
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	3334      	adds	r3, #52	; 0x34
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fe f869 	bl	8001090 <ld_dword>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	609a      	str	r2, [r3, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	3338      	adds	r3, #56	; 0x38
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fe f883 	bl	80010d6 <ld_qword>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	460c      	mov	r4, r1
 8002fd4:	683a      	ldr	r2, [r7, #0]
 8002fd6:	e9c2 3404 	strd	r3, r4, [r2, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	3321      	adds	r3, #33	; 0x21
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	71da      	strb	r2, [r3, #7]
	obj->n_frag = 0;										/* No last fragment info */
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	61da      	str	r2, [r3, #28]
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd90      	pop	{r4, r7, pc}

08002ffa <load_obj_xdir>:

static FRESULT load_obj_xdir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const FFOBJID* obj	/* Object with its containing directory information */
)
{
 8002ffa:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	601a      	str	r2, [r3, #0]
	dp->obj.sclust = obj->c_scl;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6a1a      	ldr	r2, [r3, #32]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	609a      	str	r2, [r3, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	b2da      	uxtb	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	71da      	strb	r2, [r3, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	469b      	mov	fp, r3
 8003026:	f04f 0c00 	mov.w	ip, #0
 800302a:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	ea0b 0301 	and.w	r3, fp, r1
 8003036:	ea0c 0402 	and.w	r4, ip, r2
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	dp->obj.n_frag = 0;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	61da      	str	r2, [r3, #28]
	dp->blk_ofs = obj->c_ofs;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003052:	4619      	mov	r1, r3
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff fa0f 	bl	8002478 <dir_sdi>
 800305a:	4603      	mov	r3, r0
 800305c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d104      	bne.n	800306e <load_obj_xdir+0x74>
		res = load_xdir(dp);		/* Load the object's entry block */
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff fed7 	bl	8002e18 <load_xdir>
 800306a:	4603      	mov	r3, r0
 800306c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800306e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800307a <store_xdir>:
/*----------------------------------------*/

static FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800307a:	b590      	push	{r4, r7, lr}
 800307c:	b087      	sub	sp, #28
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	1c9c      	adds	r4, r3, #2
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f7ff fdb6 	bl	8002c00 <xdir_sum>
 8003094:	4603      	mov	r3, r0
 8003096:	4619      	mov	r1, r3
 8003098:	4620      	mov	r0, r4
 800309a:	f7fe f8d9 	bl	8001250 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	3301      	adds	r3, #1
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	3301      	adds	r3, #1
 80030a6:	613b      	str	r3, [r7, #16]

	/* Store the direcotry entry block to the directory */
	res = dir_sdi(dp, dp->blk_ofs);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ac:	4619      	mov	r1, r3
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7ff f9e2 	bl	8002478 <dir_sdi>
 80030b4:	4603      	mov	r3, r0
 80030b6:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 80030b8:	e026      	b.n	8003108 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c2:	4619      	mov	r1, r3
 80030c4:	4610      	mov	r0, r2
 80030c6:	f7fe fb11 	bl	80016ec <move_window>
 80030ca:	4603      	mov	r3, r0
 80030cc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80030ce:	7dfb      	ldrb	r3, [r7, #23]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d11d      	bne.n	8003110 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d8:	2220      	movs	r2, #32
 80030da:	68f9      	ldr	r1, [r7, #12]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fe f985 	bl	80013ec <mem_cpy>
		dp->obj.fs->wflag = 1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2201      	movs	r2, #1
 80030e8:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	3b01      	subs	r3, #1
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00e      	beq.n	8003114 <store_xdir+0x9a>
		dirb += SZDIRE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	3320      	adds	r3, #32
 80030fa:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 80030fc:	2100      	movs	r1, #0
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7ff fa40 	bl	8002584 <dir_next>
 8003104:	4603      	mov	r3, r0
 8003106:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8003108:	7dfb      	ldrb	r3, [r7, #23]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0d5      	beq.n	80030ba <store_xdir+0x40>
 800310e:	e002      	b.n	8003116 <store_xdir+0x9c>
		if (res != FR_OK) break;
 8003110:	bf00      	nop
 8003112:	e000      	b.n	8003116 <store_xdir+0x9c>
		if (--nent == 0) break;
 8003114:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8003116:	7dfb      	ldrb	r3, [r7, #23]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <store_xdir+0xa8>
 800311c:	7dfb      	ldrb	r3, [r7, #23]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <store_xdir+0xac>
 8003122:	7dfb      	ldrb	r3, [r7, #23]
 8003124:	e000      	b.n	8003128 <store_xdir+0xae>
 8003126:	2302      	movs	r3, #2
}
 8003128:	4618      	mov	r0, r3
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	bd90      	pop	{r4, r7, pc}

08003130 <create_xdir>:

static void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the object name */
)
{
 8003130:	b590      	push	{r4, r7, lr}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
	BYTE nc1, nlen;
	WCHAR wc;


	/* Create file-directory and stream-extension entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800313a:	2240      	movs	r2, #64	; 0x40
 800313c:	2100      	movs	r1, #0
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7fe f975 	bl	800142e <mem_set>
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2285      	movs	r2, #133	; 0x85
 8003148:	701a      	strb	r2, [r3, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	3320      	adds	r3, #32
 800314e:	22c0      	movs	r2, #192	; 0xc0
 8003150:	701a      	strb	r2, [r3, #0]

	/* Create file-name entries */
	i = SZDIRE * 2;	/* Top of file_name entries */
 8003152:	2340      	movs	r3, #64	; 0x40
 8003154:	60fb      	str	r3, [r7, #12]
	nlen = nc1 = 0; wc = 1;
 8003156:	2300      	movs	r3, #0
 8003158:	72fb      	strb	r3, [r7, #11]
 800315a:	7afb      	ldrb	r3, [r7, #11]
 800315c:	72bb      	strb	r3, [r7, #10]
 800315e:	2301      	movs	r3, #1
 8003160:	813b      	strh	r3, [r7, #8]
	do {
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1c5a      	adds	r2, r3, #1
 8003166:	60fa      	str	r2, [r7, #12]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	4413      	add	r3, r2
 800316c:	22c1      	movs	r2, #193	; 0xc1
 800316e:	701a      	strb	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	60fa      	str	r2, [r7, #12]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	4413      	add	r3, r2
 800317a:	2200      	movs	r2, #0
 800317c:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 800317e:	893b      	ldrh	r3, [r7, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00b      	beq.n	800319c <create_xdir+0x6c>
 8003184:	7abb      	ldrb	r3, [r7, #10]
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	4413      	add	r3, r2
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	813b      	strh	r3, [r7, #8]
 8003190:	893b      	ldrh	r3, [r7, #8]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <create_xdir+0x6c>
 8003196:	7abb      	ldrb	r3, [r7, #10]
 8003198:	3301      	adds	r3, #1
 800319a:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, wc); 		/* Store it */
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4413      	add	r3, r2
 80031a2:	893a      	ldrh	r2, [r7, #8]
 80031a4:	4611      	mov	r1, r2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fe f852 	bl	8001250 <st_word>
			i += 2;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	3302      	adds	r3, #2
 80031b0:	60fb      	str	r3, [r7, #12]
		} while (i % SZDIRE != 0);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f003 031f 	and.w	r3, r3, #31
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1e0      	bne.n	800317e <create_xdir+0x4e>
		nc1++;
 80031bc:	7afb      	ldrb	r3, [r7, #11]
 80031be:	3301      	adds	r3, #1
 80031c0:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nlen]);	/* Fill next entry if any char follows */
 80031c2:	7abb      	ldrb	r3, [r7, #10]
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	4413      	add	r3, r2
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1c8      	bne.n	8003162 <create_xdir+0x32>

	dirb[XDIR_NumName] = nlen;		/* Set name length */
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3323      	adds	r3, #35	; 0x23
 80031d4:	7aba      	ldrb	r2, [r7, #10]
 80031d6:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3301      	adds	r3, #1
 80031dc:	7afa      	ldrb	r2, [r7, #11]
 80031de:	3201      	adds	r2, #1
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80031ea:	6838      	ldr	r0, [r7, #0]
 80031ec:	f7ff fd3b 	bl	8002c66 <xname_sum>
 80031f0:	4603      	mov	r3, r0
 80031f2:	4619      	mov	r1, r3
 80031f4:	4620      	mov	r0, r4
 80031f6:	f7fe f82b 	bl	8001250 <st_word>
}
 80031fa:	bf00      	nop
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd90      	pop	{r4, r7, pc}

08003202 <dir_read>:

static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b086      	sub	sp, #24
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800320c:	2304      	movs	r3, #4
 800320e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	613b      	str	r3, [r7, #16]
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 8003216:	23ff      	movs	r3, #255	; 0xff
 8003218:	757b      	strb	r3, [r7, #21]
 800321a:	23ff      	movs	r3, #255	; 0xff
 800321c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800321e:	e09f      	b.n	8003360 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003224:	4619      	mov	r1, r3
 8003226:	6938      	ldr	r0, [r7, #16]
 8003228:	f7fe fa60 	bl	80016ec <move_window>
 800322c:	4603      	mov	r3, r0
 800322e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8003230:	7dfb      	ldrb	r3, [r7, #23]
 8003232:	2b00      	cmp	r3, #0
 8003234:	f040 809a 	bne.w	800336c <dir_read+0x16a>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	75bb      	strb	r3, [r7, #22]
		if (b == 0) {
 8003240:	7dbb      	ldrb	r3, [r7, #22]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d102      	bne.n	800324c <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8003246:	2304      	movs	r3, #4
 8003248:	75fb      	strb	r3, [r7, #23]
 800324a:	e096      	b.n	800337a <dir_read+0x178>
		}
#if FF_FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b04      	cmp	r3, #4
 8003252:	d118      	bne.n	8003286 <dir_read+0x84>
			if (FF_USE_LABEL && vol) {
				if (b == ET_VLABEL) break;	/* Volume label entry? */
			} else {
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
 8003254:	7dbb      	ldrb	r3, [r7, #22]
 8003256:	2b85      	cmp	r3, #133	; 0x85
 8003258:	d179      	bne.n	800334e <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f7ff fdd8 	bl	8002e18 <load_xdir>
 8003268:	4603      	mov	r3, r0
 800326a:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800326c:	7dfb      	ldrb	r3, [r7, #23]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d17e      	bne.n	8003370 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	3304      	adds	r3, #4
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800327e:	b2da      	uxtb	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	719a      	strb	r2, [r3, #6]
					}
					break;
 8003284:	e074      	b.n	8003370 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328a:	330b      	adds	r3, #11
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003292:	73fb      	strb	r3, [r7, #15]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	7bfa      	ldrb	r2, [r7, #15]
 8003298:	719a      	strb	r2, [r3, #6]
#if FF_USE_LFN		/* LFN configuration */
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800329a:	7dbb      	ldrb	r3, [r7, #22]
 800329c:	2be5      	cmp	r3, #229	; 0xe5
 800329e:	d00e      	beq.n	80032be <dir_read+0xbc>
 80032a0:	7dbb      	ldrb	r3, [r7, #22]
 80032a2:	2b2e      	cmp	r3, #46	; 0x2e
 80032a4:	d00b      	beq.n	80032be <dir_read+0xbc>
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
 80032a8:	f023 0320 	bic.w	r3, r3, #32
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	bf0c      	ite	eq
 80032b0:	2301      	moveq	r3, #1
 80032b2:	2300      	movne	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	461a      	mov	r2, r3
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d002      	beq.n	80032c4 <dir_read+0xc2>
				ord = 0xFF;
 80032be:	23ff      	movs	r3, #255	; 0xff
 80032c0:	757b      	strb	r3, [r7, #21]
 80032c2:	e044      	b.n	800334e <dir_read+0x14c>
			} else {
				if (attr == AM_LFN) {			/* An LFN entry is found */
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	2b0f      	cmp	r3, #15
 80032c8:	d12f      	bne.n	800332a <dir_read+0x128>
					if (b & LLEF) {			/* Is it start of an LFN sequence? */
 80032ca:	7dbb      	ldrb	r3, [r7, #22]
 80032cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00d      	beq.n	80032f0 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d8:	7b5b      	ldrb	r3, [r3, #13]
 80032da:	753b      	strb	r3, [r7, #20]
						b &= (BYTE)~LLEF; ord = b;
 80032dc:	7dbb      	ldrb	r3, [r7, #22]
 80032de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032e2:	75bb      	strb	r3, [r7, #22]
 80032e4:	7dbb      	ldrb	r3, [r7, #22]
 80032e6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80032f0:	7dba      	ldrb	r2, [r7, #22]
 80032f2:	7d7b      	ldrb	r3, [r7, #21]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d115      	bne.n	8003324 <dir_read+0x122>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fc:	330d      	adds	r3, #13
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	7d3a      	ldrb	r2, [r7, #20]
 8003302:	429a      	cmp	r2, r3
 8003304:	d10e      	bne.n	8003324 <dir_read+0x122>
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330e:	4619      	mov	r1, r3
 8003310:	4610      	mov	r0, r2
 8003312:	f7ff fae5 	bl	80028e0 <pick_lfn>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <dir_read+0x122>
 800331c:	7d7b      	ldrb	r3, [r7, #21]
 800331e:	3b01      	subs	r3, #1
 8003320:	b2db      	uxtb	r3, r3
 8003322:	e000      	b.n	8003326 <dir_read+0x124>
 8003324:	23ff      	movs	r3, #255	; 0xff
 8003326:	757b      	strb	r3, [r7, #21]
 8003328:	e011      	b.n	800334e <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800332a:	7d7b      	ldrb	r3, [r7, #21]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d109      	bne.n	8003344 <dir_read+0x142>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff fc42 	bl	8002bbe <sum_sfn>
 800333a:	4603      	mov	r3, r0
 800333c:	461a      	mov	r2, r3
 800333e:	7d3b      	ldrb	r3, [r7, #20]
 8003340:	4293      	cmp	r3, r2
 8003342:	d017      	beq.n	8003374 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f04f 32ff 	mov.w	r2, #4294967295
 800334a:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800334c:	e012      	b.n	8003374 <dir_read+0x172>
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800334e:	2100      	movs	r1, #0
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7ff f917 	bl	8002584 <dir_next>
 8003356:	4603      	mov	r3, r0
 8003358:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800335a:	7dfb      	ldrb	r3, [r7, #23]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10b      	bne.n	8003378 <dir_read+0x176>
	while (dp->sect) {
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003364:	2b00      	cmp	r3, #0
 8003366:	f47f af5b 	bne.w	8003220 <dir_read+0x1e>
 800336a:	e006      	b.n	800337a <dir_read+0x178>
		if (res != FR_OK) break;
 800336c:	bf00      	nop
 800336e:	e004      	b.n	800337a <dir_read+0x178>
					break;
 8003370:	bf00      	nop
 8003372:	e002      	b.n	800337a <dir_read+0x178>
					break;
 8003374:	bf00      	nop
 8003376:	e000      	b.n	800337a <dir_read+0x178>
		if (res != FR_OK) break;
 8003378:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800337a:	7dfb      	ldrb	r3, [r7, #23]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d002      	beq.n	8003386 <dir_read+0x184>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 8003386:	7dfb      	ldrb	r3, [r7, #23]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 8003390:	b590      	push	{r4, r7, lr}
 8003392:	b089      	sub	sp, #36	; 0x24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800339e:	2100      	movs	r1, #0
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f7ff f869 	bl	8002478 <dir_sdi>
 80033a6:	4603      	mov	r3, r0
 80033a8:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 80033aa:	7ffb      	ldrb	r3, [r7, #31]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <dir_find+0x24>
 80033b0:	7ffb      	ldrb	r3, [r7, #31]
 80033b2:	e111      	b.n	80035d8 <dir_find+0x248>
#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d163      	bne.n	8003484 <dir_find+0xf4>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff fc50 	bl	8002c66 <xname_sum>
 80033c6:	4603      	mov	r3, r0
 80033c8:	813b      	strh	r3, [r7, #8]

		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 80033ca:	e04e      	b.n	800346a <dir_find+0xda>
#if FF_MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > FF_MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	3324      	adds	r3, #36	; 0x24
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7fd fe44 	bl	8001060 <ld_word>
 80033d8:	4603      	mov	r3, r0
 80033da:	461a      	mov	r2, r3
 80033dc:	893b      	ldrh	r3, [r7, #8]
 80033de:	4293      	cmp	r3, r2
 80033e0:	d000      	beq.n	80033e4 <dir_find+0x54>
 80033e2:	e042      	b.n	800346a <dir_find+0xda>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80033ec:	76fb      	strb	r3, [r7, #27]
 80033ee:	2340      	movs	r3, #64	; 0x40
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	2300      	movs	r3, #0
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	e028      	b.n	800344a <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f003 031f 	and.w	r3, r3, #31
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d102      	bne.n	8003408 <dir_find+0x78>
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	3302      	adds	r3, #2
 8003406:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	4413      	add	r3, r2
 8003410:	4618      	mov	r0, r3
 8003412:	f7fd fe25 	bl	8001060 <ld_word>
 8003416:	4603      	mov	r3, r0
 8003418:	4618      	mov	r0, r3
 800341a:	f003 f8fd 	bl	8006618 <ff_wtoupper>
 800341e:	4604      	mov	r4, r0
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	68da      	ldr	r2, [r3, #12]
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	4413      	add	r3, r2
 800342a:	881b      	ldrh	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f003 f8f3 	bl	8006618 <ff_wtoupper>
 8003432:	4603      	mov	r3, r0
 8003434:	429c      	cmp	r4, r3
 8003436:	d10c      	bne.n	8003452 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8003438:	7efb      	ldrb	r3, [r7, #27]
 800343a:	3b01      	subs	r3, #1
 800343c:	76fb      	strb	r3, [r7, #27]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	3302      	adds	r3, #2
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	3301      	adds	r3, #1
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	7efb      	ldrb	r3, [r7, #27]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1d3      	bne.n	80033f8 <dir_find+0x68>
 8003450:	e000      	b.n	8003454 <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8003452:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8003454:	7efb      	ldrb	r3, [r7, #27]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d107      	bne.n	800346a <dir_find+0xda>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	4413      	add	r3, r2
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d009      	beq.n	800347e <dir_find+0xee>
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 800346a:	2100      	movs	r1, #0
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff fec8 	bl	8003202 <dir_read>
 8003472:	4603      	mov	r3, r0
 8003474:	77fb      	strb	r3, [r7, #31]
 8003476:	7ffb      	ldrb	r3, [r7, #31]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0a7      	beq.n	80033cc <dir_find+0x3c>
 800347c:	e000      	b.n	8003480 <dir_find+0xf0>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800347e:	bf00      	nop
		}
		return res;
 8003480:	7ffb      	ldrb	r3, [r7, #31]
 8003482:	e0a9      	b.n	80035d8 <dir_find+0x248>
	}
#endif
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8003484:	23ff      	movs	r3, #255	; 0xff
 8003486:	773b      	strb	r3, [r7, #28]
 8003488:	7f3b      	ldrb	r3, [r7, #28]
 800348a:	777b      	strb	r3, [r7, #29]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f04f 32ff 	mov.w	r2, #4294967295
 8003492:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003498:	4619      	mov	r1, r3
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f7fe f926 	bl	80016ec <move_window>
 80034a0:	4603      	mov	r3, r0
 80034a2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 80034a4:	7ffb      	ldrb	r3, [r7, #31]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f040 8090 	bne.w	80035cc <dir_find+0x23c>
		c = dp->dir[DIR_Name];
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80034b4:	7fbb      	ldrb	r3, [r7, #30]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d102      	bne.n	80034c0 <dir_find+0x130>
 80034ba:	2304      	movs	r3, #4
 80034bc:	77fb      	strb	r3, [r7, #31]
 80034be:	e08a      	b.n	80035d6 <dir_find+0x246>
#if FF_USE_LFN		/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c4:	330b      	adds	r3, #11
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034cc:	72fb      	strb	r3, [r7, #11]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	7afa      	ldrb	r2, [r7, #11]
 80034d2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80034d4:	7fbb      	ldrb	r3, [r7, #30]
 80034d6:	2be5      	cmp	r3, #229	; 0xe5
 80034d8:	d007      	beq.n	80034ea <dir_find+0x15a>
 80034da:	7afb      	ldrb	r3, [r7, #11]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d009      	beq.n	80034f8 <dir_find+0x168>
 80034e4:	7afb      	ldrb	r3, [r7, #11]
 80034e6:	2b0f      	cmp	r3, #15
 80034e8:	d006      	beq.n	80034f8 <dir_find+0x168>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80034ea:	23ff      	movs	r3, #255	; 0xff
 80034ec:	777b      	strb	r3, [r7, #29]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f04f 32ff 	mov.w	r2, #4294967295
 80034f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80034f6:	e05e      	b.n	80035b6 <dir_find+0x226>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80034f8:	7afb      	ldrb	r3, [r7, #11]
 80034fa:	2b0f      	cmp	r3, #15
 80034fc:	d136      	bne.n	800356c <dir_find+0x1dc>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8003504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003508:	2b00      	cmp	r3, #0
 800350a:	d154      	bne.n	80035b6 <dir_find+0x226>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800350c:	7fbb      	ldrb	r3, [r7, #30]
 800350e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00d      	beq.n	8003532 <dir_find+0x1a2>
						sum = dp->dir[LDIR_Chksum];
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351a:	7b5b      	ldrb	r3, [r3, #13]
 800351c:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800351e:	7fbb      	ldrb	r3, [r7, #30]
 8003520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003524:	77bb      	strb	r3, [r7, #30]
 8003526:	7fbb      	ldrb	r3, [r7, #30]
 8003528:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8003532:	7fba      	ldrb	r2, [r7, #30]
 8003534:	7f7b      	ldrb	r3, [r7, #29]
 8003536:	429a      	cmp	r2, r3
 8003538:	d115      	bne.n	8003566 <dir_find+0x1d6>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353e:	330d      	adds	r3, #13
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	7f3a      	ldrb	r2, [r7, #28]
 8003544:	429a      	cmp	r2, r3
 8003546:	d10e      	bne.n	8003566 <dir_find+0x1d6>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003550:	4619      	mov	r1, r3
 8003552:	4610      	mov	r0, r2
 8003554:	f7ff f956 	bl	8002804 <cmp_lfn>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <dir_find+0x1d6>
 800355e:	7f7b      	ldrb	r3, [r7, #29]
 8003560:	3b01      	subs	r3, #1
 8003562:	b2db      	uxtb	r3, r3
 8003564:	e000      	b.n	8003568 <dir_find+0x1d8>
 8003566:	23ff      	movs	r3, #255	; 0xff
 8003568:	777b      	strb	r3, [r7, #29]
 800356a:	e024      	b.n	80035b6 <dir_find+0x226>
				}
			} else {					/* An SFN entry is found */
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800356c:	7f7b      	ldrb	r3, [r7, #29]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d109      	bne.n	8003586 <dir_find+0x1f6>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff fb21 	bl	8002bbe <sum_sfn>
 800357c:	4603      	mov	r3, r0
 800357e:	461a      	mov	r2, r3
 8003580:	7f3b      	ldrb	r3, [r7, #28]
 8003582:	4293      	cmp	r3, r2
 8003584:	d024      	beq.n	80035d0 <dir_find+0x240>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10a      	bne.n	80035aa <dir_find+0x21a>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3340      	adds	r3, #64	; 0x40
 800359c:	220b      	movs	r2, #11
 800359e:	4619      	mov	r1, r3
 80035a0:	f7fd ff5f 	bl	8001462 <mem_cmp>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d014      	beq.n	80035d4 <dir_find+0x244>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80035aa:	23ff      	movs	r3, #255	; 0xff
 80035ac:	777b      	strb	r3, [r7, #29]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f04f 32ff 	mov.w	r2, #4294967295
 80035b4:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80035b6:	2100      	movs	r1, #0
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7fe ffe3 	bl	8002584 <dir_next>
 80035be:	4603      	mov	r3, r0
 80035c0:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 80035c2:	7ffb      	ldrb	r3, [r7, #31]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f43f af65 	beq.w	8003494 <dir_find+0x104>
 80035ca:	e004      	b.n	80035d6 <dir_find+0x246>
		if (res != FR_OK) break;
 80035cc:	bf00      	nop
 80035ce:	e002      	b.n	80035d6 <dir_find+0x246>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80035d0:	bf00      	nop
 80035d2:	e000      	b.n	80035d6 <dir_find+0x246>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80035d4:	bf00      	nop

	return res;
 80035d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3724      	adds	r7, #36	; 0x24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd90      	pop	{r4, r7, pc}

080035e0 <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 80035e0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80035e4:	b0a0      	sub	sp, #128	; 0x80
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	66fb      	str	r3, [r7, #108]	; 0x6c
#if FF_USE_LFN		/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80035f6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <dir_register+0x22>
 80035fe:	2306      	movs	r3, #6
 8003600:	e19a      	b.n	8003938 <dir_register+0x358>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8003602:	2300      	movs	r3, #0
 8003604:	677b      	str	r3, [r7, #116]	; 0x74
 8003606:	e002      	b.n	800360e <dir_register+0x2e>
 8003608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800360a:	3301      	adds	r3, #1
 800360c:	677b      	str	r3, [r7, #116]	; 0x74
 800360e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	4413      	add	r3, r2
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f4      	bne.n	8003608 <dir_register+0x28>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800361e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b04      	cmp	r3, #4
 8003624:	f040 80ac 	bne.w	8003780 <dir_register+0x1a0>
		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8003628:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800362a:	330e      	adds	r3, #14
 800362c:	4aa8      	ldr	r2, [pc, #672]	; (80038d0 <dir_register+0x2f0>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	08db      	lsrs	r3, r3, #3
 8003634:	3302      	adds	r3, #2
 8003636:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate directory entries */
 8003638:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff f847 	bl	80026ce <dir_alloc>
 8003640:	4603      	mov	r3, r0
 8003642:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 8003646:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <dir_register+0x74>
 800364e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003652:	e171      	b.n	8003938 <dir_register+0x358>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003658:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800365a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800365e:	3b01      	subs	r3, #1
 8003660:	015b      	lsls	r3, r3, #5
 8003662:	1ad2      	subs	r2, r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	79db      	ldrb	r3, [r3, #7]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b00      	cmp	r3, #0
 8003672:	d07b      	beq.n	800376c <dir_register+0x18c>
			dp->obj.stat &= ~4;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	79db      	ldrb	r3, [r3, #7]
 8003678:	f023 0304 	bic.w	r3, r3, #4
 800367c:	b2da      	uxtb	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	71da      	strb	r2, [r3, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4618      	mov	r0, r3
 8003686:	f7fe fbeb 	bl	8001e60 <fill_first_frag>
 800368a:	4603      	mov	r3, r0
 800368c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8003690:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003694:	2b00      	cmp	r3, #0
 8003696:	d002      	beq.n	800369e <dir_register+0xbe>
 8003698:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800369c:	e14c      	b.n	8003938 <dir_register+0x358>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a4:	f04f 32ff 	mov.w	r2, #4294967295
 80036a8:	4619      	mov	r1, r3
 80036aa:	f7fe fc08 	bl	8001ebe <fill_last_frag>
 80036ae:	4603      	mov	r3, r0
 80036b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 80036b4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <dir_register+0xe2>
 80036bc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80036c0:	e13a      	b.n	8003938 <dir_register+0x358>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d050      	beq.n	800376c <dir_register+0x18c>
				DIR dj;

				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	f107 0308 	add.w	r3, r7, #8
 80036d0:	4611      	mov	r1, r2
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff fc91 	bl	8002ffa <load_obj_xdir>
 80036d8:	4603      	mov	r3, r0
 80036da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) return res;
 80036de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <dir_register+0x10c>
 80036e6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80036ea:	e125      	b.n	8003938 <dir_register+0x358>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);			/* Increase the directory size by cluster size */
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 80036f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f4:	895b      	ldrh	r3, [r3, #10]
 80036f6:	025b      	lsls	r3, r3, #9
 80036f8:	469b      	mov	fp, r3
 80036fa:	f04f 0c00 	mov.w	ip, #0
 80036fe:	eb1b 0301 	adds.w	r3, fp, r1
 8003702:	eb4c 0402 	adc.w	r4, ip, r2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	e9c2 3404 	strd	r3, r4, [r2, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);	/* Update the allocation status */
 800370c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800371a:	461a      	mov	r2, r3
 800371c:	4623      	mov	r3, r4
 800371e:	4608      	mov	r0, r1
 8003720:	f7fd fddd 	bl	80012de <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8003724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003732:	461a      	mov	r2, r3
 8003734:	4623      	mov	r3, r4
 8003736:	4608      	mov	r0, r1
 8003738:	f7fd fdd1 	bl	80012de <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	79da      	ldrb	r2, [r3, #7]
 8003740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	3321      	adds	r3, #33	; 0x21
 8003746:	f042 0201 	orr.w	r2, r2, #1
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	701a      	strb	r2, [r3, #0]
				res = store_xdir(&dj);				/* Store the object status */
 800374e:	f107 0308 	add.w	r3, r7, #8
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff fc91 	bl	800307a <store_xdir>
 8003758:	4603      	mov	r3, r0
 800375a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) return res;
 800375e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003762:	2b00      	cmp	r3, #0
 8003764:	d002      	beq.n	800376c <dir_register+0x18c>
 8003766:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800376a:	e0e5      	b.n	8003938 <dir_register+0x358>
			}
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800376c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	4619      	mov	r1, r3
 8003776:	4610      	mov	r0, r2
 8003778:	f7ff fcda 	bl	8003130 <create_xdir>
		return FR_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	e0db      	b.n	8003938 <dir_register+0x358>
	}
#endif
	/* On the FAT/FAT32 volume */
	mem_cpy(sn, dp->fn, 12);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8003786:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800378a:	220c      	movs	r2, #12
 800378c:	4618      	mov	r0, r3
 800378e:	f7fd fe2d 	bl	80013ec <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8003792:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d033      	beq.n	8003806 <dir_register+0x226>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2240      	movs	r2, #64	; 0x40
 80037a2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 80037a6:	2301      	movs	r3, #1
 80037a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80037aa:	e016      	b.n	80037da <dir_register+0x1fa>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80037b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80037ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037bc:	f7ff f95c 	bl	8002a78 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff fde5 	bl	8003390 <dir_find>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 80037cc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d106      	bne.n	80037e2 <dir_register+0x202>
		for (n = 1; n < 100; n++) {
 80037d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037d6:	3301      	adds	r3, #1
 80037d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80037da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037dc:	2b63      	cmp	r3, #99	; 0x63
 80037de:	d9e5      	bls.n	80037ac <dir_register+0x1cc>
 80037e0:	e000      	b.n	80037e4 <dir_register+0x204>
			if (res != FR_OK) break;
 80037e2:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80037e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037e6:	2b64      	cmp	r3, #100	; 0x64
 80037e8:	d101      	bne.n	80037ee <dir_register+0x20e>
 80037ea:	2307      	movs	r3, #7
 80037ec:	e0a4      	b.n	8003938 <dir_register+0x358>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80037ee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d002      	beq.n	80037fc <dir_register+0x21c>
 80037f6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80037fa:	e09d      	b.n	8003938 <dir_register+0x358>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80037fc:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8003806:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d007      	beq.n	8003822 <dir_register+0x242>
 8003812:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003814:	330c      	adds	r3, #12
 8003816:	4a2f      	ldr	r2, [pc, #188]	; (80038d4 <dir_register+0x2f4>)
 8003818:	fba2 2303 	umull	r2, r3, r2, r3
 800381c:	089b      	lsrs	r3, r3, #2
 800381e:	3301      	adds	r3, #1
 8003820:	e000      	b.n	8003824 <dir_register+0x244>
 8003822:	2301      	movs	r3, #1
 8003824:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8003826:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7fe ff50 	bl	80026ce <dir_alloc>
 800382e:	4603      	mov	r3, r0
 8003830:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8003834:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003838:	2b00      	cmp	r3, #0
 800383a:	d14e      	bne.n	80038da <dir_register+0x2fa>
 800383c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800383e:	3b01      	subs	r3, #1
 8003840:	673b      	str	r3, [r7, #112]	; 0x70
 8003842:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003844:	2b00      	cmp	r3, #0
 8003846:	d048      	beq.n	80038da <dir_register+0x2fa>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800384c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800384e:	015b      	lsls	r3, r3, #5
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	4619      	mov	r1, r3
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7fe fe0f 	bl	8002478 <dir_sdi>
 800385a:	4603      	mov	r3, r0
 800385c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8003860:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003864:	2b00      	cmp	r3, #0
 8003866:	d138      	bne.n	80038da <dir_register+0x2fa>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3340      	adds	r3, #64	; 0x40
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff f9a6 	bl	8002bbe <sum_sfn>
 8003872:	4603      	mov	r3, r0
 8003874:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387c:	4619      	mov	r1, r3
 800387e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003880:	f7fd ff34 	bl	80016ec <move_window>
 8003884:	4603      	mov	r3, r0
 8003886:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800388a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800388e:	2b00      	cmp	r3, #0
 8003890:	d122      	bne.n	80038d8 <dir_register+0x2f8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8003892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003894:	68d8      	ldr	r0, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800389a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800389c:	b2da      	uxtb	r2, r3
 800389e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80038a2:	f7ff f881 	bl	80029a8 <put_lfn>
				fs->wflag = 1;
 80038a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a8:	2201      	movs	r2, #1
 80038aa:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80038ac:	2100      	movs	r1, #0
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7fe fe68 	bl	8002584 <dir_next>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 80038ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10b      	bne.n	80038da <dir_register+0x2fa>
 80038c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038c4:	3b01      	subs	r3, #1
 80038c6:	673b      	str	r3, [r7, #112]	; 0x70
 80038c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1d4      	bne.n	8003878 <dir_register+0x298>
 80038ce:	e004      	b.n	80038da <dir_register+0x2fa>
 80038d0:	88888889 	.word	0x88888889
 80038d4:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 80038d8:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80038da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d128      	bne.n	8003934 <dir_register+0x354>
		res = move_window(fs, dp->sect);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e6:	4619      	mov	r1, r3
 80038e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80038ea:	f7fd feff 	bl	80016ec <move_window>
 80038ee:	4603      	mov	r3, r0
 80038f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 80038f4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d11b      	bne.n	8003934 <dir_register+0x354>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003900:	2220      	movs	r2, #32
 8003902:	2100      	movs	r1, #0
 8003904:	4618      	mov	r0, r3
 8003906:	f7fd fd92 	bl	800142e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3340      	adds	r3, #64	; 0x40
 8003912:	220b      	movs	r2, #11
 8003914:	4619      	mov	r1, r3
 8003916:	f7fd fd69 	bl	80013ec <mem_cpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003924:	330c      	adds	r3, #12
 8003926:	f002 0218 	and.w	r2, r2, #24
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800392e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003930:	2201      	movs	r2, #1
 8003932:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8003934:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003938:	4618      	mov	r0, r3
 800393a:	3780      	adds	r7, #128	; 0x80
 800393c:	46bd      	mov	sp, r7
 800393e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003942:	bf00      	nop

08003944 <dir_remove>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp					/* Directory object pointing the entry to be removed */
)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	613b      	str	r3, [r7, #16]
#if FF_USE_LFN		/* LFN configuration */
	DWORD last = dp->dptr;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003960:	d007      	beq.n	8003972 <dir_remove+0x2e>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003966:	4619      	mov	r1, r3
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7fe fd85 	bl	8002478 <dir_sdi>
 800396e:	4603      	mov	r3, r0
 8003970:	e000      	b.n	8003974 <dir_remove+0x30>
 8003972:	2300      	movs	r3, #0
 8003974:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8003976:	7dfb      	ldrb	r3, [r7, #23]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d136      	bne.n	80039ea <dir_remove+0xa6>
		do {
			res = move_window(fs, dp->sect);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003980:	4619      	mov	r1, r3
 8003982:	6938      	ldr	r0, [r7, #16]
 8003984:	f7fd feb2 	bl	80016ec <move_window>
 8003988:	4603      	mov	r3, r0
 800398a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800398c:	7dfb      	ldrb	r3, [r7, #23]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d123      	bne.n	80039da <dir_remove+0x96>
			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b04      	cmp	r3, #4
 8003998:	d109      	bne.n	80039ae <dir_remove+0x6a>
				dp->dir[XDIR_Type] &= 0x7F;	/* Clear the entry InUse flag. */
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399e:	781a      	ldrb	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	701a      	strb	r2, [r3, #0]
 80039ac:	e003      	b.n	80039b6 <dir_remove+0x72>
			} else {									/* On the FAT/FAT32 volume */
				dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'. */
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b2:	22e5      	movs	r2, #229	; 0xe5
 80039b4:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	2201      	movs	r2, #1
 80039ba:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d90b      	bls.n	80039de <dir_remove+0x9a>
			res = dir_next(dp, 0);	/* Next entry */
 80039c6:	2100      	movs	r1, #0
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7fe fddb 	bl	8002584 <dir_next>
 80039ce:	4603      	mov	r3, r0
 80039d0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 80039d2:	7dfb      	ldrb	r3, [r7, #23]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0d1      	beq.n	800397c <dir_remove+0x38>
 80039d8:	e002      	b.n	80039e0 <dir_remove+0x9c>
			if (res != FR_OK) break;
 80039da:	bf00      	nop
 80039dc:	e000      	b.n	80039e0 <dir_remove+0x9c>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80039de:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 80039e0:	7dfb      	ldrb	r3, [r7, #23]
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d101      	bne.n	80039ea <dir_remove+0xa6>
 80039e6:	2302      	movs	r3, #2
 80039e8:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
		fs->wflag = 1;
	}
#endif

	return res;
 80039ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <get_fileinfo>:

static void get_fileinfo (
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno		/* Pointer to the file information to be filled */
)
{
 80039f4:	b590      	push	{r4, r7, lr}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
	UINT si, di;
#if FF_USE_LFN
	WCHAR wc, hs;
	FATFS *fs = dp->obj.fs;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	60bb      	str	r3, [r7, #8]
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2200      	movs	r2, #0
 8003a08:	769a      	strb	r2, [r3, #26]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 810f 	beq.w	8003c32 <get_fileinfo+0x23e>

#if FF_USE_LFN		/* LFN configuration */
#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	d106      	bne.n	8003a2a <get_fileinfo+0x36>
		get_xfileinfo(fs->dirbuf, fno);
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	6839      	ldr	r1, [r7, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7ff f953 	bl	8002cce <get_xfileinfo>
		return;
 8003a28:	e104      	b.n	8003c34 <get_fileinfo+0x240>
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a32:	d04e      	beq.n	8003ad2 <get_fileinfo+0xde>
			si = di = hs = 0;
 8003a34:	2300      	movs	r3, #0
 8003a36:	81bb      	strh	r3, [r7, #12]
 8003a38:	2300      	movs	r3, #0
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	617b      	str	r3, [r7, #20]
			while (fs->lfnbuf[si] != 0) {
 8003a40:	e034      	b.n	8003aac <get_fileinfo+0xb8>
				wc = fs->lfnbuf[si++];		/* Get an LFN character (UTF-16) */
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	1c59      	adds	r1, r3, #1
 8003a4a:	6179      	str	r1, [r7, #20]
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	4413      	add	r3, r2
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	81fb      	strh	r3, [r7, #14]
				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 8003a54:	89bb      	ldrh	r3, [r7, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10a      	bne.n	8003a70 <get_fileinfo+0x7c>
 8003a5a:	89fb      	ldrh	r3, [r7, #14]
 8003a5c:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8003a60:	d306      	bcc.n	8003a70 <get_fileinfo+0x7c>
 8003a62:	89fb      	ldrh	r3, [r7, #14]
 8003a64:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8003a68:	d202      	bcs.n	8003a70 <get_fileinfo+0x7c>
					hs = wc; continue;		/* Get low surrogate */
 8003a6a:	89fb      	ldrh	r3, [r7, #14]
 8003a6c:	81bb      	strh	r3, [r7, #12]
 8003a6e:	e01d      	b.n	8003aac <get_fileinfo+0xb8>
				}
				wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in UTF-16 or UTF-8 encoding */
 8003a70:	89bb      	ldrh	r3, [r7, #12]
 8003a72:	041a      	lsls	r2, r3, #16
 8003a74:	89fb      	ldrh	r3, [r7, #14]
 8003a76:	ea42 0003 	orr.w	r0, r2, r3
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	3318      	adds	r3, #24
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	4413      	add	r3, r2
 8003a82:	1c99      	adds	r1, r3, #2
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f7fd fdba 	bl	8001604 <put_utf>
 8003a90:	4603      	mov	r3, r0
 8003a92:	81fb      	strh	r3, [r7, #14]
				if (wc == 0) { di = 0; break; }	/* Invalid char or buffer overflow? */
 8003a94:	89fb      	ldrh	r3, [r7, #14]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d102      	bne.n	8003aa0 <get_fileinfo+0xac>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	e00d      	b.n	8003abc <get_fileinfo+0xc8>
				di += wc;
 8003aa0:	89fb      	ldrh	r3, [r7, #14]
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
				hs = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	81bb      	strh	r3, [r7, #12]
			while (fs->lfnbuf[si] != 0) {
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	68da      	ldr	r2, [r3, #12]
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	4413      	add	r3, r2
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1c2      	bne.n	8003a42 <get_fileinfo+0x4e>
			}
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
 8003abc:	89bb      	ldrh	r3, [r7, #12]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <get_fileinfo+0xd2>
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	613b      	str	r3, [r7, #16]
			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4413      	add	r3, r2
 8003acc:	331a      	adds	r3, #26
 8003ace:	2200      	movs	r2, #0
 8003ad0:	701a      	strb	r2, [r3, #0]
		}
	}

	si = di = 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	617b      	str	r3, [r7, #20]
	while (si < 11) {		/* Get SFN from SFN entry */
 8003ada:	e026      	b.n	8003b2a <get_fileinfo+0x136>
		wc = dp->dir[si++];			/* Get a char */
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	1c59      	adds	r1, r3, #1
 8003ae4:	6179      	str	r1, [r7, #20]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	81fb      	strh	r3, [r7, #14]
		if (wc == ' ') continue;	/* Skip padding spaces */
 8003aec:	89fb      	ldrh	r3, [r7, #14]
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	d100      	bne.n	8003af4 <get_fileinfo+0x100>
 8003af2:	e01a      	b.n	8003b2a <get_fileinfo+0x136>
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
 8003af4:	89fb      	ldrh	r3, [r7, #14]
 8003af6:	2b05      	cmp	r3, #5
 8003af8:	d101      	bne.n	8003afe <get_fileinfo+0x10a>
 8003afa:	23e5      	movs	r3, #229	; 0xe5
 8003afc:	81fb      	strh	r3, [r7, #14]
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	2b09      	cmp	r3, #9
 8003b02:	d109      	bne.n	8003b18 <get_fileinfo+0x124>
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	2b0b      	cmp	r3, #11
 8003b08:	d806      	bhi.n	8003b18 <get_fileinfo+0x124>
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	613a      	str	r2, [r7, #16]
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	4413      	add	r3, r2
 8003b14:	222e      	movs	r2, #46	; 0x2e
 8003b16:	735a      	strb	r2, [r3, #13]
		if (wc == 0) { di = 0; break; }		/* Wrong char in the current code page? */
		wc = put_utf(wc, &fno->altname[di], FF_SFN_BUF - di);	/* Store it in Unicode */
		if (wc == 0) { di = 0; break; }		/* Buffer overflow? */
		di += wc;
#else					/* ANSI/OEM output */
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	613a      	str	r2, [r7, #16]
 8003b1e:	89fa      	ldrh	r2, [r7, #14]
 8003b20:	b2d1      	uxtb	r1, r2
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	4413      	add	r3, r2
 8003b26:	460a      	mov	r2, r1
 8003b28:	735a      	strb	r2, [r3, #13]
	while (si < 11) {		/* Get SFN from SFN entry */
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2b0a      	cmp	r3, #10
 8003b2e:	d9d5      	bls.n	8003adc <get_fileinfo+0xe8>
#endif
	}
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4413      	add	r3, r2
 8003b36:	330d      	adds	r3, #13
 8003b38:	2200      	movs	r2, #0
 8003b3a:	701a      	strb	r2, [r3, #0]

	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	7e9b      	ldrb	r3, [r3, #26]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d150      	bne.n	8003be6 <get_fileinfo+0x1f2>
		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccesible */
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d107      	bne.n	8003b5a <get_fileinfo+0x166>
			fno->fname[di++] = '?';
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	613a      	str	r2, [r7, #16]
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	4413      	add	r3, r2
 8003b54:	223f      	movs	r2, #63	; 0x3f
 8003b56:	769a      	strb	r2, [r3, #26]
 8003b58:	e036      	b.n	8003bc8 <get_fileinfo+0x1d4>
		} else {
			for (si = di = 0; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	e02a      	b.n	8003bba <get_fileinfo+0x1c6>
				wc = (WCHAR)fno->altname[si];
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	4413      	add	r3, r2
 8003b6a:	330d      	adds	r3, #13
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	81fb      	strh	r3, [r7, #14]
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & ((si >= 9) ? NS_EXT : NS_BODY))) wc += 0x20;
 8003b70:	89fb      	ldrh	r3, [r7, #14]
 8003b72:	2b40      	cmp	r3, #64	; 0x40
 8003b74:	d913      	bls.n	8003b9e <get_fileinfo+0x1aa>
 8003b76:	89fb      	ldrh	r3, [r7, #14]
 8003b78:	2b5a      	cmp	r3, #90	; 0x5a
 8003b7a:	d810      	bhi.n	8003b9e <get_fileinfo+0x1aa>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b80:	330c      	adds	r3, #12
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	461a      	mov	r2, r3
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d901      	bls.n	8003b90 <get_fileinfo+0x19c>
 8003b8c:	2310      	movs	r3, #16
 8003b8e:	e000      	b.n	8003b92 <get_fileinfo+0x19e>
 8003b90:	2308      	movs	r3, #8
 8003b92:	4013      	ands	r3, r2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <get_fileinfo+0x1aa>
 8003b98:	89fb      	ldrh	r3, [r7, #14]
 8003b9a:	3320      	adds	r3, #32
 8003b9c:	81fb      	strh	r3, [r7, #14]
				fno->fname[di] = (TCHAR)wc;
 8003b9e:	89fb      	ldrh	r3, [r7, #14]
 8003ba0:	b2d9      	uxtb	r1, r3
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	331a      	adds	r3, #26
 8003baa:	460a      	mov	r2, r1
 8003bac:	701a      	strb	r2, [r3, #0]
			for (si = di = 0; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	330d      	adds	r3, #13
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1cd      	bne.n	8003b64 <get_fileinfo+0x170>
			}
		}
		fno->fname[di] = 0;	/* Terminate the LFN */
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	4413      	add	r3, r2
 8003bce:	331a      	adds	r3, #26
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd8:	330c      	adds	r3, #12
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d102      	bne.n	8003be6 <get_fileinfo+0x1f2>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	2200      	movs	r2, #0
 8003be4:	735a      	strb	r2, [r3, #13]
		fno->fname[di++] = c;
	}
	fno->fname[di] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bea:	7ada      	ldrb	r2, [r3, #11]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf4:	331c      	adds	r3, #28
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fd fa4a 	bl	8001090 <ld_dword>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f04f 0400 	mov.w	r4, #0
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	e9c2 3400 	strd	r3, r4, [r2]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0c:	3316      	adds	r3, #22
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fd fa26 	bl	8001060 <ld_word>
 8003c14:	4603      	mov	r3, r0
 8003c16:	461a      	mov	r2, r3
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c20:	3318      	adds	r3, #24
 8003c22:	4618      	mov	r0, r3
 8003c24:	f7fd fa1c 	bl	8001060 <ld_word>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	811a      	strh	r2, [r3, #8]
 8003c30:	e000      	b.n	8003c34 <get_fileinfo+0x240>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8003c32:	bf00      	nop
}
 8003c34:	371c      	adds	r7, #28
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd90      	pop	{r4, r7, pc}
	...

08003c3c <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	; 0x28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
	UINT i, ni, si, di;
	const TCHAR *p;


	/* Create LFN into LFN working buffer */
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	60bb      	str	r3, [r7, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]
	for (;;) {
		uc = tchar2uni(&p);			/* Get a character */
 8003c58:	f107 0308 	add.w	r3, r7, #8
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fd fc8c 	bl	800157a <tchar2uni>
 8003c62:	60f8      	str	r0, [r7, #12]
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6a:	d101      	bne.n	8003c70 <create_name+0x34>
 8003c6c:	2306      	movs	r3, #6
 8003c6e:	e1f7      	b.n	8004060 <create_name+0x424>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c76:	d309      	bcc.n	8003c8c <create_name+0x50>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	0c19      	lsrs	r1, r3, #16
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	617a      	str	r2, [r7, #20]
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	4413      	add	r3, r2
 8003c88:	b28a      	uxth	r2, r1
 8003c8a:	801a      	strh	r2, [r3, #0]
		wc = (WCHAR)uc;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is found */
 8003c90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c92:	2b1f      	cmp	r3, #31
 8003c94:	d923      	bls.n	8003cde <create_name+0xa2>
 8003c96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c98:	2b2f      	cmp	r3, #47	; 0x2f
 8003c9a:	d020      	beq.n	8003cde <create_name+0xa2>
 8003c9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c9e:	2b5c      	cmp	r3, #92	; 0x5c
 8003ca0:	d01d      	beq.n	8003cde <create_name+0xa2>
		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8003ca2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ca4:	2b7f      	cmp	r3, #127	; 0x7f
 8003ca6:	d809      	bhi.n	8003cbc <create_name+0x80>
 8003ca8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003caa:	4619      	mov	r1, r3
 8003cac:	48a9      	ldr	r0, [pc, #676]	; (8003f54 <create_name+0x318>)
 8003cae:	f7fd fbff 	bl	80014b0 <chk_chr>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <create_name+0x80>
 8003cb8:	2306      	movs	r3, #6
 8003cba:	e1d1      	b.n	8004060 <create_name+0x424>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2bfe      	cmp	r3, #254	; 0xfe
 8003cc0:	d901      	bls.n	8003cc6 <create_name+0x8a>
 8003cc2:	2306      	movs	r3, #6
 8003cc4:	e1cc      	b.n	8004060 <create_name+0x424>
		lfn[di++] = wc;					/* Store the Unicode character */
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	1c5a      	adds	r2, r3, #1
 8003cca:	617a      	str	r2, [r7, #20]
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cd4:	801a      	strh	r2, [r3, #0]
		uc = tchar2uni(&p);			/* Get a character */
 8003cd6:	e7bf      	b.n	8003c58 <create_name+0x1c>
	}
	while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	60bb      	str	r3, [r7, #8]
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b2f      	cmp	r3, #47	; 0x2f
 8003ce4:	d0f8      	beq.n	8003cd8 <create_name+0x9c>
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b5c      	cmp	r3, #92	; 0x5c
 8003cec:	d0f4      	beq.n	8003cd8 <create_name+0x9c>
	*path = p;							/* Return pointer to the next segment */
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	601a      	str	r2, [r3, #0]
	cf = (wc < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8003cf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cf6:	2b1f      	cmp	r3, #31
 8003cf8:	d801      	bhi.n	8003cfe <create_name+0xc2>
 8003cfa:	2304      	movs	r3, #4
 8003cfc:	e000      	b.n	8003d00 <create_name+0xc4>
 8003cfe:	2300      	movs	r3, #0
 8003d00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

#if FF_FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d109      	bne.n	8003d1e <create_name+0xe2>
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003d10:	3b01      	subs	r3, #1
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	4413      	add	r3, r2
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	2b2e      	cmp	r3, #46	; 0x2e
 8003d1c:	d016      	beq.n	8003d4c <create_name+0x110>
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d14e      	bne.n	8003dc2 <create_name+0x186>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4413      	add	r3, r2
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	2b2e      	cmp	r3, #46	; 0x2e
 8003d36:	d144      	bne.n	8003dc2 <create_name+0x186>
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003d3e:	3b02      	subs	r3, #2
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4413      	add	r3, r2
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	2b2e      	cmp	r3, #46	; 0x2e
 8003d4a:	d13a      	bne.n	8003dc2 <create_name+0x186>
		lfn[di] = 0;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	4413      	add	r3, r2
 8003d54:	2200      	movs	r2, #0
 8003d56:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++) {		/* Create dot name for SFN entry */
 8003d58:	2300      	movs	r3, #0
 8003d5a:	623b      	str	r3, [r7, #32]
 8003d5c:	e00f      	b.n	8003d7e <create_name+0x142>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8003d5e:	6a3a      	ldr	r2, [r7, #32]
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d201      	bcs.n	8003d6a <create_name+0x12e>
 8003d66:	212e      	movs	r1, #46	; 0x2e
 8003d68:	e000      	b.n	8003d6c <create_name+0x130>
 8003d6a:	2120      	movs	r1, #32
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	4413      	add	r3, r2
 8003d72:	3340      	adds	r3, #64	; 0x40
 8003d74:	460a      	mov	r2, r1
 8003d76:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++) {		/* Create dot name for SFN entry */
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	623b      	str	r3, [r7, #32]
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	2b0a      	cmp	r3, #10
 8003d82:	d9ec      	bls.n	8003d5e <create_name+0x122>
		}
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 8003d84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003d88:	f043 0320 	orr.w	r3, r3, #32
 8003d8c:	b2d9      	uxtb	r1, r3
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	4413      	add	r3, r2
 8003d94:	3340      	adds	r3, #64	; 0x40
 8003d96:	460a      	mov	r2, r1
 8003d98:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	e160      	b.n	8004060 <create_name+0x424>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		wc = lfn[di - 1];
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003da4:	3b01      	subs	r3, #1
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4413      	add	r3, r2
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc != ' ' && wc != '.') break;
 8003db0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003db2:	2b20      	cmp	r3, #32
 8003db4:	d002      	beq.n	8003dbc <create_name+0x180>
 8003db6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003db8:	2b2e      	cmp	r3, #46	; 0x2e
 8003dba:	d106      	bne.n	8003dca <create_name+0x18e>
		di--;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1ea      	bne.n	8003d9e <create_name+0x162>
 8003dc8:	e000      	b.n	8003dcc <create_name+0x190>
		if (wc != ' ' && wc != '.') break;
 8003dca:	bf00      	nop
	}
	lfn[di] = 0;							/* LFN is created into the working buffer */
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <create_name+0x1a6>
 8003dde:	2306      	movs	r3, #6
 8003de0:	e13e      	b.n	8004060 <create_name+0x424>

	/* Create SFN in directory form */
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 8003de2:	2300      	movs	r3, #0
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	e002      	b.n	8003dee <create_name+0x1b2>
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	3301      	adds	r3, #1
 8003dec:	61bb      	str	r3, [r7, #24]
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4413      	add	r3, r2
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	2b20      	cmp	r3, #32
 8003dfa:	d0f5      	beq.n	8003de8 <create_name+0x1ac>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d106      	bne.n	8003e10 <create_name+0x1d4>
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4413      	add	r3, r2
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	2b2e      	cmp	r3, #46	; 0x2e
 8003e0e:	d109      	bne.n	8003e24 <create_name+0x1e8>
 8003e10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003e14:	f043 0303 	orr.w	r3, r3, #3
 8003e18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 8003e1c:	e002      	b.n	8003e24 <create_name+0x1e8>
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	3b01      	subs	r3, #1
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d009      	beq.n	8003e3e <create_name+0x202>
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003e30:	3b01      	subs	r3, #1
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	4413      	add	r3, r2
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	2b2e      	cmp	r3, #46	; 0x2e
 8003e3c:	d1ef      	bne.n	8003e1e <create_name+0x1e2>

	mem_set(dp->fn, ' ', 11);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	3340      	adds	r3, #64	; 0x40
 8003e42:	220b      	movs	r2, #11
 8003e44:	2120      	movs	r1, #32
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fd faf1 	bl	800142e <mem_set>
	i = b = 0; ni = 8;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003e52:	2300      	movs	r3, #0
 8003e54:	623b      	str	r3, [r7, #32]
 8003e56:	2308      	movs	r3, #8
 8003e58:	61fb      	str	r3, [r7, #28]
	for (;;) {
		wc = lfn[si++];					/* Get an LFN character */
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	61ba      	str	r2, [r7, #24]
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4413      	add	r3, r2
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (wc == 0) break;				/* Break on end of the LFN */
 8003e6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 80ad 	beq.w	8003fcc <create_name+0x390>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 8003e72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e74:	2b20      	cmp	r3, #32
 8003e76:	d006      	beq.n	8003e86 <create_name+0x24a>
 8003e78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e7a:	2b2e      	cmp	r3, #46	; 0x2e
 8003e7c:	d10a      	bne.n	8003e94 <create_name+0x258>
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d006      	beq.n	8003e94 <create_name+0x258>
			cf |= NS_LOSS | NS_LFN;
 8003e86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003e8a:	f043 0303 	orr.w	r3, r3, #3
 8003e8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			continue;
 8003e92:	e09a      	b.n	8003fca <create_name+0x38e>
		}

		if (i >= ni || si == di) {		/* End of field? */
 8003e94:	6a3a      	ldr	r2, [r7, #32]
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d203      	bcs.n	8003ea4 <create_name+0x268>
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d123      	bne.n	8003eec <create_name+0x2b0>
			if (ni == 11) {				/* Name extension overflow? */
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	2b0b      	cmp	r3, #11
 8003ea8:	d106      	bne.n	8003eb8 <create_name+0x27c>
				cf |= NS_LOSS | NS_LFN;
 8003eaa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003eae:	f043 0303 	orr.w	r3, r3, #3
 8003eb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				break;
 8003eb6:	e08c      	b.n	8003fd2 <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d005      	beq.n	8003ecc <create_name+0x290>
 8003ec0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003ec4:	f043 0303 	orr.w	r3, r3, #3
 8003ec8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;						/* No name extension? */
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d87d      	bhi.n	8003fd0 <create_name+0x394>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	61bb      	str	r3, [r7, #24]
 8003ed8:	2308      	movs	r3, #8
 8003eda:	623b      	str	r3, [r7, #32]
 8003edc:	230b      	movs	r3, #11
 8003ede:	61fb      	str	r3, [r7, #28]
 8003ee0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			continue;
 8003eea:	e06e      	b.n	8003fca <create_name+0x38e>
		}

		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
 8003eec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003eee:	2b7f      	cmp	r3, #127	; 0x7f
 8003ef0:	d911      	bls.n	8003f16 <create_name+0x2da>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 8003ef2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003ef6:	f043 0302 	orr.w	r3, r3, #2
 8003efa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			}
#elif FF_CODE_PAGE < 900	/* SBCS cfg */
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
#else						/* DBCS cfg */
			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Upper convert ==> ANSI/OEM code */
 8003efe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f00:	4618      	mov	r0, r3
 8003f02:	f002 fb89 	bl	8006618 <ff_wtoupper>
 8003f06:	4603      	mov	r3, r0
 8003f08:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f002 facf 	bl	80064b0 <ff_uni2oem>
 8003f12:	4603      	mov	r3, r0
 8003f14:	84bb      	strh	r3, [r7, #36]	; 0x24
#endif
		}

		if (wc >= 0x100) {				/* Is this a DBC? */
 8003f16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f18:	2bff      	cmp	r3, #255	; 0xff
 8003f1a:	d91d      	bls.n	8003f58 <create_name+0x31c>
			if (i >= ni - 1) {			/* Field overflow? */
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	6a3a      	ldr	r2, [r7, #32]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d308      	bcc.n	8003f38 <create_name+0x2fc>
				cf |= NS_LOSS | NS_LFN;
 8003f26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f2a:	f043 0303 	orr.w	r3, r3, #3
 8003f2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				i = ni; continue;		/* Next field */
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	623b      	str	r3, [r7, #32]
 8003f36:	e048      	b.n	8003fca <create_name+0x38e>
			}
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 8003f38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f3a:	0a1b      	lsrs	r3, r3, #8
 8003f3c:	b299      	uxth	r1, r3
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	623a      	str	r2, [r7, #32]
 8003f44:	b2c9      	uxtb	r1, r1
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	4413      	add	r3, r2
 8003f4a:	460a      	mov	r2, r1
 8003f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f50:	e031      	b.n	8003fb6 <create_name+0x37a>
 8003f52:	bf00      	nop
 8003f54:	08017404 	.word	0x08017404
		} else {						/* SBC */
			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
 8003f58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d007      	beq.n	8003f6e <create_name+0x332>
 8003f5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f60:	4619      	mov	r1, r3
 8003f62:	4841      	ldr	r0, [pc, #260]	; (8004068 <create_name+0x42c>)
 8003f64:	f7fd faa4 	bl	80014b0 <chk_chr>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d008      	beq.n	8003f80 <create_name+0x344>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8003f6e:	235f      	movs	r3, #95	; 0x5f
 8003f70:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003f72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f76:	f043 0303 	orr.w	r3, r3, #3
 8003f7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003f7e:	e01a      	b.n	8003fb6 <create_name+0x37a>
			} else {
				if (IsUpper(wc)) {		/* ASCII upper case? */
 8003f80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f82:	2b40      	cmp	r3, #64	; 0x40
 8003f84:	d908      	bls.n	8003f98 <create_name+0x35c>
 8003f86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f88:	2b5a      	cmp	r3, #90	; 0x5a
 8003f8a:	d805      	bhi.n	8003f98 <create_name+0x35c>
					b |= 2;
 8003f8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f90:	f043 0302 	orr.w	r3, r3, #2
 8003f94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				if (IsLower(wc)) {		/* ASCII lower case? */
 8003f98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f9a:	2b60      	cmp	r3, #96	; 0x60
 8003f9c:	d90b      	bls.n	8003fb6 <create_name+0x37a>
 8003f9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003fa0:	2b7a      	cmp	r3, #122	; 0x7a
 8003fa2:	d808      	bhi.n	8003fb6 <create_name+0x37a>
					b |= 1; wc -= 0x20;
 8003fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003fb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003fb2:	3b20      	subs	r3, #32
 8003fb4:	84bb      	strh	r3, [r7, #36]	; 0x24
				}
			}
		}
		dp->fn[i++] = (BYTE)wc;
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	623a      	str	r2, [r7, #32]
 8003fbc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fbe:	b2d1      	uxtb	r1, r2
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	460a      	mov	r2, r1
 8003fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		wc = lfn[si++];					/* Get an LFN character */
 8003fca:	e746      	b.n	8003e5a <create_name+0x21e>
		if (wc == 0) break;				/* Break on end of the LFN */
 8003fcc:	bf00      	nop
 8003fce:	e000      	b.n	8003fd2 <create_name+0x396>
			if (si > di) break;						/* No name extension? */
 8003fd0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fd8:	2be5      	cmp	r3, #229	; 0xe5
 8003fda:	d103      	bne.n	8003fe4 <create_name+0x3a8>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2205      	movs	r2, #5
 8003fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	d104      	bne.n	8003ff4 <create_name+0x3b8>
 8003fea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 8003ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ff8:	f003 030c 	and.w	r3, r3, #12
 8003ffc:	2b0c      	cmp	r3, #12
 8003ffe:	d005      	beq.n	800400c <create_name+0x3d0>
 8004000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004004:	f003 0303 	and.w	r3, r3, #3
 8004008:	2b03      	cmp	r3, #3
 800400a:	d105      	bne.n	8004018 <create_name+0x3dc>
 800400c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004010:	f043 0302 	orr.w	r3, r3, #2
 8004014:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 8004018:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d117      	bne.n	8004054 <create_name+0x418>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 8004024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <create_name+0x400>
 8004030:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004034:	f043 0310 	orr.w	r3, r3, #16
 8004038:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 800403c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d005      	beq.n	8004054 <create_name+0x418>
 8004048:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800404c:	f043 0308 	orr.w	r3, r3, #8
 8004050:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800405a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800405e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* FF_USE_LFN */
}
 8004060:	4618      	mov	r0, r3
 8004062:	3728      	adds	r7, #40	; 0x28
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	08017410 	.word	0x08017410

0800406c <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 800406c:	b590      	push	{r4, r7, lr}
 800406e:	b09b      	sub	sp, #108	; 0x6c
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	663b      	str	r3, [r7, #96]	; 0x60


#if FF_FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b2f      	cmp	r3, #47	; 0x2f
 8004082:	d00b      	beq.n	800409c <follow_path+0x30>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b5c      	cmp	r3, #92	; 0x5c
 800408a:	d007      	beq.n	800409c <follow_path+0x30>
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
 800408c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800408e:	69da      	ldr	r2, [r3, #28]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	609a      	str	r2, [r3, #8]
 8004094:	e00d      	b.n	80040b2 <follow_path+0x46>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	3301      	adds	r3, #1
 800409a:	603b      	str	r3, [r7, #0]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	2b2f      	cmp	r3, #47	; 0x2f
 80040a2:	d0f8      	beq.n	8004096 <follow_path+0x2a>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b5c      	cmp	r3, #92	; 0x5c
 80040aa:	d0f4      	beq.n	8004096 <follow_path+0x2a>
		dp->obj.sclust = 0;					/* Start from root directory */
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	609a      	str	r2, [r3, #8]
	}
#if FF_FS_EXFAT
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	61da      	str	r2, [r3, #28]
#if FF_FS_RPATH != 0
	if (fs->fs_type == FS_EXFAT && dp->obj.sclust) {	/* exFAT: Retrieve the sub-directory's status */
 80040b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b04      	cmp	r3, #4
 80040be:	d135      	bne.n	800412c <follow_path+0xc0>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d031      	beq.n	800412c <follow_path+0xc0>
		DIR dj;

		dp->obj.c_scl = fs->cdc_scl;
 80040c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040ca:	6a1a      	ldr	r2, [r3, #32]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	621a      	str	r2, [r3, #32]
		dp->obj.c_size = fs->cdc_size;
 80040d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	625a      	str	r2, [r3, #36]	; 0x24
		dp->obj.c_ofs = fs->cdc_ofs;
 80040d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	629a      	str	r2, [r3, #40]	; 0x28
		res = load_obj_xdir(&dj, &dp->obj);
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	f107 0308 	add.w	r3, r7, #8
 80040e6:	4611      	mov	r1, r2
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fe ff86 	bl	8002ffa <load_obj_xdir>
 80040ee:	4603      	mov	r3, r0
 80040f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		if (res != FR_OK) return res;
 80040f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <follow_path+0x96>
 80040fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004100:	e0a6      	b.n	8004250 <follow_path+0x1e4>
		dp->obj.objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
 8004102:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	3338      	adds	r3, #56	; 0x38
 8004108:	4618      	mov	r0, r3
 800410a:	f7fc ffc1 	bl	8001090 <ld_dword>
 800410e:	4603      	mov	r3, r0
 8004110:	f04f 0400 	mov.w	r4, #0
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	e9c2 3404 	strd	r3, r4, [r2, #16]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800411a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	3321      	adds	r3, #33	; 0x21
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	b2da      	uxtb	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	71da      	strb	r2, [r3, #7]
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b1f      	cmp	r3, #31
 8004132:	d80b      	bhi.n	800414c <follow_path+0xe0>
		dp->fn[NSFLAG] = NS_NONAME;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2280      	movs	r2, #128	; 0x80
 8004138:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800413c:	2100      	movs	r1, #0
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7fe f99a 	bl	8002478 <dir_sdi>
 8004144:	4603      	mov	r3, r0
 8004146:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800414a:	e07f      	b.n	800424c <follow_path+0x1e0>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800414c:	463b      	mov	r3, r7
 800414e:	4619      	mov	r1, r3
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7ff fd73 	bl	8003c3c <create_name>
 8004156:	4603      	mov	r3, r0
 8004158:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			if (res != FR_OK) break;
 800415c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004160:	2b00      	cmp	r3, #0
 8004162:	d16e      	bne.n	8004242 <follow_path+0x1d6>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff f913 	bl	8003390 <dir_find>
 800416a:	4603      	mov	r3, r0
 800416c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			ns = dp->fn[NSFLAG];
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8004176:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res != FR_OK) {				/* Failed to find the object */
 800417a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800417e:	2b00      	cmp	r3, #0
 8004180:	d021      	beq.n	80041c6 <follow_path+0x15a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004182:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004186:	2b04      	cmp	r3, #4
 8004188:	d15d      	bne.n	8004246 <follow_path+0x1da>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800418a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800418e:	f003 0320 	and.w	r3, r3, #32
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00d      	beq.n	80041b2 <follow_path+0x146>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8004196:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d04d      	beq.n	800423e <follow_path+0x1d2>
						dp->fn[NSFLAG] = NS_NONAME;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2280      	movs	r2, #128	; 0x80
 80041a6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
						res = FR_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80041b0:	e049      	b.n	8004246 <follow_path+0x1da>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80041b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80041b6:	f003 0304 	and.w	r3, r3, #4
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d143      	bne.n	8004246 <follow_path+0x1da>
 80041be:	2305      	movs	r3, #5
 80041c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 80041c4:	e03f      	b.n	8004246 <follow_path+0x1da>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80041c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80041ca:	f003 0304 	and.w	r3, r3, #4
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d13b      	bne.n	800424a <follow_path+0x1de>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	799b      	ldrb	r3, [r3, #6]
 80041d6:	f003 0310 	and.w	r3, r3, #16
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d103      	bne.n	80041e6 <follow_path+0x17a>
				res = FR_NO_PATH; break;
 80041de:	2305      	movs	r3, #5
 80041e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80041e4:	e032      	b.n	800424c <follow_path+0x1e0>
			}
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 80041e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d117      	bne.n	800421e <follow_path+0x1b2>
				dp->obj.c_scl = dp->obj.sclust;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	621a      	str	r2, [r3, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80041fc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	79d2      	ldrb	r2, [r2, #7]
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	625a      	str	r2, [r3, #36]	; 0x24
				dp->obj.c_ofs = dp->blk_ofs;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	629a      	str	r2, [r3, #40]	; 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4619      	mov	r1, r3
 8004216:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004218:	f7fe fec6 	bl	8002fa8 <init_alloc_info>
 800421c:	e796      	b.n	800414c <follow_path+0xe0>
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800421e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004220:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800422c:	4413      	add	r3, r2
 800422e:	4619      	mov	r1, r3
 8004230:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004232:	f7fe faa8 	bl	8002786 <ld_clust>
 8004236:	4602      	mov	r2, r0
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	609a      	str	r2, [r3, #8]
 800423c:	e786      	b.n	800414c <follow_path+0xe0>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800423e:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004240:	e784      	b.n	800414c <follow_path+0xe0>
			if (res != FR_OK) break;
 8004242:	bf00      	nop
 8004244:	e002      	b.n	800424c <follow_path+0x1e0>
				break;
 8004246:	bf00      	nop
 8004248:	e000      	b.n	800424c <follow_path+0x1e0>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800424a:	bf00      	nop
			}
		}
	}

	return res;
 800424c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004250:	4618      	mov	r0, r3
 8004252:	376c      	adds	r7, #108	; 0x6c
 8004254:	46bd      	mov	sp, r7
 8004256:	bd90      	pop	{r4, r7, pc}

08004258 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 8004258:	b480      	push	{r7}
 800425a:	b089      	sub	sp, #36	; 0x24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	TCHAR tc;
	int i, vol = -1;
 8004260:	f04f 33ff 	mov.w	r3, #4294967295
 8004264:	617b      	str	r3, [r7, #20]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	613b      	str	r3, [r7, #16]
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	61fb      	str	r3, [r7, #28]
	if (!tp) return vol;	/* Invalid path name? */
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <get_ldnumber+0x22>
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	e02e      	b.n	80042d8 <get_ldnumber+0x80>
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	61fa      	str	r2, [r7, #28]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	73fb      	strb	r3, [r7, #15]
 8004284:	7bfb      	ldrb	r3, [r7, #15]
 8004286:	2b1f      	cmp	r3, #31
 8004288:	d902      	bls.n	8004290 <get_ldnumber+0x38>
 800428a:	7bfb      	ldrb	r3, [r7, #15]
 800428c:	2b3a      	cmp	r3, #58	; 0x3a
 800428e:	d1f4      	bne.n	800427a <get_ldnumber+0x22>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	2b3a      	cmp	r3, #58	; 0x3a
 8004294:	d11c      	bne.n	80042d0 <get_ldnumber+0x78>
		i = FF_VOLUMES;
 8004296:	2301      	movs	r3, #1
 8004298:	61bb      	str	r3, [r7, #24]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b2f      	cmp	r3, #47	; 0x2f
 80042a0:	d90c      	bls.n	80042bc <get_ldnumber+0x64>
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	2b39      	cmp	r3, #57	; 0x39
 80042a8:	d808      	bhi.n	80042bc <get_ldnumber+0x64>
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	3302      	adds	r3, #2
 80042ae:	69fa      	ldr	r2, [r7, #28]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d103      	bne.n	80042bc <get_ldnumber+0x64>
			i = (int)*tp - '0';	/* Get the LD number */
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	3b30      	subs	r3, #48	; 0x30
 80042ba:	61bb      	str	r3, [r7, #24]
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	dc04      	bgt.n	80042cc <get_ldnumber+0x74>
			vol = i;		/* Drive number */
 80042c2:	69bb      	ldr	r3, [r7, #24]
 80042c4:	617b      	str	r3, [r7, #20]
			*path = tt;		/* Snip the drive prefix off */
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69fa      	ldr	r2, [r7, #28]
 80042ca:	601a      	str	r2, [r3, #0]
		}
		return vol;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	e003      	b.n	80042d8 <get_ldnumber+0x80>
		}
	}
#endif
	/* No drive prefix is found */
#if FF_FS_RPATH != 0
	vol = CurrVol;	/* Default drive is current drive */
 80042d0:	4b04      	ldr	r3, [pc, #16]	; (80042e4 <get_ldnumber+0x8c>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	617b      	str	r3, [r7, #20]
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
 80042d6:	697b      	ldr	r3, [r7, #20]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3724      	adds	r7, #36	; 0x24
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	200000ae 	.word	0x200000ae

080042e8 <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	70da      	strb	r2, [r3, #3]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f04f 32ff 	mov.w	r2, #4294967295
 80042fe:	649a      	str	r2, [r3, #72]	; 0x48
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004300:	6839      	ldr	r1, [r7, #0]
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fd f9f2 	bl	80016ec <move_window>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <check_fs+0x2a>
 800430e:	2304      	movs	r3, #4
 8004310:	e044      	b.n	800439c <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	334c      	adds	r3, #76	; 0x4c
 8004316:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800431a:	4618      	mov	r0, r3
 800431c:	f7fc fea0 	bl	8001060 <ld_word>
 8004320:	4603      	mov	r3, r0
 8004322:	461a      	mov	r2, r3
 8004324:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004328:	429a      	cmp	r2, r3
 800432a:	d001      	beq.n	8004330 <check_fs+0x48>
 800432c:	2303      	movs	r3, #3
 800432e:	e035      	b.n	800439c <check_fs+0xb4>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	334c      	adds	r3, #76	; 0x4c
 8004334:	220b      	movs	r2, #11
 8004336:	491b      	ldr	r1, [pc, #108]	; (80043a4 <check_fs+0xbc>)
 8004338:	4618      	mov	r0, r3
 800433a:	f7fd f892 	bl	8001462 <mem_cmp>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <check_fs+0x60>
 8004344:	2301      	movs	r3, #1
 8004346:	e029      	b.n	800439c <check_fs+0xb4>
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800434e:	2be9      	cmp	r3, #233	; 0xe9
 8004350:	d009      	beq.n	8004366 <check_fs+0x7e>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004358:	2beb      	cmp	r3, #235	; 0xeb
 800435a:	d004      	beq.n	8004366 <check_fs+0x7e>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004362:	2be8      	cmp	r3, #232	; 0xe8
 8004364:	d119      	bne.n	800439a <check_fs+0xb2>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	334c      	adds	r3, #76	; 0x4c
 800436a:	3336      	adds	r3, #54	; 0x36
 800436c:	2203      	movs	r2, #3
 800436e:	490e      	ldr	r1, [pc, #56]	; (80043a8 <check_fs+0xc0>)
 8004370:	4618      	mov	r0, r3
 8004372:	f7fd f876 	bl	8001462 <mem_cmp>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <check_fs+0x98>
 800437c:	2300      	movs	r3, #0
 800437e:	e00d      	b.n	800439c <check_fs+0xb4>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	334c      	adds	r3, #76	; 0x4c
 8004384:	3352      	adds	r3, #82	; 0x52
 8004386:	2205      	movs	r2, #5
 8004388:	4908      	ldr	r1, [pc, #32]	; (80043ac <check_fs+0xc4>)
 800438a:	4618      	mov	r0, r3
 800438c:	f7fd f869 	bl	8001462 <mem_cmp>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <check_fs+0xb2>
 8004396:	2300      	movs	r3, #0
 8004398:	e000      	b.n	800439c <check_fs+0xb4>
	}
	return 2;	/* Valid BS but not FAT */
 800439a:	2302      	movs	r3, #2
}
 800439c:	4618      	mov	r0, r3
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	08017418 	.word	0x08017418
 80043a8:	08017424 	.word	0x08017424
 80043ac:	08017428 	.word	0x08017428

080043b0 <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
 80043b0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80043b4:	b09c      	sub	sp, #112	; 0x70
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	60f8      	str	r0, [r7, #12]
 80043ba:	60b9      	str	r1, [r7, #8]
 80043bc:	4613      	mov	r3, r2
 80043be:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f7ff ff46 	bl	8004258 <get_ldnumber>
 80043cc:	64f8      	str	r0, [r7, #76]	; 0x4c
	if (vol < 0) return FR_INVALID_DRIVE;
 80043ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	da01      	bge.n	80043d8 <find_volume+0x28>
 80043d4:	230b      	movs	r3, #11
 80043d6:	e37b      	b.n	8004ad0 <find_volume+0x720>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 80043d8:	4ab2      	ldr	r2, [pc, #712]	; (80046a4 <find_volume+0x2f4>)
 80043da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043e0:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 80043e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <find_volume+0x3c>
 80043e8:	230c      	movs	r3, #12
 80043ea:	e371      	b.n	8004ad0 <find_volume+0x720>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043f0:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80043f2:	79fb      	ldrb	r3, [r7, #7]
 80043f4:	f023 0301 	bic.w	r3, r3, #1
 80043f8:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 80043fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d01a      	beq.n	8004438 <find_volume+0x88>
		stat = disk_status(fs->pdrv);
 8004402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004404:	785b      	ldrb	r3, [r3, #1]
 8004406:	4618      	mov	r0, r3
 8004408:	f7fc fb5e 	bl	8000ac8 <disk_status>
 800440c:	4603      	mov	r3, r0
 800440e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004412:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10c      	bne.n	8004438 <find_volume+0x88>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800441e:	79fb      	ldrb	r3, [r7, #7]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d007      	beq.n	8004434 <find_volume+0x84>
 8004424:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8004430:	230a      	movs	r3, #10
 8004432:	e34d      	b.n	8004ad0 <find_volume+0x720>
			}
			return FR_OK;				/* The filesystem object is valid */
 8004434:	2300      	movs	r3, #0
 8004436:	e34b      	b.n	8004ad0 <find_volume+0x720>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
 8004438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800443a:	2200      	movs	r2, #0
 800443c:	701a      	strb	r2, [r3, #0]
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800443e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004440:	b2da      	uxtb	r2, r3
 8004442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004444:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 8004446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004448:	785b      	ldrb	r3, [r3, #1]
 800444a:	4618      	mov	r0, r3
 800444c:	f7fc fa52 	bl	80008f4 <disk_initialize>
 8004450:	4603      	mov	r3, r0
 8004452:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004456:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004462:	2303      	movs	r3, #3
 8004464:	e334      	b.n	8004ad0 <find_volume+0x720>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d007      	beq.n	800447c <find_volume+0xcc>
 800446c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8004478:	230a      	movs	r3, #10
 800447a:	e329      	b.n	8004ad0 <find_volume+0x720>
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK (MBR) and SFD (w/o partition). */
	bsect = 0;
 800447c:	2300      	movs	r3, #0
 800447e:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8004480:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004482:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004484:	f7ff ff30 	bl	80042e8 <check_fs>
 8004488:	4603      	mov	r3, r0
 800448a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800448e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004492:	2b02      	cmp	r3, #2
 8004494:	d14b      	bne.n	800452e <find_volume+0x17e>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004496:	2300      	movs	r3, #0
 8004498:	65bb      	str	r3, [r7, #88]	; 0x58
 800449a:	e01f      	b.n	80044dc <find_volume+0x12c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800449c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800449e:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 80044a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80044aa:	4413      	add	r3, r2
 80044ac:	643b      	str	r3, [r7, #64]	; 0x40
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80044ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044b0:	3304      	adds	r3, #4
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d006      	beq.n	80044c6 <find_volume+0x116>
 80044b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ba:	3308      	adds	r3, #8
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fc fde7 	bl	8001090 <ld_dword>
 80044c2:	4602      	mov	r2, r0
 80044c4:	e000      	b.n	80044c8 <find_volume+0x118>
 80044c6:	2200      	movs	r2, #0
 80044c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80044d0:	440b      	add	r3, r1
 80044d2:	f843 2c5c 	str.w	r2, [r3, #-92]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80044d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044d8:	3301      	adds	r3, #1
 80044da:	65bb      	str	r3, [r7, #88]	; 0x58
 80044dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044de:	2b03      	cmp	r3, #3
 80044e0:	d9dc      	bls.n	800449c <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80044e2:	2300      	movs	r3, #0
 80044e4:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i != 0) i--;
 80044e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <find_volume+0x142>
 80044ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044ee:	3b01      	subs	r3, #1
 80044f0:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 80044f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80044fa:	4413      	add	r3, r2
 80044fc:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8004500:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004502:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <find_volume+0x164>
 8004508:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800450a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800450c:	f7ff feec 	bl	80042e8 <check_fs>
 8004510:	4603      	mov	r3, r0
 8004512:	e000      	b.n	8004516 <find_volume+0x166>
 8004514:	2303      	movs	r3, #3
 8004516:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800451a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800451e:	2b01      	cmp	r3, #1
 8004520:	d905      	bls.n	800452e <find_volume+0x17e>
 8004522:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004524:	3301      	adds	r3, #1
 8004526:	65bb      	str	r3, [r7, #88]	; 0x58
 8004528:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800452a:	2b03      	cmp	r3, #3
 800452c:	d9e1      	bls.n	80044f2 <find_volume+0x142>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800452e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004532:	2b04      	cmp	r3, #4
 8004534:	d101      	bne.n	800453a <find_volume+0x18a>
 8004536:	2301      	movs	r3, #1
 8004538:	e2ca      	b.n	8004ad0 <find_volume+0x720>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800453a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800453e:	2b01      	cmp	r3, #1
 8004540:	d901      	bls.n	8004546 <find_volume+0x196>
 8004542:	230d      	movs	r3, #13
 8004544:	e2c4      	b.n	8004ad0 <find_volume+0x720>

	/* An FAT volume is found (bsect). Following code initializes the filesystem object */

#if FF_FS_EXFAT
	if (fmt == 1) {
 8004546:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800454a:	2b01      	cmp	r3, #1
 800454c:	f040 813d 	bne.w	80047ca <find_volume+0x41a>
		QWORD maxlba;
		DWORD so, cv, bcl;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8004550:	230b      	movs	r3, #11
 8004552:	65bb      	str	r3, [r7, #88]	; 0x58
 8004554:	e002      	b.n	800455c <find_volume+0x1ac>
 8004556:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004558:	3301      	adds	r3, #1
 800455a:	65bb      	str	r3, [r7, #88]	; 0x58
 800455c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800455e:	2b3f      	cmp	r3, #63	; 0x3f
 8004560:	d806      	bhi.n	8004570 <find_volume+0x1c0>
 8004562:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004564:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004566:	4413      	add	r3, r2
 8004568:	334c      	adds	r3, #76	; 0x4c
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0f2      	beq.n	8004556 <find_volume+0x1a6>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8004570:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004572:	2b3f      	cmp	r3, #63	; 0x3f
 8004574:	d801      	bhi.n	800457a <find_volume+0x1ca>
 8004576:	230d      	movs	r3, #13
 8004578:	e2aa      	b.n	8004ad0 <find_volume+0x720>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 800457a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800457c:	334c      	adds	r3, #76	; 0x4c
 800457e:	3368      	adds	r3, #104	; 0x68
 8004580:	4618      	mov	r0, r3
 8004582:	f7fc fd6d 	bl	8001060 <ld_word>
 8004586:	4603      	mov	r3, r0
 8004588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800458c:	d001      	beq.n	8004592 <find_volume+0x1e2>
 800458e:	230d      	movs	r3, #13
 8004590:	e29e      	b.n	8004ad0 <find_volume+0x720>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8004592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004594:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8004598:	2b09      	cmp	r3, #9
 800459a:	d001      	beq.n	80045a0 <find_volume+0x1f0>
			return FR_NO_FILESYSTEM;
 800459c:	230d      	movs	r3, #13
 800459e:	e297      	b.n	8004ad0 <find_volume+0x720>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 80045a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a2:	334c      	adds	r3, #76	; 0x4c
 80045a4:	3348      	adds	r3, #72	; 0x48
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fc fd95 	bl	80010d6 <ld_qword>
 80045ac:	460a      	mov	r2, r1
 80045ae:	4601      	mov	r1, r0
 80045b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045b2:	469b      	mov	fp, r3
 80045b4:	f04f 0c00 	mov.w	ip, #0
 80045b8:	eb1b 0301 	adds.w	r3, fp, r1
 80045bc:	eb4c 0402 	adc.w	r4, ip, r2
 80045c0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 80045c4:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80045c8:	2c01      	cmp	r4, #1
 80045ca:	bf08      	it	eq
 80045cc:	2b00      	cmpeq	r3, #0
 80045ce:	d301      	bcc.n	80045d4 <find_volume+0x224>
 80045d0:	230d      	movs	r3, #13
 80045d2:	e27d      	b.n	8004ad0 <find_volume+0x720>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 80045d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045d6:	334c      	adds	r3, #76	; 0x4c
 80045d8:	3354      	adds	r3, #84	; 0x54
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fc fd58 	bl	8001090 <ld_dword>
 80045e0:	4602      	mov	r2, r0
 80045e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045e4:	631a      	str	r2, [r3, #48]	; 0x30

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 80045e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045e8:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
 80045ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045ee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 80045f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045f2:	789b      	ldrb	r3, [r3, #2]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d001      	beq.n	80045fc <find_volume+0x24c>
 80045f8:	230d      	movs	r3, #13
 80045fa:	e269      	b.n	8004ad0 <find_volume+0x720>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 80045fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045fe:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004602:	461a      	mov	r2, r3
 8004604:	2301      	movs	r3, #1
 8004606:	4093      	lsls	r3, r2
 8004608:	b29a      	uxth	r2, r3
 800460a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800460c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800460e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004610:	895b      	ldrh	r3, [r3, #10]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <find_volume+0x26a>
 8004616:	230d      	movs	r3, #13
 8004618:	e25a      	b.n	8004ad0 <find_volume+0x720>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800461a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800461c:	334c      	adds	r3, #76	; 0x4c
 800461e:	335c      	adds	r3, #92	; 0x5c
 8004620:	4618      	mov	r0, r3
 8004622:	f7fc fd35 	bl	8001090 <ld_dword>
 8004626:	6378      	str	r0, [r7, #52]	; 0x34
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8004628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462a:	4a1f      	ldr	r2, [pc, #124]	; (80046a8 <find_volume+0x2f8>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d901      	bls.n	8004634 <find_volume+0x284>
 8004630:	230d      	movs	r3, #13
 8004632:	e24d      	b.n	8004ad0 <find_volume+0x720>
		fs->n_fatent = nclst + 2;
 8004634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004636:	1c9a      	adds	r2, r3, #2
 8004638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800463a:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800463c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800463e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004640:	635a      	str	r2, [r3, #52]	; 0x34
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8004642:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004644:	334c      	adds	r3, #76	; 0x4c
 8004646:	3358      	adds	r3, #88	; 0x58
 8004648:	4618      	mov	r0, r3
 800464a:	f7fc fd21 	bl	8001090 <ld_dword>
 800464e:	4602      	mov	r2, r0
 8004650:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004652:	441a      	add	r2, r3
 8004654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004656:	641a      	str	r2, [r3, #64]	; 0x40
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8004658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800465a:	334c      	adds	r3, #76	; 0x4c
 800465c:	3350      	adds	r3, #80	; 0x50
 800465e:	4618      	mov	r0, r3
 8004660:	f7fc fd16 	bl	8001090 <ld_dword>
 8004664:	4602      	mov	r2, r0
 8004666:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004668:	441a      	add	r2, r3
 800466a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800466c:	639a      	str	r2, [r3, #56]	; 0x38
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800466e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	4619      	mov	r1, r3
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800467a:	895b      	ldrh	r3, [r3, #10]
 800467c:	4618      	mov	r0, r3
 800467e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004680:	fb03 f300 	mul.w	r3, r3, r0
 8004684:	469b      	mov	fp, r3
 8004686:	f04f 0c00 	mov.w	ip, #0
 800468a:	eb1b 0301 	adds.w	r3, fp, r1
 800468e:	eb4c 0402 	adc.w	r4, ip, r2
 8004692:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004696:	42a2      	cmp	r2, r4
 8004698:	bf08      	it	eq
 800469a:	4299      	cmpeq	r1, r3
 800469c:	d206      	bcs.n	80046ac <find_volume+0x2fc>
 800469e:	230d      	movs	r3, #13
 80046a0:	e216      	b.n	8004ad0 <find_volume+0x720>
 80046a2:	bf00      	nop
 80046a4:	200000a8 	.word	0x200000a8
 80046a8:	7ffffffd 	.word	0x7ffffffd
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 80046ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ae:	334c      	adds	r3, #76	; 0x4c
 80046b0:	3360      	adds	r3, #96	; 0x60
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fc fcec 	bl	8001090 <ld_dword>
 80046b8:	4602      	mov	r2, r0
 80046ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046bc:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Get bitmap location and check if it is contiguous (implementation assumption) */
		so = i = 0;
 80046be:	2300      	movs	r3, #0
 80046c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80046c2:	2300      	movs	r3, #0
 80046c4:	657b      	str	r3, [r7, #84]	; 0x54
		for (;;) {	/* Find the bitmap entry in the root directory (in only first cluster) */
			if (i == 0) {
 80046c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d11c      	bne.n	8004706 <find_volume+0x356>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
 80046cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ce:	895b      	ldrh	r3, [r3, #10]
 80046d0:	461a      	mov	r2, r3
 80046d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d301      	bcc.n	80046dc <find_volume+0x32c>
 80046d8:	230d      	movs	r3, #13
 80046da:	e1f9      	b.n	8004ad0 <find_volume+0x720>
				if (move_window(fs, clst2sect(fs, fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 80046dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e0:	4619      	mov	r1, r3
 80046e2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80046e4:	f7fd f89e 	bl	8001824 <clst2sect>
 80046e8:	4602      	mov	r2, r0
 80046ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ec:	4413      	add	r3, r2
 80046ee:	4619      	mov	r1, r3
 80046f0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80046f2:	f7fc fffb 	bl	80016ec <move_window>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <find_volume+0x350>
 80046fc:	2301      	movs	r3, #1
 80046fe:	e1e7      	b.n	8004ad0 <find_volume+0x720>
				so++;
 8004700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004702:	3301      	adds	r3, #1
 8004704:	657b      	str	r3, [r7, #84]	; 0x54
			}
			if (fs->win[i] == ET_BITMAP) break;				/* Is it a bitmap entry? */
 8004706:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004708:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800470a:	4413      	add	r3, r2
 800470c:	334c      	adds	r3, #76	; 0x4c
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	2b81      	cmp	r3, #129	; 0x81
 8004712:	d005      	beq.n	8004720 <find_volume+0x370>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 8004714:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004716:	3320      	adds	r3, #32
 8004718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800471c:	65bb      	str	r3, [r7, #88]	; 0x58
			if (i == 0) {
 800471e:	e7d2      	b.n	80046c6 <find_volume+0x316>
			if (fs->win[i] == ET_BITMAP) break;				/* Is it a bitmap entry? */
 8004720:	bf00      	nop
		}
		bcl = ld_dword(fs->win + i + 20);					/* Bitmap cluster */
 8004722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004724:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8004728:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800472a:	3314      	adds	r3, #20
 800472c:	4413      	add	r3, r2
 800472e:	4618      	mov	r0, r3
 8004730:	f7fc fcae 	bl	8001090 <ld_dword>
 8004734:	6538      	str	r0, [r7, #80]	; 0x50
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;
 8004736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004738:	2b01      	cmp	r3, #1
 800473a:	d904      	bls.n	8004746 <find_volume+0x396>
 800473c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800473e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004740:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004742:	429a      	cmp	r2, r3
 8004744:	d301      	bcc.n	800474a <find_volume+0x39a>
 8004746:	230d      	movs	r3, #13
 8004748:	e1c2      	b.n	8004ad0 <find_volume+0x720>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
 800474a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800474c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800474e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004750:	895b      	ldrh	r3, [r3, #10]
 8004752:	4619      	mov	r1, r3
 8004754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004756:	3b02      	subs	r3, #2
 8004758:	fb03 f301 	mul.w	r3, r3, r1
 800475c:	441a      	add	r2, r3
 800475e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004760:	645a      	str	r2, [r3, #68]	; 0x44
		for (;;) {	/* Check if bitmap is contiguous */
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 8004762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004768:	09db      	lsrs	r3, r3, #7
 800476a:	4413      	add	r3, r2
 800476c:	4619      	mov	r1, r3
 800476e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004770:	f7fc ffbc 	bl	80016ec <move_window>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <find_volume+0x3ce>
 800477a:	2301      	movs	r3, #1
 800477c:	e1a8      	b.n	8004ad0 <find_volume+0x720>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
 800477e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004780:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8004784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	4618      	mov	r0, r3
 8004790:	f7fc fc7e 	bl	8001090 <ld_dword>
 8004794:	6278      	str	r0, [r7, #36]	; 0x24
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479c:	d008      	beq.n	80047b0 <find_volume+0x400>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented? */
 800479e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047a0:	3301      	adds	r3, #1
 80047a2:	653b      	str	r3, [r7, #80]	; 0x50
 80047a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80047a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d0da      	beq.n	8004762 <find_volume+0x3b2>
 80047ac:	230d      	movs	r3, #13
 80047ae:	e18f      	b.n	8004ad0 <find_volume+0x720>
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 80047b0:	bf00      	nop
		}

#if !FF_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80047b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b4:	f04f 32ff 	mov.w	r2, #4294967295
 80047b8:	619a      	str	r2, [r3, #24]
 80047ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c0:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 80047c2:	2304      	movs	r3, #4
 80047c4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80047c8:	e170      	b.n	8004aac <find_volume+0x6fc>
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80047ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047cc:	334c      	adds	r3, #76	; 0x4c
 80047ce:	330b      	adds	r3, #11
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7fc fc45 	bl	8001060 <ld_word>
 80047d6:	4603      	mov	r3, r0
 80047d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047dc:	d001      	beq.n	80047e2 <find_volume+0x432>
 80047de:	230d      	movs	r3, #13
 80047e0:	e176      	b.n	8004ad0 <find_volume+0x720>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80047e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e4:	334c      	adds	r3, #76	; 0x4c
 80047e6:	3316      	adds	r3, #22
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fc fc39 	bl	8001060 <ld_word>
 80047ee:	4603      	mov	r3, r0
 80047f0:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80047f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d106      	bne.n	8004806 <find_volume+0x456>
 80047f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047fa:	334c      	adds	r3, #76	; 0x4c
 80047fc:	3324      	adds	r3, #36	; 0x24
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fc fc46 	bl	8001090 <ld_dword>
 8004804:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 8004806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004808:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800480a:	631a      	str	r2, [r3, #48]	; 0x30

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800480c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800480e:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8004812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004814:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004818:	789b      	ldrb	r3, [r3, #2]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d005      	beq.n	800482a <find_volume+0x47a>
 800481e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004820:	789b      	ldrb	r3, [r3, #2]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d001      	beq.n	800482a <find_volume+0x47a>
 8004826:	230d      	movs	r3, #13
 8004828:	e152      	b.n	8004ad0 <find_volume+0x720>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800482a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800482c:	789b      	ldrb	r3, [r3, #2]
 800482e:	461a      	mov	r2, r3
 8004830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004832:	fb02 f303 	mul.w	r3, r2, r3
 8004836:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800483a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800483e:	b29a      	uxth	r2, r3
 8004840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004842:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004846:	895b      	ldrh	r3, [r3, #10]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d008      	beq.n	800485e <find_volume+0x4ae>
 800484c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800484e:	895b      	ldrh	r3, [r3, #10]
 8004850:	461a      	mov	r2, r3
 8004852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004854:	895b      	ldrh	r3, [r3, #10]
 8004856:	3b01      	subs	r3, #1
 8004858:	4013      	ands	r3, r2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <find_volume+0x4b2>
 800485e:	230d      	movs	r3, #13
 8004860:	e136      	b.n	8004ad0 <find_volume+0x720>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004864:	334c      	adds	r3, #76	; 0x4c
 8004866:	3311      	adds	r3, #17
 8004868:	4618      	mov	r0, r3
 800486a:	f7fc fbf9 	bl	8001060 <ld_word>
 800486e:	4603      	mov	r3, r0
 8004870:	461a      	mov	r2, r3
 8004872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004874:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004878:	891b      	ldrh	r3, [r3, #8]
 800487a:	f003 030f 	and.w	r3, r3, #15
 800487e:	b29b      	uxth	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <find_volume+0x4d8>
 8004884:	230d      	movs	r3, #13
 8004886:	e123      	b.n	8004ad0 <find_volume+0x720>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800488a:	334c      	adds	r3, #76	; 0x4c
 800488c:	3313      	adds	r3, #19
 800488e:	4618      	mov	r0, r3
 8004890:	f7fc fbe6 	bl	8001060 <ld_word>
 8004894:	4603      	mov	r3, r0
 8004896:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004898:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800489a:	2b00      	cmp	r3, #0
 800489c:	d106      	bne.n	80048ac <find_volume+0x4fc>
 800489e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048a0:	334c      	adds	r3, #76	; 0x4c
 80048a2:	3320      	adds	r3, #32
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fc fbf3 	bl	8001090 <ld_dword>
 80048aa:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80048ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ae:	334c      	adds	r3, #76	; 0x4c
 80048b0:	330e      	adds	r3, #14
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fc fbd4 	bl	8001060 <ld_word>
 80048b8:	4603      	mov	r3, r0
 80048ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80048bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <find_volume+0x516>
 80048c2:	230d      	movs	r3, #13
 80048c4:	e104      	b.n	8004ad0 <find_volume+0x720>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80048c6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80048c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048ca:	4413      	add	r3, r2
 80048cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048ce:	8912      	ldrh	r2, [r2, #8]
 80048d0:	0912      	lsrs	r2, r2, #4
 80048d2:	b292      	uxth	r2, r2
 80048d4:	4413      	add	r3, r2
 80048d6:	63bb      	str	r3, [r7, #56]	; 0x38
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80048d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048dc:	429a      	cmp	r2, r3
 80048de:	d201      	bcs.n	80048e4 <find_volume+0x534>
 80048e0:	230d      	movs	r3, #13
 80048e2:	e0f5      	b.n	8004ad0 <find_volume+0x720>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80048e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048ec:	8952      	ldrh	r2, [r2, #10]
 80048ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80048f2:	637b      	str	r3, [r7, #52]	; 0x34
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80048f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <find_volume+0x54e>
 80048fa:	230d      	movs	r3, #13
 80048fc:	e0e8      	b.n	8004ad0 <find_volume+0x720>
		fmt = 0;
 80048fe:	2300      	movs	r3, #0
 8004900:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 8004904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004906:	4a75      	ldr	r2, [pc, #468]	; (8004adc <find_volume+0x72c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d802      	bhi.n	8004912 <find_volume+0x562>
 800490c:	2303      	movs	r3, #3
 800490e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004914:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004918:	4293      	cmp	r3, r2
 800491a:	d802      	bhi.n	8004922 <find_volume+0x572>
 800491c:	2302      	movs	r3, #2
 800491e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004924:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004928:	4293      	cmp	r3, r2
 800492a:	d802      	bhi.n	8004932 <find_volume+0x582>
 800492c:	2301      	movs	r3, #1
 800492e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (fmt == 0) return FR_NO_FILESYSTEM;
 8004932:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <find_volume+0x58e>
 800493a:	230d      	movs	r3, #13
 800493c:	e0c8      	b.n	8004ad0 <find_volume+0x720>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800493e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004940:	1c9a      	adds	r2, r3, #2
 8004942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004944:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
 8004946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004948:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800494a:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800494c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800494e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004950:	441a      	add	r2, r3
 8004952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004954:	639a      	str	r2, [r3, #56]	; 0x38
		fs->database = bsect + sysect;					/* Data start sector */
 8004956:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495a:	441a      	add	r2, r3
 800495c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800495e:	641a      	str	r2, [r3, #64]	; 0x40
		if (fmt == FS_FAT32) {
 8004960:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004964:	2b03      	cmp	r3, #3
 8004966:	d11e      	bne.n	80049a6 <find_volume+0x5f6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800496a:	334c      	adds	r3, #76	; 0x4c
 800496c:	332a      	adds	r3, #42	; 0x2a
 800496e:	4618      	mov	r0, r3
 8004970:	f7fc fb76 	bl	8001060 <ld_word>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <find_volume+0x5ce>
 800497a:	230d      	movs	r3, #13
 800497c:	e0a8      	b.n	8004ad0 <find_volume+0x720>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800497e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004980:	891b      	ldrh	r3, [r3, #8]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <find_volume+0x5da>
 8004986:	230d      	movs	r3, #13
 8004988:	e0a2      	b.n	8004ad0 <find_volume+0x720>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800498a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800498c:	334c      	adds	r3, #76	; 0x4c
 800498e:	332c      	adds	r3, #44	; 0x2c
 8004990:	4618      	mov	r0, r3
 8004992:	f7fc fb7d 	bl	8001090 <ld_dword>
 8004996:	4602      	mov	r2, r0
 8004998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800499a:	63da      	str	r2, [r3, #60]	; 0x3c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800499c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049a4:	e01f      	b.n	80049e6 <find_volume+0x636>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 80049a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049a8:	891b      	ldrh	r3, [r3, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <find_volume+0x602>
 80049ae:	230d      	movs	r3, #13
 80049b0:	e08e      	b.n	8004ad0 <find_volume+0x720>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80049b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049b8:	441a      	add	r2, r3
 80049ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049bc:	63da      	str	r2, [r3, #60]	; 0x3c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80049be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d103      	bne.n	80049ce <find_volume+0x61e>
 80049c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	e00a      	b.n	80049e4 <find_volume+0x634>
 80049ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d2:	4613      	mov	r3, r2
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	4413      	add	r3, r2
 80049d8:	085a      	lsrs	r2, r3, #1
 80049da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80049e4:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80049e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ec:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80049f0:	0a5b      	lsrs	r3, r3, #9
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d201      	bcs.n	80049fa <find_volume+0x64a>
 80049f6:	230d      	movs	r3, #13
 80049f8:	e06a      	b.n	8004ad0 <find_volume+0x720>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80049fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004a00:	619a      	str	r2, [r3, #24]
 8004a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a04:	699a      	ldr	r2, [r3, #24]
 8004a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a08:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8004a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a0c:	2280      	movs	r2, #128	; 0x80
 8004a0e:	711a      	strb	r2, [r3, #4]
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 8004a10:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004a14:	2b03      	cmp	r3, #3
 8004a16:	d149      	bne.n	8004aac <find_volume+0x6fc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a1a:	334c      	adds	r3, #76	; 0x4c
 8004a1c:	3330      	adds	r3, #48	; 0x30
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fc fb1e 	bl	8001060 <ld_word>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d140      	bne.n	8004aac <find_volume+0x6fc>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004a2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	4619      	mov	r1, r3
 8004a30:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004a32:	f7fc fe5b 	bl	80016ec <move_window>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d137      	bne.n	8004aac <find_volume+0x6fc>
		{
			fs->fsi_flag = 0;
 8004a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a3e:	2200      	movs	r2, #0
 8004a40:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 8004a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a44:	334c      	adds	r3, #76	; 0x4c
 8004a46:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fc fb08 	bl	8001060 <ld_word>
 8004a50:	4603      	mov	r3, r0
 8004a52:	461a      	mov	r2, r3
 8004a54:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d127      	bne.n	8004aac <find_volume+0x6fc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a5e:	334c      	adds	r3, #76	; 0x4c
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fc fb15 	bl	8001090 <ld_dword>
 8004a66:	4602      	mov	r2, r0
 8004a68:	4b1d      	ldr	r3, [pc, #116]	; (8004ae0 <find_volume+0x730>)
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d11e      	bne.n	8004aac <find_volume+0x6fc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a70:	334c      	adds	r3, #76	; 0x4c
 8004a72:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fc fb0a 	bl	8001090 <ld_dword>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	4b19      	ldr	r3, [pc, #100]	; (8004ae4 <find_volume+0x734>)
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d113      	bne.n	8004aac <find_volume+0x6fc>
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004a84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a86:	334c      	adds	r3, #76	; 0x4c
 8004a88:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fc faff 	bl	8001090 <ld_dword>
 8004a92:	4602      	mov	r2, r0
 8004a94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a96:	619a      	str	r2, [r3, #24]
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a9a:	334c      	adds	r3, #76	; 0x4c
 8004a9c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7fc faf5 	bl	8001090 <ld_dword>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aaa:	615a      	str	r2, [r3, #20]
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aae:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8004ab2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8004ab4:	4b0c      	ldr	r3, [pc, #48]	; (8004ae8 <find_volume+0x738>)
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <find_volume+0x738>)
 8004abe:	801a      	strh	r2, [r3, #0]
 8004ac0:	4b09      	ldr	r3, [pc, #36]	; (8004ae8 <find_volume+0x738>)
 8004ac2:	881a      	ldrh	r2, [r3, #0]
 8004ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ac6:	80da      	strh	r2, [r3, #6]
#if FF_FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if FF_FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8004ac8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aca:	2200      	movs	r2, #0
 8004acc:	61da      	str	r2, [r3, #28]
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3770      	adds	r7, #112	; 0x70
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8004ada:	bf00      	nop
 8004adc:	0ffffff5 	.word	0x0ffffff5
 8004ae0:	41615252 	.word	0x41615252
 8004ae4:	61417272 	.word	0x61417272
 8004ae8:	200000ac 	.word	0x200000ac

08004aec <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8004af6:	2309      	movs	r3, #9
 8004af8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d01c      	beq.n	8004b3a <validate+0x4e>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d018      	beq.n	8004b3a <validate+0x4e>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d013      	beq.n	8004b3a <validate+0x4e>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	889a      	ldrh	r2, [r3, #4]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	88db      	ldrh	r3, [r3, #6]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d10c      	bne.n	8004b3a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	785b      	ldrb	r3, [r3, #1]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fb ffce 	bl	8000ac8 <disk_status>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <validate+0x4e>
			res = FR_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d102      	bne.n	8004b46 <validate+0x5a>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	e000      	b.n	8004b48 <validate+0x5c>
 8004b46:	2300      	movs	r3, #0
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	6013      	str	r3, [r2, #0]
	return res;
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b088      	sub	sp, #32
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	4613      	mov	r3, r2
 8004b64:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004b6a:	f107 0310 	add.w	r3, r7, #16
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff fb72 	bl	8004258 <get_ldnumber>
 8004b74:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	da01      	bge.n	8004b80 <f_mount+0x28>
 8004b7c:	230b      	movs	r3, #11
 8004b7e:	e025      	b.n	8004bcc <f_mount+0x74>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004b80:	4a14      	ldr	r2, [pc, #80]	; (8004bd4 <f_mount+0x7c>)
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b88:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	2200      	movs	r2, #0
 8004b94:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d002      	beq.n	8004ba2 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	701a      	strb	r2, [r3, #0]
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	490b      	ldr	r1, [pc, #44]	; (8004bd4 <f_mount+0x7c>)
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 8004bac:	79fb      	ldrb	r3, [r7, #7]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <f_mount+0x5e>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	e00a      	b.n	8004bcc <f_mount+0x74>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004bb6:	f107 010c 	add.w	r1, r7, #12
 8004bba:	f107 0308 	add.w	r3, r7, #8
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7ff fbf5 	bl	80043b0 <find_volume>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3720      	adds	r7, #32
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	200000a8 	.word	0x200000a8

08004bd8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004bd8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004bdc:	b0a4      	sub	sp, #144	; 0x90
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	60f8      	str	r0, [r7, #12]
 8004be2:	60b9      	str	r1, [r7, #8]
 8004be4:	4613      	mov	r3, r2
 8004be6:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <f_open+0x1a>
 8004bee:	2309      	movs	r3, #9
 8004bf0:	e22d      	b.n	800504e <f_open+0x476>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8004bf2:	79fb      	ldrb	r3, [r7, #7]
 8004bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bf8:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8004bfa:	79fa      	ldrb	r2, [r7, #7]
 8004bfc:	f107 0114 	add.w	r1, r7, #20
 8004c00:	f107 0308 	add.w	r3, r7, #8
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff fbd3 	bl	80043b0 <find_volume>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (res == FR_OK) {
 8004c10:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f040 8211 	bne.w	800503c <f_open+0x464>
		dj.obj.fs = fs;
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
 8004c1e:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8004c22:	f001 fc2d 	bl	8006480 <ff_memalloc>
 8004c26:	67f8      	str	r0, [r7, #124]	; 0x7c
 8004c28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <f_open+0x5a>
 8004c2e:	2311      	movs	r3, #17
 8004c30:	e20d      	b.n	800504e <f_open+0x476>
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004c36:	60da      	str	r2, [r3, #12]
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004c3c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8004c40:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	f107 0318 	add.w	r3, r7, #24
 8004c48:	4611      	mov	r1, r2
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff fa0e 	bl	800406c <follow_path>
 8004c50:	4603      	mov	r3, r0
 8004c52:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8004c56:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d107      	bne.n	8004c6e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004c5e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8004c62:	b25b      	sxtb	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	da02      	bge.n	8004c6e <f_open+0x96>
				res = FR_INVALID_NAME;
 8004c68:	2306      	movs	r3, #6
 8004c6a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004c6e:	79fb      	ldrb	r3, [r7, #7]
 8004c70:	f003 031c 	and.w	r3, r3, #28
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 80c8 	beq.w	8004e0a <f_open+0x232>
			if (res != FR_OK) {					/* No file, create new */
 8004c7a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d010      	beq.n	8004ca4 <f_open+0xcc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004c82:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	d107      	bne.n	8004c9a <f_open+0xc2>
#if FF_FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8004c8a:	f107 0318 	add.w	r3, r7, #24
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fe fca6 	bl	80035e0 <dir_register>
 8004c94:	4603      	mov	r3, r0
 8004c96:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004c9a:	79fb      	ldrb	r3, [r7, #7]
 8004c9c:	f043 0308 	orr.w	r3, r3, #8
 8004ca0:	71fb      	strb	r3, [r7, #7]
 8004ca2:	e010      	b.n	8004cc6 <f_open+0xee>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004ca4:	7fbb      	ldrb	r3, [r7, #30]
 8004ca6:	f003 0311 	and.w	r3, r3, #17
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <f_open+0xde>
					res = FR_DENIED;
 8004cae:	2307      	movs	r3, #7
 8004cb0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004cb4:	e007      	b.n	8004cc6 <f_open+0xee>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004cb6:	79fb      	ldrb	r3, [r7, #7]
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <f_open+0xee>
 8004cc0:	2308      	movs	r3, #8
 8004cc2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8004cc6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f040 80b7 	bne.w	8004e3e <f_open+0x266>
 8004cd0:	79fb      	ldrb	r3, [r7, #7]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f000 80b1 	beq.w	8004e3e <f_open+0x266>
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	2b04      	cmp	r3, #4
 8004ce2:	d14d      	bne.n	8004d80 <f_open+0x1a8>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	601a      	str	r2, [r3, #0]
					init_alloc_info(fs, &fp->obj);
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	4611      	mov	r1, r2
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fe f959 	bl	8002fa8 <init_alloc_info>
					/* Set directory entry block initial state */
					mem_set(fs->dirbuf + 2, 0, 30);		/* Clear 85 entry except for NumSec */
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	3302      	adds	r3, #2
 8004cfc:	221e      	movs	r2, #30
 8004cfe:	2100      	movs	r1, #0
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fc fb94 	bl	800142e <mem_set>
					mem_set(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	3326      	adds	r3, #38	; 0x26
 8004d0c:	221a      	movs	r2, #26
 8004d0e:	2100      	movs	r1, #0
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fc fb8c 	bl	800142e <mem_set>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	f103 0408 	add.w	r4, r3, #8
 8004d28:	f7fc f990 	bl	800104c <get_fattime>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4620      	mov	r0, r4
 8004d32:	f7fc faa8 	bl	8001286 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	3321      	adds	r3, #33	; 0x21
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8004d40:	f107 0318 	add.w	r3, r7, #24
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fe f998 	bl	800307a <store_xdir>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
 8004d50:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d172      	bne.n	8004e3e <f_open+0x266>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d06e      	beq.n	8004e3e <f_open+0x266>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	2200      	movs	r2, #0
 8004d68:	4619      	mov	r1, r3
 8004d6a:	f7fd f8d9 	bl	8001f20 <remove_chain>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	3a01      	subs	r2, #1
 8004d7c:	615a      	str	r2, [r3, #20]
 8004d7e:	e05e      	b.n	8004e3e <f_open+0x266>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004d84:	4611      	mov	r1, r2
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fd fcfd 	bl	8002786 <ld_clust>
 8004d8c:	67b8      	str	r0, [r7, #120]	; 0x78
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
 8004d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d90:	f103 040e 	add.w	r4, r3, #14
 8004d94:	f7fc f95a 	bl	800104c <get_fattime>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	f7fc fa72 	bl	8001286 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004da4:	330b      	adds	r3, #11
 8004da6:	2220      	movs	r2, #32
 8004da8:	701a      	strb	r2, [r3, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004dae:	2200      	movs	r2, #0
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7fd fd07 	bl	80027c4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004db6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004db8:	331c      	adds	r3, #28
 8004dba:	2100      	movs	r1, #0
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fc fa62 	bl	8001286 <st_dword>
					fs->wflag = 1;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	70da      	strb	r2, [r3, #3]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8004dc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d037      	beq.n	8004e3e <f_open+0x266>
						dw = fs->winsect;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dd2:	677b      	str	r3, [r7, #116]	; 0x74
						res = remove_chain(&dj.obj, cl, 0);
 8004dd4:	f107 0318 	add.w	r3, r7, #24
 8004dd8:	2200      	movs	r2, #0
 8004dda:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7fd f89f 	bl	8001f20 <remove_chain>
 8004de2:	4603      	mov	r3, r0
 8004de4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
						if (res == FR_OK) {
 8004de8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d126      	bne.n	8004e3e <f_open+0x266>
							res = move_window(fs, dw);
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7fc fc79 	bl	80016ec <move_window>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e04:	3a01      	subs	r2, #1
 8004e06:	615a      	str	r2, [r3, #20]
 8004e08:	e019      	b.n	8004e3e <f_open+0x266>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 8004e0a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d115      	bne.n	8004e3e <f_open+0x266>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8004e12:	7fbb      	ldrb	r3, [r7, #30]
 8004e14:	f003 0310 	and.w	r3, r3, #16
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <f_open+0x24c>
					res = FR_NO_FILE;
 8004e1c:	2304      	movs	r3, #4
 8004e1e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004e22:	e00c      	b.n	8004e3e <f_open+0x266>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8004e24:	79fb      	ldrb	r3, [r7, #7]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d007      	beq.n	8004e3e <f_open+0x266>
 8004e2e:	7fbb      	ldrb	r3, [r7, #30]
 8004e30:	f003 0301 	and.w	r3, r3, #1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <f_open+0x266>
						res = FR_DENIED;
 8004e38:	2307      	movs	r3, #7
 8004e3a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					}
				}
			}
		}
		if (res == FR_OK) {
 8004e3e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10f      	bne.n	8004e66 <f_open+0x28e>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8004e46:	79fb      	ldrb	r3, [r7, #7]
 8004e48:	f003 0308 	and.w	r3, r3, #8
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <f_open+0x280>
 8004e50:	79fb      	ldrb	r3, [r7, #7]
 8004e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e56:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 8004e60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	64da      	str	r2, [r3, #76]	; 0x4c
				}
			}
		}
#endif

		if (res == FR_OK) {
 8004e66:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	f040 80e3 	bne.w	8005036 <f_open+0x45e>
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b04      	cmp	r3, #4
 8004e76:	d114      	bne.n	8004ea2 <f_open+0x2ca>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8004e78:	6a3a      	ldr	r2, [r7, #32]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8004e7e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004e82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004e86:	7ffa      	ldrb	r2, [r7, #31]
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8004e8e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	629a      	str	r2, [r3, #40]	; 0x28
				init_alloc_info(fs, &fp->obj);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4611      	mov	r1, r2
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fe f884 	bl	8002fa8 <init_alloc_info>
 8004ea0:	e013      	b.n	8004eca <f_open+0x2f2>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7fd fc6c 	bl	8002786 <ld_clust>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004eb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eb6:	331c      	adds	r3, #28
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fc f8e9 	bl	8001090 <ld_dword>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	f04f 0400 	mov.w	r4, #0
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	e9c2 3404 	strd	r3, r4, [r2, #16]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	88da      	ldrh	r2, [r3, #6]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	79fa      	ldrb	r2, [r7, #7]
 8004edc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	f04f 0300 	mov.w	r3, #0
 8004ef4:	f04f 0400 	mov.w	r4, #0
 8004ef8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	3350      	adds	r3, #80	; 0x50
 8004f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f04:	2100      	movs	r1, #0
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fc fa91 	bl	800142e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8004f0c:	79fb      	ldrb	r3, [r7, #7]
 8004f0e:	f003 0320 	and.w	r3, r3, #32
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 808f 	beq.w	8005036 <f_open+0x45e>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8004f1e:	4323      	orrs	r3, r4
 8004f20:	f000 8089 	beq.w	8005036 <f_open+0x45e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	895b      	ldrh	r3, [r3, #10]
 8004f34:	025b      	lsls	r3, r3, #9
 8004f36:	673b      	str	r3, [r7, #112]	; 0x70
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8004f46:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 8004f4a:	e024      	b.n	8004f96 <f_open+0x3be>
					clst = get_fat(&fp->obj, clst);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fc fc86 	bl	8001864 <get_fat>
 8004f58:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					if (clst <= 1) res = FR_INT_ERR;
 8004f5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d802      	bhi.n	8004f6a <f_open+0x392>
 8004f64:	2302      	movs	r3, #2
 8004f66:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8004f6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f72:	d102      	bne.n	8004f7a <f_open+0x3a2>
 8004f74:	2301      	movs	r3, #1
 8004f76:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004f7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f7c:	469b      	mov	fp, r3
 8004f7e:	f04f 0c00 	mov.w	ip, #0
 8004f82:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004f86:	460b      	mov	r3, r1
 8004f88:	4614      	mov	r4, r2
 8004f8a:	ebb3 030b 	subs.w	r3, r3, fp
 8004f8e:	eb64 040c 	sbc.w	r4, r4, ip
 8004f92:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
 8004f96:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d109      	bne.n	8004fb2 <f_open+0x3da>
 8004f9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	f04f 0200 	mov.w	r2, #0
 8004fa6:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8004faa:	42a2      	cmp	r2, r4
 8004fac:	bf08      	it	eq
 8004fae:	4299      	cmpeq	r1, r3
 8004fb0:	d3cc      	bcc.n	8004f4c <f_open+0x374>
				}
				fp->clust = clst;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004fb8:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004fba:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d139      	bne.n	8005036 <f_open+0x45e>
 8004fc2:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8004fc6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004fca:	f04f 0200 	mov.w	r2, #0
 8004fce:	ea03 0b01 	and.w	fp, r3, r1
 8004fd2:	ea04 0c02 	and.w	ip, r4, r2
 8004fd6:	ea5b 030c 	orrs.w	r3, fp, ip
 8004fda:	d02c      	beq.n	8005036 <f_open+0x45e>
					if ((sc = clst2sect(fs, clst)) == 0) {
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fc fc1e 	bl	8001824 <clst2sect>
 8004fe8:	66f8      	str	r0, [r7, #108]	; 0x6c
 8004fea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d103      	bne.n	8004ff8 <f_open+0x420>
						res = FR_INT_ERR;
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004ff6:	e01e      	b.n	8005036 <f_open+0x45e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8004ff8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	f04f 0400 	mov.w	r4, #0
 8005004:	0a4b      	lsrs	r3, r1, #9
 8005006:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800500a:	0a54      	lsrs	r4, r2, #9
 800500c:	461a      	mov	r2, r3
 800500e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005010:	441a      	add	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	645a      	str	r2, [r3, #68]	; 0x44
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	7858      	ldrb	r0, [r3, #1]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005024:	2301      	movs	r3, #1
 8005026:	f7fb fd65 	bl	8000af4 <disk_read>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <f_open+0x45e>
 8005030:	2301      	movs	r3, #1
 8005032:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
				}
			}
#endif
		}

		FREE_NAMBUF();
 8005036:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8005038:	f001 fa2e 	bl	8006498 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800503c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <f_open+0x472>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800504a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800504e:	4618      	mov	r0, r3
 8005050:	3790      	adds	r7, #144	; 0x90
 8005052:	46bd      	mov	sp, r7
 8005054:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08005058 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005058:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800505c:	b090      	sub	sp, #64	; 0x40
 800505e:	af00      	add	r7, sp, #0
 8005060:	60f8      	str	r0, [r7, #12]
 8005062:	60b9      	str	r1, [r7, #8]
 8005064:	607a      	str	r2, [r7, #4]
 8005066:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	62fb      	str	r3, [r7, #44]	; 0x2c


	*br = 0;	/* Clear read byte counter */
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f107 0214 	add.w	r2, r7, #20
 8005078:	4611      	mov	r1, r2
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff fd36 	bl	8004aec <validate>
 8005080:	4603      	mov	r3, r0
 8005082:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005086:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800508a:	2b00      	cmp	r3, #0
 800508c:	d108      	bne.n	80050a0 <f_read+0x48>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005094:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005098:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <f_read+0x4e>
 80050a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80050a4:	e13c      	b.n	8005320 <f_read+0x2c8>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <f_read+0x60>
 80050b4:	2307      	movs	r3, #7
 80050b6:	e133      	b.n	8005320 <f_read+0x2c8>
	remain = fp->obj.objsize - fp->fptr;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	e9d3 bc0e 	ldrd	fp, ip, [r3, #56]	; 0x38
 80050c4:	460b      	mov	r3, r1
 80050c6:	4614      	mov	r4, r2
 80050c8:	ebb3 030b 	subs.w	r3, r3, fp
 80050cc:	eb64 040c 	sbc.w	r4, r4, ip
 80050d0:	e9c7 3408 	strd	r3, r4, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f04f 0400 	mov.w	r4, #0
 80050da:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80050de:	42a2      	cmp	r2, r4
 80050e0:	bf08      	it	eq
 80050e2:	4299      	cmpeq	r1, r3
 80050e4:	f080 8117 	bcs.w	8005316 <f_read+0x2be>
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until btr bytes read */
 80050ec:	e113      	b.n	8005316 <f_read+0x2be>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	e9d3 bc0e 	ldrd	fp, ip, [r3, #56]	; 0x38
 80050f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	ea0b 0301 	and.w	r3, fp, r1
 8005100:	ea0c 0402 	and.w	r4, ip, r2
 8005104:	4323      	orrs	r3, r4
 8005106:	f040 80ce 	bne.w	80052a6 <f_read+0x24e>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8005110:	f04f 0300 	mov.w	r3, #0
 8005114:	f04f 0400 	mov.w	r4, #0
 8005118:	0a4b      	lsrs	r3, r1, #9
 800511a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800511e:	0a54      	lsrs	r4, r2, #9
 8005120:	461a      	mov	r2, r3
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	895b      	ldrh	r3, [r3, #10]
 8005126:	3b01      	subs	r3, #1
 8005128:	4013      	ands	r3, r2
 800512a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d126      	bne.n	8005180 <f_read+0x128>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005138:	4323      	orrs	r3, r4
 800513a:	d103      	bne.n	8005144 <f_read+0xec>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	63bb      	str	r3, [r7, #56]	; 0x38
 8005142:	e007      	b.n	8005154 <f_read+0xfc>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514a:	4619      	mov	r1, r3
 800514c:	4610      	mov	r0, r2
 800514e:	f7fc fb89 	bl	8001864 <get_fat>
 8005152:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005156:	2b01      	cmp	r3, #1
 8005158:	d805      	bhi.n	8005166 <f_read+0x10e>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2202      	movs	r2, #2
 800515e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005162:	2302      	movs	r3, #2
 8005164:	e0dc      	b.n	8005320 <f_read+0x2c8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516c:	d105      	bne.n	800517a <f_read+0x122>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005176:	2301      	movs	r3, #1
 8005178:	e0d2      	b.n	8005320 <f_read+0x2c8>
				fp->clust = clst;				/* Update current cluster */
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800517e:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	4619      	mov	r1, r3
 8005188:	4610      	mov	r0, r2
 800518a:	f7fc fb4b 	bl	8001824 <clst2sect>
 800518e:	61b8      	str	r0, [r7, #24]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d105      	bne.n	80051a2 <f_read+0x14a>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2202      	movs	r2, #2
 800519a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800519e:	2302      	movs	r3, #2
 80051a0:	e0be      	b.n	8005320 <f_read+0x2c8>
			sect += csect;
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	4413      	add	r3, r2
 80051a8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	0a5b      	lsrs	r3, r3, #9
 80051ae:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 80051b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d03b      	beq.n	800522e <f_read+0x1d6>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80051b6:	69fa      	ldr	r2, [r7, #28]
 80051b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ba:	4413      	add	r3, r2
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	8952      	ldrh	r2, [r2, #10]
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d905      	bls.n	80051d0 <f_read+0x178>
					cc = fs->csize - csect;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	895b      	ldrh	r3, [r3, #10]
 80051c8:	461a      	mov	r2, r3
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	7858      	ldrb	r0, [r3, #1]
 80051d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051da:	f7fb fc8b 	bl	8000af4 <disk_read>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d005      	beq.n	80051f0 <f_read+0x198>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80051ec:	2301      	movs	r3, #1
 80051ee:	e097      	b.n	8005320 <f_read+0x2c8>
#if FF_FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80051f6:	b25b      	sxtb	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	da14      	bge.n	8005226 <f_read+0x1ce>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005206:	429a      	cmp	r2, r3
 8005208:	d90d      	bls.n	8005226 <f_read+0x1ce>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	025b      	lsls	r3, r3, #9
 8005214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005216:	18d0      	adds	r0, r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3350      	adds	r3, #80	; 0x50
 800521c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005220:	4619      	mov	r1, r3
 8005222:	f7fc f8e3 	bl	80013ec <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005228:	025b      	lsls	r3, r3, #9
 800522a:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 800522c:	e057      	b.n	80052de <f_read+0x286>
			}
#if !FF_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	429a      	cmp	r2, r3
 8005236:	d033      	beq.n	80052a0 <f_read+0x248>
#if !FF_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800523e:	b25b      	sxtb	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	da1b      	bge.n	800527c <f_read+0x224>
					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	7858      	ldrb	r0, [r3, #1]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005252:	2301      	movs	r3, #1
 8005254:	f7fb fcb8 	bl	8000bc8 <disk_write>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d005      	beq.n	800526a <f_read+0x212>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005266:	2301      	movs	r3, #1
 8005268:	e05a      	b.n	8005320 <f_read+0x2c8>
					fp->flag &= (BYTE)~FA_DIRTY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005274:	b2da      	uxtb	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	7858      	ldrb	r0, [r3, #1]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8005286:	2301      	movs	r3, #1
 8005288:	69ba      	ldr	r2, [r7, #24]
 800528a:	f7fb fc33 	bl	8000af4 <disk_read>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d005      	beq.n	80052a0 <f_read+0x248>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800529c:	2301      	movs	r3, #1
 800529e:	e03f      	b.n	8005320 <f_read+0x2c8>
			}
#endif
			fp->sect = sect;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80052ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80052b4:	637b      	str	r3, [r7, #52]	; 0x34
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80052b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d901      	bls.n	80052c2 <f_read+0x26a>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	637b      	str	r3, [r7, #52]	; 0x34
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80052ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052d2:	4413      	add	r3, r2
 80052d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052d6:	4619      	mov	r1, r3
 80052d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80052da:	f7fc f887 	bl	80013ec <mem_cpy>
		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	607b      	str	r3, [r7, #4]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ec:	441a      	add	r2, r3
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f6:	4413      	add	r3, r2
 80052f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8005300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005302:	469b      	mov	fp, r3
 8005304:	f04f 0c00 	mov.w	ip, #0
 8005308:	eb1b 0301 	adds.w	r3, fp, r1
 800530c:	eb4c 0402 	adc.w	r4, ip, r2
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	for ( ;  btr;								/* Repeat until btr bytes read */
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	f47f aee8 	bne.w	80050ee <f_read+0x96>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3740      	adds	r7, #64	; 0x40
 8005324:	46bd      	mov	sp, r7
 8005326:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800532a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800532a:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800532e:	b08c      	sub	sp, #48	; 0x30
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
 8005338:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f107 0210 	add.w	r2, r7, #16
 800534a:	4611      	mov	r1, r2
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff fbcd 	bl	8004aec <validate>
 8005352:	4603      	mov	r3, r0
 8005354:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005358:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800535c:	2b00      	cmp	r3, #0
 800535e:	d108      	bne.n	8005372 <f_write+0x48>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005366:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800536a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <f_write+0x4e>
 8005372:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005376:	e17d      	b.n	8005674 <f_write+0x34a>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <f_write+0x60>
 8005386:	2307      	movs	r3, #7
 8005388:	e174      	b.n	8005674 <f_write+0x34a>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	2b04      	cmp	r3, #4
 8005390:	f000 8160 	beq.w	8005654 <f_write+0x32a>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800539a:	461a      	mov	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	441a      	add	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80053a6:	429a      	cmp	r2, r3
 80053a8:	f080 8154 	bcs.w	8005654 <f_write+0x32a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80053b2:	43db      	mvns	r3, r3
 80053b4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80053b6:	e14d      	b.n	8005654 <f_write+0x32a>
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	e9d3 bc0e 	ldrd	fp, ip, [r3, #56]	; 0x38
 80053be:	f240 11ff 	movw	r1, #511	; 0x1ff
 80053c2:	f04f 0200 	mov.w	r2, #0
 80053c6:	ea0b 0301 	and.w	r3, fp, r1
 80053ca:	ea0c 0402 	and.w	r4, ip, r2
 80053ce:	4323      	orrs	r3, r4
 80053d0:	f040 80f0 	bne.w	80055b4 <f_write+0x28a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 80053da:	f04f 0300 	mov.w	r3, #0
 80053de:	f04f 0400 	mov.w	r4, #0
 80053e2:	0a4b      	lsrs	r3, r1, #9
 80053e4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80053e8:	0a54      	lsrs	r4, r2, #9
 80053ea:	461a      	mov	r2, r3
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	895b      	ldrh	r3, [r3, #10]
 80053f0:	3b01      	subs	r3, #1
 80053f2:	4013      	ands	r3, r2
 80053f4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d13a      	bne.n	8005472 <f_write+0x148>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005402:	4323      	orrs	r3, r4
 8005404:	d10c      	bne.n	8005420 <f_write+0xf6>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800540c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10e      	bne.n	8005430 <f_write+0x106>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2100      	movs	r1, #0
 8005416:	4618      	mov	r0, r3
 8005418:	f7fc fe64 	bl	80020e4 <create_chain>
 800541c:	62b8      	str	r0, [r7, #40]	; 0x28
 800541e:	e007      	b.n	8005430 <f_write+0x106>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	4619      	mov	r1, r3
 8005428:	4610      	mov	r0, r2
 800542a:	f7fc fe5b 	bl	80020e4 <create_chain>
 800542e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 8113 	beq.w	800565e <f_write+0x334>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800543a:	2b01      	cmp	r3, #1
 800543c:	d105      	bne.n	800544a <f_write+0x120>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2202      	movs	r2, #2
 8005442:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005446:	2302      	movs	r3, #2
 8005448:	e114      	b.n	8005674 <f_write+0x34a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800544a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005450:	d105      	bne.n	800545e <f_write+0x134>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2201      	movs	r2, #1
 8005456:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800545a:	2301      	movs	r3, #1
 800545c:	e10a      	b.n	8005674 <f_write+0x34a>
				fp->clust = clst;			/* Update current cluster */
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005462:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d102      	bne.n	8005472 <f_write+0x148>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005470:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005478:	b25b      	sxtb	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	da1b      	bge.n	80054b6 <f_write+0x18c>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	7858      	ldrb	r0, [r3, #1]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800548c:	2301      	movs	r3, #1
 800548e:	f7fb fb9b 	bl	8000bc8 <disk_write>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d005      	beq.n	80054a4 <f_write+0x17a>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80054a0:	2301      	movs	r3, #1
 80054a2:	e0e7      	b.n	8005674 <f_write+0x34a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054bc:	4619      	mov	r1, r3
 80054be:	4610      	mov	r0, r2
 80054c0:	f7fc f9b0 	bl	8001824 <clst2sect>
 80054c4:	6178      	str	r0, [r7, #20]
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d105      	bne.n	80054d8 <f_write+0x1ae>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80054d4:	2302      	movs	r3, #2
 80054d6:	e0cd      	b.n	8005674 <f_write+0x34a>
			sect += csect;
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	4413      	add	r3, r2
 80054de:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	0a5b      	lsrs	r3, r3, #9
 80054e4:	623b      	str	r3, [r7, #32]
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d03f      	beq.n	800556c <f_write+0x242>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	4413      	add	r3, r2
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	8952      	ldrh	r2, [r2, #10]
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d905      	bls.n	8005506 <f_write+0x1dc>
					cc = fs->csize - csect;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	895b      	ldrh	r3, [r3, #10]
 80054fe:	461a      	mov	r2, r3
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	7858      	ldrb	r0, [r3, #1]
 800550a:	6a3b      	ldr	r3, [r7, #32]
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	69f9      	ldr	r1, [r7, #28]
 8005510:	f7fb fb5a 	bl	8000bc8 <disk_write>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d005      	beq.n	8005526 <f_write+0x1fc>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005522:	2301      	movs	r3, #1
 8005524:	e0a6      	b.n	8005674 <f_write+0x34a>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	6a3a      	ldr	r2, [r7, #32]
 8005530:	429a      	cmp	r2, r3
 8005532:	d917      	bls.n	8005564 <f_write+0x23a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	025b      	lsls	r3, r3, #9
 8005544:	69fa      	ldr	r2, [r7, #28]
 8005546:	4413      	add	r3, r2
 8005548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800554c:	4619      	mov	r1, r3
 800554e:	f7fb ff4d 	bl	80013ec <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800555c:	b2da      	uxtb	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	025b      	lsls	r3, r3, #9
 8005568:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800556a:	e048      	b.n	80055fe <f_write+0x2d4>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	429a      	cmp	r2, r3
 8005574:	d01b      	beq.n	80055ae <f_write+0x284>
				fp->fptr < fp->obj.objsize &&
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8005582:	42a2      	cmp	r2, r4
 8005584:	bf08      	it	eq
 8005586:	4299      	cmpeq	r1, r3
 8005588:	d211      	bcs.n	80055ae <f_write+0x284>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	7858      	ldrb	r0, [r3, #1]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8005594:	2301      	movs	r3, #1
 8005596:	697a      	ldr	r2, [r7, #20]
 8005598:	f7fb faac 	bl	8000af4 <disk_read>
 800559c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d005      	beq.n	80055ae <f_write+0x284>
					ABORT(fs, FR_DISK_ERR);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80055aa:	2301      	movs	r3, #1
 80055ac:	e062      	b.n	8005674 <f_write+0x34a>
			}
#endif
			fp->sect = sect;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80055ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055be:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80055c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d901      	bls.n	80055d0 <f_write+0x2a6>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	627b      	str	r3, [r7, #36]	; 0x24
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80055dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e0:	4413      	add	r3, r2
 80055e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e4:	69f9      	ldr	r1, [r7, #28]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7fb ff00 	bl	80013ec <mem_cpy>
		fp->flag |= FA_DIRTY;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80055f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	607b      	str	r3, [r7, #4]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	441a      	add	r2, r3
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	69fa      	ldr	r2, [r7, #28]
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	4413      	add	r3, r2
 8005618:	61fb      	str	r3, [r7, #28]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	469b      	mov	fp, r3
 8005624:	f04f 0c00 	mov.w	ip, #0
 8005628:	eb1b 0301 	adds.w	r3, fp, r1
 800562c:	eb4c 0402 	adc.w	r4, ip, r2
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	e9d2 120e 	ldrd	r1, r2, [r2, #56]	; 0x38
 8005642:	4294      	cmp	r4, r2
 8005644:	bf08      	it	eq
 8005646:	428b      	cmpeq	r3, r1
 8005648:	d201      	bcs.n	800564e <f_write+0x324>
 800564a:	460b      	mov	r3, r1
 800564c:	4614      	mov	r4, r2
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	e9c2 3404 	strd	r3, r4, [r2, #16]
	for ( ;  btw;							/* Repeat until all data written */
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	f47f aeae 	bne.w	80053b8 <f_write+0x8e>
 800565c:	e000      	b.n	8005660 <f_write+0x336>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800565e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800566a:	b2da      	uxtb	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3730      	adds	r7, #48	; 0x30
 8005678:	46bd      	mov	sp, r7
 800567a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800567e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800567e:	b590      	push	{r4, r7, lr}
 8005680:	b09d      	sub	sp, #116	; 0x74
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800568c:	4611      	mov	r1, r2
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff fa2c 	bl	8004aec <validate>
 8005694:	4603      	mov	r3, r0
 8005696:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 800569a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f040 811d 	bne.w	80058de <f_sync+0x260>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 8115 	beq.w	80058de <f_sync+0x260>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056ba:	b25b      	sxtb	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	da17      	bge.n	80056f0 <f_sync+0x72>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80056c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056c2:	7858      	ldrb	r0, [r3, #1]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f103 0150 	add.w	r1, r3, #80	; 0x50
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056ce:	2301      	movs	r3, #1
 80056d0:	f7fb fa7a 	bl	8000bc8 <disk_write>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <f_sync+0x60>
 80056da:	2301      	movs	r3, #1
 80056dc:	e101      	b.n	80058e2 <f_sync+0x264>
				fp->flag &= (BYTE)~FA_DIRTY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056e8:	b2da      	uxtb	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80056f0:	f7fb fcac 	bl	800104c <get_fattime>
 80056f4:	66b8      	str	r0, [r7, #104]	; 0x68
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80056f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	f040 80a4 	bne.w	8005848 <f_sync+0x1ca>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4618      	mov	r0, r3
 8005704:	f7fc fbac 	bl	8001e60 <fill_first_frag>
 8005708:	4603      	mov	r3, r0
 800570a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 800570e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10a      	bne.n	800572c <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571c:	f04f 32ff 	mov.w	r2, #4294967295
 8005720:	4619      	mov	r1, r3
 8005722:	f7fc fbcc 	bl	8001ebe <fill_last_frag>
 8005726:	4603      	mov	r3, r0
 8005728:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
				if (res == FR_OK) {
 800572c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005730:	2b00      	cmp	r3, #0
 8005732:	f040 80d4 	bne.w	80058de <f_sync+0x260>
					DIR dj;
					DEF_NAMBUF

					INIT_NAMBUF(fs);
 8005736:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800573a:	f000 fea1 	bl	8006480 <ff_memalloc>
 800573e:	6638      	str	r0, [r7, #96]	; 0x60
 8005740:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <f_sync+0xcc>
 8005746:	2311      	movs	r3, #17
 8005748:	e0cb      	b.n	80058e2 <f_sync+0x264>
 800574a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800574c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800574e:	60da      	str	r2, [r3, #12]
 8005750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005752:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005754:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8005758:	611a      	str	r2, [r3, #16]
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	f107 0308 	add.w	r3, r7, #8
 8005760:	4611      	mov	r1, r2
 8005762:	4618      	mov	r0, r3
 8005764:	f7fd fc49 	bl	8002ffa <load_obj_xdir>
 8005768:	4603      	mov	r3, r0
 800576a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 800576e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005772:	2b00      	cmp	r3, #0
 8005774:	d164      	bne.n	8005840 <f_sync+0x1c2>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
 8005776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	3304      	adds	r3, #4
 800577c:	781a      	ldrb	r2, [r3, #0]
 800577e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	3304      	adds	r3, #4
 8005784:	f042 0220 	orr.w	r2, r2, #32
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	79da      	ldrb	r2, [r3, #7]
 8005790:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	3321      	adds	r3, #33	; 0x21
 8005796:	f042 0201 	orr.w	r2, r2, #1
 800579a:	b2d2      	uxtb	r2, r2
 800579c:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800579e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	4619      	mov	r1, r3
 80057ac:	4610      	mov	r0, r2
 80057ae:	f7fb fd6a 	bl	8001286 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 80057b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80057c0:	461a      	mov	r2, r3
 80057c2:	4623      	mov	r3, r4
 80057c4:	4608      	mov	r0, r1
 80057c6:	f7fb fd8a 	bl	80012de <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 80057ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80057d8:	461a      	mov	r2, r3
 80057da:	4623      	mov	r3, r4
 80057dc:	4608      	mov	r0, r1
 80057de:	f7fb fd7e 	bl	80012de <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 80057e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	330c      	adds	r3, #12
 80057e8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fb fd4b 	bl	8001286 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 80057f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	3315      	adds	r3, #21
 80057f6:	2200      	movs	r2, #0
 80057f8:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 80057fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	3310      	adds	r3, #16
 8005800:	2100      	movs	r1, #0
 8005802:	4618      	mov	r0, r3
 8005804:	f7fb fd3f 	bl	8001286 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8005808:	f107 0308 	add.w	r3, r7, #8
 800580c:	4618      	mov	r0, r3
 800580e:	f7fd fc34 	bl	800307a <store_xdir>
 8005812:	4603      	mov	r3, r0
 8005814:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 8005818:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10f      	bne.n	8005840 <f_sync+0x1c2>
							res = sync_fs(fs);
 8005820:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005822:	4618      	mov	r0, r3
 8005824:	f7fb ff90 	bl	8001748 <sync_fs>
 8005828:	4603      	mov	r3, r0
 800582a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005838:	b2da      	uxtb	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
					}
					FREE_NAMBUF();
 8005840:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8005842:	f000 fe29 	bl	8006498 <ff_memfree>
 8005846:	e04a      	b.n	80058de <f_sync+0x260>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005848:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800584e:	4619      	mov	r1, r3
 8005850:	4610      	mov	r0, r2
 8005852:	f7fb ff4b 	bl	80016ec <move_window>
 8005856:	4603      	mov	r3, r0
 8005858:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 800585c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005860:	2b00      	cmp	r3, #0
 8005862:	d13c      	bne.n	80058de <f_sync+0x260>
					dir = fp->dir_ptr;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005868:	667b      	str	r3, [r7, #100]	; 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800586a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800586c:	330b      	adds	r3, #11
 800586e:	781a      	ldrb	r2, [r3, #0]
 8005870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005872:	330b      	adds	r3, #11
 8005874:	f042 0220 	orr.w	r2, r2, #32
 8005878:	b2d2      	uxtb	r2, r2
 800587a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6818      	ldr	r0, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	461a      	mov	r2, r3
 8005886:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005888:	f7fc ff9c 	bl	80027c4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800588c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800588e:	f103 021c 	add.w	r2, r3, #28
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8005898:	4619      	mov	r1, r3
 800589a:	4610      	mov	r0, r2
 800589c:	f7fb fcf3 	bl	8001286 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80058a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058a2:	3316      	adds	r3, #22
 80058a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fb fced 	bl	8001286 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80058ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058ae:	3312      	adds	r3, #18
 80058b0:	2100      	movs	r1, #0
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fb fccc 	bl	8001250 <st_word>
					fs->wflag = 1;
 80058b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058ba:	2201      	movs	r2, #1
 80058bc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80058be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7fb ff41 	bl	8001748 <sync_fs>
 80058c6:	4603      	mov	r3, r0
 80058c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80058de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3774      	adds	r7, #116	; 0x74
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd90      	pop	{r4, r7, pc}

080058ea <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b084      	sub	sp, #16
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7ff fec3 	bl	800567e <f_sync>
 80058f8:	4603      	mov	r3, r0
 80058fa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10e      	bne.n	8005920 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f107 0208 	add.w	r2, r7, #8
 8005908:	4611      	mov	r1, r2
 800590a:	4618      	mov	r0, r3
 800590c:	f7ff f8ee 	bl	8004aec <validate>
 8005910:	4603      	mov	r3, r0
 8005912:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005914:	7bfb      	ldrb	r3, [r7, #15]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d102      	bne.n	8005920 <f_close+0x36>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005920:	7bfb      	ldrb	r3, [r7, #15]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800592a:	b590      	push	{r4, r7, lr}
 800592c:	b09b      	sub	sp, #108	; 0x6c
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8005932:	f107 010c 	add.w	r1, r7, #12
 8005936:	1d3b      	adds	r3, r7, #4
 8005938:	2200      	movs	r2, #0
 800593a:	4618      	mov	r0, r3
 800593c:	f7fe fd38 	bl	80043b0 <find_volume>
 8005940:	4603      	mov	r3, r0
 8005942:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8005946:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800594a:	2b00      	cmp	r3, #0
 800594c:	d170      	bne.n	8005a30 <f_chdir+0x106>
		dj.obj.fs = fs;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
 8005952:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8005956:	f000 fd93 	bl	8006480 <ff_memalloc>
 800595a:	6638      	str	r0, [r7, #96]	; 0x60
 800595c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <f_chdir+0x3c>
 8005962:	2311      	movs	r3, #17
 8005964:	e066      	b.n	8005a34 <f_chdir+0x10a>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800596a:	60da      	str	r2, [r3, #12]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005970:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8005974:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);		/* Follow the path */
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	f107 0310 	add.w	r3, r7, #16
 800597c:	4611      	mov	r1, r2
 800597e:	4618      	mov	r0, r3
 8005980:	f7fe fb74 	bl	800406c <follow_path>
 8005984:	4603      	mov	r3, r0
 8005986:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		if (res == FR_OK) {					/* Follow completed */
 800598a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800598e:	2b00      	cmp	r3, #0
 8005990:	d144      	bne.n	8005a1c <f_chdir+0xf2>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Is it the start directory itself? */
 8005992:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005996:	b25b      	sxtb	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	da10      	bge.n	80059be <f_chdir+0x94>
				fs->cdir = dj.obj.sclust;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	61da      	str	r2, [r3, #28]
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d138      	bne.n	8005a1c <f_chdir+0xf2>
					fs->cdc_scl = dj.obj.c_scl;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ae:	621a      	str	r2, [r3, #32]
					fs->cdc_size = dj.obj.c_size;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059b4:	625a      	str	r2, [r3, #36]	; 0x24
					fs->cdc_ofs = dj.obj.c_ofs;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059ba:	629a      	str	r2, [r3, #40]	; 0x28
 80059bc:	e02e      	b.n	8005a1c <f_chdir+0xf2>
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 80059be:	7dbb      	ldrb	r3, [r7, #22]
 80059c0:	f003 0310 	and.w	r3, r3, #16
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d026      	beq.n	8005a16 <f_chdir+0xec>
#if FF_FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	d118      	bne.n	8005a02 <f_chdir+0xd8>
						fs->cdir = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Sub-directory cluster */
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	3334      	adds	r3, #52	; 0x34
 80059d6:	68fc      	ldr	r4, [r7, #12]
 80059d8:	4618      	mov	r0, r3
 80059da:	f7fb fb59 	bl	8001090 <ld_dword>
 80059de:	4603      	mov	r3, r0
 80059e0:	61e3      	str	r3, [r4, #28]
						fs->cdc_scl = dj.obj.sclust;						/* Save containing directory information */
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	621a      	str	r2, [r3, #32]
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80059e8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80059ec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059f0:	7dfb      	ldrb	r3, [r7, #23]
 80059f2:	4619      	mov	r1, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	625a      	str	r2, [r3, #36]	; 0x24
						fs->cdc_ofs = dj.blk_ofs;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059fe:	629a      	str	r2, [r3, #40]	; 0x28
 8005a00:	e00c      	b.n	8005a1c <f_chdir+0xf2>
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a06:	68fc      	ldr	r4, [r7, #12]
 8005a08:	4611      	mov	r1, r2
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fc febb 	bl	8002786 <ld_clust>
 8005a10:	4603      	mov	r3, r0
 8005a12:	61e3      	str	r3, [r4, #28]
 8005a14:	e002      	b.n	8005a1c <f_chdir+0xf2>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8005a16:	2305      	movs	r3, #5
 8005a18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
		FREE_NAMBUF();
 8005a1c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8005a1e:	f000 fd3b 	bl	8006498 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8005a22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8005a26:	2b04      	cmp	r3, #4
 8005a28:	d102      	bne.n	8005a30 <f_chdir+0x106>
 8005a2a:	2305      	movs	r3, #5
 8005a2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			CurrVol = (BYTE)i;
		}
#endif
	}

	LEAVE_FF(fs, res);
 8005a30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	376c      	adds	r7, #108	; 0x6c
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd90      	pop	{r4, r7, pc}

08005a3c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8005a3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a3e:	b08d      	sub	sp, #52	; 0x34
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	e9c7 2300 	strd	r2, r3, [r7]
	FSIZE_t ifptr;
#if FF_USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f107 0210 	add.w	r2, r7, #16
 8005a4e:	4611      	mov	r1, r2
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7ff f84b 	bl	8004aec <validate>
 8005a56:	4603      	mov	r3, r0
 8005a58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8005a5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d104      	bne.n	8005a6e <f_lseek+0x32>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005a6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if FF_FS_EXFAT && !FF_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
 8005a6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10e      	bne.n	8005a94 <f_lseek+0x58>
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d10a      	bne.n	8005a94 <f_lseek+0x58>
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8005a7e:	68f8      	ldr	r0, [r7, #12]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a84:	f04f 32ff 	mov.w	r2, #4294967295
 8005a88:	4619      	mov	r1, r3
 8005a8a:	f7fc fa18 	bl	8001ebe <fill_last_frag>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8005a94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d002      	beq.n	8005aa2 <f_lseek+0x66>
 8005a9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005aa0:	e1c0      	b.n	8005e24 <f_lseek+0x3e8>
#endif

	/* Normal Seek */
	{
#if FF_FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at FATxx */
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	2b04      	cmp	r3, #4
 8005aa8:	d00b      	beq.n	8005ac2 <f_lseek+0x86>
 8005aaa:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005aae:	2c01      	cmp	r4, #1
 8005ab0:	bf08      	it	eq
 8005ab2:	2b00      	cmpeq	r3, #0
 8005ab4:	d305      	bcc.n	8005ac2 <f_lseek+0x86>
 8005ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aba:	f04f 0400 	mov.w	r4, #0
 8005abe:	e9c7 3400 	strd	r3, r4, [r7]
#endif
		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8005ac8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005acc:	42a2      	cmp	r2, r4
 8005ace:	bf08      	it	eq
 8005ad0:	4299      	cmpeq	r1, r3
 8005ad2:	d20b      	bcs.n	8005aec <f_lseek+0xb0>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d104      	bne.n	8005aec <f_lseek+0xb0>
			ofs = fp->obj.objsize;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8005ae8:	e9c7 3400 	strd	r3, r4, [r7]
		}
		ifptr = fp->fptr;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005af2:	e9c7 3406 	strd	r3, r4, [r7, #24]
		fp->fptr = nsect = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	627b      	str	r3, [r7, #36]	; 0x24
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	f04f 0300 	mov.w	r3, #0
 8005b00:	f04f 0400 	mov.w	r4, #0
 8005b04:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		if (ofs > 0) {
 8005b08:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005b0c:	4323      	orrs	r3, r4
 8005b0e:	f000 8125 	beq.w	8005d5c <f_lseek+0x320>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	895b      	ldrh	r3, [r3, #10]
 8005b16:	025b      	lsls	r3, r3, #9
 8005b18:	617b      	str	r3, [r7, #20]
			if (ifptr > 0 &&
 8005b1a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005b1e:	4323      	orrs	r3, r4
 8005b20:	d048      	beq.n	8005bb4 <f_lseek+0x178>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8005b22:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005b26:	f113 30ff 	adds.w	r0, r3, #4294967295
 8005b2a:	f144 31ff 	adc.w	r1, r4, #4294967295
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f04f 0400 	mov.w	r4, #0
 8005b34:	461a      	mov	r2, r3
 8005b36:	4623      	mov	r3, r4
 8005b38:	f7fa fbaa 	bl	8000290 <__aeabi_uldivmod>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	460c      	mov	r4, r1
 8005b40:	461d      	mov	r5, r3
 8005b42:	4626      	mov	r6, r4
 8005b44:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005b48:	f113 30ff 	adds.w	r0, r3, #4294967295
 8005b4c:	f144 31ff 	adc.w	r1, r4, #4294967295
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	f04f 0400 	mov.w	r4, #0
 8005b56:	461a      	mov	r2, r3
 8005b58:	4623      	mov	r3, r4
 8005b5a:	f7fa fb99 	bl	8000290 <__aeabi_uldivmod>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	460c      	mov	r4, r1
			if (ifptr > 0 &&
 8005b62:	42a6      	cmp	r6, r4
 8005b64:	bf08      	it	eq
 8005b66:	429d      	cmpeq	r5, r3
 8005b68:	d324      	bcc.n	8005bb4 <f_lseek+0x178>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8005b6a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8005b6e:	f113 31ff 	adds.w	r1, r3, #4294967295
 8005b72:	f144 32ff 	adc.w	r2, r4, #4294967295
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	f04f 0400 	mov.w	r4, #0
 8005b7e:	ea6f 0503 	mvn.w	r5, r3
 8005b82:	ea6f 0604 	mvn.w	r6, r4
 8005b86:	ea05 0301 	and.w	r3, r5, r1
 8005b8a:	ea06 0402 	and.w	r4, r6, r2
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
				ofs -= fp->fptr;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	e9d3 560e 	ldrd	r5, r6, [r3, #56]	; 0x38
 8005b9a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4614      	mov	r4, r2
 8005ba2:	1b5b      	subs	r3, r3, r5
 8005ba4:	eb64 0406 	sbc.w	r4, r4, r6
 8005ba8:	e9c7 3400 	strd	r3, r4, [r7]
				clst = fp->clust;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bb2:	e024      	b.n	8005bfe <f_lseek+0x1c2>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	62bb      	str	r3, [r7, #40]	; 0x28
#if !FF_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8005bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d11b      	bne.n	8005bf8 <f_lseek+0x1bc>
					clst = create_chain(&fp->obj, 0);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fc fa8d 	bl	80020e4 <create_chain>
 8005bca:	62b8      	str	r0, [r7, #40]	; 0x28
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8005bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d105      	bne.n	8005bde <f_lseek+0x1a2>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005bda:	2302      	movs	r3, #2
 8005bdc:	e122      	b.n	8005e24 <f_lseek+0x3e8>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005be4:	d105      	bne.n	8005bf2 <f_lseek+0x1b6>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e118      	b.n	8005e24 <f_lseek+0x3e8>
					fp->obj.sclust = clst;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bf6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bfc:	641a      	str	r2, [r3, #64]	; 0x40
			}
			if (clst != 0) {
 8005bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 80ab 	beq.w	8005d5c <f_lseek+0x320>
				while (ofs > bcs) {						/* Cluster following loop */
 8005c06:	e06a      	b.n	8005cde <f_lseek+0x2a2>
					ofs -= bcs; fp->fptr += bcs;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	461d      	mov	r5, r3
 8005c0c:	f04f 0600 	mov.w	r6, #0
 8005c10:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005c14:	460b      	mov	r3, r1
 8005c16:	4614      	mov	r4, r2
 8005c18:	1b5b      	subs	r3, r3, r5
 8005c1a:	eb64 0406 	sbc.w	r4, r4, r6
 8005c1e:	e9c7 3400 	strd	r3, r4, [r7]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	461d      	mov	r5, r3
 8005c2c:	f04f 0600 	mov.w	r6, #0
 8005c30:	186b      	adds	r3, r5, r1
 8005c32:	eb46 0402 	adc.w	r4, r6, r2
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
#if !FF_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d028      	beq.n	8005c9c <f_lseek+0x260>
						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 8005c56:	42a2      	cmp	r2, r4
 8005c58:	bf08      	it	eq
 8005c5a:	4299      	cmpeq	r1, r3
 8005c5c:	d20e      	bcs.n	8005c7c <f_lseek+0x240>
							fp->obj.objsize = fp->fptr;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	e9c2 3404 	strd	r3, r4, [r2, #16]
							fp->flag |= FA_MODIFIED;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7fc fa2f 	bl	80020e4 <create_chain>
 8005c86:	62b8      	str	r0, [r7, #40]	; 0x28
						if (clst == 0) {				/* Clip file size in case of disk full */
 8005c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10c      	bne.n	8005ca8 <f_lseek+0x26c>
							ofs = 0; break;
 8005c8e:	f04f 0300 	mov.w	r3, #0
 8005c92:	f04f 0400 	mov.w	r4, #0
 8005c96:	e9c7 3400 	strd	r3, r4, [r7]
 8005c9a:	e02a      	b.n	8005cf2 <f_lseek+0x2b6>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7fb fddf 	bl	8001864 <get_fat>
 8005ca6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cae:	d105      	bne.n	8005cbc <f_lseek+0x280>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e0b3      	b.n	8005e24 <f_lseek+0x3e8>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8005cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d904      	bls.n	8005ccc <f_lseek+0x290>
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d305      	bcc.n	8005cd8 <f_lseek+0x29c>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	e0a5      	b.n	8005e24 <f_lseek+0x3e8>
					fp->clust = clst;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cdc:	641a      	str	r2, [r3, #64]	; 0x40
				while (ofs > bcs) {						/* Cluster following loop */
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	f04f 0200 	mov.w	r2, #0
 8005ce6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005cea:	42a2      	cmp	r2, r4
 8005cec:	bf08      	it	eq
 8005cee:	4299      	cmpeq	r1, r3
 8005cf0:	d38a      	bcc.n	8005c08 <f_lseek+0x1cc>
				}
				fp->fptr += ofs;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 8005cf8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005cfc:	185d      	adds	r5, r3, r1
 8005cfe:	eb44 0602 	adc.w	r6, r4, r2
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	e9c2 560e 	strd	r5, r6, [r2, #56]	; 0x38
				if (ofs % SS(fs)) {
 8005d08:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005d0c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005d10:	f04f 0200 	mov.w	r2, #0
 8005d14:	ea03 0501 	and.w	r5, r3, r1
 8005d18:	ea04 0602 	and.w	r6, r4, r2
 8005d1c:	ea55 0306 	orrs.w	r3, r5, r6
 8005d20:	d01c      	beq.n	8005d5c <f_lseek+0x320>
					nsect = clst2sect(fs, clst);	/* Current sector */
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d26:	4618      	mov	r0, r3
 8005d28:	f7fb fd7c 	bl	8001824 <clst2sect>
 8005d2c:	6278      	str	r0, [r7, #36]	; 0x24
					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d105      	bne.n	8005d40 <f_lseek+0x304>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e071      	b.n	8005e24 <f_lseek+0x3e8>
					nsect += (DWORD)(ofs / SS(fs));
 8005d40:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005d44:	f04f 0300 	mov.w	r3, #0
 8005d48:	f04f 0400 	mov.w	r4, #0
 8005d4c:	0a4b      	lsrs	r3, r1, #9
 8005d4e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005d52:	0a54      	lsrs	r4, r2, #9
 8005d54:	461a      	mov	r2, r3
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	4413      	add	r3, r2
 8005d5a:	627b      	str	r3, [r7, #36]	; 0x24
				}
			}
		}
		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is extended */
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 8005d68:	42a2      	cmp	r2, r4
 8005d6a:	bf08      	it	eq
 8005d6c:	4299      	cmpeq	r1, r3
 8005d6e:	d20e      	bcs.n	8005d8e <f_lseek+0x352>
			fp->obj.objsize = fp->fptr;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	e9c2 3404 	strd	r3, r4, [r2, #16]
			fp->flag |= FA_MODIFIED;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	e9d3 560e 	ldrd	r5, r6, [r3, #56]	; 0x38
 8005d94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005d98:	f04f 0200 	mov.w	r2, #0
 8005d9c:	ea05 0301 	and.w	r3, r5, r1
 8005da0:	ea06 0402 	and.w	r4, r6, r2
 8005da4:	4323      	orrs	r3, r4
 8005da6:	d03b      	beq.n	8005e20 <f_lseek+0x3e4>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d036      	beq.n	8005e20 <f_lseek+0x3e4>
#if !FF_FS_TINY
#if !FF_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005db8:	b25b      	sxtb	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	da1b      	bge.n	8005df6 <f_lseek+0x3ba>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	7858      	ldrb	r0, [r3, #1]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dcc:	2301      	movs	r3, #1
 8005dce:	f7fa fefb 	bl	8000bc8 <disk_write>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d005      	beq.n	8005de4 <f_lseek+0x3a8>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005de0:	2301      	movs	r3, #1
 8005de2:	e01f      	b.n	8005e24 <f_lseek+0x3e8>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	7858      	ldrb	r0, [r3, #1]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8005e00:	2301      	movs	r3, #1
 8005e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e04:	f7fa fe76 	bl	8000af4 <disk_read>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d005      	beq.n	8005e1a <f_lseek+0x3de>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8005e16:	2301      	movs	r3, #1
 8005e18:	e004      	b.n	8005e24 <f_lseek+0x3e8>
#endif
			fp->sect = nsect;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e1e:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}

	LEAVE_FF(fs, res);
 8005e20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3734      	adds	r7, #52	; 0x34
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e2c <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8005e2c:	b590      	push	{r4, r7, lr}
 8005e2e:	b087      	sub	sp, #28
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <f_opendir+0x14>
 8005e3c:	2309      	movs	r3, #9
 8005e3e:	e07c      	b.n	8005f3a <f_opendir+0x10e>

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8005e40:	f107 010c 	add.w	r1, r7, #12
 8005e44:	463b      	mov	r3, r7
 8005e46:	2200      	movs	r2, #0
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7fe fab1 	bl	80043b0 <find_volume>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005e52:	7dfb      	ldrb	r3, [r7, #23]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d169      	bne.n	8005f2c <f_opendir+0x100>
		dp->obj.fs = fs;
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8005e5e:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8005e62:	f000 fb0d 	bl	8006480 <ff_memalloc>
 8005e66:	6138      	str	r0, [r7, #16]
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <f_opendir+0x46>
 8005e6e:	2311      	movs	r3, #17
 8005e70:	e063      	b.n	8005f3a <f_opendir+0x10e>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	60da      	str	r2, [r3, #12]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8005e80:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	4619      	mov	r1, r3
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7fe f8f0 	bl	800406c <follow_path>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8005e90:	7dfb      	ldrb	r3, [r7, #23]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d142      	bne.n	8005f1c <f_opendir+0xf0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8005e9c:	b25b      	sxtb	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	db2f      	blt.n	8005f02 <f_opendir+0xd6>
				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	799b      	ldrb	r3, [r3, #6]
 8005ea6:	f003 0310 	and.w	r3, r3, #16
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d027      	beq.n	8005efe <f_opendir+0xd2>
#if FF_FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	d118      	bne.n	8005ee8 <f_opendir+0xbc>
						dp->obj.c_scl = dp->obj.sclust;							/* Get containing directory inforamation */
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689a      	ldr	r2, [r3, #8]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	621a      	str	r2, [r3, #32]
						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8005ec4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	79d2      	ldrb	r2, [r2, #7]
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	625a      	str	r2, [r3, #36]	; 0x24
						dp->obj.c_ofs = dp->blk_ofs;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	629a      	str	r2, [r3, #40]	; 0x28
						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	4611      	mov	r1, r2
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f7fd f861 	bl	8002fa8 <init_alloc_info>
 8005ee6:	e00c      	b.n	8005f02 <f_opendir+0xd6>
					} else
#endif
					{
						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4610      	mov	r0, r2
 8005ef2:	f7fc fc48 	bl	8002786 <ld_clust>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	609a      	str	r2, [r3, #8]
 8005efc:	e001      	b.n	8005f02 <f_opendir+0xd6>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8005efe:	2305      	movs	r3, #5
 8005f00:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8005f02:	7dfb      	ldrb	r3, [r7, #23]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d109      	bne.n	8005f1c <f_opendir+0xf0>
				dp->obj.id = fs->id;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	88da      	ldrh	r2, [r3, #6]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8005f10:	2100      	movs	r1, #0
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7fc fab0 	bl	8002478 <dir_sdi>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	75fb      	strb	r3, [r7, #23]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 8005f1c:	6938      	ldr	r0, [r7, #16]
 8005f1e:	f000 fabb 	bl	8006498 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8005f22:	7dfb      	ldrb	r3, [r7, #23]
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d101      	bne.n	8005f2c <f_opendir+0x100>
 8005f28:	2305      	movs	r3, #5
 8005f2a:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 8005f2c:	7dfb      	ldrb	r3, [r7, #23]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <f_opendir+0x10c>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	371c      	adds	r7, #28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd90      	pop	{r4, r7, pc}

08005f42 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f107 0208 	add.w	r2, r7, #8
 8005f50:	4611      	mov	r1, r2
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fe fdca 	bl	8004aec <validate>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d102      	bne.n	8005f68 <f_closedir+0x26>
#if FF_FS_LOCK != 0
		if (dp->obj.lockid) res = dec_lock(dp->obj.lockid);	/* Decrement sub-directory open counter */
		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
#else
		dp->obj.fs = 0;	/* Invalidate directory object */
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	601a      	str	r2, [r3, #0]
#endif
#if FF_FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b086      	sub	sp, #24
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f107 020c 	add.w	r2, r7, #12
 8005f82:	4611      	mov	r1, r2
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7fe fdb1 	bl	8004aec <validate>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005f8e:	7dfb      	ldrb	r3, [r7, #23]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d13b      	bne.n	800600c <f_readdir+0x9a>
		if (!fno) {
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d106      	bne.n	8005fa8 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7fc fa6b 	bl	8002478 <dir_sdi>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	75fb      	strb	r3, [r7, #23]
 8005fa6:	e031      	b.n	800600c <f_readdir+0x9a>
		} else {
			INIT_NAMBUF(fs);
 8005fa8:	f44f 608c 	mov.w	r0, #1120	; 0x460
 8005fac:	f000 fa68 	bl	8006480 <ff_memalloc>
 8005fb0:	6138      	str	r0, [r7, #16]
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d101      	bne.n	8005fbc <f_readdir+0x4a>
 8005fb8:	2311      	movs	r3, #17
 8005fba:	e028      	b.n	800600e <f_readdir+0x9c>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	60da      	str	r2, [r3, #12]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8005fca:	611a      	str	r2, [r3, #16]
			res = DIR_READ_FILE(dp);		/* Read an item */
 8005fcc:	2100      	movs	r1, #0
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7fd f917 	bl	8003202 <dir_read>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8005fd8:	7dfb      	ldrb	r3, [r7, #23]
 8005fda:	2b04      	cmp	r3, #4
 8005fdc:	d101      	bne.n	8005fe2 <f_readdir+0x70>
 8005fde:	2300      	movs	r3, #0
 8005fe0:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {				/* A valid entry is found */
 8005fe2:	7dfb      	ldrb	r3, [r7, #23]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10e      	bne.n	8006006 <f_readdir+0x94>
				get_fileinfo(dp, fno);		/* Get the object information */
 8005fe8:	6839      	ldr	r1, [r7, #0]
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f7fd fd02 	bl	80039f4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7fc fac6 	bl	8002584 <dir_next>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8005ffc:	7dfb      	ldrb	r3, [r7, #23]
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d101      	bne.n	8006006 <f_readdir+0x94>
 8006002:	2300      	movs	r3, #0
 8006004:	75fb      	strb	r3, [r7, #23]
			}
			FREE_NAMBUF();
 8006006:	6938      	ldr	r0, [r7, #16]
 8006008:	f000 fa46 	bl	8006498 <ff_memfree>
		}
	}
	LEAVE_FF(fs, res);
 800600c:	7dfb      	ldrb	r3, [r7, #23]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3718      	adds	r7, #24
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8006016:	b590      	push	{r4, r7, lr}
 8006018:	b0bd      	sub	sp, #244	; 0xf4
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800601e:	2300      	movs	r3, #0
 8006020:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8006024:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8006028:	1d3b      	adds	r3, r7, #4
 800602a:	2202      	movs	r2, #2
 800602c:	4618      	mov	r0, r3
 800602e:	f7fe f9bf 	bl	80043b0 <find_volume>
 8006032:	4603      	mov	r3, r0
 8006034:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
	if (res == FR_OK) {
 8006038:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800603c:	2b00      	cmp	r3, #0
 800603e:	f040 80d7 	bne.w	80061f0 <f_unlink+0x1da>
		dj.obj.fs = fs;
 8006042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006044:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		INIT_NAMBUF(fs);
 8006048:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800604c:	f000 fa18 	bl	8006480 <ff_memalloc>
 8006050:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
 8006054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006058:	2b00      	cmp	r3, #0
 800605a:	d101      	bne.n	8006060 <f_unlink+0x4a>
 800605c:	2311      	movs	r3, #17
 800605e:	e0c9      	b.n	80061f4 <f_unlink+0x1de>
 8006060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006062:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006066:	60da      	str	r2, [r3, #12]
 8006068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800606a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800606e:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006072:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);		/* Follow the file path */
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800607a:	4611      	mov	r1, r2
 800607c:	4618      	mov	r0, r3
 800607e:	f7fd fff5 	bl	800406c <follow_path>
 8006082:	4603      	mov	r3, r0
 8006084:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8006088:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800608c:	2b00      	cmp	r3, #0
 800608e:	d108      	bne.n	80060a2 <f_unlink+0x8c>
 8006090:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006094:	f003 0320 	and.w	r3, r3, #32
 8006098:	2b00      	cmp	r3, #0
 800609a:	d002      	beq.n	80060a2 <f_unlink+0x8c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 800609c:	2306      	movs	r3, #6
 800609e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80060a2:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f040 809e 	bne.w	80061e8 <f_unlink+0x1d2>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80060ac:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80060b0:	b25b      	sxtb	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	da03      	bge.n	80060be <f_unlink+0xa8>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80060b6:	2306      	movs	r3, #6
 80060b8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80060bc:	e008      	b.n	80060d0 <f_unlink+0xba>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80060be:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <f_unlink+0xba>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80060ca:	2307      	movs	r3, #7
 80060cc:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
				}
			}
			if (res == FR_OK) {
 80060d0:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d15d      	bne.n	8006194 <f_unlink+0x17e>
#if FF_FS_EXFAT
				obj.fs = fs;
 80060d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060da:	60bb      	str	r3, [r7, #8]
				if (fs->fs_type == FS_EXFAT) {
 80060dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	2b04      	cmp	r3, #4
 80060e2:	d10a      	bne.n	80060fa <f_unlink+0xe4>
					init_alloc_info(fs, &obj);
 80060e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060e6:	f107 0208 	add.w	r2, r7, #8
 80060ea:	4611      	mov	r1, r2
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7fc ff5b 	bl	8002fa8 <init_alloc_info>
					dclst = obj.sclust;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80060f8:	e008      	b.n	800610c <f_unlink+0xf6>
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80060fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060fc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8006100:	4611      	mov	r1, r2
 8006102:	4618      	mov	r0, r3
 8006104:	f7fc fb3f 	bl	8002786 <ld_clust>
 8006108:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800610c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8006110:	f003 0310 	and.w	r3, r3, #16
 8006114:	2b00      	cmp	r3, #0
 8006116:	d03d      	beq.n	8006194 <f_unlink+0x17e>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
 8006118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800611a:	69db      	ldr	r3, [r3, #28]
 800611c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8006120:	429a      	cmp	r2, r3
 8006122:	d103      	bne.n	800612c <f_unlink+0x116>
						res = FR_DENIED;
 8006124:	2307      	movs	r3, #7
 8006126:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800612a:	e033      	b.n	8006194 <f_unlink+0x17e>
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
 800612c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800612e:	643b      	str	r3, [r7, #64]	; 0x40
						sdj.obj.sclust = dclst;
 8006130:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006134:	64bb      	str	r3, [r7, #72]	; 0x48
#if FF_FS_EXFAT
						if (fs->fs_type == FS_EXFAT) {
 8006136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	2b04      	cmp	r3, #4
 800613c:	d106      	bne.n	800614c <f_unlink+0x136>
							sdj.obj.objsize = obj.objsize;
 800613e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8006142:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
							sdj.obj.stat = obj.stat;
 8006146:	7bfb      	ldrb	r3, [r7, #15]
 8006148:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						}
#endif
						res = dir_sdi(&sdj, 0);
 800614c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006150:	2100      	movs	r1, #0
 8006152:	4618      	mov	r0, r3
 8006154:	f7fc f990 	bl	8002478 <dir_sdi>
 8006158:	4603      	mov	r3, r0
 800615a:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
						if (res == FR_OK) {
 800615e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8006162:	2b00      	cmp	r3, #0
 8006164:	d116      	bne.n	8006194 <f_unlink+0x17e>
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
 8006166:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800616a:	2100      	movs	r1, #0
 800616c:	4618      	mov	r0, r3
 800616e:	f7fd f848 	bl	8003202 <dir_read>
 8006172:	4603      	mov	r3, r0
 8006174:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8006178:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800617c:	2b00      	cmp	r3, #0
 800617e:	d102      	bne.n	8006186 <f_unlink+0x170>
 8006180:	2307      	movs	r3, #7
 8006182:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8006186:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800618a:	2b04      	cmp	r3, #4
 800618c:	d102      	bne.n	8006194 <f_unlink+0x17e>
 800618e:	2300      	movs	r3, #0
 8006190:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
						}
					}
				}
			}
			if (res == FR_OK) {
 8006194:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8006198:	2b00      	cmp	r3, #0
 800619a:	d125      	bne.n	80061e8 <f_unlink+0x1d2>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800619c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7fd fbcf 	bl	8003944 <dir_remove>
 80061a6:	4603      	mov	r3, r0
 80061a8:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
 80061ac:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10e      	bne.n	80061d2 <f_unlink+0x1bc>
 80061b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00a      	beq.n	80061d2 <f_unlink+0x1bc>
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
 80061bc:	f107 0308 	add.w	r3, r7, #8
 80061c0:	2200      	movs	r2, #0
 80061c2:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fb feaa 	bl	8001f20 <remove_chain>
 80061cc:	4603      	mov	r3, r0
 80061ce:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80061d2:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d106      	bne.n	80061e8 <f_unlink+0x1d2>
 80061da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061dc:	4618      	mov	r0, r3
 80061de:	f7fb fab3 	bl	8001748 <sync_fs>
 80061e2:	4603      	mov	r3, r0
 80061e4:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
			}
		}
		FREE_NAMBUF();
 80061e8:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80061ec:	f000 f954 	bl	8006498 <ff_memfree>
	}

	LEAVE_FF(fs, res);
 80061f0:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	37f4      	adds	r7, #244	; 0xf4
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd90      	pop	{r4, r7, pc}

080061fc <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b0aa      	sub	sp, #168	; 0xa8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = find_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
 8006204:	f107 010c 	add.w	r1, r7, #12
 8006208:	1d3b      	adds	r3, r7, #4
 800620a:	2202      	movs	r2, #2
 800620c:	4618      	mov	r0, r3
 800620e:	f7fe f8cf 	bl	80043b0 <find_volume>
 8006212:	4603      	mov	r3, r0
 8006214:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
	if (res == FR_OK) {
 8006218:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800621c:	2b00      	cmp	r3, #0
 800621e:	f040 8129 	bne.w	8006474 <f_mkdir+0x278>
		dj.obj.fs = fs;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	643b      	str	r3, [r7, #64]	; 0x40
		INIT_NAMBUF(fs);
 8006226:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800622a:	f000 f929 	bl	8006480 <ff_memalloc>
 800622e:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8006232:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <f_mkdir+0x42>
 800623a:	2311      	movs	r3, #17
 800623c:	e11c      	b.n	8006478 <f_mkdir+0x27c>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8006244:	60da      	str	r2, [r3, #12]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800624c:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8006250:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);			/* Follow the file path */
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006258:	4611      	mov	r1, r2
 800625a:	4618      	mov	r0, r3
 800625c:	f7fd ff06 	bl	800406c <follow_path>
 8006260:	4603      	mov	r3, r0
 8006262:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
 8006266:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800626a:	2b00      	cmp	r3, #0
 800626c:	d102      	bne.n	8006274 <f_mkdir+0x78>
 800626e:	2308      	movs	r3, #8
 8006270:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
 8006274:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006278:	2b04      	cmp	r3, #4
 800627a:	d108      	bne.n	800628e <f_mkdir+0x92>
 800627c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8006280:	f003 0320 	and.w	r3, r3, #32
 8006284:	2b00      	cmp	r3, #0
 8006286:	d002      	beq.n	800628e <f_mkdir+0x92>
			res = FR_INVALID_NAME;
 8006288:	2306      	movs	r3, #6
 800628a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
 800628e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006292:	2b04      	cmp	r3, #4
 8006294:	f040 80ea 	bne.w	800646c <f_mkdir+0x270>
			sobj.fs = fs;						/* New object id to create a new chain */
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	613b      	str	r3, [r7, #16]
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
 800629c:	f107 0310 	add.w	r3, r7, #16
 80062a0:	2100      	movs	r1, #0
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fb ff1e 	bl	80020e4 <create_chain>
 80062a8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
			res = FR_OK;
 80062ac:	2300      	movs	r3, #0
 80062ae:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
 80062b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d102      	bne.n	80062c0 <f_mkdir+0xc4>
 80062ba:	2307      	movs	r3, #7
 80062bc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
 80062c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d102      	bne.n	80062ce <f_mkdir+0xd2>
 80062c8:	2302      	movs	r3, #2
 80062ca:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
 80062ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d6:	d102      	bne.n	80062de <f_mkdir+0xe2>
 80062d8:	2301      	movs	r3, #1
 80062da:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
			tm = GET_FATTIME();
 80062de:	f7fa feb5 	bl	800104c <get_fattime>
 80062e2:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
			if (res == FR_OK) {
 80062e6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d154      	bne.n	8006398 <f_mkdir+0x19c>
				res = dir_clear(fs, dcl);		/* Clean up the new table */
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fc f830 	bl	800235a <dir_clear>
 80062fa:	4603      	mov	r3, r0
 80062fc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				if (res == FR_OK) {
 8006300:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006304:	2b00      	cmp	r3, #0
 8006306:	d147      	bne.n	8006398 <f_mkdir+0x19c>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	2b04      	cmp	r3, #4
 800630e:	d03b      	beq.n	8006388 <f_mkdir+0x18c>
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	334c      	adds	r3, #76	; 0x4c
 8006314:	220b      	movs	r2, #11
 8006316:	2120      	movs	r1, #32
 8006318:	4618      	mov	r0, r3
 800631a:	f7fb f888 	bl	800142e <mem_set>
						fs->win[DIR_Name] = '.';
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	222e      	movs	r2, #46	; 0x2e
 8006322:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
						fs->win[DIR_Attr] = AM_DIR;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2210      	movs	r2, #16
 800632a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
						st_dword(fs->win + DIR_ModTime, tm);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	334c      	adds	r3, #76	; 0x4c
 8006332:	3316      	adds	r3, #22
 8006334:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8006338:	4618      	mov	r0, r3
 800633a:	f7fa ffa4 	bl	8001286 <st_dword>
						st_clust(fs, fs->win, dcl);
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	334c      	adds	r3, #76	; 0x4c
 8006344:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006348:	4619      	mov	r1, r3
 800634a:	f7fc fa3b 	bl	80027c4 <st_clust>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	334c      	adds	r3, #76	; 0x4c
 8006352:	f103 0020 	add.w	r0, r3, #32
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	334c      	adds	r3, #76	; 0x4c
 800635a:	2220      	movs	r2, #32
 800635c:	4619      	mov	r1, r3
 800635e:	f7fb f845 	bl	80013ec <mem_cpy>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	222e      	movs	r2, #46	; 0x2e
 8006366:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 800636a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800636c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
						st_clust(fs, fs->win + SZDIRE, pcl);
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	334c      	adds	r3, #76	; 0x4c
 8006376:	3320      	adds	r3, #32
 8006378:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800637c:	4619      	mov	r1, r3
 800637e:	f7fc fa21 	bl	80027c4 <st_clust>
						fs->wflag = 1;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2201      	movs	r2, #1
 8006386:	70da      	strb	r2, [r3, #3]
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
 8006388:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800638c:	4618      	mov	r0, r3
 800638e:	f7fd f927 	bl	80035e0 <dir_register>
 8006392:	4603      	mov	r3, r0
 8006394:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
				}
			}
			if (res == FR_OK) {
 8006398:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800639c:	2b00      	cmp	r3, #0
 800639e:	d15d      	bne.n	800645c <f_mkdir+0x260>
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	2b04      	cmp	r3, #4
 80063a6:	d138      	bne.n	800641a <f_mkdir+0x21e>
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	330c      	adds	r3, #12
 80063ae:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fa ff67 	bl	8001286 <st_dword>
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	3334      	adds	r3, #52	; 0x34
 80063be:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fa ff5f 	bl	8001286 <st_dword>
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)fs->csize * SS(fs));	/* File size needs to be valid */
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	895b      	ldrh	r3, [r3, #10]
 80063d4:	025b      	lsls	r3, r3, #9
 80063d6:	4619      	mov	r1, r3
 80063d8:	4610      	mov	r0, r2
 80063da:	f7fa ff54 	bl	8001286 <st_dword>
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)fs->csize * SS(fs));
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	895b      	ldrh	r3, [r3, #10]
 80063ea:	025b      	lsls	r3, r3, #9
 80063ec:	4619      	mov	r1, r3
 80063ee:	4610      	mov	r0, r2
 80063f0:	f7fa ff49 	bl	8001286 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag */
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	3321      	adds	r3, #33	; 0x21
 80063fa:	2203      	movs	r2, #3
 80063fc:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	3304      	adds	r3, #4
 8006404:	2210      	movs	r2, #16
 8006406:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8006408:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800640c:	4618      	mov	r0, r3
 800640e:	f7fc fe34 	bl	800307a <store_xdir>
 8006412:	4603      	mov	r3, r0
 8006414:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8006418:	e014      	b.n	8006444 <f_mkdir+0x248>
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
 800641a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800641c:	3316      	adds	r3, #22
 800641e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8006422:	4618      	mov	r0, r3
 8006424:	f7fa ff2f 	bl	8001286 <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800642c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8006430:	4618      	mov	r0, r3
 8006432:	f7fc f9c7 	bl	80027c4 <st_clust>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
 8006436:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006438:	330b      	adds	r3, #11
 800643a:	2210      	movs	r2, #16
 800643c:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2201      	movs	r2, #1
 8006442:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8006444:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10f      	bne.n	800646c <f_mkdir+0x270>
					res = sync_fs(fs);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4618      	mov	r0, r3
 8006450:	f7fb f97a 	bl	8001748 <sync_fs>
 8006454:	4603      	mov	r3, r0
 8006456:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800645a:	e007      	b.n	800646c <f_mkdir+0x270>
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
 800645c:	f107 0310 	add.w	r3, r7, #16
 8006460:	2200      	movs	r2, #0
 8006462:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8006466:	4618      	mov	r0, r3
 8006468:	f7fb fd5a 	bl	8001f20 <remove_chain>
			}
		}
		FREE_NAMBUF();
 800646c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8006470:	f000 f812 	bl	8006498 <ff_memfree>
	}

	LEAVE_FF(fs, res);
 8006474:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 8006478:	4618      	mov	r0, r3
 800647a:	37a8      	adds	r7, #168	; 0xa8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <ff_memalloc>:
/*------------------------------------------------------------------------*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
	return malloc(msize);	/* Allocate a new memory block with POSIX API */
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f010 f865 	bl	8016558 <malloc>
 800648e:	4603      	mov	r3, r0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
	free(mblock);	/* Free the memory block with POSIX API */
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f010 f861 	bl	8016568 <free>
}
 80064a6:	bf00      	nop
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
	...

080064b0 <ff_uni2oem>:
#if FF_CODE_PAGE >= 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b08b      	sub	sp, #44	; 0x2c
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	460b      	mov	r3, r1
 80064ba:	807b      	strh	r3, [r7, #2]
	const WCHAR *p;
	WCHAR c = 0, uc;
 80064bc:	2300      	movs	r3, #0
 80064be:	84fb      	strh	r3, [r7, #38]	; 0x26
	UINT i = 0, n, li, hi;
 80064c0:	2300      	movs	r3, #0
 80064c2:	623b      	str	r3, [r7, #32]


	if (uni < 0x80) {	/* ASCII? */
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b7f      	cmp	r3, #127	; 0x7f
 80064c8:	d802      	bhi.n	80064d0 <ff_uni2oem+0x20>
		c = (WCHAR)uni;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80064ce:	e041      	b.n	8006554 <ff_uni2oem+0xa4>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064d6:	d23d      	bcs.n	8006554 <ff_uni2oem+0xa4>
 80064d8:	887b      	ldrh	r3, [r7, #2]
 80064da:	f5b3 7f69 	cmp.w	r3, #932	; 0x3a4
 80064de:	d139      	bne.n	8006554 <ff_uni2oem+0xa4>
			uc = (WCHAR)uni;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	827b      	strh	r3, [r7, #18]
			p = CVTBL(uni2oem, FF_CODE_PAGE);
 80064e4:	4b1f      	ldr	r3, [pc, #124]	; (8006564 <ff_uni2oem+0xb4>)
 80064e6:	60fb      	str	r3, [r7, #12]
			hi = sizeof CVTBL(uni2oem, FF_CODE_PAGE) / 4 - 1;
 80064e8:	f641 43dd 	movw	r3, #7389	; 0x1cdd
 80064ec:	617b      	str	r3, [r7, #20]
			li = 0;
 80064ee:	2300      	movs	r3, #0
 80064f0:	61bb      	str	r3, [r7, #24]
			for (n = 16; n; n--) {
 80064f2:	2310      	movs	r3, #16
 80064f4:	61fb      	str	r3, [r7, #28]
 80064f6:	e01e      	b.n	8006536 <ff_uni2oem+0x86>
				i = li + (hi - li) / 2;
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	085b      	lsrs	r3, r3, #1
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	4413      	add	r3, r2
 8006504:	623b      	str	r3, [r7, #32]
				if (uc == p[i * 2]) break;
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	4413      	add	r3, r2
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	8a7a      	ldrh	r2, [r7, #18]
 8006512:	429a      	cmp	r2, r3
 8006514:	d013      	beq.n	800653e <ff_uni2oem+0x8e>
				if (uc > p[i * 2]) {
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	4413      	add	r3, r2
 800651e:	881b      	ldrh	r3, [r3, #0]
 8006520:	8a7a      	ldrh	r2, [r7, #18]
 8006522:	429a      	cmp	r2, r3
 8006524:	d902      	bls.n	800652c <ff_uni2oem+0x7c>
					li = i;
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	61bb      	str	r3, [r7, #24]
 800652a:	e001      	b.n	8006530 <ff_uni2oem+0x80>
				} else {
					hi = i;
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	617b      	str	r3, [r7, #20]
			for (n = 16; n; n--) {
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	3b01      	subs	r3, #1
 8006534:	61fb      	str	r3, [r7, #28]
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1dd      	bne.n	80064f8 <ff_uni2oem+0x48>
 800653c:	e000      	b.n	8006540 <ff_uni2oem+0x90>
				if (uc == p[i * 2]) break;
 800653e:	bf00      	nop
				}
			}
			if (n != 0) c = p[i * 2 + 1];
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d006      	beq.n	8006554 <ff_uni2oem+0xa4>
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	3302      	adds	r3, #2
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	4413      	add	r3, r2
 8006550:	881b      	ldrh	r3, [r3, #0]
 8006552:	84fb      	strh	r3, [r7, #38]	; 0x26
		}
	}

	return c;
 8006554:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8006556:	4618      	mov	r0, r3
 8006558:	372c      	adds	r7, #44	; 0x2c
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	0801a27c 	.word	0x0801a27c

08006568 <ff_oem2uni>:

WCHAR ff_oem2uni (	/* Returns Unicode character, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 8006568:	b480      	push	{r7}
 800656a:	b089      	sub	sp, #36	; 0x24
 800656c:	af00      	add	r7, sp, #0
 800656e:	4603      	mov	r3, r0
 8006570:	460a      	mov	r2, r1
 8006572:	80fb      	strh	r3, [r7, #6]
 8006574:	4613      	mov	r3, r2
 8006576:	80bb      	strh	r3, [r7, #4]
	const WCHAR *p;
	WCHAR c = 0;
 8006578:	2300      	movs	r3, #0
 800657a:	83fb      	strh	r3, [r7, #30]
	UINT i = 0, n, li, hi;
 800657c:	2300      	movs	r3, #0
 800657e:	61bb      	str	r3, [r7, #24]


	if (oem < 0x80) {	/* ASCII? */
 8006580:	88fb      	ldrh	r3, [r7, #6]
 8006582:	2b7f      	cmp	r3, #127	; 0x7f
 8006584:	d802      	bhi.n	800658c <ff_oem2uni+0x24>
		c = oem;
 8006586:	88fb      	ldrh	r3, [r7, #6]
 8006588:	83fb      	strh	r3, [r7, #30]
 800658a:	e03b      	b.n	8006604 <ff_oem2uni+0x9c>

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it valid code page? */
 800658c:	88bb      	ldrh	r3, [r7, #4]
 800658e:	f5b3 7f69 	cmp.w	r3, #932	; 0x3a4
 8006592:	d137      	bne.n	8006604 <ff_oem2uni+0x9c>
			p = CVTBL(oem2uni, FF_CODE_PAGE);
 8006594:	4b1f      	ldr	r3, [pc, #124]	; (8006614 <ff_oem2uni+0xac>)
 8006596:	60bb      	str	r3, [r7, #8]
			hi = sizeof CVTBL(oem2uni, FF_CODE_PAGE) / 4 - 1;
 8006598:	f641 43dd 	movw	r3, #7389	; 0x1cdd
 800659c:	60fb      	str	r3, [r7, #12]
			li = 0;
 800659e:	2300      	movs	r3, #0
 80065a0:	613b      	str	r3, [r7, #16]
			for (n = 16; n; n--) {
 80065a2:	2310      	movs	r3, #16
 80065a4:	617b      	str	r3, [r7, #20]
 80065a6:	e01e      	b.n	80065e6 <ff_oem2uni+0x7e>
				i = li + (hi - li) / 2;
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	085b      	lsrs	r3, r3, #1
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	4413      	add	r3, r2
 80065b4:	61bb      	str	r3, [r7, #24]
				if (oem == p[i * 2]) break;
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	4413      	add	r3, r2
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	88fa      	ldrh	r2, [r7, #6]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d013      	beq.n	80065ee <ff_oem2uni+0x86>
				if (oem > p[i * 2]) {
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	4413      	add	r3, r2
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	88fa      	ldrh	r2, [r7, #6]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d902      	bls.n	80065dc <ff_oem2uni+0x74>
					li = i;
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	613b      	str	r3, [r7, #16]
 80065da:	e001      	b.n	80065e0 <ff_oem2uni+0x78>
				} else {
					hi = i;
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	60fb      	str	r3, [r7, #12]
			for (n = 16; n; n--) {
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	3b01      	subs	r3, #1
 80065e4:	617b      	str	r3, [r7, #20]
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1dd      	bne.n	80065a8 <ff_oem2uni+0x40>
 80065ec:	e000      	b.n	80065f0 <ff_oem2uni+0x88>
				if (oem == p[i * 2]) break;
 80065ee:	bf00      	nop
				}
			}
			if (n != 0) c = p[i * 2 + 1];
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d006      	beq.n	8006604 <ff_oem2uni+0x9c>
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	3302      	adds	r3, #2
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	4413      	add	r3, r2
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	83fb      	strh	r3, [r7, #30]
		}
	}

	return c;
 8006604:	8bfb      	ldrh	r3, [r7, #30]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3724      	adds	r7, #36	; 0x24
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	080215f4 	.word	0x080215f4

08006618 <ff_wtoupper>:
/*------------------------------------------------------------------------*/

DWORD ff_wtoupper (	/* Returns up-converted code point */
	DWORD uni		/* Unicode code point to be up-converted */
)
{
 8006618:	b480      	push	{r7}
 800661a:	b087      	sub	sp, #28
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006626:	d27d      	bcs.n	8006724 <ff_wtoupper+0x10c>
		uc = (WORD)uni;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	827b      	strh	r3, [r7, #18]
		p = uc < 0x1000 ? cvt1 : cvt2;
 800662c:	8a7b      	ldrh	r3, [r7, #18]
 800662e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006632:	d201      	bcs.n	8006638 <ff_wtoupper+0x20>
 8006634:	4b3f      	ldr	r3, [pc, #252]	; (8006734 <ff_wtoupper+0x11c>)
 8006636:	e000      	b.n	800663a <ff_wtoupper+0x22>
 8006638:	4b3f      	ldr	r3, [pc, #252]	; (8006738 <ff_wtoupper+0x120>)
 800663a:	617b      	str	r3, [r7, #20]
		for (;;) {
			bc = *p++;								/* Get the block base */
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	1c9a      	adds	r2, r3, #2
 8006640:	617a      	str	r2, [r7, #20]
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	823b      	strh	r3, [r7, #16]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 8006646:	8a3b      	ldrh	r3, [r7, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d069      	beq.n	8006720 <ff_wtoupper+0x108>
 800664c:	8a7a      	ldrh	r2, [r7, #18]
 800664e:	8a3b      	ldrh	r3, [r7, #16]
 8006650:	429a      	cmp	r2, r3
 8006652:	d365      	bcc.n	8006720 <ff_wtoupper+0x108>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	1c9a      	adds	r2, r3, #2
 8006658:	617a      	str	r2, [r7, #20]
 800665a:	881b      	ldrh	r3, [r3, #0]
 800665c:	81fb      	strh	r3, [r7, #14]
 800665e:	89fb      	ldrh	r3, [r7, #14]
 8006660:	0a1b      	lsrs	r3, r3, #8
 8006662:	81bb      	strh	r3, [r7, #12]
 8006664:	89fb      	ldrh	r3, [r7, #14]
 8006666:	b2db      	uxtb	r3, r3
 8006668:	81fb      	strh	r3, [r7, #14]
			if (uc < bc + nc) {	/* In the block? */
 800666a:	8a7a      	ldrh	r2, [r7, #18]
 800666c:	8a39      	ldrh	r1, [r7, #16]
 800666e:	89fb      	ldrh	r3, [r7, #14]
 8006670:	440b      	add	r3, r1
 8006672:	429a      	cmp	r2, r3
 8006674:	da4a      	bge.n	800670c <ff_wtoupper+0xf4>
				switch (cmd) {
 8006676:	89bb      	ldrh	r3, [r7, #12]
 8006678:	2b08      	cmp	r3, #8
 800667a:	d850      	bhi.n	800671e <ff_wtoupper+0x106>
 800667c:	a201      	add	r2, pc, #4	; (adr r2, 8006684 <ff_wtoupper+0x6c>)
 800667e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006682:	bf00      	nop
 8006684:	080066a9 	.word	0x080066a9
 8006688:	080066bb 	.word	0x080066bb
 800668c:	080066d1 	.word	0x080066d1
 8006690:	080066d9 	.word	0x080066d9
 8006694:	080066e1 	.word	0x080066e1
 8006698:	080066e9 	.word	0x080066e9
 800669c:	080066f1 	.word	0x080066f1
 80066a0:	080066f9 	.word	0x080066f9
 80066a4:	08006701 	.word	0x08006701
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 80066a8:	8a7a      	ldrh	r2, [r7, #18]
 80066aa:	8a3b      	ldrh	r3, [r7, #16]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	005b      	lsls	r3, r3, #1
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	4413      	add	r3, r2
 80066b4:	881b      	ldrh	r3, [r3, #0]
 80066b6:	827b      	strh	r3, [r7, #18]
 80066b8:	e027      	b.n	800670a <ff_wtoupper+0xf2>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 80066ba:	8a7a      	ldrh	r2, [r7, #18]
 80066bc:	8a3b      	ldrh	r3, [r7, #16]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	8a7a      	ldrh	r2, [r7, #18]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	827b      	strh	r3, [r7, #18]
 80066ce:	e01c      	b.n	800670a <ff_wtoupper+0xf2>
				case 2: uc -= 16; break;			/* Shift -16 */
 80066d0:	8a7b      	ldrh	r3, [r7, #18]
 80066d2:	3b10      	subs	r3, #16
 80066d4:	827b      	strh	r3, [r7, #18]
 80066d6:	e018      	b.n	800670a <ff_wtoupper+0xf2>
				case 3:	uc -= 32; break;			/* Shift -32 */
 80066d8:	8a7b      	ldrh	r3, [r7, #18]
 80066da:	3b20      	subs	r3, #32
 80066dc:	827b      	strh	r3, [r7, #18]
 80066de:	e014      	b.n	800670a <ff_wtoupper+0xf2>
				case 4:	uc -= 48; break;			/* Shift -48 */
 80066e0:	8a7b      	ldrh	r3, [r7, #18]
 80066e2:	3b30      	subs	r3, #48	; 0x30
 80066e4:	827b      	strh	r3, [r7, #18]
 80066e6:	e010      	b.n	800670a <ff_wtoupper+0xf2>
				case 5:	uc -= 26; break;			/* Shift -26 */
 80066e8:	8a7b      	ldrh	r3, [r7, #18]
 80066ea:	3b1a      	subs	r3, #26
 80066ec:	827b      	strh	r3, [r7, #18]
 80066ee:	e00c      	b.n	800670a <ff_wtoupper+0xf2>
				case 6:	uc += 8; break;				/* Shift +8 */
 80066f0:	8a7b      	ldrh	r3, [r7, #18]
 80066f2:	3308      	adds	r3, #8
 80066f4:	827b      	strh	r3, [r7, #18]
 80066f6:	e008      	b.n	800670a <ff_wtoupper+0xf2>
				case 7: uc -= 80; break;			/* Shift -80 */
 80066f8:	8a7b      	ldrh	r3, [r7, #18]
 80066fa:	3b50      	subs	r3, #80	; 0x50
 80066fc:	827b      	strh	r3, [r7, #18]
 80066fe:	e004      	b.n	800670a <ff_wtoupper+0xf2>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 8006700:	8a7b      	ldrh	r3, [r7, #18]
 8006702:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8006706:	827b      	strh	r3, [r7, #18]
 8006708:	bf00      	nop
				}
				break;
 800670a:	e008      	b.n	800671e <ff_wtoupper+0x106>
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
 800670c:	89bb      	ldrh	r3, [r7, #12]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d194      	bne.n	800663c <ff_wtoupper+0x24>
 8006712:	89fb      	ldrh	r3, [r7, #14]
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	4413      	add	r3, r2
 800671a:	617b      	str	r3, [r7, #20]
			bc = *p++;								/* Get the block base */
 800671c:	e78e      	b.n	800663c <ff_wtoupper+0x24>
				break;
 800671e:	bf00      	nop
		}
		uni = uc;
 8006720:	8a7b      	ldrh	r3, [r7, #18]
 8006722:	607b      	str	r3, [r7, #4]
	}

	return uni;
 8006724:	687b      	ldr	r3, [r7, #4]
}
 8006726:	4618      	mov	r0, r3
 8006728:	371c      	adds	r7, #28
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	0802896c 	.word	0x0802896c
 8006738:	08028b60 	.word	0x08028b60

0800673c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006740:	f001 faaa 	bl	8007c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006744:	f000 f810 	bl	8006768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006748:	f000 f8ae 	bl	80068a8 <MX_GPIO_Init>
  MX_LWIP_Init();
 800674c:	f003 fd7a 	bl	800a244 <MX_LWIP_Init>
  MX_SPI1_Init();
 8006750:	f000 f874 	bl	800683c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  udp_server_init();
 8006754:	f000 fa46 	bl	8006be4 <udp_server_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ethernetif_input(&gnetif);
 8006758:	4802      	ldr	r0, [pc, #8]	; (8006764 <main+0x28>)
 800675a:	f004 f85b 	bl	800a814 <ethernetif_input>
	  	  sys_check_timeouts();
 800675e:	f00b f84d 	bl	80117fc <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 8006762:	e7f9      	b.n	8006758 <main+0x1c>
 8006764:	200005b0 	.word	0x200005b0

08006768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b094      	sub	sp, #80	; 0x50
 800676c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800676e:	f107 0320 	add.w	r3, r7, #32
 8006772:	2230      	movs	r2, #48	; 0x30
 8006774:	2100      	movs	r1, #0
 8006776:	4618      	mov	r0, r3
 8006778:	f00f ff18 	bl	80165ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800677c:	f107 030c 	add.w	r3, r7, #12
 8006780:	2200      	movs	r2, #0
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	605a      	str	r2, [r3, #4]
 8006786:	609a      	str	r2, [r3, #8]
 8006788:	60da      	str	r2, [r3, #12]
 800678a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800678c:	2300      	movs	r3, #0
 800678e:	60bb      	str	r3, [r7, #8]
 8006790:	4b28      	ldr	r3, [pc, #160]	; (8006834 <SystemClock_Config+0xcc>)
 8006792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006794:	4a27      	ldr	r2, [pc, #156]	; (8006834 <SystemClock_Config+0xcc>)
 8006796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800679a:	6413      	str	r3, [r2, #64]	; 0x40
 800679c:	4b25      	ldr	r3, [pc, #148]	; (8006834 <SystemClock_Config+0xcc>)
 800679e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067a4:	60bb      	str	r3, [r7, #8]
 80067a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80067a8:	2300      	movs	r3, #0
 80067aa:	607b      	str	r3, [r7, #4]
 80067ac:	4b22      	ldr	r3, [pc, #136]	; (8006838 <SystemClock_Config+0xd0>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a21      	ldr	r2, [pc, #132]	; (8006838 <SystemClock_Config+0xd0>)
 80067b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067b6:	6013      	str	r3, [r2, #0]
 80067b8:	4b1f      	ldr	r3, [pc, #124]	; (8006838 <SystemClock_Config+0xd0>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067c0:	607b      	str	r3, [r7, #4]
 80067c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80067c4:	2301      	movs	r3, #1
 80067c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80067c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80067cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80067ce:	2302      	movs	r3, #2
 80067d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80067d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80067d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80067d8:	2304      	movs	r3, #4
 80067da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80067dc:	23a8      	movs	r3, #168	; 0xa8
 80067de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80067e0:	2302      	movs	r3, #2
 80067e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80067e4:	2304      	movs	r3, #4
 80067e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80067e8:	f107 0320 	add.w	r3, r7, #32
 80067ec:	4618      	mov	r0, r3
 80067ee:	f002 fcfb 	bl	80091e8 <HAL_RCC_OscConfig>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d001      	beq.n	80067fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80067f8:	f000 f89a 	bl	8006930 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80067fc:	230f      	movs	r3, #15
 80067fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006800:	2302      	movs	r3, #2
 8006802:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006804:	2300      	movs	r3, #0
 8006806:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006808:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800680c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800680e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006812:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006814:	f107 030c 	add.w	r3, r7, #12
 8006818:	2105      	movs	r1, #5
 800681a:	4618      	mov	r0, r3
 800681c:	f002 ff54 	bl	80096c8 <HAL_RCC_ClockConfig>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8006826:	f000 f883 	bl	8006930 <Error_Handler>
  }
}
 800682a:	bf00      	nop
 800682c:	3750      	adds	r7, #80	; 0x50
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	40023800 	.word	0x40023800
 8006838:	40007000 	.word	0x40007000

0800683c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006840:	4b17      	ldr	r3, [pc, #92]	; (80068a0 <MX_SPI1_Init+0x64>)
 8006842:	4a18      	ldr	r2, [pc, #96]	; (80068a4 <MX_SPI1_Init+0x68>)
 8006844:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006846:	4b16      	ldr	r3, [pc, #88]	; (80068a0 <MX_SPI1_Init+0x64>)
 8006848:	f44f 7282 	mov.w	r2, #260	; 0x104
 800684c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800684e:	4b14      	ldr	r3, [pc, #80]	; (80068a0 <MX_SPI1_Init+0x64>)
 8006850:	2200      	movs	r2, #0
 8006852:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006854:	4b12      	ldr	r3, [pc, #72]	; (80068a0 <MX_SPI1_Init+0x64>)
 8006856:	2200      	movs	r2, #0
 8006858:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800685a:	4b11      	ldr	r3, [pc, #68]	; (80068a0 <MX_SPI1_Init+0x64>)
 800685c:	2200      	movs	r2, #0
 800685e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006860:	4b0f      	ldr	r3, [pc, #60]	; (80068a0 <MX_SPI1_Init+0x64>)
 8006862:	2200      	movs	r2, #0
 8006864:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006866:	4b0e      	ldr	r3, [pc, #56]	; (80068a0 <MX_SPI1_Init+0x64>)
 8006868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800686c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800686e:	4b0c      	ldr	r3, [pc, #48]	; (80068a0 <MX_SPI1_Init+0x64>)
 8006870:	2218      	movs	r2, #24
 8006872:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006874:	4b0a      	ldr	r3, [pc, #40]	; (80068a0 <MX_SPI1_Init+0x64>)
 8006876:	2200      	movs	r2, #0
 8006878:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800687a:	4b09      	ldr	r3, [pc, #36]	; (80068a0 <MX_SPI1_Init+0x64>)
 800687c:	2200      	movs	r2, #0
 800687e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006880:	4b07      	ldr	r3, [pc, #28]	; (80068a0 <MX_SPI1_Init+0x64>)
 8006882:	2200      	movs	r2, #0
 8006884:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8006886:	4b06      	ldr	r3, [pc, #24]	; (80068a0 <MX_SPI1_Init+0x64>)
 8006888:	220a      	movs	r2, #10
 800688a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800688c:	4804      	ldr	r0, [pc, #16]	; (80068a0 <MX_SPI1_Init+0x64>)
 800688e:	f003 f8e5 	bl	8009a5c <HAL_SPI_Init>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8006898:	f000 f84a 	bl	8006930 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800689c:	bf00      	nop
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	200005e4 	.word	0x200005e4
 80068a4:	40013000 	.word	0x40013000

080068a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80068ae:	2300      	movs	r3, #0
 80068b0:	60fb      	str	r3, [r7, #12]
 80068b2:	4b1e      	ldr	r3, [pc, #120]	; (800692c <MX_GPIO_Init+0x84>)
 80068b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b6:	4a1d      	ldr	r2, [pc, #116]	; (800692c <MX_GPIO_Init+0x84>)
 80068b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068bc:	6313      	str	r3, [r2, #48]	; 0x30
 80068be:	4b1b      	ldr	r3, [pc, #108]	; (800692c <MX_GPIO_Init+0x84>)
 80068c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80068ca:	2300      	movs	r3, #0
 80068cc:	60bb      	str	r3, [r7, #8]
 80068ce:	4b17      	ldr	r3, [pc, #92]	; (800692c <MX_GPIO_Init+0x84>)
 80068d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d2:	4a16      	ldr	r2, [pc, #88]	; (800692c <MX_GPIO_Init+0x84>)
 80068d4:	f043 0304 	orr.w	r3, r3, #4
 80068d8:	6313      	str	r3, [r2, #48]	; 0x30
 80068da:	4b14      	ldr	r3, [pc, #80]	; (800692c <MX_GPIO_Init+0x84>)
 80068dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068de:	f003 0304 	and.w	r3, r3, #4
 80068e2:	60bb      	str	r3, [r7, #8]
 80068e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80068e6:	2300      	movs	r3, #0
 80068e8:	607b      	str	r3, [r7, #4]
 80068ea:	4b10      	ldr	r3, [pc, #64]	; (800692c <MX_GPIO_Init+0x84>)
 80068ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ee:	4a0f      	ldr	r2, [pc, #60]	; (800692c <MX_GPIO_Init+0x84>)
 80068f0:	f043 0301 	orr.w	r3, r3, #1
 80068f4:	6313      	str	r3, [r2, #48]	; 0x30
 80068f6:	4b0d      	ldr	r3, [pc, #52]	; (800692c <MX_GPIO_Init+0x84>)
 80068f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	607b      	str	r3, [r7, #4]
 8006900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006902:	2300      	movs	r3, #0
 8006904:	603b      	str	r3, [r7, #0]
 8006906:	4b09      	ldr	r3, [pc, #36]	; (800692c <MX_GPIO_Init+0x84>)
 8006908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690a:	4a08      	ldr	r2, [pc, #32]	; (800692c <MX_GPIO_Init+0x84>)
 800690c:	f043 0302 	orr.w	r3, r3, #2
 8006910:	6313      	str	r3, [r2, #48]	; 0x30
 8006912:	4b06      	ldr	r3, [pc, #24]	; (800692c <MX_GPIO_Init+0x84>)
 8006914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	603b      	str	r3, [r7, #0]
 800691c:	683b      	ldr	r3, [r7, #0]

}
 800691e:	bf00      	nop
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	40023800 	.word	0x40023800

08006930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006930:	b480      	push	{r7}
 8006932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006934:	bf00      	nop
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
	...

08006940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006946:	2300      	movs	r3, #0
 8006948:	607b      	str	r3, [r7, #4]
 800694a:	4b10      	ldr	r3, [pc, #64]	; (800698c <HAL_MspInit+0x4c>)
 800694c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694e:	4a0f      	ldr	r2, [pc, #60]	; (800698c <HAL_MspInit+0x4c>)
 8006950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006954:	6453      	str	r3, [r2, #68]	; 0x44
 8006956:	4b0d      	ldr	r3, [pc, #52]	; (800698c <HAL_MspInit+0x4c>)
 8006958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800695a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800695e:	607b      	str	r3, [r7, #4]
 8006960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006962:	2300      	movs	r3, #0
 8006964:	603b      	str	r3, [r7, #0]
 8006966:	4b09      	ldr	r3, [pc, #36]	; (800698c <HAL_MspInit+0x4c>)
 8006968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696a:	4a08      	ldr	r2, [pc, #32]	; (800698c <HAL_MspInit+0x4c>)
 800696c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006970:	6413      	str	r3, [r2, #64]	; 0x40
 8006972:	4b06      	ldr	r3, [pc, #24]	; (800698c <HAL_MspInit+0x4c>)
 8006974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800697a:	603b      	str	r3, [r7, #0]
 800697c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800697e:	bf00      	nop
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	40023800 	.word	0x40023800

08006990 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b08a      	sub	sp, #40	; 0x28
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006998:	f107 0314 	add.w	r3, r7, #20
 800699c:	2200      	movs	r2, #0
 800699e:	601a      	str	r2, [r3, #0]
 80069a0:	605a      	str	r2, [r3, #4]
 80069a2:	609a      	str	r2, [r3, #8]
 80069a4:	60da      	str	r2, [r3, #12]
 80069a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a19      	ldr	r2, [pc, #100]	; (8006a14 <HAL_SPI_MspInit+0x84>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d12b      	bne.n	8006a0a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80069b2:	2300      	movs	r3, #0
 80069b4:	613b      	str	r3, [r7, #16]
 80069b6:	4b18      	ldr	r3, [pc, #96]	; (8006a18 <HAL_SPI_MspInit+0x88>)
 80069b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ba:	4a17      	ldr	r2, [pc, #92]	; (8006a18 <HAL_SPI_MspInit+0x88>)
 80069bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80069c0:	6453      	str	r3, [r2, #68]	; 0x44
 80069c2:	4b15      	ldr	r3, [pc, #84]	; (8006a18 <HAL_SPI_MspInit+0x88>)
 80069c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069ca:	613b      	str	r3, [r7, #16]
 80069cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069ce:	2300      	movs	r3, #0
 80069d0:	60fb      	str	r3, [r7, #12]
 80069d2:	4b11      	ldr	r3, [pc, #68]	; (8006a18 <HAL_SPI_MspInit+0x88>)
 80069d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d6:	4a10      	ldr	r2, [pc, #64]	; (8006a18 <HAL_SPI_MspInit+0x88>)
 80069d8:	f043 0302 	orr.w	r3, r3, #2
 80069dc:	6313      	str	r3, [r2, #48]	; 0x30
 80069de:	4b0e      	ldr	r3, [pc, #56]	; (8006a18 <HAL_SPI_MspInit+0x88>)
 80069e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80069ea:	2338      	movs	r3, #56	; 0x38
 80069ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069ee:	2302      	movs	r3, #2
 80069f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069f2:	2300      	movs	r3, #0
 80069f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069f6:	2303      	movs	r3, #3
 80069f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80069fa:	2305      	movs	r3, #5
 80069fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069fe:	f107 0314 	add.w	r3, r7, #20
 8006a02:	4619      	mov	r1, r3
 8006a04:	4805      	ldr	r0, [pc, #20]	; (8006a1c <HAL_SPI_MspInit+0x8c>)
 8006a06:	f002 fa55 	bl	8008eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006a0a:	bf00      	nop
 8006a0c:	3728      	adds	r7, #40	; 0x28
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	40013000 	.word	0x40013000
 8006a18:	40023800 	.word	0x40023800
 8006a1c:	40020400 	.word	0x40020400

08006a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006a20:	b480      	push	{r7}
 8006a22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006a24:	bf00      	nop
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006a32:	e7fe      	b.n	8006a32 <HardFault_Handler+0x4>

08006a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006a34:	b480      	push	{r7}
 8006a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006a38:	e7fe      	b.n	8006a38 <MemManage_Handler+0x4>

08006a3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006a3e:	e7fe      	b.n	8006a3e <BusFault_Handler+0x4>

08006a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006a40:	b480      	push	{r7}
 8006a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006a44:	e7fe      	b.n	8006a44 <UsageFault_Handler+0x4>

08006a46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006a46:	b480      	push	{r7}
 8006a48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006a4a:	bf00      	nop
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006a54:	b480      	push	{r7}
 8006a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006a58:	bf00      	nop
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr

08006a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006a62:	b480      	push	{r7}
 8006a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006a66:	bf00      	nop
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	sdcard_systick_timerproc();
 8006a74:	f7fa fad2 	bl	800101c <sdcard_systick_timerproc>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006a78:	f001 f960 	bl	8007d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006a7c:	bf00      	nop
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	617b      	str	r3, [r7, #20]
 8006a90:	e00a      	b.n	8006aa8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006a92:	f3af 8000 	nop.w
 8006a96:	4601      	mov	r1, r0
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	1c5a      	adds	r2, r3, #1
 8006a9c:	60ba      	str	r2, [r7, #8]
 8006a9e:	b2ca      	uxtb	r2, r1
 8006aa0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	617b      	str	r3, [r7, #20]
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	dbf0      	blt.n	8006a92 <_read+0x12>
	}

return len;
 8006ab0:	687b      	ldr	r3, [r7, #4]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}

08006aba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006aba:	b580      	push	{r7, lr}
 8006abc:	b086      	sub	sp, #24
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	60f8      	str	r0, [r7, #12]
 8006ac2:	60b9      	str	r1, [r7, #8]
 8006ac4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	617b      	str	r3, [r7, #20]
 8006aca:	e009      	b.n	8006ae0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	1c5a      	adds	r2, r3, #1
 8006ad0:	60ba      	str	r2, [r7, #8]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	3301      	adds	r3, #1
 8006ade:	617b      	str	r3, [r7, #20]
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	dbf1      	blt.n	8006acc <_write+0x12>
	}
	return len;
 8006ae8:	687b      	ldr	r3, [r7, #4]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3718      	adds	r7, #24
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <_close>:

int _close(int file)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b083      	sub	sp, #12
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
	return -1;
 8006afa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	370c      	adds	r7, #12
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b083      	sub	sp, #12
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006b1a:	605a      	str	r2, [r3, #4]
	return 0;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	370c      	adds	r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <_isatty>:

int _isatty(int file)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b083      	sub	sp, #12
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
	return 1;
 8006b32:	2301      	movs	r3, #1
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
	return 0;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
	...

08006b5c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b085      	sub	sp, #20
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006b64:	4b11      	ldr	r3, [pc, #68]	; (8006bac <_sbrk+0x50>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d102      	bne.n	8006b72 <_sbrk+0x16>
		heap_end = &end;
 8006b6c:	4b0f      	ldr	r3, [pc, #60]	; (8006bac <_sbrk+0x50>)
 8006b6e:	4a10      	ldr	r2, [pc, #64]	; (8006bb0 <_sbrk+0x54>)
 8006b70:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006b72:	4b0e      	ldr	r3, [pc, #56]	; (8006bac <_sbrk+0x50>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006b78:	4b0c      	ldr	r3, [pc, #48]	; (8006bac <_sbrk+0x50>)
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4413      	add	r3, r2
 8006b80:	466a      	mov	r2, sp
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d905      	bls.n	8006b92 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8006b86:	4b0b      	ldr	r3, [pc, #44]	; (8006bb4 <_sbrk+0x58>)
 8006b88:	220c      	movs	r2, #12
 8006b8a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8006b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b90:	e006      	b.n	8006ba0 <_sbrk+0x44>
	}

	heap_end += incr;
 8006b92:	4b06      	ldr	r3, [pc, #24]	; (8006bac <_sbrk+0x50>)
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4413      	add	r3, r2
 8006b9a:	4a04      	ldr	r2, [pc, #16]	; (8006bac <_sbrk+0x50>)
 8006b9c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3714      	adds	r7, #20
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	200000b0 	.word	0x200000b0
 8006bb0:	20007b48 	.word	0x20007b48
 8006bb4:	20007b40 	.word	0x20007b40

08006bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006bbc:	4b08      	ldr	r3, [pc, #32]	; (8006be0 <SystemInit+0x28>)
 8006bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bc2:	4a07      	ldr	r2, [pc, #28]	; (8006be0 <SystemInit+0x28>)
 8006bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006bcc:	4b04      	ldr	r3, [pc, #16]	; (8006be0 <SystemInit+0x28>)
 8006bce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006bd2:	609a      	str	r2, [r3, #8]
#endif
}
 8006bd4:	bf00      	nop
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	e000ed00 	.word	0xe000ed00

08006be4 <udp_server_init>:
uint16_t delete_directory(char * path);
uint16_t create_directory(char * path);
uint16_t login_user();
uint16_t check_if_logged();
void udp_server_init(void)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
	memset(isLogged,0, sizeof(isLogged));
 8006bea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bee:	2100      	movs	r1, #0
 8006bf0:	4811      	ldr	r0, [pc, #68]	; (8006c38 <udp_server_init+0x54>)
 8006bf2:	f00f fcdb 	bl	80165ac <memset>
	memset(packet_control, 0, sizeof(packet_control));
 8006bf6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	480f      	ldr	r0, [pc, #60]	; (8006c3c <udp_server_init+0x58>)
 8006bfe:	f00f fcd5 	bl	80165ac <memset>
   struct udp_pcb *upcb;
   err_t err;
   upcb = udp_new();
 8006c02:	f00b fb0d 	bl	8012220 <udp_new>
 8006c06:	6078      	str	r0, [r7, #4]

   if (upcb)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d010      	beq.n	8006c30 <udp_server_init+0x4c>
   {
      err = udp_bind(upcb, IP_ADDR_ANY, UDP_SERVER_PORT);
 8006c0e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8006c12:	490b      	ldr	r1, [pc, #44]	; (8006c40 <udp_server_init+0x5c>)
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f00b f9ab 	bl	8011f70 <udp_bind>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	70fb      	strb	r3, [r7, #3]
      if(err == ERR_OK)
 8006c1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d104      	bne.n	8006c30 <udp_server_init+0x4c>
      {
        udp_recv(upcb, udp_server_receive_callback, NULL);
 8006c26:	2200      	movs	r2, #0
 8006c28:	4906      	ldr	r1, [pc, #24]	; (8006c44 <udp_server_init+0x60>)
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f00b fa96 	bl	801215c <udp_recv>
      }
   }
}
 8006c30:	bf00      	nop
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	20000e40 	.word	0x20000e40
 8006c3c:	20001198 	.word	0x20001198
 8006c40:	08028d0c 	.word	0x08028d0c
 8006c44:	08006c49 	.word	0x08006c49

08006c48 <udp_server_receive_callback>:

void udp_server_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
 8006c54:	603b      	str	r3, [r7, #0]
  pbuf_copy_partial(p, msg_buffer, p->len, 0);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	895a      	ldrh	r2, [r3, #10]
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	491e      	ldr	r1, [pc, #120]	; (8006cd8 <udp_server_receive_callback+0x90>)
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f005 fac8 	bl	800c1f4 <pbuf_copy_partial>
  process_data();
 8006c64:	f000 f9e2 	bl	800702c <process_data>
  msg_size = find_end_of_new_msg();
 8006c68:	f000 f840 	bl	8006cec <find_end_of_new_msg>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	461a      	mov	r2, r3
 8006c70:	4b1a      	ldr	r3, [pc, #104]	; (8006cdc <udp_server_receive_callback+0x94>)
 8006c72:	801a      	strh	r2, [r3, #0]
  p->tot_len = msg_size;
 8006c74:	4b19      	ldr	r3, [pc, #100]	; (8006cdc <udp_server_receive_callback+0x94>)
 8006c76:	881a      	ldrh	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	811a      	strh	r2, [r3, #8]
  p->len = msg_size;
 8006c7c:	4b17      	ldr	r3, [pc, #92]	; (8006cdc <udp_server_receive_callback+0x94>)
 8006c7e:	881a      	ldrh	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	815a      	strh	r2, [r3, #10]
  uint16_t x = copy_to_pbuf(p, msg_buffer, msg_size, 0);
 8006c84:	4b15      	ldr	r3, [pc, #84]	; (8006cdc <udp_server_receive_callback+0x94>)
 8006c86:	881a      	ldrh	r2, [r3, #0]
 8006c88:	2300      	movs	r3, #0
 8006c8a:	4913      	ldr	r1, [pc, #76]	; (8006cd8 <udp_server_receive_callback+0x90>)
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f851 	bl	8006d34 <copy_to_pbuf>
 8006c92:	4603      	mov	r3, r0
 8006c94:	82fb      	strh	r3, [r7, #22]
  memset(msg_buffer,0,sizeof(msg_buffer));
 8006c96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	480e      	ldr	r0, [pc, #56]	; (8006cd8 <udp_server_receive_callback+0x90>)
 8006c9e:	f00f fc85 	bl	80165ac <memset>
  memset(file_buffer, 0, sizeof(file_buffer));
 8006ca2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	480d      	ldr	r0, [pc, #52]	; (8006ce0 <udp_server_receive_callback+0x98>)
 8006caa:	f00f fc7f 	bl	80165ac <memset>
  memset(operation, 0, 1);
 8006cae:	4b0d      	ldr	r3, [pc, #52]	; (8006ce4 <udp_server_receive_callback+0x9c>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	701a      	strb	r2, [r3, #0]
  memset(id, 0, 1);
 8006cb4:	4b0c      	ldr	r3, [pc, #48]	; (8006ce8 <udp_server_receive_callback+0xa0>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	701a      	strb	r2, [r3, #0]
  udp_sendto(upcb, p, addr, UDP_CLIENT_PORT);
 8006cba:	f644 6320 	movw	r3, #20000	; 0x4e20
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	6879      	ldr	r1, [r7, #4]
 8006cc2:	68b8      	ldr	r0, [r7, #8]
 8006cc4:	f00a ff9e 	bl	8011c04 <udp_sendto>
  pbuf_free(p);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f005 f899 	bl	800be00 <pbuf_free>

}
 8006cce:	bf00      	nop
 8006cd0:	3718      	adds	r7, #24
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20000a40 	.word	0x20000a40
 8006cdc:	20000420 	.word	0x20000420
 8006ce0:	20000640 	.word	0x20000640
 8006ce4:	20000f44 	.word	0x20000f44
 8006ce8:	20000f40 	.word	0x20000f40

08006cec <find_end_of_new_msg>:
uint16_t find_end_of_new_msg()
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
	for (int i=header_with_usrname;i<1024;i++)
 8006cf2:	4b0e      	ldr	r3, [pc, #56]	; (8006d2c <find_end_of_new_msg+0x40>)
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	607b      	str	r3, [r7, #4]
 8006cf8:	e00b      	b.n	8006d12 <find_end_of_new_msg+0x26>
	{
		if (msg_buffer[i] == '\0') return i;
 8006cfa:	4a0d      	ldr	r2, [pc, #52]	; (8006d30 <find_end_of_new_msg+0x44>)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4413      	add	r3, r2
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d102      	bne.n	8006d0c <find_end_of_new_msg+0x20>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	e008      	b.n	8006d1e <find_end_of_new_msg+0x32>
	for (int i=header_with_usrname;i<1024;i++)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	607b      	str	r3, [r7, #4]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d18:	dbef      	blt.n	8006cfa <find_end_of_new_msg+0xe>
	}
	return -1;
 8006d1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	2000000c 	.word	0x2000000c
 8006d30:	20000a40 	.word	0x20000a40

08006d34 <copy_to_pbuf>:
u16_t copy_to_pbuf(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b088      	sub	sp, #32
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	4611      	mov	r1, r2
 8006d40:	461a      	mov	r2, r3
 8006d42:	460b      	mov	r3, r1
 8006d44:	80fb      	strh	r3, [r7, #6]
 8006d46:	4613      	mov	r3, r2
 8006d48:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d107      	bne.n	8006d68 <copy_to_pbuf+0x34>
 8006d58:	4b2a      	ldr	r3, [pc, #168]	; (8006e04 <copy_to_pbuf+0xd0>)
 8006d5a:	228b      	movs	r2, #139	; 0x8b
 8006d5c:	492a      	ldr	r1, [pc, #168]	; (8006e08 <copy_to_pbuf+0xd4>)
 8006d5e:	482b      	ldr	r0, [pc, #172]	; (8006e0c <copy_to_pbuf+0xd8>)
 8006d60:	f00f fcd4 	bl	801670c <iprintf>
 8006d64:	2300      	movs	r3, #0
 8006d66:	e049      	b.n	8006dfc <copy_to_pbuf+0xc8>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d107      	bne.n	8006d7e <copy_to_pbuf+0x4a>
 8006d6e:	4b25      	ldr	r3, [pc, #148]	; (8006e04 <copy_to_pbuf+0xd0>)
 8006d70:	228c      	movs	r2, #140	; 0x8c
 8006d72:	4927      	ldr	r1, [pc, #156]	; (8006e10 <copy_to_pbuf+0xdc>)
 8006d74:	4825      	ldr	r0, [pc, #148]	; (8006e0c <copy_to_pbuf+0xd8>)
 8006d76:	f00f fcc9 	bl	801670c <iprintf>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	e03e      	b.n	8006dfc <copy_to_pbuf+0xc8>
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	61fb      	str	r3, [r7, #28]
 8006d82:	e034      	b.n	8006dee <copy_to_pbuf+0xba>
    if ((offset != 0) && (offset >= p->len)) {
 8006d84:	88bb      	ldrh	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00a      	beq.n	8006da0 <copy_to_pbuf+0x6c>
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	895b      	ldrh	r3, [r3, #10]
 8006d8e:	88ba      	ldrh	r2, [r7, #4]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d305      	bcc.n	8006da0 <copy_to_pbuf+0x6c>
      offset = (u16_t)(offset - p->len);
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	895b      	ldrh	r3, [r3, #10]
 8006d98:	88ba      	ldrh	r2, [r7, #4]
 8006d9a:	1ad3      	subs	r3, r2, r3
 8006d9c:	80bb      	strh	r3, [r7, #4]
 8006d9e:	e023      	b.n	8006de8 <copy_to_pbuf+0xb4>
    } else {
      buf_copy_len = (u16_t)(p->len - offset);
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	895a      	ldrh	r2, [r3, #10]
 8006da4:	88bb      	ldrh	r3, [r7, #4]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006daa:	8b3a      	ldrh	r2, [r7, #24]
 8006dac:	88fb      	ldrh	r3, [r7, #6]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d901      	bls.n	8006db6 <copy_to_pbuf+0x82>
        buf_copy_len = len;
 8006db2:	88fb      	ldrh	r3, [r7, #6]
 8006db4:	833b      	strh	r3, [r7, #24]
      }
      MEMCPY(&((char *)p->payload)[offset],&((char *)dataptr)[left] , buf_copy_len);
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	88bb      	ldrh	r3, [r7, #4]
 8006dbc:	18d0      	adds	r0, r2, r3
 8006dbe:	8b7b      	ldrh	r3, [r7, #26]
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	8b3a      	ldrh	r2, [r7, #24]
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	f00f fbe5 	bl	8016596 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006dcc:	8afa      	ldrh	r2, [r7, #22]
 8006dce:	8b3b      	ldrh	r3, [r7, #24]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006dd4:	8b7a      	ldrh	r2, [r7, #26]
 8006dd6:	8b3b      	ldrh	r3, [r7, #24]
 8006dd8:	4413      	add	r3, r2
 8006dda:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006ddc:	88fa      	ldrh	r2, [r7, #6]
 8006dde:	8b3b      	ldrh	r3, [r7, #24]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006de4:	2300      	movs	r3, #0
 8006de6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	61fb      	str	r3, [r7, #28]
 8006dee:	88fb      	ldrh	r3, [r7, #6]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d002      	beq.n	8006dfa <copy_to_pbuf+0xc6>
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1c4      	bne.n	8006d84 <copy_to_pbuf+0x50>

    }
  }
  return copied_total;
 8006dfa:	8afb      	ldrh	r3, [r7, #22]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3720      	adds	r7, #32
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	08017430 	.word	0x08017430
 8006e08:	0801744c 	.word	0x0801744c
 8006e0c:	0801746c 	.word	0x0801746c
 8006e10:	08017494 	.word	0x08017494

08006e14 <login_user>:
uint16_t login_user()
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b094      	sub	sp, #80	; 0x50
 8006e18:	af02      	add	r7, sp, #8
	char cli_username[] = "******";
 8006e1a:	4a63      	ldr	r2, [pc, #396]	; (8006fa8 <login_user+0x194>)
 8006e1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006e20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e24:	6018      	str	r0, [r3, #0]
 8006e26:	3304      	adds	r3, #4
 8006e28:	8019      	strh	r1, [r3, #0]
 8006e2a:	3302      	adds	r3, #2
 8006e2c:	0c0a      	lsrs	r2, r1, #16
 8006e2e:	701a      	strb	r2, [r3, #0]
	char cli_password[] = "********";
 8006e30:	4a5e      	ldr	r2, [pc, #376]	; (8006fac <login_user+0x198>)
 8006e32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e36:	ca07      	ldmia	r2, {r0, r1, r2}
 8006e38:	c303      	stmia	r3!, {r0, r1}
 8006e3a:	701a      	strb	r2, [r3, #0]
	memcpy(cli_username, msg_buffer+header_size, 6);
 8006e3c:	4b5c      	ldr	r3, [pc, #368]	; (8006fb0 <login_user+0x19c>)
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	461a      	mov	r2, r3
 8006e42:	4b5c      	ldr	r3, [pc, #368]	; (8006fb4 <login_user+0x1a0>)
 8006e44:	18d1      	adds	r1, r2, r3
 8006e46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006e4a:	2206      	movs	r2, #6
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f00f fba2 	bl	8016596 <memcpy>
	memcpy(cli_password, msg_buffer+header_with_usrname, 8);
 8006e52:	4b59      	ldr	r3, [pc, #356]	; (8006fb8 <login_user+0x1a4>)
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	461a      	mov	r2, r3
 8006e58:	4b56      	ldr	r3, [pc, #344]	; (8006fb4 <login_user+0x1a0>)
 8006e5a:	18d1      	adds	r1, r2, r3
 8006e5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e60:	2208      	movs	r2, #8
 8006e62:	4618      	mov	r0, r3
 8006e64:	f00f fb97 	bl	8016596 <memcpy>
	memset(msg_buffer, 0, 1024);
 8006e68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	4851      	ldr	r0, [pc, #324]	; (8006fb4 <login_user+0x1a0>)
 8006e70:	f00f fb9c 	bl	80165ac <memset>
	FRESULT fr;
	int pointer=0;
 8006e74:	2300      	movs	r3, #0
 8006e76:	643b      	str	r3, [r7, #64]	; 0x40
	uint16_t read = 17;
 8006e78:	2311      	movs	r3, #17
 8006e7a:	87fb      	strh	r3, [r7, #62]	; 0x3e
	fr = f_mount(&FatFs, "", 0);
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	494f      	ldr	r1, [pc, #316]	; (8006fbc <login_user+0x1a8>)
 8006e80:	484f      	ldr	r0, [pc, #316]	; (8006fc0 <login_user+0x1ac>)
 8006e82:	f7fd fe69 	bl	8004b58 <f_mount>
 8006e86:	4603      	mov	r3, r0
 8006e88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	fr = f_open(&file, "user database.txt", FA_READ);
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	494d      	ldr	r1, [pc, #308]	; (8006fc4 <login_user+0x1b0>)
 8006e90:	484d      	ldr	r0, [pc, #308]	; (8006fc8 <login_user+0x1b4>)
 8006e92:	f7fd fea1 	bl	8004bd8 <f_open>
 8006e96:	4603      	mov	r3, r0
 8006e98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	char data_buffer[17];
	char data_username[] = "******";
 8006e9c:	4a42      	ldr	r2, [pc, #264]	; (8006fa8 <login_user+0x194>)
 8006e9e:	f107 030c 	add.w	r3, r7, #12
 8006ea2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ea6:	6018      	str	r0, [r3, #0]
 8006ea8:	3304      	adds	r3, #4
 8006eaa:	8019      	strh	r1, [r3, #0]
 8006eac:	3302      	adds	r3, #2
 8006eae:	0c0a      	lsrs	r2, r1, #16
 8006eb0:	701a      	strb	r2, [r3, #0]
	char data_password[] = "********";
 8006eb2:	4a3e      	ldr	r2, [pc, #248]	; (8006fac <login_user+0x198>)
 8006eb4:	463b      	mov	r3, r7
 8006eb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8006eb8:	c303      	stmia	r3!, {r0, r1}
 8006eba:	701a      	strb	r2, [r3, #0]
	while(read==17 || pointer<255)
 8006ebc:	e053      	b.n	8006f66 <login_user+0x152>
	{
		fr = f_read(&file, data_buffer, 17, &bytes_read);
 8006ebe:	f107 0114 	add.w	r1, r7, #20
 8006ec2:	4b42      	ldr	r3, [pc, #264]	; (8006fcc <login_user+0x1b8>)
 8006ec4:	2211      	movs	r2, #17
 8006ec6:	4840      	ldr	r0, [pc, #256]	; (8006fc8 <login_user+0x1b4>)
 8006ec8:	f7fe f8c6 	bl	8005058 <f_read>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (fr) {
 8006ed2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <login_user+0xdc>
			prepare_response(operation, RESP_ERR, id, 0, 0);
 8006eda:	2300      	movs	r3, #0
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	4a3b      	ldr	r2, [pc, #236]	; (8006fd0 <login_user+0x1bc>)
 8006ee2:	2101      	movs	r1, #1
 8006ee4:	483b      	ldr	r0, [pc, #236]	; (8006fd4 <login_user+0x1c0>)
 8006ee6:	f000 fa83 	bl	80073f0 <prepare_response>
				return -1;
 8006eea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006eee:	e057      	b.n	8006fa0 <login_user+0x18c>
			};
		memcpy(data_username, data_buffer+1, 6);
 8006ef0:	f107 0314 	add.w	r3, r7, #20
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	f107 000c 	add.w	r0, r7, #12
 8006efa:	2206      	movs	r2, #6
 8006efc:	4619      	mov	r1, r3
 8006efe:	f00f fb4a 	bl	8016596 <memcpy>
		memcpy(data_password, data_buffer+7, 8);
 8006f02:	f107 0314 	add.w	r3, r7, #20
 8006f06:	3307      	adds	r3, #7
 8006f08:	4638      	mov	r0, r7
 8006f0a:	2208      	movs	r2, #8
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	f00f fb42 	bl	8016596 <memcpy>
		if(strcmp(cli_username, data_username) == 0 && strcmp(cli_password, data_password) == 0)
 8006f12:	f107 020c 	add.w	r2, r7, #12
 8006f16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006f1a:	4611      	mov	r1, r2
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7f9 f957 	bl	80001d0 <strcmp>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d11b      	bne.n	8006f60 <login_user+0x14c>
 8006f28:	463a      	mov	r2, r7
 8006f2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f2e:	4611      	mov	r1, r2
 8006f30:	4618      	mov	r0, r3
 8006f32:	f7f9 f94d 	bl	80001d0 <strcmp>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d111      	bne.n	8006f60 <login_user+0x14c>
		{
			memcpy(id, data_buffer, 1);
 8006f3c:	7d3a      	ldrb	r2, [r7, #20]
 8006f3e:	4b24      	ldr	r3, [pc, #144]	; (8006fd0 <login_user+0x1bc>)
 8006f40:	701a      	strb	r2, [r3, #0]
			prepare_response(operation, RESP_OK, id, 0, 0);
 8006f42:	2300      	movs	r3, #0
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	2300      	movs	r3, #0
 8006f48:	4a21      	ldr	r2, [pc, #132]	; (8006fd0 <login_user+0x1bc>)
 8006f4a:	2100      	movs	r1, #0
 8006f4c:	4821      	ldr	r0, [pc, #132]	; (8006fd4 <login_user+0x1c0>)
 8006f4e:	f000 fa4f 	bl	80073f0 <prepare_response>
			isLogged[(int)id[0]] = 2;
 8006f52:	4b1f      	ldr	r3, [pc, #124]	; (8006fd0 <login_user+0x1bc>)
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	461a      	mov	r2, r3
 8006f58:	4b1f      	ldr	r3, [pc, #124]	; (8006fd8 <login_user+0x1c4>)
 8006f5a:	2102      	movs	r1, #2
 8006f5c:	5499      	strb	r1, [r3, r2]
			break;
 8006f5e:	e008      	b.n	8006f72 <login_user+0x15e>
		}
		pointer++;
 8006f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f62:	3301      	adds	r3, #1
 8006f64:	643b      	str	r3, [r7, #64]	; 0x40
	while(read==17 || pointer<255)
 8006f66:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006f68:	2b11      	cmp	r3, #17
 8006f6a:	d0a8      	beq.n	8006ebe <login_user+0xaa>
 8006f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f6e:	2bfe      	cmp	r3, #254	; 0xfe
 8006f70:	dda5      	ble.n	8006ebe <login_user+0xaa>
	}
	if (fr) {
 8006f72:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d009      	beq.n	8006f8e <login_user+0x17a>
		prepare_response(operation[0], RESP_AUTH_ERR, id, 0, 0);
 8006f7a:	4b16      	ldr	r3, [pc, #88]	; (8006fd4 <login_user+0x1c0>)
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	2300      	movs	r3, #0
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	2300      	movs	r3, #0
 8006f86:	4a12      	ldr	r2, [pc, #72]	; (8006fd0 <login_user+0x1bc>)
 8006f88:	2103      	movs	r1, #3
 8006f8a:	f000 fa31 	bl	80073f0 <prepare_response>
	};
	fr = f_close(&file);
 8006f8e:	480e      	ldr	r0, [pc, #56]	; (8006fc8 <login_user+0x1b4>)
 8006f90:	f7fe fcab 	bl	80058ea <f_close>
 8006f94:	4603      	mov	r3, r0
 8006f96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	return fr;
 8006f9a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006f9e:	b29b      	uxth	r3, r3

}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3748      	adds	r7, #72	; 0x48
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	080174d0 	.word	0x080174d0
 8006fac:	080174d8 	.word	0x080174d8
 8006fb0:	2000000a 	.word	0x2000000a
 8006fb4:	20000a40 	.word	0x20000a40
 8006fb8:	2000000c 	.word	0x2000000c
 8006fbc:	080174b8 	.word	0x080174b8
 8006fc0:	200000b4 	.word	0x200000b4
 8006fc4:	080174bc 	.word	0x080174bc
 8006fc8:	20000f48 	.word	0x20000f48
 8006fcc:	20001498 	.word	0x20001498
 8006fd0:	20000f40 	.word	0x20000f40
 8006fd4:	20000f44 	.word	0x20000f44
 8006fd8:	20000e40 	.word	0x20000e40

08006fdc <check_if_logged>:
uint16_t check_if_logged()
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af02      	add	r7, sp, #8
	if(isLogged[(int)id[0]] == 1)
 8006fe2:	4b0f      	ldr	r3, [pc, #60]	; (8007020 <check_if_logged+0x44>)
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	4b0e      	ldr	r3, [pc, #56]	; (8007024 <check_if_logged+0x48>)
 8006fea:	5c9b      	ldrb	r3, [r3, r2]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d101      	bne.n	8006ff4 <check_if_logged+0x18>
	{
		return 1;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e011      	b.n	8007018 <check_if_logged+0x3c>
	}
	else if(isLogged[(int)id[0]] == 2)
 8006ff4:	4b0a      	ldr	r3, [pc, #40]	; (8007020 <check_if_logged+0x44>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	4b0a      	ldr	r3, [pc, #40]	; (8007024 <check_if_logged+0x48>)
 8006ffc:	5c9b      	ldrb	r3, [r3, r2]
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d101      	bne.n	8007006 <check_if_logged+0x2a>
	{
		return 2;
 8007002:	2302      	movs	r3, #2
 8007004:	e008      	b.n	8007018 <check_if_logged+0x3c>
	}
	else
	{
		prepare_response(operation, RESP_NOT_LOGGED, id, 0,0 );
 8007006:	2300      	movs	r3, #0
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	2300      	movs	r3, #0
 800700c:	4a04      	ldr	r2, [pc, #16]	; (8007020 <check_if_logged+0x44>)
 800700e:	2105      	movs	r1, #5
 8007010:	4805      	ldr	r0, [pc, #20]	; (8007028 <check_if_logged+0x4c>)
 8007012:	f000 f9ed 	bl	80073f0 <prepare_response>
		return 0;
 8007016:	2300      	movs	r3, #0
	}

}
 8007018:	4618      	mov	r0, r3
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	20000f40 	.word	0x20000f40
 8007024:	20000e40 	.word	0x20000e40
 8007028:	20000f44 	.word	0x20000f44

0800702c <process_data>:
void process_data()
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af02      	add	r7, sp, #8
	memcpy(operation, msg_buffer,1);
 8007032:	4b41      	ldr	r3, [pc, #260]	; (8007138 <process_data+0x10c>)
 8007034:	781a      	ldrb	r2, [r3, #0]
 8007036:	4b41      	ldr	r3, [pc, #260]	; (800713c <process_data+0x110>)
 8007038:	701a      	strb	r2, [r3, #0]
	memcpy(id, msg_buffer+2, 1);
 800703a:	4b41      	ldr	r3, [pc, #260]	; (8007140 <process_data+0x114>)
 800703c:	781a      	ldrb	r2, [r3, #0]
 800703e:	4b41      	ldr	r3, [pc, #260]	; (8007144 <process_data+0x118>)
 8007040:	701a      	strb	r2, [r3, #0]
	if (operation[0] - LOGIN == 0)
 8007042:	4b3e      	ldr	r3, [pc, #248]	; (800713c <process_data+0x110>)
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	2b0c      	cmp	r3, #12
 8007048:	d102      	bne.n	8007050 <process_data+0x24>
	{
		login_user();
 800704a:	f7ff fee3 	bl	8006e14 <login_user>
		return;
 800704e:	e06f      	b.n	8007130 <process_data+0x104>
	}
	else if(operation[0] - PUBLIC == 0)
 8007050:	4b3a      	ldr	r3, [pc, #232]	; (800713c <process_data+0x110>)
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	2b0e      	cmp	r3, #14
 8007056:	d102      	bne.n	800705e <process_data+0x32>
	{
		login_public();
 8007058:	f000 f876 	bl	8007148 <login_public>
		return;
 800705c:	e068      	b.n	8007130 <process_data+0x104>
	}
	uint16_t isLogged = check_if_logged();
 800705e:	f7ff ffbd 	bl	8006fdc <check_if_logged>
 8007062:	4603      	mov	r3, r0
 8007064:	80fb      	strh	r3, [r7, #6]
	if(isLogged > 0)
 8007066:	88fb      	ldrh	r3, [r7, #6]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d061      	beq.n	8007130 <process_data+0x104>
	{

		if (operation[0] - GET_FILE_INFO == 0)
 800706c:	4b33      	ldr	r3, [pc, #204]	; (800713c <process_data+0x110>)
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	2b05      	cmp	r3, #5
 8007072:	d102      	bne.n	800707a <process_data+0x4e>
		{
			get_path_info();
 8007074:	f000 f9ec 	bl	8007450 <get_path_info>
 8007078:	e05a      	b.n	8007130 <process_data+0x104>
		}
		else if (operation[0] - CHANGE_DIRECTORY == 0)
 800707a:	4b30      	ldr	r3, [pc, #192]	; (800713c <process_data+0x110>)
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	2b06      	cmp	r3, #6
 8007080:	d102      	bne.n	8007088 <process_data+0x5c>
		{
			check_if_dir_exists();
 8007082:	f000 fa1b 	bl	80074bc <check_if_dir_exists>
 8007086:	e053      	b.n	8007130 <process_data+0x104>
		}
		else if (operation[0] - START_SEND_FILE == 0 && isLogged>1)
 8007088:	4b2c      	ldr	r3, [pc, #176]	; (800713c <process_data+0x110>)
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d106      	bne.n	800709e <process_data+0x72>
 8007090:	88fb      	ldrh	r3, [r7, #6]
 8007092:	2b01      	cmp	r3, #1
 8007094:	d903      	bls.n	800709e <process_data+0x72>
		{
			save_to_file(0);
 8007096:	2000      	movs	r0, #0
 8007098:	f000 fa5a 	bl	8007550 <save_to_file>
 800709c:	e048      	b.n	8007130 <process_data+0x104>
		}
		else if(operation[0] - NEXT_SEND_FILE == 0 && isLogged>1)
 800709e:	4b27      	ldr	r3, [pc, #156]	; (800713c <process_data+0x110>)
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d106      	bne.n	80070b4 <process_data+0x88>
 80070a6:	88fb      	ldrh	r3, [r7, #6]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d903      	bls.n	80070b4 <process_data+0x88>
		{
			save_to_file(1);
 80070ac:	2001      	movs	r0, #1
 80070ae:	f000 fa4f 	bl	8007550 <save_to_file>
 80070b2:	e03d      	b.n	8007130 <process_data+0x104>
		}
		else if(operation[0] - DELETE_FILE == 0 && isLogged>1)
 80070b4:	4b21      	ldr	r3, [pc, #132]	; (800713c <process_data+0x110>)
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	2b07      	cmp	r3, #7
 80070ba:	d105      	bne.n	80070c8 <process_data+0x9c>
 80070bc:	88fb      	ldrh	r3, [r7, #6]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d902      	bls.n	80070c8 <process_data+0x9c>
		{
			parse_path_and_delete_file();
 80070c2:	f000 fae9 	bl	8007698 <parse_path_and_delete_file>
 80070c6:	e033      	b.n	8007130 <process_data+0x104>
		}
		else if(operation[0] - DELETE_DIRECTORY == 0 && isLogged>1)
 80070c8:	4b1c      	ldr	r3, [pc, #112]	; (800713c <process_data+0x110>)
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	2b08      	cmp	r3, #8
 80070ce:	d105      	bne.n	80070dc <process_data+0xb0>
 80070d0:	88fb      	ldrh	r3, [r7, #6]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d902      	bls.n	80070dc <process_data+0xb0>
		{
			parse_path_and_delete_directory();
 80070d6:	f000 fb2b 	bl	8007730 <parse_path_and_delete_directory>
 80070da:	e029      	b.n	8007130 <process_data+0x104>
		}
		else if(operation[0] - GET_FILE == 0)
 80070dc:	4b17      	ldr	r3, [pc, #92]	; (800713c <process_data+0x110>)
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	2b09      	cmp	r3, #9
 80070e2:	d102      	bne.n	80070ea <process_data+0xbe>
		{
			read_and_send_file();
 80070e4:	f000 fb70 	bl	80077c8 <read_and_send_file>
 80070e8:	e022      	b.n	8007130 <process_data+0x104>
		}
		else if(operation[0] - CREATE_DIRECTORY == 0 && isLogged>1)
 80070ea:	4b14      	ldr	r3, [pc, #80]	; (800713c <process_data+0x110>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	2b0a      	cmp	r3, #10
 80070f0:	d105      	bne.n	80070fe <process_data+0xd2>
 80070f2:	88fb      	ldrh	r3, [r7, #6]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d902      	bls.n	80070fe <process_data+0xd2>
		{
			parse_path_and_create_directory();
 80070f8:	f000 fbea 	bl	80078d0 <parse_path_and_create_directory>
 80070fc:	e018      	b.n	8007130 <process_data+0x104>
		}
		else if(operation[0] - END_SEND_FILE == 0 && isLogged>1)
 80070fe:	4b0f      	ldr	r3, [pc, #60]	; (800713c <process_data+0x110>)
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	2b0b      	cmp	r3, #11
 8007104:	d105      	bne.n	8007112 <process_data+0xe6>
 8007106:	88fb      	ldrh	r3, [r7, #6]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d902      	bls.n	8007112 <process_data+0xe6>
		{
			clear_control_val();
 800710c:	f000 f924 	bl	8007358 <clear_control_val>
		{
 8007110:	e00e      	b.n	8007130 <process_data+0x104>
		}
		else if(operation[0] - LOGOUT == 0)
 8007112:	4b0a      	ldr	r3, [pc, #40]	; (800713c <process_data+0x110>)
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	2b0d      	cmp	r3, #13
 8007118:	d102      	bne.n	8007120 <process_data+0xf4>
		{
			logout();
 800711a:	f000 f901 	bl	8007320 <logout>
 800711e:	e007      	b.n	8007130 <process_data+0x104>
		}

		else
		{
			prepare_response(operation, RESP_AUTH_ERR, id, 0, 0);
 8007120:	2300      	movs	r3, #0
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	2300      	movs	r3, #0
 8007126:	4a07      	ldr	r2, [pc, #28]	; (8007144 <process_data+0x118>)
 8007128:	2103      	movs	r1, #3
 800712a:	4804      	ldr	r0, [pc, #16]	; (800713c <process_data+0x110>)
 800712c:	f000 f960 	bl	80073f0 <prepare_response>
	}
	else
	{
		//ur not logged in!
	}
}
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	20000a40 	.word	0x20000a40
 800713c:	20000f44 	.word	0x20000f44
 8007140:	20000a42 	.word	0x20000a42
 8007144:	20000f40 	.word	0x20000f40

08007148 <login_public>:
uint16_t login_public()
{
 8007148:	b590      	push	{r4, r7, lr}
 800714a:	b095      	sub	sp, #84	; 0x54
 800714c:	af02      	add	r7, sp, #8
	char cli_username[] = "public";
 800714e:	4a68      	ldr	r2, [pc, #416]	; (80072f0 <login_public+0x1a8>)
 8007150:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007154:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007158:	6018      	str	r0, [r3, #0]
 800715a:	3304      	adds	r3, #4
 800715c:	8019      	strh	r1, [r3, #0]
 800715e:	3302      	adds	r3, #2
 8007160:	0c0a      	lsrs	r2, r1, #16
 8007162:	701a      	strb	r2, [r3, #0]
	char empty_field[] = "******";
 8007164:	4a63      	ldr	r2, [pc, #396]	; (80072f4 <login_public+0x1ac>)
 8007166:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800716a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800716e:	6018      	str	r0, [r3, #0]
 8007170:	3304      	adds	r3, #4
 8007172:	8019      	strh	r1, [r3, #0]
 8007174:	3302      	adds	r3, #2
 8007176:	0c0a      	lsrs	r2, r1, #16
 8007178:	701a      	strb	r2, [r3, #0]
	memset(msg_buffer, 0, 1024);
 800717a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800717e:	2100      	movs	r1, #0
 8007180:	485d      	ldr	r0, [pc, #372]	; (80072f8 <login_public+0x1b0>)
 8007182:	f00f fa13 	bl	80165ac <memset>
	FRESULT fr;
	int pointer=0;
 8007186:	2300      	movs	r3, #0
 8007188:	643b      	str	r3, [r7, #64]	; 0x40
	uint16_t read = 17;
 800718a:	2311      	movs	r3, #17
 800718c:	87fb      	strh	r3, [r7, #62]	; 0x3e
	fr = f_mount(&FatFs, "", 0);
 800718e:	2200      	movs	r2, #0
 8007190:	495a      	ldr	r1, [pc, #360]	; (80072fc <login_public+0x1b4>)
 8007192:	485b      	ldr	r0, [pc, #364]	; (8007300 <login_public+0x1b8>)
 8007194:	f7fd fce0 	bl	8004b58 <f_mount>
 8007198:	4603      	mov	r3, r0
 800719a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	fr = f_open(&file, "user database.txt", FA_READ | FA_WRITE);
 800719e:	2203      	movs	r2, #3
 80071a0:	4958      	ldr	r1, [pc, #352]	; (8007304 <login_public+0x1bc>)
 80071a2:	4859      	ldr	r0, [pc, #356]	; (8007308 <login_public+0x1c0>)
 80071a4:	f7fd fd18 	bl	8004bd8 <f_open>
 80071a8:	4603      	mov	r3, r0
 80071aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	char data_buffer[17];
	char data_username[] = "******";
 80071ae:	4a51      	ldr	r2, [pc, #324]	; (80072f4 <login_public+0x1ac>)
 80071b0:	f107 0310 	add.w	r3, r7, #16
 80071b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80071b8:	6018      	str	r0, [r3, #0]
 80071ba:	3304      	adds	r3, #4
 80071bc:	8019      	strh	r1, [r3, #0]
 80071be:	3302      	adds	r3, #2
 80071c0:	0c0a      	lsrs	r2, r1, #16
 80071c2:	701a      	strb	r2, [r3, #0]
	char data_password[] = "********";
 80071c4:	4a51      	ldr	r2, [pc, #324]	; (800730c <login_public+0x1c4>)
 80071c6:	1d3b      	adds	r3, r7, #4
 80071c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80071ca:	c303      	stmia	r3!, {r0, r1}
 80071cc:	701a      	strb	r2, [r3, #0]
	fr = f_read(&file, data_buffer, 17, &bytes_read);
 80071ce:	f107 0118 	add.w	r1, r7, #24
 80071d2:	4b4f      	ldr	r3, [pc, #316]	; (8007310 <login_public+0x1c8>)
 80071d4:	2211      	movs	r2, #17
 80071d6:	484c      	ldr	r0, [pc, #304]	; (8007308 <login_public+0x1c0>)
 80071d8:	f7fd ff3e 	bl	8005058 <f_read>
 80071dc:	4603      	mov	r3, r0
 80071de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	pointer++;
 80071e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071e4:	3301      	adds	r3, #1
 80071e6:	643b      	str	r3, [r7, #64]	; 0x40
	while(read==17)
 80071e8:	e063      	b.n	80072b2 <login_public+0x16a>
	{
		fr = f_read(&file, data_buffer, 17, &bytes_read);
 80071ea:	f107 0118 	add.w	r1, r7, #24
 80071ee:	4b48      	ldr	r3, [pc, #288]	; (8007310 <login_public+0x1c8>)
 80071f0:	2211      	movs	r2, #17
 80071f2:	4845      	ldr	r0, [pc, #276]	; (8007308 <login_public+0x1c0>)
 80071f4:	f7fd ff30 	bl	8005058 <f_read>
 80071f8:	4603      	mov	r3, r0
 80071fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (fr) {
 80071fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00a      	beq.n	800721c <login_public+0xd4>
			prepare_response(operation, RESP_ERR, id, 0, 0);
 8007206:	2300      	movs	r3, #0
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	2300      	movs	r3, #0
 800720c:	4a41      	ldr	r2, [pc, #260]	; (8007314 <login_public+0x1cc>)
 800720e:	2101      	movs	r1, #1
 8007210:	4841      	ldr	r0, [pc, #260]	; (8007318 <login_public+0x1d0>)
 8007212:	f000 f8ed 	bl	80073f0 <prepare_response>
				return -1;
 8007216:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800721a:	e064      	b.n	80072e6 <login_public+0x19e>
			};
		memcpy(data_username, data_buffer+1, 6);
 800721c:	f107 0318 	add.w	r3, r7, #24
 8007220:	3301      	adds	r3, #1
 8007222:	f107 0010 	add.w	r0, r7, #16
 8007226:	2206      	movs	r2, #6
 8007228:	4619      	mov	r1, r3
 800722a:	f00f f9b4 	bl	8016596 <memcpy>
		memcpy(data_password, data_buffer+7, 8);
 800722e:	f107 0318 	add.w	r3, r7, #24
 8007232:	3307      	adds	r3, #7
 8007234:	1d38      	adds	r0, r7, #4
 8007236:	2208      	movs	r2, #8
 8007238:	4619      	mov	r1, r3
 800723a:	f00f f9ac 	bl	8016596 <memcpy>
		if(strcmp(empty_field, data_username) == 0)
 800723e:	f107 0210 	add.w	r2, r7, #16
 8007242:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007246:	4611      	mov	r1, r2
 8007248:	4618      	mov	r0, r3
 800724a:	f7f8 ffc1 	bl	80001d0 <strcmp>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d12b      	bne.n	80072ac <login_public+0x164>
		{
			f_lseek(&file, f_tell(&file) - 17);
 8007254:	4b2c      	ldr	r3, [pc, #176]	; (8007308 <login_public+0x1c0>)
 8007256:	e9d3 120e 	ldrd	r1, r2, [r3, #56]	; 0x38
 800725a:	f1b1 0311 	subs.w	r3, r1, #17
 800725e:	f142 34ff 	adc.w	r4, r2, #4294967295
 8007262:	461a      	mov	r2, r3
 8007264:	4623      	mov	r3, r4
 8007266:	4828      	ldr	r0, [pc, #160]	; (8007308 <login_public+0x1c0>)
 8007268:	f7fe fbe8 	bl	8005a3c <f_lseek>
			id[0] = pointer;
 800726c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800726e:	b2da      	uxtb	r2, r3
 8007270:	4b28      	ldr	r3, [pc, #160]	; (8007314 <login_public+0x1cc>)
 8007272:	701a      	strb	r2, [r3, #0]
			f_write(&file, id,1,0);
 8007274:	2300      	movs	r3, #0
 8007276:	2201      	movs	r2, #1
 8007278:	4926      	ldr	r1, [pc, #152]	; (8007314 <login_public+0x1cc>)
 800727a:	4823      	ldr	r0, [pc, #140]	; (8007308 <login_public+0x1c0>)
 800727c:	f7fe f855 	bl	800532a <f_write>
			f_write(&file, cli_username, 6,0);
 8007280:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8007284:	2300      	movs	r3, #0
 8007286:	2206      	movs	r2, #6
 8007288:	481f      	ldr	r0, [pc, #124]	; (8007308 <login_public+0x1c0>)
 800728a:	f7fe f84e 	bl	800532a <f_write>
			prepare_response(operation, RESP_OK, id, 0, 0);
 800728e:	2300      	movs	r3, #0
 8007290:	9300      	str	r3, [sp, #0]
 8007292:	2300      	movs	r3, #0
 8007294:	4a1f      	ldr	r2, [pc, #124]	; (8007314 <login_public+0x1cc>)
 8007296:	2100      	movs	r1, #0
 8007298:	481f      	ldr	r0, [pc, #124]	; (8007318 <login_public+0x1d0>)
 800729a:	f000 f8a9 	bl	80073f0 <prepare_response>
			isLogged[(int)id[0]] = 1;
 800729e:	4b1d      	ldr	r3, [pc, #116]	; (8007314 <login_public+0x1cc>)
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	461a      	mov	r2, r3
 80072a4:	4b1d      	ldr	r3, [pc, #116]	; (800731c <login_public+0x1d4>)
 80072a6:	2101      	movs	r1, #1
 80072a8:	5499      	strb	r1, [r3, r2]
			break;
 80072aa:	e005      	b.n	80072b8 <login_public+0x170>
		}
		pointer++;
 80072ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ae:	3301      	adds	r3, #1
 80072b0:	643b      	str	r3, [r7, #64]	; 0x40
	while(read==17)
 80072b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80072b4:	2b11      	cmp	r3, #17
 80072b6:	d098      	beq.n	80071ea <login_public+0xa2>
	}
	if (fr) {
 80072b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d009      	beq.n	80072d4 <login_public+0x18c>
		prepare_response(operation[0], RESP_AUTH_ERR, id, 0, 0);
 80072c0:	4b15      	ldr	r3, [pc, #84]	; (8007318 <login_public+0x1d0>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	4618      	mov	r0, r3
 80072c6:	2300      	movs	r3, #0
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	2300      	movs	r3, #0
 80072cc:	4a11      	ldr	r2, [pc, #68]	; (8007314 <login_public+0x1cc>)
 80072ce:	2103      	movs	r1, #3
 80072d0:	f000 f88e 	bl	80073f0 <prepare_response>
	};
	fr = f_close(&file);
 80072d4:	480c      	ldr	r0, [pc, #48]	; (8007308 <login_public+0x1c0>)
 80072d6:	f7fe fb08 	bl	80058ea <f_close>
 80072da:	4603      	mov	r3, r0
 80072dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	return fr;
 80072e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80072e4:	b29b      	uxth	r3, r3

}
 80072e6:	4618      	mov	r0, r3
 80072e8:	374c      	adds	r7, #76	; 0x4c
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd90      	pop	{r4, r7, pc}
 80072ee:	bf00      	nop
 80072f0:	080174e4 	.word	0x080174e4
 80072f4:	080174d0 	.word	0x080174d0
 80072f8:	20000a40 	.word	0x20000a40
 80072fc:	080174b8 	.word	0x080174b8
 8007300:	200000b4 	.word	0x200000b4
 8007304:	080174bc 	.word	0x080174bc
 8007308:	20000f48 	.word	0x20000f48
 800730c:	080174d8 	.word	0x080174d8
 8007310:	20001498 	.word	0x20001498
 8007314:	20000f40 	.word	0x20000f40
 8007318:	20000f44 	.word	0x20000f44
 800731c:	20000e40 	.word	0x20000e40

08007320 <logout>:
uint16_t logout()
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af02      	add	r7, sp, #8
	isLogged[(int)id[0]] = 0;
 8007326:	4b09      	ldr	r3, [pc, #36]	; (800734c <logout+0x2c>)
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	4b08      	ldr	r3, [pc, #32]	; (8007350 <logout+0x30>)
 800732e:	2100      	movs	r1, #0
 8007330:	5499      	strb	r1, [r3, r2]
	prepare_response(operation, RESP_OK, id, 0, 0);
 8007332:	2300      	movs	r3, #0
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	2300      	movs	r3, #0
 8007338:	4a04      	ldr	r2, [pc, #16]	; (800734c <logout+0x2c>)
 800733a:	2100      	movs	r1, #0
 800733c:	4805      	ldr	r0, [pc, #20]	; (8007354 <logout+0x34>)
 800733e:	f000 f857 	bl	80073f0 <prepare_response>
	return 0;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	20000f40 	.word	0x20000f40
 8007350:	20000e40 	.word	0x20000e40
 8007354:	20000f44 	.word	0x20000f44

08007358 <clear_control_val>:

void clear_control_val()
{
 8007358:	b580      	push	{r7, lr}
 800735a:	af00      	add	r7, sp, #0
	control_val = 0;
 800735c:	4b09      	ldr	r3, [pc, #36]	; (8007384 <clear_control_val+0x2c>)
 800735e:	2200      	movs	r2, #0
 8007360:	601a      	str	r2, [r3, #0]
	memset(msg_buffer, 0, sizeof(msg_buffer));
 8007362:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007366:	2100      	movs	r1, #0
 8007368:	4807      	ldr	r0, [pc, #28]	; (8007388 <clear_control_val+0x30>)
 800736a:	f00f f91f 	bl	80165ac <memset>
	memcpy(msg_buffer, operation, 1);
 800736e:	4b07      	ldr	r3, [pc, #28]	; (800738c <clear_control_val+0x34>)
 8007370:	781a      	ldrb	r2, [r3, #0]
 8007372:	4b05      	ldr	r3, [pc, #20]	; (8007388 <clear_control_val+0x30>)
 8007374:	701a      	strb	r2, [r3, #0]
	memcpy(msg_buffer+1, RESP_OK, 1);
 8007376:	4b06      	ldr	r3, [pc, #24]	; (8007390 <clear_control_val+0x38>)
 8007378:	2200      	movs	r2, #0
 800737a:	7812      	ldrb	r2, [r2, #0]
 800737c:	701a      	strb	r2, [r3, #0]
}
 800737e:	bf00      	nop
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	20000424 	.word	0x20000424
 8007388:	20000a40 	.word	0x20000a40
 800738c:	20000f44 	.word	0x20000f44
 8007390:	20000a41 	.word	0x20000a41

08007394 <find_end_of_msg>:

uint16_t find_end_of_msg()
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
	for (int i=header_with_usrname;i<1024;i++)
 800739a:	4b13      	ldr	r3, [pc, #76]	; (80073e8 <find_end_of_msg+0x54>)
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	607b      	str	r3, [r7, #4]
 80073a0:	e015      	b.n	80073ce <find_end_of_msg+0x3a>
	{
		if (msg_buffer[i] == '\0' || msg_buffer[i] == 42) return i - header_with_usrname;
 80073a2:	4a12      	ldr	r2, [pc, #72]	; (80073ec <find_end_of_msg+0x58>)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4413      	add	r3, r2
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d005      	beq.n	80073ba <find_end_of_msg+0x26>
 80073ae:	4a0f      	ldr	r2, [pc, #60]	; (80073ec <find_end_of_msg+0x58>)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4413      	add	r3, r2
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	2b2a      	cmp	r3, #42	; 0x2a
 80073b8:	d106      	bne.n	80073c8 <find_end_of_msg+0x34>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	b29a      	uxth	r2, r3
 80073be:	4b0a      	ldr	r3, [pc, #40]	; (80073e8 <find_end_of_msg+0x54>)
 80073c0:	881b      	ldrh	r3, [r3, #0]
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	e008      	b.n	80073da <find_end_of_msg+0x46>
	for (int i=header_with_usrname;i<1024;i++)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3301      	adds	r3, #1
 80073cc:	607b      	str	r3, [r7, #4]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073d4:	dbe5      	blt.n	80073a2 <find_end_of_msg+0xe>
	}
	return -1;
 80073d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80073da:	4618      	mov	r0, r3
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	2000000c 	.word	0x2000000c
 80073ec:	20000a40 	.word	0x20000a40

080073f0 <prepare_response>:
void prepare_response(char* op, char resp,char* id, char* file_buffer, uint16_t len)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	607a      	str	r2, [r7, #4]
 80073fa:	603b      	str	r3, [r7, #0]
 80073fc:	460b      	mov	r3, r1
 80073fe:	72fb      	strb	r3, [r7, #11]
	memcpy(msg_buffer, op, 1);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	781a      	ldrb	r2, [r3, #0]
 8007404:	4b0e      	ldr	r3, [pc, #56]	; (8007440 <prepare_response+0x50>)
 8007406:	701a      	strb	r2, [r3, #0]
	memset(msg_buffer+1, resp, 1);
 8007408:	480e      	ldr	r0, [pc, #56]	; (8007444 <prepare_response+0x54>)
 800740a:	7afb      	ldrb	r3, [r7, #11]
 800740c:	2201      	movs	r2, #1
 800740e:	4619      	mov	r1, r3
 8007410:	f00f f8cc 	bl	80165ac <memset>
	memcpy(msg_buffer+2, id, 1);
 8007414:	4a0c      	ldr	r2, [pc, #48]	; (8007448 <prepare_response+0x58>)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	7013      	strb	r3, [r2, #0]
	if(len !=0)	memcpy(msg_buffer+header_size, file_buffer, len);
 800741c:	8b3b      	ldrh	r3, [r7, #24]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d009      	beq.n	8007436 <prepare_response+0x46>
 8007422:	4b0a      	ldr	r3, [pc, #40]	; (800744c <prepare_response+0x5c>)
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	4b05      	ldr	r3, [pc, #20]	; (8007440 <prepare_response+0x50>)
 800742a:	4413      	add	r3, r2
 800742c:	8b3a      	ldrh	r2, [r7, #24]
 800742e:	6839      	ldr	r1, [r7, #0]
 8007430:	4618      	mov	r0, r3
 8007432:	f00f f8b0 	bl	8016596 <memcpy>
}
 8007436:	bf00      	nop
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	20000a40 	.word	0x20000a40
 8007444:	20000a41 	.word	0x20000a41
 8007448:	20000a42 	.word	0x20000a42
 800744c:	2000000a 	.word	0x2000000a

08007450 <get_path_info>:
void get_path_info()
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af02      	add	r7, sp, #8
	uint16_t len;
	uint16_t it = find_end_of_msg();
 8007456:	f7ff ff9d 	bl	8007394 <find_end_of_msg>
 800745a:	4603      	mov	r3, r0
 800745c:	80fb      	strh	r3, [r7, #6]
	memcpy(file_buffer, msg_buffer+header_with_usrname, it);
 800745e:	4b12      	ldr	r3, [pc, #72]	; (80074a8 <get_path_info+0x58>)
 8007460:	881b      	ldrh	r3, [r3, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	4b11      	ldr	r3, [pc, #68]	; (80074ac <get_path_info+0x5c>)
 8007466:	4413      	add	r3, r2
 8007468:	88fa      	ldrh	r2, [r7, #6]
 800746a:	4619      	mov	r1, r3
 800746c:	4810      	ldr	r0, [pc, #64]	; (80074b0 <get_path_info+0x60>)
 800746e:	f00f f892 	bl	8016596 <memcpy>
	if (it < 1)
	{
		//error
	}
	len = scan_dir(file_buffer);
 8007472:	480f      	ldr	r0, [pc, #60]	; (80074b0 <get_path_info+0x60>)
 8007474:	f000 fb38 	bl	8007ae8 <scan_dir>
 8007478:	4603      	mov	r3, r0
 800747a:	80bb      	strh	r3, [r7, #4]
	memset(msg_buffer,0,sizeof(msg_buffer));
 800747c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007480:	2100      	movs	r1, #0
 8007482:	480a      	ldr	r0, [pc, #40]	; (80074ac <get_path_info+0x5c>)
 8007484:	f00f f892 	bl	80165ac <memset>
	if(len > 0)
 8007488:	88bb      	ldrh	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d007      	beq.n	800749e <get_path_info+0x4e>
	{
		prepare_response(operation, RESP_OK, id, file_buffer,len);
 800748e:	88bb      	ldrh	r3, [r7, #4]
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	4b07      	ldr	r3, [pc, #28]	; (80074b0 <get_path_info+0x60>)
 8007494:	4a07      	ldr	r2, [pc, #28]	; (80074b4 <get_path_info+0x64>)
 8007496:	2100      	movs	r1, #0
 8007498:	4807      	ldr	r0, [pc, #28]	; (80074b8 <get_path_info+0x68>)
 800749a:	f7ff ffa9 	bl	80073f0 <prepare_response>
	}
}
 800749e:	bf00      	nop
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	2000000c 	.word	0x2000000c
 80074ac:	20000a40 	.word	0x20000a40
 80074b0:	20000640 	.word	0x20000640
 80074b4:	20000f40 	.word	0x20000f40
 80074b8:	20000f44 	.word	0x20000f44

080074bc <check_if_dir_exists>:

void check_if_dir_exists()
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af02      	add	r7, sp, #8
	uint16_t len;
	uint16_t it = find_end_of_msg();
 80074c2:	f7ff ff67 	bl	8007394 <find_end_of_msg>
 80074c6:	4603      	mov	r3, r0
 80074c8:	80fb      	strh	r3, [r7, #6]
	memcpy(file_buffer, msg_buffer+header_with_usrname, it);
 80074ca:	4b1c      	ldr	r3, [pc, #112]	; (800753c <check_if_dir_exists+0x80>)
 80074cc:	881b      	ldrh	r3, [r3, #0]
 80074ce:	461a      	mov	r2, r3
 80074d0:	4b1b      	ldr	r3, [pc, #108]	; (8007540 <check_if_dir_exists+0x84>)
 80074d2:	4413      	add	r3, r2
 80074d4:	88fa      	ldrh	r2, [r7, #6]
 80074d6:	4619      	mov	r1, r3
 80074d8:	481a      	ldr	r0, [pc, #104]	; (8007544 <check_if_dir_exists+0x88>)
 80074da:	f00f f85c 	bl	8016596 <memcpy>
	if (it < 1)
		{
			//error
		}
	FRESULT fr = f_chdir(file_buffer);
 80074de:	4819      	ldr	r0, [pc, #100]	; (8007544 <check_if_dir_exists+0x88>)
 80074e0:	f7fe fa23 	bl	800592a <f_chdir>
 80074e4:	4603      	mov	r3, r0
 80074e6:	717b      	strb	r3, [r7, #5]
	memset(msg_buffer,0,sizeof(msg_buffer));
 80074e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80074ec:	2100      	movs	r1, #0
 80074ee:	4814      	ldr	r0, [pc, #80]	; (8007540 <check_if_dir_exists+0x84>)
 80074f0:	f00f f85c 	bl	80165ac <memset>
	if(fr == FR_OK)
 80074f4:	797b      	ldrb	r3, [r7, #5]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d108      	bne.n	800750c <check_if_dir_exists+0x50>
	{
		prepare_response(operation, RESP_OK, id, 0, 0);
 80074fa:	2300      	movs	r3, #0
 80074fc:	9300      	str	r3, [sp, #0]
 80074fe:	2300      	movs	r3, #0
 8007500:	4a11      	ldr	r2, [pc, #68]	; (8007548 <check_if_dir_exists+0x8c>)
 8007502:	2100      	movs	r1, #0
 8007504:	4811      	ldr	r0, [pc, #68]	; (800754c <check_if_dir_exists+0x90>)
 8007506:	f7ff ff73 	bl	80073f0 <prepare_response>
	}
	else
	{
		prepare_response(operation, RESP_ERR, id, 0, 0);
	}
}
 800750a:	e013      	b.n	8007534 <check_if_dir_exists+0x78>
	else if(fr == FR_NO_PATH)
 800750c:	797b      	ldrb	r3, [r7, #5]
 800750e:	2b05      	cmp	r3, #5
 8007510:	d108      	bne.n	8007524 <check_if_dir_exists+0x68>
		prepare_response(operation, RESP_NO_PATH, id, 0,0);
 8007512:	2300      	movs	r3, #0
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	2300      	movs	r3, #0
 8007518:	4a0b      	ldr	r2, [pc, #44]	; (8007548 <check_if_dir_exists+0x8c>)
 800751a:	2104      	movs	r1, #4
 800751c:	480b      	ldr	r0, [pc, #44]	; (800754c <check_if_dir_exists+0x90>)
 800751e:	f7ff ff67 	bl	80073f0 <prepare_response>
}
 8007522:	e007      	b.n	8007534 <check_if_dir_exists+0x78>
		prepare_response(operation, RESP_ERR, id, 0, 0);
 8007524:	2300      	movs	r3, #0
 8007526:	9300      	str	r3, [sp, #0]
 8007528:	2300      	movs	r3, #0
 800752a:	4a07      	ldr	r2, [pc, #28]	; (8007548 <check_if_dir_exists+0x8c>)
 800752c:	2101      	movs	r1, #1
 800752e:	4807      	ldr	r0, [pc, #28]	; (800754c <check_if_dir_exists+0x90>)
 8007530:	f7ff ff5e 	bl	80073f0 <prepare_response>
}
 8007534:	bf00      	nop
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	2000000c 	.word	0x2000000c
 8007540:	20000a40 	.word	0x20000a40
 8007544:	20000640 	.word	0x20000640
 8007548:	20000f40 	.word	0x20000f40
 800754c:	20000f44 	.word	0x20000f44

08007550 <save_to_file>:

void save_to_file(uint16_t append)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b09e      	sub	sp, #120	; 0x78
 8007554:	af00      	add	r7, sp, #0
 8007556:	4603      	mov	r3, r0
 8007558:	80fb      	strh	r3, [r7, #6]
	uint16_t it = find_end_of_msg();
 800755a:	f7ff ff1b 	bl	8007394 <find_end_of_msg>
 800755e:	4603      	mov	r3, r0
 8007560:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	char filename[100];
	memset(filename,0, sizeof(filename));
 8007564:	f107 030c 	add.w	r3, r7, #12
 8007568:	2264      	movs	r2, #100	; 0x64
 800756a:	2100      	movs	r1, #0
 800756c:	4618      	mov	r0, r3
 800756e:	f00f f81d 	bl	80165ac <memset>
	memcpy(filename, msg_buffer + header_with_usrname, it);
 8007572:	4b40      	ldr	r3, [pc, #256]	; (8007674 <save_to_file+0x124>)
 8007574:	881b      	ldrh	r3, [r3, #0]
 8007576:	461a      	mov	r2, r3
 8007578:	4b3f      	ldr	r3, [pc, #252]	; (8007678 <save_to_file+0x128>)
 800757a:	18d1      	adds	r1, r2, r3
 800757c:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8007580:	f107 030c 	add.w	r3, r7, #12
 8007584:	4618      	mov	r0, r3
 8007586:	f00f f806 	bl	8016596 <memcpy>
	memcpy(file_buffer, msg_buffer + header_with_usrname + it + 1, 1024 - it - header_with_usrname);
 800758a:	4b3a      	ldr	r3, [pc, #232]	; (8007674 <save_to_file+0x124>)
 800758c:	881b      	ldrh	r3, [r3, #0]
 800758e:	461a      	mov	r2, r3
 8007590:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8007594:	4413      	add	r3, r2
 8007596:	3301      	adds	r3, #1
 8007598:	4a37      	ldr	r2, [pc, #220]	; (8007678 <save_to_file+0x128>)
 800759a:	1899      	adds	r1, r3, r2
 800759c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80075a0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80075a4:	4a33      	ldr	r2, [pc, #204]	; (8007674 <save_to_file+0x124>)
 80075a6:	8812      	ldrh	r2, [r2, #0]
 80075a8:	1a9b      	subs	r3, r3, r2
 80075aa:	461a      	mov	r2, r3
 80075ac:	4833      	ldr	r0, [pc, #204]	; (800767c <save_to_file+0x12c>)
 80075ae:	f00e fff2 	bl	8016596 <memcpy>
	char packet_counter[3] = {'\0','\0', '\0'};
 80075b2:	2300      	movs	r3, #0
 80075b4:	723b      	strb	r3, [r7, #8]
 80075b6:	2300      	movs	r3, #0
 80075b8:	727b      	strb	r3, [r7, #9]
 80075ba:	2300      	movs	r3, #0
 80075bc:	72bb      	strb	r3, [r7, #10]
	memcpy(packet_counter, msg_buffer + 3, 3);
 80075be:	4a30      	ldr	r2, [pc, #192]	; (8007680 <save_to_file+0x130>)
 80075c0:	f107 0308 	add.w	r3, r7, #8
 80075c4:	8811      	ldrh	r1, [r2, #0]
 80075c6:	7892      	ldrb	r2, [r2, #2]
 80075c8:	8019      	strh	r1, [r3, #0]
 80075ca:	709a      	strb	r2, [r3, #2]
	int p_counter = 0;
 80075cc:	2300      	movs	r3, #0
 80075ce:	673b      	str	r3, [r7, #112]	; 0x70
	p_counter = packet_counter[0]*256*256+packet_counter[1]*256+packet_counter[2];
 80075d0:	7a3b      	ldrb	r3, [r7, #8]
 80075d2:	021b      	lsls	r3, r3, #8
 80075d4:	7a7a      	ldrb	r2, [r7, #9]
 80075d6:	4413      	add	r3, r2
 80075d8:	021b      	lsls	r3, r3, #8
 80075da:	7aba      	ldrb	r2, [r7, #10]
 80075dc:	4413      	add	r3, r2
 80075de:	673b      	str	r3, [r7, #112]	; 0x70
	memset(msg_buffer, 0, sizeof(msg_buffer));
 80075e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80075e4:	2100      	movs	r1, #0
 80075e6:	4824      	ldr	r0, [pc, #144]	; (8007678 <save_to_file+0x128>)
 80075e8:	f00e ffe0 	bl	80165ac <memset>
	FRESULT fres;
	if(p_counter == control_val + 1)
 80075ec:	4b25      	ldr	r3, [pc, #148]	; (8007684 <save_to_file+0x134>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	3301      	adds	r3, #1
 80075f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d10f      	bne.n	8007618 <save_to_file+0xc8>
	{
		fres = write_file(filename, append);
 80075f8:	88fa      	ldrh	r2, [r7, #6]
 80075fa:	f107 030c 	add.w	r3, r7, #12
 80075fe:	4611      	mov	r1, r2
 8007600:	4618      	mov	r0, r3
 8007602:	f000 f9f9 	bl	80079f8 <write_file>
 8007606:	4603      	mov	r3, r0
 8007608:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		control_val++;
 800760c:	4b1d      	ldr	r3, [pc, #116]	; (8007684 <save_to_file+0x134>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3301      	adds	r3, #1
 8007612:	4a1c      	ldr	r2, [pc, #112]	; (8007684 <save_to_file+0x134>)
 8007614:	6013      	str	r3, [r2, #0]
 8007616:	e00b      	b.n	8007630 <save_to_file+0xe0>
	}
	else if (p_counter == control_val)
 8007618:	4b1a      	ldr	r3, [pc, #104]	; (8007684 <save_to_file+0x134>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800761e:	429a      	cmp	r2, r3
 8007620:	d103      	bne.n	800762a <save_to_file+0xda>
	{
		fres = FR_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007628:	e002      	b.n	8007630 <save_to_file+0xe0>
	}
	else
	{
		fres = 1;
 800762a:	2301      	movs	r3, #1
 800762c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	}
	memcpy(msg_buffer, operation, 1);
 8007630:	4b15      	ldr	r3, [pc, #84]	; (8007688 <save_to_file+0x138>)
 8007632:	781a      	ldrb	r2, [r3, #0]
 8007634:	4b10      	ldr	r3, [pc, #64]	; (8007678 <save_to_file+0x128>)
 8007636:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK)
 8007638:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800763c:	2b00      	cmp	r3, #0
 800763e:	d104      	bne.n	800764a <save_to_file+0xfa>
	{
		memcpy(msg_buffer+1, RESP_OK, 1);
 8007640:	4b12      	ldr	r3, [pc, #72]	; (800768c <save_to_file+0x13c>)
 8007642:	2200      	movs	r2, #0
 8007644:	7812      	ldrb	r2, [r2, #0]
 8007646:	701a      	strb	r2, [r3, #0]
 8007648:	e008      	b.n	800765c <save_to_file+0x10c>

	}
	else
	{
		memcpy(msg_buffer+1, RESP_ERR, 1);
 800764a:	4b10      	ldr	r3, [pc, #64]	; (800768c <save_to_file+0x13c>)
 800764c:	2201      	movs	r2, #1
 800764e:	7812      	ldrb	r2, [r2, #0]
 8007650:	701a      	strb	r2, [r3, #0]
		parse_path_and_delete_file();
 8007652:	f000 f821 	bl	8007698 <parse_path_and_delete_file>
		control_val = 0;
 8007656:	4b0b      	ldr	r3, [pc, #44]	; (8007684 <save_to_file+0x134>)
 8007658:	2200      	movs	r2, #0
 800765a:	601a      	str	r2, [r3, #0]
	}
	memcpy(msg_buffer+2, id, 1);
 800765c:	4b0c      	ldr	r3, [pc, #48]	; (8007690 <save_to_file+0x140>)
 800765e:	4a0d      	ldr	r2, [pc, #52]	; (8007694 <save_to_file+0x144>)
 8007660:	7812      	ldrb	r2, [r2, #0]
 8007662:	701a      	strb	r2, [r3, #0]
	memcpy(msg_buffer+3, packet_counter, 2);
 8007664:	4a06      	ldr	r2, [pc, #24]	; (8007680 <save_to_file+0x130>)
 8007666:	893b      	ldrh	r3, [r7, #8]
 8007668:	8013      	strh	r3, [r2, #0]
}
 800766a:	bf00      	nop
 800766c:	3778      	adds	r7, #120	; 0x78
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	2000000c 	.word	0x2000000c
 8007678:	20000a40 	.word	0x20000a40
 800767c:	20000640 	.word	0x20000640
 8007680:	20000a43 	.word	0x20000a43
 8007684:	20000424 	.word	0x20000424
 8007688:	20000f44 	.word	0x20000f44
 800768c:	20000a41 	.word	0x20000a41
 8007690:	20000a42 	.word	0x20000a42
 8007694:	20000f40 	.word	0x20000f40

08007698 <parse_path_and_delete_file>:
void parse_path_and_delete_file()
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b09a      	sub	sp, #104	; 0x68
 800769c:	af00      	add	r7, sp, #0
	uint16_t it = find_end_of_msg();
 800769e:	f7ff fe79 	bl	8007394 <find_end_of_msg>
 80076a2:	4603      	mov	r3, r0
 80076a4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	char filename[100];
	memset(filename, 0, sizeof(filename));
 80076a8:	463b      	mov	r3, r7
 80076aa:	2264      	movs	r2, #100	; 0x64
 80076ac:	2100      	movs	r1, #0
 80076ae:	4618      	mov	r0, r3
 80076b0:	f00e ff7c 	bl	80165ac <memset>
	memcpy(filename, msg_buffer + header_with_usrname, it);
 80076b4:	4b18      	ldr	r3, [pc, #96]	; (8007718 <parse_path_and_delete_file+0x80>)
 80076b6:	881b      	ldrh	r3, [r3, #0]
 80076b8:	461a      	mov	r2, r3
 80076ba:	4b18      	ldr	r3, [pc, #96]	; (800771c <parse_path_and_delete_file+0x84>)
 80076bc:	18d1      	adds	r1, r2, r3
 80076be:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80076c2:	463b      	mov	r3, r7
 80076c4:	4618      	mov	r0, r3
 80076c6:	f00e ff66 	bl	8016596 <memcpy>
	memset(msg_buffer, 0, sizeof(msg_buffer));
 80076ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80076ce:	2100      	movs	r1, #0
 80076d0:	4812      	ldr	r0, [pc, #72]	; (800771c <parse_path_and_delete_file+0x84>)
 80076d2:	f00e ff6b 	bl	80165ac <memset>
	FRESULT fres = delete_file(filename);
 80076d6:	463b      	mov	r3, r7
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 fa77 	bl	8007bcc <delete_file>
 80076de:	4603      	mov	r3, r0
 80076e0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	memcpy(msg_buffer, operation, 1);
 80076e4:	4b0e      	ldr	r3, [pc, #56]	; (8007720 <parse_path_and_delete_file+0x88>)
 80076e6:	781a      	ldrb	r2, [r3, #0]
 80076e8:	4b0c      	ldr	r3, [pc, #48]	; (800771c <parse_path_and_delete_file+0x84>)
 80076ea:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK)
 80076ec:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d104      	bne.n	80076fe <parse_path_and_delete_file+0x66>
	{
		memcpy(msg_buffer+1, RESP_OK, 1);
 80076f4:	4b0b      	ldr	r3, [pc, #44]	; (8007724 <parse_path_and_delete_file+0x8c>)
 80076f6:	2200      	movs	r2, #0
 80076f8:	7812      	ldrb	r2, [r2, #0]
 80076fa:	701a      	strb	r2, [r3, #0]
 80076fc:	e003      	b.n	8007706 <parse_path_and_delete_file+0x6e>
	}
	else
	{
		memcpy(msg_buffer+1, RESP_ERR, 1);
 80076fe:	4b09      	ldr	r3, [pc, #36]	; (8007724 <parse_path_and_delete_file+0x8c>)
 8007700:	2201      	movs	r2, #1
 8007702:	7812      	ldrb	r2, [r2, #0]
 8007704:	701a      	strb	r2, [r3, #0]
	}
	memcpy(msg_buffer+2, id, 1);
 8007706:	4b08      	ldr	r3, [pc, #32]	; (8007728 <parse_path_and_delete_file+0x90>)
 8007708:	4a08      	ldr	r2, [pc, #32]	; (800772c <parse_path_and_delete_file+0x94>)
 800770a:	7812      	ldrb	r2, [r2, #0]
 800770c:	701a      	strb	r2, [r3, #0]
}
 800770e:	bf00      	nop
 8007710:	3768      	adds	r7, #104	; 0x68
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	2000000c 	.word	0x2000000c
 800771c:	20000a40 	.word	0x20000a40
 8007720:	20000f44 	.word	0x20000f44
 8007724:	20000a41 	.word	0x20000a41
 8007728:	20000a42 	.word	0x20000a42
 800772c:	20000f40 	.word	0x20000f40

08007730 <parse_path_and_delete_directory>:

void parse_path_and_delete_directory()
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b09a      	sub	sp, #104	; 0x68
 8007734:	af00      	add	r7, sp, #0
	uint16_t it = find_end_of_msg();
 8007736:	f7ff fe2d 	bl	8007394 <find_end_of_msg>
 800773a:	4603      	mov	r3, r0
 800773c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	char filename[100];
	memset(filename, 0, sizeof(filename));
 8007740:	463b      	mov	r3, r7
 8007742:	2264      	movs	r2, #100	; 0x64
 8007744:	2100      	movs	r1, #0
 8007746:	4618      	mov	r0, r3
 8007748:	f00e ff30 	bl	80165ac <memset>
	memcpy(filename, msg_buffer + header_with_usrname, it);
 800774c:	4b18      	ldr	r3, [pc, #96]	; (80077b0 <parse_path_and_delete_directory+0x80>)
 800774e:	881b      	ldrh	r3, [r3, #0]
 8007750:	461a      	mov	r2, r3
 8007752:	4b18      	ldr	r3, [pc, #96]	; (80077b4 <parse_path_and_delete_directory+0x84>)
 8007754:	18d1      	adds	r1, r2, r3
 8007756:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800775a:	463b      	mov	r3, r7
 800775c:	4618      	mov	r0, r3
 800775e:	f00e ff1a 	bl	8016596 <memcpy>
	memset(msg_buffer, 0, sizeof(msg_buffer));
 8007762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007766:	2100      	movs	r1, #0
 8007768:	4812      	ldr	r0, [pc, #72]	; (80077b4 <parse_path_and_delete_directory+0x84>)
 800776a:	f00e ff1f 	bl	80165ac <memset>
	FRESULT fres = delete_file(filename);
 800776e:	463b      	mov	r3, r7
 8007770:	4618      	mov	r0, r3
 8007772:	f000 fa2b 	bl	8007bcc <delete_file>
 8007776:	4603      	mov	r3, r0
 8007778:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	memcpy(msg_buffer, operation, 1);
 800777c:	4b0e      	ldr	r3, [pc, #56]	; (80077b8 <parse_path_and_delete_directory+0x88>)
 800777e:	781a      	ldrb	r2, [r3, #0]
 8007780:	4b0c      	ldr	r3, [pc, #48]	; (80077b4 <parse_path_and_delete_directory+0x84>)
 8007782:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK)
 8007784:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8007788:	2b00      	cmp	r3, #0
 800778a:	d104      	bne.n	8007796 <parse_path_and_delete_directory+0x66>
	{
		memcpy(msg_buffer+1, RESP_OK, 1);
 800778c:	4b0b      	ldr	r3, [pc, #44]	; (80077bc <parse_path_and_delete_directory+0x8c>)
 800778e:	2200      	movs	r2, #0
 8007790:	7812      	ldrb	r2, [r2, #0]
 8007792:	701a      	strb	r2, [r3, #0]
 8007794:	e003      	b.n	800779e <parse_path_and_delete_directory+0x6e>
	}
	else
	{
		memcpy(msg_buffer+1, RESP_ERR, 1);
 8007796:	4b09      	ldr	r3, [pc, #36]	; (80077bc <parse_path_and_delete_directory+0x8c>)
 8007798:	2201      	movs	r2, #1
 800779a:	7812      	ldrb	r2, [r2, #0]
 800779c:	701a      	strb	r2, [r3, #0]
	}
	memcpy(msg_buffer+2, id, 1);
 800779e:	4b08      	ldr	r3, [pc, #32]	; (80077c0 <parse_path_and_delete_directory+0x90>)
 80077a0:	4a08      	ldr	r2, [pc, #32]	; (80077c4 <parse_path_and_delete_directory+0x94>)
 80077a2:	7812      	ldrb	r2, [r2, #0]
 80077a4:	701a      	strb	r2, [r3, #0]
}
 80077a6:	bf00      	nop
 80077a8:	3768      	adds	r7, #104	; 0x68
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	2000000c 	.word	0x2000000c
 80077b4:	20000a40 	.word	0x20000a40
 80077b8:	20000f44 	.word	0x20000f44
 80077bc:	20000a41 	.word	0x20000a41
 80077c0:	20000a42 	.word	0x20000a42
 80077c4:	20000f40 	.word	0x20000f40

080077c8 <read_and_send_file>:

void read_and_send_file()
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b0a0      	sub	sp, #128	; 0x80
 80077cc:	af02      	add	r7, sp, #8
	FRESULT fres;
	uint16_t it = find_end_of_msg();
 80077ce:	f7ff fde1 	bl	8007394 <find_end_of_msg>
 80077d2:	4603      	mov	r3, r0
 80077d4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	char filename[100];
	memset(filename,0, sizeof(filename));
 80077d8:	f107 0308 	add.w	r3, r7, #8
 80077dc:	2264      	movs	r2, #100	; 0x64
 80077de:	2100      	movs	r1, #0
 80077e0:	4618      	mov	r0, r3
 80077e2:	f00e fee3 	bl	80165ac <memset>
	memcpy(filename, msg_buffer + header_with_usrname, it);
 80077e6:	4b33      	ldr	r3, [pc, #204]	; (80078b4 <read_and_send_file+0xec>)
 80077e8:	881b      	ldrh	r3, [r3, #0]
 80077ea:	461a      	mov	r2, r3
 80077ec:	4b32      	ldr	r3, [pc, #200]	; (80078b8 <read_and_send_file+0xf0>)
 80077ee:	18d1      	adds	r1, r2, r3
 80077f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80077f4:	f107 0308 	add.w	r3, r7, #8
 80077f8:	4618      	mov	r0, r3
 80077fa:	f00e fecc 	bl	8016596 <memcpy>
	char packet_counter[3] = {'\0','\0','\0'};
 80077fe:	2300      	movs	r3, #0
 8007800:	713b      	strb	r3, [r7, #4]
 8007802:	2300      	movs	r3, #0
 8007804:	717b      	strb	r3, [r7, #5]
 8007806:	2300      	movs	r3, #0
 8007808:	71bb      	strb	r3, [r7, #6]
	memcpy(packet_counter, msg_buffer + 3, 3);
 800780a:	4a2c      	ldr	r2, [pc, #176]	; (80078bc <read_and_send_file+0xf4>)
 800780c:	1d3b      	adds	r3, r7, #4
 800780e:	8811      	ldrh	r1, [r2, #0]
 8007810:	7892      	ldrb	r2, [r2, #2]
 8007812:	8019      	strh	r1, [r3, #0]
 8007814:	709a      	strb	r2, [r3, #2]
	int p_counter = 0;
 8007816:	2300      	movs	r3, #0
 8007818:	673b      	str	r3, [r7, #112]	; 0x70
	p_counter = packet_counter[0]*256*256+packet_counter[1]*256+packet_counter[2];
 800781a:	793b      	ldrb	r3, [r7, #4]
 800781c:	021b      	lsls	r3, r3, #8
 800781e:	797a      	ldrb	r2, [r7, #5]
 8007820:	4413      	add	r3, r2
 8007822:	021b      	lsls	r3, r3, #8
 8007824:	79ba      	ldrb	r2, [r7, #6]
 8007826:	4413      	add	r3, r2
 8007828:	673b      	str	r3, [r7, #112]	; 0x70
	memset(msg_buffer, 0, sizeof(msg_buffer));
 800782a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800782e:	2100      	movs	r1, #0
 8007830:	4821      	ldr	r0, [pc, #132]	; (80078b8 <read_and_send_file+0xf0>)
 8007832:	f00e febb 	bl	80165ac <memset>
	fres = read_file(filename, p_counter);
 8007836:	f107 0308 	add.w	r3, r7, #8
 800783a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800783c:	4618      	mov	r0, r3
 800783e:	f000 f893 	bl	8007968 <read_file>
 8007842:	4603      	mov	r3, r0
 8007844:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fres == FR_OK)
 8007848:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800784c:	2b00      	cmp	r3, #0
 800784e:	d11d      	bne.n	800788c <read_and_send_file+0xc4>
		{
		if(bytes_read == 512)
 8007850:	4b1b      	ldr	r3, [pc, #108]	; (80078c0 <read_and_send_file+0xf8>)
 8007852:	881b      	ldrh	r3, [r3, #0]
 8007854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007858:	d109      	bne.n	800786e <read_and_send_file+0xa6>
		{
			prepare_response(operation, RESP_MORE, id, file_buffer, bytes_read);
 800785a:	4b19      	ldr	r3, [pc, #100]	; (80078c0 <read_and_send_file+0xf8>)
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	9300      	str	r3, [sp, #0]
 8007860:	4b18      	ldr	r3, [pc, #96]	; (80078c4 <read_and_send_file+0xfc>)
 8007862:	4a19      	ldr	r2, [pc, #100]	; (80078c8 <read_and_send_file+0x100>)
 8007864:	2102      	movs	r1, #2
 8007866:	4819      	ldr	r0, [pc, #100]	; (80078cc <read_and_send_file+0x104>)
 8007868:	f7ff fdc2 	bl	80073f0 <prepare_response>
 800786c:	e017      	b.n	800789e <read_and_send_file+0xd6>
		}
		else if(bytes_read < 512)
 800786e:	4b14      	ldr	r3, [pc, #80]	; (80078c0 <read_and_send_file+0xf8>)
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007876:	d212      	bcs.n	800789e <read_and_send_file+0xd6>
		{
			prepare_response(operation, RESP_OK, id, file_buffer, bytes_read);
 8007878:	4b11      	ldr	r3, [pc, #68]	; (80078c0 <read_and_send_file+0xf8>)
 800787a:	881b      	ldrh	r3, [r3, #0]
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	4b11      	ldr	r3, [pc, #68]	; (80078c4 <read_and_send_file+0xfc>)
 8007880:	4a11      	ldr	r2, [pc, #68]	; (80078c8 <read_and_send_file+0x100>)
 8007882:	2100      	movs	r1, #0
 8007884:	4811      	ldr	r0, [pc, #68]	; (80078cc <read_and_send_file+0x104>)
 8007886:	f7ff fdb3 	bl	80073f0 <prepare_response>
 800788a:	e008      	b.n	800789e <read_and_send_file+0xd6>
		}
		}
		else
		{
			prepare_response(operation, RESP_ERR, id, file_buffer, bytes_read);
 800788c:	4b0c      	ldr	r3, [pc, #48]	; (80078c0 <read_and_send_file+0xf8>)
 800788e:	881b      	ldrh	r3, [r3, #0]
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	4b0c      	ldr	r3, [pc, #48]	; (80078c4 <read_and_send_file+0xfc>)
 8007894:	4a0c      	ldr	r2, [pc, #48]	; (80078c8 <read_and_send_file+0x100>)
 8007896:	2101      	movs	r1, #1
 8007898:	480c      	ldr	r0, [pc, #48]	; (80078cc <read_and_send_file+0x104>)
 800789a:	f7ff fda9 	bl	80073f0 <prepare_response>
		}
		memset(file_buffer, 0, sizeof(file_buffer));
 800789e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80078a2:	2100      	movs	r1, #0
 80078a4:	4807      	ldr	r0, [pc, #28]	; (80078c4 <read_and_send_file+0xfc>)
 80078a6:	f00e fe81 	bl	80165ac <memset>
}
 80078aa:	bf00      	nop
 80078ac:	3778      	adds	r7, #120	; 0x78
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	2000000c 	.word	0x2000000c
 80078b8:	20000a40 	.word	0x20000a40
 80078bc:	20000a43 	.word	0x20000a43
 80078c0:	20001498 	.word	0x20001498
 80078c4:	20000640 	.word	0x20000640
 80078c8:	20000f40 	.word	0x20000f40
 80078cc:	20000f44 	.word	0x20000f44

080078d0 <parse_path_and_create_directory>:

void parse_path_and_create_directory()
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b09a      	sub	sp, #104	; 0x68
 80078d4:	af00      	add	r7, sp, #0
	uint16_t it = find_end_of_msg();
 80078d6:	f7ff fd5d 	bl	8007394 <find_end_of_msg>
 80078da:	4603      	mov	r3, r0
 80078dc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
		char dirname[100];
		memset(dirname, 0, sizeof(dirname));
 80078e0:	463b      	mov	r3, r7
 80078e2:	2264      	movs	r2, #100	; 0x64
 80078e4:	2100      	movs	r1, #0
 80078e6:	4618      	mov	r0, r3
 80078e8:	f00e fe60 	bl	80165ac <memset>
		memcpy(dirname, msg_buffer + header_with_usrname, it);
 80078ec:	4b18      	ldr	r3, [pc, #96]	; (8007950 <parse_path_and_create_directory+0x80>)
 80078ee:	881b      	ldrh	r3, [r3, #0]
 80078f0:	461a      	mov	r2, r3
 80078f2:	4b18      	ldr	r3, [pc, #96]	; (8007954 <parse_path_and_create_directory+0x84>)
 80078f4:	18d1      	adds	r1, r2, r3
 80078f6:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 80078fa:	463b      	mov	r3, r7
 80078fc:	4618      	mov	r0, r3
 80078fe:	f00e fe4a 	bl	8016596 <memcpy>
		memset(msg_buffer, 0, sizeof(msg_buffer));
 8007902:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007906:	2100      	movs	r1, #0
 8007908:	4812      	ldr	r0, [pc, #72]	; (8007954 <parse_path_and_create_directory+0x84>)
 800790a:	f00e fe4f 	bl	80165ac <memset>
		FRESULT fres = create_directory(dirname);
 800790e:	463b      	mov	r3, r7
 8007910:	4618      	mov	r0, r3
 8007912:	f000 f979 	bl	8007c08 <create_directory>
 8007916:	4603      	mov	r3, r0
 8007918:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
		memcpy(msg_buffer, operation, 1);
 800791c:	4b0e      	ldr	r3, [pc, #56]	; (8007958 <parse_path_and_create_directory+0x88>)
 800791e:	781a      	ldrb	r2, [r3, #0]
 8007920:	4b0c      	ldr	r3, [pc, #48]	; (8007954 <parse_path_and_create_directory+0x84>)
 8007922:	701a      	strb	r2, [r3, #0]
		if (fres == FR_OK)
 8007924:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8007928:	2b00      	cmp	r3, #0
 800792a:	d104      	bne.n	8007936 <parse_path_and_create_directory+0x66>
		{
			memcpy(msg_buffer+1, RESP_OK, 1);
 800792c:	4b0b      	ldr	r3, [pc, #44]	; (800795c <parse_path_and_create_directory+0x8c>)
 800792e:	2200      	movs	r2, #0
 8007930:	7812      	ldrb	r2, [r2, #0]
 8007932:	701a      	strb	r2, [r3, #0]
 8007934:	e003      	b.n	800793e <parse_path_and_create_directory+0x6e>
		}
		else
		{
			memcpy(msg_buffer+1, RESP_ERR, 1);
 8007936:	4b09      	ldr	r3, [pc, #36]	; (800795c <parse_path_and_create_directory+0x8c>)
 8007938:	2201      	movs	r2, #1
 800793a:	7812      	ldrb	r2, [r2, #0]
 800793c:	701a      	strb	r2, [r3, #0]
		}
		memcpy(msg_buffer+2, id, 1);
 800793e:	4b08      	ldr	r3, [pc, #32]	; (8007960 <parse_path_and_create_directory+0x90>)
 8007940:	4a08      	ldr	r2, [pc, #32]	; (8007964 <parse_path_and_create_directory+0x94>)
 8007942:	7812      	ldrb	r2, [r2, #0]
 8007944:	701a      	strb	r2, [r3, #0]
}
 8007946:	bf00      	nop
 8007948:	3768      	adds	r7, #104	; 0x68
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	2000000c 	.word	0x2000000c
 8007954:	20000a40 	.word	0x20000a40
 8007958:	20000f44 	.word	0x20000f44
 800795c:	20000a41 	.word	0x20000a41
 8007960:	20000a42 	.word	0x20000a42
 8007964:	20000f40 	.word	0x20000f40

08007968 <read_file>:




uint16_t read_file(char* filename, int p_counter)
{
 8007968:	b590      	push	{r4, r7, lr}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
	FRESULT fr;
	fr = f_mount(&FatFs, "", 0);
 8007972:	2200      	movs	r2, #0
 8007974:	491b      	ldr	r1, [pc, #108]	; (80079e4 <read_file+0x7c>)
 8007976:	481c      	ldr	r0, [pc, #112]	; (80079e8 <read_file+0x80>)
 8007978:	f7fd f8ee 	bl	8004b58 <f_mount>
 800797c:	4603      	mov	r3, r0
 800797e:	73fb      	strb	r3, [r7, #15]
	fr = f_open(&file, filename, FA_READ);
 8007980:	2201      	movs	r2, #1
 8007982:	6879      	ldr	r1, [r7, #4]
 8007984:	4819      	ldr	r0, [pc, #100]	; (80079ec <read_file+0x84>)
 8007986:	f7fd f927 	bl	8004bd8 <f_open>
 800798a:	4603      	mov	r3, r0
 800798c:	73fb      	strb	r3, [r7, #15]
	if (fr) return (int)fr;
 800798e:	7bfb      	ldrb	r3, [r7, #15]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <read_file+0x32>
 8007994:	7bfb      	ldrb	r3, [r7, #15]
 8007996:	b29b      	uxth	r3, r3
 8007998:	e020      	b.n	80079dc <read_file+0x74>
	fr = f_lseek(&file, p_counter*512);
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	025b      	lsls	r3, r3, #9
 800799e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80079a2:	461a      	mov	r2, r3
 80079a4:	4623      	mov	r3, r4
 80079a6:	4811      	ldr	r0, [pc, #68]	; (80079ec <read_file+0x84>)
 80079a8:	f7fe f848 	bl	8005a3c <f_lseek>
 80079ac:	4603      	mov	r3, r0
 80079ae:	73fb      	strb	r3, [r7, #15]
	if (fr) return (int)fr;
 80079b0:	7bfb      	ldrb	r3, [r7, #15]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d002      	beq.n	80079bc <read_file+0x54>
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	e00f      	b.n	80079dc <read_file+0x74>
	fr = f_read(&file, file_buffer,512,&bytes_read);
 80079bc:	4b0c      	ldr	r3, [pc, #48]	; (80079f0 <read_file+0x88>)
 80079be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079c2:	490c      	ldr	r1, [pc, #48]	; (80079f4 <read_file+0x8c>)
 80079c4:	4809      	ldr	r0, [pc, #36]	; (80079ec <read_file+0x84>)
 80079c6:	f7fd fb47 	bl	8005058 <f_read>
 80079ca:	4603      	mov	r3, r0
 80079cc:	73fb      	strb	r3, [r7, #15]
	fr = f_close(&file);
 80079ce:	4807      	ldr	r0, [pc, #28]	; (80079ec <read_file+0x84>)
 80079d0:	f7fd ff8b 	bl	80058ea <f_close>
 80079d4:	4603      	mov	r3, r0
 80079d6:	73fb      	strb	r3, [r7, #15]
	return fr;
 80079d8:	7bfb      	ldrb	r3, [r7, #15]
 80079da:	b29b      	uxth	r3, r3
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3714      	adds	r7, #20
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd90      	pop	{r4, r7, pc}
 80079e4:	080174b8 	.word	0x080174b8
 80079e8:	200000b4 	.word	0x200000b4
 80079ec:	20000f48 	.word	0x20000f48
 80079f0:	20001498 	.word	0x20001498
 80079f4:	20000640 	.word	0x20000640

080079f8 <write_file>:

uint16_t write_file(char* filename, uint16_t append)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	460b      	mov	r3, r1
 8007a02:	807b      	strh	r3, [r7, #2]
	FRESULT fr;
	f_mount(&FatFs, "", 0);
 8007a04:	2200      	movs	r2, #0
 8007a06:	4928      	ldr	r1, [pc, #160]	; (8007aa8 <write_file+0xb0>)
 8007a08:	4828      	ldr	r0, [pc, #160]	; (8007aac <write_file+0xb4>)
 8007a0a:	f7fd f8a5 	bl	8004b58 <f_mount>
	if(append == 0) fr = f_open(&file, filename, FA_WRITE | FA_CREATE_NEW);
 8007a0e:	887b      	ldrh	r3, [r7, #2]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d107      	bne.n	8007a24 <write_file+0x2c>
 8007a14:	2206      	movs	r2, #6
 8007a16:	6879      	ldr	r1, [r7, #4]
 8007a18:	4825      	ldr	r0, [pc, #148]	; (8007ab0 <write_file+0xb8>)
 8007a1a:	f7fd f8dd 	bl	8004bd8 <f_open>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	73fb      	strb	r3, [r7, #15]
 8007a22:	e009      	b.n	8007a38 <write_file+0x40>
	else if (append == 1) fr = f_open(&file, filename, FA_WRITE | FA_OPEN_APPEND);
 8007a24:	887b      	ldrh	r3, [r7, #2]
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d106      	bne.n	8007a38 <write_file+0x40>
 8007a2a:	2232      	movs	r2, #50	; 0x32
 8007a2c:	6879      	ldr	r1, [r7, #4]
 8007a2e:	4820      	ldr	r0, [pc, #128]	; (8007ab0 <write_file+0xb8>)
 8007a30:	f7fd f8d2 	bl	8004bd8 <f_open>
 8007a34:	4603      	mov	r3, r0
 8007a36:	73fb      	strb	r3, [r7, #15]
	if (fr) return (int)fr;
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d002      	beq.n	8007a44 <write_file+0x4c>
 8007a3e:	7bfb      	ldrb	r3, [r7, #15]
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	e02d      	b.n	8007aa0 <write_file+0xa8>
	uint16_t it = 0;
 8007a44:	2300      	movs	r3, #0
 8007a46:	81bb      	strh	r3, [r7, #12]
	for (int i=0;i<1024;i++)
 8007a48:	2300      	movs	r3, #0
 8007a4a:	60bb      	str	r3, [r7, #8]
 8007a4c:	e00f      	b.n	8007a6e <write_file+0x76>
	{
		if (file_buffer[i] == '\0' || i == 1024)
 8007a4e:	4a19      	ldr	r2, [pc, #100]	; (8007ab4 <write_file+0xbc>)
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	4413      	add	r3, r2
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <write_file+0x6a>
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a60:	d102      	bne.n	8007a68 <write_file+0x70>
		{
			it = i;
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	81bb      	strh	r3, [r7, #12]
			break;
 8007a66:	e006      	b.n	8007a76 <write_file+0x7e>
	for (int i=0;i<1024;i++)
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	60bb      	str	r3, [r7, #8]
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a74:	dbeb      	blt.n	8007a4e <write_file+0x56>
		}
	}
	fr =f_write(&file, file_buffer, it, NULL);
 8007a76:	89ba      	ldrh	r2, [r7, #12]
 8007a78:	2300      	movs	r3, #0
 8007a7a:	490e      	ldr	r1, [pc, #56]	; (8007ab4 <write_file+0xbc>)
 8007a7c:	480c      	ldr	r0, [pc, #48]	; (8007ab0 <write_file+0xb8>)
 8007a7e:	f7fd fc54 	bl	800532a <f_write>
 8007a82:	4603      	mov	r3, r0
 8007a84:	73fb      	strb	r3, [r7, #15]
	fr = f_close(&file);
 8007a86:	480a      	ldr	r0, [pc, #40]	; (8007ab0 <write_file+0xb8>)
 8007a88:	f7fd ff2f 	bl	80058ea <f_close>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	73fb      	strb	r3, [r7, #15]
	memset(file_buffer, 0, sizeof(file_buffer));
 8007a90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a94:	2100      	movs	r1, #0
 8007a96:	4807      	ldr	r0, [pc, #28]	; (8007ab4 <write_file+0xbc>)
 8007a98:	f00e fd88 	bl	80165ac <memset>
	return fr;
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
 8007a9e:	b29b      	uxth	r3, r3
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	080174b8 	.word	0x080174b8
 8007aac:	200000b4 	.word	0x200000b4
 8007ab0:	20000f48 	.word	0x20000f48
 8007ab4:	20000640 	.word	0x20000640

08007ab8 <find_size>:
uint16_t find_size(TCHAR * fname)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
	uint16_t index = 0;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	81fb      	strh	r3, [r7, #14]
	while(fname[index] != '\0')
 8007ac4:	e002      	b.n	8007acc <find_size+0x14>
	{
		index++;
 8007ac6:	89fb      	ldrh	r3, [r7, #14]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	81fb      	strh	r3, [r7, #14]
	while(fname[index] != '\0')
 8007acc:	89fb      	ldrh	r3, [r7, #14]
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1f6      	bne.n	8007ac6 <find_size+0xe>
	}
	return index;
 8007ad8:	89fb      	ldrh	r3, [r7, #14]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3714      	adds	r7, #20
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
	...

08007ae8 <scan_dir>:

uint16_t scan_dir(char* path)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b098      	sub	sp, #96	; 0x60
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
	FRESULT fr;
    DIR dir;
    uint16_t i = 0;
 8007af0:	2300      	movs	r3, #0
 8007af2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    uint16_t fname_size = 0;
 8007af6:	2300      	movs	r3, #0
 8007af8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c


    fr = f_mount(&FatFs, "", 0);
 8007afc:	2200      	movs	r2, #0
 8007afe:	492d      	ldr	r1, [pc, #180]	; (8007bb4 <scan_dir+0xcc>)
 8007b00:	482d      	ldr	r0, [pc, #180]	; (8007bb8 <scan_dir+0xd0>)
 8007b02:	f7fd f829 	bl	8004b58 <f_mount>
 8007b06:	4603      	mov	r3, r0
 8007b08:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    if (fr != FR_OK) return 0;
 8007b0c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <scan_dir+0x30>
 8007b14:	2300      	movs	r3, #0
 8007b16:	e048      	b.n	8007baa <scan_dir+0xc2>
    fr = f_opendir(&dir, path);
 8007b18:	f107 0308 	add.w	r3, r7, #8
 8007b1c:	6879      	ldr	r1, [r7, #4]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fe f984 	bl	8005e2c <f_opendir>
 8007b24:	4603      	mov	r3, r0
 8007b26:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    if (fr == FR_OK) {
 8007b2a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d139      	bne.n	8007ba6 <scan_dir+0xbe>
        for (;;)
        {
        	fr = f_readdir(&dir, &file_info);
 8007b32:	f107 0308 	add.w	r3, r7, #8
 8007b36:	4921      	ldr	r1, [pc, #132]	; (8007bbc <scan_dir+0xd4>)
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7fe fa1a 	bl	8005f72 <f_readdir>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
            if (fr != FR_OK || file_info.fname[0] == 0) break;
 8007b44:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d127      	bne.n	8007b9c <scan_dir+0xb4>
 8007b4c:	4b1b      	ldr	r3, [pc, #108]	; (8007bbc <scan_dir+0xd4>)
 8007b4e:	7e9b      	ldrb	r3, [r3, #26]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d023      	beq.n	8007b9c <scan_dir+0xb4>
            fname_size  = find_size(file_info.fname);
 8007b54:	481a      	ldr	r0, [pc, #104]	; (8007bc0 <scan_dir+0xd8>)
 8007b56:	f7ff ffaf 	bl	8007ab8 <find_size>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            memcpy(file_buffer + i, file_info.fname, fname_size);
 8007b60:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007b64:	4a17      	ldr	r2, [pc, #92]	; (8007bc4 <scan_dir+0xdc>)
 8007b66:	4413      	add	r3, r2
 8007b68:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8007b6c:	4914      	ldr	r1, [pc, #80]	; (8007bc0 <scan_dir+0xd8>)
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f00e fd11 	bl	8016596 <memcpy>
            i += fname_size;
 8007b74:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8007b78:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8007b7c:	4413      	add	r3, r2
 8007b7e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
            memcpy(file_buffer + i, divider,1);
 8007b82:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007b86:	4a0f      	ldr	r2, [pc, #60]	; (8007bc4 <scan_dir+0xdc>)
 8007b88:	4413      	add	r3, r2
 8007b8a:	4a0f      	ldr	r2, [pc, #60]	; (8007bc8 <scan_dir+0xe0>)
 8007b8c:	7812      	ldrb	r2, [r2, #0]
 8007b8e:	701a      	strb	r2, [r3, #0]
            i++;
 8007b90:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8007b94:	3301      	adds	r3, #1
 8007b96:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        	fr = f_readdir(&dir, &file_info);
 8007b9a:	e7ca      	b.n	8007b32 <scan_dir+0x4a>
        }
        f_closedir(&dir);
 8007b9c:	f107 0308 	add.w	r3, r7, #8
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7fe f9ce 	bl	8005f42 <f_closedir>
    }

    return i;
 8007ba6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3760      	adds	r7, #96	; 0x60
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	080174b8 	.word	0x080174b8
 8007bb8:	200000b4 	.word	0x200000b4
 8007bbc:	20000300 	.word	0x20000300
 8007bc0:	2000031a 	.word	0x2000031a
 8007bc4:	20000640 	.word	0x20000640
 8007bc8:	20000008 	.word	0x20000008

08007bcc <delete_file>:
	f_mount(&FatFs, "", 0);
	fr = f_stat(path, &file_info);
	return fr;
}
uint16_t delete_file(char * path)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
	FRESULT fr;
	fr = f_mount(&FatFs, "", 0);
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	490a      	ldr	r1, [pc, #40]	; (8007c00 <delete_file+0x34>)
 8007bd8:	480a      	ldr	r0, [pc, #40]	; (8007c04 <delete_file+0x38>)
 8007bda:	f7fc ffbd 	bl	8004b58 <f_mount>
 8007bde:	4603      	mov	r3, r0
 8007be0:	73fb      	strb	r3, [r7, #15]
	if(fr == FR_OK)
 8007be2:	7bfb      	ldrb	r3, [r7, #15]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d104      	bne.n	8007bf2 <delete_file+0x26>
		{
			fr = f_unlink(path);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f7fe fa14 	bl	8006016 <f_unlink>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	73fb      	strb	r3, [r7, #15]
		}
	return fr;
 8007bf2:	7bfb      	ldrb	r3, [r7, #15]
 8007bf4:	b29b      	uxth	r3, r3
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	080174b8 	.word	0x080174b8
 8007c04:	200000b4 	.word	0x200000b4

08007c08 <create_directory>:
	}
	*/
}

uint16_t create_directory(char * path)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
	FRESULT fr;
	fr = f_mount(&FatFs, "", 0);
 8007c10:	2200      	movs	r2, #0
 8007c12:	490a      	ldr	r1, [pc, #40]	; (8007c3c <create_directory+0x34>)
 8007c14:	480a      	ldr	r0, [pc, #40]	; (8007c40 <create_directory+0x38>)
 8007c16:	f7fc ff9f 	bl	8004b58 <f_mount>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	73fb      	strb	r3, [r7, #15]
	if (fr == FR_OK)
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d104      	bne.n	8007c2e <create_directory+0x26>
	{
		fr = f_mkdir(path);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f7fe fae9 	bl	80061fc <f_mkdir>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	73fb      	strb	r3, [r7, #15]
	}
	return fr;
 8007c2e:	7bfb      	ldrb	r3, [r7, #15]
 8007c30:	b29b      	uxth	r3, r3
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	080174b8 	.word	0x080174b8
 8007c40:	200000b4 	.word	0x200000b4

08007c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007c7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007c48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007c4a:	e003      	b.n	8007c54 <LoopCopyDataInit>

08007c4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007c4c:	4b0c      	ldr	r3, [pc, #48]	; (8007c80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007c4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007c50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007c52:	3104      	adds	r1, #4

08007c54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007c54:	480b      	ldr	r0, [pc, #44]	; (8007c84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007c56:	4b0c      	ldr	r3, [pc, #48]	; (8007c88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007c58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007c5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007c5c:	d3f6      	bcc.n	8007c4c <CopyDataInit>
  ldr  r2, =_sbss
 8007c5e:	4a0b      	ldr	r2, [pc, #44]	; (8007c8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007c60:	e002      	b.n	8007c68 <LoopFillZerobss>

08007c62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007c62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007c64:	f842 3b04 	str.w	r3, [r2], #4

08007c68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007c68:	4b09      	ldr	r3, [pc, #36]	; (8007c90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007c6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007c6c:	d3f9      	bcc.n	8007c62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007c6e:	f7fe ffa3 	bl	8006bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007c72:	f00e fc4d 	bl	8016510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007c76:	f7fe fd61 	bl	800673c <main>
  bx  lr    
 8007c7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007c7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007c80:	08028dcc 	.word	0x08028dcc
  ldr  r0, =_sdata
 8007c84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007c88:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 8007c8c:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8007c90:	20007b44 	.word	0x20007b44

08007c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007c94:	e7fe      	b.n	8007c94 <ADC_IRQHandler>
	...

08007c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007c9c:	4b0e      	ldr	r3, [pc, #56]	; (8007cd8 <HAL_Init+0x40>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a0d      	ldr	r2, [pc, #52]	; (8007cd8 <HAL_Init+0x40>)
 8007ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007ca8:	4b0b      	ldr	r3, [pc, #44]	; (8007cd8 <HAL_Init+0x40>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a0a      	ldr	r2, [pc, #40]	; (8007cd8 <HAL_Init+0x40>)
 8007cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007cb4:	4b08      	ldr	r3, [pc, #32]	; (8007cd8 <HAL_Init+0x40>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a07      	ldr	r2, [pc, #28]	; (8007cd8 <HAL_Init+0x40>)
 8007cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007cc0:	2003      	movs	r0, #3
 8007cc2:	f000 f92f 	bl	8007f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	f000 f808 	bl	8007cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007ccc:	f7fe fe38 	bl	8006940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	40023c00 	.word	0x40023c00

08007cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007ce4:	4b12      	ldr	r3, [pc, #72]	; (8007d30 <HAL_InitTick+0x54>)
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	4b12      	ldr	r3, [pc, #72]	; (8007d34 <HAL_InitTick+0x58>)
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	4619      	mov	r1, r3
 8007cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 f939 	bl	8007f72 <HAL_SYSTICK_Config>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e00e      	b.n	8007d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b0f      	cmp	r3, #15
 8007d0e:	d80a      	bhi.n	8007d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007d10:	2200      	movs	r2, #0
 8007d12:	6879      	ldr	r1, [r7, #4]
 8007d14:	f04f 30ff 	mov.w	r0, #4294967295
 8007d18:	f000 f90f 	bl	8007f3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007d1c:	4a06      	ldr	r2, [pc, #24]	; (8007d38 <HAL_InitTick+0x5c>)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007d22:	2300      	movs	r3, #0
 8007d24:	e000      	b.n	8007d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	20000004 	.word	0x20000004
 8007d34:	20000014 	.word	0x20000014
 8007d38:	20000010 	.word	0x20000010

08007d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007d40:	4b06      	ldr	r3, [pc, #24]	; (8007d5c <HAL_IncTick+0x20>)
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	461a      	mov	r2, r3
 8007d46:	4b06      	ldr	r3, [pc, #24]	; (8007d60 <HAL_IncTick+0x24>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	4a04      	ldr	r2, [pc, #16]	; (8007d60 <HAL_IncTick+0x24>)
 8007d4e:	6013      	str	r3, [r2, #0]
}
 8007d50:	bf00      	nop
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr
 8007d5a:	bf00      	nop
 8007d5c:	20000014 	.word	0x20000014
 8007d60:	200014a0 	.word	0x200014a0

08007d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007d64:	b480      	push	{r7}
 8007d66:	af00      	add	r7, sp, #0
  return uwTick;
 8007d68:	4b03      	ldr	r3, [pc, #12]	; (8007d78 <HAL_GetTick+0x14>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	200014a0 	.word	0x200014a0

08007d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007d84:	f7ff ffee 	bl	8007d64 <HAL_GetTick>
 8007d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d94:	d005      	beq.n	8007da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007d96:	4b09      	ldr	r3, [pc, #36]	; (8007dbc <HAL_Delay+0x40>)
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	4413      	add	r3, r2
 8007da0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007da2:	bf00      	nop
 8007da4:	f7ff ffde 	bl	8007d64 <HAL_GetTick>
 8007da8:	4602      	mov	r2, r0
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d8f7      	bhi.n	8007da4 <HAL_Delay+0x28>
  {
  }
}
 8007db4:	bf00      	nop
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	20000014 	.word	0x20000014

08007dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f003 0307 	and.w	r3, r3, #7
 8007dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007dd0:	4b0c      	ldr	r3, [pc, #48]	; (8007e04 <__NVIC_SetPriorityGrouping+0x44>)
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007dd6:	68ba      	ldr	r2, [r7, #8]
 8007dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007ddc:	4013      	ands	r3, r2
 8007dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007de8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007df2:	4a04      	ldr	r2, [pc, #16]	; (8007e04 <__NVIC_SetPriorityGrouping+0x44>)
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	60d3      	str	r3, [r2, #12]
}
 8007df8:	bf00      	nop
 8007dfa:	3714      	adds	r7, #20
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr
 8007e04:	e000ed00 	.word	0xe000ed00

08007e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e0c:	4b04      	ldr	r3, [pc, #16]	; (8007e20 <__NVIC_GetPriorityGrouping+0x18>)
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	0a1b      	lsrs	r3, r3, #8
 8007e12:	f003 0307 	and.w	r3, r3, #7
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	e000ed00 	.word	0xe000ed00

08007e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	6039      	str	r1, [r7, #0]
 8007e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	db0a      	blt.n	8007e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	b2da      	uxtb	r2, r3
 8007e3c:	490c      	ldr	r1, [pc, #48]	; (8007e70 <__NVIC_SetPriority+0x4c>)
 8007e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e42:	0112      	lsls	r2, r2, #4
 8007e44:	b2d2      	uxtb	r2, r2
 8007e46:	440b      	add	r3, r1
 8007e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007e4c:	e00a      	b.n	8007e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	4908      	ldr	r1, [pc, #32]	; (8007e74 <__NVIC_SetPriority+0x50>)
 8007e54:	79fb      	ldrb	r3, [r7, #7]
 8007e56:	f003 030f 	and.w	r3, r3, #15
 8007e5a:	3b04      	subs	r3, #4
 8007e5c:	0112      	lsls	r2, r2, #4
 8007e5e:	b2d2      	uxtb	r2, r2
 8007e60:	440b      	add	r3, r1
 8007e62:	761a      	strb	r2, [r3, #24]
}
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	e000e100 	.word	0xe000e100
 8007e74:	e000ed00 	.word	0xe000ed00

08007e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b089      	sub	sp, #36	; 0x24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f003 0307 	and.w	r3, r3, #7
 8007e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	f1c3 0307 	rsb	r3, r3, #7
 8007e92:	2b04      	cmp	r3, #4
 8007e94:	bf28      	it	cs
 8007e96:	2304      	movcs	r3, #4
 8007e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	3304      	adds	r3, #4
 8007e9e:	2b06      	cmp	r3, #6
 8007ea0:	d902      	bls.n	8007ea8 <NVIC_EncodePriority+0x30>
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	3b03      	subs	r3, #3
 8007ea6:	e000      	b.n	8007eaa <NVIC_EncodePriority+0x32>
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007eac:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb6:	43da      	mvns	r2, r3
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	401a      	ands	r2, r3
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8007eca:	43d9      	mvns	r1, r3
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ed0:	4313      	orrs	r3, r2
         );
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3724      	adds	r7, #36	; 0x24
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
	...

08007ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	3b01      	subs	r3, #1
 8007eec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ef0:	d301      	bcc.n	8007ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e00f      	b.n	8007f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007ef6:	4a0a      	ldr	r2, [pc, #40]	; (8007f20 <SysTick_Config+0x40>)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	3b01      	subs	r3, #1
 8007efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007efe:	210f      	movs	r1, #15
 8007f00:	f04f 30ff 	mov.w	r0, #4294967295
 8007f04:	f7ff ff8e 	bl	8007e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007f08:	4b05      	ldr	r3, [pc, #20]	; (8007f20 <SysTick_Config+0x40>)
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007f0e:	4b04      	ldr	r3, [pc, #16]	; (8007f20 <SysTick_Config+0x40>)
 8007f10:	2207      	movs	r2, #7
 8007f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	e000e010 	.word	0xe000e010

08007f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7ff ff47 	bl	8007dc0 <__NVIC_SetPriorityGrouping>
}
 8007f32:	bf00      	nop
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b086      	sub	sp, #24
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	4603      	mov	r3, r0
 8007f42:	60b9      	str	r1, [r7, #8]
 8007f44:	607a      	str	r2, [r7, #4]
 8007f46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007f4c:	f7ff ff5c 	bl	8007e08 <__NVIC_GetPriorityGrouping>
 8007f50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	68b9      	ldr	r1, [r7, #8]
 8007f56:	6978      	ldr	r0, [r7, #20]
 8007f58:	f7ff ff8e 	bl	8007e78 <NVIC_EncodePriority>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f62:	4611      	mov	r1, r2
 8007f64:	4618      	mov	r0, r3
 8007f66:	f7ff ff5d 	bl	8007e24 <__NVIC_SetPriority>
}
 8007f6a:	bf00      	nop
 8007f6c:	3718      	adds	r7, #24
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b082      	sub	sp, #8
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f7ff ffb0 	bl	8007ee0 <SysTick_Config>
 8007f80:	4603      	mov	r3, r0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
	...

08007f8c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b088      	sub	sp, #32
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8007f94:	2300      	movs	r3, #0
 8007f96:	61fb      	str	r3, [r7, #28]
 8007f98:	2300      	movs	r3, #0
 8007f9a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8007f9c:	4baa      	ldr	r3, [pc, #680]	; (8008248 <HAL_ETH_Init+0x2bc>)
 8007f9e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e185      	b.n	80082be <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d106      	bne.n	8007fcc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f002 f97c 	bl	800a2c4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fcc:	2300      	movs	r3, #0
 8007fce:	60bb      	str	r3, [r7, #8]
 8007fd0:	4b9e      	ldr	r3, [pc, #632]	; (800824c <HAL_ETH_Init+0x2c0>)
 8007fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fd4:	4a9d      	ldr	r2, [pc, #628]	; (800824c <HAL_ETH_Init+0x2c0>)
 8007fd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fda:	6453      	str	r3, [r2, #68]	; 0x44
 8007fdc:	4b9b      	ldr	r3, [pc, #620]	; (800824c <HAL_ETH_Init+0x2c0>)
 8007fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fe4:	60bb      	str	r3, [r7, #8]
 8007fe6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8007fe8:	4b99      	ldr	r3, [pc, #612]	; (8008250 <HAL_ETH_Init+0x2c4>)
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	4a98      	ldr	r2, [pc, #608]	; (8008250 <HAL_ETH_Init+0x2c4>)
 8007fee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007ff2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8007ff4:	4b96      	ldr	r3, [pc, #600]	; (8008250 <HAL_ETH_Init+0x2c4>)
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6a1b      	ldr	r3, [r3, #32]
 8007ffc:	4994      	ldr	r1, [pc, #592]	; (8008250 <HAL_ETH_Init+0x2c4>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f042 0201 	orr.w	r2, r2, #1
 8008014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008018:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800801a:	f7ff fea3 	bl	8007d64 <HAL_GetTick>
 800801e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8008020:	e011      	b.n	8008046 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8008022:	f7ff fe9f 	bl	8007d64 <HAL_GetTick>
 8008026:	4602      	mov	r2, r0
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	1ad3      	subs	r3, r2, r3
 800802c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008030:	d909      	bls.n	8008046 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2203      	movs	r2, #3
 8008036:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e13b      	b.n	80082be <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1e4      	bne.n	8008022 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	f023 031c 	bic.w	r3, r3, #28
 8008066:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8008068:	f001 fcec 	bl	8009a44 <HAL_RCC_GetHCLKFreq>
 800806c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	4a78      	ldr	r2, [pc, #480]	; (8008254 <HAL_ETH_Init+0x2c8>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d908      	bls.n	8008088 <HAL_ETH_Init+0xfc>
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	4a77      	ldr	r2, [pc, #476]	; (8008258 <HAL_ETH_Init+0x2cc>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d804      	bhi.n	8008088 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	f043 0308 	orr.w	r3, r3, #8
 8008084:	61fb      	str	r3, [r7, #28]
 8008086:	e027      	b.n	80080d8 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	4a73      	ldr	r2, [pc, #460]	; (8008258 <HAL_ETH_Init+0x2cc>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d908      	bls.n	80080a2 <HAL_ETH_Init+0x116>
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	4a72      	ldr	r2, [pc, #456]	; (800825c <HAL_ETH_Init+0x2d0>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d804      	bhi.n	80080a2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8008098:	69fb      	ldr	r3, [r7, #28]
 800809a:	f043 030c 	orr.w	r3, r3, #12
 800809e:	61fb      	str	r3, [r7, #28]
 80080a0:	e01a      	b.n	80080d8 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	4a6d      	ldr	r2, [pc, #436]	; (800825c <HAL_ETH_Init+0x2d0>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d903      	bls.n	80080b2 <HAL_ETH_Init+0x126>
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	4a6c      	ldr	r2, [pc, #432]	; (8008260 <HAL_ETH_Init+0x2d4>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d911      	bls.n	80080d6 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	4a6a      	ldr	r2, [pc, #424]	; (8008260 <HAL_ETH_Init+0x2d4>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d908      	bls.n	80080cc <HAL_ETH_Init+0x140>
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	4a69      	ldr	r2, [pc, #420]	; (8008264 <HAL_ETH_Init+0x2d8>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d804      	bhi.n	80080cc <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	f043 0304 	orr.w	r3, r3, #4
 80080c8:	61fb      	str	r3, [r7, #28]
 80080ca:	e005      	b.n	80080d8 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	f043 0310 	orr.w	r3, r3, #16
 80080d2:	61fb      	str	r3, [r7, #28]
 80080d4:	e000      	b.n	80080d8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80080d6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	69fa      	ldr	r2, [r7, #28]
 80080de:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80080e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80080e4:	2100      	movs	r1, #0
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fb9a 	bl	8008820 <HAL_ETH_WritePHYRegister>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d00b      	beq.n	800810a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80080f6:	6939      	ldr	r1, [r7, #16]
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 fc27 	bl	800894c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e0d9      	b.n	80082be <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800810a:	20ff      	movs	r0, #255	; 0xff
 800810c:	f7ff fe36 	bl	8007d7c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	2b00      	cmp	r3, #0
 8008116:	f000 80a7 	beq.w	8008268 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800811a:	f7ff fe23 	bl	8007d64 <HAL_GetTick>
 800811e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8008120:	f107 030c 	add.w	r3, r7, #12
 8008124:	461a      	mov	r2, r3
 8008126:	2101      	movs	r1, #1
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fb11 	bl	8008750 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800812e:	f7ff fe19 	bl	8007d64 <HAL_GetTick>
 8008132:	4602      	mov	r2, r0
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	1ad3      	subs	r3, r2, r3
 8008138:	f241 3288 	movw	r2, #5000	; 0x1388
 800813c:	4293      	cmp	r3, r2
 800813e:	d90f      	bls.n	8008160 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8008144:	6939      	ldr	r1, [r7, #16]
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fc00 	bl	800894c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800815c:	2303      	movs	r3, #3
 800815e:	e0ae      	b.n	80082be <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f003 0304 	and.w	r3, r3, #4
 8008166:	2b00      	cmp	r3, #0
 8008168:	d0da      	beq.n	8008120 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800816a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800816e:	2100      	movs	r1, #0
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fb55 	bl	8008820 <HAL_ETH_WritePHYRegister>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00b      	beq.n	8008194 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8008180:	6939      	ldr	r1, [r7, #16]
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 fbe2 	bl	800894c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8008190:	2301      	movs	r3, #1
 8008192:	e094      	b.n	80082be <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8008194:	f7ff fde6 	bl	8007d64 <HAL_GetTick>
 8008198:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800819a:	f107 030c 	add.w	r3, r7, #12
 800819e:	461a      	mov	r2, r3
 80081a0:	2101      	movs	r1, #1
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fad4 	bl	8008750 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80081a8:	f7ff fddc 	bl	8007d64 <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d90f      	bls.n	80081da <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80081be:	6939      	ldr	r1, [r7, #16]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 fbc3 	bl	800894c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2201      	movs	r2, #1
 80081ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80081d6:	2303      	movs	r3, #3
 80081d8:	e071      	b.n	80082be <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f003 0320 	and.w	r3, r3, #32
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d0da      	beq.n	800819a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80081e4:	f107 030c 	add.w	r3, r7, #12
 80081e8:	461a      	mov	r2, r3
 80081ea:	211f      	movs	r1, #31
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 faaf 	bl	8008750 <HAL_ETH_ReadPHYRegister>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00b      	beq.n	8008210 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80081fc:	6939      	ldr	r1, [r7, #16]
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 fba4 	bl	800894c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800820c:	2301      	movs	r3, #1
 800820e:	e056      	b.n	80082be <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f003 0310 	and.w	r3, r3, #16
 8008216:	2b00      	cmp	r3, #0
 8008218:	d004      	beq.n	8008224 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008220:	60da      	str	r2, [r3, #12]
 8008222:	e002      	b.n	800822a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f003 0304 	and.w	r3, r3, #4
 8008230:	2b00      	cmp	r3, #0
 8008232:	d003      	beq.n	800823c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	609a      	str	r2, [r3, #8]
 800823a:	e037      	b.n	80082ac <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008242:	609a      	str	r2, [r3, #8]
 8008244:	e032      	b.n	80082ac <HAL_ETH_Init+0x320>
 8008246:	bf00      	nop
 8008248:	03938700 	.word	0x03938700
 800824c:	40023800 	.word	0x40023800
 8008250:	40013800 	.word	0x40013800
 8008254:	01312cff 	.word	0x01312cff
 8008258:	02160ebf 	.word	0x02160ebf
 800825c:	039386ff 	.word	0x039386ff
 8008260:	05f5e0ff 	.word	0x05f5e0ff
 8008264:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	08db      	lsrs	r3, r3, #3
 800826e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	085b      	lsrs	r3, r3, #1
 8008276:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8008278:	4313      	orrs	r3, r2
 800827a:	b29b      	uxth	r3, r3
 800827c:	461a      	mov	r2, r3
 800827e:	2100      	movs	r1, #0
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 facd 	bl	8008820 <HAL_ETH_WritePHYRegister>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00b      	beq.n	80082a4 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8008290:	6939      	ldr	r1, [r7, #16]
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 fb5a 	bl	800894c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	e00c      	b.n	80082be <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80082a4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80082a8:	f7ff fd68 	bl	8007d7c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80082ac:	6939      	ldr	r1, [r7, #16]
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 fb4c 	bl	800894c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2201      	movs	r2, #1
 80082b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3720      	adds	r7, #32
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop

080082c8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b087      	sub	sp, #28
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
 80082d4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80082d6:	2300      	movs	r3, #0
 80082d8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d101      	bne.n	80082e8 <HAL_ETH_DMATxDescListInit+0x20>
 80082e4:	2302      	movs	r3, #2
 80082e6:	e052      	b.n	800838e <HAL_ETH_DMATxDescListInit+0xc6>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2202      	movs	r2, #2
 80082f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80082fe:	2300      	movs	r3, #0
 8008300:	617b      	str	r3, [r7, #20]
 8008302:	e030      	b.n	8008366 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	015b      	lsls	r3, r3, #5
 8008308:	68ba      	ldr	r2, [r7, #8]
 800830a:	4413      	add	r3, r2
 800830c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008314:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800831c:	fb02 f303 	mul.w	r3, r2, r3
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	4413      	add	r3, r2
 8008324:	461a      	mov	r2, r3
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	69db      	ldr	r3, [r3, #28]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d105      	bne.n	800833e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	3b01      	subs	r3, #1
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	429a      	cmp	r2, r3
 8008346:	d208      	bcs.n	800835a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	3301      	adds	r3, #1
 800834c:	015b      	lsls	r3, r3, #5
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	4413      	add	r3, r2
 8008352:	461a      	mov	r2, r3
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	60da      	str	r2, [r3, #12]
 8008358:	e002      	b.n	8008360 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	3301      	adds	r3, #1
 8008364:	617b      	str	r3, [r7, #20]
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	429a      	cmp	r2, r3
 800836c:	d3ca      	bcc.n	8008304 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68ba      	ldr	r2, [r7, #8]
 8008374:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008378:	3310      	adds	r3, #16
 800837a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2200      	movs	r2, #0
 8008388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	371c      	adds	r7, #28
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr

0800839a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800839a:	b480      	push	{r7}
 800839c:	b087      	sub	sp, #28
 800839e:	af00      	add	r7, sp, #0
 80083a0:	60f8      	str	r0, [r7, #12]
 80083a2:	60b9      	str	r1, [r7, #8]
 80083a4:	607a      	str	r2, [r7, #4]
 80083a6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80083a8:	2300      	movs	r3, #0
 80083aa:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d101      	bne.n	80083ba <HAL_ETH_DMARxDescListInit+0x20>
 80083b6:	2302      	movs	r3, #2
 80083b8:	e056      	b.n	8008468 <HAL_ETH_DMARxDescListInit+0xce>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2201      	movs	r2, #1
 80083be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2202      	movs	r2, #2
 80083c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	68ba      	ldr	r2, [r7, #8]
 80083ce:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80083d0:	2300      	movs	r3, #0
 80083d2:	617b      	str	r3, [r7, #20]
 80083d4:	e034      	b.n	8008440 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	015b      	lsls	r3, r3, #5
 80083da:	68ba      	ldr	r2, [r7, #8]
 80083dc:	4413      	add	r3, r2
 80083de:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80083e6:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80083ee:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80083f6:	fb02 f303 	mul.w	r3, r2, r3
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	4413      	add	r3, r2
 80083fe:	461a      	mov	r2, r3
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d105      	bne.n	8008418 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	3b01      	subs	r3, #1
 800841c:	697a      	ldr	r2, [r7, #20]
 800841e:	429a      	cmp	r2, r3
 8008420:	d208      	bcs.n	8008434 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	3301      	adds	r3, #1
 8008426:	015b      	lsls	r3, r3, #5
 8008428:	68ba      	ldr	r2, [r7, #8]
 800842a:	4413      	add	r3, r2
 800842c:	461a      	mov	r2, r3
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	60da      	str	r2, [r3, #12]
 8008432:	e002      	b.n	800843a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	3301      	adds	r3, #1
 800843e:	617b      	str	r3, [r7, #20]
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	429a      	cmp	r2, r3
 8008446:	d3c6      	bcc.n	80083d6 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68ba      	ldr	r2, [r7, #8]
 800844e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008452:	330c      	adds	r3, #12
 8008454:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	371c      	adds	r7, #28
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8008474:	b480      	push	{r7}
 8008476:	b087      	sub	sp, #28
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800847e:	2300      	movs	r3, #0
 8008480:	617b      	str	r3, [r7, #20]
 8008482:	2300      	movs	r3, #0
 8008484:	60fb      	str	r3, [r7, #12]
 8008486:	2300      	movs	r3, #0
 8008488:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008490:	2b01      	cmp	r3, #1
 8008492:	d101      	bne.n	8008498 <HAL_ETH_TransmitFrame+0x24>
 8008494:	2302      	movs	r3, #2
 8008496:	e0cd      	b.n	8008634 <HAL_ETH_TransmitFrame+0x1c0>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2202      	movs	r2, #2
 80084a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d109      	bne.n	80084c2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2201      	movs	r2, #1
 80084b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80084be:	2301      	movs	r3, #1
 80084c0:	e0b8      	b.n	8008634 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	da09      	bge.n	80084e0 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2212      	movs	r2, #18
 80084d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e0a9      	b.n	8008634 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d915      	bls.n	8008516 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	4a54      	ldr	r2, [pc, #336]	; (8008640 <HAL_ETH_TransmitFrame+0x1cc>)
 80084ee:	fba2 2303 	umull	r2, r3, r2, r3
 80084f2:	0a9b      	lsrs	r3, r3, #10
 80084f4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80084f6:	683a      	ldr	r2, [r7, #0]
 80084f8:	4b51      	ldr	r3, [pc, #324]	; (8008640 <HAL_ETH_TransmitFrame+0x1cc>)
 80084fa:	fba3 1302 	umull	r1, r3, r3, r2
 80084fe:	0a9b      	lsrs	r3, r3, #10
 8008500:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8008504:	fb01 f303 	mul.w	r3, r1, r3
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	2b00      	cmp	r3, #0
 800850c:	d005      	beq.n	800851a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	3301      	adds	r3, #1
 8008512:	617b      	str	r3, [r7, #20]
 8008514:	e001      	b.n	800851a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8008516:	2301      	movs	r3, #1
 8008518:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	2b01      	cmp	r3, #1
 800851e:	d11c      	bne.n	800855a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800852e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008534:	683a      	ldr	r2, [r7, #0]
 8008536:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800853a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008546:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800854a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	461a      	mov	r2, r3
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	62da      	str	r2, [r3, #44]	; 0x2c
 8008558:	e04b      	b.n	80085f2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800855a:	2300      	movs	r3, #0
 800855c:	613b      	str	r3, [r7, #16]
 800855e:	e044      	b.n	80085ea <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800856e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d107      	bne.n	8008586 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008580:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008584:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800858e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	3b01      	subs	r3, #1
 8008594:	693a      	ldr	r2, [r7, #16]
 8008596:	429a      	cmp	r2, r3
 8008598:	d116      	bne.n	80085c8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80085a8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	4a25      	ldr	r2, [pc, #148]	; (8008644 <HAL_ETH_TransmitFrame+0x1d0>)
 80085ae:	fb02 f203 	mul.w	r2, r2, r3
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	4413      	add	r3, r2
 80085b6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80085ba:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c0:	68fa      	ldr	r2, [r7, #12]
 80085c2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80085c6:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80085d6:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	461a      	mov	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80085e4:	693b      	ldr	r3, [r7, #16]
 80085e6:	3301      	adds	r3, #1
 80085e8:	613b      	str	r3, [r7, #16]
 80085ea:	693a      	ldr	r2, [r7, #16]
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d3b6      	bcc.n	8008560 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085fa:	3314      	adds	r3, #20
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 0304 	and.w	r3, r3, #4
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00d      	beq.n	8008622 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800860e:	3314      	adds	r3, #20
 8008610:	2204      	movs	r2, #4
 8008612:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800861c:	3304      	adds	r3, #4
 800861e:	2200      	movs	r2, #0
 8008620:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2201      	movs	r2, #1
 8008626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	371c      	adds	r7, #28
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	ac02b00b 	.word	0xac02b00b
 8008644:	fffffa0c 	.word	0xfffffa0c

08008648 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8008648:	b480      	push	{r7}
 800864a:	b085      	sub	sp, #20
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8008650:	2300      	movs	r3, #0
 8008652:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800865a:	2b01      	cmp	r3, #1
 800865c:	d101      	bne.n	8008662 <HAL_ETH_GetReceivedFrame+0x1a>
 800865e:	2302      	movs	r3, #2
 8008660:	e070      	b.n	8008744 <HAL_ETH_GetReceivedFrame+0xfc>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2202      	movs	r2, #2
 800866e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	db5a      	blt.n	8008732 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008686:	2b00      	cmp	r3, #0
 8008688:	d030      	beq.n	80086ec <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800868e:	1c5a      	adds	r2, r3, #1
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008698:	2b01      	cmp	r3, #1
 800869a:	d103      	bne.n	80086a4 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	0c1b      	lsrs	r3, r3, #16
 80086b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80086b8:	3b04      	subs	r3, #4
 80086ba:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c6:	689a      	ldr	r2, [r3, #8]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	461a      	mov	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80086e8:	2300      	movs	r3, #0
 80086ea:	e02b      	b.n	8008744 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d010      	beq.n	800871c <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	461a      	mov	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	629a      	str	r2, [r3, #40]	; 0x28
 800871a:	e00a      	b.n	8008732 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008720:	1c5a      	adds	r2, r3, #1
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	461a      	mov	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
}
 8008744:	4618      	mov	r0, r3
 8008746:	3714      	adds	r7, #20
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b086      	sub	sp, #24
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	460b      	mov	r3, r1
 800875a:	607a      	str	r2, [r7, #4]
 800875c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800875e:	2300      	movs	r3, #0
 8008760:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8008762:	2300      	movs	r3, #0
 8008764:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800876c:	b2db      	uxtb	r3, r3
 800876e:	2b82      	cmp	r3, #130	; 0x82
 8008770:	d101      	bne.n	8008776 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8008772:	2302      	movs	r3, #2
 8008774:	e050      	b.n	8008818 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2282      	movs	r2, #130	; 0x82
 800877a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	691b      	ldr	r3, [r3, #16]
 8008784:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	f003 031c 	and.w	r3, r3, #28
 800878c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	8a1b      	ldrh	r3, [r3, #16]
 8008792:	02db      	lsls	r3, r3, #11
 8008794:	b29b      	uxth	r3, r3
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	4313      	orrs	r3, r2
 800879a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800879c:	897b      	ldrh	r3, [r7, #10]
 800879e:	019b      	lsls	r3, r3, #6
 80087a0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80087a4:	697a      	ldr	r2, [r7, #20]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	f023 0302 	bic.w	r3, r3, #2
 80087b0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	f043 0301 	orr.w	r3, r3, #1
 80087b8:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80087c2:	f7ff facf 	bl	8007d64 <HAL_GetTick>
 80087c6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80087c8:	e015      	b.n	80087f6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80087ca:	f7ff facb 	bl	8007d64 <HAL_GetTick>
 80087ce:	4602      	mov	r2, r0
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087d8:	d309      	bcc.n	80087ee <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2201      	movs	r2, #1
 80087de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e014      	b.n	8008818 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	f003 0301 	and.w	r3, r3, #1
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d1e4      	bne.n	80087ca <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	695b      	ldr	r3, [r3, #20]
 8008806:	b29b      	uxth	r3, r3
 8008808:	461a      	mov	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2201      	movs	r2, #1
 8008812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	3718      	adds	r7, #24
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	460b      	mov	r3, r1
 800882a:	607a      	str	r2, [r7, #4]
 800882c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800882e:	2300      	movs	r3, #0
 8008830:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8008832:	2300      	movs	r3, #0
 8008834:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800883c:	b2db      	uxtb	r3, r3
 800883e:	2b42      	cmp	r3, #66	; 0x42
 8008840:	d101      	bne.n	8008846 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8008842:	2302      	movs	r3, #2
 8008844:	e04e      	b.n	80088e4 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2242      	movs	r2, #66	; 0x42
 800884a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	691b      	ldr	r3, [r3, #16]
 8008854:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	f003 031c 	and.w	r3, r3, #28
 800885c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	8a1b      	ldrh	r3, [r3, #16]
 8008862:	02db      	lsls	r3, r3, #11
 8008864:	b29b      	uxth	r3, r3
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	4313      	orrs	r3, r2
 800886a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800886c:	897b      	ldrh	r3, [r7, #10]
 800886e:	019b      	lsls	r3, r3, #6
 8008870:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8008874:	697a      	ldr	r2, [r7, #20]
 8008876:	4313      	orrs	r3, r2
 8008878:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	f043 0302 	orr.w	r3, r3, #2
 8008880:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	f043 0301 	orr.w	r3, r3, #1
 8008888:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	b29a      	uxth	r2, r3
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	697a      	ldr	r2, [r7, #20]
 800889a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800889c:	f7ff fa62 	bl	8007d64 <HAL_GetTick>
 80088a0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80088a2:	e015      	b.n	80088d0 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80088a4:	f7ff fa5e 	bl	8007d64 <HAL_GetTick>
 80088a8:	4602      	mov	r2, r0
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088b2:	d309      	bcc.n	80088c8 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e00d      	b.n	80088e4 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	f003 0301 	and.w	r3, r3, #1
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d1e4      	bne.n	80088a4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2201      	movs	r2, #1
 80088de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3718      	adds	r7, #24
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d101      	bne.n	8008902 <HAL_ETH_Start+0x16>
 80088fe:	2302      	movs	r3, #2
 8008900:	e01f      	b.n	8008942 <HAL_ETH_Start+0x56>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2202      	movs	r2, #2
 800890e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fa1c 	bl	8008d50 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 fa36 	bl	8008d8a <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 fa80 	bl	8008e24 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 fa4d 	bl	8008dc4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fa62 	bl	8008df4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8008940:	2300      	movs	r3, #0
}
 8008942:	4618      	mov	r0, r3
 8008944:	3708      	adds	r7, #8
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
	...

0800894c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b0b0      	sub	sp, #192	; 0xc0
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8008956:	2300      	movs	r3, #0
 8008958:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d007      	beq.n	8008972 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008968:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008970:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8008972:	2300      	movs	r3, #0
 8008974:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8008976:	2300      	movs	r3, #0
 8008978:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800897a:	2300      	movs	r3, #0
 800897c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800897e:	2300      	movs	r3, #0
 8008980:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8008982:	2300      	movs	r3, #0
 8008984:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8008986:	2300      	movs	r3, #0
 8008988:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	69db      	ldr	r3, [r3, #28]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d103      	bne.n	800899a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8008992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008996:	663b      	str	r3, [r7, #96]	; 0x60
 8008998:	e001      	b.n	800899e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800899a:	2300      	movs	r3, #0
 800899c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800899e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089a2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80089a4:	2300      	movs	r3, #0
 80089a6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80089a8:	2300      	movs	r3, #0
 80089aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80089ac:	2300      	movs	r3, #0
 80089ae:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80089b0:	2300      	movs	r3, #0
 80089b2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80089b4:	2300      	movs	r3, #0
 80089b6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80089b8:	2340      	movs	r3, #64	; 0x40
 80089ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80089bc:	2300      	movs	r3, #0
 80089be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80089c2:	2300      	movs	r3, #0
 80089c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80089c8:	2300      	movs	r3, #0
 80089ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80089ce:	2300      	movs	r3, #0
 80089d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80089d4:	2300      	movs	r3, #0
 80089d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80089da:	2300      	movs	r3, #0
 80089dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80089e0:	2300      	movs	r3, #0
 80089e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80089e6:	2300      	movs	r3, #0
 80089e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80089ec:	2380      	movs	r3, #128	; 0x80
 80089ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80089f2:	2300      	movs	r3, #0
 80089f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80089f8:	2300      	movs	r3, #0
 80089fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80089fe:	2300      	movs	r3, #0
 8008a00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8008a04:	2300      	movs	r3, #0
 8008a06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8008a10:	2300      	movs	r3, #0
 8008a12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8008a20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008a24:	4bac      	ldr	r3, [pc, #688]	; (8008cd8 <ETH_MACDMAConfig+0x38c>)
 8008a26:	4013      	ands	r3, r2
 8008a28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8008a2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8008a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8008a30:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8008a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8008a34:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8008a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8008a38:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8008a3e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8008a40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8008a42:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8008a44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8008a46:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8008a4c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8008a4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8008a50:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8008a52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8008a54:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8008a56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8008a58:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8008a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8008a5c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8008a5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8008a60:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8008a62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008a66:	4313      	orrs	r3, r2
 8008a68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008a74:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008a80:	2001      	movs	r0, #1
 8008a82:	f7ff f97b 	bl	8007d7c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008a8e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8008a90:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8008a92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8008a94:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8008a96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8008a98:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8008a9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8008a9e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8008aa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8008aa4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8008aa6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8008aaa:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8008aac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8008ab0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8008ab4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8008abc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8008abe:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8008aca:	2001      	movs	r0, #1
 8008acc:	f7ff f956 	bl	8007d7c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008ad8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008ae2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008aec:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	699b      	ldr	r3, [r3, #24]
 8008af4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8008af8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008afc:	f64f 7341 	movw	r3, #65345	; 0xff41
 8008b00:	4013      	ands	r3, r2
 8008b02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8008b06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008b0a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8008b0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8008b10:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8008b12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8008b16:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8008b18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8008b1c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8008b1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8008b22:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8008b24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8008b28:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8008b2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008b3c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	699b      	ldr	r3, [r3, #24]
 8008b44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8008b48:	2001      	movs	r0, #1
 8008b4a:	f7ff f917 	bl	8007d7c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008b56:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8008b58:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8008b5c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	430a      	orrs	r2, r1
 8008b66:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	69db      	ldr	r3, [r3, #28]
 8008b6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008b72:	2001      	movs	r0, #1
 8008b74:	f7ff f902 	bl	8007d7c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008b80:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8008b82:	2300      	movs	r3, #0
 8008b84:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8008b86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b8a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8008b90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008b94:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8008b96:	2300      	movs	r3, #0
 8008b98:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8008ba6:	2304      	movs	r3, #4
 8008ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8008baa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8008bb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008bb4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8008bb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008bba:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008bbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008bc0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8008bc2:	2380      	movs	r3, #128	; 0x80
 8008bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bd6:	3318      	adds	r3, #24
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8008bde:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008be2:	4b3e      	ldr	r3, [pc, #248]	; (8008cdc <ETH_MACDMAConfig+0x390>)
 8008be4:	4013      	ands	r3, r2
 8008be6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8008bea:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8008bec:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8008bee:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8008bf0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8008bf2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8008bf4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8008bf6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8008bf8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8008bfa:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8008bfc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8008bfe:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8008c00:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8008c02:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8008c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8008c06:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8008c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8008c0a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8008c0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008c10:	4313      	orrs	r3, r2
 8008c12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c1e:	3318      	adds	r3, #24
 8008c20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008c24:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c2e:	3318      	adds	r3, #24
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008c36:	2001      	movs	r0, #1
 8008c38:	f7ff f8a0 	bl	8007d7c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c44:	3318      	adds	r3, #24
 8008c46:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008c4a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8008c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8008c50:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8008c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8008c54:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8008c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8008c58:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8008c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8008c5c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8008c5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c60:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8008c62:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8008c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8008c66:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c74:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8008c84:	2001      	movs	r0, #1
 8008c86:	f7ff f879 	bl	8007d7c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c92:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008c96:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d10f      	bne.n	8008cc0 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ca8:	331c      	adds	r3, #28
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008cb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cbc:	331c      	adds	r3, #28
 8008cbe:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	695b      	ldr	r3, [r3, #20]
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 f809 	bl	8008ce0 <ETH_MACAddressConfig>
}
 8008cce:	bf00      	nop
 8008cd0:	37c0      	adds	r7, #192	; 0xc0
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	ff20810f 	.word	0xff20810f
 8008cdc:	f8de3f23 	.word	0xf8de3f23

08008ce0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b087      	sub	sp, #28
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	3305      	adds	r3, #5
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	021b      	lsls	r3, r3, #8
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	3204      	adds	r2, #4
 8008cf8:	7812      	ldrb	r2, [r2, #0]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	4b11      	ldr	r3, [pc, #68]	; (8008d48 <ETH_MACAddressConfig+0x68>)
 8008d02:	4413      	add	r3, r2
 8008d04:	461a      	mov	r2, r3
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	3303      	adds	r3, #3
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	061a      	lsls	r2, r3, #24
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	3302      	adds	r3, #2
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	041b      	lsls	r3, r3, #16
 8008d1a:	431a      	orrs	r2, r3
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	021b      	lsls	r3, r3, #8
 8008d24:	4313      	orrs	r3, r2
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	7812      	ldrb	r2, [r2, #0]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	4b06      	ldr	r3, [pc, #24]	; (8008d4c <ETH_MACAddressConfig+0x6c>)
 8008d32:	4413      	add	r3, r2
 8008d34:	461a      	mov	r2, r3
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	6013      	str	r3, [r2, #0]
}
 8008d3a:	bf00      	nop
 8008d3c:	371c      	adds	r7, #28
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr
 8008d46:	bf00      	nop
 8008d48:	40028040 	.word	0x40028040
 8008d4c:	40028044 	.word	0x40028044

08008d50 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f042 0208 	orr.w	r2, r2, #8
 8008d6a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8008d74:	2001      	movs	r0, #1
 8008d76:	f000 f87f 	bl	8008e78 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	601a      	str	r2, [r3, #0]
}
 8008d82:	bf00      	nop
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b084      	sub	sp, #16
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8008d92:	2300      	movs	r3, #0
 8008d94:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f042 0204 	orr.w	r2, r2, #4
 8008da4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8008dae:	2001      	movs	r0, #1
 8008db0:	f000 f862 	bl	8008e78 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	601a      	str	r2, [r3, #0]
}
 8008dbc:	bf00      	nop
 8008dbe:	3710      	adds	r7, #16
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dd4:	3318      	adds	r3, #24
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008de0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008de4:	3318      	adds	r3, #24
 8008de6:	601a      	str	r2, [r3, #0]
}
 8008de8:	bf00      	nop
 8008dea:	370c      	adds	r7, #12
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e04:	3318      	adds	r3, #24
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f042 0202 	orr.w	r2, r2, #2
 8008e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e14:	3318      	adds	r3, #24
 8008e16:	601a      	str	r2, [r3, #0]
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e38:	3318      	adds	r3, #24
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e48:	3318      	adds	r3, #24
 8008e4a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e54:	3318      	adds	r3, #24
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8008e5a:	2001      	movs	r0, #1
 8008e5c:	f000 f80c 	bl	8008e78 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e6a:	3318      	adds	r3, #24
 8008e6c:	601a      	str	r2, [r3, #0]
}
 8008e6e:	bf00      	nop
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
	...

08008e78 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008e80:	4b0a      	ldr	r3, [pc, #40]	; (8008eac <ETH_Delay+0x34>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a0a      	ldr	r2, [pc, #40]	; (8008eb0 <ETH_Delay+0x38>)
 8008e86:	fba2 2303 	umull	r2, r3, r2, r3
 8008e8a:	0a5b      	lsrs	r3, r3, #9
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	fb02 f303 	mul.w	r3, r2, r3
 8008e92:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8008e94:	bf00      	nop
  } 
  while (Delay --);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	1e5a      	subs	r2, r3, #1
 8008e9a:	60fa      	str	r2, [r7, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1f9      	bne.n	8008e94 <ETH_Delay+0x1c>
}
 8008ea0:	bf00      	nop
 8008ea2:	3714      	adds	r7, #20
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	20000004 	.word	0x20000004
 8008eb0:	10624dd3 	.word	0x10624dd3

08008eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b089      	sub	sp, #36	; 0x24
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008eca:	2300      	movs	r3, #0
 8008ecc:	61fb      	str	r3, [r7, #28]
 8008ece:	e16b      	b.n	80091a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	f040 815a 	bne.w	80091a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d00b      	beq.n	8008f0e <HAL_GPIO_Init+0x5a>
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d007      	beq.n	8008f0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008f02:	2b11      	cmp	r3, #17
 8008f04:	d003      	beq.n	8008f0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	2b12      	cmp	r3, #18
 8008f0c:	d130      	bne.n	8008f70 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	005b      	lsls	r3, r3, #1
 8008f18:	2203      	movs	r2, #3
 8008f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f1e:	43db      	mvns	r3, r3
 8008f20:	69ba      	ldr	r2, [r7, #24]
 8008f22:	4013      	ands	r3, r2
 8008f24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	68da      	ldr	r2, [r3, #12]
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	005b      	lsls	r3, r3, #1
 8008f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f32:	69ba      	ldr	r2, [r7, #24]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	69ba      	ldr	r2, [r7, #24]
 8008f3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008f44:	2201      	movs	r2, #1
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4c:	43db      	mvns	r3, r3
 8008f4e:	69ba      	ldr	r2, [r7, #24]
 8008f50:	4013      	ands	r3, r2
 8008f52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	091b      	lsrs	r3, r3, #4
 8008f5a:	f003 0201 	and.w	r2, r3, #1
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	fa02 f303 	lsl.w	r3, r2, r3
 8008f64:	69ba      	ldr	r2, [r7, #24]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	69ba      	ldr	r2, [r7, #24]
 8008f6e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	005b      	lsls	r3, r3, #1
 8008f7a:	2203      	movs	r2, #3
 8008f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f80:	43db      	mvns	r3, r3
 8008f82:	69ba      	ldr	r2, [r7, #24]
 8008f84:	4013      	ands	r3, r2
 8008f86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	689a      	ldr	r2, [r3, #8]
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	005b      	lsls	r3, r3, #1
 8008f90:	fa02 f303 	lsl.w	r3, r2, r3
 8008f94:	69ba      	ldr	r2, [r7, #24]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	69ba      	ldr	r2, [r7, #24]
 8008f9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	2b02      	cmp	r3, #2
 8008fa6:	d003      	beq.n	8008fb0 <HAL_GPIO_Init+0xfc>
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	2b12      	cmp	r3, #18
 8008fae:	d123      	bne.n	8008ff8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	08da      	lsrs	r2, r3, #3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	3208      	adds	r2, #8
 8008fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	f003 0307 	and.w	r3, r3, #7
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	220f      	movs	r2, #15
 8008fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fcc:	43db      	mvns	r3, r3
 8008fce:	69ba      	ldr	r2, [r7, #24]
 8008fd0:	4013      	ands	r3, r2
 8008fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	691a      	ldr	r2, [r3, #16]
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	f003 0307 	and.w	r3, r3, #7
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fe4:	69ba      	ldr	r2, [r7, #24]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	08da      	lsrs	r2, r3, #3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	3208      	adds	r2, #8
 8008ff2:	69b9      	ldr	r1, [r7, #24]
 8008ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	005b      	lsls	r3, r3, #1
 8009002:	2203      	movs	r2, #3
 8009004:	fa02 f303 	lsl.w	r3, r2, r3
 8009008:	43db      	mvns	r3, r3
 800900a:	69ba      	ldr	r2, [r7, #24]
 800900c:	4013      	ands	r3, r2
 800900e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	f003 0203 	and.w	r2, r3, #3
 8009018:	69fb      	ldr	r3, [r7, #28]
 800901a:	005b      	lsls	r3, r3, #1
 800901c:	fa02 f303 	lsl.w	r3, r2, r3
 8009020:	69ba      	ldr	r2, [r7, #24]
 8009022:	4313      	orrs	r3, r2
 8009024:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	69ba      	ldr	r2, [r7, #24]
 800902a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009034:	2b00      	cmp	r3, #0
 8009036:	f000 80b4 	beq.w	80091a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800903a:	2300      	movs	r3, #0
 800903c:	60fb      	str	r3, [r7, #12]
 800903e:	4b5f      	ldr	r3, [pc, #380]	; (80091bc <HAL_GPIO_Init+0x308>)
 8009040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009042:	4a5e      	ldr	r2, [pc, #376]	; (80091bc <HAL_GPIO_Init+0x308>)
 8009044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009048:	6453      	str	r3, [r2, #68]	; 0x44
 800904a:	4b5c      	ldr	r3, [pc, #368]	; (80091bc <HAL_GPIO_Init+0x308>)
 800904c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800904e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009052:	60fb      	str	r3, [r7, #12]
 8009054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009056:	4a5a      	ldr	r2, [pc, #360]	; (80091c0 <HAL_GPIO_Init+0x30c>)
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	089b      	lsrs	r3, r3, #2
 800905c:	3302      	adds	r3, #2
 800905e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009062:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	f003 0303 	and.w	r3, r3, #3
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	220f      	movs	r2, #15
 800906e:	fa02 f303 	lsl.w	r3, r2, r3
 8009072:	43db      	mvns	r3, r3
 8009074:	69ba      	ldr	r2, [r7, #24]
 8009076:	4013      	ands	r3, r2
 8009078:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a51      	ldr	r2, [pc, #324]	; (80091c4 <HAL_GPIO_Init+0x310>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d02b      	beq.n	80090da <HAL_GPIO_Init+0x226>
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a50      	ldr	r2, [pc, #320]	; (80091c8 <HAL_GPIO_Init+0x314>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d025      	beq.n	80090d6 <HAL_GPIO_Init+0x222>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4a4f      	ldr	r2, [pc, #316]	; (80091cc <HAL_GPIO_Init+0x318>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d01f      	beq.n	80090d2 <HAL_GPIO_Init+0x21e>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a4e      	ldr	r2, [pc, #312]	; (80091d0 <HAL_GPIO_Init+0x31c>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d019      	beq.n	80090ce <HAL_GPIO_Init+0x21a>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a4d      	ldr	r2, [pc, #308]	; (80091d4 <HAL_GPIO_Init+0x320>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d013      	beq.n	80090ca <HAL_GPIO_Init+0x216>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a4c      	ldr	r2, [pc, #304]	; (80091d8 <HAL_GPIO_Init+0x324>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d00d      	beq.n	80090c6 <HAL_GPIO_Init+0x212>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a4b      	ldr	r2, [pc, #300]	; (80091dc <HAL_GPIO_Init+0x328>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d007      	beq.n	80090c2 <HAL_GPIO_Init+0x20e>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a4a      	ldr	r2, [pc, #296]	; (80091e0 <HAL_GPIO_Init+0x32c>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d101      	bne.n	80090be <HAL_GPIO_Init+0x20a>
 80090ba:	2307      	movs	r3, #7
 80090bc:	e00e      	b.n	80090dc <HAL_GPIO_Init+0x228>
 80090be:	2308      	movs	r3, #8
 80090c0:	e00c      	b.n	80090dc <HAL_GPIO_Init+0x228>
 80090c2:	2306      	movs	r3, #6
 80090c4:	e00a      	b.n	80090dc <HAL_GPIO_Init+0x228>
 80090c6:	2305      	movs	r3, #5
 80090c8:	e008      	b.n	80090dc <HAL_GPIO_Init+0x228>
 80090ca:	2304      	movs	r3, #4
 80090cc:	e006      	b.n	80090dc <HAL_GPIO_Init+0x228>
 80090ce:	2303      	movs	r3, #3
 80090d0:	e004      	b.n	80090dc <HAL_GPIO_Init+0x228>
 80090d2:	2302      	movs	r3, #2
 80090d4:	e002      	b.n	80090dc <HAL_GPIO_Init+0x228>
 80090d6:	2301      	movs	r3, #1
 80090d8:	e000      	b.n	80090dc <HAL_GPIO_Init+0x228>
 80090da:	2300      	movs	r3, #0
 80090dc:	69fa      	ldr	r2, [r7, #28]
 80090de:	f002 0203 	and.w	r2, r2, #3
 80090e2:	0092      	lsls	r2, r2, #2
 80090e4:	4093      	lsls	r3, r2
 80090e6:	69ba      	ldr	r2, [r7, #24]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80090ec:	4934      	ldr	r1, [pc, #208]	; (80091c0 <HAL_GPIO_Init+0x30c>)
 80090ee:	69fb      	ldr	r3, [r7, #28]
 80090f0:	089b      	lsrs	r3, r3, #2
 80090f2:	3302      	adds	r3, #2
 80090f4:	69ba      	ldr	r2, [r7, #24]
 80090f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80090fa:	4b3a      	ldr	r3, [pc, #232]	; (80091e4 <HAL_GPIO_Init+0x330>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	43db      	mvns	r3, r3
 8009104:	69ba      	ldr	r2, [r7, #24]
 8009106:	4013      	ands	r3, r2
 8009108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009112:	2b00      	cmp	r3, #0
 8009114:	d003      	beq.n	800911e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8009116:	69ba      	ldr	r2, [r7, #24]
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	4313      	orrs	r3, r2
 800911c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800911e:	4a31      	ldr	r2, [pc, #196]	; (80091e4 <HAL_GPIO_Init+0x330>)
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009124:	4b2f      	ldr	r3, [pc, #188]	; (80091e4 <HAL_GPIO_Init+0x330>)
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	43db      	mvns	r3, r3
 800912e:	69ba      	ldr	r2, [r7, #24]
 8009130:	4013      	ands	r3, r2
 8009132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800913c:	2b00      	cmp	r3, #0
 800913e:	d003      	beq.n	8009148 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009140:	69ba      	ldr	r2, [r7, #24]
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	4313      	orrs	r3, r2
 8009146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009148:	4a26      	ldr	r2, [pc, #152]	; (80091e4 <HAL_GPIO_Init+0x330>)
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800914e:	4b25      	ldr	r3, [pc, #148]	; (80091e4 <HAL_GPIO_Init+0x330>)
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	43db      	mvns	r3, r3
 8009158:	69ba      	ldr	r2, [r7, #24]
 800915a:	4013      	ands	r3, r2
 800915c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009166:	2b00      	cmp	r3, #0
 8009168:	d003      	beq.n	8009172 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800916a:	69ba      	ldr	r2, [r7, #24]
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	4313      	orrs	r3, r2
 8009170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009172:	4a1c      	ldr	r2, [pc, #112]	; (80091e4 <HAL_GPIO_Init+0x330>)
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009178:	4b1a      	ldr	r3, [pc, #104]	; (80091e4 <HAL_GPIO_Init+0x330>)
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	43db      	mvns	r3, r3
 8009182:	69ba      	ldr	r2, [r7, #24]
 8009184:	4013      	ands	r3, r2
 8009186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009190:	2b00      	cmp	r3, #0
 8009192:	d003      	beq.n	800919c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009194:	69ba      	ldr	r2, [r7, #24]
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	4313      	orrs	r3, r2
 800919a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800919c:	4a11      	ldr	r2, [pc, #68]	; (80091e4 <HAL_GPIO_Init+0x330>)
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	3301      	adds	r3, #1
 80091a6:	61fb      	str	r3, [r7, #28]
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	2b0f      	cmp	r3, #15
 80091ac:	f67f ae90 	bls.w	8008ed0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80091b0:	bf00      	nop
 80091b2:	3724      	adds	r7, #36	; 0x24
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	40023800 	.word	0x40023800
 80091c0:	40013800 	.word	0x40013800
 80091c4:	40020000 	.word	0x40020000
 80091c8:	40020400 	.word	0x40020400
 80091cc:	40020800 	.word	0x40020800
 80091d0:	40020c00 	.word	0x40020c00
 80091d4:	40021000 	.word	0x40021000
 80091d8:	40021400 	.word	0x40021400
 80091dc:	40021800 	.word	0x40021800
 80091e0:	40021c00 	.word	0x40021c00
 80091e4:	40013c00 	.word	0x40013c00

080091e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b086      	sub	sp, #24
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d101      	bne.n	80091fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e25b      	b.n	80096b2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f003 0301 	and.w	r3, r3, #1
 8009202:	2b00      	cmp	r3, #0
 8009204:	d075      	beq.n	80092f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009206:	4ba3      	ldr	r3, [pc, #652]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	f003 030c 	and.w	r3, r3, #12
 800920e:	2b04      	cmp	r3, #4
 8009210:	d00c      	beq.n	800922c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009212:	4ba0      	ldr	r3, [pc, #640]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800921a:	2b08      	cmp	r3, #8
 800921c:	d112      	bne.n	8009244 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800921e:	4b9d      	ldr	r3, [pc, #628]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009226:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800922a:	d10b      	bne.n	8009244 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800922c:	4b99      	ldr	r3, [pc, #612]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009234:	2b00      	cmp	r3, #0
 8009236:	d05b      	beq.n	80092f0 <HAL_RCC_OscConfig+0x108>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d157      	bne.n	80092f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	e236      	b.n	80096b2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800924c:	d106      	bne.n	800925c <HAL_RCC_OscConfig+0x74>
 800924e:	4b91      	ldr	r3, [pc, #580]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a90      	ldr	r2, [pc, #576]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 8009254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009258:	6013      	str	r3, [r2, #0]
 800925a:	e01d      	b.n	8009298 <HAL_RCC_OscConfig+0xb0>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009264:	d10c      	bne.n	8009280 <HAL_RCC_OscConfig+0x98>
 8009266:	4b8b      	ldr	r3, [pc, #556]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a8a      	ldr	r2, [pc, #552]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 800926c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009270:	6013      	str	r3, [r2, #0]
 8009272:	4b88      	ldr	r3, [pc, #544]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a87      	ldr	r2, [pc, #540]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 8009278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800927c:	6013      	str	r3, [r2, #0]
 800927e:	e00b      	b.n	8009298 <HAL_RCC_OscConfig+0xb0>
 8009280:	4b84      	ldr	r3, [pc, #528]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a83      	ldr	r2, [pc, #524]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 8009286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800928a:	6013      	str	r3, [r2, #0]
 800928c:	4b81      	ldr	r3, [pc, #516]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a80      	ldr	r2, [pc, #512]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 8009292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d013      	beq.n	80092c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092a0:	f7fe fd60 	bl	8007d64 <HAL_GetTick>
 80092a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092a6:	e008      	b.n	80092ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80092a8:	f7fe fd5c 	bl	8007d64 <HAL_GetTick>
 80092ac:	4602      	mov	r2, r0
 80092ae:	693b      	ldr	r3, [r7, #16]
 80092b0:	1ad3      	subs	r3, r2, r3
 80092b2:	2b64      	cmp	r3, #100	; 0x64
 80092b4:	d901      	bls.n	80092ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80092b6:	2303      	movs	r3, #3
 80092b8:	e1fb      	b.n	80096b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092ba:	4b76      	ldr	r3, [pc, #472]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d0f0      	beq.n	80092a8 <HAL_RCC_OscConfig+0xc0>
 80092c6:	e014      	b.n	80092f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092c8:	f7fe fd4c 	bl	8007d64 <HAL_GetTick>
 80092cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80092ce:	e008      	b.n	80092e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80092d0:	f7fe fd48 	bl	8007d64 <HAL_GetTick>
 80092d4:	4602      	mov	r2, r0
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	1ad3      	subs	r3, r2, r3
 80092da:	2b64      	cmp	r3, #100	; 0x64
 80092dc:	d901      	bls.n	80092e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80092de:	2303      	movs	r3, #3
 80092e0:	e1e7      	b.n	80096b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80092e2:	4b6c      	ldr	r3, [pc, #432]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1f0      	bne.n	80092d0 <HAL_RCC_OscConfig+0xe8>
 80092ee:	e000      	b.n	80092f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f003 0302 	and.w	r3, r3, #2
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d063      	beq.n	80093c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80092fe:	4b65      	ldr	r3, [pc, #404]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	f003 030c 	and.w	r3, r3, #12
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00b      	beq.n	8009322 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800930a:	4b62      	ldr	r3, [pc, #392]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009312:	2b08      	cmp	r3, #8
 8009314:	d11c      	bne.n	8009350 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009316:	4b5f      	ldr	r3, [pc, #380]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800931e:	2b00      	cmp	r3, #0
 8009320:	d116      	bne.n	8009350 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009322:	4b5c      	ldr	r3, [pc, #368]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f003 0302 	and.w	r3, r3, #2
 800932a:	2b00      	cmp	r3, #0
 800932c:	d005      	beq.n	800933a <HAL_RCC_OscConfig+0x152>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	2b01      	cmp	r3, #1
 8009334:	d001      	beq.n	800933a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009336:	2301      	movs	r3, #1
 8009338:	e1bb      	b.n	80096b2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800933a:	4b56      	ldr	r3, [pc, #344]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	00db      	lsls	r3, r3, #3
 8009348:	4952      	ldr	r1, [pc, #328]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 800934a:	4313      	orrs	r3, r2
 800934c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800934e:	e03a      	b.n	80093c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d020      	beq.n	800939a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009358:	4b4f      	ldr	r3, [pc, #316]	; (8009498 <HAL_RCC_OscConfig+0x2b0>)
 800935a:	2201      	movs	r2, #1
 800935c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800935e:	f7fe fd01 	bl	8007d64 <HAL_GetTick>
 8009362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009364:	e008      	b.n	8009378 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009366:	f7fe fcfd 	bl	8007d64 <HAL_GetTick>
 800936a:	4602      	mov	r2, r0
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	1ad3      	subs	r3, r2, r3
 8009370:	2b02      	cmp	r3, #2
 8009372:	d901      	bls.n	8009378 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009374:	2303      	movs	r3, #3
 8009376:	e19c      	b.n	80096b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009378:	4b46      	ldr	r3, [pc, #280]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 0302 	and.w	r3, r3, #2
 8009380:	2b00      	cmp	r3, #0
 8009382:	d0f0      	beq.n	8009366 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009384:	4b43      	ldr	r3, [pc, #268]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	00db      	lsls	r3, r3, #3
 8009392:	4940      	ldr	r1, [pc, #256]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 8009394:	4313      	orrs	r3, r2
 8009396:	600b      	str	r3, [r1, #0]
 8009398:	e015      	b.n	80093c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800939a:	4b3f      	ldr	r3, [pc, #252]	; (8009498 <HAL_RCC_OscConfig+0x2b0>)
 800939c:	2200      	movs	r2, #0
 800939e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093a0:	f7fe fce0 	bl	8007d64 <HAL_GetTick>
 80093a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093a6:	e008      	b.n	80093ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093a8:	f7fe fcdc 	bl	8007d64 <HAL_GetTick>
 80093ac:	4602      	mov	r2, r0
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	1ad3      	subs	r3, r2, r3
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d901      	bls.n	80093ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80093b6:	2303      	movs	r3, #3
 80093b8:	e17b      	b.n	80096b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093ba:	4b36      	ldr	r3, [pc, #216]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f003 0302 	and.w	r3, r3, #2
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d1f0      	bne.n	80093a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f003 0308 	and.w	r3, r3, #8
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d030      	beq.n	8009434 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	695b      	ldr	r3, [r3, #20]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d016      	beq.n	8009408 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80093da:	4b30      	ldr	r3, [pc, #192]	; (800949c <HAL_RCC_OscConfig+0x2b4>)
 80093dc:	2201      	movs	r2, #1
 80093de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093e0:	f7fe fcc0 	bl	8007d64 <HAL_GetTick>
 80093e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80093e6:	e008      	b.n	80093fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80093e8:	f7fe fcbc 	bl	8007d64 <HAL_GetTick>
 80093ec:	4602      	mov	r2, r0
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	1ad3      	subs	r3, r2, r3
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d901      	bls.n	80093fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80093f6:	2303      	movs	r3, #3
 80093f8:	e15b      	b.n	80096b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80093fa:	4b26      	ldr	r3, [pc, #152]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 80093fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093fe:	f003 0302 	and.w	r3, r3, #2
 8009402:	2b00      	cmp	r3, #0
 8009404:	d0f0      	beq.n	80093e8 <HAL_RCC_OscConfig+0x200>
 8009406:	e015      	b.n	8009434 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009408:	4b24      	ldr	r3, [pc, #144]	; (800949c <HAL_RCC_OscConfig+0x2b4>)
 800940a:	2200      	movs	r2, #0
 800940c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800940e:	f7fe fca9 	bl	8007d64 <HAL_GetTick>
 8009412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009414:	e008      	b.n	8009428 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009416:	f7fe fca5 	bl	8007d64 <HAL_GetTick>
 800941a:	4602      	mov	r2, r0
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	1ad3      	subs	r3, r2, r3
 8009420:	2b02      	cmp	r3, #2
 8009422:	d901      	bls.n	8009428 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009424:	2303      	movs	r3, #3
 8009426:	e144      	b.n	80096b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009428:	4b1a      	ldr	r3, [pc, #104]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 800942a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800942c:	f003 0302 	and.w	r3, r3, #2
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1f0      	bne.n	8009416 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 0304 	and.w	r3, r3, #4
 800943c:	2b00      	cmp	r3, #0
 800943e:	f000 80a0 	beq.w	8009582 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009442:	2300      	movs	r3, #0
 8009444:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009446:	4b13      	ldr	r3, [pc, #76]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 8009448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800944e:	2b00      	cmp	r3, #0
 8009450:	d10f      	bne.n	8009472 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009452:	2300      	movs	r3, #0
 8009454:	60bb      	str	r3, [r7, #8]
 8009456:	4b0f      	ldr	r3, [pc, #60]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 8009458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945a:	4a0e      	ldr	r2, [pc, #56]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 800945c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009460:	6413      	str	r3, [r2, #64]	; 0x40
 8009462:	4b0c      	ldr	r3, [pc, #48]	; (8009494 <HAL_RCC_OscConfig+0x2ac>)
 8009464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800946a:	60bb      	str	r3, [r7, #8]
 800946c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800946e:	2301      	movs	r3, #1
 8009470:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009472:	4b0b      	ldr	r3, [pc, #44]	; (80094a0 <HAL_RCC_OscConfig+0x2b8>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800947a:	2b00      	cmp	r3, #0
 800947c:	d121      	bne.n	80094c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800947e:	4b08      	ldr	r3, [pc, #32]	; (80094a0 <HAL_RCC_OscConfig+0x2b8>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a07      	ldr	r2, [pc, #28]	; (80094a0 <HAL_RCC_OscConfig+0x2b8>)
 8009484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800948a:	f7fe fc6b 	bl	8007d64 <HAL_GetTick>
 800948e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009490:	e011      	b.n	80094b6 <HAL_RCC_OscConfig+0x2ce>
 8009492:	bf00      	nop
 8009494:	40023800 	.word	0x40023800
 8009498:	42470000 	.word	0x42470000
 800949c:	42470e80 	.word	0x42470e80
 80094a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094a4:	f7fe fc5e 	bl	8007d64 <HAL_GetTick>
 80094a8:	4602      	mov	r2, r0
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	1ad3      	subs	r3, r2, r3
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d901      	bls.n	80094b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80094b2:	2303      	movs	r3, #3
 80094b4:	e0fd      	b.n	80096b2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094b6:	4b81      	ldr	r3, [pc, #516]	; (80096bc <HAL_RCC_OscConfig+0x4d4>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d0f0      	beq.n	80094a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d106      	bne.n	80094d8 <HAL_RCC_OscConfig+0x2f0>
 80094ca:	4b7d      	ldr	r3, [pc, #500]	; (80096c0 <HAL_RCC_OscConfig+0x4d8>)
 80094cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094ce:	4a7c      	ldr	r2, [pc, #496]	; (80096c0 <HAL_RCC_OscConfig+0x4d8>)
 80094d0:	f043 0301 	orr.w	r3, r3, #1
 80094d4:	6713      	str	r3, [r2, #112]	; 0x70
 80094d6:	e01c      	b.n	8009512 <HAL_RCC_OscConfig+0x32a>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	2b05      	cmp	r3, #5
 80094de:	d10c      	bne.n	80094fa <HAL_RCC_OscConfig+0x312>
 80094e0:	4b77      	ldr	r3, [pc, #476]	; (80096c0 <HAL_RCC_OscConfig+0x4d8>)
 80094e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094e4:	4a76      	ldr	r2, [pc, #472]	; (80096c0 <HAL_RCC_OscConfig+0x4d8>)
 80094e6:	f043 0304 	orr.w	r3, r3, #4
 80094ea:	6713      	str	r3, [r2, #112]	; 0x70
 80094ec:	4b74      	ldr	r3, [pc, #464]	; (80096c0 <HAL_RCC_OscConfig+0x4d8>)
 80094ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094f0:	4a73      	ldr	r2, [pc, #460]	; (80096c0 <HAL_RCC_OscConfig+0x4d8>)
 80094f2:	f043 0301 	orr.w	r3, r3, #1
 80094f6:	6713      	str	r3, [r2, #112]	; 0x70
 80094f8:	e00b      	b.n	8009512 <HAL_RCC_OscConfig+0x32a>
 80094fa:	4b71      	ldr	r3, [pc, #452]	; (80096c0 <HAL_RCC_OscConfig+0x4d8>)
 80094fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094fe:	4a70      	ldr	r2, [pc, #448]	; (80096c0 <HAL_RCC_OscConfig+0x4d8>)
 8009500:	f023 0301 	bic.w	r3, r3, #1
 8009504:	6713      	str	r3, [r2, #112]	; 0x70
 8009506:	4b6e      	ldr	r3, [pc, #440]	; (80096c0 <HAL_RCC_OscConfig+0x4d8>)
 8009508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800950a:	4a6d      	ldr	r2, [pc, #436]	; (80096c0 <HAL_RCC_OscConfig+0x4d8>)
 800950c:	f023 0304 	bic.w	r3, r3, #4
 8009510:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d015      	beq.n	8009546 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800951a:	f7fe fc23 	bl	8007d64 <HAL_GetTick>
 800951e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009520:	e00a      	b.n	8009538 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009522:	f7fe fc1f 	bl	8007d64 <HAL_GetTick>
 8009526:	4602      	mov	r2, r0
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	1ad3      	subs	r3, r2, r3
 800952c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009530:	4293      	cmp	r3, r2
 8009532:	d901      	bls.n	8009538 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009534:	2303      	movs	r3, #3
 8009536:	e0bc      	b.n	80096b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009538:	4b61      	ldr	r3, [pc, #388]	; (80096c0 <HAL_RCC_OscConfig+0x4d8>)
 800953a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800953c:	f003 0302 	and.w	r3, r3, #2
 8009540:	2b00      	cmp	r3, #0
 8009542:	d0ee      	beq.n	8009522 <HAL_RCC_OscConfig+0x33a>
 8009544:	e014      	b.n	8009570 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009546:	f7fe fc0d 	bl	8007d64 <HAL_GetTick>
 800954a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800954c:	e00a      	b.n	8009564 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800954e:	f7fe fc09 	bl	8007d64 <HAL_GetTick>
 8009552:	4602      	mov	r2, r0
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	1ad3      	subs	r3, r2, r3
 8009558:	f241 3288 	movw	r2, #5000	; 0x1388
 800955c:	4293      	cmp	r3, r2
 800955e:	d901      	bls.n	8009564 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009560:	2303      	movs	r3, #3
 8009562:	e0a6      	b.n	80096b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009564:	4b56      	ldr	r3, [pc, #344]	; (80096c0 <HAL_RCC_OscConfig+0x4d8>)
 8009566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009568:	f003 0302 	and.w	r3, r3, #2
 800956c:	2b00      	cmp	r3, #0
 800956e:	d1ee      	bne.n	800954e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009570:	7dfb      	ldrb	r3, [r7, #23]
 8009572:	2b01      	cmp	r3, #1
 8009574:	d105      	bne.n	8009582 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009576:	4b52      	ldr	r3, [pc, #328]	; (80096c0 <HAL_RCC_OscConfig+0x4d8>)
 8009578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957a:	4a51      	ldr	r2, [pc, #324]	; (80096c0 <HAL_RCC_OscConfig+0x4d8>)
 800957c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009580:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	699b      	ldr	r3, [r3, #24]
 8009586:	2b00      	cmp	r3, #0
 8009588:	f000 8092 	beq.w	80096b0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800958c:	4b4c      	ldr	r3, [pc, #304]	; (80096c0 <HAL_RCC_OscConfig+0x4d8>)
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	f003 030c 	and.w	r3, r3, #12
 8009594:	2b08      	cmp	r3, #8
 8009596:	d05c      	beq.n	8009652 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	699b      	ldr	r3, [r3, #24]
 800959c:	2b02      	cmp	r3, #2
 800959e:	d141      	bne.n	8009624 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095a0:	4b48      	ldr	r3, [pc, #288]	; (80096c4 <HAL_RCC_OscConfig+0x4dc>)
 80095a2:	2200      	movs	r2, #0
 80095a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095a6:	f7fe fbdd 	bl	8007d64 <HAL_GetTick>
 80095aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095ac:	e008      	b.n	80095c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095ae:	f7fe fbd9 	bl	8007d64 <HAL_GetTick>
 80095b2:	4602      	mov	r2, r0
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	1ad3      	subs	r3, r2, r3
 80095b8:	2b02      	cmp	r3, #2
 80095ba:	d901      	bls.n	80095c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80095bc:	2303      	movs	r3, #3
 80095be:	e078      	b.n	80096b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095c0:	4b3f      	ldr	r3, [pc, #252]	; (80096c0 <HAL_RCC_OscConfig+0x4d8>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1f0      	bne.n	80095ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	69da      	ldr	r2, [r3, #28]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6a1b      	ldr	r3, [r3, #32]
 80095d4:	431a      	orrs	r2, r3
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095da:	019b      	lsls	r3, r3, #6
 80095dc:	431a      	orrs	r2, r3
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e2:	085b      	lsrs	r3, r3, #1
 80095e4:	3b01      	subs	r3, #1
 80095e6:	041b      	lsls	r3, r3, #16
 80095e8:	431a      	orrs	r2, r3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ee:	061b      	lsls	r3, r3, #24
 80095f0:	4933      	ldr	r1, [pc, #204]	; (80096c0 <HAL_RCC_OscConfig+0x4d8>)
 80095f2:	4313      	orrs	r3, r2
 80095f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80095f6:	4b33      	ldr	r3, [pc, #204]	; (80096c4 <HAL_RCC_OscConfig+0x4dc>)
 80095f8:	2201      	movs	r2, #1
 80095fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095fc:	f7fe fbb2 	bl	8007d64 <HAL_GetTick>
 8009600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009602:	e008      	b.n	8009616 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009604:	f7fe fbae 	bl	8007d64 <HAL_GetTick>
 8009608:	4602      	mov	r2, r0
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	1ad3      	subs	r3, r2, r3
 800960e:	2b02      	cmp	r3, #2
 8009610:	d901      	bls.n	8009616 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009612:	2303      	movs	r3, #3
 8009614:	e04d      	b.n	80096b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009616:	4b2a      	ldr	r3, [pc, #168]	; (80096c0 <HAL_RCC_OscConfig+0x4d8>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800961e:	2b00      	cmp	r3, #0
 8009620:	d0f0      	beq.n	8009604 <HAL_RCC_OscConfig+0x41c>
 8009622:	e045      	b.n	80096b0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009624:	4b27      	ldr	r3, [pc, #156]	; (80096c4 <HAL_RCC_OscConfig+0x4dc>)
 8009626:	2200      	movs	r2, #0
 8009628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800962a:	f7fe fb9b 	bl	8007d64 <HAL_GetTick>
 800962e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009630:	e008      	b.n	8009644 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009632:	f7fe fb97 	bl	8007d64 <HAL_GetTick>
 8009636:	4602      	mov	r2, r0
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	1ad3      	subs	r3, r2, r3
 800963c:	2b02      	cmp	r3, #2
 800963e:	d901      	bls.n	8009644 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009640:	2303      	movs	r3, #3
 8009642:	e036      	b.n	80096b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009644:	4b1e      	ldr	r3, [pc, #120]	; (80096c0 <HAL_RCC_OscConfig+0x4d8>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1f0      	bne.n	8009632 <HAL_RCC_OscConfig+0x44a>
 8009650:	e02e      	b.n	80096b0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	699b      	ldr	r3, [r3, #24]
 8009656:	2b01      	cmp	r3, #1
 8009658:	d101      	bne.n	800965e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	e029      	b.n	80096b2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800965e:	4b18      	ldr	r3, [pc, #96]	; (80096c0 <HAL_RCC_OscConfig+0x4d8>)
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	69db      	ldr	r3, [r3, #28]
 800966e:	429a      	cmp	r2, r3
 8009670:	d11c      	bne.n	80096ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800967c:	429a      	cmp	r2, r3
 800967e:	d115      	bne.n	80096ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009686:	4013      	ands	r3, r2
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800968c:	4293      	cmp	r3, r2
 800968e:	d10d      	bne.n	80096ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800969a:	429a      	cmp	r2, r3
 800969c:	d106      	bne.n	80096ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d001      	beq.n	80096b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	e000      	b.n	80096b2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3718      	adds	r7, #24
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	40007000 	.word	0x40007000
 80096c0:	40023800 	.word	0x40023800
 80096c4:	42470060 	.word	0x42470060

080096c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d101      	bne.n	80096dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	e0cc      	b.n	8009876 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80096dc:	4b68      	ldr	r3, [pc, #416]	; (8009880 <HAL_RCC_ClockConfig+0x1b8>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f003 030f 	and.w	r3, r3, #15
 80096e4:	683a      	ldr	r2, [r7, #0]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d90c      	bls.n	8009704 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096ea:	4b65      	ldr	r3, [pc, #404]	; (8009880 <HAL_RCC_ClockConfig+0x1b8>)
 80096ec:	683a      	ldr	r2, [r7, #0]
 80096ee:	b2d2      	uxtb	r2, r2
 80096f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80096f2:	4b63      	ldr	r3, [pc, #396]	; (8009880 <HAL_RCC_ClockConfig+0x1b8>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f003 030f 	and.w	r3, r3, #15
 80096fa:	683a      	ldr	r2, [r7, #0]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d001      	beq.n	8009704 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e0b8      	b.n	8009876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f003 0302 	and.w	r3, r3, #2
 800970c:	2b00      	cmp	r3, #0
 800970e:	d020      	beq.n	8009752 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f003 0304 	and.w	r3, r3, #4
 8009718:	2b00      	cmp	r3, #0
 800971a:	d005      	beq.n	8009728 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800971c:	4b59      	ldr	r3, [pc, #356]	; (8009884 <HAL_RCC_ClockConfig+0x1bc>)
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	4a58      	ldr	r2, [pc, #352]	; (8009884 <HAL_RCC_ClockConfig+0x1bc>)
 8009722:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009726:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 0308 	and.w	r3, r3, #8
 8009730:	2b00      	cmp	r3, #0
 8009732:	d005      	beq.n	8009740 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009734:	4b53      	ldr	r3, [pc, #332]	; (8009884 <HAL_RCC_ClockConfig+0x1bc>)
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	4a52      	ldr	r2, [pc, #328]	; (8009884 <HAL_RCC_ClockConfig+0x1bc>)
 800973a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800973e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009740:	4b50      	ldr	r3, [pc, #320]	; (8009884 <HAL_RCC_ClockConfig+0x1bc>)
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	494d      	ldr	r1, [pc, #308]	; (8009884 <HAL_RCC_ClockConfig+0x1bc>)
 800974e:	4313      	orrs	r3, r2
 8009750:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f003 0301 	and.w	r3, r3, #1
 800975a:	2b00      	cmp	r3, #0
 800975c:	d044      	beq.n	80097e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	2b01      	cmp	r3, #1
 8009764:	d107      	bne.n	8009776 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009766:	4b47      	ldr	r3, [pc, #284]	; (8009884 <HAL_RCC_ClockConfig+0x1bc>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800976e:	2b00      	cmp	r3, #0
 8009770:	d119      	bne.n	80097a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e07f      	b.n	8009876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	2b02      	cmp	r3, #2
 800977c:	d003      	beq.n	8009786 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009782:	2b03      	cmp	r3, #3
 8009784:	d107      	bne.n	8009796 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009786:	4b3f      	ldr	r3, [pc, #252]	; (8009884 <HAL_RCC_ClockConfig+0x1bc>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800978e:	2b00      	cmp	r3, #0
 8009790:	d109      	bne.n	80097a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e06f      	b.n	8009876 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009796:	4b3b      	ldr	r3, [pc, #236]	; (8009884 <HAL_RCC_ClockConfig+0x1bc>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f003 0302 	and.w	r3, r3, #2
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d101      	bne.n	80097a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	e067      	b.n	8009876 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80097a6:	4b37      	ldr	r3, [pc, #220]	; (8009884 <HAL_RCC_ClockConfig+0x1bc>)
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	f023 0203 	bic.w	r2, r3, #3
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	4934      	ldr	r1, [pc, #208]	; (8009884 <HAL_RCC_ClockConfig+0x1bc>)
 80097b4:	4313      	orrs	r3, r2
 80097b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80097b8:	f7fe fad4 	bl	8007d64 <HAL_GetTick>
 80097bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097be:	e00a      	b.n	80097d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097c0:	f7fe fad0 	bl	8007d64 <HAL_GetTick>
 80097c4:	4602      	mov	r2, r0
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	1ad3      	subs	r3, r2, r3
 80097ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d901      	bls.n	80097d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80097d2:	2303      	movs	r3, #3
 80097d4:	e04f      	b.n	8009876 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097d6:	4b2b      	ldr	r3, [pc, #172]	; (8009884 <HAL_RCC_ClockConfig+0x1bc>)
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	f003 020c 	and.w	r2, r3, #12
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d1eb      	bne.n	80097c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80097e8:	4b25      	ldr	r3, [pc, #148]	; (8009880 <HAL_RCC_ClockConfig+0x1b8>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f003 030f 	and.w	r3, r3, #15
 80097f0:	683a      	ldr	r2, [r7, #0]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d20c      	bcs.n	8009810 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097f6:	4b22      	ldr	r3, [pc, #136]	; (8009880 <HAL_RCC_ClockConfig+0x1b8>)
 80097f8:	683a      	ldr	r2, [r7, #0]
 80097fa:	b2d2      	uxtb	r2, r2
 80097fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80097fe:	4b20      	ldr	r3, [pc, #128]	; (8009880 <HAL_RCC_ClockConfig+0x1b8>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f003 030f 	and.w	r3, r3, #15
 8009806:	683a      	ldr	r2, [r7, #0]
 8009808:	429a      	cmp	r2, r3
 800980a:	d001      	beq.n	8009810 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	e032      	b.n	8009876 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 0304 	and.w	r3, r3, #4
 8009818:	2b00      	cmp	r3, #0
 800981a:	d008      	beq.n	800982e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800981c:	4b19      	ldr	r3, [pc, #100]	; (8009884 <HAL_RCC_ClockConfig+0x1bc>)
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	68db      	ldr	r3, [r3, #12]
 8009828:	4916      	ldr	r1, [pc, #88]	; (8009884 <HAL_RCC_ClockConfig+0x1bc>)
 800982a:	4313      	orrs	r3, r2
 800982c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 0308 	and.w	r3, r3, #8
 8009836:	2b00      	cmp	r3, #0
 8009838:	d009      	beq.n	800984e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800983a:	4b12      	ldr	r3, [pc, #72]	; (8009884 <HAL_RCC_ClockConfig+0x1bc>)
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	00db      	lsls	r3, r3, #3
 8009848:	490e      	ldr	r1, [pc, #56]	; (8009884 <HAL_RCC_ClockConfig+0x1bc>)
 800984a:	4313      	orrs	r3, r2
 800984c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800984e:	f000 f821 	bl	8009894 <HAL_RCC_GetSysClockFreq>
 8009852:	4601      	mov	r1, r0
 8009854:	4b0b      	ldr	r3, [pc, #44]	; (8009884 <HAL_RCC_ClockConfig+0x1bc>)
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	091b      	lsrs	r3, r3, #4
 800985a:	f003 030f 	and.w	r3, r3, #15
 800985e:	4a0a      	ldr	r2, [pc, #40]	; (8009888 <HAL_RCC_ClockConfig+0x1c0>)
 8009860:	5cd3      	ldrb	r3, [r2, r3]
 8009862:	fa21 f303 	lsr.w	r3, r1, r3
 8009866:	4a09      	ldr	r2, [pc, #36]	; (800988c <HAL_RCC_ClockConfig+0x1c4>)
 8009868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800986a:	4b09      	ldr	r3, [pc, #36]	; (8009890 <HAL_RCC_ClockConfig+0x1c8>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4618      	mov	r0, r3
 8009870:	f7fe fa34 	bl	8007cdc <HAL_InitTick>

  return HAL_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	40023c00 	.word	0x40023c00
 8009884:	40023800 	.word	0x40023800
 8009888:	08028c1c 	.word	0x08028c1c
 800988c:	20000004 	.word	0x20000004
 8009890:	20000010 	.word	0x20000010

08009894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800989a:	2300      	movs	r3, #0
 800989c:	607b      	str	r3, [r7, #4]
 800989e:	2300      	movs	r3, #0
 80098a0:	60fb      	str	r3, [r7, #12]
 80098a2:	2300      	movs	r3, #0
 80098a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80098a6:	2300      	movs	r3, #0
 80098a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80098aa:	4b63      	ldr	r3, [pc, #396]	; (8009a38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	f003 030c 	and.w	r3, r3, #12
 80098b2:	2b04      	cmp	r3, #4
 80098b4:	d007      	beq.n	80098c6 <HAL_RCC_GetSysClockFreq+0x32>
 80098b6:	2b08      	cmp	r3, #8
 80098b8:	d008      	beq.n	80098cc <HAL_RCC_GetSysClockFreq+0x38>
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f040 80b4 	bne.w	8009a28 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80098c0:	4b5e      	ldr	r3, [pc, #376]	; (8009a3c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80098c2:	60bb      	str	r3, [r7, #8]
       break;
 80098c4:	e0b3      	b.n	8009a2e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80098c6:	4b5e      	ldr	r3, [pc, #376]	; (8009a40 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80098c8:	60bb      	str	r3, [r7, #8]
      break;
 80098ca:	e0b0      	b.n	8009a2e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80098cc:	4b5a      	ldr	r3, [pc, #360]	; (8009a38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80098d6:	4b58      	ldr	r3, [pc, #352]	; (8009a38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d04a      	beq.n	8009978 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80098e2:	4b55      	ldr	r3, [pc, #340]	; (8009a38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	099b      	lsrs	r3, r3, #6
 80098e8:	f04f 0400 	mov.w	r4, #0
 80098ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80098f0:	f04f 0200 	mov.w	r2, #0
 80098f4:	ea03 0501 	and.w	r5, r3, r1
 80098f8:	ea04 0602 	and.w	r6, r4, r2
 80098fc:	4629      	mov	r1, r5
 80098fe:	4632      	mov	r2, r6
 8009900:	f04f 0300 	mov.w	r3, #0
 8009904:	f04f 0400 	mov.w	r4, #0
 8009908:	0154      	lsls	r4, r2, #5
 800990a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800990e:	014b      	lsls	r3, r1, #5
 8009910:	4619      	mov	r1, r3
 8009912:	4622      	mov	r2, r4
 8009914:	1b49      	subs	r1, r1, r5
 8009916:	eb62 0206 	sbc.w	r2, r2, r6
 800991a:	f04f 0300 	mov.w	r3, #0
 800991e:	f04f 0400 	mov.w	r4, #0
 8009922:	0194      	lsls	r4, r2, #6
 8009924:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009928:	018b      	lsls	r3, r1, #6
 800992a:	1a5b      	subs	r3, r3, r1
 800992c:	eb64 0402 	sbc.w	r4, r4, r2
 8009930:	f04f 0100 	mov.w	r1, #0
 8009934:	f04f 0200 	mov.w	r2, #0
 8009938:	00e2      	lsls	r2, r4, #3
 800993a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800993e:	00d9      	lsls	r1, r3, #3
 8009940:	460b      	mov	r3, r1
 8009942:	4614      	mov	r4, r2
 8009944:	195b      	adds	r3, r3, r5
 8009946:	eb44 0406 	adc.w	r4, r4, r6
 800994a:	f04f 0100 	mov.w	r1, #0
 800994e:	f04f 0200 	mov.w	r2, #0
 8009952:	0262      	lsls	r2, r4, #9
 8009954:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8009958:	0259      	lsls	r1, r3, #9
 800995a:	460b      	mov	r3, r1
 800995c:	4614      	mov	r4, r2
 800995e:	4618      	mov	r0, r3
 8009960:	4621      	mov	r1, r4
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f04f 0400 	mov.w	r4, #0
 8009968:	461a      	mov	r2, r3
 800996a:	4623      	mov	r3, r4
 800996c:	f7f6 fc90 	bl	8000290 <__aeabi_uldivmod>
 8009970:	4603      	mov	r3, r0
 8009972:	460c      	mov	r4, r1
 8009974:	60fb      	str	r3, [r7, #12]
 8009976:	e049      	b.n	8009a0c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009978:	4b2f      	ldr	r3, [pc, #188]	; (8009a38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	099b      	lsrs	r3, r3, #6
 800997e:	f04f 0400 	mov.w	r4, #0
 8009982:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009986:	f04f 0200 	mov.w	r2, #0
 800998a:	ea03 0501 	and.w	r5, r3, r1
 800998e:	ea04 0602 	and.w	r6, r4, r2
 8009992:	4629      	mov	r1, r5
 8009994:	4632      	mov	r2, r6
 8009996:	f04f 0300 	mov.w	r3, #0
 800999a:	f04f 0400 	mov.w	r4, #0
 800999e:	0154      	lsls	r4, r2, #5
 80099a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80099a4:	014b      	lsls	r3, r1, #5
 80099a6:	4619      	mov	r1, r3
 80099a8:	4622      	mov	r2, r4
 80099aa:	1b49      	subs	r1, r1, r5
 80099ac:	eb62 0206 	sbc.w	r2, r2, r6
 80099b0:	f04f 0300 	mov.w	r3, #0
 80099b4:	f04f 0400 	mov.w	r4, #0
 80099b8:	0194      	lsls	r4, r2, #6
 80099ba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80099be:	018b      	lsls	r3, r1, #6
 80099c0:	1a5b      	subs	r3, r3, r1
 80099c2:	eb64 0402 	sbc.w	r4, r4, r2
 80099c6:	f04f 0100 	mov.w	r1, #0
 80099ca:	f04f 0200 	mov.w	r2, #0
 80099ce:	00e2      	lsls	r2, r4, #3
 80099d0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80099d4:	00d9      	lsls	r1, r3, #3
 80099d6:	460b      	mov	r3, r1
 80099d8:	4614      	mov	r4, r2
 80099da:	195b      	adds	r3, r3, r5
 80099dc:	eb44 0406 	adc.w	r4, r4, r6
 80099e0:	f04f 0100 	mov.w	r1, #0
 80099e4:	f04f 0200 	mov.w	r2, #0
 80099e8:	02a2      	lsls	r2, r4, #10
 80099ea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80099ee:	0299      	lsls	r1, r3, #10
 80099f0:	460b      	mov	r3, r1
 80099f2:	4614      	mov	r4, r2
 80099f4:	4618      	mov	r0, r3
 80099f6:	4621      	mov	r1, r4
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f04f 0400 	mov.w	r4, #0
 80099fe:	461a      	mov	r2, r3
 8009a00:	4623      	mov	r3, r4
 8009a02:	f7f6 fc45 	bl	8000290 <__aeabi_uldivmod>
 8009a06:	4603      	mov	r3, r0
 8009a08:	460c      	mov	r4, r1
 8009a0a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009a0c:	4b0a      	ldr	r3, [pc, #40]	; (8009a38 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	0c1b      	lsrs	r3, r3, #16
 8009a12:	f003 0303 	and.w	r3, r3, #3
 8009a16:	3301      	adds	r3, #1
 8009a18:	005b      	lsls	r3, r3, #1
 8009a1a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009a1c:	68fa      	ldr	r2, [r7, #12]
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a24:	60bb      	str	r3, [r7, #8]
      break;
 8009a26:	e002      	b.n	8009a2e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009a28:	4b04      	ldr	r3, [pc, #16]	; (8009a3c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009a2a:	60bb      	str	r3, [r7, #8]
      break;
 8009a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009a2e:	68bb      	ldr	r3, [r7, #8]
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3714      	adds	r7, #20
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a38:	40023800 	.word	0x40023800
 8009a3c:	00f42400 	.word	0x00f42400
 8009a40:	007a1200 	.word	0x007a1200

08009a44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a44:	b480      	push	{r7}
 8009a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009a48:	4b03      	ldr	r3, [pc, #12]	; (8009a58 <HAL_RCC_GetHCLKFreq+0x14>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	20000004 	.word	0x20000004

08009a5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d101      	bne.n	8009a6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e056      	b.n	8009b1c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d106      	bne.n	8009a8e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f7fc ff81 	bl	8006990 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2202      	movs	r2, #2
 8009a92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009aa4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	685a      	ldr	r2, [r3, #4]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	431a      	orrs	r2, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	431a      	orrs	r2, r3
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	431a      	orrs	r2, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	695b      	ldr	r3, [r3, #20]
 8009ac0:	431a      	orrs	r2, r3
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	699b      	ldr	r3, [r3, #24]
 8009ac6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009aca:	431a      	orrs	r2, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	69db      	ldr	r3, [r3, #28]
 8009ad0:	431a      	orrs	r2, r3
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a1b      	ldr	r3, [r3, #32]
 8009ad6:	ea42 0103 	orr.w	r1, r2, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	430a      	orrs	r2, r1
 8009ae4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	699b      	ldr	r3, [r3, #24]
 8009aea:	0c1b      	lsrs	r3, r3, #16
 8009aec:	f003 0104 	and.w	r1, r3, #4
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	430a      	orrs	r2, r1
 8009afa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	69da      	ldr	r2, [r3, #28]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2201      	movs	r2, #1
 8009b16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3708      	adds	r7, #8
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b088      	sub	sp, #32
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	603b      	str	r3, [r7, #0]
 8009b30:	4613      	mov	r3, r2
 8009b32:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009b34:	2300      	movs	r3, #0
 8009b36:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d101      	bne.n	8009b46 <HAL_SPI_Transmit+0x22>
 8009b42:	2302      	movs	r3, #2
 8009b44:	e11e      	b.n	8009d84 <HAL_SPI_Transmit+0x260>
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b4e:	f7fe f909 	bl	8007d64 <HAL_GetTick>
 8009b52:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009b54:	88fb      	ldrh	r3, [r7, #6]
 8009b56:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d002      	beq.n	8009b6a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009b64:	2302      	movs	r3, #2
 8009b66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009b68:	e103      	b.n	8009d72 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d002      	beq.n	8009b76 <HAL_SPI_Transmit+0x52>
 8009b70:	88fb      	ldrh	r3, [r7, #6]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d102      	bne.n	8009b7c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009b76:	2301      	movs	r3, #1
 8009b78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009b7a:	e0fa      	b.n	8009d72 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2203      	movs	r2, #3
 8009b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2200      	movs	r2, #0
 8009b88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	68ba      	ldr	r2, [r7, #8]
 8009b8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	88fa      	ldrh	r2, [r7, #6]
 8009b94:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	88fa      	ldrh	r2, [r7, #6]
 8009b9a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2200      	movs	r2, #0
 8009bac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bc2:	d107      	bne.n	8009bd4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009bd2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bde:	2b40      	cmp	r3, #64	; 0x40
 8009be0:	d007      	beq.n	8009bf2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bf0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bfa:	d14b      	bne.n	8009c94 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d002      	beq.n	8009c0a <HAL_SPI_Transmit+0xe6>
 8009c04:	8afb      	ldrh	r3, [r7, #22]
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d13e      	bne.n	8009c88 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c0e:	881a      	ldrh	r2, [r3, #0]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c1a:	1c9a      	adds	r2, r3, #2
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	3b01      	subs	r3, #1
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009c2e:	e02b      	b.n	8009c88 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	f003 0302 	and.w	r3, r3, #2
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d112      	bne.n	8009c64 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c42:	881a      	ldrh	r2, [r3, #0]
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c4e:	1c9a      	adds	r2, r3, #2
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	3b01      	subs	r3, #1
 8009c5c:	b29a      	uxth	r2, r3
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	86da      	strh	r2, [r3, #54]	; 0x36
 8009c62:	e011      	b.n	8009c88 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c64:	f7fe f87e 	bl	8007d64 <HAL_GetTick>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	1ad3      	subs	r3, r2, r3
 8009c6e:	683a      	ldr	r2, [r7, #0]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d803      	bhi.n	8009c7c <HAL_SPI_Transmit+0x158>
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c7a:	d102      	bne.n	8009c82 <HAL_SPI_Transmit+0x15e>
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d102      	bne.n	8009c88 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8009c82:	2303      	movs	r3, #3
 8009c84:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009c86:	e074      	b.n	8009d72 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1ce      	bne.n	8009c30 <HAL_SPI_Transmit+0x10c>
 8009c92:	e04c      	b.n	8009d2e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d002      	beq.n	8009ca2 <HAL_SPI_Transmit+0x17e>
 8009c9c:	8afb      	ldrh	r3, [r7, #22]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d140      	bne.n	8009d24 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	330c      	adds	r3, #12
 8009cac:	7812      	ldrb	r2, [r2, #0]
 8009cae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb4:	1c5a      	adds	r2, r3, #1
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009cc8:	e02c      	b.n	8009d24 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	f003 0302 	and.w	r3, r3, #2
 8009cd4:	2b02      	cmp	r3, #2
 8009cd6:	d113      	bne.n	8009d00 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	330c      	adds	r3, #12
 8009ce2:	7812      	ldrb	r2, [r2, #0]
 8009ce4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cea:	1c5a      	adds	r2, r3, #1
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	3b01      	subs	r3, #1
 8009cf8:	b29a      	uxth	r2, r3
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	86da      	strh	r2, [r3, #54]	; 0x36
 8009cfe:	e011      	b.n	8009d24 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d00:	f7fe f830 	bl	8007d64 <HAL_GetTick>
 8009d04:	4602      	mov	r2, r0
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	1ad3      	subs	r3, r2, r3
 8009d0a:	683a      	ldr	r2, [r7, #0]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d803      	bhi.n	8009d18 <HAL_SPI_Transmit+0x1f4>
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d16:	d102      	bne.n	8009d1e <HAL_SPI_Transmit+0x1fa>
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d102      	bne.n	8009d24 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8009d1e:	2303      	movs	r3, #3
 8009d20:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009d22:	e026      	b.n	8009d72 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d1cd      	bne.n	8009cca <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009d2e:	69ba      	ldr	r2, [r7, #24]
 8009d30:	6839      	ldr	r1, [r7, #0]
 8009d32:	68f8      	ldr	r0, [r7, #12]
 8009d34:	f000 fa44 	bl	800a1c0 <SPI_EndRxTxTransaction>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d002      	beq.n	8009d44 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2220      	movs	r2, #32
 8009d42:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	689b      	ldr	r3, [r3, #8]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d10a      	bne.n	8009d62 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	613b      	str	r3, [r7, #16]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68db      	ldr	r3, [r3, #12]
 8009d56:	613b      	str	r3, [r7, #16]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	613b      	str	r3, [r7, #16]
 8009d60:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d002      	beq.n	8009d70 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	77fb      	strb	r3, [r7, #31]
 8009d6e:	e000      	b.n	8009d72 <HAL_SPI_Transmit+0x24e>
  }

error:
 8009d70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2201      	movs	r2, #1
 8009d76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009d82:	7ffb      	ldrb	r3, [r7, #31]
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3720      	adds	r7, #32
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b08c      	sub	sp, #48	; 0x30
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
 8009d98:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009daa:	2b01      	cmp	r3, #1
 8009dac:	d101      	bne.n	8009db2 <HAL_SPI_TransmitReceive+0x26>
 8009dae:	2302      	movs	r3, #2
 8009db0:	e18a      	b.n	800a0c8 <HAL_SPI_TransmitReceive+0x33c>
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2201      	movs	r2, #1
 8009db6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009dba:	f7fd ffd3 	bl	8007d64 <HAL_GetTick>
 8009dbe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009dd0:	887b      	ldrh	r3, [r7, #2]
 8009dd2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d00f      	beq.n	8009dfc <HAL_SPI_TransmitReceive+0x70>
 8009ddc:	69fb      	ldr	r3, [r7, #28]
 8009dde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009de2:	d107      	bne.n	8009df4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	689b      	ldr	r3, [r3, #8]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d103      	bne.n	8009df4 <HAL_SPI_TransmitReceive+0x68>
 8009dec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009df0:	2b04      	cmp	r3, #4
 8009df2:	d003      	beq.n	8009dfc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009df4:	2302      	movs	r3, #2
 8009df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009dfa:	e15b      	b.n	800a0b4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d005      	beq.n	8009e0e <HAL_SPI_TransmitReceive+0x82>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d002      	beq.n	8009e0e <HAL_SPI_TransmitReceive+0x82>
 8009e08:	887b      	ldrh	r3, [r7, #2]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d103      	bne.n	8009e16 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009e14:	e14e      	b.n	800a0b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	2b04      	cmp	r3, #4
 8009e20:	d003      	beq.n	8009e2a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2205      	movs	r2, #5
 8009e26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	887a      	ldrh	r2, [r7, #2]
 8009e3a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	887a      	ldrh	r2, [r7, #2]
 8009e40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	68ba      	ldr	r2, [r7, #8]
 8009e46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	887a      	ldrh	r2, [r7, #2]
 8009e4c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	887a      	ldrh	r2, [r7, #2]
 8009e52:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2200      	movs	r2, #0
 8009e58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e6a:	2b40      	cmp	r3, #64	; 0x40
 8009e6c:	d007      	beq.n	8009e7e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e86:	d178      	bne.n	8009f7a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d002      	beq.n	8009e96 <HAL_SPI_TransmitReceive+0x10a>
 8009e90:	8b7b      	ldrh	r3, [r7, #26]
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	d166      	bne.n	8009f64 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e9a:	881a      	ldrh	r2, [r3, #0]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ea6:	1c9a      	adds	r2, r3, #2
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	3b01      	subs	r3, #1
 8009eb4:	b29a      	uxth	r2, r3
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009eba:	e053      	b.n	8009f64 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	f003 0302 	and.w	r3, r3, #2
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	d11b      	bne.n	8009f02 <HAL_SPI_TransmitReceive+0x176>
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d016      	beq.n	8009f02 <HAL_SPI_TransmitReceive+0x176>
 8009ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d113      	bne.n	8009f02 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ede:	881a      	ldrh	r2, [r3, #0]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eea:	1c9a      	adds	r2, r3, #2
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	b29a      	uxth	r2, r3
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009efe:	2300      	movs	r3, #0
 8009f00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	f003 0301 	and.w	r3, r3, #1
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d119      	bne.n	8009f44 <HAL_SPI_TransmitReceive+0x1b8>
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d014      	beq.n	8009f44 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68da      	ldr	r2, [r3, #12]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f24:	b292      	uxth	r2, r2
 8009f26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2c:	1c9a      	adds	r2, r3, #2
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	3b01      	subs	r3, #1
 8009f3a:	b29a      	uxth	r2, r3
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f40:	2301      	movs	r3, #1
 8009f42:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009f44:	f7fd ff0e 	bl	8007d64 <HAL_GetTick>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4c:	1ad3      	subs	r3, r2, r3
 8009f4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d807      	bhi.n	8009f64 <HAL_SPI_TransmitReceive+0x1d8>
 8009f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f5a:	d003      	beq.n	8009f64 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009f5c:	2303      	movs	r3, #3
 8009f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009f62:	e0a7      	b.n	800a0b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d1a6      	bne.n	8009ebc <HAL_SPI_TransmitReceive+0x130>
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d1a1      	bne.n	8009ebc <HAL_SPI_TransmitReceive+0x130>
 8009f78:	e07c      	b.n	800a074 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d002      	beq.n	8009f88 <HAL_SPI_TransmitReceive+0x1fc>
 8009f82:	8b7b      	ldrh	r3, [r7, #26]
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d16b      	bne.n	800a060 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	330c      	adds	r3, #12
 8009f92:	7812      	ldrb	r2, [r2, #0]
 8009f94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f9a:	1c5a      	adds	r2, r3, #1
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	3b01      	subs	r3, #1
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009fae:	e057      	b.n	800a060 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	f003 0302 	and.w	r3, r3, #2
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d11c      	bne.n	8009ff8 <HAL_SPI_TransmitReceive+0x26c>
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d017      	beq.n	8009ff8 <HAL_SPI_TransmitReceive+0x26c>
 8009fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d114      	bne.n	8009ff8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	330c      	adds	r3, #12
 8009fd8:	7812      	ldrb	r2, [r2, #0]
 8009fda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe0:	1c5a      	adds	r2, r3, #1
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	3b01      	subs	r3, #1
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	f003 0301 	and.w	r3, r3, #1
 800a002:	2b01      	cmp	r3, #1
 800a004:	d119      	bne.n	800a03a <HAL_SPI_TransmitReceive+0x2ae>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d014      	beq.n	800a03a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	68da      	ldr	r2, [r3, #12]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a01a:	b2d2      	uxtb	r2, r2
 800a01c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a022:	1c5a      	adds	r2, r3, #1
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	3b01      	subs	r3, #1
 800a030:	b29a      	uxth	r2, r3
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a036:	2301      	movs	r3, #1
 800a038:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a03a:	f7fd fe93 	bl	8007d64 <HAL_GetTick>
 800a03e:	4602      	mov	r2, r0
 800a040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a042:	1ad3      	subs	r3, r2, r3
 800a044:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a046:	429a      	cmp	r2, r3
 800a048:	d803      	bhi.n	800a052 <HAL_SPI_TransmitReceive+0x2c6>
 800a04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a050:	d102      	bne.n	800a058 <HAL_SPI_TransmitReceive+0x2cc>
 800a052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a054:	2b00      	cmp	r3, #0
 800a056:	d103      	bne.n	800a060 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a058:	2303      	movs	r3, #3
 800a05a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a05e:	e029      	b.n	800a0b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a064:	b29b      	uxth	r3, r3
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1a2      	bne.n	8009fb0 <HAL_SPI_TransmitReceive+0x224>
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a06e:	b29b      	uxth	r3, r3
 800a070:	2b00      	cmp	r3, #0
 800a072:	d19d      	bne.n	8009fb0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a076:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	f000 f8a1 	bl	800a1c0 <SPI_EndRxTxTransaction>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d006      	beq.n	800a092 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2220      	movs	r2, #32
 800a08e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a090:	e010      	b.n	800a0b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d10b      	bne.n	800a0b2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a09a:	2300      	movs	r3, #0
 800a09c:	617b      	str	r3, [r7, #20]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	617b      	str	r3, [r7, #20]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	617b      	str	r3, [r7, #20]
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	e000      	b.n	800a0b4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a0b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a0c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3730      	adds	r7, #48	; 0x30
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a0de:	b2db      	uxtb	r3, r3
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr

0800a0ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	603b      	str	r3, [r7, #0]
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a0fc:	e04c      	b.n	800a198 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a104:	d048      	beq.n	800a198 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a106:	f7fd fe2d 	bl	8007d64 <HAL_GetTick>
 800a10a:	4602      	mov	r2, r0
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	1ad3      	subs	r3, r2, r3
 800a110:	683a      	ldr	r2, [r7, #0]
 800a112:	429a      	cmp	r2, r3
 800a114:	d902      	bls.n	800a11c <SPI_WaitFlagStateUntilTimeout+0x30>
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d13d      	bne.n	800a198 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	685a      	ldr	r2, [r3, #4]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a12a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a134:	d111      	bne.n	800a15a <SPI_WaitFlagStateUntilTimeout+0x6e>
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	689b      	ldr	r3, [r3, #8]
 800a13a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a13e:	d004      	beq.n	800a14a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a148:	d107      	bne.n	800a15a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a158:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a15e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a162:	d10f      	bne.n	800a184 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a172:	601a      	str	r2, [r3, #0]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a182:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	2201      	movs	r2, #1
 800a188:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2200      	movs	r2, #0
 800a190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a194:	2303      	movs	r3, #3
 800a196:	e00f      	b.n	800a1b8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	689a      	ldr	r2, [r3, #8]
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	4013      	ands	r3, r2
 800a1a2:	68ba      	ldr	r2, [r7, #8]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	bf0c      	ite	eq
 800a1a8:	2301      	moveq	r3, #1
 800a1aa:	2300      	movne	r3, #0
 800a1ac:	b2db      	uxtb	r3, r3
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	79fb      	ldrb	r3, [r7, #7]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d1a3      	bne.n	800a0fe <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a1b6:	2300      	movs	r3, #0
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3710      	adds	r7, #16
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b088      	sub	sp, #32
 800a1c4:	af02      	add	r7, sp, #8
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a1cc:	4b1b      	ldr	r3, [pc, #108]	; (800a23c <SPI_EndRxTxTransaction+0x7c>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a1b      	ldr	r2, [pc, #108]	; (800a240 <SPI_EndRxTxTransaction+0x80>)
 800a1d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1d6:	0d5b      	lsrs	r3, r3, #21
 800a1d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a1dc:	fb02 f303 	mul.w	r3, r2, r3
 800a1e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1ea:	d112      	bne.n	800a212 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	2180      	movs	r1, #128	; 0x80
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f7ff ff78 	bl	800a0ec <SPI_WaitFlagStateUntilTimeout>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d016      	beq.n	800a230 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a206:	f043 0220 	orr.w	r2, r3, #32
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a20e:	2303      	movs	r3, #3
 800a210:	e00f      	b.n	800a232 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d00a      	beq.n	800a22e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	3b01      	subs	r3, #1
 800a21c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a228:	2b80      	cmp	r3, #128	; 0x80
 800a22a:	d0f2      	beq.n	800a212 <SPI_EndRxTxTransaction+0x52>
 800a22c:	e000      	b.n	800a230 <SPI_EndRxTxTransaction+0x70>
        break;
 800a22e:	bf00      	nop
  }

  return HAL_OK;
 800a230:	2300      	movs	r3, #0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3718      	adds	r7, #24
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	20000004 	.word	0x20000004
 800a240:	165e9f81 	.word	0x165e9f81

0800a244 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800a24a:	f000 fb66 	bl	800a91a <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 800a24e:	4b17      	ldr	r3, [pc, #92]	; (800a2ac <MX_LWIP_Init+0x68>)
 800a250:	2200      	movs	r2, #0
 800a252:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800a254:	4b16      	ldr	r3, [pc, #88]	; (800a2b0 <MX_LWIP_Init+0x6c>)
 800a256:	2200      	movs	r2, #0
 800a258:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 800a25a:	4b16      	ldr	r3, [pc, #88]	; (800a2b4 <MX_LWIP_Init+0x70>)
 800a25c:	2200      	movs	r2, #0
 800a25e:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800a260:	4b15      	ldr	r3, [pc, #84]	; (800a2b8 <MX_LWIP_Init+0x74>)
 800a262:	9302      	str	r3, [sp, #8]
 800a264:	4b15      	ldr	r3, [pc, #84]	; (800a2bc <MX_LWIP_Init+0x78>)
 800a266:	9301      	str	r3, [sp, #4]
 800a268:	2300      	movs	r3, #0
 800a26a:	9300      	str	r3, [sp, #0]
 800a26c:	4b11      	ldr	r3, [pc, #68]	; (800a2b4 <MX_LWIP_Init+0x70>)
 800a26e:	4a10      	ldr	r2, [pc, #64]	; (800a2b0 <MX_LWIP_Init+0x6c>)
 800a270:	490e      	ldr	r1, [pc, #56]	; (800a2ac <MX_LWIP_Init+0x68>)
 800a272:	4813      	ldr	r0, [pc, #76]	; (800a2c0 <MX_LWIP_Init+0x7c>)
 800a274:	f000 fff6 	bl	800b264 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a278:	4811      	ldr	r0, [pc, #68]	; (800a2c0 <MX_LWIP_Init+0x7c>)
 800a27a:	f001 f9a9 	bl	800b5d0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a27e:	4b10      	ldr	r3, [pc, #64]	; (800a2c0 <MX_LWIP_Init+0x7c>)
 800a280:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a284:	089b      	lsrs	r3, r3, #2
 800a286:	f003 0301 	and.w	r3, r3, #1
 800a28a:	b2db      	uxtb	r3, r3
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d003      	beq.n	800a298 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a290:	480b      	ldr	r0, [pc, #44]	; (800a2c0 <MX_LWIP_Init+0x7c>)
 800a292:	f001 f9ad 	bl	800b5f0 <netif_set_up>
 800a296:	e002      	b.n	800a29e <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800a298:	4809      	ldr	r0, [pc, #36]	; (800a2c0 <MX_LWIP_Init+0x7c>)
 800a29a:	f001 fa15 	bl	800b6c8 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800a29e:	4808      	ldr	r0, [pc, #32]	; (800a2c0 <MX_LWIP_Init+0x7c>)
 800a2a0:	f008 fb82 	bl	80129a8 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a2a4:	bf00      	nop
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	200014a4 	.word	0x200014a4
 800a2b0:	200014a8 	.word	0x200014a8
 800a2b4:	200014ac 	.word	0x200014ac
 800a2b8:	08016365 	.word	0x08016365
 800a2bc:	0800a855 	.word	0x0800a855
 800a2c0:	200005b0 	.word	0x200005b0

0800a2c4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b08e      	sub	sp, #56	; 0x38
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	601a      	str	r2, [r3, #0]
 800a2d4:	605a      	str	r2, [r3, #4]
 800a2d6:	609a      	str	r2, [r3, #8]
 800a2d8:	60da      	str	r2, [r3, #12]
 800a2da:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a46      	ldr	r2, [pc, #280]	; (800a3fc <HAL_ETH_MspInit+0x138>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	f040 8085 	bne.w	800a3f2 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	623b      	str	r3, [r7, #32]
 800a2ec:	4b44      	ldr	r3, [pc, #272]	; (800a400 <HAL_ETH_MspInit+0x13c>)
 800a2ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2f0:	4a43      	ldr	r2, [pc, #268]	; (800a400 <HAL_ETH_MspInit+0x13c>)
 800a2f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a2f6:	6313      	str	r3, [r2, #48]	; 0x30
 800a2f8:	4b41      	ldr	r3, [pc, #260]	; (800a400 <HAL_ETH_MspInit+0x13c>)
 800a2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a300:	623b      	str	r3, [r7, #32]
 800a302:	6a3b      	ldr	r3, [r7, #32]
 800a304:	2300      	movs	r3, #0
 800a306:	61fb      	str	r3, [r7, #28]
 800a308:	4b3d      	ldr	r3, [pc, #244]	; (800a400 <HAL_ETH_MspInit+0x13c>)
 800a30a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a30c:	4a3c      	ldr	r2, [pc, #240]	; (800a400 <HAL_ETH_MspInit+0x13c>)
 800a30e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a312:	6313      	str	r3, [r2, #48]	; 0x30
 800a314:	4b3a      	ldr	r3, [pc, #232]	; (800a400 <HAL_ETH_MspInit+0x13c>)
 800a316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a318:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a31c:	61fb      	str	r3, [r7, #28]
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	2300      	movs	r3, #0
 800a322:	61bb      	str	r3, [r7, #24]
 800a324:	4b36      	ldr	r3, [pc, #216]	; (800a400 <HAL_ETH_MspInit+0x13c>)
 800a326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a328:	4a35      	ldr	r2, [pc, #212]	; (800a400 <HAL_ETH_MspInit+0x13c>)
 800a32a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a32e:	6313      	str	r3, [r2, #48]	; 0x30
 800a330:	4b33      	ldr	r3, [pc, #204]	; (800a400 <HAL_ETH_MspInit+0x13c>)
 800a332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a338:	61bb      	str	r3, [r7, #24]
 800a33a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a33c:	2300      	movs	r3, #0
 800a33e:	617b      	str	r3, [r7, #20]
 800a340:	4b2f      	ldr	r3, [pc, #188]	; (800a400 <HAL_ETH_MspInit+0x13c>)
 800a342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a344:	4a2e      	ldr	r2, [pc, #184]	; (800a400 <HAL_ETH_MspInit+0x13c>)
 800a346:	f043 0304 	orr.w	r3, r3, #4
 800a34a:	6313      	str	r3, [r2, #48]	; 0x30
 800a34c:	4b2c      	ldr	r3, [pc, #176]	; (800a400 <HAL_ETH_MspInit+0x13c>)
 800a34e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a350:	f003 0304 	and.w	r3, r3, #4
 800a354:	617b      	str	r3, [r7, #20]
 800a356:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a358:	2300      	movs	r3, #0
 800a35a:	613b      	str	r3, [r7, #16]
 800a35c:	4b28      	ldr	r3, [pc, #160]	; (800a400 <HAL_ETH_MspInit+0x13c>)
 800a35e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a360:	4a27      	ldr	r2, [pc, #156]	; (800a400 <HAL_ETH_MspInit+0x13c>)
 800a362:	f043 0301 	orr.w	r3, r3, #1
 800a366:	6313      	str	r3, [r2, #48]	; 0x30
 800a368:	4b25      	ldr	r3, [pc, #148]	; (800a400 <HAL_ETH_MspInit+0x13c>)
 800a36a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a36c:	f003 0301 	and.w	r3, r3, #1
 800a370:	613b      	str	r3, [r7, #16]
 800a372:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a374:	2300      	movs	r3, #0
 800a376:	60fb      	str	r3, [r7, #12]
 800a378:	4b21      	ldr	r3, [pc, #132]	; (800a400 <HAL_ETH_MspInit+0x13c>)
 800a37a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a37c:	4a20      	ldr	r2, [pc, #128]	; (800a400 <HAL_ETH_MspInit+0x13c>)
 800a37e:	f043 0302 	orr.w	r3, r3, #2
 800a382:	6313      	str	r3, [r2, #48]	; 0x30
 800a384:	4b1e      	ldr	r3, [pc, #120]	; (800a400 <HAL_ETH_MspInit+0x13c>)
 800a386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a388:	f003 0302 	and.w	r3, r3, #2
 800a38c:	60fb      	str	r3, [r7, #12]
 800a38e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800a390:	2332      	movs	r3, #50	; 0x32
 800a392:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a394:	2302      	movs	r3, #2
 800a396:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a398:	2300      	movs	r3, #0
 800a39a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a39c:	2303      	movs	r3, #3
 800a39e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a3a0:	230b      	movs	r3, #11
 800a3a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a3a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	4816      	ldr	r0, [pc, #88]	; (800a404 <HAL_ETH_MspInit+0x140>)
 800a3ac:	f7fe fd82 	bl	8008eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800a3b0:	2386      	movs	r3, #134	; 0x86
 800a3b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3b4:	2302      	movs	r3, #2
 800a3b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3bc:	2303      	movs	r3, #3
 800a3be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a3c0:	230b      	movs	r3, #11
 800a3c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a3c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	480f      	ldr	r0, [pc, #60]	; (800a408 <HAL_ETH_MspInit+0x144>)
 800a3cc:	f7fe fd72 	bl	8008eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800a3d0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a3d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3d6:	2302      	movs	r3, #2
 800a3d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3de:	2303      	movs	r3, #3
 800a3e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a3e2:	230b      	movs	r3, #11
 800a3e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a3e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	4807      	ldr	r0, [pc, #28]	; (800a40c <HAL_ETH_MspInit+0x148>)
 800a3ee:	f7fe fd61 	bl	8008eb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a3f2:	bf00      	nop
 800a3f4:	3738      	adds	r7, #56	; 0x38
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	40028000 	.word	0x40028000
 800a400:	40023800 	.word	0x40023800
 800a404:	40020800 	.word	0x40020800
 800a408:	40020000 	.word	0x40020000
 800a40c:	40020400 	.word	0x40020400

0800a410 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 800a410:	b580      	push	{r7, lr}
 800a412:	b086      	sub	sp, #24
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800a418:	2300      	movs	r3, #0
 800a41a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a41c:	4b4e      	ldr	r3, [pc, #312]	; (800a558 <low_level_init+0x148>)
 800a41e:	4a4f      	ldr	r2, [pc, #316]	; (800a55c <low_level_init+0x14c>)
 800a420:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800a422:	4b4d      	ldr	r3, [pc, #308]	; (800a558 <low_level_init+0x148>)
 800a424:	2201      	movs	r2, #1
 800a426:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = DP83848_PHY_ADDRESS;
 800a428:	4b4b      	ldr	r3, [pc, #300]	; (800a558 <low_level_init+0x148>)
 800a42a:	2201      	movs	r2, #1
 800a42c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800a42e:	2300      	movs	r3, #0
 800a430:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800a432:	2380      	movs	r3, #128	; 0x80
 800a434:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800a436:	23e1      	movs	r3, #225	; 0xe1
 800a438:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800a43a:	2300      	movs	r3, #0
 800a43c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800a43e:	2300      	movs	r3, #0
 800a440:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800a442:	2300      	movs	r3, #0
 800a444:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800a446:	4a44      	ldr	r2, [pc, #272]	; (800a558 <low_level_init+0x148>)
 800a448:	f107 0308 	add.w	r3, r7, #8
 800a44c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800a44e:	4b42      	ldr	r3, [pc, #264]	; (800a558 <low_level_init+0x148>)
 800a450:	2200      	movs	r2, #0
 800a452:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800a454:	4b40      	ldr	r3, [pc, #256]	; (800a558 <low_level_init+0x148>)
 800a456:	2200      	movs	r2, #0
 800a458:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800a45a:	4b3f      	ldr	r3, [pc, #252]	; (800a558 <low_level_init+0x148>)
 800a45c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a460:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a462:	483d      	ldr	r0, [pc, #244]	; (800a558 <low_level_init+0x148>)
 800a464:	f7fd fd92 	bl	8007f8c <HAL_ETH_Init>
 800a468:	4603      	mov	r3, r0
 800a46a:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 800a46c:	7dfb      	ldrb	r3, [r7, #23]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d108      	bne.n	800a484 <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a478:	f043 0304 	orr.w	r3, r3, #4
 800a47c:	b2da      	uxtb	r2, r3
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800a484:	2304      	movs	r3, #4
 800a486:	4a36      	ldr	r2, [pc, #216]	; (800a560 <low_level_init+0x150>)
 800a488:	4936      	ldr	r1, [pc, #216]	; (800a564 <low_level_init+0x154>)
 800a48a:	4833      	ldr	r0, [pc, #204]	; (800a558 <low_level_init+0x148>)
 800a48c:	f7fd ff1c 	bl	80082c8 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800a490:	2304      	movs	r3, #4
 800a492:	4a35      	ldr	r2, [pc, #212]	; (800a568 <low_level_init+0x158>)
 800a494:	4935      	ldr	r1, [pc, #212]	; (800a56c <low_level_init+0x15c>)
 800a496:	4830      	ldr	r0, [pc, #192]	; (800a558 <low_level_init+0x148>)
 800a498:	f7fd ff7f 	bl	800839a <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2206      	movs	r2, #6
 800a4a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a4a4:	4b2c      	ldr	r3, [pc, #176]	; (800a558 <low_level_init+0x148>)
 800a4a6:	695b      	ldr	r3, [r3, #20]
 800a4a8:	781a      	ldrb	r2, [r3, #0]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a4b0:	4b29      	ldr	r3, [pc, #164]	; (800a558 <low_level_init+0x148>)
 800a4b2:	695b      	ldr	r3, [r3, #20]
 800a4b4:	785a      	ldrb	r2, [r3, #1]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a4bc:	4b26      	ldr	r3, [pc, #152]	; (800a558 <low_level_init+0x148>)
 800a4be:	695b      	ldr	r3, [r3, #20]
 800a4c0:	789a      	ldrb	r2, [r3, #2]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a4c8:	4b23      	ldr	r3, [pc, #140]	; (800a558 <low_level_init+0x148>)
 800a4ca:	695b      	ldr	r3, [r3, #20]
 800a4cc:	78da      	ldrb	r2, [r3, #3]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a4d4:	4b20      	ldr	r3, [pc, #128]	; (800a558 <low_level_init+0x148>)
 800a4d6:	695b      	ldr	r3, [r3, #20]
 800a4d8:	791a      	ldrb	r2, [r3, #4]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a4e0:	4b1d      	ldr	r3, [pc, #116]	; (800a558 <low_level_init+0x148>)
 800a4e2:	695b      	ldr	r3, [r3, #20]
 800a4e4:	795a      	ldrb	r2, [r3, #5]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a4f2:	849a      	strh	r2, [r3, #36]	; 0x24
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a4fa:	f043 030a 	orr.w	r3, r3, #10
 800a4fe:	b2da      	uxtb	r2, r3
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800a506:	4814      	ldr	r0, [pc, #80]	; (800a558 <low_level_init+0x148>)
 800a508:	f7fe f9f0 	bl	80088ec <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  
  /**** Configure PHY to generate an interrupt when Eth Link state changes ****/
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MICR, &regvalue);
 800a50c:	f107 0310 	add.w	r3, r7, #16
 800a510:	461a      	mov	r2, r3
 800a512:	2111      	movs	r1, #17
 800a514:	4810      	ldr	r0, [pc, #64]	; (800a558 <low_level_init+0x148>)
 800a516:	f7fe f91b 	bl	8008750 <HAL_ETH_ReadPHYRegister>
  
  regvalue |= (PHY_MICR_INT_EN | PHY_MICR_INT_OE);
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	f043 0303 	orr.w	r3, r3, #3
 800a520:	613b      	str	r3, [r7, #16]

  /* Enable Interrupts */
  HAL_ETH_WritePHYRegister(&heth, PHY_MICR, regvalue );
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	461a      	mov	r2, r3
 800a526:	2111      	movs	r1, #17
 800a528:	480b      	ldr	r0, [pc, #44]	; (800a558 <low_level_init+0x148>)
 800a52a:	f7fe f979 	bl	8008820 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_MISR, &regvalue);
 800a52e:	f107 0310 	add.w	r3, r7, #16
 800a532:	461a      	mov	r2, r3
 800a534:	2112      	movs	r1, #18
 800a536:	4808      	ldr	r0, [pc, #32]	; (800a558 <low_level_init+0x148>)
 800a538:	f7fe f90a 	bl	8008750 <HAL_ETH_ReadPHYRegister>
  
  regvalue |= PHY_MISR_LINK_INT_EN;
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	f043 0320 	orr.w	r3, r3, #32
 800a542:	613b      	str	r3, [r7, #16]
    
  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_MISR, regvalue);
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	461a      	mov	r2, r3
 800a548:	2112      	movs	r1, #18
 800a54a:	4803      	ldr	r0, [pc, #12]	; (800a558 <low_level_init+0x148>)
 800a54c:	f7fe f968 	bl	8008820 <HAL_ETH_WritePHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800a550:	bf00      	nop
 800a552:	3718      	adds	r7, #24
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	20002d80 	.word	0x20002d80
 800a55c:	40028000 	.word	0x40028000
 800a560:	20002dc8 	.word	0x20002dc8
 800a564:	200014b0 	.word	0x200014b0
 800a568:	20001530 	.word	0x20001530
 800a56c:	20002d00 	.word	0x20002d00

0800a570 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b08a      	sub	sp, #40	; 0x28
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800a57a:	4b4b      	ldr	r3, [pc, #300]	; (800a6a8 <low_level_output+0x138>)
 800a57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a57e:	689b      	ldr	r3, [r3, #8]
 800a580:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800a582:	2300      	movs	r3, #0
 800a584:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800a586:	2300      	movs	r3, #0
 800a588:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800a58a:	2300      	movs	r3, #0
 800a58c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800a58e:	2300      	movs	r3, #0
 800a590:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800a592:	4b45      	ldr	r3, [pc, #276]	; (800a6a8 <low_level_output+0x138>)
 800a594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a596:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800a598:	2300      	movs	r3, #0
 800a59a:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	623b      	str	r3, [r7, #32]
 800a5a0:	e05a      	b.n	800a658 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	da03      	bge.n	800a5b2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800a5aa:	23f8      	movs	r3, #248	; 0xf8
 800a5ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800a5b0:	e05c      	b.n	800a66c <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800a5b2:	6a3b      	ldr	r3, [r7, #32]
 800a5b4:	895b      	ldrh	r3, [r3, #10]
 800a5b6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a5bc:	e02f      	b.n	800a61e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800a5be:	69fa      	ldr	r2, [r7, #28]
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	18d0      	adds	r0, r2, r3
 800a5c4:	6a3b      	ldr	r3, [r7, #32]
 800a5c6:	685a      	ldr	r2, [r3, #4]
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	18d1      	adds	r1, r2, r3
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800a5d2:	3304      	adds	r3, #4
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	f00b ffde 	bl	8016596 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a5e0:	69bb      	ldr	r3, [r7, #24]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	da03      	bge.n	800a5f0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800a5e8:	23f8      	movs	r3, #248	; 0xf8
 800a5ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800a5ee:	e03d      	b.n	800a66c <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800a5f6:	693a      	ldr	r2, [r7, #16]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800a600:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800a602:	68ba      	ldr	r2, [r7, #8]
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	1ad3      	subs	r3, r2, r3
 800a608:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a60c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800a60e:	697a      	ldr	r2, [r7, #20]
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	1ad3      	subs	r3, r2, r3
 800a614:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a618:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800a61a:	2300      	movs	r3, #0
 800a61c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a61e:	68fa      	ldr	r2, [r7, #12]
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	4413      	add	r3, r2
 800a624:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a628:	4293      	cmp	r3, r2
 800a62a:	d8c8      	bhi.n	800a5be <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800a62c:	69fa      	ldr	r2, [r7, #28]
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	18d0      	adds	r0, r2, r3
 800a632:	6a3b      	ldr	r3, [r7, #32]
 800a634:	685a      	ldr	r2, [r3, #4]
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	4413      	add	r3, r2
 800a63a:	68fa      	ldr	r2, [r7, #12]
 800a63c:	4619      	mov	r1, r3
 800a63e:	f00b ffaa 	bl	8016596 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800a642:	693a      	ldr	r2, [r7, #16]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	4413      	add	r3, r2
 800a648:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800a64a:	697a      	ldr	r2, [r7, #20]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	4413      	add	r3, r2
 800a650:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800a652:	6a3b      	ldr	r3, [r7, #32]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	623b      	str	r3, [r7, #32]
 800a658:	6a3b      	ldr	r3, [r7, #32]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d1a1      	bne.n	800a5a2 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800a65e:	6979      	ldr	r1, [r7, #20]
 800a660:	4811      	ldr	r0, [pc, #68]	; (800a6a8 <low_level_output+0x138>)
 800a662:	f7fd ff07 	bl	8008474 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800a666:	2300      	movs	r3, #0
 800a668:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800a66c:	4b0e      	ldr	r3, [pc, #56]	; (800a6a8 <low_level_output+0x138>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a674:	3314      	adds	r3, #20
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f003 0320 	and.w	r3, r3, #32
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d00d      	beq.n	800a69c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800a680:	4b09      	ldr	r3, [pc, #36]	; (800a6a8 <low_level_output+0x138>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a688:	3314      	adds	r3, #20
 800a68a:	2220      	movs	r2, #32
 800a68c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800a68e:	4b06      	ldr	r3, [pc, #24]	; (800a6a8 <low_level_output+0x138>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a696:	3304      	adds	r3, #4
 800a698:	2200      	movs	r2, #0
 800a69a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800a69c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3728      	adds	r7, #40	; 0x28
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	20002d80 	.word	0x20002d80

0800a6ac <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b08c      	sub	sp, #48	; 0x30
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 800a6d0:	484f      	ldr	r0, [pc, #316]	; (800a810 <low_level_input+0x164>)
 800a6d2:	f7fd ffb9 	bl	8008648 <HAL_ETH_GetReceivedFrame>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d001      	beq.n	800a6e0 <low_level_input+0x34>
  
    return NULL;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	e092      	b.n	800a806 <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800a6e0:	4b4b      	ldr	r3, [pc, #300]	; (800a810 <low_level_input+0x164>)
 800a6e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6e4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800a6e6:	4b4a      	ldr	r3, [pc, #296]	; (800a810 <low_level_input+0x164>)
 800a6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ea:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 800a6ec:	89fb      	ldrh	r3, [r7, #14]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d007      	beq.n	800a702 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800a6f2:	89fb      	ldrh	r3, [r7, #14]
 800a6f4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	2000      	movs	r0, #0
 800a6fc:	f001 f8a0 	bl	800b840 <pbuf_alloc>
 800a700:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 800a702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a704:	2b00      	cmp	r3, #0
 800a706:	d04b      	beq.n	800a7a0 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800a708:	4b41      	ldr	r3, [pc, #260]	; (800a810 <low_level_input+0x164>)
 800a70a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a70c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800a70e:	2300      	movs	r3, #0
 800a710:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800a712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a714:	62bb      	str	r3, [r7, #40]	; 0x28
 800a716:	e040      	b.n	800a79a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800a718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71a:	895b      	ldrh	r3, [r3, #10]
 800a71c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800a71e:	2300      	movs	r3, #0
 800a720:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800a722:	e021      	b.n	800a768 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800a724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a726:	685a      	ldr	r2, [r3, #4]
 800a728:	69bb      	ldr	r3, [r7, #24]
 800a72a:	18d0      	adds	r0, r2, r3
 800a72c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	18d1      	adds	r1, r2, r3
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800a738:	3304      	adds	r3, #4
 800a73a:	461a      	mov	r2, r3
 800a73c:	f00b ff2b 	bl	8016596 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800a740:	6a3b      	ldr	r3, [r7, #32]
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800a746:	6a3b      	ldr	r3, [r7, #32]
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800a74c:	69fa      	ldr	r2, [r7, #28]
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	4413      	add	r3, r2
 800a752:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800a756:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800a758:	69ba      	ldr	r2, [r7, #24]
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	1ad3      	subs	r3, r2, r3
 800a75e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a762:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800a764:	2300      	movs	r3, #0
 800a766:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800a768:	697a      	ldr	r2, [r7, #20]
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	4413      	add	r3, r2
 800a76e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a772:	4293      	cmp	r3, r2
 800a774:	d8d6      	bhi.n	800a724 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800a776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a778:	685a      	ldr	r2, [r3, #4]
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	18d0      	adds	r0, r2, r3
 800a77e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	4413      	add	r3, r2
 800a784:	697a      	ldr	r2, [r7, #20]
 800a786:	4619      	mov	r1, r3
 800a788:	f00b ff05 	bl	8016596 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800a78c:	69fa      	ldr	r2, [r7, #28]
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	4413      	add	r3, r2
 800a792:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800a794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	62bb      	str	r3, [r7, #40]	; 0x28
 800a79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d1bb      	bne.n	800a718 <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800a7a0:	4b1b      	ldr	r3, [pc, #108]	; (800a810 <low_level_input+0x164>)
 800a7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7a4:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	613b      	str	r3, [r7, #16]
 800a7aa:	e00b      	b.n	800a7c4 <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800a7ac:	6a3b      	ldr	r3, [r7, #32]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a7b4:	6a3b      	ldr	r3, [r7, #32]
 800a7b6:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800a7b8:	6a3b      	ldr	r3, [r7, #32]
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	613b      	str	r3, [r7, #16]
 800a7c4:	4b12      	ldr	r3, [pc, #72]	; (800a810 <low_level_input+0x164>)
 800a7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c8:	693a      	ldr	r2, [r7, #16]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d3ee      	bcc.n	800a7ac <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 800a7ce:	4b10      	ldr	r3, [pc, #64]	; (800a810 <low_level_input+0x164>)
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800a7d4:	4b0e      	ldr	r3, [pc, #56]	; (800a810 <low_level_input+0x164>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7dc:	3314      	adds	r3, #20
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d00d      	beq.n	800a804 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800a7e8:	4b09      	ldr	r3, [pc, #36]	; (800a810 <low_level_input+0x164>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7f0:	3314      	adds	r3, #20
 800a7f2:	2280      	movs	r2, #128	; 0x80
 800a7f4:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800a7f6:	4b06      	ldr	r3, [pc, #24]	; (800a810 <low_level_input+0x164>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7fe:	3308      	adds	r3, #8
 800a800:	2200      	movs	r2, #0
 800a802:	601a      	str	r2, [r3, #0]
  }
  return p;
 800a804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a806:	4618      	mov	r0, r3
 800a808:	3730      	adds	r7, #48	; 0x30
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	20002d80 	.word	0x20002d80

0800a814 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f7ff ff45 	bl	800a6ac <low_level_input>
 800a822:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d010      	beq.n	800a84c <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	691b      	ldr	r3, [r3, #16]
 800a82e:	6879      	ldr	r1, [r7, #4]
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	4798      	blx	r3
 800a834:	4603      	mov	r3, r0
 800a836:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 800a838:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d006      	beq.n	800a84e <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800a840:	68f8      	ldr	r0, [r7, #12]
 800a842:	f001 fadd 	bl	800be00 <pbuf_free>
    p = NULL;    
 800a846:	2300      	movs	r3, #0
 800a848:	60fb      	str	r3, [r7, #12]
 800a84a:	e000      	b.n	800a84e <ethernetif_input+0x3a>
  if (p == NULL) return;
 800a84c:	bf00      	nop
  }
}
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d106      	bne.n	800a870 <ethernetif_init+0x1c>
 800a862:	4b0e      	ldr	r3, [pc, #56]	; (800a89c <ethernetif_init+0x48>)
 800a864:	f240 220d 	movw	r2, #525	; 0x20d
 800a868:	490d      	ldr	r1, [pc, #52]	; (800a8a0 <ethernetif_init+0x4c>)
 800a86a:	480e      	ldr	r0, [pc, #56]	; (800a8a4 <ethernetif_init+0x50>)
 800a86c:	f00b ff4e 	bl	801670c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2273      	movs	r2, #115	; 0x73
 800a874:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2274      	movs	r2, #116	; 0x74
 800a87c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	4a09      	ldr	r2, [pc, #36]	; (800a8a8 <ethernetif_init+0x54>)
 800a884:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	4a08      	ldr	r2, [pc, #32]	; (800a8ac <ethernetif_init+0x58>)
 800a88a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f7ff fdbf 	bl	800a410 <low_level_init>

  return ERR_OK;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	080174ec 	.word	0x080174ec
 800a8a0:	08017508 	.word	0x08017508
 800a8a4:	08017518 	.word	0x08017518
 800a8a8:	080147f9 	.word	0x080147f9
 800a8ac:	0800a571 	.word	0x0800a571

0800a8b0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a8b4:	f7fd fa56 	bl	8007d64 <HAL_GetTick>
 800a8b8:	4603      	mov	r3, r0
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a8be:	b480      	push	{r7}
 800a8c0:	b083      	sub	sp, #12
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a8c8:	88fb      	ldrh	r3, [r7, #6]
 800a8ca:	021b      	lsls	r3, r3, #8
 800a8cc:	b21a      	sxth	r2, r3
 800a8ce:	88fb      	ldrh	r3, [r7, #6]
 800a8d0:	0a1b      	lsrs	r3, r3, #8
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	b21b      	sxth	r3, r3
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	b21b      	sxth	r3, r3
 800a8da:	b29b      	uxth	r3, r3
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	061a      	lsls	r2, r3, #24
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	021b      	lsls	r3, r3, #8
 800a8f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a8fc:	431a      	orrs	r2, r3
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	0a1b      	lsrs	r3, r3, #8
 800a902:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a906:	431a      	orrs	r2, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	0e1b      	lsrs	r3, r3, #24
 800a90c:	4313      	orrs	r3, r2
}
 800a90e:	4618      	mov	r0, r3
 800a910:	370c      	adds	r7, #12
 800a912:	46bd      	mov	sp, r7
 800a914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a918:	4770      	bx	lr

0800a91a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a91a:	b580      	push	{r7, lr}
 800a91c:	b082      	sub	sp, #8
 800a91e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a920:	2300      	movs	r3, #0
 800a922:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800a924:	f000 f8d4 	bl	800aad0 <mem_init>
  memp_init();
 800a928:	f000 fbda 	bl	800b0e0 <memp_init>
  pbuf_init();
  netif_init();
 800a92c:	f000 fc92 	bl	800b254 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a930:	f006 ffa6 	bl	8011880 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a934:	f001 fd02 	bl	800c33c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a938:	f006 ff1a 	bl	8011770 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a93c:	bf00      	nop
 800a93e:	3708      	adds	r7, #8
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	4603      	mov	r3, r0
 800a94c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a94e:	4b05      	ldr	r3, [pc, #20]	; (800a964 <ptr_to_mem+0x20>)
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	88fb      	ldrh	r3, [r7, #6]
 800a954:	4413      	add	r3, r2
}
 800a956:	4618      	mov	r0, r3
 800a958:	370c      	adds	r7, #12
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop
 800a964:	20000428 	.word	0x20000428

0800a968 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	4a05      	ldr	r2, [pc, #20]	; (800a988 <mem_to_ptr+0x20>)
 800a974:	6812      	ldr	r2, [r2, #0]
 800a976:	1a9b      	subs	r3, r3, r2
 800a978:	b29b      	uxth	r3, r3
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	370c      	adds	r7, #12
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	20000428 	.word	0x20000428

0800a98c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a98c:	b590      	push	{r4, r7, lr}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a994:	4b45      	ldr	r3, [pc, #276]	; (800aaac <plug_holes+0x120>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	687a      	ldr	r2, [r7, #4]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d206      	bcs.n	800a9ac <plug_holes+0x20>
 800a99e:	4b44      	ldr	r3, [pc, #272]	; (800aab0 <plug_holes+0x124>)
 800a9a0:	f240 12df 	movw	r2, #479	; 0x1df
 800a9a4:	4943      	ldr	r1, [pc, #268]	; (800aab4 <plug_holes+0x128>)
 800a9a6:	4844      	ldr	r0, [pc, #272]	; (800aab8 <plug_holes+0x12c>)
 800a9a8:	f00b feb0 	bl	801670c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a9ac:	4b43      	ldr	r3, [pc, #268]	; (800aabc <plug_holes+0x130>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d306      	bcc.n	800a9c4 <plug_holes+0x38>
 800a9b6:	4b3e      	ldr	r3, [pc, #248]	; (800aab0 <plug_holes+0x124>)
 800a9b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a9bc:	4940      	ldr	r1, [pc, #256]	; (800aac0 <plug_holes+0x134>)
 800a9be:	483e      	ldr	r0, [pc, #248]	; (800aab8 <plug_holes+0x12c>)
 800a9c0:	f00b fea4 	bl	801670c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	791b      	ldrb	r3, [r3, #4]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d006      	beq.n	800a9da <plug_holes+0x4e>
 800a9cc:	4b38      	ldr	r3, [pc, #224]	; (800aab0 <plug_holes+0x124>)
 800a9ce:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a9d2:	493c      	ldr	r1, [pc, #240]	; (800aac4 <plug_holes+0x138>)
 800a9d4:	4838      	ldr	r0, [pc, #224]	; (800aab8 <plug_holes+0x12c>)
 800a9d6:	f00b fe99 	bl	801670c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	881b      	ldrh	r3, [r3, #0]
 800a9de:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a9e2:	d906      	bls.n	800a9f2 <plug_holes+0x66>
 800a9e4:	4b32      	ldr	r3, [pc, #200]	; (800aab0 <plug_holes+0x124>)
 800a9e6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a9ea:	4937      	ldr	r1, [pc, #220]	; (800aac8 <plug_holes+0x13c>)
 800a9ec:	4832      	ldr	r0, [pc, #200]	; (800aab8 <plug_holes+0x12c>)
 800a9ee:	f00b fe8d 	bl	801670c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	881b      	ldrh	r3, [r3, #0]
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7ff ffa4 	bl	800a944 <ptr_to_mem>
 800a9fc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d024      	beq.n	800aa50 <plug_holes+0xc4>
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	791b      	ldrb	r3, [r3, #4]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d120      	bne.n	800aa50 <plug_holes+0xc4>
 800aa0e:	4b2b      	ldr	r3, [pc, #172]	; (800aabc <plug_holes+0x130>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	68fa      	ldr	r2, [r7, #12]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d01b      	beq.n	800aa50 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800aa18:	4b2c      	ldr	r3, [pc, #176]	; (800aacc <plug_holes+0x140>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d102      	bne.n	800aa28 <plug_holes+0x9c>
      lfree = mem;
 800aa22:	4a2a      	ldr	r2, [pc, #168]	; (800aacc <plug_holes+0x140>)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	881a      	ldrh	r2, [r3, #0]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	881b      	ldrh	r3, [r3, #0]
 800aa34:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aa38:	d00a      	beq.n	800aa50 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	881b      	ldrh	r3, [r3, #0]
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7ff ff80 	bl	800a944 <ptr_to_mem>
 800aa44:	4604      	mov	r4, r0
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f7ff ff8e 	bl	800a968 <mem_to_ptr>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	885b      	ldrh	r3, [r3, #2]
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7ff ff75 	bl	800a944 <ptr_to_mem>
 800aa5a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800aa5c:	68ba      	ldr	r2, [r7, #8]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d01f      	beq.n	800aaa4 <plug_holes+0x118>
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	791b      	ldrb	r3, [r3, #4]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d11b      	bne.n	800aaa4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800aa6c:	4b17      	ldr	r3, [pc, #92]	; (800aacc <plug_holes+0x140>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d102      	bne.n	800aa7c <plug_holes+0xf0>
      lfree = pmem;
 800aa76:	4a15      	ldr	r2, [pc, #84]	; (800aacc <plug_holes+0x140>)
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	881a      	ldrh	r2, [r3, #0]
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	881b      	ldrh	r3, [r3, #0]
 800aa88:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aa8c:	d00a      	beq.n	800aaa4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	881b      	ldrh	r3, [r3, #0]
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7ff ff56 	bl	800a944 <ptr_to_mem>
 800aa98:	4604      	mov	r4, r0
 800aa9a:	68b8      	ldr	r0, [r7, #8]
 800aa9c:	f7ff ff64 	bl	800a968 <mem_to_ptr>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800aaa4:	bf00      	nop
 800aaa6:	3714      	adds	r7, #20
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd90      	pop	{r4, r7, pc}
 800aaac:	20000428 	.word	0x20000428
 800aab0:	08017540 	.word	0x08017540
 800aab4:	08017570 	.word	0x08017570
 800aab8:	08017588 	.word	0x08017588
 800aabc:	2000042c 	.word	0x2000042c
 800aac0:	080175b0 	.word	0x080175b0
 800aac4:	080175cc 	.word	0x080175cc
 800aac8:	080175e8 	.word	0x080175e8
 800aacc:	20000430 	.word	0x20000430

0800aad0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800aad6:	4b18      	ldr	r3, [pc, #96]	; (800ab38 <mem_init+0x68>)
 800aad8:	3303      	adds	r3, #3
 800aada:	f023 0303 	bic.w	r3, r3, #3
 800aade:	461a      	mov	r2, r3
 800aae0:	4b16      	ldr	r3, [pc, #88]	; (800ab3c <mem_init+0x6c>)
 800aae2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800aae4:	4b15      	ldr	r3, [pc, #84]	; (800ab3c <mem_init+0x6c>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800aaf0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2200      	movs	r2, #0
 800aafc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800aafe:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800ab02:	f7ff ff1f 	bl	800a944 <ptr_to_mem>
 800ab06:	4602      	mov	r2, r0
 800ab08:	4b0d      	ldr	r3, [pc, #52]	; (800ab40 <mem_init+0x70>)
 800ab0a:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800ab0c:	4b0c      	ldr	r3, [pc, #48]	; (800ab40 <mem_init+0x70>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2201      	movs	r2, #1
 800ab12:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ab14:	4b0a      	ldr	r3, [pc, #40]	; (800ab40 <mem_init+0x70>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ab1c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ab1e:	4b08      	ldr	r3, [pc, #32]	; (800ab40 <mem_init+0x70>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ab26:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ab28:	4b04      	ldr	r3, [pc, #16]	; (800ab3c <mem_init+0x6c>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a05      	ldr	r2, [pc, #20]	; (800ab44 <mem_init+0x74>)
 800ab2e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800ab30:	bf00      	nop
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	200045b0 	.word	0x200045b0
 800ab3c:	20000428 	.word	0x20000428
 800ab40:	2000042c 	.word	0x2000042c
 800ab44:	20000430 	.word	0x20000430

0800ab48 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b086      	sub	sp, #24
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	f7ff ff09 	bl	800a968 <mem_to_ptr>
 800ab56:	4603      	mov	r3, r0
 800ab58:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	881b      	ldrh	r3, [r3, #0]
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7ff fef0 	bl	800a944 <ptr_to_mem>
 800ab64:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	885b      	ldrh	r3, [r3, #2]
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7ff feea 	bl	800a944 <ptr_to_mem>
 800ab70:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	881b      	ldrh	r3, [r3, #0]
 800ab76:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ab7a:	d818      	bhi.n	800abae <mem_link_valid+0x66>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	885b      	ldrh	r3, [r3, #2]
 800ab80:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ab84:	d813      	bhi.n	800abae <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ab8a:	8afa      	ldrh	r2, [r7, #22]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d004      	beq.n	800ab9a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	881b      	ldrh	r3, [r3, #0]
 800ab94:	8afa      	ldrh	r2, [r7, #22]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d109      	bne.n	800abae <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ab9a:	4b08      	ldr	r3, [pc, #32]	; (800abbc <mem_link_valid+0x74>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ab9e:	693a      	ldr	r2, [r7, #16]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d006      	beq.n	800abb2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	885b      	ldrh	r3, [r3, #2]
 800aba8:	8afa      	ldrh	r2, [r7, #22]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d001      	beq.n	800abb2 <mem_link_valid+0x6a>
    return 0;
 800abae:	2300      	movs	r3, #0
 800abb0:	e000      	b.n	800abb4 <mem_link_valid+0x6c>
  }
  return 1;
 800abb2:	2301      	movs	r3, #1
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3718      	adds	r7, #24
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	2000042c 	.word	0x2000042c

0800abc0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b084      	sub	sp, #16
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d04c      	beq.n	800ac68 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f003 0303 	and.w	r3, r3, #3
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d007      	beq.n	800abe8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800abd8:	4b25      	ldr	r3, [pc, #148]	; (800ac70 <mem_free+0xb0>)
 800abda:	f240 2273 	movw	r2, #627	; 0x273
 800abde:	4925      	ldr	r1, [pc, #148]	; (800ac74 <mem_free+0xb4>)
 800abe0:	4825      	ldr	r0, [pc, #148]	; (800ac78 <mem_free+0xb8>)
 800abe2:	f00b fd93 	bl	801670c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800abe6:	e040      	b.n	800ac6a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	3b08      	subs	r3, #8
 800abec:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800abee:	4b23      	ldr	r3, [pc, #140]	; (800ac7c <mem_free+0xbc>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d306      	bcc.n	800ac06 <mem_free+0x46>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f103 020c 	add.w	r2, r3, #12
 800abfe:	4b20      	ldr	r3, [pc, #128]	; (800ac80 <mem_free+0xc0>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d907      	bls.n	800ac16 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ac06:	4b1a      	ldr	r3, [pc, #104]	; (800ac70 <mem_free+0xb0>)
 800ac08:	f240 227f 	movw	r2, #639	; 0x27f
 800ac0c:	491d      	ldr	r1, [pc, #116]	; (800ac84 <mem_free+0xc4>)
 800ac0e:	481a      	ldr	r0, [pc, #104]	; (800ac78 <mem_free+0xb8>)
 800ac10:	f00b fd7c 	bl	801670c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ac14:	e029      	b.n	800ac6a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	791b      	ldrb	r3, [r3, #4]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d107      	bne.n	800ac2e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ac1e:	4b14      	ldr	r3, [pc, #80]	; (800ac70 <mem_free+0xb0>)
 800ac20:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ac24:	4918      	ldr	r1, [pc, #96]	; (800ac88 <mem_free+0xc8>)
 800ac26:	4814      	ldr	r0, [pc, #80]	; (800ac78 <mem_free+0xb8>)
 800ac28:	f00b fd70 	bl	801670c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ac2c:	e01d      	b.n	800ac6a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f7ff ff8a 	bl	800ab48 <mem_link_valid>
 800ac34:	4603      	mov	r3, r0
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d107      	bne.n	800ac4a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ac3a:	4b0d      	ldr	r3, [pc, #52]	; (800ac70 <mem_free+0xb0>)
 800ac3c:	f240 2295 	movw	r2, #661	; 0x295
 800ac40:	4912      	ldr	r1, [pc, #72]	; (800ac8c <mem_free+0xcc>)
 800ac42:	480d      	ldr	r0, [pc, #52]	; (800ac78 <mem_free+0xb8>)
 800ac44:	f00b fd62 	bl	801670c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ac48:	e00f      	b.n	800ac6a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ac50:	4b0f      	ldr	r3, [pc, #60]	; (800ac90 <mem_free+0xd0>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	68fa      	ldr	r2, [r7, #12]
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d202      	bcs.n	800ac60 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ac5a:	4a0d      	ldr	r2, [pc, #52]	; (800ac90 <mem_free+0xd0>)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f7ff fe93 	bl	800a98c <plug_holes>
 800ac66:	e000      	b.n	800ac6a <mem_free+0xaa>
    return;
 800ac68:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800ac6a:	3710      	adds	r7, #16
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	08017540 	.word	0x08017540
 800ac74:	08017614 	.word	0x08017614
 800ac78:	08017588 	.word	0x08017588
 800ac7c:	20000428 	.word	0x20000428
 800ac80:	2000042c 	.word	0x2000042c
 800ac84:	08017638 	.word	0x08017638
 800ac88:	08017654 	.word	0x08017654
 800ac8c:	0801767c 	.word	0x0801767c
 800ac90:	20000430 	.word	0x20000430

0800ac94 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b088      	sub	sp, #32
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800aca0:	887b      	ldrh	r3, [r7, #2]
 800aca2:	3303      	adds	r3, #3
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	f023 0303 	bic.w	r3, r3, #3
 800acaa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800acac:	8bfb      	ldrh	r3, [r7, #30]
 800acae:	2b0b      	cmp	r3, #11
 800acb0:	d801      	bhi.n	800acb6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800acb2:	230c      	movs	r3, #12
 800acb4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800acb6:	8bfb      	ldrh	r3, [r7, #30]
 800acb8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800acbc:	d803      	bhi.n	800acc6 <mem_trim+0x32>
 800acbe:	8bfa      	ldrh	r2, [r7, #30]
 800acc0:	887b      	ldrh	r3, [r7, #2]
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d201      	bcs.n	800acca <mem_trim+0x36>
    return NULL;
 800acc6:	2300      	movs	r3, #0
 800acc8:	e0cc      	b.n	800ae64 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800acca:	4b68      	ldr	r3, [pc, #416]	; (800ae6c <mem_trim+0x1d8>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	429a      	cmp	r2, r3
 800acd2:	d304      	bcc.n	800acde <mem_trim+0x4a>
 800acd4:	4b66      	ldr	r3, [pc, #408]	; (800ae70 <mem_trim+0x1dc>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d306      	bcc.n	800acec <mem_trim+0x58>
 800acde:	4b65      	ldr	r3, [pc, #404]	; (800ae74 <mem_trim+0x1e0>)
 800ace0:	f240 22d2 	movw	r2, #722	; 0x2d2
 800ace4:	4964      	ldr	r1, [pc, #400]	; (800ae78 <mem_trim+0x1e4>)
 800ace6:	4865      	ldr	r0, [pc, #404]	; (800ae7c <mem_trim+0x1e8>)
 800ace8:	f00b fd10 	bl	801670c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800acec:	4b5f      	ldr	r3, [pc, #380]	; (800ae6c <mem_trim+0x1d8>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d304      	bcc.n	800ad00 <mem_trim+0x6c>
 800acf6:	4b5e      	ldr	r3, [pc, #376]	; (800ae70 <mem_trim+0x1dc>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d301      	bcc.n	800ad04 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	e0af      	b.n	800ae64 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	3b08      	subs	r3, #8
 800ad08:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ad0a:	69b8      	ldr	r0, [r7, #24]
 800ad0c:	f7ff fe2c 	bl	800a968 <mem_to_ptr>
 800ad10:	4603      	mov	r3, r0
 800ad12:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	881a      	ldrh	r2, [r3, #0]
 800ad18:	8afb      	ldrh	r3, [r7, #22]
 800ad1a:	1ad3      	subs	r3, r2, r3
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	3b08      	subs	r3, #8
 800ad20:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ad22:	8bfa      	ldrh	r2, [r7, #30]
 800ad24:	8abb      	ldrh	r3, [r7, #20]
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d906      	bls.n	800ad38 <mem_trim+0xa4>
 800ad2a:	4b52      	ldr	r3, [pc, #328]	; (800ae74 <mem_trim+0x1e0>)
 800ad2c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800ad30:	4953      	ldr	r1, [pc, #332]	; (800ae80 <mem_trim+0x1ec>)
 800ad32:	4852      	ldr	r0, [pc, #328]	; (800ae7c <mem_trim+0x1e8>)
 800ad34:	f00b fcea 	bl	801670c <iprintf>
  if (newsize > size) {
 800ad38:	8bfa      	ldrh	r2, [r7, #30]
 800ad3a:	8abb      	ldrh	r3, [r7, #20]
 800ad3c:	429a      	cmp	r2, r3
 800ad3e:	d901      	bls.n	800ad44 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800ad40:	2300      	movs	r3, #0
 800ad42:	e08f      	b.n	800ae64 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800ad44:	8bfa      	ldrh	r2, [r7, #30]
 800ad46:	8abb      	ldrh	r3, [r7, #20]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d101      	bne.n	800ad50 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	e089      	b.n	800ae64 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800ad50:	69bb      	ldr	r3, [r7, #24]
 800ad52:	881b      	ldrh	r3, [r3, #0]
 800ad54:	4618      	mov	r0, r3
 800ad56:	f7ff fdf5 	bl	800a944 <ptr_to_mem>
 800ad5a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	791b      	ldrb	r3, [r3, #4]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d13f      	bne.n	800ade4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ad64:	69bb      	ldr	r3, [r7, #24]
 800ad66:	881b      	ldrh	r3, [r3, #0]
 800ad68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ad6c:	d106      	bne.n	800ad7c <mem_trim+0xe8>
 800ad6e:	4b41      	ldr	r3, [pc, #260]	; (800ae74 <mem_trim+0x1e0>)
 800ad70:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ad74:	4943      	ldr	r1, [pc, #268]	; (800ae84 <mem_trim+0x1f0>)
 800ad76:	4841      	ldr	r0, [pc, #260]	; (800ae7c <mem_trim+0x1e8>)
 800ad78:	f00b fcc8 	bl	801670c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	881b      	ldrh	r3, [r3, #0]
 800ad80:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ad82:	8afa      	ldrh	r2, [r7, #22]
 800ad84:	8bfb      	ldrh	r3, [r7, #30]
 800ad86:	4413      	add	r3, r2
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	3308      	adds	r3, #8
 800ad8c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ad8e:	4b3e      	ldr	r3, [pc, #248]	; (800ae88 <mem_trim+0x1f4>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	693a      	ldr	r2, [r7, #16]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d106      	bne.n	800ada6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800ad98:	89fb      	ldrh	r3, [r7, #14]
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7ff fdd2 	bl	800a944 <ptr_to_mem>
 800ada0:	4602      	mov	r2, r0
 800ada2:	4b39      	ldr	r3, [pc, #228]	; (800ae88 <mem_trim+0x1f4>)
 800ada4:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ada6:	89fb      	ldrh	r3, [r7, #14]
 800ada8:	4618      	mov	r0, r3
 800adaa:	f7ff fdcb 	bl	800a944 <ptr_to_mem>
 800adae:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	2200      	movs	r2, #0
 800adb4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	89ba      	ldrh	r2, [r7, #12]
 800adba:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	8afa      	ldrh	r2, [r7, #22]
 800adc0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	89fa      	ldrh	r2, [r7, #14]
 800adc6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	881b      	ldrh	r3, [r3, #0]
 800adcc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800add0:	d047      	beq.n	800ae62 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	881b      	ldrh	r3, [r3, #0]
 800add6:	4618      	mov	r0, r3
 800add8:	f7ff fdb4 	bl	800a944 <ptr_to_mem>
 800addc:	4602      	mov	r2, r0
 800adde:	89fb      	ldrh	r3, [r7, #14]
 800ade0:	8053      	strh	r3, [r2, #2]
 800ade2:	e03e      	b.n	800ae62 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ade4:	8bfb      	ldrh	r3, [r7, #30]
 800ade6:	f103 0214 	add.w	r2, r3, #20
 800adea:	8abb      	ldrh	r3, [r7, #20]
 800adec:	429a      	cmp	r2, r3
 800adee:	d838      	bhi.n	800ae62 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800adf0:	8afa      	ldrh	r2, [r7, #22]
 800adf2:	8bfb      	ldrh	r3, [r7, #30]
 800adf4:	4413      	add	r3, r2
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	3308      	adds	r3, #8
 800adfa:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	881b      	ldrh	r3, [r3, #0]
 800ae00:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae04:	d106      	bne.n	800ae14 <mem_trim+0x180>
 800ae06:	4b1b      	ldr	r3, [pc, #108]	; (800ae74 <mem_trim+0x1e0>)
 800ae08:	f240 3216 	movw	r2, #790	; 0x316
 800ae0c:	491d      	ldr	r1, [pc, #116]	; (800ae84 <mem_trim+0x1f0>)
 800ae0e:	481b      	ldr	r0, [pc, #108]	; (800ae7c <mem_trim+0x1e8>)
 800ae10:	f00b fc7c 	bl	801670c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800ae14:	89fb      	ldrh	r3, [r7, #14]
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7ff fd94 	bl	800a944 <ptr_to_mem>
 800ae1c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800ae1e:	4b1a      	ldr	r3, [pc, #104]	; (800ae88 <mem_trim+0x1f4>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	693a      	ldr	r2, [r7, #16]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d202      	bcs.n	800ae2e <mem_trim+0x19a>
      lfree = mem2;
 800ae28:	4a17      	ldr	r2, [pc, #92]	; (800ae88 <mem_trim+0x1f4>)
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	2200      	movs	r2, #0
 800ae32:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	881a      	ldrh	r2, [r3, #0]
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	8afa      	ldrh	r2, [r7, #22]
 800ae40:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ae42:	69bb      	ldr	r3, [r7, #24]
 800ae44:	89fa      	ldrh	r2, [r7, #14]
 800ae46:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	881b      	ldrh	r3, [r3, #0]
 800ae4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae50:	d007      	beq.n	800ae62 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	881b      	ldrh	r3, [r3, #0]
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7ff fd74 	bl	800a944 <ptr_to_mem>
 800ae5c:	4602      	mov	r2, r0
 800ae5e:	89fb      	ldrh	r3, [r7, #14]
 800ae60:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800ae62:	687b      	ldr	r3, [r7, #4]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3720      	adds	r7, #32
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	20000428 	.word	0x20000428
 800ae70:	2000042c 	.word	0x2000042c
 800ae74:	08017540 	.word	0x08017540
 800ae78:	080176b0 	.word	0x080176b0
 800ae7c:	08017588 	.word	0x08017588
 800ae80:	080176c8 	.word	0x080176c8
 800ae84:	080176e8 	.word	0x080176e8
 800ae88:	20000430 	.word	0x20000430

0800ae8c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b088      	sub	sp, #32
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	4603      	mov	r3, r0
 800ae94:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ae96:	88fb      	ldrh	r3, [r7, #6]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d101      	bne.n	800aea0 <mem_malloc+0x14>
    return NULL;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	e0d9      	b.n	800b054 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800aea0:	88fb      	ldrh	r3, [r7, #6]
 800aea2:	3303      	adds	r3, #3
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	f023 0303 	bic.w	r3, r3, #3
 800aeaa:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800aeac:	8bbb      	ldrh	r3, [r7, #28]
 800aeae:	2b0b      	cmp	r3, #11
 800aeb0:	d801      	bhi.n	800aeb6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800aeb2:	230c      	movs	r3, #12
 800aeb4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800aeb6:	8bbb      	ldrh	r3, [r7, #28]
 800aeb8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aebc:	d803      	bhi.n	800aec6 <mem_malloc+0x3a>
 800aebe:	8bba      	ldrh	r2, [r7, #28]
 800aec0:	88fb      	ldrh	r3, [r7, #6]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d201      	bcs.n	800aeca <mem_malloc+0x3e>
    return NULL;
 800aec6:	2300      	movs	r3, #0
 800aec8:	e0c4      	b.n	800b054 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800aeca:	4b64      	ldr	r3, [pc, #400]	; (800b05c <mem_malloc+0x1d0>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4618      	mov	r0, r3
 800aed0:	f7ff fd4a 	bl	800a968 <mem_to_ptr>
 800aed4:	4603      	mov	r3, r0
 800aed6:	83fb      	strh	r3, [r7, #30]
 800aed8:	e0b4      	b.n	800b044 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800aeda:	8bfb      	ldrh	r3, [r7, #30]
 800aedc:	4618      	mov	r0, r3
 800aede:	f7ff fd31 	bl	800a944 <ptr_to_mem>
 800aee2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	791b      	ldrb	r3, [r3, #4]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	f040 80a4 	bne.w	800b036 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	881b      	ldrh	r3, [r3, #0]
 800aef2:	461a      	mov	r2, r3
 800aef4:	8bfb      	ldrh	r3, [r7, #30]
 800aef6:	1ad3      	subs	r3, r2, r3
 800aef8:	f1a3 0208 	sub.w	r2, r3, #8
 800aefc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800aefe:	429a      	cmp	r2, r3
 800af00:	f0c0 8099 	bcc.w	800b036 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	881b      	ldrh	r3, [r3, #0]
 800af08:	461a      	mov	r2, r3
 800af0a:	8bfb      	ldrh	r3, [r7, #30]
 800af0c:	1ad3      	subs	r3, r2, r3
 800af0e:	f1a3 0208 	sub.w	r2, r3, #8
 800af12:	8bbb      	ldrh	r3, [r7, #28]
 800af14:	3314      	adds	r3, #20
 800af16:	429a      	cmp	r2, r3
 800af18:	d333      	bcc.n	800af82 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800af1a:	8bfa      	ldrh	r2, [r7, #30]
 800af1c:	8bbb      	ldrh	r3, [r7, #28]
 800af1e:	4413      	add	r3, r2
 800af20:	b29b      	uxth	r3, r3
 800af22:	3308      	adds	r3, #8
 800af24:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800af26:	8a7b      	ldrh	r3, [r7, #18]
 800af28:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af2c:	d106      	bne.n	800af3c <mem_malloc+0xb0>
 800af2e:	4b4c      	ldr	r3, [pc, #304]	; (800b060 <mem_malloc+0x1d4>)
 800af30:	f240 3287 	movw	r2, #903	; 0x387
 800af34:	494b      	ldr	r1, [pc, #300]	; (800b064 <mem_malloc+0x1d8>)
 800af36:	484c      	ldr	r0, [pc, #304]	; (800b068 <mem_malloc+0x1dc>)
 800af38:	f00b fbe8 	bl	801670c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800af3c:	8a7b      	ldrh	r3, [r7, #18]
 800af3e:	4618      	mov	r0, r3
 800af40:	f7ff fd00 	bl	800a944 <ptr_to_mem>
 800af44:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2200      	movs	r2, #0
 800af4a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	881a      	ldrh	r2, [r3, #0]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	8bfa      	ldrh	r2, [r7, #30]
 800af58:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	8a7a      	ldrh	r2, [r7, #18]
 800af5e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	2201      	movs	r2, #1
 800af64:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	881b      	ldrh	r3, [r3, #0]
 800af6a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af6e:	d00b      	beq.n	800af88 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	881b      	ldrh	r3, [r3, #0]
 800af74:	4618      	mov	r0, r3
 800af76:	f7ff fce5 	bl	800a944 <ptr_to_mem>
 800af7a:	4602      	mov	r2, r0
 800af7c:	8a7b      	ldrh	r3, [r7, #18]
 800af7e:	8053      	strh	r3, [r2, #2]
 800af80:	e002      	b.n	800af88 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	2201      	movs	r2, #1
 800af86:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800af88:	4b34      	ldr	r3, [pc, #208]	; (800b05c <mem_malloc+0x1d0>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	697a      	ldr	r2, [r7, #20]
 800af8e:	429a      	cmp	r2, r3
 800af90:	d127      	bne.n	800afe2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800af92:	4b32      	ldr	r3, [pc, #200]	; (800b05c <mem_malloc+0x1d0>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800af98:	e005      	b.n	800afa6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	881b      	ldrh	r3, [r3, #0]
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7ff fcd0 	bl	800a944 <ptr_to_mem>
 800afa4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800afa6:	69bb      	ldr	r3, [r7, #24]
 800afa8:	791b      	ldrb	r3, [r3, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d004      	beq.n	800afb8 <mem_malloc+0x12c>
 800afae:	4b2f      	ldr	r3, [pc, #188]	; (800b06c <mem_malloc+0x1e0>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	69ba      	ldr	r2, [r7, #24]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d1f0      	bne.n	800af9a <mem_malloc+0x10e>
          }
          lfree = cur;
 800afb8:	4a28      	ldr	r2, [pc, #160]	; (800b05c <mem_malloc+0x1d0>)
 800afba:	69bb      	ldr	r3, [r7, #24]
 800afbc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800afbe:	4b27      	ldr	r3, [pc, #156]	; (800b05c <mem_malloc+0x1d0>)
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	4b2a      	ldr	r3, [pc, #168]	; (800b06c <mem_malloc+0x1e0>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d00b      	beq.n	800afe2 <mem_malloc+0x156>
 800afca:	4b24      	ldr	r3, [pc, #144]	; (800b05c <mem_malloc+0x1d0>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	791b      	ldrb	r3, [r3, #4]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d006      	beq.n	800afe2 <mem_malloc+0x156>
 800afd4:	4b22      	ldr	r3, [pc, #136]	; (800b060 <mem_malloc+0x1d4>)
 800afd6:	f240 32b5 	movw	r2, #949	; 0x3b5
 800afda:	4925      	ldr	r1, [pc, #148]	; (800b070 <mem_malloc+0x1e4>)
 800afdc:	4822      	ldr	r0, [pc, #136]	; (800b068 <mem_malloc+0x1dc>)
 800afde:	f00b fb95 	bl	801670c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800afe2:	8bba      	ldrh	r2, [r7, #28]
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	4413      	add	r3, r2
 800afe8:	3308      	adds	r3, #8
 800afea:	4a20      	ldr	r2, [pc, #128]	; (800b06c <mem_malloc+0x1e0>)
 800afec:	6812      	ldr	r2, [r2, #0]
 800afee:	4293      	cmp	r3, r2
 800aff0:	d906      	bls.n	800b000 <mem_malloc+0x174>
 800aff2:	4b1b      	ldr	r3, [pc, #108]	; (800b060 <mem_malloc+0x1d4>)
 800aff4:	f240 32ba 	movw	r2, #954	; 0x3ba
 800aff8:	491e      	ldr	r1, [pc, #120]	; (800b074 <mem_malloc+0x1e8>)
 800affa:	481b      	ldr	r0, [pc, #108]	; (800b068 <mem_malloc+0x1dc>)
 800affc:	f00b fb86 	bl	801670c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	f003 0303 	and.w	r3, r3, #3
 800b006:	2b00      	cmp	r3, #0
 800b008:	d006      	beq.n	800b018 <mem_malloc+0x18c>
 800b00a:	4b15      	ldr	r3, [pc, #84]	; (800b060 <mem_malloc+0x1d4>)
 800b00c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800b010:	4919      	ldr	r1, [pc, #100]	; (800b078 <mem_malloc+0x1ec>)
 800b012:	4815      	ldr	r0, [pc, #84]	; (800b068 <mem_malloc+0x1dc>)
 800b014:	f00b fb7a 	bl	801670c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	f003 0303 	and.w	r3, r3, #3
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d006      	beq.n	800b030 <mem_malloc+0x1a4>
 800b022:	4b0f      	ldr	r3, [pc, #60]	; (800b060 <mem_malloc+0x1d4>)
 800b024:	f240 32be 	movw	r2, #958	; 0x3be
 800b028:	4914      	ldr	r1, [pc, #80]	; (800b07c <mem_malloc+0x1f0>)
 800b02a:	480f      	ldr	r0, [pc, #60]	; (800b068 <mem_malloc+0x1dc>)
 800b02c:	f00b fb6e 	bl	801670c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	3308      	adds	r3, #8
 800b034:	e00e      	b.n	800b054 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800b036:	8bfb      	ldrh	r3, [r7, #30]
 800b038:	4618      	mov	r0, r3
 800b03a:	f7ff fc83 	bl	800a944 <ptr_to_mem>
 800b03e:	4603      	mov	r3, r0
 800b040:	881b      	ldrh	r3, [r3, #0]
 800b042:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b044:	8bfa      	ldrh	r2, [r7, #30]
 800b046:	8bbb      	ldrh	r3, [r7, #28]
 800b048:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b04c:	429a      	cmp	r2, r3
 800b04e:	f4ff af44 	bcc.w	800aeda <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3720      	adds	r7, #32
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}
 800b05c:	20000430 	.word	0x20000430
 800b060:	08017540 	.word	0x08017540
 800b064:	080176e8 	.word	0x080176e8
 800b068:	08017588 	.word	0x08017588
 800b06c:	2000042c 	.word	0x2000042c
 800b070:	080176fc 	.word	0x080176fc
 800b074:	08017718 	.word	0x08017718
 800b078:	08017748 	.word	0x08017748
 800b07c:	08017778 	.word	0x08017778

0800b080 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b080:	b480      	push	{r7}
 800b082:	b085      	sub	sp, #20
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	2200      	movs	r2, #0
 800b08e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	3303      	adds	r3, #3
 800b096:	f023 0303 	bic.w	r3, r3, #3
 800b09a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b09c:	2300      	movs	r3, #0
 800b09e:	60fb      	str	r3, [r7, #12]
 800b0a0:	e011      	b.n	800b0c6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	68ba      	ldr	r2, [r7, #8]
 800b0b2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	881b      	ldrh	r3, [r3, #0]
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	4413      	add	r3, r2
 800b0be:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	60fb      	str	r3, [r7, #12]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	885b      	ldrh	r3, [r3, #2]
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	dbe7      	blt.n	800b0a2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b0d2:	bf00      	nop
 800b0d4:	3714      	adds	r7, #20
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr
	...

0800b0e0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	80fb      	strh	r3, [r7, #6]
 800b0ea:	e009      	b.n	800b100 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b0ec:	88fb      	ldrh	r3, [r7, #6]
 800b0ee:	4a08      	ldr	r2, [pc, #32]	; (800b110 <memp_init+0x30>)
 800b0f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f7ff ffc3 	bl	800b080 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b0fa:	88fb      	ldrh	r3, [r7, #6]
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	80fb      	strh	r3, [r7, #6]
 800b100:	88fb      	ldrh	r3, [r7, #6]
 800b102:	2b08      	cmp	r3, #8
 800b104:	d9f2      	bls.n	800b0ec <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b106:	bf00      	nop
 800b108:	3708      	adds	r7, #8
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	08028c98 	.word	0x08028c98

0800b114 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d012      	beq.n	800b150 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	689b      	ldr	r3, [r3, #8]
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	6812      	ldr	r2, [r2, #0]
 800b132:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f003 0303 	and.w	r3, r3, #3
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d006      	beq.n	800b14c <do_memp_malloc_pool+0x38>
 800b13e:	4b07      	ldr	r3, [pc, #28]	; (800b15c <do_memp_malloc_pool+0x48>)
 800b140:	f240 1219 	movw	r2, #281	; 0x119
 800b144:	4906      	ldr	r1, [pc, #24]	; (800b160 <do_memp_malloc_pool+0x4c>)
 800b146:	4807      	ldr	r0, [pc, #28]	; (800b164 <do_memp_malloc_pool+0x50>)
 800b148:	f00b fae0 	bl	801670c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	e000      	b.n	800b152 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b150:	2300      	movs	r3, #0
}
 800b152:	4618      	mov	r0, r3
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	0801779c 	.word	0x0801779c
 800b160:	080177cc 	.word	0x080177cc
 800b164:	080177f0 	.word	0x080177f0

0800b168 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	4603      	mov	r3, r0
 800b170:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b172:	79fb      	ldrb	r3, [r7, #7]
 800b174:	2b08      	cmp	r3, #8
 800b176:	d908      	bls.n	800b18a <memp_malloc+0x22>
 800b178:	4b0a      	ldr	r3, [pc, #40]	; (800b1a4 <memp_malloc+0x3c>)
 800b17a:	f240 1257 	movw	r2, #343	; 0x157
 800b17e:	490a      	ldr	r1, [pc, #40]	; (800b1a8 <memp_malloc+0x40>)
 800b180:	480a      	ldr	r0, [pc, #40]	; (800b1ac <memp_malloc+0x44>)
 800b182:	f00b fac3 	bl	801670c <iprintf>
 800b186:	2300      	movs	r3, #0
 800b188:	e008      	b.n	800b19c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b18a:	79fb      	ldrb	r3, [r7, #7]
 800b18c:	4a08      	ldr	r2, [pc, #32]	; (800b1b0 <memp_malloc+0x48>)
 800b18e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b192:	4618      	mov	r0, r3
 800b194:	f7ff ffbe 	bl	800b114 <do_memp_malloc_pool>
 800b198:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b19a:	68fb      	ldr	r3, [r7, #12]
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3710      	adds	r7, #16
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	0801779c 	.word	0x0801779c
 800b1a8:	0801782c 	.word	0x0801782c
 800b1ac:	080177f0 	.word	0x080177f0
 800b1b0:	08028c98 	.word	0x08028c98

0800b1b4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	f003 0303 	and.w	r3, r3, #3
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d006      	beq.n	800b1d6 <do_memp_free_pool+0x22>
 800b1c8:	4b0a      	ldr	r3, [pc, #40]	; (800b1f4 <do_memp_free_pool+0x40>)
 800b1ca:	f240 126d 	movw	r2, #365	; 0x16d
 800b1ce:	490a      	ldr	r1, [pc, #40]	; (800b1f8 <do_memp_free_pool+0x44>)
 800b1d0:	480a      	ldr	r0, [pc, #40]	; (800b1fc <do_memp_free_pool+0x48>)
 800b1d2:	f00b fa9b 	bl	801670c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	68fa      	ldr	r2, [r7, #12]
 800b1ea:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800b1ec:	bf00      	nop
 800b1ee:	3710      	adds	r7, #16
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}
 800b1f4:	0801779c 	.word	0x0801779c
 800b1f8:	0801784c 	.word	0x0801784c
 800b1fc:	080177f0 	.word	0x080177f0

0800b200 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b082      	sub	sp, #8
 800b204:	af00      	add	r7, sp, #0
 800b206:	4603      	mov	r3, r0
 800b208:	6039      	str	r1, [r7, #0]
 800b20a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b20c:	79fb      	ldrb	r3, [r7, #7]
 800b20e:	2b08      	cmp	r3, #8
 800b210:	d907      	bls.n	800b222 <memp_free+0x22>
 800b212:	4b0c      	ldr	r3, [pc, #48]	; (800b244 <memp_free+0x44>)
 800b214:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b218:	490b      	ldr	r1, [pc, #44]	; (800b248 <memp_free+0x48>)
 800b21a:	480c      	ldr	r0, [pc, #48]	; (800b24c <memp_free+0x4c>)
 800b21c:	f00b fa76 	bl	801670c <iprintf>
 800b220:	e00c      	b.n	800b23c <memp_free+0x3c>

  if (mem == NULL) {
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d008      	beq.n	800b23a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b228:	79fb      	ldrb	r3, [r7, #7]
 800b22a:	4a09      	ldr	r2, [pc, #36]	; (800b250 <memp_free+0x50>)
 800b22c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b230:	6839      	ldr	r1, [r7, #0]
 800b232:	4618      	mov	r0, r3
 800b234:	f7ff ffbe 	bl	800b1b4 <do_memp_free_pool>
 800b238:	e000      	b.n	800b23c <memp_free+0x3c>
    return;
 800b23a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b23c:	3708      	adds	r7, #8
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	0801779c 	.word	0x0801779c
 800b248:	0801786c 	.word	0x0801786c
 800b24c:	080177f0 	.word	0x080177f0
 800b250:	08028c98 	.word	0x08028c98

0800b254 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b254:	b480      	push	{r7}
 800b256:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b258:	bf00      	nop
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr
	...

0800b264 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b086      	sub	sp, #24
 800b268:	af00      	add	r7, sp, #0
 800b26a:	60f8      	str	r0, [r7, #12]
 800b26c:	60b9      	str	r1, [r7, #8]
 800b26e:	607a      	str	r2, [r7, #4]
 800b270:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d108      	bne.n	800b28a <netif_add+0x26>
 800b278:	4b59      	ldr	r3, [pc, #356]	; (800b3e0 <netif_add+0x17c>)
 800b27a:	f240 1227 	movw	r2, #295	; 0x127
 800b27e:	4959      	ldr	r1, [pc, #356]	; (800b3e4 <netif_add+0x180>)
 800b280:	4859      	ldr	r0, [pc, #356]	; (800b3e8 <netif_add+0x184>)
 800b282:	f00b fa43 	bl	801670c <iprintf>
 800b286:	2300      	movs	r3, #0
 800b288:	e0a6      	b.n	800b3d8 <netif_add+0x174>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d108      	bne.n	800b2a2 <netif_add+0x3e>
 800b290:	4b53      	ldr	r3, [pc, #332]	; (800b3e0 <netif_add+0x17c>)
 800b292:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b296:	4955      	ldr	r1, [pc, #340]	; (800b3ec <netif_add+0x188>)
 800b298:	4853      	ldr	r0, [pc, #332]	; (800b3e8 <netif_add+0x184>)
 800b29a:	f00b fa37 	bl	801670c <iprintf>
 800b29e:	2300      	movs	r3, #0
 800b2a0:	e09a      	b.n	800b3d8 <netif_add+0x174>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d101      	bne.n	800b2ac <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b2a8:	4b51      	ldr	r3, [pc, #324]	; (800b3f0 <netif_add+0x18c>)
 800b2aa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d101      	bne.n	800b2b6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b2b2:	4b4f      	ldr	r3, [pc, #316]	; (800b3f0 <netif_add+0x18c>)
 800b2b4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d101      	bne.n	800b2c0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b2bc:	4b4c      	ldr	r3, [pc, #304]	; (800b3f0 <netif_add+0x18c>)
 800b2be:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	4a47      	ldr	r2, [pc, #284]	; (800b3f4 <netif_add+0x190>)
 800b2d6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	3320      	adds	r3, #32
 800b2ea:	2204      	movs	r2, #4
 800b2ec:	2100      	movs	r1, #0
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f00b f95c 	bl	80165ac <memset>
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6a3a      	ldr	r2, [r7, #32]
 800b2f8:	61da      	str	r2, [r3, #28]
  netif->num = netif_num;
 800b2fa:	4b3f      	ldr	r3, [pc, #252]	; (800b3f8 <netif_add+0x194>)
 800b2fc:	781a      	ldrb	r2, [r3, #0]
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b308:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	68b9      	ldr	r1, [r7, #8]
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f000 f913 	bl	800b53c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	4798      	blx	r3
 800b31c:	4603      	mov	r3, r0
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d001      	beq.n	800b326 <netif_add+0xc2>
    return NULL;
 800b322:	2300      	movs	r3, #0
 800b324:	e058      	b.n	800b3d8 <netif_add+0x174>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b32c:	2bff      	cmp	r3, #255	; 0xff
 800b32e:	d103      	bne.n	800b338 <netif_add+0xd4>
        netif->num = 0;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2200      	movs	r2, #0
 800b334:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800b338:	2300      	movs	r3, #0
 800b33a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b33c:	4b2f      	ldr	r3, [pc, #188]	; (800b3fc <netif_add+0x198>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	617b      	str	r3, [r7, #20]
 800b342:	e02b      	b.n	800b39c <netif_add+0x138>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b344:	697a      	ldr	r2, [r7, #20]
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	429a      	cmp	r2, r3
 800b34a:	d106      	bne.n	800b35a <netif_add+0xf6>
 800b34c:	4b24      	ldr	r3, [pc, #144]	; (800b3e0 <netif_add+0x17c>)
 800b34e:	f240 128b 	movw	r2, #395	; 0x18b
 800b352:	492b      	ldr	r1, [pc, #172]	; (800b400 <netif_add+0x19c>)
 800b354:	4824      	ldr	r0, [pc, #144]	; (800b3e8 <netif_add+0x184>)
 800b356:	f00b f9d9 	bl	801670c <iprintf>
        num_netifs++;
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	3301      	adds	r3, #1
 800b35e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	2bff      	cmp	r3, #255	; 0xff
 800b364:	dd06      	ble.n	800b374 <netif_add+0x110>
 800b366:	4b1e      	ldr	r3, [pc, #120]	; (800b3e0 <netif_add+0x17c>)
 800b368:	f240 128d 	movw	r2, #397	; 0x18d
 800b36c:	4925      	ldr	r1, [pc, #148]	; (800b404 <netif_add+0x1a0>)
 800b36e:	481e      	ldr	r0, [pc, #120]	; (800b3e8 <netif_add+0x184>)
 800b370:	f00b f9cc 	bl	801670c <iprintf>
        if (netif2->num == netif->num) {
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b380:	429a      	cmp	r2, r3
 800b382:	d108      	bne.n	800b396 <netif_add+0x132>
          netif->num++;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b38a:	3301      	adds	r3, #1
 800b38c:	b2da      	uxtb	r2, r3
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800b394:	e005      	b.n	800b3a2 <netif_add+0x13e>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	617b      	str	r3, [r7, #20]
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d1d0      	bne.n	800b344 <netif_add+0xe0>
        }
      }
    } while (netif2 != NULL);
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d1be      	bne.n	800b326 <netif_add+0xc2>
  }
  if (netif->num == 254) {
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3ae:	2bfe      	cmp	r3, #254	; 0xfe
 800b3b0:	d103      	bne.n	800b3ba <netif_add+0x156>
    netif_num = 0;
 800b3b2:	4b11      	ldr	r3, [pc, #68]	; (800b3f8 <netif_add+0x194>)
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	701a      	strb	r2, [r3, #0]
 800b3b8:	e006      	b.n	800b3c8 <netif_add+0x164>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	b2da      	uxtb	r2, r3
 800b3c4:	4b0c      	ldr	r3, [pc, #48]	; (800b3f8 <netif_add+0x194>)
 800b3c6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b3c8:	4b0c      	ldr	r3, [pc, #48]	; (800b3fc <netif_add+0x198>)
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b3d0:	4a0a      	ldr	r2, [pc, #40]	; (800b3fc <netif_add+0x198>)
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3718      	adds	r7, #24
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	08017888 	.word	0x08017888
 800b3e4:	0801791c 	.word	0x0801791c
 800b3e8:	080178d8 	.word	0x080178d8
 800b3ec:	08017938 	.word	0x08017938
 800b3f0:	08028d0c 	.word	0x08028d0c
 800b3f4:	0800b72d 	.word	0x0800b72d
 800b3f8:	20000458 	.word	0x20000458
 800b3fc:	20007aec 	.word	0x20007aec
 800b400:	0801795c 	.word	0x0801795c
 800b404:	08017970 	.word	0x08017970

0800b408 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b412:	6839      	ldr	r1, [r7, #0]
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f002 facd 	bl	800d9b4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b41a:	6839      	ldr	r1, [r7, #0]
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f006 ff17 	bl	8012250 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b422:	bf00      	nop
 800b424:	3708      	adds	r7, #8
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
	...

0800b42c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b086      	sub	sp, #24
 800b430:	af00      	add	r7, sp, #0
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d106      	bne.n	800b44c <netif_do_set_ipaddr+0x20>
 800b43e:	4b1d      	ldr	r3, [pc, #116]	; (800b4b4 <netif_do_set_ipaddr+0x88>)
 800b440:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b444:	491c      	ldr	r1, [pc, #112]	; (800b4b8 <netif_do_set_ipaddr+0x8c>)
 800b446:	481d      	ldr	r0, [pc, #116]	; (800b4bc <netif_do_set_ipaddr+0x90>)
 800b448:	f00b f960 	bl	801670c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d106      	bne.n	800b460 <netif_do_set_ipaddr+0x34>
 800b452:	4b18      	ldr	r3, [pc, #96]	; (800b4b4 <netif_do_set_ipaddr+0x88>)
 800b454:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b458:	4917      	ldr	r1, [pc, #92]	; (800b4b8 <netif_do_set_ipaddr+0x8c>)
 800b45a:	4818      	ldr	r0, [pc, #96]	; (800b4bc <netif_do_set_ipaddr+0x90>)
 800b45c:	f00b f956 	bl	801670c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	3304      	adds	r3, #4
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d01c      	beq.n	800b4a8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	3304      	adds	r3, #4
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b47e:	f107 0314 	add.w	r3, r7, #20
 800b482:	4619      	mov	r1, r3
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f7ff ffbf 	bl	800b408 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d002      	beq.n	800b496 <netif_do_set_ipaddr+0x6a>
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	e000      	b.n	800b498 <netif_do_set_ipaddr+0x6c>
 800b496:	2300      	movs	r3, #0
 800b498:	68fa      	ldr	r2, [r7, #12]
 800b49a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b49c:	2101      	movs	r1, #1
 800b49e:	68f8      	ldr	r0, [r7, #12]
 800b4a0:	f000 f8d2 	bl	800b648 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	e000      	b.n	800b4aa <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b4a8:	2300      	movs	r3, #0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3718      	adds	r7, #24
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	08017888 	.word	0x08017888
 800b4b8:	080179a0 	.word	0x080179a0
 800b4bc:	080178d8 	.word	0x080178d8

0800b4c0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b085      	sub	sp, #20
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	60f8      	str	r0, [r7, #12]
 800b4c8:	60b9      	str	r1, [r7, #8]
 800b4ca:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	681a      	ldr	r2, [r3, #0]
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	3308      	adds	r3, #8
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d00a      	beq.n	800b4f0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d002      	beq.n	800b4e6 <netif_do_set_netmask+0x26>
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	e000      	b.n	800b4e8 <netif_do_set_netmask+0x28>
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	68fa      	ldr	r2, [r7, #12]
 800b4ea:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	e000      	b.n	800b4f2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b4f0:	2300      	movs	r3, #0
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3714      	adds	r7, #20
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr

0800b4fe <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b4fe:	b480      	push	{r7}
 800b500:	b085      	sub	sp, #20
 800b502:	af00      	add	r7, sp, #0
 800b504:	60f8      	str	r0, [r7, #12]
 800b506:	60b9      	str	r1, [r7, #8]
 800b508:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	330c      	adds	r3, #12
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	429a      	cmp	r2, r3
 800b516:	d00a      	beq.n	800b52e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d002      	beq.n	800b524 <netif_do_set_gw+0x26>
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	e000      	b.n	800b526 <netif_do_set_gw+0x28>
 800b524:	2300      	movs	r3, #0
 800b526:	68fa      	ldr	r2, [r7, #12]
 800b528:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b52a:	2301      	movs	r3, #1
 800b52c:	e000      	b.n	800b530 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b52e:	2300      	movs	r3, #0
}
 800b530:	4618      	mov	r0, r3
 800b532:	3714      	adds	r7, #20
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr

0800b53c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b088      	sub	sp, #32
 800b540:	af00      	add	r7, sp, #0
 800b542:	60f8      	str	r0, [r7, #12]
 800b544:	60b9      	str	r1, [r7, #8]
 800b546:	607a      	str	r2, [r7, #4]
 800b548:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b54a:	2300      	movs	r3, #0
 800b54c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b54e:	2300      	movs	r3, #0
 800b550:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d101      	bne.n	800b55c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b558:	4b1c      	ldr	r3, [pc, #112]	; (800b5cc <netif_set_addr+0x90>)
 800b55a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d101      	bne.n	800b566 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b562:	4b1a      	ldr	r3, [pc, #104]	; (800b5cc <netif_set_addr+0x90>)
 800b564:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d101      	bne.n	800b570 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b56c:	4b17      	ldr	r3, [pc, #92]	; (800b5cc <netif_set_addr+0x90>)
 800b56e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d003      	beq.n	800b57e <netif_set_addr+0x42>
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d101      	bne.n	800b582 <netif_set_addr+0x46>
 800b57e:	2301      	movs	r3, #1
 800b580:	e000      	b.n	800b584 <netif_set_addr+0x48>
 800b582:	2300      	movs	r3, #0
 800b584:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d006      	beq.n	800b59a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b58c:	f107 0310 	add.w	r3, r7, #16
 800b590:	461a      	mov	r2, r3
 800b592:	68b9      	ldr	r1, [r7, #8]
 800b594:	68f8      	ldr	r0, [r7, #12]
 800b596:	f7ff ff49 	bl	800b42c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b59a:	69fa      	ldr	r2, [r7, #28]
 800b59c:	6879      	ldr	r1, [r7, #4]
 800b59e:	68f8      	ldr	r0, [r7, #12]
 800b5a0:	f7ff ff8e 	bl	800b4c0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b5a4:	69ba      	ldr	r2, [r7, #24]
 800b5a6:	6839      	ldr	r1, [r7, #0]
 800b5a8:	68f8      	ldr	r0, [r7, #12]
 800b5aa:	f7ff ffa8 	bl	800b4fe <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d106      	bne.n	800b5c2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b5b4:	f107 0310 	add.w	r3, r7, #16
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	68b9      	ldr	r1, [r7, #8]
 800b5bc:	68f8      	ldr	r0, [r7, #12]
 800b5be:	f7ff ff35 	bl	800b42c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b5c2:	bf00      	nop
 800b5c4:	3720      	adds	r7, #32
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}
 800b5ca:	bf00      	nop
 800b5cc:	08028d0c 	.word	0x08028d0c

0800b5d0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b5d8:	4a04      	ldr	r2, [pc, #16]	; (800b5ec <netif_set_default+0x1c>)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b5de:	bf00      	nop
 800b5e0:	370c      	adds	r7, #12
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr
 800b5ea:	bf00      	nop
 800b5ec:	20007af0 	.word	0x20007af0

0800b5f0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b082      	sub	sp, #8
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d107      	bne.n	800b60e <netif_set_up+0x1e>
 800b5fe:	4b0f      	ldr	r3, [pc, #60]	; (800b63c <netif_set_up+0x4c>)
 800b600:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b604:	490e      	ldr	r1, [pc, #56]	; (800b640 <netif_set_up+0x50>)
 800b606:	480f      	ldr	r0, [pc, #60]	; (800b644 <netif_set_up+0x54>)
 800b608:	f00b f880 	bl	801670c <iprintf>
 800b60c:	e013      	b.n	800b636 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b614:	f003 0301 	and.w	r3, r3, #1
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d10c      	bne.n	800b636 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b622:	f043 0301 	orr.w	r3, r3, #1
 800b626:	b2da      	uxtb	r2, r3
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b62e:	2103      	movs	r1, #3
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 f809 	bl	800b648 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b636:	3708      	adds	r7, #8
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}
 800b63c:	08017888 	.word	0x08017888
 800b640:	08017a10 	.word	0x08017a10
 800b644:	080178d8 	.word	0x080178d8

0800b648 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	460b      	mov	r3, r1
 800b652:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d106      	bne.n	800b668 <netif_issue_reports+0x20>
 800b65a:	4b18      	ldr	r3, [pc, #96]	; (800b6bc <netif_issue_reports+0x74>)
 800b65c:	f240 326d 	movw	r2, #877	; 0x36d
 800b660:	4917      	ldr	r1, [pc, #92]	; (800b6c0 <netif_issue_reports+0x78>)
 800b662:	4818      	ldr	r0, [pc, #96]	; (800b6c4 <netif_issue_reports+0x7c>)
 800b664:	f00b f852 	bl	801670c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b66e:	f003 0304 	and.w	r3, r3, #4
 800b672:	2b00      	cmp	r3, #0
 800b674:	d01e      	beq.n	800b6b4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b67c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b680:	2b00      	cmp	r3, #0
 800b682:	d017      	beq.n	800b6b4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b684:	78fb      	ldrb	r3, [r7, #3]
 800b686:	f003 0301 	and.w	r3, r3, #1
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d013      	beq.n	800b6b6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	3304      	adds	r3, #4
 800b692:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b694:	2b00      	cmp	r3, #0
 800b696:	d00e      	beq.n	800b6b6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b69e:	f003 0308 	and.w	r3, r3, #8
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d007      	beq.n	800b6b6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	3304      	adds	r3, #4
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f009 fb91 	bl	8014dd4 <etharp_request>
 800b6b2:	e000      	b.n	800b6b6 <netif_issue_reports+0x6e>
    return;
 800b6b4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b6b6:	3708      	adds	r7, #8
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	08017888 	.word	0x08017888
 800b6c0:	08017a2c 	.word	0x08017a2c
 800b6c4:	080178d8 	.word	0x080178d8

0800b6c8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d107      	bne.n	800b6e6 <netif_set_down+0x1e>
 800b6d6:	4b12      	ldr	r3, [pc, #72]	; (800b720 <netif_set_down+0x58>)
 800b6d8:	f240 329b 	movw	r2, #923	; 0x39b
 800b6dc:	4911      	ldr	r1, [pc, #68]	; (800b724 <netif_set_down+0x5c>)
 800b6de:	4812      	ldr	r0, [pc, #72]	; (800b728 <netif_set_down+0x60>)
 800b6e0:	f00b f814 	bl	801670c <iprintf>
 800b6e4:	e019      	b.n	800b71a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b6ec:	f003 0301 	and.w	r3, r3, #1
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d012      	beq.n	800b71a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b6fa:	f023 0301 	bic.w	r3, r3, #1
 800b6fe:	b2da      	uxtb	r2, r3
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b70c:	f003 0308 	and.w	r3, r3, #8
 800b710:	2b00      	cmp	r3, #0
 800b712:	d002      	beq.n	800b71a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f008 ff17 	bl	8014548 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	08017888 	.word	0x08017888
 800b724:	08017a50 	.word	0x08017a50
 800b728:	080178d8 	.word	0x080178d8

0800b72c <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b085      	sub	sp, #20
 800b730:	af00      	add	r7, sp, #0
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b738:	f06f 030b 	mvn.w	r3, #11
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3714      	adds	r7, #20
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr

0800b748 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b748:	b480      	push	{r7}
 800b74a:	b085      	sub	sp, #20
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	4603      	mov	r3, r0
 800b750:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b752:	79fb      	ldrb	r3, [r7, #7]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d013      	beq.n	800b780 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b758:	4b0d      	ldr	r3, [pc, #52]	; (800b790 <netif_get_by_index+0x48>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	60fb      	str	r3, [r7, #12]
 800b75e:	e00c      	b.n	800b77a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b766:	3301      	adds	r3, #1
 800b768:	b2db      	uxtb	r3, r3
 800b76a:	79fa      	ldrb	r2, [r7, #7]
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d101      	bne.n	800b774 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	e006      	b.n	800b782 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	60fb      	str	r3, [r7, #12]
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d1ef      	bne.n	800b760 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b780:	2300      	movs	r3, #0
}
 800b782:	4618      	mov	r0, r3
 800b784:	3714      	adds	r7, #20
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr
 800b78e:	bf00      	nop
 800b790:	20007aec 	.word	0x20007aec

0800b794 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b79a:	4b0c      	ldr	r3, [pc, #48]	; (800b7cc <pbuf_free_ooseq+0x38>)
 800b79c:	2200      	movs	r2, #0
 800b79e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b7a0:	4b0b      	ldr	r3, [pc, #44]	; (800b7d0 <pbuf_free_ooseq+0x3c>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	607b      	str	r3, [r7, #4]
 800b7a6:	e00a      	b.n	800b7be <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d003      	beq.n	800b7b8 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f002 f93d 	bl	800da30 <tcp_free_ooseq>
      return;
 800b7b6:	e005      	b.n	800b7c4 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	68db      	ldr	r3, [r3, #12]
 800b7bc:	607b      	str	r3, [r7, #4]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d1f1      	bne.n	800b7a8 <pbuf_free_ooseq+0x14>
    }
  }
}
 800b7c4:	3708      	adds	r7, #8
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	20007af4 	.word	0x20007af4
 800b7d0:	20007afc 	.word	0x20007afc

0800b7d4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800b7d8:	4b03      	ldr	r3, [pc, #12]	; (800b7e8 <pbuf_pool_is_empty+0x14>)
 800b7da:	2201      	movs	r2, #1
 800b7dc:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b7de:	bf00      	nop
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr
 800b7e8:	20007af4 	.word	0x20007af4

0800b7ec <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b085      	sub	sp, #20
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	4611      	mov	r1, r2
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	80fb      	strh	r3, [r7, #6]
 800b7fe:	4613      	mov	r3, r2
 800b800:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2200      	movs	r2, #0
 800b806:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	68ba      	ldr	r2, [r7, #8]
 800b80c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	88fa      	ldrh	r2, [r7, #6]
 800b812:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	88ba      	ldrh	r2, [r7, #4]
 800b818:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b81a:	8b3b      	ldrh	r3, [r7, #24]
 800b81c:	b2da      	uxtb	r2, r3
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	7f3a      	ldrb	r2, [r7, #28]
 800b826:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	2201      	movs	r2, #1
 800b82c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2200      	movs	r2, #0
 800b832:	73da      	strb	r2, [r3, #15]
}
 800b834:	bf00      	nop
 800b836:	3714      	adds	r7, #20
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr

0800b840 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b08c      	sub	sp, #48	; 0x30
 800b844:	af02      	add	r7, sp, #8
 800b846:	4603      	mov	r3, r0
 800b848:	71fb      	strb	r3, [r7, #7]
 800b84a:	460b      	mov	r3, r1
 800b84c:	80bb      	strh	r3, [r7, #4]
 800b84e:	4613      	mov	r3, r2
 800b850:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b852:	79fb      	ldrb	r3, [r7, #7]
 800b854:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b856:	887b      	ldrh	r3, [r7, #2]
 800b858:	2b41      	cmp	r3, #65	; 0x41
 800b85a:	d00b      	beq.n	800b874 <pbuf_alloc+0x34>
 800b85c:	2b41      	cmp	r3, #65	; 0x41
 800b85e:	dc02      	bgt.n	800b866 <pbuf_alloc+0x26>
 800b860:	2b01      	cmp	r3, #1
 800b862:	d007      	beq.n	800b874 <pbuf_alloc+0x34>
 800b864:	e0c2      	b.n	800b9ec <pbuf_alloc+0x1ac>
 800b866:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b86a:	d00b      	beq.n	800b884 <pbuf_alloc+0x44>
 800b86c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b870:	d070      	beq.n	800b954 <pbuf_alloc+0x114>
 800b872:	e0bb      	b.n	800b9ec <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b874:	887a      	ldrh	r2, [r7, #2]
 800b876:	88bb      	ldrh	r3, [r7, #4]
 800b878:	4619      	mov	r1, r3
 800b87a:	2000      	movs	r0, #0
 800b87c:	f000 f8d2 	bl	800ba24 <pbuf_alloc_reference>
 800b880:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b882:	e0bd      	b.n	800ba00 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b884:	2300      	movs	r3, #0
 800b886:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b888:	2300      	movs	r3, #0
 800b88a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b88c:	88bb      	ldrh	r3, [r7, #4]
 800b88e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b890:	2008      	movs	r0, #8
 800b892:	f7ff fc69 	bl	800b168 <memp_malloc>
 800b896:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d109      	bne.n	800b8b2 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800b89e:	f7ff ff99 	bl	800b7d4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d002      	beq.n	800b8ae <pbuf_alloc+0x6e>
            pbuf_free(p);
 800b8a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b8aa:	f000 faa9 	bl	800be00 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	e0a7      	b.n	800ba02 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b8b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b8b4:	3303      	adds	r3, #3
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	f023 0303 	bic.w	r3, r3, #3
 800b8bc:	b29b      	uxth	r3, r3
 800b8be:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	8b7a      	ldrh	r2, [r7, #26]
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	bf28      	it	cs
 800b8ca:	4613      	movcs	r3, r2
 800b8cc:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b8ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b8d0:	3310      	adds	r3, #16
 800b8d2:	693a      	ldr	r2, [r7, #16]
 800b8d4:	4413      	add	r3, r2
 800b8d6:	3303      	adds	r3, #3
 800b8d8:	f023 0303 	bic.w	r3, r3, #3
 800b8dc:	4618      	mov	r0, r3
 800b8de:	89f9      	ldrh	r1, [r7, #14]
 800b8e0:	8b7a      	ldrh	r2, [r7, #26]
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	9301      	str	r3, [sp, #4]
 800b8e6:	887b      	ldrh	r3, [r7, #2]
 800b8e8:	9300      	str	r3, [sp, #0]
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	4601      	mov	r1, r0
 800b8ee:	6938      	ldr	r0, [r7, #16]
 800b8f0:	f7ff ff7c 	bl	800b7ec <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	f003 0303 	and.w	r3, r3, #3
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d006      	beq.n	800b90e <pbuf_alloc+0xce>
 800b900:	4b42      	ldr	r3, [pc, #264]	; (800ba0c <pbuf_alloc+0x1cc>)
 800b902:	f240 1201 	movw	r2, #257	; 0x101
 800b906:	4942      	ldr	r1, [pc, #264]	; (800ba10 <pbuf_alloc+0x1d0>)
 800b908:	4842      	ldr	r0, [pc, #264]	; (800ba14 <pbuf_alloc+0x1d4>)
 800b90a:	f00a feff 	bl	801670c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b90e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b910:	3303      	adds	r3, #3
 800b912:	f023 0303 	bic.w	r3, r3, #3
 800b916:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b91a:	d106      	bne.n	800b92a <pbuf_alloc+0xea>
 800b91c:	4b3b      	ldr	r3, [pc, #236]	; (800ba0c <pbuf_alloc+0x1cc>)
 800b91e:	f240 1203 	movw	r2, #259	; 0x103
 800b922:	493d      	ldr	r1, [pc, #244]	; (800ba18 <pbuf_alloc+0x1d8>)
 800b924:	483b      	ldr	r0, [pc, #236]	; (800ba14 <pbuf_alloc+0x1d4>)
 800b926:	f00a fef1 	bl	801670c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d102      	bne.n	800b936 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	627b      	str	r3, [r7, #36]	; 0x24
 800b934:	e002      	b.n	800b93c <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b936:	69fb      	ldr	r3, [r7, #28]
 800b938:	693a      	ldr	r2, [r7, #16]
 800b93a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b940:	8b7a      	ldrh	r2, [r7, #26]
 800b942:	89fb      	ldrh	r3, [r7, #14]
 800b944:	1ad3      	subs	r3, r2, r3
 800b946:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b948:	2300      	movs	r3, #0
 800b94a:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b94c:	8b7b      	ldrh	r3, [r7, #26]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d19e      	bne.n	800b890 <pbuf_alloc+0x50>
      break;
 800b952:	e055      	b.n	800ba00 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b954:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b956:	3303      	adds	r3, #3
 800b958:	b29b      	uxth	r3, r3
 800b95a:	f023 0303 	bic.w	r3, r3, #3
 800b95e:	b29a      	uxth	r2, r3
 800b960:	88bb      	ldrh	r3, [r7, #4]
 800b962:	3303      	adds	r3, #3
 800b964:	b29b      	uxth	r3, r3
 800b966:	f023 0303 	bic.w	r3, r3, #3
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	4413      	add	r3, r2
 800b96e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b970:	8b3b      	ldrh	r3, [r7, #24]
 800b972:	3310      	adds	r3, #16
 800b974:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b976:	8b3a      	ldrh	r2, [r7, #24]
 800b978:	88bb      	ldrh	r3, [r7, #4]
 800b97a:	3303      	adds	r3, #3
 800b97c:	f023 0303 	bic.w	r3, r3, #3
 800b980:	429a      	cmp	r2, r3
 800b982:	d306      	bcc.n	800b992 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b984:	8afa      	ldrh	r2, [r7, #22]
 800b986:	88bb      	ldrh	r3, [r7, #4]
 800b988:	3303      	adds	r3, #3
 800b98a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b98e:	429a      	cmp	r2, r3
 800b990:	d201      	bcs.n	800b996 <pbuf_alloc+0x156>
        return NULL;
 800b992:	2300      	movs	r3, #0
 800b994:	e035      	b.n	800ba02 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b996:	8afb      	ldrh	r3, [r7, #22]
 800b998:	4618      	mov	r0, r3
 800b99a:	f7ff fa77 	bl	800ae8c <mem_malloc>
 800b99e:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d101      	bne.n	800b9aa <pbuf_alloc+0x16a>
        return NULL;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	e02b      	b.n	800ba02 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b9aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b9ac:	3310      	adds	r3, #16
 800b9ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9b0:	4413      	add	r3, r2
 800b9b2:	3303      	adds	r3, #3
 800b9b4:	f023 0303 	bic.w	r3, r3, #3
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	88b9      	ldrh	r1, [r7, #4]
 800b9bc:	88ba      	ldrh	r2, [r7, #4]
 800b9be:	2300      	movs	r3, #0
 800b9c0:	9301      	str	r3, [sp, #4]
 800b9c2:	887b      	ldrh	r3, [r7, #2]
 800b9c4:	9300      	str	r3, [sp, #0]
 800b9c6:	460b      	mov	r3, r1
 800b9c8:	4601      	mov	r1, r0
 800b9ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9cc:	f7ff ff0e 	bl	800b7ec <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	f003 0303 	and.w	r3, r3, #3
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d010      	beq.n	800b9fe <pbuf_alloc+0x1be>
 800b9dc:	4b0b      	ldr	r3, [pc, #44]	; (800ba0c <pbuf_alloc+0x1cc>)
 800b9de:	f240 1223 	movw	r2, #291	; 0x123
 800b9e2:	490e      	ldr	r1, [pc, #56]	; (800ba1c <pbuf_alloc+0x1dc>)
 800b9e4:	480b      	ldr	r0, [pc, #44]	; (800ba14 <pbuf_alloc+0x1d4>)
 800b9e6:	f00a fe91 	bl	801670c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b9ea:	e008      	b.n	800b9fe <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b9ec:	4b07      	ldr	r3, [pc, #28]	; (800ba0c <pbuf_alloc+0x1cc>)
 800b9ee:	f240 1227 	movw	r2, #295	; 0x127
 800b9f2:	490b      	ldr	r1, [pc, #44]	; (800ba20 <pbuf_alloc+0x1e0>)
 800b9f4:	4807      	ldr	r0, [pc, #28]	; (800ba14 <pbuf_alloc+0x1d4>)
 800b9f6:	f00a fe89 	bl	801670c <iprintf>
      return NULL;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	e001      	b.n	800ba02 <pbuf_alloc+0x1c2>
      break;
 800b9fe:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ba00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3728      	adds	r7, #40	; 0x28
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	08017ab8 	.word	0x08017ab8
 800ba10:	08017ae8 	.word	0x08017ae8
 800ba14:	08017b18 	.word	0x08017b18
 800ba18:	08017b40 	.word	0x08017b40
 800ba1c:	08017b74 	.word	0x08017b74
 800ba20:	08017ba0 	.word	0x08017ba0

0800ba24 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b086      	sub	sp, #24
 800ba28:	af02      	add	r7, sp, #8
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	807b      	strh	r3, [r7, #2]
 800ba30:	4613      	mov	r3, r2
 800ba32:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ba34:	883b      	ldrh	r3, [r7, #0]
 800ba36:	2b41      	cmp	r3, #65	; 0x41
 800ba38:	d009      	beq.n	800ba4e <pbuf_alloc_reference+0x2a>
 800ba3a:	883b      	ldrh	r3, [r7, #0]
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d006      	beq.n	800ba4e <pbuf_alloc_reference+0x2a>
 800ba40:	4b0f      	ldr	r3, [pc, #60]	; (800ba80 <pbuf_alloc_reference+0x5c>)
 800ba42:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ba46:	490f      	ldr	r1, [pc, #60]	; (800ba84 <pbuf_alloc_reference+0x60>)
 800ba48:	480f      	ldr	r0, [pc, #60]	; (800ba88 <pbuf_alloc_reference+0x64>)
 800ba4a:	f00a fe5f 	bl	801670c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ba4e:	2007      	movs	r0, #7
 800ba50:	f7ff fb8a 	bl	800b168 <memp_malloc>
 800ba54:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d101      	bne.n	800ba60 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	e00b      	b.n	800ba78 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ba60:	8879      	ldrh	r1, [r7, #2]
 800ba62:	887a      	ldrh	r2, [r7, #2]
 800ba64:	2300      	movs	r3, #0
 800ba66:	9301      	str	r3, [sp, #4]
 800ba68:	883b      	ldrh	r3, [r7, #0]
 800ba6a:	9300      	str	r3, [sp, #0]
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	6879      	ldr	r1, [r7, #4]
 800ba70:	68f8      	ldr	r0, [r7, #12]
 800ba72:	f7ff febb 	bl	800b7ec <pbuf_init_alloced_pbuf>
  return p;
 800ba76:	68fb      	ldr	r3, [r7, #12]
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3710      	adds	r7, #16
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}
 800ba80:	08017ab8 	.word	0x08017ab8
 800ba84:	08017bbc 	.word	0x08017bbc
 800ba88:	08017b18 	.word	0x08017b18

0800ba8c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b088      	sub	sp, #32
 800ba90:	af02      	add	r7, sp, #8
 800ba92:	607b      	str	r3, [r7, #4]
 800ba94:	4603      	mov	r3, r0
 800ba96:	73fb      	strb	r3, [r7, #15]
 800ba98:	460b      	mov	r3, r1
 800ba9a:	81bb      	strh	r3, [r7, #12]
 800ba9c:	4613      	mov	r3, r2
 800ba9e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800baa0:	7bfb      	ldrb	r3, [r7, #15]
 800baa2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800baa4:	8a7b      	ldrh	r3, [r7, #18]
 800baa6:	3303      	adds	r3, #3
 800baa8:	f023 0203 	bic.w	r2, r3, #3
 800baac:	89bb      	ldrh	r3, [r7, #12]
 800baae:	441a      	add	r2, r3
 800bab0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d901      	bls.n	800baba <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800bab6:	2300      	movs	r3, #0
 800bab8:	e018      	b.n	800baec <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800baba:	6a3b      	ldr	r3, [r7, #32]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d007      	beq.n	800bad0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bac0:	8a7b      	ldrh	r3, [r7, #18]
 800bac2:	3303      	adds	r3, #3
 800bac4:	f023 0303 	bic.w	r3, r3, #3
 800bac8:	6a3a      	ldr	r2, [r7, #32]
 800baca:	4413      	add	r3, r2
 800bacc:	617b      	str	r3, [r7, #20]
 800bace:	e001      	b.n	800bad4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800bad0:	2300      	movs	r3, #0
 800bad2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	89b9      	ldrh	r1, [r7, #12]
 800bad8:	89ba      	ldrh	r2, [r7, #12]
 800bada:	2302      	movs	r3, #2
 800badc:	9301      	str	r3, [sp, #4]
 800bade:	897b      	ldrh	r3, [r7, #10]
 800bae0:	9300      	str	r3, [sp, #0]
 800bae2:	460b      	mov	r3, r1
 800bae4:	6979      	ldr	r1, [r7, #20]
 800bae6:	f7ff fe81 	bl	800b7ec <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800baea:	687b      	ldr	r3, [r7, #4]
}
 800baec:	4618      	mov	r0, r3
 800baee:	3718      	adds	r7, #24
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	460b      	mov	r3, r1
 800bafe:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d106      	bne.n	800bb14 <pbuf_realloc+0x20>
 800bb06:	4b3a      	ldr	r3, [pc, #232]	; (800bbf0 <pbuf_realloc+0xfc>)
 800bb08:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800bb0c:	4939      	ldr	r1, [pc, #228]	; (800bbf4 <pbuf_realloc+0x100>)
 800bb0e:	483a      	ldr	r0, [pc, #232]	; (800bbf8 <pbuf_realloc+0x104>)
 800bb10:	f00a fdfc 	bl	801670c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	891b      	ldrh	r3, [r3, #8]
 800bb18:	887a      	ldrh	r2, [r7, #2]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d264      	bcs.n	800bbe8 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	891a      	ldrh	r2, [r3, #8]
 800bb22:	887b      	ldrh	r3, [r7, #2]
 800bb24:	1ad3      	subs	r3, r2, r3
 800bb26:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bb28:	887b      	ldrh	r3, [r7, #2]
 800bb2a:	817b      	strh	r3, [r7, #10]
  q = p;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800bb30:	e018      	b.n	800bb64 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	895b      	ldrh	r3, [r3, #10]
 800bb36:	897a      	ldrh	r2, [r7, #10]
 800bb38:	1ad3      	subs	r3, r2, r3
 800bb3a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	891a      	ldrh	r2, [r3, #8]
 800bb40:	893b      	ldrh	r3, [r7, #8]
 800bb42:	1ad3      	subs	r3, r2, r3
 800bb44:	b29a      	uxth	r2, r3
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d106      	bne.n	800bb64 <pbuf_realloc+0x70>
 800bb56:	4b26      	ldr	r3, [pc, #152]	; (800bbf0 <pbuf_realloc+0xfc>)
 800bb58:	f240 12af 	movw	r2, #431	; 0x1af
 800bb5c:	4927      	ldr	r1, [pc, #156]	; (800bbfc <pbuf_realloc+0x108>)
 800bb5e:	4826      	ldr	r0, [pc, #152]	; (800bbf8 <pbuf_realloc+0x104>)
 800bb60:	f00a fdd4 	bl	801670c <iprintf>
  while (rem_len > q->len) {
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	895b      	ldrh	r3, [r3, #10]
 800bb68:	897a      	ldrh	r2, [r7, #10]
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d8e1      	bhi.n	800bb32 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	7b1b      	ldrb	r3, [r3, #12]
 800bb72:	f003 030f 	and.w	r3, r3, #15
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d122      	bne.n	800bbc0 <pbuf_realloc+0xcc>
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	895b      	ldrh	r3, [r3, #10]
 800bb7e:	897a      	ldrh	r2, [r7, #10]
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d01d      	beq.n	800bbc0 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	7b5b      	ldrb	r3, [r3, #13]
 800bb88:	f003 0302 	and.w	r3, r3, #2
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d117      	bne.n	800bbc0 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	461a      	mov	r2, r3
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	1ad3      	subs	r3, r2, r3
 800bb9a:	b29a      	uxth	r2, r3
 800bb9c:	897b      	ldrh	r3, [r7, #10]
 800bb9e:	4413      	add	r3, r2
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	4619      	mov	r1, r3
 800bba4:	68f8      	ldr	r0, [r7, #12]
 800bba6:	f7ff f875 	bl	800ac94 <mem_trim>
 800bbaa:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d106      	bne.n	800bbc0 <pbuf_realloc+0xcc>
 800bbb2:	4b0f      	ldr	r3, [pc, #60]	; (800bbf0 <pbuf_realloc+0xfc>)
 800bbb4:	f240 12bd 	movw	r2, #445	; 0x1bd
 800bbb8:	4911      	ldr	r1, [pc, #68]	; (800bc00 <pbuf_realloc+0x10c>)
 800bbba:	480f      	ldr	r0, [pc, #60]	; (800bbf8 <pbuf_realloc+0x104>)
 800bbbc:	f00a fda6 	bl	801670c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	897a      	ldrh	r2, [r7, #10]
 800bbc4:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	895a      	ldrh	r2, [r3, #10]
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d004      	beq.n	800bbe0 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f000 f910 	bl	800be00 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	601a      	str	r2, [r3, #0]
 800bbe6:	e000      	b.n	800bbea <pbuf_realloc+0xf6>
    return;
 800bbe8:	bf00      	nop

}
 800bbea:	3710      	adds	r7, #16
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	08017ab8 	.word	0x08017ab8
 800bbf4:	08017bd0 	.word	0x08017bd0
 800bbf8:	08017b18 	.word	0x08017b18
 800bbfc:	08017be8 	.word	0x08017be8
 800bc00:	08017c00 	.word	0x08017c00

0800bc04 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b086      	sub	sp, #24
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	60f8      	str	r0, [r7, #12]
 800bc0c:	60b9      	str	r1, [r7, #8]
 800bc0e:	4613      	mov	r3, r2
 800bc10:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d106      	bne.n	800bc26 <pbuf_add_header_impl+0x22>
 800bc18:	4b2b      	ldr	r3, [pc, #172]	; (800bcc8 <pbuf_add_header_impl+0xc4>)
 800bc1a:	f240 12df 	movw	r2, #479	; 0x1df
 800bc1e:	492b      	ldr	r1, [pc, #172]	; (800bccc <pbuf_add_header_impl+0xc8>)
 800bc20:	482b      	ldr	r0, [pc, #172]	; (800bcd0 <pbuf_add_header_impl+0xcc>)
 800bc22:	f00a fd73 	bl	801670c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d003      	beq.n	800bc34 <pbuf_add_header_impl+0x30>
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc32:	d301      	bcc.n	800bc38 <pbuf_add_header_impl+0x34>
    return 1;
 800bc34:	2301      	movs	r3, #1
 800bc36:	e043      	b.n	800bcc0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d101      	bne.n	800bc42 <pbuf_add_header_impl+0x3e>
    return 0;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	e03e      	b.n	800bcc0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	891a      	ldrh	r2, [r3, #8]
 800bc4a:	8a7b      	ldrh	r3, [r7, #18]
 800bc4c:	4413      	add	r3, r2
 800bc4e:	b29b      	uxth	r3, r3
 800bc50:	8a7a      	ldrh	r2, [r7, #18]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d901      	bls.n	800bc5a <pbuf_add_header_impl+0x56>
    return 1;
 800bc56:	2301      	movs	r3, #1
 800bc58:	e032      	b.n	800bcc0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	7b1b      	ldrb	r3, [r3, #12]
 800bc5e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800bc60:	8a3b      	ldrh	r3, [r7, #16]
 800bc62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d00c      	beq.n	800bc84 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	685a      	ldr	r2, [r3, #4]
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	425b      	negs	r3, r3
 800bc72:	4413      	add	r3, r2
 800bc74:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	3310      	adds	r3, #16
 800bc7a:	697a      	ldr	r2, [r7, #20]
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	d20d      	bcs.n	800bc9c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800bc80:	2301      	movs	r3, #1
 800bc82:	e01d      	b.n	800bcc0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800bc84:	79fb      	ldrb	r3, [r7, #7]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d006      	beq.n	800bc98 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	685a      	ldr	r2, [r3, #4]
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	425b      	negs	r3, r3
 800bc92:	4413      	add	r3, r2
 800bc94:	617b      	str	r3, [r7, #20]
 800bc96:	e001      	b.n	800bc9c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	e011      	b.n	800bcc0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	697a      	ldr	r2, [r7, #20]
 800bca0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	895a      	ldrh	r2, [r3, #10]
 800bca6:	8a7b      	ldrh	r3, [r7, #18]
 800bca8:	4413      	add	r3, r2
 800bcaa:	b29a      	uxth	r2, r3
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	891a      	ldrh	r2, [r3, #8]
 800bcb4:	8a7b      	ldrh	r3, [r7, #18]
 800bcb6:	4413      	add	r3, r2
 800bcb8:	b29a      	uxth	r2, r3
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	811a      	strh	r2, [r3, #8]


  return 0;
 800bcbe:	2300      	movs	r3, #0
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3718      	adds	r7, #24
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}
 800bcc8:	08017ab8 	.word	0x08017ab8
 800bccc:	08017c1c 	.word	0x08017c1c
 800bcd0:	08017b18 	.word	0x08017b18

0800bcd4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800bcde:	2200      	movs	r2, #0
 800bce0:	6839      	ldr	r1, [r7, #0]
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f7ff ff8e 	bl	800bc04 <pbuf_add_header_impl>
 800bce8:	4603      	mov	r3, r0
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3708      	adds	r7, #8
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
	...

0800bcf4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b084      	sub	sp, #16
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d106      	bne.n	800bd12 <pbuf_remove_header+0x1e>
 800bd04:	4b20      	ldr	r3, [pc, #128]	; (800bd88 <pbuf_remove_header+0x94>)
 800bd06:	f240 224b 	movw	r2, #587	; 0x24b
 800bd0a:	4920      	ldr	r1, [pc, #128]	; (800bd8c <pbuf_remove_header+0x98>)
 800bd0c:	4820      	ldr	r0, [pc, #128]	; (800bd90 <pbuf_remove_header+0x9c>)
 800bd0e:	f00a fcfd 	bl	801670c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d003      	beq.n	800bd20 <pbuf_remove_header+0x2c>
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd1e:	d301      	bcc.n	800bd24 <pbuf_remove_header+0x30>
    return 1;
 800bd20:	2301      	movs	r3, #1
 800bd22:	e02c      	b.n	800bd7e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d101      	bne.n	800bd2e <pbuf_remove_header+0x3a>
    return 0;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	e027      	b.n	800bd7e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	895b      	ldrh	r3, [r3, #10]
 800bd36:	89fa      	ldrh	r2, [r7, #14]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d908      	bls.n	800bd4e <pbuf_remove_header+0x5a>
 800bd3c:	4b12      	ldr	r3, [pc, #72]	; (800bd88 <pbuf_remove_header+0x94>)
 800bd3e:	f240 2255 	movw	r2, #597	; 0x255
 800bd42:	4914      	ldr	r1, [pc, #80]	; (800bd94 <pbuf_remove_header+0xa0>)
 800bd44:	4812      	ldr	r0, [pc, #72]	; (800bd90 <pbuf_remove_header+0x9c>)
 800bd46:	f00a fce1 	bl	801670c <iprintf>
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	e017      	b.n	800bd7e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	685b      	ldr	r3, [r3, #4]
 800bd52:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	685a      	ldr	r2, [r3, #4]
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	441a      	add	r2, r3
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	895a      	ldrh	r2, [r3, #10]
 800bd64:	89fb      	ldrh	r3, [r7, #14]
 800bd66:	1ad3      	subs	r3, r2, r3
 800bd68:	b29a      	uxth	r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	891a      	ldrh	r2, [r3, #8]
 800bd72:	89fb      	ldrh	r3, [r7, #14]
 800bd74:	1ad3      	subs	r3, r2, r3
 800bd76:	b29a      	uxth	r2, r3
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800bd7c:	2300      	movs	r3, #0
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3710      	adds	r7, #16
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	08017ab8 	.word	0x08017ab8
 800bd8c:	08017c1c 	.word	0x08017c1c
 800bd90:	08017b18 	.word	0x08017b18
 800bd94:	08017c28 	.word	0x08017c28

0800bd98 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	460b      	mov	r3, r1
 800bda2:	807b      	strh	r3, [r7, #2]
 800bda4:	4613      	mov	r3, r2
 800bda6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800bda8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	da08      	bge.n	800bdc2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800bdb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bdb4:	425b      	negs	r3, r3
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f7ff ff9b 	bl	800bcf4 <pbuf_remove_header>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	e007      	b.n	800bdd2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800bdc2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bdc6:	787a      	ldrb	r2, [r7, #1]
 800bdc8:	4619      	mov	r1, r3
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f7ff ff1a 	bl	800bc04 <pbuf_add_header_impl>
 800bdd0:	4603      	mov	r3, r0
  }
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3708      	adds	r7, #8
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}

0800bdda <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b082      	sub	sp, #8
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
 800bde2:	460b      	mov	r3, r1
 800bde4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800bde6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bdea:	2201      	movs	r2, #1
 800bdec:	4619      	mov	r1, r3
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f7ff ffd2 	bl	800bd98 <pbuf_header_impl>
 800bdf4:	4603      	mov	r3, r0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3708      	adds	r7, #8
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
	...

0800be00 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b086      	sub	sp, #24
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d10b      	bne.n	800be26 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d106      	bne.n	800be22 <pbuf_free+0x22>
 800be14:	4b38      	ldr	r3, [pc, #224]	; (800bef8 <pbuf_free+0xf8>)
 800be16:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800be1a:	4938      	ldr	r1, [pc, #224]	; (800befc <pbuf_free+0xfc>)
 800be1c:	4838      	ldr	r0, [pc, #224]	; (800bf00 <pbuf_free+0x100>)
 800be1e:	f00a fc75 	bl	801670c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800be22:	2300      	movs	r3, #0
 800be24:	e063      	b.n	800beee <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800be26:	2300      	movs	r3, #0
 800be28:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800be2a:	e05c      	b.n	800bee6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	7b9b      	ldrb	r3, [r3, #14]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d106      	bne.n	800be42 <pbuf_free+0x42>
 800be34:	4b30      	ldr	r3, [pc, #192]	; (800bef8 <pbuf_free+0xf8>)
 800be36:	f240 22f1 	movw	r2, #753	; 0x2f1
 800be3a:	4932      	ldr	r1, [pc, #200]	; (800bf04 <pbuf_free+0x104>)
 800be3c:	4830      	ldr	r0, [pc, #192]	; (800bf00 <pbuf_free+0x100>)
 800be3e:	f00a fc65 	bl	801670c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	7b9b      	ldrb	r3, [r3, #14]
 800be46:	3b01      	subs	r3, #1
 800be48:	b2da      	uxtb	r2, r3
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	739a      	strb	r2, [r3, #14]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	7b9b      	ldrb	r3, [r3, #14]
 800be52:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800be54:	7dbb      	ldrb	r3, [r7, #22]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d143      	bne.n	800bee2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	7b1b      	ldrb	r3, [r3, #12]
 800be64:	f003 030f 	and.w	r3, r3, #15
 800be68:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	7b5b      	ldrb	r3, [r3, #13]
 800be6e:	f003 0302 	and.w	r3, r3, #2
 800be72:	2b00      	cmp	r3, #0
 800be74:	d011      	beq.n	800be9a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	691b      	ldr	r3, [r3, #16]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d106      	bne.n	800be90 <pbuf_free+0x90>
 800be82:	4b1d      	ldr	r3, [pc, #116]	; (800bef8 <pbuf_free+0xf8>)
 800be84:	f240 22ff 	movw	r2, #767	; 0x2ff
 800be88:	491f      	ldr	r1, [pc, #124]	; (800bf08 <pbuf_free+0x108>)
 800be8a:	481d      	ldr	r0, [pc, #116]	; (800bf00 <pbuf_free+0x100>)
 800be8c:	f00a fc3e 	bl	801670c <iprintf>
        pc->custom_free_function(p);
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	691b      	ldr	r3, [r3, #16]
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	4798      	blx	r3
 800be98:	e01d      	b.n	800bed6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800be9a:	7bfb      	ldrb	r3, [r7, #15]
 800be9c:	2b02      	cmp	r3, #2
 800be9e:	d104      	bne.n	800beaa <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800bea0:	6879      	ldr	r1, [r7, #4]
 800bea2:	2008      	movs	r0, #8
 800bea4:	f7ff f9ac 	bl	800b200 <memp_free>
 800bea8:	e015      	b.n	800bed6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800beaa:	7bfb      	ldrb	r3, [r7, #15]
 800beac:	2b01      	cmp	r3, #1
 800beae:	d104      	bne.n	800beba <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800beb0:	6879      	ldr	r1, [r7, #4]
 800beb2:	2007      	movs	r0, #7
 800beb4:	f7ff f9a4 	bl	800b200 <memp_free>
 800beb8:	e00d      	b.n	800bed6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800beba:	7bfb      	ldrb	r3, [r7, #15]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d103      	bne.n	800bec8 <pbuf_free+0xc8>
          mem_free(p);
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	f7fe fe7d 	bl	800abc0 <mem_free>
 800bec6:	e006      	b.n	800bed6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800bec8:	4b0b      	ldr	r3, [pc, #44]	; (800bef8 <pbuf_free+0xf8>)
 800beca:	f240 320f 	movw	r2, #783	; 0x30f
 800bece:	490f      	ldr	r1, [pc, #60]	; (800bf0c <pbuf_free+0x10c>)
 800bed0:	480b      	ldr	r0, [pc, #44]	; (800bf00 <pbuf_free+0x100>)
 800bed2:	f00a fc1b 	bl	801670c <iprintf>
        }
      }
      count++;
 800bed6:	7dfb      	ldrb	r3, [r7, #23]
 800bed8:	3301      	adds	r3, #1
 800beda:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	607b      	str	r3, [r7, #4]
 800bee0:	e001      	b.n	800bee6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800bee2:	2300      	movs	r3, #0
 800bee4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d19f      	bne.n	800be2c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800beec:	7dfb      	ldrb	r3, [r7, #23]
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3718      	adds	r7, #24
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	08017ab8 	.word	0x08017ab8
 800befc:	08017c1c 	.word	0x08017c1c
 800bf00:	08017b18 	.word	0x08017b18
 800bf04:	08017c48 	.word	0x08017c48
 800bf08:	08017c60 	.word	0x08017c60
 800bf0c:	08017c84 	.word	0x08017c84

0800bf10 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b085      	sub	sp, #20
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bf1c:	e005      	b.n	800bf2a <pbuf_clen+0x1a>
    ++len;
 800bf1e:	89fb      	ldrh	r3, [r7, #14]
 800bf20:	3301      	adds	r3, #1
 800bf22:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d1f6      	bne.n	800bf1e <pbuf_clen+0xe>
  }
  return len;
 800bf30:	89fb      	ldrh	r3, [r7, #14]
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3714      	adds	r7, #20
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr
	...

0800bf40 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b082      	sub	sp, #8
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d010      	beq.n	800bf70 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	7b9b      	ldrb	r3, [r3, #14]
 800bf52:	3301      	adds	r3, #1
 800bf54:	b2da      	uxtb	r2, r3
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	7b9b      	ldrb	r3, [r3, #14]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d106      	bne.n	800bf70 <pbuf_ref+0x30>
 800bf62:	4b05      	ldr	r3, [pc, #20]	; (800bf78 <pbuf_ref+0x38>)
 800bf64:	f240 3242 	movw	r2, #834	; 0x342
 800bf68:	4904      	ldr	r1, [pc, #16]	; (800bf7c <pbuf_ref+0x3c>)
 800bf6a:	4805      	ldr	r0, [pc, #20]	; (800bf80 <pbuf_ref+0x40>)
 800bf6c:	f00a fbce 	bl	801670c <iprintf>
  }
}
 800bf70:	bf00      	nop
 800bf72:	3708      	adds	r7, #8
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}
 800bf78:	08017ab8 	.word	0x08017ab8
 800bf7c:	08017c98 	.word	0x08017c98
 800bf80:	08017b18 	.word	0x08017b18

0800bf84 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d002      	beq.n	800bf9a <pbuf_cat+0x16>
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d107      	bne.n	800bfaa <pbuf_cat+0x26>
 800bf9a:	4b20      	ldr	r3, [pc, #128]	; (800c01c <pbuf_cat+0x98>)
 800bf9c:	f240 325a 	movw	r2, #858	; 0x35a
 800bfa0:	491f      	ldr	r1, [pc, #124]	; (800c020 <pbuf_cat+0x9c>)
 800bfa2:	4820      	ldr	r0, [pc, #128]	; (800c024 <pbuf_cat+0xa0>)
 800bfa4:	f00a fbb2 	bl	801670c <iprintf>
 800bfa8:	e034      	b.n	800c014 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	60fb      	str	r3, [r7, #12]
 800bfae:	e00a      	b.n	800bfc6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	891a      	ldrh	r2, [r3, #8]
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	891b      	ldrh	r3, [r3, #8]
 800bfb8:	4413      	add	r3, r2
 800bfba:	b29a      	uxth	r2, r3
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	60fb      	str	r3, [r7, #12]
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d1f0      	bne.n	800bfb0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	891a      	ldrh	r2, [r3, #8]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	895b      	ldrh	r3, [r3, #10]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d006      	beq.n	800bfe8 <pbuf_cat+0x64>
 800bfda:	4b10      	ldr	r3, [pc, #64]	; (800c01c <pbuf_cat+0x98>)
 800bfdc:	f240 3262 	movw	r2, #866	; 0x362
 800bfe0:	4911      	ldr	r1, [pc, #68]	; (800c028 <pbuf_cat+0xa4>)
 800bfe2:	4810      	ldr	r0, [pc, #64]	; (800c024 <pbuf_cat+0xa0>)
 800bfe4:	f00a fb92 	bl	801670c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d006      	beq.n	800bffe <pbuf_cat+0x7a>
 800bff0:	4b0a      	ldr	r3, [pc, #40]	; (800c01c <pbuf_cat+0x98>)
 800bff2:	f240 3263 	movw	r2, #867	; 0x363
 800bff6:	490d      	ldr	r1, [pc, #52]	; (800c02c <pbuf_cat+0xa8>)
 800bff8:	480a      	ldr	r0, [pc, #40]	; (800c024 <pbuf_cat+0xa0>)
 800bffa:	f00a fb87 	bl	801670c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	891a      	ldrh	r2, [r3, #8]
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	891b      	ldrh	r3, [r3, #8]
 800c006:	4413      	add	r3, r2
 800c008:	b29a      	uxth	r2, r3
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	683a      	ldr	r2, [r7, #0]
 800c012:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c014:	3710      	adds	r7, #16
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	08017ab8 	.word	0x08017ab8
 800c020:	08017cac 	.word	0x08017cac
 800c024:	08017b18 	.word	0x08017b18
 800c028:	08017ce4 	.word	0x08017ce4
 800c02c:	08017d14 	.word	0x08017d14

0800c030 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c03a:	6839      	ldr	r1, [r7, #0]
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f7ff ffa1 	bl	800bf84 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c042:	6838      	ldr	r0, [r7, #0]
 800c044:	f7ff ff7c 	bl	800bf40 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c048:	bf00      	nop
 800c04a:	3708      	adds	r7, #8
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b086      	sub	sp, #24
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c05a:	2300      	movs	r3, #0
 800c05c:	617b      	str	r3, [r7, #20]
 800c05e:	2300      	movs	r3, #0
 800c060:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d008      	beq.n	800c07a <pbuf_copy+0x2a>
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d005      	beq.n	800c07a <pbuf_copy+0x2a>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	891a      	ldrh	r2, [r3, #8]
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	891b      	ldrh	r3, [r3, #8]
 800c076:	429a      	cmp	r2, r3
 800c078:	d209      	bcs.n	800c08e <pbuf_copy+0x3e>
 800c07a:	4b57      	ldr	r3, [pc, #348]	; (800c1d8 <pbuf_copy+0x188>)
 800c07c:	f240 32ca 	movw	r2, #970	; 0x3ca
 800c080:	4956      	ldr	r1, [pc, #344]	; (800c1dc <pbuf_copy+0x18c>)
 800c082:	4857      	ldr	r0, [pc, #348]	; (800c1e0 <pbuf_copy+0x190>)
 800c084:	f00a fb42 	bl	801670c <iprintf>
 800c088:	f06f 030f 	mvn.w	r3, #15
 800c08c:	e09f      	b.n	800c1ce <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	895b      	ldrh	r3, [r3, #10]
 800c092:	461a      	mov	r2, r3
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	1ad2      	subs	r2, r2, r3
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	895b      	ldrh	r3, [r3, #10]
 800c09c:	4619      	mov	r1, r3
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	1acb      	subs	r3, r1, r3
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d306      	bcc.n	800c0b4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	895b      	ldrh	r3, [r3, #10]
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	1ad3      	subs	r3, r2, r3
 800c0b0:	60fb      	str	r3, [r7, #12]
 800c0b2:	e005      	b.n	800c0c0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	895b      	ldrh	r3, [r3, #10]
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	1ad3      	subs	r3, r2, r3
 800c0be:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	685a      	ldr	r2, [r3, #4]
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	18d0      	adds	r0, r2, r3
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	685a      	ldr	r2, [r3, #4]
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	4413      	add	r3, r2
 800c0d0:	68fa      	ldr	r2, [r7, #12]
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	f00a fa5f 	bl	8016596 <memcpy>
    offset_to += len;
 800c0d8:	697a      	ldr	r2, [r7, #20]
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	4413      	add	r3, r2
 800c0de:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c0e0:	693a      	ldr	r2, [r7, #16]
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	4413      	add	r3, r2
 800c0e6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	895b      	ldrh	r3, [r3, #10]
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d906      	bls.n	800c102 <pbuf_copy+0xb2>
 800c0f4:	4b38      	ldr	r3, [pc, #224]	; (800c1d8 <pbuf_copy+0x188>)
 800c0f6:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c0fa:	493a      	ldr	r1, [pc, #232]	; (800c1e4 <pbuf_copy+0x194>)
 800c0fc:	4838      	ldr	r0, [pc, #224]	; (800c1e0 <pbuf_copy+0x190>)
 800c0fe:	f00a fb05 	bl	801670c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	895b      	ldrh	r3, [r3, #10]
 800c106:	461a      	mov	r2, r3
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d906      	bls.n	800c11c <pbuf_copy+0xcc>
 800c10e:	4b32      	ldr	r3, [pc, #200]	; (800c1d8 <pbuf_copy+0x188>)
 800c110:	f240 32da 	movw	r2, #986	; 0x3da
 800c114:	4934      	ldr	r1, [pc, #208]	; (800c1e8 <pbuf_copy+0x198>)
 800c116:	4832      	ldr	r0, [pc, #200]	; (800c1e0 <pbuf_copy+0x190>)
 800c118:	f00a faf8 	bl	801670c <iprintf>
    if (offset_from >= p_from->len) {
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	895b      	ldrh	r3, [r3, #10]
 800c120:	461a      	mov	r2, r3
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	4293      	cmp	r3, r2
 800c126:	d304      	bcc.n	800c132 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c128:	2300      	movs	r3, #0
 800c12a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	895b      	ldrh	r3, [r3, #10]
 800c136:	461a      	mov	r2, r3
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d114      	bne.n	800c168 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c13e:	2300      	movs	r3, #0
 800c140:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d10c      	bne.n	800c168 <pbuf_copy+0x118>
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d009      	beq.n	800c168 <pbuf_copy+0x118>
 800c154:	4b20      	ldr	r3, [pc, #128]	; (800c1d8 <pbuf_copy+0x188>)
 800c156:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c15a:	4924      	ldr	r1, [pc, #144]	; (800c1ec <pbuf_copy+0x19c>)
 800c15c:	4820      	ldr	r0, [pc, #128]	; (800c1e0 <pbuf_copy+0x190>)
 800c15e:	f00a fad5 	bl	801670c <iprintf>
 800c162:	f06f 030f 	mvn.w	r3, #15
 800c166:	e032      	b.n	800c1ce <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d013      	beq.n	800c196 <pbuf_copy+0x146>
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	895a      	ldrh	r2, [r3, #10]
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	891b      	ldrh	r3, [r3, #8]
 800c176:	429a      	cmp	r2, r3
 800c178:	d10d      	bne.n	800c196 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d009      	beq.n	800c196 <pbuf_copy+0x146>
 800c182:	4b15      	ldr	r3, [pc, #84]	; (800c1d8 <pbuf_copy+0x188>)
 800c184:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800c188:	4919      	ldr	r1, [pc, #100]	; (800c1f0 <pbuf_copy+0x1a0>)
 800c18a:	4815      	ldr	r0, [pc, #84]	; (800c1e0 <pbuf_copy+0x190>)
 800c18c:	f00a fabe 	bl	801670c <iprintf>
 800c190:	f06f 0305 	mvn.w	r3, #5
 800c194:	e01b      	b.n	800c1ce <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d013      	beq.n	800c1c4 <pbuf_copy+0x174>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	895a      	ldrh	r2, [r3, #10]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	891b      	ldrh	r3, [r3, #8]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d10d      	bne.n	800c1c4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d009      	beq.n	800c1c4 <pbuf_copy+0x174>
 800c1b0:	4b09      	ldr	r3, [pc, #36]	; (800c1d8 <pbuf_copy+0x188>)
 800c1b2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800c1b6:	490e      	ldr	r1, [pc, #56]	; (800c1f0 <pbuf_copy+0x1a0>)
 800c1b8:	4809      	ldr	r0, [pc, #36]	; (800c1e0 <pbuf_copy+0x190>)
 800c1ba:	f00a faa7 	bl	801670c <iprintf>
 800c1be:	f06f 0305 	mvn.w	r3, #5
 800c1c2:	e004      	b.n	800c1ce <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	f47f af61 	bne.w	800c08e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c1cc:	2300      	movs	r3, #0
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3718      	adds	r7, #24
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	08017ab8 	.word	0x08017ab8
 800c1dc:	08017d60 	.word	0x08017d60
 800c1e0:	08017b18 	.word	0x08017b18
 800c1e4:	08017d90 	.word	0x08017d90
 800c1e8:	08017da8 	.word	0x08017da8
 800c1ec:	08017dc4 	.word	0x08017dc4
 800c1f0:	08017dd4 	.word	0x08017dd4

0800c1f4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b088      	sub	sp, #32
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	60b9      	str	r1, [r7, #8]
 800c1fe:	4611      	mov	r1, r2
 800c200:	461a      	mov	r2, r3
 800c202:	460b      	mov	r3, r1
 800c204:	80fb      	strh	r3, [r7, #6]
 800c206:	4613      	mov	r3, r2
 800c208:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c20a:	2300      	movs	r3, #0
 800c20c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c20e:	2300      	movs	r3, #0
 800c210:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d108      	bne.n	800c22a <pbuf_copy_partial+0x36>
 800c218:	4b2b      	ldr	r3, [pc, #172]	; (800c2c8 <pbuf_copy_partial+0xd4>)
 800c21a:	f240 420a 	movw	r2, #1034	; 0x40a
 800c21e:	492b      	ldr	r1, [pc, #172]	; (800c2cc <pbuf_copy_partial+0xd8>)
 800c220:	482b      	ldr	r0, [pc, #172]	; (800c2d0 <pbuf_copy_partial+0xdc>)
 800c222:	f00a fa73 	bl	801670c <iprintf>
 800c226:	2300      	movs	r3, #0
 800c228:	e04a      	b.n	800c2c0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d108      	bne.n	800c242 <pbuf_copy_partial+0x4e>
 800c230:	4b25      	ldr	r3, [pc, #148]	; (800c2c8 <pbuf_copy_partial+0xd4>)
 800c232:	f240 420b 	movw	r2, #1035	; 0x40b
 800c236:	4927      	ldr	r1, [pc, #156]	; (800c2d4 <pbuf_copy_partial+0xe0>)
 800c238:	4825      	ldr	r0, [pc, #148]	; (800c2d0 <pbuf_copy_partial+0xdc>)
 800c23a:	f00a fa67 	bl	801670c <iprintf>
 800c23e:	2300      	movs	r3, #0
 800c240:	e03e      	b.n	800c2c0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	61fb      	str	r3, [r7, #28]
 800c246:	e034      	b.n	800c2b2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c248:	88bb      	ldrh	r3, [r7, #4]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d00a      	beq.n	800c264 <pbuf_copy_partial+0x70>
 800c24e:	69fb      	ldr	r3, [r7, #28]
 800c250:	895b      	ldrh	r3, [r3, #10]
 800c252:	88ba      	ldrh	r2, [r7, #4]
 800c254:	429a      	cmp	r2, r3
 800c256:	d305      	bcc.n	800c264 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c258:	69fb      	ldr	r3, [r7, #28]
 800c25a:	895b      	ldrh	r3, [r3, #10]
 800c25c:	88ba      	ldrh	r2, [r7, #4]
 800c25e:	1ad3      	subs	r3, r2, r3
 800c260:	80bb      	strh	r3, [r7, #4]
 800c262:	e023      	b.n	800c2ac <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c264:	69fb      	ldr	r3, [r7, #28]
 800c266:	895a      	ldrh	r2, [r3, #10]
 800c268:	88bb      	ldrh	r3, [r7, #4]
 800c26a:	1ad3      	subs	r3, r2, r3
 800c26c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c26e:	8b3a      	ldrh	r2, [r7, #24]
 800c270:	88fb      	ldrh	r3, [r7, #6]
 800c272:	429a      	cmp	r2, r3
 800c274:	d901      	bls.n	800c27a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c276:	88fb      	ldrh	r3, [r7, #6]
 800c278:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c27a:	8b7b      	ldrh	r3, [r7, #26]
 800c27c:	68ba      	ldr	r2, [r7, #8]
 800c27e:	18d0      	adds	r0, r2, r3
 800c280:	69fb      	ldr	r3, [r7, #28]
 800c282:	685a      	ldr	r2, [r3, #4]
 800c284:	88bb      	ldrh	r3, [r7, #4]
 800c286:	4413      	add	r3, r2
 800c288:	8b3a      	ldrh	r2, [r7, #24]
 800c28a:	4619      	mov	r1, r3
 800c28c:	f00a f983 	bl	8016596 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c290:	8afa      	ldrh	r2, [r7, #22]
 800c292:	8b3b      	ldrh	r3, [r7, #24]
 800c294:	4413      	add	r3, r2
 800c296:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c298:	8b7a      	ldrh	r2, [r7, #26]
 800c29a:	8b3b      	ldrh	r3, [r7, #24]
 800c29c:	4413      	add	r3, r2
 800c29e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c2a0:	88fa      	ldrh	r2, [r7, #6]
 800c2a2:	8b3b      	ldrh	r3, [r7, #24]
 800c2a4:	1ad3      	subs	r3, r2, r3
 800c2a6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	61fb      	str	r3, [r7, #28]
 800c2b2:	88fb      	ldrh	r3, [r7, #6]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d002      	beq.n	800c2be <pbuf_copy_partial+0xca>
 800c2b8:	69fb      	ldr	r3, [r7, #28]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d1c4      	bne.n	800c248 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c2be:	8afb      	ldrh	r3, [r7, #22]
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3720      	adds	r7, #32
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	08017ab8 	.word	0x08017ab8
 800c2cc:	08017e00 	.word	0x08017e00
 800c2d0:	08017b18 	.word	0x08017b18
 800c2d4:	08017e20 	.word	0x08017e20

0800c2d8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	4603      	mov	r3, r0
 800c2e0:	603a      	str	r2, [r7, #0]
 800c2e2:	71fb      	strb	r3, [r7, #7]
 800c2e4:	460b      	mov	r3, r1
 800c2e6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	8919      	ldrh	r1, [r3, #8]
 800c2ec:	88ba      	ldrh	r2, [r7, #4]
 800c2ee:	79fb      	ldrb	r3, [r7, #7]
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f7ff faa5 	bl	800b840 <pbuf_alloc>
 800c2f6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d101      	bne.n	800c302 <pbuf_clone+0x2a>
    return NULL;
 800c2fe:	2300      	movs	r3, #0
 800c300:	e011      	b.n	800c326 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c302:	6839      	ldr	r1, [r7, #0]
 800c304:	68f8      	ldr	r0, [r7, #12]
 800c306:	f7ff fea3 	bl	800c050 <pbuf_copy>
 800c30a:	4603      	mov	r3, r0
 800c30c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c30e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d006      	beq.n	800c324 <pbuf_clone+0x4c>
 800c316:	4b06      	ldr	r3, [pc, #24]	; (800c330 <pbuf_clone+0x58>)
 800c318:	f240 5224 	movw	r2, #1316	; 0x524
 800c31c:	4905      	ldr	r1, [pc, #20]	; (800c334 <pbuf_clone+0x5c>)
 800c31e:	4806      	ldr	r0, [pc, #24]	; (800c338 <pbuf_clone+0x60>)
 800c320:	f00a f9f4 	bl	801670c <iprintf>
  return q;
 800c324:	68fb      	ldr	r3, [r7, #12]
}
 800c326:	4618      	mov	r0, r3
 800c328:	3710      	adds	r7, #16
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}
 800c32e:	bf00      	nop
 800c330:	08017ab8 	.word	0x08017ab8
 800c334:	08017f2c 	.word	0x08017f2c
 800c338:	08017b18 	.word	0x08017b18

0800c33c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c340:	f00a f9fc 	bl	801673c <rand>
 800c344:	4603      	mov	r3, r0
 800c346:	b29b      	uxth	r3, r3
 800c348:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c34c:	b29b      	uxth	r3, r3
 800c34e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c352:	b29a      	uxth	r2, r3
 800c354:	4b01      	ldr	r3, [pc, #4]	; (800c35c <tcp_init+0x20>)
 800c356:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c358:	bf00      	nop
 800c35a:	bd80      	pop	{r7, pc}
 800c35c:	20000016 	.word	0x20000016

0800c360 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b082      	sub	sp, #8
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	7d1b      	ldrb	r3, [r3, #20]
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d105      	bne.n	800c37c <tcp_free+0x1c>
 800c370:	4b06      	ldr	r3, [pc, #24]	; (800c38c <tcp_free+0x2c>)
 800c372:	22d4      	movs	r2, #212	; 0xd4
 800c374:	4906      	ldr	r1, [pc, #24]	; (800c390 <tcp_free+0x30>)
 800c376:	4807      	ldr	r0, [pc, #28]	; (800c394 <tcp_free+0x34>)
 800c378:	f00a f9c8 	bl	801670c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c37c:	6879      	ldr	r1, [r7, #4]
 800c37e:	2001      	movs	r0, #1
 800c380:	f7fe ff3e 	bl	800b200 <memp_free>
}
 800c384:	bf00      	nop
 800c386:	3708      	adds	r7, #8
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}
 800c38c:	08017fb8 	.word	0x08017fb8
 800c390:	08017fe8 	.word	0x08017fe8
 800c394:	08017ffc 	.word	0x08017ffc

0800c398 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	7d1b      	ldrb	r3, [r3, #20]
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d105      	bne.n	800c3b4 <tcp_free_listen+0x1c>
 800c3a8:	4b06      	ldr	r3, [pc, #24]	; (800c3c4 <tcp_free_listen+0x2c>)
 800c3aa:	22df      	movs	r2, #223	; 0xdf
 800c3ac:	4906      	ldr	r1, [pc, #24]	; (800c3c8 <tcp_free_listen+0x30>)
 800c3ae:	4807      	ldr	r0, [pc, #28]	; (800c3cc <tcp_free_listen+0x34>)
 800c3b0:	f00a f9ac 	bl	801670c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c3b4:	6879      	ldr	r1, [r7, #4]
 800c3b6:	2002      	movs	r0, #2
 800c3b8:	f7fe ff22 	bl	800b200 <memp_free>
}
 800c3bc:	bf00      	nop
 800c3be:	3708      	adds	r7, #8
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	08017fb8 	.word	0x08017fb8
 800c3c8:	08018024 	.word	0x08018024
 800c3cc:	08017ffc 	.word	0x08017ffc

0800c3d0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c3d4:	f000 fe98 	bl	800d108 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c3d8:	4b07      	ldr	r3, [pc, #28]	; (800c3f8 <tcp_tmr+0x28>)
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	3301      	adds	r3, #1
 800c3de:	b2da      	uxtb	r2, r3
 800c3e0:	4b05      	ldr	r3, [pc, #20]	; (800c3f8 <tcp_tmr+0x28>)
 800c3e2:	701a      	strb	r2, [r3, #0]
 800c3e4:	4b04      	ldr	r3, [pc, #16]	; (800c3f8 <tcp_tmr+0x28>)
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	f003 0301 	and.w	r3, r3, #1
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d001      	beq.n	800c3f4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c3f0:	f000 fb4c 	bl	800ca8c <tcp_slowtmr>
  }
}
 800c3f4:	bf00      	nop
 800c3f6:	bd80      	pop	{r7, pc}
 800c3f8:	20000459 	.word	0x20000459

0800c3fc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
 800c404:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d105      	bne.n	800c418 <tcp_remove_listener+0x1c>
 800c40c:	4b0d      	ldr	r3, [pc, #52]	; (800c444 <tcp_remove_listener+0x48>)
 800c40e:	22ff      	movs	r2, #255	; 0xff
 800c410:	490d      	ldr	r1, [pc, #52]	; (800c448 <tcp_remove_listener+0x4c>)
 800c412:	480e      	ldr	r0, [pc, #56]	; (800c44c <tcp_remove_listener+0x50>)
 800c414:	f00a f97a 	bl	801670c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	60fb      	str	r3, [r7, #12]
 800c41c:	e00a      	b.n	800c434 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c422:	683a      	ldr	r2, [r7, #0]
 800c424:	429a      	cmp	r2, r3
 800c426:	d102      	bne.n	800c42e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2200      	movs	r2, #0
 800c42c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	68db      	ldr	r3, [r3, #12]
 800c432:	60fb      	str	r3, [r7, #12]
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d1f1      	bne.n	800c41e <tcp_remove_listener+0x22>
    }
  }
}
 800c43a:	bf00      	nop
 800c43c:	3710      	adds	r7, #16
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	08017fb8 	.word	0x08017fb8
 800c448:	08018040 	.word	0x08018040
 800c44c:	08017ffc 	.word	0x08017ffc

0800c450 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d106      	bne.n	800c46c <tcp_listen_closed+0x1c>
 800c45e:	4b14      	ldr	r3, [pc, #80]	; (800c4b0 <tcp_listen_closed+0x60>)
 800c460:	f240 1211 	movw	r2, #273	; 0x111
 800c464:	4913      	ldr	r1, [pc, #76]	; (800c4b4 <tcp_listen_closed+0x64>)
 800c466:	4814      	ldr	r0, [pc, #80]	; (800c4b8 <tcp_listen_closed+0x68>)
 800c468:	f00a f950 	bl	801670c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	7d1b      	ldrb	r3, [r3, #20]
 800c470:	2b01      	cmp	r3, #1
 800c472:	d006      	beq.n	800c482 <tcp_listen_closed+0x32>
 800c474:	4b0e      	ldr	r3, [pc, #56]	; (800c4b0 <tcp_listen_closed+0x60>)
 800c476:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c47a:	4910      	ldr	r1, [pc, #64]	; (800c4bc <tcp_listen_closed+0x6c>)
 800c47c:	480e      	ldr	r0, [pc, #56]	; (800c4b8 <tcp_listen_closed+0x68>)
 800c47e:	f00a f945 	bl	801670c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c482:	2301      	movs	r3, #1
 800c484:	60fb      	str	r3, [r7, #12]
 800c486:	e00b      	b.n	800c4a0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c488:	4a0d      	ldr	r2, [pc, #52]	; (800c4c0 <tcp_listen_closed+0x70>)
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	6879      	ldr	r1, [r7, #4]
 800c494:	4618      	mov	r0, r3
 800c496:	f7ff ffb1 	bl	800c3fc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	3301      	adds	r3, #1
 800c49e:	60fb      	str	r3, [r7, #12]
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2b03      	cmp	r3, #3
 800c4a4:	d9f0      	bls.n	800c488 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c4a6:	bf00      	nop
 800c4a8:	3710      	adds	r7, #16
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	08017fb8 	.word	0x08017fb8
 800c4b4:	08018068 	.word	0x08018068
 800c4b8:	08017ffc 	.word	0x08017ffc
 800c4bc:	08018074 	.word	0x08018074
 800c4c0:	08028cd4 	.word	0x08028cd4

0800c4c4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c4c4:	b5b0      	push	{r4, r5, r7, lr}
 800c4c6:	b088      	sub	sp, #32
 800c4c8:	af04      	add	r7, sp, #16
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d106      	bne.n	800c4e4 <tcp_close_shutdown+0x20>
 800c4d6:	4b61      	ldr	r3, [pc, #388]	; (800c65c <tcp_close_shutdown+0x198>)
 800c4d8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c4dc:	4960      	ldr	r1, [pc, #384]	; (800c660 <tcp_close_shutdown+0x19c>)
 800c4de:	4861      	ldr	r0, [pc, #388]	; (800c664 <tcp_close_shutdown+0x1a0>)
 800c4e0:	f00a f914 	bl	801670c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c4e4:	78fb      	ldrb	r3, [r7, #3]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d066      	beq.n	800c5b8 <tcp_close_shutdown+0xf4>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	7d1b      	ldrb	r3, [r3, #20]
 800c4ee:	2b04      	cmp	r3, #4
 800c4f0:	d003      	beq.n	800c4fa <tcp_close_shutdown+0x36>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	7d1b      	ldrb	r3, [r3, #20]
 800c4f6:	2b07      	cmp	r3, #7
 800c4f8:	d15e      	bne.n	800c5b8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d104      	bne.n	800c50c <tcp_close_shutdown+0x48>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c506:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c50a:	d055      	beq.n	800c5b8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	8b5b      	ldrh	r3, [r3, #26]
 800c510:	f003 0310 	and.w	r3, r3, #16
 800c514:	2b00      	cmp	r3, #0
 800c516:	d106      	bne.n	800c526 <tcp_close_shutdown+0x62>
 800c518:	4b50      	ldr	r3, [pc, #320]	; (800c65c <tcp_close_shutdown+0x198>)
 800c51a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c51e:	4952      	ldr	r1, [pc, #328]	; (800c668 <tcp_close_shutdown+0x1a4>)
 800c520:	4850      	ldr	r0, [pc, #320]	; (800c664 <tcp_close_shutdown+0x1a0>)
 800c522:	f00a f8f3 	bl	801670c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c52e:	687d      	ldr	r5, [r7, #4]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	3304      	adds	r3, #4
 800c534:	687a      	ldr	r2, [r7, #4]
 800c536:	8ad2      	ldrh	r2, [r2, #22]
 800c538:	6879      	ldr	r1, [r7, #4]
 800c53a:	8b09      	ldrh	r1, [r1, #24]
 800c53c:	9102      	str	r1, [sp, #8]
 800c53e:	9201      	str	r2, [sp, #4]
 800c540:	9300      	str	r3, [sp, #0]
 800c542:	462b      	mov	r3, r5
 800c544:	4622      	mov	r2, r4
 800c546:	4601      	mov	r1, r0
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f004 fe8f 	bl	801126c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f001 f8ba 	bl	800d6c8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c554:	4b45      	ldr	r3, [pc, #276]	; (800c66c <tcp_close_shutdown+0x1a8>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	687a      	ldr	r2, [r7, #4]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d105      	bne.n	800c56a <tcp_close_shutdown+0xa6>
 800c55e:	4b43      	ldr	r3, [pc, #268]	; (800c66c <tcp_close_shutdown+0x1a8>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	4a41      	ldr	r2, [pc, #260]	; (800c66c <tcp_close_shutdown+0x1a8>)
 800c566:	6013      	str	r3, [r2, #0]
 800c568:	e013      	b.n	800c592 <tcp_close_shutdown+0xce>
 800c56a:	4b40      	ldr	r3, [pc, #256]	; (800c66c <tcp_close_shutdown+0x1a8>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	60fb      	str	r3, [r7, #12]
 800c570:	e00c      	b.n	800c58c <tcp_close_shutdown+0xc8>
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	68db      	ldr	r3, [r3, #12]
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	429a      	cmp	r2, r3
 800c57a:	d104      	bne.n	800c586 <tcp_close_shutdown+0xc2>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	68da      	ldr	r2, [r3, #12]
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	60da      	str	r2, [r3, #12]
 800c584:	e005      	b.n	800c592 <tcp_close_shutdown+0xce>
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	68db      	ldr	r3, [r3, #12]
 800c58a:	60fb      	str	r3, [r7, #12]
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d1ef      	bne.n	800c572 <tcp_close_shutdown+0xae>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2200      	movs	r2, #0
 800c596:	60da      	str	r2, [r3, #12]
 800c598:	4b35      	ldr	r3, [pc, #212]	; (800c670 <tcp_close_shutdown+0x1ac>)
 800c59a:	2201      	movs	r2, #1
 800c59c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c59e:	4b35      	ldr	r3, [pc, #212]	; (800c674 <tcp_close_shutdown+0x1b0>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d102      	bne.n	800c5ae <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c5a8:	f003 fd4c 	bl	8010044 <tcp_trigger_input_pcb_close>
 800c5ac:	e002      	b.n	800c5b4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f7ff fed6 	bl	800c360 <tcp_free>
      }
      return ERR_OK;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	e04d      	b.n	800c654 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	7d1b      	ldrb	r3, [r3, #20]
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	d02d      	beq.n	800c61c <tcp_close_shutdown+0x158>
 800c5c0:	2b02      	cmp	r3, #2
 800c5c2:	d036      	beq.n	800c632 <tcp_close_shutdown+0x16e>
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d13f      	bne.n	800c648 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	8adb      	ldrh	r3, [r3, #22]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d021      	beq.n	800c614 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c5d0:	4b29      	ldr	r3, [pc, #164]	; (800c678 <tcp_close_shutdown+0x1b4>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	687a      	ldr	r2, [r7, #4]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d105      	bne.n	800c5e6 <tcp_close_shutdown+0x122>
 800c5da:	4b27      	ldr	r3, [pc, #156]	; (800c678 <tcp_close_shutdown+0x1b4>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	68db      	ldr	r3, [r3, #12]
 800c5e0:	4a25      	ldr	r2, [pc, #148]	; (800c678 <tcp_close_shutdown+0x1b4>)
 800c5e2:	6013      	str	r3, [r2, #0]
 800c5e4:	e013      	b.n	800c60e <tcp_close_shutdown+0x14a>
 800c5e6:	4b24      	ldr	r3, [pc, #144]	; (800c678 <tcp_close_shutdown+0x1b4>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	60bb      	str	r3, [r7, #8]
 800c5ec:	e00c      	b.n	800c608 <tcp_close_shutdown+0x144>
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	68db      	ldr	r3, [r3, #12]
 800c5f2:	687a      	ldr	r2, [r7, #4]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d104      	bne.n	800c602 <tcp_close_shutdown+0x13e>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	68da      	ldr	r2, [r3, #12]
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	60da      	str	r2, [r3, #12]
 800c600:	e005      	b.n	800c60e <tcp_close_shutdown+0x14a>
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	68db      	ldr	r3, [r3, #12]
 800c606:	60bb      	str	r3, [r7, #8]
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d1ef      	bne.n	800c5ee <tcp_close_shutdown+0x12a>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2200      	movs	r2, #0
 800c612:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f7ff fea3 	bl	800c360 <tcp_free>
      break;
 800c61a:	e01a      	b.n	800c652 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c61c:	6878      	ldr	r0, [r7, #4]
 800c61e:	f7ff ff17 	bl	800c450 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c622:	6879      	ldr	r1, [r7, #4]
 800c624:	4815      	ldr	r0, [pc, #84]	; (800c67c <tcp_close_shutdown+0x1b8>)
 800c626:	f001 f89f 	bl	800d768 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f7ff feb4 	bl	800c398 <tcp_free_listen>
      break;
 800c630:	e00f      	b.n	800c652 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c632:	6879      	ldr	r1, [r7, #4]
 800c634:	480d      	ldr	r0, [pc, #52]	; (800c66c <tcp_close_shutdown+0x1a8>)
 800c636:	f001 f897 	bl	800d768 <tcp_pcb_remove>
 800c63a:	4b0d      	ldr	r3, [pc, #52]	; (800c670 <tcp_close_shutdown+0x1ac>)
 800c63c:	2201      	movs	r2, #1
 800c63e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f7ff fe8d 	bl	800c360 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c646:	e004      	b.n	800c652 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f000 f819 	bl	800c680 <tcp_close_shutdown_fin>
 800c64e:	4603      	mov	r3, r0
 800c650:	e000      	b.n	800c654 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800c652:	2300      	movs	r3, #0
}
 800c654:	4618      	mov	r0, r3
 800c656:	3710      	adds	r7, #16
 800c658:	46bd      	mov	sp, r7
 800c65a:	bdb0      	pop	{r4, r5, r7, pc}
 800c65c:	08017fb8 	.word	0x08017fb8
 800c660:	0801808c 	.word	0x0801808c
 800c664:	08017ffc 	.word	0x08017ffc
 800c668:	080180ac 	.word	0x080180ac
 800c66c:	20007afc 	.word	0x20007afc
 800c670:	20007af8 	.word	0x20007af8
 800c674:	20007b10 	.word	0x20007b10
 800c678:	20007b08 	.word	0x20007b08
 800c67c:	20007b04 	.word	0x20007b04

0800c680 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d106      	bne.n	800c69c <tcp_close_shutdown_fin+0x1c>
 800c68e:	4b2c      	ldr	r3, [pc, #176]	; (800c740 <tcp_close_shutdown_fin+0xc0>)
 800c690:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c694:	492b      	ldr	r1, [pc, #172]	; (800c744 <tcp_close_shutdown_fin+0xc4>)
 800c696:	482c      	ldr	r0, [pc, #176]	; (800c748 <tcp_close_shutdown_fin+0xc8>)
 800c698:	f00a f838 	bl	801670c <iprintf>

  switch (pcb->state) {
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	7d1b      	ldrb	r3, [r3, #20]
 800c6a0:	2b04      	cmp	r3, #4
 800c6a2:	d010      	beq.n	800c6c6 <tcp_close_shutdown_fin+0x46>
 800c6a4:	2b07      	cmp	r3, #7
 800c6a6:	d01b      	beq.n	800c6e0 <tcp_close_shutdown_fin+0x60>
 800c6a8:	2b03      	cmp	r3, #3
 800c6aa:	d126      	bne.n	800c6fa <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f003 fedb 	bl	8010468 <tcp_send_fin>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c6b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d11f      	bne.n	800c6fe <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2205      	movs	r2, #5
 800c6c2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c6c4:	e01b      	b.n	800c6fe <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f003 fece 	bl	8010468 <tcp_send_fin>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c6d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d114      	bne.n	800c702 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2205      	movs	r2, #5
 800c6dc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c6de:	e010      	b.n	800c702 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f003 fec1 	bl	8010468 <tcp_send_fin>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c6ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d109      	bne.n	800c706 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2209      	movs	r2, #9
 800c6f6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c6f8:	e005      	b.n	800c706 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	e01c      	b.n	800c738 <tcp_close_shutdown_fin+0xb8>
      break;
 800c6fe:	bf00      	nop
 800c700:	e002      	b.n	800c708 <tcp_close_shutdown_fin+0x88>
      break;
 800c702:	bf00      	nop
 800c704:	e000      	b.n	800c708 <tcp_close_shutdown_fin+0x88>
      break;
 800c706:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d103      	bne.n	800c718 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f003 ffe7 	bl	80106e4 <tcp_output>
 800c716:	e00d      	b.n	800c734 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800c718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c71c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c720:	d108      	bne.n	800c734 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	8b5b      	ldrh	r3, [r3, #26]
 800c726:	f043 0308 	orr.w	r3, r3, #8
 800c72a:	b29a      	uxth	r2, r3
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c730:	2300      	movs	r3, #0
 800c732:	e001      	b.n	800c738 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800c734:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c738:	4618      	mov	r0, r3
 800c73a:	3710      	adds	r7, #16
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}
 800c740:	08017fb8 	.word	0x08017fb8
 800c744:	08018068 	.word	0x08018068
 800c748:	08017ffc 	.word	0x08017ffc

0800c74c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b082      	sub	sp, #8
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d109      	bne.n	800c76e <tcp_close+0x22>
 800c75a:	4b0f      	ldr	r3, [pc, #60]	; (800c798 <tcp_close+0x4c>)
 800c75c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c760:	490e      	ldr	r1, [pc, #56]	; (800c79c <tcp_close+0x50>)
 800c762:	480f      	ldr	r0, [pc, #60]	; (800c7a0 <tcp_close+0x54>)
 800c764:	f009 ffd2 	bl	801670c <iprintf>
 800c768:	f06f 030f 	mvn.w	r3, #15
 800c76c:	e00f      	b.n	800c78e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	7d1b      	ldrb	r3, [r3, #20]
 800c772:	2b01      	cmp	r3, #1
 800c774:	d006      	beq.n	800c784 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	8b5b      	ldrh	r3, [r3, #26]
 800c77a:	f043 0310 	orr.w	r3, r3, #16
 800c77e:	b29a      	uxth	r2, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c784:	2101      	movs	r1, #1
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f7ff fe9c 	bl	800c4c4 <tcp_close_shutdown>
 800c78c:	4603      	mov	r3, r0
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3708      	adds	r7, #8
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	08017fb8 	.word	0x08017fb8
 800c79c:	080180c8 	.word	0x080180c8
 800c7a0:	08017ffc 	.word	0x08017ffc

0800c7a4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b08e      	sub	sp, #56	; 0x38
 800c7a8:	af04      	add	r7, sp, #16
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d107      	bne.n	800c7c4 <tcp_abandon+0x20>
 800c7b4:	4b52      	ldr	r3, [pc, #328]	; (800c900 <tcp_abandon+0x15c>)
 800c7b6:	f240 223d 	movw	r2, #573	; 0x23d
 800c7ba:	4952      	ldr	r1, [pc, #328]	; (800c904 <tcp_abandon+0x160>)
 800c7bc:	4852      	ldr	r0, [pc, #328]	; (800c908 <tcp_abandon+0x164>)
 800c7be:	f009 ffa5 	bl	801670c <iprintf>
 800c7c2:	e099      	b.n	800c8f8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	7d1b      	ldrb	r3, [r3, #20]
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d106      	bne.n	800c7da <tcp_abandon+0x36>
 800c7cc:	4b4c      	ldr	r3, [pc, #304]	; (800c900 <tcp_abandon+0x15c>)
 800c7ce:	f240 2241 	movw	r2, #577	; 0x241
 800c7d2:	494e      	ldr	r1, [pc, #312]	; (800c90c <tcp_abandon+0x168>)
 800c7d4:	484c      	ldr	r0, [pc, #304]	; (800c908 <tcp_abandon+0x164>)
 800c7d6:	f009 ff99 	bl	801670c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	7d1b      	ldrb	r3, [r3, #20]
 800c7de:	2b0a      	cmp	r3, #10
 800c7e0:	d107      	bne.n	800c7f2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c7e2:	6879      	ldr	r1, [r7, #4]
 800c7e4:	484a      	ldr	r0, [pc, #296]	; (800c910 <tcp_abandon+0x16c>)
 800c7e6:	f000 ffbf 	bl	800d768 <tcp_pcb_remove>
    tcp_free(pcb);
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f7ff fdb8 	bl	800c360 <tcp_free>
 800c7f0:	e082      	b.n	800c8f8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7fe:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c804:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c80c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	691b      	ldr	r3, [r3, #16]
 800c812:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	7d1b      	ldrb	r3, [r3, #20]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d126      	bne.n	800c86a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	8adb      	ldrh	r3, [r3, #22]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d02e      	beq.n	800c882 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c824:	4b3b      	ldr	r3, [pc, #236]	; (800c914 <tcp_abandon+0x170>)
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d105      	bne.n	800c83a <tcp_abandon+0x96>
 800c82e:	4b39      	ldr	r3, [pc, #228]	; (800c914 <tcp_abandon+0x170>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	68db      	ldr	r3, [r3, #12]
 800c834:	4a37      	ldr	r2, [pc, #220]	; (800c914 <tcp_abandon+0x170>)
 800c836:	6013      	str	r3, [r2, #0]
 800c838:	e013      	b.n	800c862 <tcp_abandon+0xbe>
 800c83a:	4b36      	ldr	r3, [pc, #216]	; (800c914 <tcp_abandon+0x170>)
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	61fb      	str	r3, [r7, #28]
 800c840:	e00c      	b.n	800c85c <tcp_abandon+0xb8>
 800c842:	69fb      	ldr	r3, [r7, #28]
 800c844:	68db      	ldr	r3, [r3, #12]
 800c846:	687a      	ldr	r2, [r7, #4]
 800c848:	429a      	cmp	r2, r3
 800c84a:	d104      	bne.n	800c856 <tcp_abandon+0xb2>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	68da      	ldr	r2, [r3, #12]
 800c850:	69fb      	ldr	r3, [r7, #28]
 800c852:	60da      	str	r2, [r3, #12]
 800c854:	e005      	b.n	800c862 <tcp_abandon+0xbe>
 800c856:	69fb      	ldr	r3, [r7, #28]
 800c858:	68db      	ldr	r3, [r3, #12]
 800c85a:	61fb      	str	r3, [r7, #28]
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d1ef      	bne.n	800c842 <tcp_abandon+0x9e>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2200      	movs	r2, #0
 800c866:	60da      	str	r2, [r3, #12]
 800c868:	e00b      	b.n	800c882 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	8adb      	ldrh	r3, [r3, #22]
 800c872:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c874:	6879      	ldr	r1, [r7, #4]
 800c876:	4828      	ldr	r0, [pc, #160]	; (800c918 <tcp_abandon+0x174>)
 800c878:	f000 ff76 	bl	800d768 <tcp_pcb_remove>
 800c87c:	4b27      	ldr	r3, [pc, #156]	; (800c91c <tcp_abandon+0x178>)
 800c87e:	2201      	movs	r2, #1
 800c880:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c886:	2b00      	cmp	r3, #0
 800c888:	d004      	beq.n	800c894 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c88e:	4618      	mov	r0, r3
 800c890:	f000 fd1a 	bl	800d2c8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d004      	beq.n	800c8a6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f000 fd11 	bl	800d2c8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d004      	beq.n	800c8b8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f000 fd08 	bl	800d2c8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d00e      	beq.n	800c8dc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c8be:	6879      	ldr	r1, [r7, #4]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	3304      	adds	r3, #4
 800c8c4:	687a      	ldr	r2, [r7, #4]
 800c8c6:	8b12      	ldrh	r2, [r2, #24]
 800c8c8:	9202      	str	r2, [sp, #8]
 800c8ca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c8cc:	9201      	str	r2, [sp, #4]
 800c8ce:	9300      	str	r3, [sp, #0]
 800c8d0:	460b      	mov	r3, r1
 800c8d2:	697a      	ldr	r2, [r7, #20]
 800c8d4:	69b9      	ldr	r1, [r7, #24]
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f004 fcc8 	bl	801126c <tcp_rst>
    }
    last_state = pcb->state;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	7d1b      	ldrb	r3, [r3, #20]
 800c8e0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f7ff fd3c 	bl	800c360 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d004      	beq.n	800c8f8 <tcp_abandon+0x154>
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	f06f 010c 	mvn.w	r1, #12
 800c8f4:	68f8      	ldr	r0, [r7, #12]
 800c8f6:	4798      	blx	r3
  }
}
 800c8f8:	3728      	adds	r7, #40	; 0x28
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop
 800c900:	08017fb8 	.word	0x08017fb8
 800c904:	080180fc 	.word	0x080180fc
 800c908:	08017ffc 	.word	0x08017ffc
 800c90c:	08018118 	.word	0x08018118
 800c910:	20007b0c 	.word	0x20007b0c
 800c914:	20007b08 	.word	0x20007b08
 800c918:	20007afc 	.word	0x20007afc
 800c91c:	20007af8 	.word	0x20007af8

0800c920 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c928:	2101      	movs	r1, #1
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f7ff ff3a 	bl	800c7a4 <tcp_abandon>
}
 800c930:	bf00      	nop
 800c932:	3708      	adds	r7, #8
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}

0800c938 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d106      	bne.n	800c954 <tcp_update_rcv_ann_wnd+0x1c>
 800c946:	4b25      	ldr	r3, [pc, #148]	; (800c9dc <tcp_update_rcv_ann_wnd+0xa4>)
 800c948:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c94c:	4924      	ldr	r1, [pc, #144]	; (800c9e0 <tcp_update_rcv_ann_wnd+0xa8>)
 800c94e:	4825      	ldr	r0, [pc, #148]	; (800c9e4 <tcp_update_rcv_ann_wnd+0xac>)
 800c950:	f009 fedc 	bl	801670c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c958:	687a      	ldr	r2, [r7, #4]
 800c95a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c95c:	4413      	add	r3, r2
 800c95e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c964:	687a      	ldr	r2, [r7, #4]
 800c966:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c968:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c96c:	bf28      	it	cs
 800c96e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c972:	b292      	uxth	r2, r2
 800c974:	4413      	add	r3, r2
 800c976:	68fa      	ldr	r2, [r7, #12]
 800c978:	1ad3      	subs	r3, r2, r3
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	db08      	blt.n	800c990 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c98a:	68fa      	ldr	r2, [r7, #12]
 800c98c:	1ad3      	subs	r3, r2, r3
 800c98e:	e020      	b.n	800c9d2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c998:	1ad3      	subs	r3, r2, r3
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	dd03      	ble.n	800c9a6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c9a4:	e014      	b.n	800c9d0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ae:	1ad3      	subs	r3, r2, r3
 800c9b0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9b8:	d306      	bcc.n	800c9c8 <tcp_update_rcv_ann_wnd+0x90>
 800c9ba:	4b08      	ldr	r3, [pc, #32]	; (800c9dc <tcp_update_rcv_ann_wnd+0xa4>)
 800c9bc:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c9c0:	4909      	ldr	r1, [pc, #36]	; (800c9e8 <tcp_update_rcv_ann_wnd+0xb0>)
 800c9c2:	4808      	ldr	r0, [pc, #32]	; (800c9e4 <tcp_update_rcv_ann_wnd+0xac>)
 800c9c4:	f009 fea2 	bl	801670c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c9c8:	68bb      	ldr	r3, [r7, #8]
 800c9ca:	b29a      	uxth	r2, r3
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c9d0:	2300      	movs	r3, #0
  }
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3710      	adds	r7, #16
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	08017fb8 	.word	0x08017fb8
 800c9e0:	08018214 	.word	0x08018214
 800c9e4:	08017ffc 	.word	0x08017ffc
 800c9e8:	08018238 	.word	0x08018238

0800c9ec <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b084      	sub	sp, #16
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d107      	bne.n	800ca0e <tcp_recved+0x22>
 800c9fe:	4b1f      	ldr	r3, [pc, #124]	; (800ca7c <tcp_recved+0x90>)
 800ca00:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ca04:	491e      	ldr	r1, [pc, #120]	; (800ca80 <tcp_recved+0x94>)
 800ca06:	481f      	ldr	r0, [pc, #124]	; (800ca84 <tcp_recved+0x98>)
 800ca08:	f009 fe80 	bl	801670c <iprintf>
 800ca0c:	e032      	b.n	800ca74 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	7d1b      	ldrb	r3, [r3, #20]
 800ca12:	2b01      	cmp	r3, #1
 800ca14:	d106      	bne.n	800ca24 <tcp_recved+0x38>
 800ca16:	4b19      	ldr	r3, [pc, #100]	; (800ca7c <tcp_recved+0x90>)
 800ca18:	f240 32d3 	movw	r2, #979	; 0x3d3
 800ca1c:	491a      	ldr	r1, [pc, #104]	; (800ca88 <tcp_recved+0x9c>)
 800ca1e:	4819      	ldr	r0, [pc, #100]	; (800ca84 <tcp_recved+0x98>)
 800ca20:	f009 fe74 	bl	801670c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ca28:	887b      	ldrh	r3, [r7, #2]
 800ca2a:	4413      	add	r3, r2
 800ca2c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ca2e:	89fb      	ldrh	r3, [r7, #14]
 800ca30:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ca34:	d804      	bhi.n	800ca40 <tcp_recved+0x54>
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca3a:	89fa      	ldrh	r2, [r7, #14]
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d204      	bcs.n	800ca4a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ca46:	851a      	strh	r2, [r3, #40]	; 0x28
 800ca48:	e002      	b.n	800ca50 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	89fa      	ldrh	r2, [r7, #14]
 800ca4e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f7ff ff71 	bl	800c938 <tcp_update_rcv_ann_wnd>
 800ca56:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ca5e:	d309      	bcc.n	800ca74 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	8b5b      	ldrh	r3, [r3, #26]
 800ca64:	f043 0302 	orr.w	r3, r3, #2
 800ca68:	b29a      	uxth	r2, r3
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f003 fe38 	bl	80106e4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ca74:	3710      	adds	r7, #16
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
 800ca7a:	bf00      	nop
 800ca7c:	08017fb8 	.word	0x08017fb8
 800ca80:	08018254 	.word	0x08018254
 800ca84:	08017ffc 	.word	0x08017ffc
 800ca88:	0801826c 	.word	0x0801826c

0800ca8c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ca8c:	b5b0      	push	{r4, r5, r7, lr}
 800ca8e:	b090      	sub	sp, #64	; 0x40
 800ca90:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ca92:	2300      	movs	r3, #0
 800ca94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ca98:	4b94      	ldr	r3, [pc, #592]	; (800ccec <tcp_slowtmr+0x260>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	4a93      	ldr	r2, [pc, #588]	; (800ccec <tcp_slowtmr+0x260>)
 800caa0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800caa2:	4b93      	ldr	r3, [pc, #588]	; (800ccf0 <tcp_slowtmr+0x264>)
 800caa4:	781b      	ldrb	r3, [r3, #0]
 800caa6:	3301      	adds	r3, #1
 800caa8:	b2da      	uxtb	r2, r3
 800caaa:	4b91      	ldr	r3, [pc, #580]	; (800ccf0 <tcp_slowtmr+0x264>)
 800caac:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800caae:	2300      	movs	r3, #0
 800cab0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800cab2:	4b90      	ldr	r3, [pc, #576]	; (800ccf4 <tcp_slowtmr+0x268>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800cab8:	e29f      	b.n	800cffa <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800caba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cabc:	7d1b      	ldrb	r3, [r3, #20]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d106      	bne.n	800cad0 <tcp_slowtmr+0x44>
 800cac2:	4b8d      	ldr	r3, [pc, #564]	; (800ccf8 <tcp_slowtmr+0x26c>)
 800cac4:	f240 42be 	movw	r2, #1214	; 0x4be
 800cac8:	498c      	ldr	r1, [pc, #560]	; (800ccfc <tcp_slowtmr+0x270>)
 800caca:	488d      	ldr	r0, [pc, #564]	; (800cd00 <tcp_slowtmr+0x274>)
 800cacc:	f009 fe1e 	bl	801670c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800cad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad2:	7d1b      	ldrb	r3, [r3, #20]
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d106      	bne.n	800cae6 <tcp_slowtmr+0x5a>
 800cad8:	4b87      	ldr	r3, [pc, #540]	; (800ccf8 <tcp_slowtmr+0x26c>)
 800cada:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800cade:	4989      	ldr	r1, [pc, #548]	; (800cd04 <tcp_slowtmr+0x278>)
 800cae0:	4887      	ldr	r0, [pc, #540]	; (800cd00 <tcp_slowtmr+0x274>)
 800cae2:	f009 fe13 	bl	801670c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800cae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae8:	7d1b      	ldrb	r3, [r3, #20]
 800caea:	2b0a      	cmp	r3, #10
 800caec:	d106      	bne.n	800cafc <tcp_slowtmr+0x70>
 800caee:	4b82      	ldr	r3, [pc, #520]	; (800ccf8 <tcp_slowtmr+0x26c>)
 800caf0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800caf4:	4984      	ldr	r1, [pc, #528]	; (800cd08 <tcp_slowtmr+0x27c>)
 800caf6:	4882      	ldr	r0, [pc, #520]	; (800cd00 <tcp_slowtmr+0x274>)
 800caf8:	f009 fe08 	bl	801670c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800cafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cafe:	7f9a      	ldrb	r2, [r3, #30]
 800cb00:	4b7b      	ldr	r3, [pc, #492]	; (800ccf0 <tcp_slowtmr+0x264>)
 800cb02:	781b      	ldrb	r3, [r3, #0]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d105      	bne.n	800cb14 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800cb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0e:	68db      	ldr	r3, [r3, #12]
 800cb10:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800cb12:	e272      	b.n	800cffa <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800cb14:	4b76      	ldr	r3, [pc, #472]	; (800ccf0 <tcp_slowtmr+0x264>)
 800cb16:	781a      	ldrb	r2, [r3, #0]
 800cb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb1a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800cb22:	2300      	movs	r3, #0
 800cb24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800cb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2a:	7d1b      	ldrb	r3, [r3, #20]
 800cb2c:	2b02      	cmp	r3, #2
 800cb2e:	d10a      	bne.n	800cb46 <tcp_slowtmr+0xba>
 800cb30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb36:	2b05      	cmp	r3, #5
 800cb38:	d905      	bls.n	800cb46 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800cb3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb3e:	3301      	adds	r3, #1
 800cb40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb44:	e11e      	b.n	800cd84 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800cb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cb4c:	2b0b      	cmp	r3, #11
 800cb4e:	d905      	bls.n	800cb5c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800cb50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb54:	3301      	adds	r3, #1
 800cb56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cb5a:	e113      	b.n	800cd84 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800cb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb5e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d075      	beq.n	800cc52 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800cb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d006      	beq.n	800cb7c <tcp_slowtmr+0xf0>
 800cb6e:	4b62      	ldr	r3, [pc, #392]	; (800ccf8 <tcp_slowtmr+0x26c>)
 800cb70:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800cb74:	4965      	ldr	r1, [pc, #404]	; (800cd0c <tcp_slowtmr+0x280>)
 800cb76:	4862      	ldr	r0, [pc, #392]	; (800cd00 <tcp_slowtmr+0x274>)
 800cb78:	f009 fdc8 	bl	801670c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800cb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d106      	bne.n	800cb92 <tcp_slowtmr+0x106>
 800cb84:	4b5c      	ldr	r3, [pc, #368]	; (800ccf8 <tcp_slowtmr+0x26c>)
 800cb86:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800cb8a:	4961      	ldr	r1, [pc, #388]	; (800cd10 <tcp_slowtmr+0x284>)
 800cb8c:	485c      	ldr	r0, [pc, #368]	; (800cd00 <tcp_slowtmr+0x274>)
 800cb8e:	f009 fdbd 	bl	801670c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800cb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb94:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cb98:	2b0b      	cmp	r3, #11
 800cb9a:	d905      	bls.n	800cba8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800cb9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cba0:	3301      	adds	r3, #1
 800cba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cba6:	e0ed      	b.n	800cd84 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800cba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbaa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cbae:	3b01      	subs	r3, #1
 800cbb0:	4a58      	ldr	r2, [pc, #352]	; (800cd14 <tcp_slowtmr+0x288>)
 800cbb2:	5cd3      	ldrb	r3, [r2, r3]
 800cbb4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800cbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cbbc:	7c7a      	ldrb	r2, [r7, #17]
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d907      	bls.n	800cbd2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800cbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cbc8:	3301      	adds	r3, #1
 800cbca:	b2da      	uxtb	r2, r3
 800cbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800cbd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cbd8:	7c7a      	ldrb	r2, [r7, #17]
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	f200 80d2 	bhi.w	800cd84 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800cbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d108      	bne.n	800cc00 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800cbee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbf0:	f004 fc30 	bl	8011454 <tcp_zero_window_probe>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d014      	beq.n	800cc24 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	623b      	str	r3, [r7, #32]
 800cbfe:	e011      	b.n	800cc24 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800cc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cc06:	4619      	mov	r1, r3
 800cc08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc0a:	f003 fae5 	bl	80101d8 <tcp_split_unsent_seg>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d107      	bne.n	800cc24 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800cc14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc16:	f003 fd65 	bl	80106e4 <tcp_output>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d101      	bne.n	800cc24 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800cc20:	2300      	movs	r3, #0
 800cc22:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800cc24:	6a3b      	ldr	r3, [r7, #32]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	f000 80ac 	beq.w	800cd84 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800cc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc2e:	2200      	movs	r2, #0
 800cc30:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800cc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc36:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cc3a:	2b06      	cmp	r3, #6
 800cc3c:	f200 80a2 	bhi.w	800cd84 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800cc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc42:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cc46:	3301      	adds	r3, #1
 800cc48:	b2da      	uxtb	r2, r3
 800cc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc4c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800cc50:	e098      	b.n	800cd84 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800cc52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc54:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	db0f      	blt.n	800cc7c <tcp_slowtmr+0x1f0>
 800cc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cc62:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d008      	beq.n	800cc7c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800cc6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cc70:	b29b      	uxth	r3, r3
 800cc72:	3301      	adds	r3, #1
 800cc74:	b29b      	uxth	r3, r3
 800cc76:	b21a      	sxth	r2, r3
 800cc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc7a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800cc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc7e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800cc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc84:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	db7b      	blt.n	800cd84 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800cc8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc8e:	f004 f821 	bl	8010cd4 <tcp_rexmit_rto_prepare>
 800cc92:	4603      	mov	r3, r0
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d007      	beq.n	800cca8 <tcp_slowtmr+0x21c>
 800cc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d171      	bne.n	800cd84 <tcp_slowtmr+0x2f8>
 800cca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d06d      	beq.n	800cd84 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800cca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccaa:	7d1b      	ldrb	r3, [r3, #20]
 800ccac:	2b02      	cmp	r3, #2
 800ccae:	d03a      	beq.n	800cd26 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ccb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ccb6:	2b0c      	cmp	r3, #12
 800ccb8:	bf28      	it	cs
 800ccba:	230c      	movcs	r3, #12
 800ccbc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ccbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ccc4:	10db      	asrs	r3, r3, #3
 800ccc6:	b21b      	sxth	r3, r3
 800ccc8:	461a      	mov	r2, r3
 800ccca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cccc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ccd0:	4413      	add	r3, r2
 800ccd2:	7efa      	ldrb	r2, [r7, #27]
 800ccd4:	4910      	ldr	r1, [pc, #64]	; (800cd18 <tcp_slowtmr+0x28c>)
 800ccd6:	5c8a      	ldrb	r2, [r1, r2]
 800ccd8:	4093      	lsls	r3, r2
 800ccda:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800cce2:	4293      	cmp	r3, r2
 800cce4:	dc1a      	bgt.n	800cd1c <tcp_slowtmr+0x290>
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	b21a      	sxth	r2, r3
 800ccea:	e019      	b.n	800cd20 <tcp_slowtmr+0x294>
 800ccec:	20007b00 	.word	0x20007b00
 800ccf0:	2000045a 	.word	0x2000045a
 800ccf4:	20007afc 	.word	0x20007afc
 800ccf8:	08017fb8 	.word	0x08017fb8
 800ccfc:	080182fc 	.word	0x080182fc
 800cd00:	08017ffc 	.word	0x08017ffc
 800cd04:	08018328 	.word	0x08018328
 800cd08:	08018354 	.word	0x08018354
 800cd0c:	08018384 	.word	0x08018384
 800cd10:	080183b8 	.word	0x080183b8
 800cd14:	08028ccc 	.word	0x08028ccc
 800cd18:	08028cbc 	.word	0x08028cbc
 800cd1c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800cd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd28:	2200      	movs	r2, #0
 800cd2a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800cd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cd32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd34:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	bf28      	it	cs
 800cd3c:	4613      	movcs	r3, r2
 800cd3e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800cd40:	8a7b      	ldrh	r3, [r7, #18]
 800cd42:	085b      	lsrs	r3, r3, #1
 800cd44:	b29a      	uxth	r2, r3
 800cd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd48:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800cd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd56:	005b      	lsls	r3, r3, #1
 800cd58:	b29b      	uxth	r3, r3
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d206      	bcs.n	800cd6c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800cd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd62:	005b      	lsls	r3, r3, #1
 800cd64:	b29a      	uxth	r2, r3
 800cd66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd68:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800cd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd6e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800cd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd72:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800cd76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd78:	2200      	movs	r2, #0
 800cd7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800cd7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd80:	f004 f818 	bl	8010db4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800cd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd86:	7d1b      	ldrb	r3, [r3, #20]
 800cd88:	2b06      	cmp	r3, #6
 800cd8a:	d111      	bne.n	800cdb0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800cd8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd8e:	8b5b      	ldrh	r3, [r3, #26]
 800cd90:	f003 0310 	and.w	r3, r3, #16
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d00b      	beq.n	800cdb0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cd98:	4b9d      	ldr	r3, [pc, #628]	; (800d010 <tcp_slowtmr+0x584>)
 800cd9a:	681a      	ldr	r2, [r3, #0]
 800cd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd9e:	6a1b      	ldr	r3, [r3, #32]
 800cda0:	1ad3      	subs	r3, r2, r3
 800cda2:	2b28      	cmp	r3, #40	; 0x28
 800cda4:	d904      	bls.n	800cdb0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800cda6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdaa:	3301      	adds	r3, #1
 800cdac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cdb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb2:	7a5b      	ldrb	r3, [r3, #9]
 800cdb4:	f003 0308 	and.w	r3, r3, #8
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d04c      	beq.n	800ce56 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800cdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdbe:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cdc0:	2b04      	cmp	r3, #4
 800cdc2:	d003      	beq.n	800cdcc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800cdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800cdc8:	2b07      	cmp	r3, #7
 800cdca:	d144      	bne.n	800ce56 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cdcc:	4b90      	ldr	r3, [pc, #576]	; (800d010 <tcp_slowtmr+0x584>)
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd2:	6a1b      	ldr	r3, [r3, #32]
 800cdd4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800cdd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cddc:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800cde0:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800cde4:	498b      	ldr	r1, [pc, #556]	; (800d014 <tcp_slowtmr+0x588>)
 800cde6:	fba1 1303 	umull	r1, r3, r1, r3
 800cdea:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d90a      	bls.n	800ce06 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800cdf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800cdfa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cdfe:	3301      	adds	r3, #1
 800ce00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ce04:	e027      	b.n	800ce56 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ce06:	4b82      	ldr	r3, [pc, #520]	; (800d010 <tcp_slowtmr+0x584>)
 800ce08:	681a      	ldr	r2, [r3, #0]
 800ce0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0c:	6a1b      	ldr	r3, [r3, #32]
 800ce0e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ce10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce12:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ce16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce18:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	4b7e      	ldr	r3, [pc, #504]	; (800d018 <tcp_slowtmr+0x58c>)
 800ce20:	fb03 f300 	mul.w	r3, r3, r0
 800ce24:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ce26:	497b      	ldr	r1, [pc, #492]	; (800d014 <tcp_slowtmr+0x588>)
 800ce28:	fba1 1303 	umull	r1, r3, r1, r3
 800ce2c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	d911      	bls.n	800ce56 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800ce32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce34:	f004 face 	bl	80113d4 <tcp_keepalive>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800ce3e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d107      	bne.n	800ce56 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800ce46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce48:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ce4c:	3301      	adds	r3, #1
 800ce4e:	b2da      	uxtb	r2, r3
 800ce50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce52:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ce56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d011      	beq.n	800ce82 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ce5e:	4b6c      	ldr	r3, [pc, #432]	; (800d010 <tcp_slowtmr+0x584>)
 800ce60:	681a      	ldr	r2, [r3, #0]
 800ce62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce64:	6a1b      	ldr	r3, [r3, #32]
 800ce66:	1ad2      	subs	r2, r2, r3
 800ce68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ce6e:	4619      	mov	r1, r3
 800ce70:	460b      	mov	r3, r1
 800ce72:	005b      	lsls	r3, r3, #1
 800ce74:	440b      	add	r3, r1
 800ce76:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d302      	bcc.n	800ce82 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ce7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce7e:	f000 fdd7 	bl	800da30 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ce82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce84:	7d1b      	ldrb	r3, [r3, #20]
 800ce86:	2b03      	cmp	r3, #3
 800ce88:	d10b      	bne.n	800cea2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ce8a:	4b61      	ldr	r3, [pc, #388]	; (800d010 <tcp_slowtmr+0x584>)
 800ce8c:	681a      	ldr	r2, [r3, #0]
 800ce8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce90:	6a1b      	ldr	r3, [r3, #32]
 800ce92:	1ad3      	subs	r3, r2, r3
 800ce94:	2b28      	cmp	r3, #40	; 0x28
 800ce96:	d904      	bls.n	800cea2 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ce98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800cea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea4:	7d1b      	ldrb	r3, [r3, #20]
 800cea6:	2b09      	cmp	r3, #9
 800cea8:	d10b      	bne.n	800cec2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ceaa:	4b59      	ldr	r3, [pc, #356]	; (800d010 <tcp_slowtmr+0x584>)
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb0:	6a1b      	ldr	r3, [r3, #32]
 800ceb2:	1ad3      	subs	r3, r2, r3
 800ceb4:	2bf0      	cmp	r3, #240	; 0xf0
 800ceb6:	d904      	bls.n	800cec2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800ceb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cebc:	3301      	adds	r3, #1
 800cebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cec2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d060      	beq.n	800cf8c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ceca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ced0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ced2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ced4:	f000 fbf8 	bl	800d6c8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ced8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d010      	beq.n	800cf00 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cede:	4b4f      	ldr	r3, [pc, #316]	; (800d01c <tcp_slowtmr+0x590>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d106      	bne.n	800cef6 <tcp_slowtmr+0x46a>
 800cee8:	4b4d      	ldr	r3, [pc, #308]	; (800d020 <tcp_slowtmr+0x594>)
 800ceea:	f240 526d 	movw	r2, #1389	; 0x56d
 800ceee:	494d      	ldr	r1, [pc, #308]	; (800d024 <tcp_slowtmr+0x598>)
 800cef0:	484d      	ldr	r0, [pc, #308]	; (800d028 <tcp_slowtmr+0x59c>)
 800cef2:	f009 fc0b 	bl	801670c <iprintf>
        prev->next = pcb->next;
 800cef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef8:	68da      	ldr	r2, [r3, #12]
 800cefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cefc:	60da      	str	r2, [r3, #12]
 800cefe:	e00f      	b.n	800cf20 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cf00:	4b46      	ldr	r3, [pc, #280]	; (800d01c <tcp_slowtmr+0x590>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf06:	429a      	cmp	r2, r3
 800cf08:	d006      	beq.n	800cf18 <tcp_slowtmr+0x48c>
 800cf0a:	4b45      	ldr	r3, [pc, #276]	; (800d020 <tcp_slowtmr+0x594>)
 800cf0c:	f240 5271 	movw	r2, #1393	; 0x571
 800cf10:	4946      	ldr	r1, [pc, #280]	; (800d02c <tcp_slowtmr+0x5a0>)
 800cf12:	4845      	ldr	r0, [pc, #276]	; (800d028 <tcp_slowtmr+0x59c>)
 800cf14:	f009 fbfa 	bl	801670c <iprintf>
        tcp_active_pcbs = pcb->next;
 800cf18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	4a3f      	ldr	r2, [pc, #252]	; (800d01c <tcp_slowtmr+0x590>)
 800cf1e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800cf20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d013      	beq.n	800cf50 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cf28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cf2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cf30:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800cf32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf34:	3304      	adds	r3, #4
 800cf36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf38:	8ad2      	ldrh	r2, [r2, #22]
 800cf3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cf3c:	8b09      	ldrh	r1, [r1, #24]
 800cf3e:	9102      	str	r1, [sp, #8]
 800cf40:	9201      	str	r2, [sp, #4]
 800cf42:	9300      	str	r3, [sp, #0]
 800cf44:	462b      	mov	r3, r5
 800cf46:	4622      	mov	r2, r4
 800cf48:	4601      	mov	r1, r0
 800cf4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf4c:	f004 f98e 	bl	801126c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800cf50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf52:	691b      	ldr	r3, [r3, #16]
 800cf54:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cf56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf58:	7d1b      	ldrb	r3, [r3, #20]
 800cf5a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800cf5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf5e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800cf60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf62:	68db      	ldr	r3, [r3, #12]
 800cf64:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cf66:	6838      	ldr	r0, [r7, #0]
 800cf68:	f7ff f9fa 	bl	800c360 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800cf6c:	4b30      	ldr	r3, [pc, #192]	; (800d030 <tcp_slowtmr+0x5a4>)
 800cf6e:	2200      	movs	r2, #0
 800cf70:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d004      	beq.n	800cf82 <tcp_slowtmr+0x4f6>
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f06f 010c 	mvn.w	r1, #12
 800cf7e:	68b8      	ldr	r0, [r7, #8]
 800cf80:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800cf82:	4b2b      	ldr	r3, [pc, #172]	; (800d030 <tcp_slowtmr+0x5a4>)
 800cf84:	781b      	ldrb	r3, [r3, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d037      	beq.n	800cffa <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800cf8a:	e590      	b.n	800caae <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800cf8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cf90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf92:	68db      	ldr	r3, [r3, #12]
 800cf94:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800cf96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf98:	7f1b      	ldrb	r3, [r3, #28]
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	b2da      	uxtb	r2, r3
 800cf9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800cfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa4:	7f1a      	ldrb	r2, [r3, #28]
 800cfa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa8:	7f5b      	ldrb	r3, [r3, #29]
 800cfaa:	429a      	cmp	r2, r3
 800cfac:	d325      	bcc.n	800cffa <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800cfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800cfb4:	4b1e      	ldr	r3, [pc, #120]	; (800d030 <tcp_slowtmr+0x5a4>)
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800cfba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d00b      	beq.n	800cfdc <tcp_slowtmr+0x550>
 800cfc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfcc:	6912      	ldr	r2, [r2, #16]
 800cfce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cfd0:	4610      	mov	r0, r2
 800cfd2:	4798      	blx	r3
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800cfda:	e002      	b.n	800cfe2 <tcp_slowtmr+0x556>
 800cfdc:	2300      	movs	r3, #0
 800cfde:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800cfe2:	4b13      	ldr	r3, [pc, #76]	; (800d030 <tcp_slowtmr+0x5a4>)
 800cfe4:	781b      	ldrb	r3, [r3, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d000      	beq.n	800cfec <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800cfea:	e560      	b.n	800caae <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cfec:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d102      	bne.n	800cffa <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800cff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cff6:	f003 fb75 	bl	80106e4 <tcp_output>
  while (pcb != NULL) {
 800cffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	f47f ad5c 	bne.w	800caba <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d002:	2300      	movs	r3, #0
 800d004:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d006:	4b0b      	ldr	r3, [pc, #44]	; (800d034 <tcp_slowtmr+0x5a8>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d00c:	e067      	b.n	800d0de <tcp_slowtmr+0x652>
 800d00e:	bf00      	nop
 800d010:	20007b00 	.word	0x20007b00
 800d014:	10624dd3 	.word	0x10624dd3
 800d018:	000124f8 	.word	0x000124f8
 800d01c:	20007afc 	.word	0x20007afc
 800d020:	08017fb8 	.word	0x08017fb8
 800d024:	080183f0 	.word	0x080183f0
 800d028:	08017ffc 	.word	0x08017ffc
 800d02c:	0801841c 	.word	0x0801841c
 800d030:	20007af8 	.word	0x20007af8
 800d034:	20007b0c 	.word	0x20007b0c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d03a:	7d1b      	ldrb	r3, [r3, #20]
 800d03c:	2b0a      	cmp	r3, #10
 800d03e:	d006      	beq.n	800d04e <tcp_slowtmr+0x5c2>
 800d040:	4b2a      	ldr	r3, [pc, #168]	; (800d0ec <tcp_slowtmr+0x660>)
 800d042:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d046:	492a      	ldr	r1, [pc, #168]	; (800d0f0 <tcp_slowtmr+0x664>)
 800d048:	482a      	ldr	r0, [pc, #168]	; (800d0f4 <tcp_slowtmr+0x668>)
 800d04a:	f009 fb5f 	bl	801670c <iprintf>
    pcb_remove = 0;
 800d04e:	2300      	movs	r3, #0
 800d050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d054:	4b28      	ldr	r3, [pc, #160]	; (800d0f8 <tcp_slowtmr+0x66c>)
 800d056:	681a      	ldr	r2, [r3, #0]
 800d058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d05a:	6a1b      	ldr	r3, [r3, #32]
 800d05c:	1ad3      	subs	r3, r2, r3
 800d05e:	2bf0      	cmp	r3, #240	; 0xf0
 800d060:	d904      	bls.n	800d06c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d062:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d066:	3301      	adds	r3, #1
 800d068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d06c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d070:	2b00      	cmp	r3, #0
 800d072:	d02f      	beq.n	800d0d4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d074:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d076:	f000 fb27 	bl	800d6c8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d010      	beq.n	800d0a2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d080:	4b1e      	ldr	r3, [pc, #120]	; (800d0fc <tcp_slowtmr+0x670>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d086:	429a      	cmp	r2, r3
 800d088:	d106      	bne.n	800d098 <tcp_slowtmr+0x60c>
 800d08a:	4b18      	ldr	r3, [pc, #96]	; (800d0ec <tcp_slowtmr+0x660>)
 800d08c:	f240 52af 	movw	r2, #1455	; 0x5af
 800d090:	491b      	ldr	r1, [pc, #108]	; (800d100 <tcp_slowtmr+0x674>)
 800d092:	4818      	ldr	r0, [pc, #96]	; (800d0f4 <tcp_slowtmr+0x668>)
 800d094:	f009 fb3a 	bl	801670c <iprintf>
        prev->next = pcb->next;
 800d098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d09a:	68da      	ldr	r2, [r3, #12]
 800d09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d09e:	60da      	str	r2, [r3, #12]
 800d0a0:	e00f      	b.n	800d0c2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d0a2:	4b16      	ldr	r3, [pc, #88]	; (800d0fc <tcp_slowtmr+0x670>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d006      	beq.n	800d0ba <tcp_slowtmr+0x62e>
 800d0ac:	4b0f      	ldr	r3, [pc, #60]	; (800d0ec <tcp_slowtmr+0x660>)
 800d0ae:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d0b2:	4914      	ldr	r1, [pc, #80]	; (800d104 <tcp_slowtmr+0x678>)
 800d0b4:	480f      	ldr	r0, [pc, #60]	; (800d0f4 <tcp_slowtmr+0x668>)
 800d0b6:	f009 fb29 	bl	801670c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0bc:	68db      	ldr	r3, [r3, #12]
 800d0be:	4a0f      	ldr	r2, [pc, #60]	; (800d0fc <tcp_slowtmr+0x670>)
 800d0c0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c8:	68db      	ldr	r3, [r3, #12]
 800d0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d0cc:	69f8      	ldr	r0, [r7, #28]
 800d0ce:	f7ff f947 	bl	800c360 <tcp_free>
 800d0d2:	e004      	b.n	800d0de <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0da:	68db      	ldr	r3, [r3, #12]
 800d0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d1a9      	bne.n	800d038 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d0e4:	bf00      	nop
 800d0e6:	3730      	adds	r7, #48	; 0x30
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bdb0      	pop	{r4, r5, r7, pc}
 800d0ec:	08017fb8 	.word	0x08017fb8
 800d0f0:	08018448 	.word	0x08018448
 800d0f4:	08017ffc 	.word	0x08017ffc
 800d0f8:	20007b00 	.word	0x20007b00
 800d0fc:	20007b0c 	.word	0x20007b0c
 800d100:	08018478 	.word	0x08018478
 800d104:	080184a0 	.word	0x080184a0

0800d108 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d10e:	4b2d      	ldr	r3, [pc, #180]	; (800d1c4 <tcp_fasttmr+0xbc>)
 800d110:	781b      	ldrb	r3, [r3, #0]
 800d112:	3301      	adds	r3, #1
 800d114:	b2da      	uxtb	r2, r3
 800d116:	4b2b      	ldr	r3, [pc, #172]	; (800d1c4 <tcp_fasttmr+0xbc>)
 800d118:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d11a:	4b2b      	ldr	r3, [pc, #172]	; (800d1c8 <tcp_fasttmr+0xc0>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d120:	e048      	b.n	800d1b4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	7f9a      	ldrb	r2, [r3, #30]
 800d126:	4b27      	ldr	r3, [pc, #156]	; (800d1c4 <tcp_fasttmr+0xbc>)
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d03f      	beq.n	800d1ae <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d12e:	4b25      	ldr	r3, [pc, #148]	; (800d1c4 <tcp_fasttmr+0xbc>)
 800d130:	781a      	ldrb	r2, [r3, #0]
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	8b5b      	ldrh	r3, [r3, #26]
 800d13a:	f003 0301 	and.w	r3, r3, #1
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d010      	beq.n	800d164 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	8b5b      	ldrh	r3, [r3, #26]
 800d146:	f043 0302 	orr.w	r3, r3, #2
 800d14a:	b29a      	uxth	r2, r3
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f003 fac7 	bl	80106e4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	8b5b      	ldrh	r3, [r3, #26]
 800d15a:	f023 0303 	bic.w	r3, r3, #3
 800d15e:	b29a      	uxth	r2, r3
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	8b5b      	ldrh	r3, [r3, #26]
 800d168:	f003 0308 	and.w	r3, r3, #8
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d009      	beq.n	800d184 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	8b5b      	ldrh	r3, [r3, #26]
 800d174:	f023 0308 	bic.w	r3, r3, #8
 800d178:	b29a      	uxth	r2, r3
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f7ff fa7e 	bl	800c680 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	68db      	ldr	r3, [r3, #12]
 800d188:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d00a      	beq.n	800d1a8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d192:	4b0e      	ldr	r3, [pc, #56]	; (800d1cc <tcp_fasttmr+0xc4>)
 800d194:	2200      	movs	r2, #0
 800d196:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f000 f819 	bl	800d1d0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d19e:	4b0b      	ldr	r3, [pc, #44]	; (800d1cc <tcp_fasttmr+0xc4>)
 800d1a0:	781b      	ldrb	r3, [r3, #0]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d000      	beq.n	800d1a8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d1a6:	e7b8      	b.n	800d11a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	607b      	str	r3, [r7, #4]
 800d1ac:	e002      	b.n	800d1b4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	68db      	ldr	r3, [r3, #12]
 800d1b2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d1b3      	bne.n	800d122 <tcp_fasttmr+0x1a>
    }
  }
}
 800d1ba:	bf00      	nop
 800d1bc:	3708      	adds	r7, #8
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	2000045a 	.word	0x2000045a
 800d1c8:	20007afc 	.word	0x20007afc
 800d1cc:	20007af8 	.word	0x20007af8

0800d1d0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d1d0:	b590      	push	{r4, r7, lr}
 800d1d2:	b085      	sub	sp, #20
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d109      	bne.n	800d1f2 <tcp_process_refused_data+0x22>
 800d1de:	4b37      	ldr	r3, [pc, #220]	; (800d2bc <tcp_process_refused_data+0xec>)
 800d1e0:	f240 6209 	movw	r2, #1545	; 0x609
 800d1e4:	4936      	ldr	r1, [pc, #216]	; (800d2c0 <tcp_process_refused_data+0xf0>)
 800d1e6:	4837      	ldr	r0, [pc, #220]	; (800d2c4 <tcp_process_refused_data+0xf4>)
 800d1e8:	f009 fa90 	bl	801670c <iprintf>
 800d1ec:	f06f 030f 	mvn.w	r3, #15
 800d1f0:	e060      	b.n	800d2b4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1f6:	7b5b      	ldrb	r3, [r3, #13]
 800d1f8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d1fe:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2200      	movs	r2, #0
 800d204:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d00b      	beq.n	800d228 <tcp_process_refused_data+0x58>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6918      	ldr	r0, [r3, #16]
 800d21a:	2300      	movs	r3, #0
 800d21c:	68ba      	ldr	r2, [r7, #8]
 800d21e:	6879      	ldr	r1, [r7, #4]
 800d220:	47a0      	blx	r4
 800d222:	4603      	mov	r3, r0
 800d224:	73fb      	strb	r3, [r7, #15]
 800d226:	e007      	b.n	800d238 <tcp_process_refused_data+0x68>
 800d228:	2300      	movs	r3, #0
 800d22a:	68ba      	ldr	r2, [r7, #8]
 800d22c:	6879      	ldr	r1, [r7, #4]
 800d22e:	2000      	movs	r0, #0
 800d230:	f000 f8a2 	bl	800d378 <tcp_recv_null>
 800d234:	4603      	mov	r3, r0
 800d236:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d12a      	bne.n	800d296 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d240:	7bbb      	ldrb	r3, [r7, #14]
 800d242:	f003 0320 	and.w	r3, r3, #32
 800d246:	2b00      	cmp	r3, #0
 800d248:	d033      	beq.n	800d2b2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d24e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d252:	d005      	beq.n	800d260 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d258:	3301      	adds	r3, #1
 800d25a:	b29a      	uxth	r2, r3
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d266:	2b00      	cmp	r3, #0
 800d268:	d00b      	beq.n	800d282 <tcp_process_refused_data+0xb2>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6918      	ldr	r0, [r3, #16]
 800d274:	2300      	movs	r3, #0
 800d276:	2200      	movs	r2, #0
 800d278:	6879      	ldr	r1, [r7, #4]
 800d27a:	47a0      	blx	r4
 800d27c:	4603      	mov	r3, r0
 800d27e:	73fb      	strb	r3, [r7, #15]
 800d280:	e001      	b.n	800d286 <tcp_process_refused_data+0xb6>
 800d282:	2300      	movs	r3, #0
 800d284:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d28a:	f113 0f0d 	cmn.w	r3, #13
 800d28e:	d110      	bne.n	800d2b2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d290:	f06f 030c 	mvn.w	r3, #12
 800d294:	e00e      	b.n	800d2b4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d29a:	f113 0f0d 	cmn.w	r3, #13
 800d29e:	d102      	bne.n	800d2a6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d2a0:	f06f 030c 	mvn.w	r3, #12
 800d2a4:	e006      	b.n	800d2b4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	68ba      	ldr	r2, [r7, #8]
 800d2aa:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d2ac:	f06f 0304 	mvn.w	r3, #4
 800d2b0:	e000      	b.n	800d2b4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d2b2:	2300      	movs	r3, #0
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3714      	adds	r7, #20
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd90      	pop	{r4, r7, pc}
 800d2bc:	08017fb8 	.word	0x08017fb8
 800d2c0:	080184c8 	.word	0x080184c8
 800d2c4:	08017ffc 	.word	0x08017ffc

0800d2c8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b084      	sub	sp, #16
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d2d0:	e007      	b.n	800d2e2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f000 f809 	bl	800d2f0 <tcp_seg_free>
    seg = next;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d1f4      	bne.n	800d2d2 <tcp_segs_free+0xa>
  }
}
 800d2e8:	bf00      	nop
 800d2ea:	3710      	adds	r7, #16
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}

0800d2f0 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b082      	sub	sp, #8
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d00c      	beq.n	800d318 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	685b      	ldr	r3, [r3, #4]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d004      	beq.n	800d310 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	685b      	ldr	r3, [r3, #4]
 800d30a:	4618      	mov	r0, r3
 800d30c:	f7fe fd78 	bl	800be00 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d310:	6879      	ldr	r1, [r7, #4]
 800d312:	2003      	movs	r0, #3
 800d314:	f7fd ff74 	bl	800b200 <memp_free>
  }
}
 800d318:	bf00      	nop
 800d31a:	3708      	adds	r7, #8
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b084      	sub	sp, #16
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d106      	bne.n	800d33c <tcp_seg_copy+0x1c>
 800d32e:	4b0f      	ldr	r3, [pc, #60]	; (800d36c <tcp_seg_copy+0x4c>)
 800d330:	f240 6282 	movw	r2, #1666	; 0x682
 800d334:	490e      	ldr	r1, [pc, #56]	; (800d370 <tcp_seg_copy+0x50>)
 800d336:	480f      	ldr	r0, [pc, #60]	; (800d374 <tcp_seg_copy+0x54>)
 800d338:	f009 f9e8 	bl	801670c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d33c:	2003      	movs	r0, #3
 800d33e:	f7fd ff13 	bl	800b168 <memp_malloc>
 800d342:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d101      	bne.n	800d34e <tcp_seg_copy+0x2e>
    return NULL;
 800d34a:	2300      	movs	r3, #0
 800d34c:	e00a      	b.n	800d364 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d34e:	2210      	movs	r2, #16
 800d350:	6879      	ldr	r1, [r7, #4]
 800d352:	68f8      	ldr	r0, [r7, #12]
 800d354:	f009 f91f 	bl	8016596 <memcpy>
  pbuf_ref(cseg->p);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	685b      	ldr	r3, [r3, #4]
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7fe fdef 	bl	800bf40 <pbuf_ref>
  return cseg;
 800d362:	68fb      	ldr	r3, [r7, #12]
}
 800d364:	4618      	mov	r0, r3
 800d366:	3710      	adds	r7, #16
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}
 800d36c:	08017fb8 	.word	0x08017fb8
 800d370:	0801850c 	.word	0x0801850c
 800d374:	08017ffc 	.word	0x08017ffc

0800d378 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b084      	sub	sp, #16
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	60f8      	str	r0, [r7, #12]
 800d380:	60b9      	str	r1, [r7, #8]
 800d382:	607a      	str	r2, [r7, #4]
 800d384:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d109      	bne.n	800d3a0 <tcp_recv_null+0x28>
 800d38c:	4b12      	ldr	r3, [pc, #72]	; (800d3d8 <tcp_recv_null+0x60>)
 800d38e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d392:	4912      	ldr	r1, [pc, #72]	; (800d3dc <tcp_recv_null+0x64>)
 800d394:	4812      	ldr	r0, [pc, #72]	; (800d3e0 <tcp_recv_null+0x68>)
 800d396:	f009 f9b9 	bl	801670c <iprintf>
 800d39a:	f06f 030f 	mvn.w	r3, #15
 800d39e:	e016      	b.n	800d3ce <tcp_recv_null+0x56>

  if (p != NULL) {
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d009      	beq.n	800d3ba <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	891b      	ldrh	r3, [r3, #8]
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	68b8      	ldr	r0, [r7, #8]
 800d3ae:	f7ff fb1d 	bl	800c9ec <tcp_recved>
    pbuf_free(p);
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f7fe fd24 	bl	800be00 <pbuf_free>
 800d3b8:	e008      	b.n	800d3cc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d3ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d104      	bne.n	800d3cc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d3c2:	68b8      	ldr	r0, [r7, #8]
 800d3c4:	f7ff f9c2 	bl	800c74c <tcp_close>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	e000      	b.n	800d3ce <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d3cc:	2300      	movs	r3, #0
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3710      	adds	r7, #16
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}
 800d3d6:	bf00      	nop
 800d3d8:	08017fb8 	.word	0x08017fb8
 800d3dc:	08018528 	.word	0x08018528
 800d3e0:	08017ffc 	.word	0x08017ffc

0800d3e4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b086      	sub	sp, #24
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d3ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	db01      	blt.n	800d3fa <tcp_kill_prio+0x16>
 800d3f6:	79fb      	ldrb	r3, [r7, #7]
 800d3f8:	e000      	b.n	800d3fc <tcp_kill_prio+0x18>
 800d3fa:	237f      	movs	r3, #127	; 0x7f
 800d3fc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d3fe:	7afb      	ldrb	r3, [r7, #11]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d034      	beq.n	800d46e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d404:	7afb      	ldrb	r3, [r7, #11]
 800d406:	3b01      	subs	r3, #1
 800d408:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d40a:	2300      	movs	r3, #0
 800d40c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d40e:	2300      	movs	r3, #0
 800d410:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d412:	4b19      	ldr	r3, [pc, #100]	; (800d478 <tcp_kill_prio+0x94>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	617b      	str	r3, [r7, #20]
 800d418:	e01f      	b.n	800d45a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	7d5b      	ldrb	r3, [r3, #21]
 800d41e:	7afa      	ldrb	r2, [r7, #11]
 800d420:	429a      	cmp	r2, r3
 800d422:	d80c      	bhi.n	800d43e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d428:	7afa      	ldrb	r2, [r7, #11]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d112      	bne.n	800d454 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d42e:	4b13      	ldr	r3, [pc, #76]	; (800d47c <tcp_kill_prio+0x98>)
 800d430:	681a      	ldr	r2, [r3, #0]
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	6a1b      	ldr	r3, [r3, #32]
 800d436:	1ad3      	subs	r3, r2, r3
 800d438:	68fa      	ldr	r2, [r7, #12]
 800d43a:	429a      	cmp	r2, r3
 800d43c:	d80a      	bhi.n	800d454 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d43e:	4b0f      	ldr	r3, [pc, #60]	; (800d47c <tcp_kill_prio+0x98>)
 800d440:	681a      	ldr	r2, [r3, #0]
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	6a1b      	ldr	r3, [r3, #32]
 800d446:	1ad3      	subs	r3, r2, r3
 800d448:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d44e:	697b      	ldr	r3, [r7, #20]
 800d450:	7d5b      	ldrb	r3, [r3, #21]
 800d452:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d454:	697b      	ldr	r3, [r7, #20]
 800d456:	68db      	ldr	r3, [r3, #12]
 800d458:	617b      	str	r3, [r7, #20]
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d1dc      	bne.n	800d41a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d004      	beq.n	800d470 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d466:	6938      	ldr	r0, [r7, #16]
 800d468:	f7ff fa5a 	bl	800c920 <tcp_abort>
 800d46c:	e000      	b.n	800d470 <tcp_kill_prio+0x8c>
    return;
 800d46e:	bf00      	nop
  }
}
 800d470:	3718      	adds	r7, #24
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
 800d476:	bf00      	nop
 800d478:	20007afc 	.word	0x20007afc
 800d47c:	20007b00 	.word	0x20007b00

0800d480 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b086      	sub	sp, #24
 800d484:	af00      	add	r7, sp, #0
 800d486:	4603      	mov	r3, r0
 800d488:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d48a:	79fb      	ldrb	r3, [r7, #7]
 800d48c:	2b08      	cmp	r3, #8
 800d48e:	d009      	beq.n	800d4a4 <tcp_kill_state+0x24>
 800d490:	79fb      	ldrb	r3, [r7, #7]
 800d492:	2b09      	cmp	r3, #9
 800d494:	d006      	beq.n	800d4a4 <tcp_kill_state+0x24>
 800d496:	4b1a      	ldr	r3, [pc, #104]	; (800d500 <tcp_kill_state+0x80>)
 800d498:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d49c:	4919      	ldr	r1, [pc, #100]	; (800d504 <tcp_kill_state+0x84>)
 800d49e:	481a      	ldr	r0, [pc, #104]	; (800d508 <tcp_kill_state+0x88>)
 800d4a0:	f009 f934 	bl	801670c <iprintf>

  inactivity = 0;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d4ac:	4b17      	ldr	r3, [pc, #92]	; (800d50c <tcp_kill_state+0x8c>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	617b      	str	r3, [r7, #20]
 800d4b2:	e017      	b.n	800d4e4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	7d1b      	ldrb	r3, [r3, #20]
 800d4b8:	79fa      	ldrb	r2, [r7, #7]
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d10f      	bne.n	800d4de <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d4be:	4b14      	ldr	r3, [pc, #80]	; (800d510 <tcp_kill_state+0x90>)
 800d4c0:	681a      	ldr	r2, [r3, #0]
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	6a1b      	ldr	r3, [r3, #32]
 800d4c6:	1ad3      	subs	r3, r2, r3
 800d4c8:	68fa      	ldr	r2, [r7, #12]
 800d4ca:	429a      	cmp	r2, r3
 800d4cc:	d807      	bhi.n	800d4de <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d4ce:	4b10      	ldr	r3, [pc, #64]	; (800d510 <tcp_kill_state+0x90>)
 800d4d0:	681a      	ldr	r2, [r3, #0]
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	6a1b      	ldr	r3, [r3, #32]
 800d4d6:	1ad3      	subs	r3, r2, r3
 800d4d8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d4de:	697b      	ldr	r3, [r7, #20]
 800d4e0:	68db      	ldr	r3, [r3, #12]
 800d4e2:	617b      	str	r3, [r7, #20]
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d1e4      	bne.n	800d4b4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d003      	beq.n	800d4f8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d4f0:	2100      	movs	r1, #0
 800d4f2:	6938      	ldr	r0, [r7, #16]
 800d4f4:	f7ff f956 	bl	800c7a4 <tcp_abandon>
  }
}
 800d4f8:	bf00      	nop
 800d4fa:	3718      	adds	r7, #24
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	08017fb8 	.word	0x08017fb8
 800d504:	08018544 	.word	0x08018544
 800d508:	08017ffc 	.word	0x08017ffc
 800d50c:	20007afc 	.word	0x20007afc
 800d510:	20007b00 	.word	0x20007b00

0800d514 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b084      	sub	sp, #16
 800d518:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d51a:	2300      	movs	r3, #0
 800d51c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d51e:	2300      	movs	r3, #0
 800d520:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d522:	4b12      	ldr	r3, [pc, #72]	; (800d56c <tcp_kill_timewait+0x58>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	60fb      	str	r3, [r7, #12]
 800d528:	e012      	b.n	800d550 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d52a:	4b11      	ldr	r3, [pc, #68]	; (800d570 <tcp_kill_timewait+0x5c>)
 800d52c:	681a      	ldr	r2, [r3, #0]
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	6a1b      	ldr	r3, [r3, #32]
 800d532:	1ad3      	subs	r3, r2, r3
 800d534:	687a      	ldr	r2, [r7, #4]
 800d536:	429a      	cmp	r2, r3
 800d538:	d807      	bhi.n	800d54a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d53a:	4b0d      	ldr	r3, [pc, #52]	; (800d570 <tcp_kill_timewait+0x5c>)
 800d53c:	681a      	ldr	r2, [r3, #0]
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	6a1b      	ldr	r3, [r3, #32]
 800d542:	1ad3      	subs	r3, r2, r3
 800d544:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	68db      	ldr	r3, [r3, #12]
 800d54e:	60fb      	str	r3, [r7, #12]
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d1e9      	bne.n	800d52a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d002      	beq.n	800d562 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d55c:	68b8      	ldr	r0, [r7, #8]
 800d55e:	f7ff f9df 	bl	800c920 <tcp_abort>
  }
}
 800d562:	bf00      	nop
 800d564:	3710      	adds	r7, #16
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
 800d56a:	bf00      	nop
 800d56c:	20007b0c 	.word	0x20007b0c
 800d570:	20007b00 	.word	0x20007b00

0800d574 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b082      	sub	sp, #8
 800d578:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d57a:	4b10      	ldr	r3, [pc, #64]	; (800d5bc <tcp_handle_closepend+0x48>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d580:	e014      	b.n	800d5ac <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	68db      	ldr	r3, [r3, #12]
 800d586:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	8b5b      	ldrh	r3, [r3, #26]
 800d58c:	f003 0308 	and.w	r3, r3, #8
 800d590:	2b00      	cmp	r3, #0
 800d592:	d009      	beq.n	800d5a8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	8b5b      	ldrh	r3, [r3, #26]
 800d598:	f023 0308 	bic.w	r3, r3, #8
 800d59c:	b29a      	uxth	r2, r3
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f7ff f86c 	bl	800c680 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d1e7      	bne.n	800d582 <tcp_handle_closepend+0xe>
  }
}
 800d5b2:	bf00      	nop
 800d5b4:	3708      	adds	r7, #8
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}
 800d5ba:	bf00      	nop
 800d5bc:	20007afc 	.word	0x20007afc

0800d5c0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b084      	sub	sp, #16
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d5ca:	2001      	movs	r0, #1
 800d5cc:	f7fd fdcc 	bl	800b168 <memp_malloc>
 800d5d0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d126      	bne.n	800d626 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d5d8:	f7ff ffcc 	bl	800d574 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d5dc:	f7ff ff9a 	bl	800d514 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d5e0:	2001      	movs	r0, #1
 800d5e2:	f7fd fdc1 	bl	800b168 <memp_malloc>
 800d5e6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d11b      	bne.n	800d626 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d5ee:	2009      	movs	r0, #9
 800d5f0:	f7ff ff46 	bl	800d480 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d5f4:	2001      	movs	r0, #1
 800d5f6:	f7fd fdb7 	bl	800b168 <memp_malloc>
 800d5fa:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d111      	bne.n	800d626 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d602:	2008      	movs	r0, #8
 800d604:	f7ff ff3c 	bl	800d480 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d608:	2001      	movs	r0, #1
 800d60a:	f7fd fdad 	bl	800b168 <memp_malloc>
 800d60e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d107      	bne.n	800d626 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d616:	79fb      	ldrb	r3, [r7, #7]
 800d618:	4618      	mov	r0, r3
 800d61a:	f7ff fee3 	bl	800d3e4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d61e:	2001      	movs	r0, #1
 800d620:	f7fd fda2 	bl	800b168 <memp_malloc>
 800d624:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d03f      	beq.n	800d6ac <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d62c:	229c      	movs	r2, #156	; 0x9c
 800d62e:	2100      	movs	r1, #0
 800d630:	68f8      	ldr	r0, [r7, #12]
 800d632:	f008 ffbb 	bl	80165ac <memset>
    pcb->prio = prio;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	79fa      	ldrb	r2, [r7, #7]
 800d63a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d642:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d64c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	22ff      	movs	r2, #255	; 0xff
 800d65a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d662:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2206      	movs	r2, #6
 800d668:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	2206      	movs	r2, #6
 800d670:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d678:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	2201      	movs	r2, #1
 800d67e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d682:	4b0d      	ldr	r3, [pc, #52]	; (800d6b8 <tcp_alloc+0xf8>)
 800d684:	681a      	ldr	r2, [r3, #0]
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d68a:	4b0c      	ldr	r3, [pc, #48]	; (800d6bc <tcp_alloc+0xfc>)
 800d68c:	781a      	ldrb	r2, [r3, #0]
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d698:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	4a08      	ldr	r2, [pc, #32]	; (800d6c0 <tcp_alloc+0x100>)
 800d6a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	4a07      	ldr	r2, [pc, #28]	; (800d6c4 <tcp_alloc+0x104>)
 800d6a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3710      	adds	r7, #16
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}
 800d6b6:	bf00      	nop
 800d6b8:	20007b00 	.word	0x20007b00
 800d6bc:	2000045a 	.word	0x2000045a
 800d6c0:	0800d379 	.word	0x0800d379
 800d6c4:	006ddd00 	.word	0x006ddd00

0800d6c8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d107      	bne.n	800d6e6 <tcp_pcb_purge+0x1e>
 800d6d6:	4b21      	ldr	r3, [pc, #132]	; (800d75c <tcp_pcb_purge+0x94>)
 800d6d8:	f640 0251 	movw	r2, #2129	; 0x851
 800d6dc:	4920      	ldr	r1, [pc, #128]	; (800d760 <tcp_pcb_purge+0x98>)
 800d6de:	4821      	ldr	r0, [pc, #132]	; (800d764 <tcp_pcb_purge+0x9c>)
 800d6e0:	f009 f814 	bl	801670c <iprintf>
 800d6e4:	e037      	b.n	800d756 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	7d1b      	ldrb	r3, [r3, #20]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d033      	beq.n	800d756 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d6f2:	2b0a      	cmp	r3, #10
 800d6f4:	d02f      	beq.n	800d756 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d02b      	beq.n	800d756 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d702:	2b00      	cmp	r3, #0
 800d704:	d007      	beq.n	800d716 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7fe fb78 	bl	800be00 <pbuf_free>
      pcb->refused_data = NULL;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2200      	movs	r2, #0
 800d714:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d002      	beq.n	800d724 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f000 f986 	bl	800da30 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d72a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d730:	4618      	mov	r0, r3
 800d732:	f7ff fdc9 	bl	800d2c8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7ff fdc4 	bl	800d2c8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2200      	movs	r2, #0
 800d744:	66da      	str	r2, [r3, #108]	; 0x6c
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2200      	movs	r2, #0
 800d752:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d756:	3708      	adds	r7, #8
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}
 800d75c:	08017fb8 	.word	0x08017fb8
 800d760:	08018604 	.word	0x08018604
 800d764:	08017ffc 	.word	0x08017ffc

0800d768 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b084      	sub	sp, #16
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d106      	bne.n	800d786 <tcp_pcb_remove+0x1e>
 800d778:	4b3e      	ldr	r3, [pc, #248]	; (800d874 <tcp_pcb_remove+0x10c>)
 800d77a:	f640 0283 	movw	r2, #2179	; 0x883
 800d77e:	493e      	ldr	r1, [pc, #248]	; (800d878 <tcp_pcb_remove+0x110>)
 800d780:	483e      	ldr	r0, [pc, #248]	; (800d87c <tcp_pcb_remove+0x114>)
 800d782:	f008 ffc3 	bl	801670c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d106      	bne.n	800d79a <tcp_pcb_remove+0x32>
 800d78c:	4b39      	ldr	r3, [pc, #228]	; (800d874 <tcp_pcb_remove+0x10c>)
 800d78e:	f640 0284 	movw	r2, #2180	; 0x884
 800d792:	493b      	ldr	r1, [pc, #236]	; (800d880 <tcp_pcb_remove+0x118>)
 800d794:	4839      	ldr	r0, [pc, #228]	; (800d87c <tcp_pcb_remove+0x114>)
 800d796:	f008 ffb9 	bl	801670c <iprintf>

  TCP_RMV(pcblist, pcb);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	683a      	ldr	r2, [r7, #0]
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d105      	bne.n	800d7b0 <tcp_pcb_remove+0x48>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	68da      	ldr	r2, [r3, #12]
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	601a      	str	r2, [r3, #0]
 800d7ae:	e013      	b.n	800d7d8 <tcp_pcb_remove+0x70>
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	60fb      	str	r3, [r7, #12]
 800d7b6:	e00c      	b.n	800d7d2 <tcp_pcb_remove+0x6a>
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	68db      	ldr	r3, [r3, #12]
 800d7bc:	683a      	ldr	r2, [r7, #0]
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	d104      	bne.n	800d7cc <tcp_pcb_remove+0x64>
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	68da      	ldr	r2, [r3, #12]
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	60da      	str	r2, [r3, #12]
 800d7ca:	e005      	b.n	800d7d8 <tcp_pcb_remove+0x70>
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	68db      	ldr	r3, [r3, #12]
 800d7d0:	60fb      	str	r3, [r7, #12]
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d1ef      	bne.n	800d7b8 <tcp_pcb_remove+0x50>
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d7de:	6838      	ldr	r0, [r7, #0]
 800d7e0:	f7ff ff72 	bl	800d6c8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	7d1b      	ldrb	r3, [r3, #20]
 800d7e8:	2b0a      	cmp	r3, #10
 800d7ea:	d013      	beq.n	800d814 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d7f0:	2b01      	cmp	r3, #1
 800d7f2:	d00f      	beq.n	800d814 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	8b5b      	ldrh	r3, [r3, #26]
 800d7f8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d009      	beq.n	800d814 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d800:	683b      	ldr	r3, [r7, #0]
 800d802:	8b5b      	ldrh	r3, [r3, #26]
 800d804:	f043 0302 	orr.w	r3, r3, #2
 800d808:	b29a      	uxth	r2, r3
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d80e:	6838      	ldr	r0, [r7, #0]
 800d810:	f002 ff68 	bl	80106e4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	7d1b      	ldrb	r3, [r3, #20]
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d020      	beq.n	800d85e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d820:	2b00      	cmp	r3, #0
 800d822:	d006      	beq.n	800d832 <tcp_pcb_remove+0xca>
 800d824:	4b13      	ldr	r3, [pc, #76]	; (800d874 <tcp_pcb_remove+0x10c>)
 800d826:	f640 0293 	movw	r2, #2195	; 0x893
 800d82a:	4916      	ldr	r1, [pc, #88]	; (800d884 <tcp_pcb_remove+0x11c>)
 800d82c:	4813      	ldr	r0, [pc, #76]	; (800d87c <tcp_pcb_remove+0x114>)
 800d82e:	f008 ff6d 	bl	801670c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d836:	2b00      	cmp	r3, #0
 800d838:	d006      	beq.n	800d848 <tcp_pcb_remove+0xe0>
 800d83a:	4b0e      	ldr	r3, [pc, #56]	; (800d874 <tcp_pcb_remove+0x10c>)
 800d83c:	f640 0294 	movw	r2, #2196	; 0x894
 800d840:	4911      	ldr	r1, [pc, #68]	; (800d888 <tcp_pcb_remove+0x120>)
 800d842:	480e      	ldr	r0, [pc, #56]	; (800d87c <tcp_pcb_remove+0x114>)
 800d844:	f008 ff62 	bl	801670c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d006      	beq.n	800d85e <tcp_pcb_remove+0xf6>
 800d850:	4b08      	ldr	r3, [pc, #32]	; (800d874 <tcp_pcb_remove+0x10c>)
 800d852:	f640 0296 	movw	r2, #2198	; 0x896
 800d856:	490d      	ldr	r1, [pc, #52]	; (800d88c <tcp_pcb_remove+0x124>)
 800d858:	4808      	ldr	r0, [pc, #32]	; (800d87c <tcp_pcb_remove+0x114>)
 800d85a:	f008 ff57 	bl	801670c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	2200      	movs	r2, #0
 800d862:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	2200      	movs	r2, #0
 800d868:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d86a:	bf00      	nop
 800d86c:	3710      	adds	r7, #16
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
 800d872:	bf00      	nop
 800d874:	08017fb8 	.word	0x08017fb8
 800d878:	08018620 	.word	0x08018620
 800d87c:	08017ffc 	.word	0x08017ffc
 800d880:	0801863c 	.word	0x0801863c
 800d884:	0801865c 	.word	0x0801865c
 800d888:	08018674 	.word	0x08018674
 800d88c:	08018690 	.word	0x08018690

0800d890 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b082      	sub	sp, #8
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d106      	bne.n	800d8ac <tcp_next_iss+0x1c>
 800d89e:	4b0a      	ldr	r3, [pc, #40]	; (800d8c8 <tcp_next_iss+0x38>)
 800d8a0:	f640 02af 	movw	r2, #2223	; 0x8af
 800d8a4:	4909      	ldr	r1, [pc, #36]	; (800d8cc <tcp_next_iss+0x3c>)
 800d8a6:	480a      	ldr	r0, [pc, #40]	; (800d8d0 <tcp_next_iss+0x40>)
 800d8a8:	f008 ff30 	bl	801670c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d8ac:	4b09      	ldr	r3, [pc, #36]	; (800d8d4 <tcp_next_iss+0x44>)
 800d8ae:	681a      	ldr	r2, [r3, #0]
 800d8b0:	4b09      	ldr	r3, [pc, #36]	; (800d8d8 <tcp_next_iss+0x48>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	4413      	add	r3, r2
 800d8b6:	4a07      	ldr	r2, [pc, #28]	; (800d8d4 <tcp_next_iss+0x44>)
 800d8b8:	6013      	str	r3, [r2, #0]
  return iss;
 800d8ba:	4b06      	ldr	r3, [pc, #24]	; (800d8d4 <tcp_next_iss+0x44>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3708      	adds	r7, #8
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	08017fb8 	.word	0x08017fb8
 800d8cc:	080186a8 	.word	0x080186a8
 800d8d0:	08017ffc 	.word	0x08017ffc
 800d8d4:	20000018 	.word	0x20000018
 800d8d8:	20007b00 	.word	0x20007b00

0800d8dc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b086      	sub	sp, #24
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	60b9      	str	r1, [r7, #8]
 800d8e6:	607a      	str	r2, [r7, #4]
 800d8e8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d106      	bne.n	800d8fe <tcp_eff_send_mss_netif+0x22>
 800d8f0:	4b14      	ldr	r3, [pc, #80]	; (800d944 <tcp_eff_send_mss_netif+0x68>)
 800d8f2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d8f6:	4914      	ldr	r1, [pc, #80]	; (800d948 <tcp_eff_send_mss_netif+0x6c>)
 800d8f8:	4814      	ldr	r0, [pc, #80]	; (800d94c <tcp_eff_send_mss_netif+0x70>)
 800d8fa:	f008 ff07 	bl	801670c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d101      	bne.n	800d908 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d904:	89fb      	ldrh	r3, [r7, #14]
 800d906:	e019      	b.n	800d93c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d90c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d90e:	8afb      	ldrh	r3, [r7, #22]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d012      	beq.n	800d93a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d914:	2328      	movs	r3, #40	; 0x28
 800d916:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d918:	8afa      	ldrh	r2, [r7, #22]
 800d91a:	8abb      	ldrh	r3, [r7, #20]
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d904      	bls.n	800d92a <tcp_eff_send_mss_netif+0x4e>
 800d920:	8afa      	ldrh	r2, [r7, #22]
 800d922:	8abb      	ldrh	r3, [r7, #20]
 800d924:	1ad3      	subs	r3, r2, r3
 800d926:	b29b      	uxth	r3, r3
 800d928:	e000      	b.n	800d92c <tcp_eff_send_mss_netif+0x50>
 800d92a:	2300      	movs	r3, #0
 800d92c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d92e:	8a7a      	ldrh	r2, [r7, #18]
 800d930:	89fb      	ldrh	r3, [r7, #14]
 800d932:	4293      	cmp	r3, r2
 800d934:	bf28      	it	cs
 800d936:	4613      	movcs	r3, r2
 800d938:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d93a:	89fb      	ldrh	r3, [r7, #14]
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3718      	adds	r7, #24
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}
 800d944:	08017fb8 	.word	0x08017fb8
 800d948:	080186c4 	.word	0x080186c4
 800d94c:	08017ffc 	.word	0x08017ffc

0800d950 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b084      	sub	sp, #16
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d119      	bne.n	800d998 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d964:	4b10      	ldr	r3, [pc, #64]	; (800d9a8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d966:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d96a:	4910      	ldr	r1, [pc, #64]	; (800d9ac <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d96c:	4810      	ldr	r0, [pc, #64]	; (800d9b0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d96e:	f008 fecd 	bl	801670c <iprintf>

  while (pcb != NULL) {
 800d972:	e011      	b.n	800d998 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	681a      	ldr	r2, [r3, #0]
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d108      	bne.n	800d992 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	68db      	ldr	r3, [r3, #12]
 800d984:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d986:	68f8      	ldr	r0, [r7, #12]
 800d988:	f7fe ffca 	bl	800c920 <tcp_abort>
      pcb = next;
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	60fb      	str	r3, [r7, #12]
 800d990:	e002      	b.n	800d998 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	68db      	ldr	r3, [r3, #12]
 800d996:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d1ea      	bne.n	800d974 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d99e:	bf00      	nop
 800d9a0:	3710      	adds	r7, #16
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
 800d9a6:	bf00      	nop
 800d9a8:	08017fb8 	.word	0x08017fb8
 800d9ac:	080186ec 	.word	0x080186ec
 800d9b0:	08017ffc 	.word	0x08017ffc

0800d9b4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b084      	sub	sp, #16
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d02a      	beq.n	800da1a <tcp_netif_ip_addr_changed+0x66>
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d026      	beq.n	800da1a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d9cc:	4b15      	ldr	r3, [pc, #84]	; (800da24 <tcp_netif_ip_addr_changed+0x70>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4619      	mov	r1, r3
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f7ff ffbc 	bl	800d950 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d9d8:	4b13      	ldr	r3, [pc, #76]	; (800da28 <tcp_netif_ip_addr_changed+0x74>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	4619      	mov	r1, r3
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f7ff ffb6 	bl	800d950 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d017      	beq.n	800da1a <tcp_netif_ip_addr_changed+0x66>
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d013      	beq.n	800da1a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d9f2:	4b0e      	ldr	r3, [pc, #56]	; (800da2c <tcp_netif_ip_addr_changed+0x78>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	60fb      	str	r3, [r7, #12]
 800d9f8:	e00c      	b.n	800da14 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681a      	ldr	r2, [r3, #0]
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	429a      	cmp	r2, r3
 800da04:	d103      	bne.n	800da0e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	681a      	ldr	r2, [r3, #0]
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	68db      	ldr	r3, [r3, #12]
 800da12:	60fb      	str	r3, [r7, #12]
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d1ef      	bne.n	800d9fa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800da1a:	bf00      	nop
 800da1c:	3710      	adds	r7, #16
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
 800da22:	bf00      	nop
 800da24:	20007afc 	.word	0x20007afc
 800da28:	20007b08 	.word	0x20007b08
 800da2c:	20007b04 	.word	0x20007b04

0800da30 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b082      	sub	sp, #8
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d007      	beq.n	800da50 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da44:	4618      	mov	r0, r3
 800da46:	f7ff fc3f 	bl	800d2c8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2200      	movs	r2, #0
 800da4e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800da50:	bf00      	nop
 800da52:	3708      	adds	r7, #8
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800da58:	b590      	push	{r4, r7, lr}
 800da5a:	b08d      	sub	sp, #52	; 0x34
 800da5c:	af04      	add	r7, sp, #16
 800da5e:	6078      	str	r0, [r7, #4]
 800da60:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d105      	bne.n	800da74 <tcp_input+0x1c>
 800da68:	4b9b      	ldr	r3, [pc, #620]	; (800dcd8 <tcp_input+0x280>)
 800da6a:	2283      	movs	r2, #131	; 0x83
 800da6c:	499b      	ldr	r1, [pc, #620]	; (800dcdc <tcp_input+0x284>)
 800da6e:	489c      	ldr	r0, [pc, #624]	; (800dce0 <tcp_input+0x288>)
 800da70:	f008 fe4c 	bl	801670c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	685b      	ldr	r3, [r3, #4]
 800da78:	4a9a      	ldr	r2, [pc, #616]	; (800dce4 <tcp_input+0x28c>)
 800da7a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	895b      	ldrh	r3, [r3, #10]
 800da80:	2b13      	cmp	r3, #19
 800da82:	f240 83c4 	bls.w	800e20e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800da86:	4b98      	ldr	r3, [pc, #608]	; (800dce8 <tcp_input+0x290>)
 800da88:	695a      	ldr	r2, [r3, #20]
 800da8a:	4b97      	ldr	r3, [pc, #604]	; (800dce8 <tcp_input+0x290>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4619      	mov	r1, r3
 800da90:	4610      	mov	r0, r2
 800da92:	f007 fdf1 	bl	8015678 <ip4_addr_isbroadcast_u32>
 800da96:	4603      	mov	r3, r0
 800da98:	2b00      	cmp	r3, #0
 800da9a:	f040 83ba 	bne.w	800e212 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800da9e:	4b92      	ldr	r3, [pc, #584]	; (800dce8 <tcp_input+0x290>)
 800daa0:	695b      	ldr	r3, [r3, #20]
 800daa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800daa6:	2be0      	cmp	r3, #224	; 0xe0
 800daa8:	f000 83b3 	beq.w	800e212 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800daac:	4b8d      	ldr	r3, [pc, #564]	; (800dce4 <tcp_input+0x28c>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	899b      	ldrh	r3, [r3, #12]
 800dab2:	b29b      	uxth	r3, r3
 800dab4:	4618      	mov	r0, r3
 800dab6:	f7fc ff02 	bl	800a8be <lwip_htons>
 800daba:	4603      	mov	r3, r0
 800dabc:	0b1b      	lsrs	r3, r3, #12
 800dabe:	b29b      	uxth	r3, r3
 800dac0:	b2db      	uxtb	r3, r3
 800dac2:	009b      	lsls	r3, r3, #2
 800dac4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800dac6:	7cbb      	ldrb	r3, [r7, #18]
 800dac8:	2b13      	cmp	r3, #19
 800daca:	f240 83a2 	bls.w	800e212 <tcp_input+0x7ba>
 800dace:	7cbb      	ldrb	r3, [r7, #18]
 800dad0:	b29a      	uxth	r2, r3
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	891b      	ldrh	r3, [r3, #8]
 800dad6:	429a      	cmp	r2, r3
 800dad8:	f200 839b 	bhi.w	800e212 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800dadc:	7cbb      	ldrb	r3, [r7, #18]
 800dade:	b29b      	uxth	r3, r3
 800dae0:	3b14      	subs	r3, #20
 800dae2:	b29a      	uxth	r2, r3
 800dae4:	4b81      	ldr	r3, [pc, #516]	; (800dcec <tcp_input+0x294>)
 800dae6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800dae8:	4b81      	ldr	r3, [pc, #516]	; (800dcf0 <tcp_input+0x298>)
 800daea:	2200      	movs	r2, #0
 800daec:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	895a      	ldrh	r2, [r3, #10]
 800daf2:	7cbb      	ldrb	r3, [r7, #18]
 800daf4:	b29b      	uxth	r3, r3
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d309      	bcc.n	800db0e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800dafa:	4b7c      	ldr	r3, [pc, #496]	; (800dcec <tcp_input+0x294>)
 800dafc:	881a      	ldrh	r2, [r3, #0]
 800dafe:	4b7d      	ldr	r3, [pc, #500]	; (800dcf4 <tcp_input+0x29c>)
 800db00:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800db02:	7cbb      	ldrb	r3, [r7, #18]
 800db04:	4619      	mov	r1, r3
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f7fe f8f4 	bl	800bcf4 <pbuf_remove_header>
 800db0c:	e04e      	b.n	800dbac <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d105      	bne.n	800db22 <tcp_input+0xca>
 800db16:	4b70      	ldr	r3, [pc, #448]	; (800dcd8 <tcp_input+0x280>)
 800db18:	22c2      	movs	r2, #194	; 0xc2
 800db1a:	4977      	ldr	r1, [pc, #476]	; (800dcf8 <tcp_input+0x2a0>)
 800db1c:	4870      	ldr	r0, [pc, #448]	; (800dce0 <tcp_input+0x288>)
 800db1e:	f008 fdf5 	bl	801670c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800db22:	2114      	movs	r1, #20
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f7fe f8e5 	bl	800bcf4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	895a      	ldrh	r2, [r3, #10]
 800db2e:	4b71      	ldr	r3, [pc, #452]	; (800dcf4 <tcp_input+0x29c>)
 800db30:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800db32:	4b6e      	ldr	r3, [pc, #440]	; (800dcec <tcp_input+0x294>)
 800db34:	881a      	ldrh	r2, [r3, #0]
 800db36:	4b6f      	ldr	r3, [pc, #444]	; (800dcf4 <tcp_input+0x29c>)
 800db38:	881b      	ldrh	r3, [r3, #0]
 800db3a:	1ad3      	subs	r3, r2, r3
 800db3c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800db3e:	4b6d      	ldr	r3, [pc, #436]	; (800dcf4 <tcp_input+0x29c>)
 800db40:	881b      	ldrh	r3, [r3, #0]
 800db42:	4619      	mov	r1, r3
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f7fe f8d5 	bl	800bcf4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	895b      	ldrh	r3, [r3, #10]
 800db50:	8a3a      	ldrh	r2, [r7, #16]
 800db52:	429a      	cmp	r2, r3
 800db54:	f200 835f 	bhi.w	800e216 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	4a64      	ldr	r2, [pc, #400]	; (800dcf0 <tcp_input+0x298>)
 800db60:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	8a3a      	ldrh	r2, [r7, #16]
 800db68:	4611      	mov	r1, r2
 800db6a:	4618      	mov	r0, r3
 800db6c:	f7fe f8c2 	bl	800bcf4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	891a      	ldrh	r2, [r3, #8]
 800db74:	8a3b      	ldrh	r3, [r7, #16]
 800db76:	1ad3      	subs	r3, r2, r3
 800db78:	b29a      	uxth	r2, r3
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	895b      	ldrh	r3, [r3, #10]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d005      	beq.n	800db92 <tcp_input+0x13a>
 800db86:	4b54      	ldr	r3, [pc, #336]	; (800dcd8 <tcp_input+0x280>)
 800db88:	22df      	movs	r2, #223	; 0xdf
 800db8a:	495c      	ldr	r1, [pc, #368]	; (800dcfc <tcp_input+0x2a4>)
 800db8c:	4854      	ldr	r0, [pc, #336]	; (800dce0 <tcp_input+0x288>)
 800db8e:	f008 fdbd 	bl	801670c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	891a      	ldrh	r2, [r3, #8]
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	891b      	ldrh	r3, [r3, #8]
 800db9c:	429a      	cmp	r2, r3
 800db9e:	d005      	beq.n	800dbac <tcp_input+0x154>
 800dba0:	4b4d      	ldr	r3, [pc, #308]	; (800dcd8 <tcp_input+0x280>)
 800dba2:	22e0      	movs	r2, #224	; 0xe0
 800dba4:	4956      	ldr	r1, [pc, #344]	; (800dd00 <tcp_input+0x2a8>)
 800dba6:	484e      	ldr	r0, [pc, #312]	; (800dce0 <tcp_input+0x288>)
 800dba8:	f008 fdb0 	bl	801670c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800dbac:	4b4d      	ldr	r3, [pc, #308]	; (800dce4 <tcp_input+0x28c>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	881b      	ldrh	r3, [r3, #0]
 800dbb2:	b29a      	uxth	r2, r3
 800dbb4:	4b4b      	ldr	r3, [pc, #300]	; (800dce4 <tcp_input+0x28c>)
 800dbb6:	681c      	ldr	r4, [r3, #0]
 800dbb8:	4610      	mov	r0, r2
 800dbba:	f7fc fe80 	bl	800a8be <lwip_htons>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800dbc2:	4b48      	ldr	r3, [pc, #288]	; (800dce4 <tcp_input+0x28c>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	885b      	ldrh	r3, [r3, #2]
 800dbc8:	b29a      	uxth	r2, r3
 800dbca:	4b46      	ldr	r3, [pc, #280]	; (800dce4 <tcp_input+0x28c>)
 800dbcc:	681c      	ldr	r4, [r3, #0]
 800dbce:	4610      	mov	r0, r2
 800dbd0:	f7fc fe75 	bl	800a8be <lwip_htons>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800dbd8:	4b42      	ldr	r3, [pc, #264]	; (800dce4 <tcp_input+0x28c>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	685a      	ldr	r2, [r3, #4]
 800dbde:	4b41      	ldr	r3, [pc, #260]	; (800dce4 <tcp_input+0x28c>)
 800dbe0:	681c      	ldr	r4, [r3, #0]
 800dbe2:	4610      	mov	r0, r2
 800dbe4:	f7fc fe80 	bl	800a8e8 <lwip_htonl>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	6063      	str	r3, [r4, #4]
 800dbec:	6863      	ldr	r3, [r4, #4]
 800dbee:	4a45      	ldr	r2, [pc, #276]	; (800dd04 <tcp_input+0x2ac>)
 800dbf0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800dbf2:	4b3c      	ldr	r3, [pc, #240]	; (800dce4 <tcp_input+0x28c>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	689a      	ldr	r2, [r3, #8]
 800dbf8:	4b3a      	ldr	r3, [pc, #232]	; (800dce4 <tcp_input+0x28c>)
 800dbfa:	681c      	ldr	r4, [r3, #0]
 800dbfc:	4610      	mov	r0, r2
 800dbfe:	f7fc fe73 	bl	800a8e8 <lwip_htonl>
 800dc02:	4603      	mov	r3, r0
 800dc04:	60a3      	str	r3, [r4, #8]
 800dc06:	68a3      	ldr	r3, [r4, #8]
 800dc08:	4a3f      	ldr	r2, [pc, #252]	; (800dd08 <tcp_input+0x2b0>)
 800dc0a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800dc0c:	4b35      	ldr	r3, [pc, #212]	; (800dce4 <tcp_input+0x28c>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	89db      	ldrh	r3, [r3, #14]
 800dc12:	b29a      	uxth	r2, r3
 800dc14:	4b33      	ldr	r3, [pc, #204]	; (800dce4 <tcp_input+0x28c>)
 800dc16:	681c      	ldr	r4, [r3, #0]
 800dc18:	4610      	mov	r0, r2
 800dc1a:	f7fc fe50 	bl	800a8be <lwip_htons>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800dc22:	4b30      	ldr	r3, [pc, #192]	; (800dce4 <tcp_input+0x28c>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	899b      	ldrh	r3, [r3, #12]
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f7fc fe47 	bl	800a8be <lwip_htons>
 800dc30:	4603      	mov	r3, r0
 800dc32:	b2db      	uxtb	r3, r3
 800dc34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc38:	b2da      	uxtb	r2, r3
 800dc3a:	4b34      	ldr	r3, [pc, #208]	; (800dd0c <tcp_input+0x2b4>)
 800dc3c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	891a      	ldrh	r2, [r3, #8]
 800dc42:	4b33      	ldr	r3, [pc, #204]	; (800dd10 <tcp_input+0x2b8>)
 800dc44:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800dc46:	4b31      	ldr	r3, [pc, #196]	; (800dd0c <tcp_input+0x2b4>)
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	f003 0303 	and.w	r3, r3, #3
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d00c      	beq.n	800dc6c <tcp_input+0x214>
    tcplen++;
 800dc52:	4b2f      	ldr	r3, [pc, #188]	; (800dd10 <tcp_input+0x2b8>)
 800dc54:	881b      	ldrh	r3, [r3, #0]
 800dc56:	3301      	adds	r3, #1
 800dc58:	b29a      	uxth	r2, r3
 800dc5a:	4b2d      	ldr	r3, [pc, #180]	; (800dd10 <tcp_input+0x2b8>)
 800dc5c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	891a      	ldrh	r2, [r3, #8]
 800dc62:	4b2b      	ldr	r3, [pc, #172]	; (800dd10 <tcp_input+0x2b8>)
 800dc64:	881b      	ldrh	r3, [r3, #0]
 800dc66:	429a      	cmp	r2, r3
 800dc68:	f200 82d7 	bhi.w	800e21a <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dc70:	4b28      	ldr	r3, [pc, #160]	; (800dd14 <tcp_input+0x2bc>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	61fb      	str	r3, [r7, #28]
 800dc76:	e09d      	b.n	800ddb4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800dc78:	69fb      	ldr	r3, [r7, #28]
 800dc7a:	7d1b      	ldrb	r3, [r3, #20]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d105      	bne.n	800dc8c <tcp_input+0x234>
 800dc80:	4b15      	ldr	r3, [pc, #84]	; (800dcd8 <tcp_input+0x280>)
 800dc82:	22fb      	movs	r2, #251	; 0xfb
 800dc84:	4924      	ldr	r1, [pc, #144]	; (800dd18 <tcp_input+0x2c0>)
 800dc86:	4816      	ldr	r0, [pc, #88]	; (800dce0 <tcp_input+0x288>)
 800dc88:	f008 fd40 	bl	801670c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800dc8c:	69fb      	ldr	r3, [r7, #28]
 800dc8e:	7d1b      	ldrb	r3, [r3, #20]
 800dc90:	2b0a      	cmp	r3, #10
 800dc92:	d105      	bne.n	800dca0 <tcp_input+0x248>
 800dc94:	4b10      	ldr	r3, [pc, #64]	; (800dcd8 <tcp_input+0x280>)
 800dc96:	22fc      	movs	r2, #252	; 0xfc
 800dc98:	4920      	ldr	r1, [pc, #128]	; (800dd1c <tcp_input+0x2c4>)
 800dc9a:	4811      	ldr	r0, [pc, #68]	; (800dce0 <tcp_input+0x288>)
 800dc9c:	f008 fd36 	bl	801670c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800dca0:	69fb      	ldr	r3, [r7, #28]
 800dca2:	7d1b      	ldrb	r3, [r3, #20]
 800dca4:	2b01      	cmp	r3, #1
 800dca6:	d105      	bne.n	800dcb4 <tcp_input+0x25c>
 800dca8:	4b0b      	ldr	r3, [pc, #44]	; (800dcd8 <tcp_input+0x280>)
 800dcaa:	22fd      	movs	r2, #253	; 0xfd
 800dcac:	491c      	ldr	r1, [pc, #112]	; (800dd20 <tcp_input+0x2c8>)
 800dcae:	480c      	ldr	r0, [pc, #48]	; (800dce0 <tcp_input+0x288>)
 800dcb0:	f008 fd2c 	bl	801670c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dcb4:	69fb      	ldr	r3, [r7, #28]
 800dcb6:	7a1b      	ldrb	r3, [r3, #8]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d033      	beq.n	800dd24 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dcbc:	69fb      	ldr	r3, [r7, #28]
 800dcbe:	7a1a      	ldrb	r2, [r3, #8]
 800dcc0:	4b09      	ldr	r3, [pc, #36]	; (800dce8 <tcp_input+0x290>)
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dcc8:	3301      	adds	r3, #1
 800dcca:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dccc:	429a      	cmp	r2, r3
 800dcce:	d029      	beq.n	800dd24 <tcp_input+0x2cc>
      prev = pcb;
 800dcd0:	69fb      	ldr	r3, [r7, #28]
 800dcd2:	61bb      	str	r3, [r7, #24]
      continue;
 800dcd4:	e06b      	b.n	800ddae <tcp_input+0x356>
 800dcd6:	bf00      	nop
 800dcd8:	08018720 	.word	0x08018720
 800dcdc:	08018754 	.word	0x08018754
 800dce0:	0801876c 	.word	0x0801876c
 800dce4:	2000046c 	.word	0x2000046c
 800dce8:	20004598 	.word	0x20004598
 800dcec:	20000470 	.word	0x20000470
 800dcf0:	20000474 	.word	0x20000474
 800dcf4:	20000472 	.word	0x20000472
 800dcf8:	08018794 	.word	0x08018794
 800dcfc:	080187a4 	.word	0x080187a4
 800dd00:	080187b0 	.word	0x080187b0
 800dd04:	2000047c 	.word	0x2000047c
 800dd08:	20000480 	.word	0x20000480
 800dd0c:	20000488 	.word	0x20000488
 800dd10:	20000486 	.word	0x20000486
 800dd14:	20007afc 	.word	0x20007afc
 800dd18:	080187d0 	.word	0x080187d0
 800dd1c:	080187f8 	.word	0x080187f8
 800dd20:	08018824 	.word	0x08018824
    }

    if (pcb->remote_port == tcphdr->src &&
 800dd24:	69fb      	ldr	r3, [r7, #28]
 800dd26:	8b1a      	ldrh	r2, [r3, #24]
 800dd28:	4b94      	ldr	r3, [pc, #592]	; (800df7c <tcp_input+0x524>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	881b      	ldrh	r3, [r3, #0]
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	429a      	cmp	r2, r3
 800dd32:	d13a      	bne.n	800ddaa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800dd34:	69fb      	ldr	r3, [r7, #28]
 800dd36:	8ada      	ldrh	r2, [r3, #22]
 800dd38:	4b90      	ldr	r3, [pc, #576]	; (800df7c <tcp_input+0x524>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	885b      	ldrh	r3, [r3, #2]
 800dd3e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800dd40:	429a      	cmp	r2, r3
 800dd42:	d132      	bne.n	800ddaa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dd44:	69fb      	ldr	r3, [r7, #28]
 800dd46:	685a      	ldr	r2, [r3, #4]
 800dd48:	4b8d      	ldr	r3, [pc, #564]	; (800df80 <tcp_input+0x528>)
 800dd4a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d12c      	bne.n	800ddaa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dd50:	69fb      	ldr	r3, [r7, #28]
 800dd52:	681a      	ldr	r2, [r3, #0]
 800dd54:	4b8a      	ldr	r3, [pc, #552]	; (800df80 <tcp_input+0x528>)
 800dd56:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d126      	bne.n	800ddaa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800dd5c:	69fb      	ldr	r3, [r7, #28]
 800dd5e:	68db      	ldr	r3, [r3, #12]
 800dd60:	69fa      	ldr	r2, [r7, #28]
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d106      	bne.n	800dd74 <tcp_input+0x31c>
 800dd66:	4b87      	ldr	r3, [pc, #540]	; (800df84 <tcp_input+0x52c>)
 800dd68:	f240 120d 	movw	r2, #269	; 0x10d
 800dd6c:	4986      	ldr	r1, [pc, #536]	; (800df88 <tcp_input+0x530>)
 800dd6e:	4887      	ldr	r0, [pc, #540]	; (800df8c <tcp_input+0x534>)
 800dd70:	f008 fccc 	bl	801670c <iprintf>
      if (prev != NULL) {
 800dd74:	69bb      	ldr	r3, [r7, #24]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d00a      	beq.n	800dd90 <tcp_input+0x338>
        prev->next = pcb->next;
 800dd7a:	69fb      	ldr	r3, [r7, #28]
 800dd7c:	68da      	ldr	r2, [r3, #12]
 800dd7e:	69bb      	ldr	r3, [r7, #24]
 800dd80:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800dd82:	4b83      	ldr	r3, [pc, #524]	; (800df90 <tcp_input+0x538>)
 800dd84:	681a      	ldr	r2, [r3, #0]
 800dd86:	69fb      	ldr	r3, [r7, #28]
 800dd88:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800dd8a:	4a81      	ldr	r2, [pc, #516]	; (800df90 <tcp_input+0x538>)
 800dd8c:	69fb      	ldr	r3, [r7, #28]
 800dd8e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800dd90:	69fb      	ldr	r3, [r7, #28]
 800dd92:	68db      	ldr	r3, [r3, #12]
 800dd94:	69fa      	ldr	r2, [r7, #28]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d111      	bne.n	800ddbe <tcp_input+0x366>
 800dd9a:	4b7a      	ldr	r3, [pc, #488]	; (800df84 <tcp_input+0x52c>)
 800dd9c:	f240 1215 	movw	r2, #277	; 0x115
 800dda0:	497c      	ldr	r1, [pc, #496]	; (800df94 <tcp_input+0x53c>)
 800dda2:	487a      	ldr	r0, [pc, #488]	; (800df8c <tcp_input+0x534>)
 800dda4:	f008 fcb2 	bl	801670c <iprintf>
      break;
 800dda8:	e009      	b.n	800ddbe <tcp_input+0x366>
    }
    prev = pcb;
 800ddaa:	69fb      	ldr	r3, [r7, #28]
 800ddac:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ddae:	69fb      	ldr	r3, [r7, #28]
 800ddb0:	68db      	ldr	r3, [r3, #12]
 800ddb2:	61fb      	str	r3, [r7, #28]
 800ddb4:	69fb      	ldr	r3, [r7, #28]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	f47f af5e 	bne.w	800dc78 <tcp_input+0x220>
 800ddbc:	e000      	b.n	800ddc0 <tcp_input+0x368>
      break;
 800ddbe:	bf00      	nop
  }

  if (pcb == NULL) {
 800ddc0:	69fb      	ldr	r3, [r7, #28]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	f040 8095 	bne.w	800def2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ddc8:	4b73      	ldr	r3, [pc, #460]	; (800df98 <tcp_input+0x540>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	61fb      	str	r3, [r7, #28]
 800ddce:	e03f      	b.n	800de50 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ddd0:	69fb      	ldr	r3, [r7, #28]
 800ddd2:	7d1b      	ldrb	r3, [r3, #20]
 800ddd4:	2b0a      	cmp	r3, #10
 800ddd6:	d006      	beq.n	800dde6 <tcp_input+0x38e>
 800ddd8:	4b6a      	ldr	r3, [pc, #424]	; (800df84 <tcp_input+0x52c>)
 800ddda:	f240 121f 	movw	r2, #287	; 0x11f
 800ddde:	496f      	ldr	r1, [pc, #444]	; (800df9c <tcp_input+0x544>)
 800dde0:	486a      	ldr	r0, [pc, #424]	; (800df8c <tcp_input+0x534>)
 800dde2:	f008 fc93 	bl	801670c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dde6:	69fb      	ldr	r3, [r7, #28]
 800dde8:	7a1b      	ldrb	r3, [r3, #8]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d009      	beq.n	800de02 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ddee:	69fb      	ldr	r3, [r7, #28]
 800ddf0:	7a1a      	ldrb	r2, [r3, #8]
 800ddf2:	4b63      	ldr	r3, [pc, #396]	; (800df80 <tcp_input+0x528>)
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d122      	bne.n	800de48 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800de02:	69fb      	ldr	r3, [r7, #28]
 800de04:	8b1a      	ldrh	r2, [r3, #24]
 800de06:	4b5d      	ldr	r3, [pc, #372]	; (800df7c <tcp_input+0x524>)
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	881b      	ldrh	r3, [r3, #0]
 800de0c:	b29b      	uxth	r3, r3
 800de0e:	429a      	cmp	r2, r3
 800de10:	d11b      	bne.n	800de4a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800de12:	69fb      	ldr	r3, [r7, #28]
 800de14:	8ada      	ldrh	r2, [r3, #22]
 800de16:	4b59      	ldr	r3, [pc, #356]	; (800df7c <tcp_input+0x524>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	885b      	ldrh	r3, [r3, #2]
 800de1c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800de1e:	429a      	cmp	r2, r3
 800de20:	d113      	bne.n	800de4a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800de22:	69fb      	ldr	r3, [r7, #28]
 800de24:	685a      	ldr	r2, [r3, #4]
 800de26:	4b56      	ldr	r3, [pc, #344]	; (800df80 <tcp_input+0x528>)
 800de28:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800de2a:	429a      	cmp	r2, r3
 800de2c:	d10d      	bne.n	800de4a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800de2e:	69fb      	ldr	r3, [r7, #28]
 800de30:	681a      	ldr	r2, [r3, #0]
 800de32:	4b53      	ldr	r3, [pc, #332]	; (800df80 <tcp_input+0x528>)
 800de34:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800de36:	429a      	cmp	r2, r3
 800de38:	d107      	bne.n	800de4a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800de3a:	69f8      	ldr	r0, [r7, #28]
 800de3c:	f000 fb52 	bl	800e4e4 <tcp_timewait_input>
        }
        pbuf_free(p);
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f7fd ffdd 	bl	800be00 <pbuf_free>
        return;
 800de46:	e1ee      	b.n	800e226 <tcp_input+0x7ce>
        continue;
 800de48:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800de4a:	69fb      	ldr	r3, [r7, #28]
 800de4c:	68db      	ldr	r3, [r3, #12]
 800de4e:	61fb      	str	r3, [r7, #28]
 800de50:	69fb      	ldr	r3, [r7, #28]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d1bc      	bne.n	800ddd0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800de56:	2300      	movs	r3, #0
 800de58:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800de5a:	4b51      	ldr	r3, [pc, #324]	; (800dfa0 <tcp_input+0x548>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	617b      	str	r3, [r7, #20]
 800de60:	e02a      	b.n	800deb8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	7a1b      	ldrb	r3, [r3, #8]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d00c      	beq.n	800de84 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	7a1a      	ldrb	r2, [r3, #8]
 800de6e:	4b44      	ldr	r3, [pc, #272]	; (800df80 <tcp_input+0x528>)
 800de70:	685b      	ldr	r3, [r3, #4]
 800de72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de76:	3301      	adds	r3, #1
 800de78:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800de7a:	429a      	cmp	r2, r3
 800de7c:	d002      	beq.n	800de84 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800de7e:	697b      	ldr	r3, [r7, #20]
 800de80:	61bb      	str	r3, [r7, #24]
        continue;
 800de82:	e016      	b.n	800deb2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	8ada      	ldrh	r2, [r3, #22]
 800de88:	4b3c      	ldr	r3, [pc, #240]	; (800df7c <tcp_input+0x524>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	885b      	ldrh	r3, [r3, #2]
 800de8e:	b29b      	uxth	r3, r3
 800de90:	429a      	cmp	r2, r3
 800de92:	d10c      	bne.n	800deae <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800de94:	697b      	ldr	r3, [r7, #20]
 800de96:	681a      	ldr	r2, [r3, #0]
 800de98:	4b39      	ldr	r3, [pc, #228]	; (800df80 <tcp_input+0x528>)
 800de9a:	695b      	ldr	r3, [r3, #20]
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d00f      	beq.n	800dec0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800dea0:	697b      	ldr	r3, [r7, #20]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d00d      	beq.n	800dec2 <tcp_input+0x46a>
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d009      	beq.n	800dec2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	68db      	ldr	r3, [r3, #12]
 800deb6:	617b      	str	r3, [r7, #20]
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d1d1      	bne.n	800de62 <tcp_input+0x40a>
 800debe:	e000      	b.n	800dec2 <tcp_input+0x46a>
            break;
 800dec0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d014      	beq.n	800def2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800dec8:	69bb      	ldr	r3, [r7, #24]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d00a      	beq.n	800dee4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	68da      	ldr	r2, [r3, #12]
 800ded2:	69bb      	ldr	r3, [r7, #24]
 800ded4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ded6:	4b32      	ldr	r3, [pc, #200]	; (800dfa0 <tcp_input+0x548>)
 800ded8:	681a      	ldr	r2, [r3, #0]
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800dede:	4a30      	ldr	r2, [pc, #192]	; (800dfa0 <tcp_input+0x548>)
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800dee4:	6978      	ldr	r0, [r7, #20]
 800dee6:	f000 f9ff 	bl	800e2e8 <tcp_listen_input>
      }
      pbuf_free(p);
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f7fd ff88 	bl	800be00 <pbuf_free>
      return;
 800def0:	e199      	b.n	800e226 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800def2:	69fb      	ldr	r3, [r7, #28]
 800def4:	2b00      	cmp	r3, #0
 800def6:	f000 8160 	beq.w	800e1ba <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800defa:	4b2a      	ldr	r3, [pc, #168]	; (800dfa4 <tcp_input+0x54c>)
 800defc:	2200      	movs	r2, #0
 800defe:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	891a      	ldrh	r2, [r3, #8]
 800df04:	4b27      	ldr	r3, [pc, #156]	; (800dfa4 <tcp_input+0x54c>)
 800df06:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800df08:	4a26      	ldr	r2, [pc, #152]	; (800dfa4 <tcp_input+0x54c>)
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800df0e:	4b1b      	ldr	r3, [pc, #108]	; (800df7c <tcp_input+0x524>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	4a24      	ldr	r2, [pc, #144]	; (800dfa4 <tcp_input+0x54c>)
 800df14:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800df16:	4b24      	ldr	r3, [pc, #144]	; (800dfa8 <tcp_input+0x550>)
 800df18:	2200      	movs	r2, #0
 800df1a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800df1c:	4b23      	ldr	r3, [pc, #140]	; (800dfac <tcp_input+0x554>)
 800df1e:	2200      	movs	r2, #0
 800df20:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800df22:	4b23      	ldr	r3, [pc, #140]	; (800dfb0 <tcp_input+0x558>)
 800df24:	2200      	movs	r2, #0
 800df26:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800df28:	4b22      	ldr	r3, [pc, #136]	; (800dfb4 <tcp_input+0x55c>)
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	f003 0308 	and.w	r3, r3, #8
 800df30:	2b00      	cmp	r3, #0
 800df32:	d006      	beq.n	800df42 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	7b5b      	ldrb	r3, [r3, #13]
 800df38:	f043 0301 	orr.w	r3, r3, #1
 800df3c:	b2da      	uxtb	r2, r3
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800df42:	69fb      	ldr	r3, [r7, #28]
 800df44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df46:	2b00      	cmp	r3, #0
 800df48:	d038      	beq.n	800dfbc <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800df4a:	69f8      	ldr	r0, [r7, #28]
 800df4c:	f7ff f940 	bl	800d1d0 <tcp_process_refused_data>
 800df50:	4603      	mov	r3, r0
 800df52:	f113 0f0d 	cmn.w	r3, #13
 800df56:	d007      	beq.n	800df68 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800df58:	69fb      	ldr	r3, [r7, #28]
 800df5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d02d      	beq.n	800dfbc <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800df60:	4b15      	ldr	r3, [pc, #84]	; (800dfb8 <tcp_input+0x560>)
 800df62:	881b      	ldrh	r3, [r3, #0]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d029      	beq.n	800dfbc <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800df68:	69fb      	ldr	r3, [r7, #28]
 800df6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	f040 8104 	bne.w	800e17a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800df72:	69f8      	ldr	r0, [r7, #28]
 800df74:	f003 f9cc 	bl	8011310 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800df78:	e0ff      	b.n	800e17a <tcp_input+0x722>
 800df7a:	bf00      	nop
 800df7c:	2000046c 	.word	0x2000046c
 800df80:	20004598 	.word	0x20004598
 800df84:	08018720 	.word	0x08018720
 800df88:	0801884c 	.word	0x0801884c
 800df8c:	0801876c 	.word	0x0801876c
 800df90:	20007afc 	.word	0x20007afc
 800df94:	08018878 	.word	0x08018878
 800df98:	20007b0c 	.word	0x20007b0c
 800df9c:	080188a4 	.word	0x080188a4
 800dfa0:	20007b04 	.word	0x20007b04
 800dfa4:	2000045c 	.word	0x2000045c
 800dfa8:	2000048c 	.word	0x2000048c
 800dfac:	20000489 	.word	0x20000489
 800dfb0:	20000484 	.word	0x20000484
 800dfb4:	20000488 	.word	0x20000488
 800dfb8:	20000486 	.word	0x20000486
      }
    }
    tcp_input_pcb = pcb;
 800dfbc:	4a9b      	ldr	r2, [pc, #620]	; (800e22c <tcp_input+0x7d4>)
 800dfbe:	69fb      	ldr	r3, [r7, #28]
 800dfc0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800dfc2:	69f8      	ldr	r0, [r7, #28]
 800dfc4:	f000 fb0a 	bl	800e5dc <tcp_process>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800dfcc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dfd0:	f113 0f0d 	cmn.w	r3, #13
 800dfd4:	f000 80d3 	beq.w	800e17e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800dfd8:	4b95      	ldr	r3, [pc, #596]	; (800e230 <tcp_input+0x7d8>)
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	f003 0308 	and.w	r3, r3, #8
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d015      	beq.n	800e010 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800dfe4:	69fb      	ldr	r3, [r7, #28]
 800dfe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d008      	beq.n	800e000 <tcp_input+0x5a8>
 800dfee:	69fb      	ldr	r3, [r7, #28]
 800dff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dff4:	69fa      	ldr	r2, [r7, #28]
 800dff6:	6912      	ldr	r2, [r2, #16]
 800dff8:	f06f 010d 	mvn.w	r1, #13
 800dffc:	4610      	mov	r0, r2
 800dffe:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e000:	69f9      	ldr	r1, [r7, #28]
 800e002:	488c      	ldr	r0, [pc, #560]	; (800e234 <tcp_input+0x7dc>)
 800e004:	f7ff fbb0 	bl	800d768 <tcp_pcb_remove>
        tcp_free(pcb);
 800e008:	69f8      	ldr	r0, [r7, #28]
 800e00a:	f7fe f9a9 	bl	800c360 <tcp_free>
 800e00e:	e0c1      	b.n	800e194 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800e010:	2300      	movs	r3, #0
 800e012:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e014:	4b88      	ldr	r3, [pc, #544]	; (800e238 <tcp_input+0x7e0>)
 800e016:	881b      	ldrh	r3, [r3, #0]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d01d      	beq.n	800e058 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e01c:	4b86      	ldr	r3, [pc, #536]	; (800e238 <tcp_input+0x7e0>)
 800e01e:	881b      	ldrh	r3, [r3, #0]
 800e020:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e022:	69fb      	ldr	r3, [r7, #28]
 800e024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d00a      	beq.n	800e042 <tcp_input+0x5ea>
 800e02c:	69fb      	ldr	r3, [r7, #28]
 800e02e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e032:	69fa      	ldr	r2, [r7, #28]
 800e034:	6910      	ldr	r0, [r2, #16]
 800e036:	89fa      	ldrh	r2, [r7, #14]
 800e038:	69f9      	ldr	r1, [r7, #28]
 800e03a:	4798      	blx	r3
 800e03c:	4603      	mov	r3, r0
 800e03e:	74fb      	strb	r3, [r7, #19]
 800e040:	e001      	b.n	800e046 <tcp_input+0x5ee>
 800e042:	2300      	movs	r3, #0
 800e044:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e046:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e04a:	f113 0f0d 	cmn.w	r3, #13
 800e04e:	f000 8098 	beq.w	800e182 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e052:	4b79      	ldr	r3, [pc, #484]	; (800e238 <tcp_input+0x7e0>)
 800e054:	2200      	movs	r2, #0
 800e056:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e058:	69f8      	ldr	r0, [r7, #28]
 800e05a:	f000 f905 	bl	800e268 <tcp_input_delayed_close>
 800e05e:	4603      	mov	r3, r0
 800e060:	2b00      	cmp	r3, #0
 800e062:	f040 8090 	bne.w	800e186 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e066:	4b75      	ldr	r3, [pc, #468]	; (800e23c <tcp_input+0x7e4>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d041      	beq.n	800e0f2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e06e:	69fb      	ldr	r3, [r7, #28]
 800e070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e072:	2b00      	cmp	r3, #0
 800e074:	d006      	beq.n	800e084 <tcp_input+0x62c>
 800e076:	4b72      	ldr	r3, [pc, #456]	; (800e240 <tcp_input+0x7e8>)
 800e078:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e07c:	4971      	ldr	r1, [pc, #452]	; (800e244 <tcp_input+0x7ec>)
 800e07e:	4872      	ldr	r0, [pc, #456]	; (800e248 <tcp_input+0x7f0>)
 800e080:	f008 fb44 	bl	801670c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e084:	69fb      	ldr	r3, [r7, #28]
 800e086:	8b5b      	ldrh	r3, [r3, #26]
 800e088:	f003 0310 	and.w	r3, r3, #16
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d008      	beq.n	800e0a2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e090:	4b6a      	ldr	r3, [pc, #424]	; (800e23c <tcp_input+0x7e4>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	4618      	mov	r0, r3
 800e096:	f7fd feb3 	bl	800be00 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e09a:	69f8      	ldr	r0, [r7, #28]
 800e09c:	f7fe fc40 	bl	800c920 <tcp_abort>
            goto aborted;
 800e0a0:	e078      	b.n	800e194 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e0a2:	69fb      	ldr	r3, [r7, #28]
 800e0a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d00c      	beq.n	800e0c6 <tcp_input+0x66e>
 800e0ac:	69fb      	ldr	r3, [r7, #28]
 800e0ae:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e0b2:	69fb      	ldr	r3, [r7, #28]
 800e0b4:	6918      	ldr	r0, [r3, #16]
 800e0b6:	4b61      	ldr	r3, [pc, #388]	; (800e23c <tcp_input+0x7e4>)
 800e0b8:	681a      	ldr	r2, [r3, #0]
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	69f9      	ldr	r1, [r7, #28]
 800e0be:	47a0      	blx	r4
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	74fb      	strb	r3, [r7, #19]
 800e0c4:	e008      	b.n	800e0d8 <tcp_input+0x680>
 800e0c6:	4b5d      	ldr	r3, [pc, #372]	; (800e23c <tcp_input+0x7e4>)
 800e0c8:	681a      	ldr	r2, [r3, #0]
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	69f9      	ldr	r1, [r7, #28]
 800e0ce:	2000      	movs	r0, #0
 800e0d0:	f7ff f952 	bl	800d378 <tcp_recv_null>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e0d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e0dc:	f113 0f0d 	cmn.w	r3, #13
 800e0e0:	d053      	beq.n	800e18a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e0e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d003      	beq.n	800e0f2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e0ea:	4b54      	ldr	r3, [pc, #336]	; (800e23c <tcp_input+0x7e4>)
 800e0ec:	681a      	ldr	r2, [r3, #0]
 800e0ee:	69fb      	ldr	r3, [r7, #28]
 800e0f0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e0f2:	4b4f      	ldr	r3, [pc, #316]	; (800e230 <tcp_input+0x7d8>)
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	f003 0320 	and.w	r3, r3, #32
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d030      	beq.n	800e160 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800e0fe:	69fb      	ldr	r3, [r7, #28]
 800e100:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e102:	2b00      	cmp	r3, #0
 800e104:	d009      	beq.n	800e11a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e106:	69fb      	ldr	r3, [r7, #28]
 800e108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e10a:	7b5a      	ldrb	r2, [r3, #13]
 800e10c:	69fb      	ldr	r3, [r7, #28]
 800e10e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e110:	f042 0220 	orr.w	r2, r2, #32
 800e114:	b2d2      	uxtb	r2, r2
 800e116:	735a      	strb	r2, [r3, #13]
 800e118:	e022      	b.n	800e160 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e11a:	69fb      	ldr	r3, [r7, #28]
 800e11c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e11e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e122:	d005      	beq.n	800e130 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800e124:	69fb      	ldr	r3, [r7, #28]
 800e126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e128:	3301      	adds	r3, #1
 800e12a:	b29a      	uxth	r2, r3
 800e12c:	69fb      	ldr	r3, [r7, #28]
 800e12e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e136:	2b00      	cmp	r3, #0
 800e138:	d00b      	beq.n	800e152 <tcp_input+0x6fa>
 800e13a:	69fb      	ldr	r3, [r7, #28]
 800e13c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e140:	69fb      	ldr	r3, [r7, #28]
 800e142:	6918      	ldr	r0, [r3, #16]
 800e144:	2300      	movs	r3, #0
 800e146:	2200      	movs	r2, #0
 800e148:	69f9      	ldr	r1, [r7, #28]
 800e14a:	47a0      	blx	r4
 800e14c:	4603      	mov	r3, r0
 800e14e:	74fb      	strb	r3, [r7, #19]
 800e150:	e001      	b.n	800e156 <tcp_input+0x6fe>
 800e152:	2300      	movs	r3, #0
 800e154:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e156:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e15a:	f113 0f0d 	cmn.w	r3, #13
 800e15e:	d016      	beq.n	800e18e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e160:	4b32      	ldr	r3, [pc, #200]	; (800e22c <tcp_input+0x7d4>)
 800e162:	2200      	movs	r2, #0
 800e164:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e166:	69f8      	ldr	r0, [r7, #28]
 800e168:	f000 f87e 	bl	800e268 <tcp_input_delayed_close>
 800e16c:	4603      	mov	r3, r0
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d10f      	bne.n	800e192 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e172:	69f8      	ldr	r0, [r7, #28]
 800e174:	f002 fab6 	bl	80106e4 <tcp_output>
 800e178:	e00c      	b.n	800e194 <tcp_input+0x73c>
        goto aborted;
 800e17a:	bf00      	nop
 800e17c:	e00a      	b.n	800e194 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e17e:	bf00      	nop
 800e180:	e008      	b.n	800e194 <tcp_input+0x73c>
              goto aborted;
 800e182:	bf00      	nop
 800e184:	e006      	b.n	800e194 <tcp_input+0x73c>
          goto aborted;
 800e186:	bf00      	nop
 800e188:	e004      	b.n	800e194 <tcp_input+0x73c>
            goto aborted;
 800e18a:	bf00      	nop
 800e18c:	e002      	b.n	800e194 <tcp_input+0x73c>
              goto aborted;
 800e18e:	bf00      	nop
 800e190:	e000      	b.n	800e194 <tcp_input+0x73c>
          goto aborted;
 800e192:	bf00      	nop
    tcp_input_pcb = NULL;
 800e194:	4b25      	ldr	r3, [pc, #148]	; (800e22c <tcp_input+0x7d4>)
 800e196:	2200      	movs	r2, #0
 800e198:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e19a:	4b28      	ldr	r3, [pc, #160]	; (800e23c <tcp_input+0x7e4>)
 800e19c:	2200      	movs	r2, #0
 800e19e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e1a0:	4b2a      	ldr	r3, [pc, #168]	; (800e24c <tcp_input+0x7f4>)
 800e1a2:	685b      	ldr	r3, [r3, #4]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d03d      	beq.n	800e224 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800e1a8:	4b28      	ldr	r3, [pc, #160]	; (800e24c <tcp_input+0x7f4>)
 800e1aa:	685b      	ldr	r3, [r3, #4]
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f7fd fe27 	bl	800be00 <pbuf_free>
      inseg.p = NULL;
 800e1b2:	4b26      	ldr	r3, [pc, #152]	; (800e24c <tcp_input+0x7f4>)
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e1b8:	e034      	b.n	800e224 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e1ba:	4b25      	ldr	r3, [pc, #148]	; (800e250 <tcp_input+0x7f8>)
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	899b      	ldrh	r3, [r3, #12]
 800e1c0:	b29b      	uxth	r3, r3
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f7fc fb7b 	bl	800a8be <lwip_htons>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	b2db      	uxtb	r3, r3
 800e1cc:	f003 0304 	and.w	r3, r3, #4
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d118      	bne.n	800e206 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1d4:	4b1f      	ldr	r3, [pc, #124]	; (800e254 <tcp_input+0x7fc>)
 800e1d6:	6819      	ldr	r1, [r3, #0]
 800e1d8:	4b1f      	ldr	r3, [pc, #124]	; (800e258 <tcp_input+0x800>)
 800e1da:	881b      	ldrh	r3, [r3, #0]
 800e1dc:	461a      	mov	r2, r3
 800e1de:	4b1f      	ldr	r3, [pc, #124]	; (800e25c <tcp_input+0x804>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e1e4:	4b1a      	ldr	r3, [pc, #104]	; (800e250 <tcp_input+0x7f8>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1e8:	885b      	ldrh	r3, [r3, #2]
 800e1ea:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e1ec:	4a18      	ldr	r2, [pc, #96]	; (800e250 <tcp_input+0x7f8>)
 800e1ee:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1f0:	8812      	ldrh	r2, [r2, #0]
 800e1f2:	b292      	uxth	r2, r2
 800e1f4:	9202      	str	r2, [sp, #8]
 800e1f6:	9301      	str	r3, [sp, #4]
 800e1f8:	4b19      	ldr	r3, [pc, #100]	; (800e260 <tcp_input+0x808>)
 800e1fa:	9300      	str	r3, [sp, #0]
 800e1fc:	4b19      	ldr	r3, [pc, #100]	; (800e264 <tcp_input+0x80c>)
 800e1fe:	4602      	mov	r2, r0
 800e200:	2000      	movs	r0, #0
 800e202:	f003 f833 	bl	801126c <tcp_rst>
    pbuf_free(p);
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f7fd fdfa 	bl	800be00 <pbuf_free>
  return;
 800e20c:	e00a      	b.n	800e224 <tcp_input+0x7cc>
    goto dropped;
 800e20e:	bf00      	nop
 800e210:	e004      	b.n	800e21c <tcp_input+0x7c4>
dropped:
 800e212:	bf00      	nop
 800e214:	e002      	b.n	800e21c <tcp_input+0x7c4>
      goto dropped;
 800e216:	bf00      	nop
 800e218:	e000      	b.n	800e21c <tcp_input+0x7c4>
      goto dropped;
 800e21a:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f7fd fdef 	bl	800be00 <pbuf_free>
 800e222:	e000      	b.n	800e226 <tcp_input+0x7ce>
  return;
 800e224:	bf00      	nop
}
 800e226:	3724      	adds	r7, #36	; 0x24
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd90      	pop	{r4, r7, pc}
 800e22c:	20007b10 	.word	0x20007b10
 800e230:	20000489 	.word	0x20000489
 800e234:	20007afc 	.word	0x20007afc
 800e238:	20000484 	.word	0x20000484
 800e23c:	2000048c 	.word	0x2000048c
 800e240:	08018720 	.word	0x08018720
 800e244:	080188d4 	.word	0x080188d4
 800e248:	0801876c 	.word	0x0801876c
 800e24c:	2000045c 	.word	0x2000045c
 800e250:	2000046c 	.word	0x2000046c
 800e254:	20000480 	.word	0x20000480
 800e258:	20000486 	.word	0x20000486
 800e25c:	2000047c 	.word	0x2000047c
 800e260:	200045a8 	.word	0x200045a8
 800e264:	200045ac 	.word	0x200045ac

0800e268 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b082      	sub	sp, #8
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d106      	bne.n	800e284 <tcp_input_delayed_close+0x1c>
 800e276:	4b17      	ldr	r3, [pc, #92]	; (800e2d4 <tcp_input_delayed_close+0x6c>)
 800e278:	f240 225a 	movw	r2, #602	; 0x25a
 800e27c:	4916      	ldr	r1, [pc, #88]	; (800e2d8 <tcp_input_delayed_close+0x70>)
 800e27e:	4817      	ldr	r0, [pc, #92]	; (800e2dc <tcp_input_delayed_close+0x74>)
 800e280:	f008 fa44 	bl	801670c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e284:	4b16      	ldr	r3, [pc, #88]	; (800e2e0 <tcp_input_delayed_close+0x78>)
 800e286:	781b      	ldrb	r3, [r3, #0]
 800e288:	f003 0310 	and.w	r3, r3, #16
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d01c      	beq.n	800e2ca <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	8b5b      	ldrh	r3, [r3, #26]
 800e294:	f003 0310 	and.w	r3, r3, #16
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d10d      	bne.n	800e2b8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d008      	beq.n	800e2b8 <tcp_input_delayed_close+0x50>
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2ac:	687a      	ldr	r2, [r7, #4]
 800e2ae:	6912      	ldr	r2, [r2, #16]
 800e2b0:	f06f 010e 	mvn.w	r1, #14
 800e2b4:	4610      	mov	r0, r2
 800e2b6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e2b8:	6879      	ldr	r1, [r7, #4]
 800e2ba:	480a      	ldr	r0, [pc, #40]	; (800e2e4 <tcp_input_delayed_close+0x7c>)
 800e2bc:	f7ff fa54 	bl	800d768 <tcp_pcb_remove>
    tcp_free(pcb);
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f7fe f84d 	bl	800c360 <tcp_free>
    return 1;
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	e000      	b.n	800e2cc <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e2ca:	2300      	movs	r3, #0
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3708      	adds	r7, #8
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}
 800e2d4:	08018720 	.word	0x08018720
 800e2d8:	080188f0 	.word	0x080188f0
 800e2dc:	0801876c 	.word	0x0801876c
 800e2e0:	20000489 	.word	0x20000489
 800e2e4:	20007afc 	.word	0x20007afc

0800e2e8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e2e8:	b590      	push	{r4, r7, lr}
 800e2ea:	b08b      	sub	sp, #44	; 0x2c
 800e2ec:	af04      	add	r7, sp, #16
 800e2ee:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e2f0:	4b6f      	ldr	r3, [pc, #444]	; (800e4b0 <tcp_listen_input+0x1c8>)
 800e2f2:	781b      	ldrb	r3, [r3, #0]
 800e2f4:	f003 0304 	and.w	r3, r3, #4
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	f040 80d3 	bne.w	800e4a4 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d106      	bne.n	800e312 <tcp_listen_input+0x2a>
 800e304:	4b6b      	ldr	r3, [pc, #428]	; (800e4b4 <tcp_listen_input+0x1cc>)
 800e306:	f240 2281 	movw	r2, #641	; 0x281
 800e30a:	496b      	ldr	r1, [pc, #428]	; (800e4b8 <tcp_listen_input+0x1d0>)
 800e30c:	486b      	ldr	r0, [pc, #428]	; (800e4bc <tcp_listen_input+0x1d4>)
 800e30e:	f008 f9fd 	bl	801670c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e312:	4b67      	ldr	r3, [pc, #412]	; (800e4b0 <tcp_listen_input+0x1c8>)
 800e314:	781b      	ldrb	r3, [r3, #0]
 800e316:	f003 0310 	and.w	r3, r3, #16
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d019      	beq.n	800e352 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e31e:	4b68      	ldr	r3, [pc, #416]	; (800e4c0 <tcp_listen_input+0x1d8>)
 800e320:	6819      	ldr	r1, [r3, #0]
 800e322:	4b68      	ldr	r3, [pc, #416]	; (800e4c4 <tcp_listen_input+0x1dc>)
 800e324:	881b      	ldrh	r3, [r3, #0]
 800e326:	461a      	mov	r2, r3
 800e328:	4b67      	ldr	r3, [pc, #412]	; (800e4c8 <tcp_listen_input+0x1e0>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e32e:	4b67      	ldr	r3, [pc, #412]	; (800e4cc <tcp_listen_input+0x1e4>)
 800e330:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e332:	885b      	ldrh	r3, [r3, #2]
 800e334:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e336:	4a65      	ldr	r2, [pc, #404]	; (800e4cc <tcp_listen_input+0x1e4>)
 800e338:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e33a:	8812      	ldrh	r2, [r2, #0]
 800e33c:	b292      	uxth	r2, r2
 800e33e:	9202      	str	r2, [sp, #8]
 800e340:	9301      	str	r3, [sp, #4]
 800e342:	4b63      	ldr	r3, [pc, #396]	; (800e4d0 <tcp_listen_input+0x1e8>)
 800e344:	9300      	str	r3, [sp, #0]
 800e346:	4b63      	ldr	r3, [pc, #396]	; (800e4d4 <tcp_listen_input+0x1ec>)
 800e348:	4602      	mov	r2, r0
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f002 ff8e 	bl	801126c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e350:	e0aa      	b.n	800e4a8 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800e352:	4b57      	ldr	r3, [pc, #348]	; (800e4b0 <tcp_listen_input+0x1c8>)
 800e354:	781b      	ldrb	r3, [r3, #0]
 800e356:	f003 0302 	and.w	r3, r3, #2
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	f000 80a4 	beq.w	800e4a8 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	7d5b      	ldrb	r3, [r3, #21]
 800e364:	4618      	mov	r0, r3
 800e366:	f7ff f92b 	bl	800d5c0 <tcp_alloc>
 800e36a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d111      	bne.n	800e396 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	699b      	ldr	r3, [r3, #24]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d00a      	beq.n	800e390 <tcp_listen_input+0xa8>
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	699b      	ldr	r3, [r3, #24]
 800e37e:	687a      	ldr	r2, [r7, #4]
 800e380:	6910      	ldr	r0, [r2, #16]
 800e382:	f04f 32ff 	mov.w	r2, #4294967295
 800e386:	2100      	movs	r1, #0
 800e388:	4798      	blx	r3
 800e38a:	4603      	mov	r3, r0
 800e38c:	73bb      	strb	r3, [r7, #14]
      return;
 800e38e:	e08c      	b.n	800e4aa <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e390:	23f0      	movs	r3, #240	; 0xf0
 800e392:	73bb      	strb	r3, [r7, #14]
      return;
 800e394:	e089      	b.n	800e4aa <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e396:	4b50      	ldr	r3, [pc, #320]	; (800e4d8 <tcp_listen_input+0x1f0>)
 800e398:	695a      	ldr	r2, [r3, #20]
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e39e:	4b4e      	ldr	r3, [pc, #312]	; (800e4d8 <tcp_listen_input+0x1f0>)
 800e3a0:	691a      	ldr	r2, [r3, #16]
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	8ada      	ldrh	r2, [r3, #22]
 800e3aa:	697b      	ldr	r3, [r7, #20]
 800e3ac:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e3ae:	4b47      	ldr	r3, [pc, #284]	; (800e4cc <tcp_listen_input+0x1e4>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	881b      	ldrh	r3, [r3, #0]
 800e3b4:	b29a      	uxth	r2, r3
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	2203      	movs	r2, #3
 800e3be:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e3c0:	4b41      	ldr	r3, [pc, #260]	; (800e4c8 <tcp_listen_input+0x1e0>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	1c5a      	adds	r2, r3, #1
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3ce:	697b      	ldr	r3, [r7, #20]
 800e3d0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e3d2:	6978      	ldr	r0, [r7, #20]
 800e3d4:	f7ff fa5c 	bl	800d890 <tcp_next_iss>
 800e3d8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	693a      	ldr	r2, [r7, #16]
 800e3de:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	693a      	ldr	r2, [r7, #16]
 800e3e4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	693a      	ldr	r2, [r7, #16]
 800e3ea:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	693a      	ldr	r2, [r7, #16]
 800e3f0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e3f2:	4b35      	ldr	r3, [pc, #212]	; (800e4c8 <tcp_listen_input+0x1e0>)
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	1e5a      	subs	r2, r3, #1
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	691a      	ldr	r2, [r3, #16]
 800e400:	697b      	ldr	r3, [r7, #20]
 800e402:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	687a      	ldr	r2, [r7, #4]
 800e408:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	7a5b      	ldrb	r3, [r3, #9]
 800e40e:	f003 030c 	and.w	r3, r3, #12
 800e412:	b2da      	uxtb	r2, r3
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	7a1a      	ldrb	r2, [r3, #8]
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e420:	4b2e      	ldr	r3, [pc, #184]	; (800e4dc <tcp_listen_input+0x1f4>)
 800e422:	681a      	ldr	r2, [r3, #0]
 800e424:	697b      	ldr	r3, [r7, #20]
 800e426:	60da      	str	r2, [r3, #12]
 800e428:	4a2c      	ldr	r2, [pc, #176]	; (800e4dc <tcp_listen_input+0x1f4>)
 800e42a:	697b      	ldr	r3, [r7, #20]
 800e42c:	6013      	str	r3, [r2, #0]
 800e42e:	f003 f8df 	bl	80115f0 <tcp_timer_needed>
 800e432:	4b2b      	ldr	r3, [pc, #172]	; (800e4e0 <tcp_listen_input+0x1f8>)
 800e434:	2201      	movs	r2, #1
 800e436:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e438:	6978      	ldr	r0, [r7, #20]
 800e43a:	f001 fd8f 	bl	800ff5c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e43e:	4b23      	ldr	r3, [pc, #140]	; (800e4cc <tcp_listen_input+0x1e4>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	89db      	ldrh	r3, [r3, #14]
 800e444:	b29a      	uxth	r2, r3
 800e446:	697b      	ldr	r3, [r7, #20]
 800e448:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e44c:	697b      	ldr	r3, [r7, #20]
 800e44e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	3304      	adds	r3, #4
 800e460:	4618      	mov	r0, r3
 800e462:	f006 fe57 	bl	8015114 <ip4_route>
 800e466:	4601      	mov	r1, r0
 800e468:	697b      	ldr	r3, [r7, #20]
 800e46a:	3304      	adds	r3, #4
 800e46c:	461a      	mov	r2, r3
 800e46e:	4620      	mov	r0, r4
 800e470:	f7ff fa34 	bl	800d8dc <tcp_eff_send_mss_netif>
 800e474:	4603      	mov	r3, r0
 800e476:	461a      	mov	r2, r3
 800e478:	697b      	ldr	r3, [r7, #20]
 800e47a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e47c:	2112      	movs	r1, #18
 800e47e:	6978      	ldr	r0, [r7, #20]
 800e480:	f002 f842 	bl	8010508 <tcp_enqueue_flags>
 800e484:	4603      	mov	r3, r0
 800e486:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d004      	beq.n	800e49a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e490:	2100      	movs	r1, #0
 800e492:	6978      	ldr	r0, [r7, #20]
 800e494:	f7fe f986 	bl	800c7a4 <tcp_abandon>
      return;
 800e498:	e007      	b.n	800e4aa <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800e49a:	6978      	ldr	r0, [r7, #20]
 800e49c:	f002 f922 	bl	80106e4 <tcp_output>
  return;
 800e4a0:	bf00      	nop
 800e4a2:	e001      	b.n	800e4a8 <tcp_listen_input+0x1c0>
    return;
 800e4a4:	bf00      	nop
 800e4a6:	e000      	b.n	800e4aa <tcp_listen_input+0x1c2>
  return;
 800e4a8:	bf00      	nop
}
 800e4aa:	371c      	adds	r7, #28
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd90      	pop	{r4, r7, pc}
 800e4b0:	20000488 	.word	0x20000488
 800e4b4:	08018720 	.word	0x08018720
 800e4b8:	08018918 	.word	0x08018918
 800e4bc:	0801876c 	.word	0x0801876c
 800e4c0:	20000480 	.word	0x20000480
 800e4c4:	20000486 	.word	0x20000486
 800e4c8:	2000047c 	.word	0x2000047c
 800e4cc:	2000046c 	.word	0x2000046c
 800e4d0:	200045a8 	.word	0x200045a8
 800e4d4:	200045ac 	.word	0x200045ac
 800e4d8:	20004598 	.word	0x20004598
 800e4dc:	20007afc 	.word	0x20007afc
 800e4e0:	20007af8 	.word	0x20007af8

0800e4e4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b086      	sub	sp, #24
 800e4e8:	af04      	add	r7, sp, #16
 800e4ea:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e4ec:	4b30      	ldr	r3, [pc, #192]	; (800e5b0 <tcp_timewait_input+0xcc>)
 800e4ee:	781b      	ldrb	r3, [r3, #0]
 800e4f0:	f003 0304 	and.w	r3, r3, #4
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d154      	bne.n	800e5a2 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d106      	bne.n	800e50c <tcp_timewait_input+0x28>
 800e4fe:	4b2d      	ldr	r3, [pc, #180]	; (800e5b4 <tcp_timewait_input+0xd0>)
 800e500:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e504:	492c      	ldr	r1, [pc, #176]	; (800e5b8 <tcp_timewait_input+0xd4>)
 800e506:	482d      	ldr	r0, [pc, #180]	; (800e5bc <tcp_timewait_input+0xd8>)
 800e508:	f008 f900 	bl	801670c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e50c:	4b28      	ldr	r3, [pc, #160]	; (800e5b0 <tcp_timewait_input+0xcc>)
 800e50e:	781b      	ldrb	r3, [r3, #0]
 800e510:	f003 0302 	and.w	r3, r3, #2
 800e514:	2b00      	cmp	r3, #0
 800e516:	d02a      	beq.n	800e56e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e518:	4b29      	ldr	r3, [pc, #164]	; (800e5c0 <tcp_timewait_input+0xdc>)
 800e51a:	681a      	ldr	r2, [r3, #0]
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e520:	1ad3      	subs	r3, r2, r3
 800e522:	2b00      	cmp	r3, #0
 800e524:	db2d      	blt.n	800e582 <tcp_timewait_input+0x9e>
 800e526:	4b26      	ldr	r3, [pc, #152]	; (800e5c0 <tcp_timewait_input+0xdc>)
 800e528:	681a      	ldr	r2, [r3, #0]
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e52e:	6879      	ldr	r1, [r7, #4]
 800e530:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e532:	440b      	add	r3, r1
 800e534:	1ad3      	subs	r3, r2, r3
 800e536:	2b00      	cmp	r3, #0
 800e538:	dc23      	bgt.n	800e582 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e53a:	4b22      	ldr	r3, [pc, #136]	; (800e5c4 <tcp_timewait_input+0xe0>)
 800e53c:	6819      	ldr	r1, [r3, #0]
 800e53e:	4b22      	ldr	r3, [pc, #136]	; (800e5c8 <tcp_timewait_input+0xe4>)
 800e540:	881b      	ldrh	r3, [r3, #0]
 800e542:	461a      	mov	r2, r3
 800e544:	4b1e      	ldr	r3, [pc, #120]	; (800e5c0 <tcp_timewait_input+0xdc>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e54a:	4b20      	ldr	r3, [pc, #128]	; (800e5cc <tcp_timewait_input+0xe8>)
 800e54c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e54e:	885b      	ldrh	r3, [r3, #2]
 800e550:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e552:	4a1e      	ldr	r2, [pc, #120]	; (800e5cc <tcp_timewait_input+0xe8>)
 800e554:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e556:	8812      	ldrh	r2, [r2, #0]
 800e558:	b292      	uxth	r2, r2
 800e55a:	9202      	str	r2, [sp, #8]
 800e55c:	9301      	str	r3, [sp, #4]
 800e55e:	4b1c      	ldr	r3, [pc, #112]	; (800e5d0 <tcp_timewait_input+0xec>)
 800e560:	9300      	str	r3, [sp, #0]
 800e562:	4b1c      	ldr	r3, [pc, #112]	; (800e5d4 <tcp_timewait_input+0xf0>)
 800e564:	4602      	mov	r2, r0
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f002 fe80 	bl	801126c <tcp_rst>
      return;
 800e56c:	e01c      	b.n	800e5a8 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800e56e:	4b10      	ldr	r3, [pc, #64]	; (800e5b0 <tcp_timewait_input+0xcc>)
 800e570:	781b      	ldrb	r3, [r3, #0]
 800e572:	f003 0301 	and.w	r3, r3, #1
 800e576:	2b00      	cmp	r3, #0
 800e578:	d003      	beq.n	800e582 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e57a:	4b17      	ldr	r3, [pc, #92]	; (800e5d8 <tcp_timewait_input+0xf4>)
 800e57c:	681a      	ldr	r2, [r3, #0]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e582:	4b11      	ldr	r3, [pc, #68]	; (800e5c8 <tcp_timewait_input+0xe4>)
 800e584:	881b      	ldrh	r3, [r3, #0]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d00d      	beq.n	800e5a6 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	8b5b      	ldrh	r3, [r3, #26]
 800e58e:	f043 0302 	orr.w	r3, r3, #2
 800e592:	b29a      	uxth	r2, r3
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f002 f8a3 	bl	80106e4 <tcp_output>
  }
  return;
 800e59e:	bf00      	nop
 800e5a0:	e001      	b.n	800e5a6 <tcp_timewait_input+0xc2>
    return;
 800e5a2:	bf00      	nop
 800e5a4:	e000      	b.n	800e5a8 <tcp_timewait_input+0xc4>
  return;
 800e5a6:	bf00      	nop
}
 800e5a8:	3708      	adds	r7, #8
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bd80      	pop	{r7, pc}
 800e5ae:	bf00      	nop
 800e5b0:	20000488 	.word	0x20000488
 800e5b4:	08018720 	.word	0x08018720
 800e5b8:	08018938 	.word	0x08018938
 800e5bc:	0801876c 	.word	0x0801876c
 800e5c0:	2000047c 	.word	0x2000047c
 800e5c4:	20000480 	.word	0x20000480
 800e5c8:	20000486 	.word	0x20000486
 800e5cc:	2000046c 	.word	0x2000046c
 800e5d0:	200045a8 	.word	0x200045a8
 800e5d4:	200045ac 	.word	0x200045ac
 800e5d8:	20007b00 	.word	0x20007b00

0800e5dc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e5dc:	b590      	push	{r4, r7, lr}
 800e5de:	b08d      	sub	sp, #52	; 0x34
 800e5e0:	af04      	add	r7, sp, #16
 800e5e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d106      	bne.n	800e600 <tcp_process+0x24>
 800e5f2:	4ba5      	ldr	r3, [pc, #660]	; (800e888 <tcp_process+0x2ac>)
 800e5f4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e5f8:	49a4      	ldr	r1, [pc, #656]	; (800e88c <tcp_process+0x2b0>)
 800e5fa:	48a5      	ldr	r0, [pc, #660]	; (800e890 <tcp_process+0x2b4>)
 800e5fc:	f008 f886 	bl	801670c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e600:	4ba4      	ldr	r3, [pc, #656]	; (800e894 <tcp_process+0x2b8>)
 800e602:	781b      	ldrb	r3, [r3, #0]
 800e604:	f003 0304 	and.w	r3, r3, #4
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d04e      	beq.n	800e6aa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	7d1b      	ldrb	r3, [r3, #20]
 800e610:	2b02      	cmp	r3, #2
 800e612:	d108      	bne.n	800e626 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e618:	4b9f      	ldr	r3, [pc, #636]	; (800e898 <tcp_process+0x2bc>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	429a      	cmp	r2, r3
 800e61e:	d123      	bne.n	800e668 <tcp_process+0x8c>
        acceptable = 1;
 800e620:	2301      	movs	r3, #1
 800e622:	76fb      	strb	r3, [r7, #27]
 800e624:	e020      	b.n	800e668 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e62a:	4b9c      	ldr	r3, [pc, #624]	; (800e89c <tcp_process+0x2c0>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	429a      	cmp	r2, r3
 800e630:	d102      	bne.n	800e638 <tcp_process+0x5c>
        acceptable = 1;
 800e632:	2301      	movs	r3, #1
 800e634:	76fb      	strb	r3, [r7, #27]
 800e636:	e017      	b.n	800e668 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e638:	4b98      	ldr	r3, [pc, #608]	; (800e89c <tcp_process+0x2c0>)
 800e63a:	681a      	ldr	r2, [r3, #0]
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e640:	1ad3      	subs	r3, r2, r3
 800e642:	2b00      	cmp	r3, #0
 800e644:	db10      	blt.n	800e668 <tcp_process+0x8c>
 800e646:	4b95      	ldr	r3, [pc, #596]	; (800e89c <tcp_process+0x2c0>)
 800e648:	681a      	ldr	r2, [r3, #0]
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e64e:	6879      	ldr	r1, [r7, #4]
 800e650:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e652:	440b      	add	r3, r1
 800e654:	1ad3      	subs	r3, r2, r3
 800e656:	2b00      	cmp	r3, #0
 800e658:	dc06      	bgt.n	800e668 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	8b5b      	ldrh	r3, [r3, #26]
 800e65e:	f043 0302 	orr.w	r3, r3, #2
 800e662:	b29a      	uxth	r2, r3
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e668:	7efb      	ldrb	r3, [r7, #27]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d01b      	beq.n	800e6a6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	7d1b      	ldrb	r3, [r3, #20]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d106      	bne.n	800e684 <tcp_process+0xa8>
 800e676:	4b84      	ldr	r3, [pc, #528]	; (800e888 <tcp_process+0x2ac>)
 800e678:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e67c:	4988      	ldr	r1, [pc, #544]	; (800e8a0 <tcp_process+0x2c4>)
 800e67e:	4884      	ldr	r0, [pc, #528]	; (800e890 <tcp_process+0x2b4>)
 800e680:	f008 f844 	bl	801670c <iprintf>
      recv_flags |= TF_RESET;
 800e684:	4b87      	ldr	r3, [pc, #540]	; (800e8a4 <tcp_process+0x2c8>)
 800e686:	781b      	ldrb	r3, [r3, #0]
 800e688:	f043 0308 	orr.w	r3, r3, #8
 800e68c:	b2da      	uxtb	r2, r3
 800e68e:	4b85      	ldr	r3, [pc, #532]	; (800e8a4 <tcp_process+0x2c8>)
 800e690:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	8b5b      	ldrh	r3, [r3, #26]
 800e696:	f023 0301 	bic.w	r3, r3, #1
 800e69a:	b29a      	uxth	r2, r3
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e6a0:	f06f 030d 	mvn.w	r3, #13
 800e6a4:	e37a      	b.n	800ed9c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	e378      	b.n	800ed9c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e6aa:	4b7a      	ldr	r3, [pc, #488]	; (800e894 <tcp_process+0x2b8>)
 800e6ac:	781b      	ldrb	r3, [r3, #0]
 800e6ae:	f003 0302 	and.w	r3, r3, #2
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d010      	beq.n	800e6d8 <tcp_process+0xfc>
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	7d1b      	ldrb	r3, [r3, #20]
 800e6ba:	2b02      	cmp	r3, #2
 800e6bc:	d00c      	beq.n	800e6d8 <tcp_process+0xfc>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	7d1b      	ldrb	r3, [r3, #20]
 800e6c2:	2b03      	cmp	r3, #3
 800e6c4:	d008      	beq.n	800e6d8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	8b5b      	ldrh	r3, [r3, #26]
 800e6ca:	f043 0302 	orr.w	r3, r3, #2
 800e6ce:	b29a      	uxth	r2, r3
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	e361      	b.n	800ed9c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	8b5b      	ldrh	r3, [r3, #26]
 800e6dc:	f003 0310 	and.w	r3, r3, #16
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d103      	bne.n	800e6ec <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e6e4:	4b70      	ldr	r3, [pc, #448]	; (800e8a8 <tcp_process+0x2cc>)
 800e6e6:	681a      	ldr	r2, [r3, #0]
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f001 fc2d 	bl	800ff5c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	7d1b      	ldrb	r3, [r3, #20]
 800e706:	3b02      	subs	r3, #2
 800e708:	2b07      	cmp	r3, #7
 800e70a:	f200 8337 	bhi.w	800ed7c <tcp_process+0x7a0>
 800e70e:	a201      	add	r2, pc, #4	; (adr r2, 800e714 <tcp_process+0x138>)
 800e710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e714:	0800e735 	.word	0x0800e735
 800e718:	0800e965 	.word	0x0800e965
 800e71c:	0800eadd 	.word	0x0800eadd
 800e720:	0800eb07 	.word	0x0800eb07
 800e724:	0800ec2b 	.word	0x0800ec2b
 800e728:	0800eadd 	.word	0x0800eadd
 800e72c:	0800ecb7 	.word	0x0800ecb7
 800e730:	0800ed47 	.word	0x0800ed47
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e734:	4b57      	ldr	r3, [pc, #348]	; (800e894 <tcp_process+0x2b8>)
 800e736:	781b      	ldrb	r3, [r3, #0]
 800e738:	f003 0310 	and.w	r3, r3, #16
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	f000 80e4 	beq.w	800e90a <tcp_process+0x32e>
 800e742:	4b54      	ldr	r3, [pc, #336]	; (800e894 <tcp_process+0x2b8>)
 800e744:	781b      	ldrb	r3, [r3, #0]
 800e746:	f003 0302 	and.w	r3, r3, #2
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	f000 80dd 	beq.w	800e90a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e754:	1c5a      	adds	r2, r3, #1
 800e756:	4b50      	ldr	r3, [pc, #320]	; (800e898 <tcp_process+0x2bc>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	429a      	cmp	r2, r3
 800e75c:	f040 80d5 	bne.w	800e90a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e760:	4b4e      	ldr	r3, [pc, #312]	; (800e89c <tcp_process+0x2c0>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	1c5a      	adds	r2, r3, #1
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e772:	4b49      	ldr	r3, [pc, #292]	; (800e898 <tcp_process+0x2bc>)
 800e774:	681a      	ldr	r2, [r3, #0]
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e77a:	4b4c      	ldr	r3, [pc, #304]	; (800e8ac <tcp_process+0x2d0>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	89db      	ldrh	r3, [r3, #14]
 800e780:	b29a      	uxth	r2, r3
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e794:	4b41      	ldr	r3, [pc, #260]	; (800e89c <tcp_process+0x2c0>)
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	1e5a      	subs	r2, r3, #1
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2204      	movs	r2, #4
 800e7a2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	3304      	adds	r3, #4
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f006 fcb1 	bl	8015114 <ip4_route>
 800e7b2:	4601      	mov	r1, r0
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	3304      	adds	r3, #4
 800e7b8:	461a      	mov	r2, r3
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	f7ff f88e 	bl	800d8dc <tcp_eff_send_mss_netif>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	461a      	mov	r2, r3
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e7cc:	009a      	lsls	r2, r3, #2
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e7d2:	005b      	lsls	r3, r3, #1
 800e7d4:	f241 111c 	movw	r1, #4380	; 0x111c
 800e7d8:	428b      	cmp	r3, r1
 800e7da:	bf38      	it	cc
 800e7dc:	460b      	movcc	r3, r1
 800e7de:	429a      	cmp	r2, r3
 800e7e0:	d204      	bcs.n	800e7ec <tcp_process+0x210>
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e7e6:	009b      	lsls	r3, r3, #2
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	e00d      	b.n	800e808 <tcp_process+0x22c>
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e7f0:	005b      	lsls	r3, r3, #1
 800e7f2:	f241 121c 	movw	r2, #4380	; 0x111c
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d904      	bls.n	800e804 <tcp_process+0x228>
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e7fe:	005b      	lsls	r3, r3, #1
 800e800:	b29b      	uxth	r3, r3
 800e802:	e001      	b.n	800e808 <tcp_process+0x22c>
 800e804:	f241 131c 	movw	r3, #4380	; 0x111c
 800e808:	687a      	ldr	r2, [r7, #4]
 800e80a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e814:	2b00      	cmp	r3, #0
 800e816:	d106      	bne.n	800e826 <tcp_process+0x24a>
 800e818:	4b1b      	ldr	r3, [pc, #108]	; (800e888 <tcp_process+0x2ac>)
 800e81a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e81e:	4924      	ldr	r1, [pc, #144]	; (800e8b0 <tcp_process+0x2d4>)
 800e820:	481b      	ldr	r0, [pc, #108]	; (800e890 <tcp_process+0x2b4>)
 800e822:	f007 ff73 	bl	801670c <iprintf>
        --pcb->snd_queuelen;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e82c:	3b01      	subs	r3, #1
 800e82e:	b29a      	uxth	r2, r3
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e83a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e83c:	69fb      	ldr	r3, [r7, #28]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d111      	bne.n	800e866 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e846:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e848:	69fb      	ldr	r3, [r7, #28]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d106      	bne.n	800e85c <tcp_process+0x280>
 800e84e:	4b0e      	ldr	r3, [pc, #56]	; (800e888 <tcp_process+0x2ac>)
 800e850:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e854:	4917      	ldr	r1, [pc, #92]	; (800e8b4 <tcp_process+0x2d8>)
 800e856:	480e      	ldr	r0, [pc, #56]	; (800e890 <tcp_process+0x2b4>)
 800e858:	f007 ff58 	bl	801670c <iprintf>
          pcb->unsent = rseg->next;
 800e85c:	69fb      	ldr	r3, [r7, #28]
 800e85e:	681a      	ldr	r2, [r3, #0]
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	66da      	str	r2, [r3, #108]	; 0x6c
 800e864:	e003      	b.n	800e86e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800e866:	69fb      	ldr	r3, [r7, #28]
 800e868:	681a      	ldr	r2, [r3, #0]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e86e:	69f8      	ldr	r0, [r7, #28]
 800e870:	f7fe fd3e 	bl	800d2f0 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d11d      	bne.n	800e8b8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e882:	861a      	strh	r2, [r3, #48]	; 0x30
 800e884:	e01f      	b.n	800e8c6 <tcp_process+0x2ea>
 800e886:	bf00      	nop
 800e888:	08018720 	.word	0x08018720
 800e88c:	08018958 	.word	0x08018958
 800e890:	0801876c 	.word	0x0801876c
 800e894:	20000488 	.word	0x20000488
 800e898:	20000480 	.word	0x20000480
 800e89c:	2000047c 	.word	0x2000047c
 800e8a0:	08018974 	.word	0x08018974
 800e8a4:	20000489 	.word	0x20000489
 800e8a8:	20007b00 	.word	0x20007b00
 800e8ac:	2000046c 	.word	0x2000046c
 800e8b0:	08018994 	.word	0x08018994
 800e8b4:	080189ac 	.word	0x080189ac
        } else {
          pcb->rtime = 0;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d00a      	beq.n	800e8e6 <tcp_process+0x30a>
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8d6:	687a      	ldr	r2, [r7, #4]
 800e8d8:	6910      	ldr	r0, [r2, #16]
 800e8da:	2200      	movs	r2, #0
 800e8dc:	6879      	ldr	r1, [r7, #4]
 800e8de:	4798      	blx	r3
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	76bb      	strb	r3, [r7, #26]
 800e8e4:	e001      	b.n	800e8ea <tcp_process+0x30e>
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e8ea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e8ee:	f113 0f0d 	cmn.w	r3, #13
 800e8f2:	d102      	bne.n	800e8fa <tcp_process+0x31e>
          return ERR_ABRT;
 800e8f4:	f06f 030c 	mvn.w	r3, #12
 800e8f8:	e250      	b.n	800ed9c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	8b5b      	ldrh	r3, [r3, #26]
 800e8fe:	f043 0302 	orr.w	r3, r3, #2
 800e902:	b29a      	uxth	r2, r3
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e908:	e23a      	b.n	800ed80 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e90a:	4b9d      	ldr	r3, [pc, #628]	; (800eb80 <tcp_process+0x5a4>)
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	f003 0310 	and.w	r3, r3, #16
 800e912:	2b00      	cmp	r3, #0
 800e914:	f000 8234 	beq.w	800ed80 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e918:	4b9a      	ldr	r3, [pc, #616]	; (800eb84 <tcp_process+0x5a8>)
 800e91a:	6819      	ldr	r1, [r3, #0]
 800e91c:	4b9a      	ldr	r3, [pc, #616]	; (800eb88 <tcp_process+0x5ac>)
 800e91e:	881b      	ldrh	r3, [r3, #0]
 800e920:	461a      	mov	r2, r3
 800e922:	4b9a      	ldr	r3, [pc, #616]	; (800eb8c <tcp_process+0x5b0>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e928:	4b99      	ldr	r3, [pc, #612]	; (800eb90 <tcp_process+0x5b4>)
 800e92a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e92c:	885b      	ldrh	r3, [r3, #2]
 800e92e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e930:	4a97      	ldr	r2, [pc, #604]	; (800eb90 <tcp_process+0x5b4>)
 800e932:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e934:	8812      	ldrh	r2, [r2, #0]
 800e936:	b292      	uxth	r2, r2
 800e938:	9202      	str	r2, [sp, #8]
 800e93a:	9301      	str	r3, [sp, #4]
 800e93c:	4b95      	ldr	r3, [pc, #596]	; (800eb94 <tcp_process+0x5b8>)
 800e93e:	9300      	str	r3, [sp, #0]
 800e940:	4b95      	ldr	r3, [pc, #596]	; (800eb98 <tcp_process+0x5bc>)
 800e942:	4602      	mov	r2, r0
 800e944:	6878      	ldr	r0, [r7, #4]
 800e946:	f002 fc91 	bl	801126c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e950:	2b05      	cmp	r3, #5
 800e952:	f200 8215 	bhi.w	800ed80 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2200      	movs	r2, #0
 800e95a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f002 fa51 	bl	8010e04 <tcp_rexmit_rto>
      break;
 800e962:	e20d      	b.n	800ed80 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e964:	4b86      	ldr	r3, [pc, #536]	; (800eb80 <tcp_process+0x5a4>)
 800e966:	781b      	ldrb	r3, [r3, #0]
 800e968:	f003 0310 	and.w	r3, r3, #16
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	f000 80a1 	beq.w	800eab4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e972:	4b84      	ldr	r3, [pc, #528]	; (800eb84 <tcp_process+0x5a8>)
 800e974:	681a      	ldr	r2, [r3, #0]
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e97a:	1ad3      	subs	r3, r2, r3
 800e97c:	3b01      	subs	r3, #1
 800e97e:	2b00      	cmp	r3, #0
 800e980:	db7e      	blt.n	800ea80 <tcp_process+0x4a4>
 800e982:	4b80      	ldr	r3, [pc, #512]	; (800eb84 <tcp_process+0x5a8>)
 800e984:	681a      	ldr	r2, [r3, #0]
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e98a:	1ad3      	subs	r3, r2, r3
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	dc77      	bgt.n	800ea80 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2204      	movs	r2, #4
 800e994:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d102      	bne.n	800e9a4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e99e:	23fa      	movs	r3, #250	; 0xfa
 800e9a0:	76bb      	strb	r3, [r7, #26]
 800e9a2:	e01d      	b.n	800e9e0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9a8:	699b      	ldr	r3, [r3, #24]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d106      	bne.n	800e9bc <tcp_process+0x3e0>
 800e9ae:	4b7b      	ldr	r3, [pc, #492]	; (800eb9c <tcp_process+0x5c0>)
 800e9b0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e9b4:	497a      	ldr	r1, [pc, #488]	; (800eba0 <tcp_process+0x5c4>)
 800e9b6:	487b      	ldr	r0, [pc, #492]	; (800eba4 <tcp_process+0x5c8>)
 800e9b8:	f007 fea8 	bl	801670c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9c0:	699b      	ldr	r3, [r3, #24]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d00a      	beq.n	800e9dc <tcp_process+0x400>
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9ca:	699b      	ldr	r3, [r3, #24]
 800e9cc:	687a      	ldr	r2, [r7, #4]
 800e9ce:	6910      	ldr	r0, [r2, #16]
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	6879      	ldr	r1, [r7, #4]
 800e9d4:	4798      	blx	r3
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	76bb      	strb	r3, [r7, #26]
 800e9da:	e001      	b.n	800e9e0 <tcp_process+0x404>
 800e9dc:	23f0      	movs	r3, #240	; 0xf0
 800e9de:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e9e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d00a      	beq.n	800e9fe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e9e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e9ec:	f113 0f0d 	cmn.w	r3, #13
 800e9f0:	d002      	beq.n	800e9f8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e9f2:	6878      	ldr	r0, [r7, #4]
 800e9f4:	f7fd ff94 	bl	800c920 <tcp_abort>
            }
            return ERR_ABRT;
 800e9f8:	f06f 030c 	mvn.w	r3, #12
 800e9fc:	e1ce      	b.n	800ed9c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f000 fae0 	bl	800efc4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ea04:	4b68      	ldr	r3, [pc, #416]	; (800eba8 <tcp_process+0x5cc>)
 800ea06:	881b      	ldrh	r3, [r3, #0]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d005      	beq.n	800ea18 <tcp_process+0x43c>
            recv_acked--;
 800ea0c:	4b66      	ldr	r3, [pc, #408]	; (800eba8 <tcp_process+0x5cc>)
 800ea0e:	881b      	ldrh	r3, [r3, #0]
 800ea10:	3b01      	subs	r3, #1
 800ea12:	b29a      	uxth	r2, r3
 800ea14:	4b64      	ldr	r3, [pc, #400]	; (800eba8 <tcp_process+0x5cc>)
 800ea16:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea1c:	009a      	lsls	r2, r3, #2
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea22:	005b      	lsls	r3, r3, #1
 800ea24:	f241 111c 	movw	r1, #4380	; 0x111c
 800ea28:	428b      	cmp	r3, r1
 800ea2a:	bf38      	it	cc
 800ea2c:	460b      	movcc	r3, r1
 800ea2e:	429a      	cmp	r2, r3
 800ea30:	d204      	bcs.n	800ea3c <tcp_process+0x460>
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea36:	009b      	lsls	r3, r3, #2
 800ea38:	b29b      	uxth	r3, r3
 800ea3a:	e00d      	b.n	800ea58 <tcp_process+0x47c>
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea40:	005b      	lsls	r3, r3, #1
 800ea42:	f241 121c 	movw	r2, #4380	; 0x111c
 800ea46:	4293      	cmp	r3, r2
 800ea48:	d904      	bls.n	800ea54 <tcp_process+0x478>
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea4e:	005b      	lsls	r3, r3, #1
 800ea50:	b29b      	uxth	r3, r3
 800ea52:	e001      	b.n	800ea58 <tcp_process+0x47c>
 800ea54:	f241 131c 	movw	r3, #4380	; 0x111c
 800ea58:	687a      	ldr	r2, [r7, #4]
 800ea5a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ea5e:	4b53      	ldr	r3, [pc, #332]	; (800ebac <tcp_process+0x5d0>)
 800ea60:	781b      	ldrb	r3, [r3, #0]
 800ea62:	f003 0320 	and.w	r3, r3, #32
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d037      	beq.n	800eada <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	8b5b      	ldrh	r3, [r3, #26]
 800ea6e:	f043 0302 	orr.w	r3, r3, #2
 800ea72:	b29a      	uxth	r2, r3
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	2207      	movs	r2, #7
 800ea7c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ea7e:	e02c      	b.n	800eada <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea80:	4b40      	ldr	r3, [pc, #256]	; (800eb84 <tcp_process+0x5a8>)
 800ea82:	6819      	ldr	r1, [r3, #0]
 800ea84:	4b40      	ldr	r3, [pc, #256]	; (800eb88 <tcp_process+0x5ac>)
 800ea86:	881b      	ldrh	r3, [r3, #0]
 800ea88:	461a      	mov	r2, r3
 800ea8a:	4b40      	ldr	r3, [pc, #256]	; (800eb8c <tcp_process+0x5b0>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea90:	4b3f      	ldr	r3, [pc, #252]	; (800eb90 <tcp_process+0x5b4>)
 800ea92:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea94:	885b      	ldrh	r3, [r3, #2]
 800ea96:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea98:	4a3d      	ldr	r2, [pc, #244]	; (800eb90 <tcp_process+0x5b4>)
 800ea9a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea9c:	8812      	ldrh	r2, [r2, #0]
 800ea9e:	b292      	uxth	r2, r2
 800eaa0:	9202      	str	r2, [sp, #8]
 800eaa2:	9301      	str	r3, [sp, #4]
 800eaa4:	4b3b      	ldr	r3, [pc, #236]	; (800eb94 <tcp_process+0x5b8>)
 800eaa6:	9300      	str	r3, [sp, #0]
 800eaa8:	4b3b      	ldr	r3, [pc, #236]	; (800eb98 <tcp_process+0x5bc>)
 800eaaa:	4602      	mov	r2, r0
 800eaac:	6878      	ldr	r0, [r7, #4]
 800eaae:	f002 fbdd 	bl	801126c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800eab2:	e167      	b.n	800ed84 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800eab4:	4b32      	ldr	r3, [pc, #200]	; (800eb80 <tcp_process+0x5a4>)
 800eab6:	781b      	ldrb	r3, [r3, #0]
 800eab8:	f003 0302 	and.w	r3, r3, #2
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	f000 8161 	beq.w	800ed84 <tcp_process+0x7a8>
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eac6:	1e5a      	subs	r2, r3, #1
 800eac8:	4b30      	ldr	r3, [pc, #192]	; (800eb8c <tcp_process+0x5b0>)
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	429a      	cmp	r2, r3
 800eace:	f040 8159 	bne.w	800ed84 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f002 f9b8 	bl	8010e48 <tcp_rexmit>
      break;
 800ead8:	e154      	b.n	800ed84 <tcp_process+0x7a8>
 800eada:	e153      	b.n	800ed84 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800eadc:	6878      	ldr	r0, [r7, #4]
 800eade:	f000 fa71 	bl	800efc4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800eae2:	4b32      	ldr	r3, [pc, #200]	; (800ebac <tcp_process+0x5d0>)
 800eae4:	781b      	ldrb	r3, [r3, #0]
 800eae6:	f003 0320 	and.w	r3, r3, #32
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	f000 814c 	beq.w	800ed88 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	8b5b      	ldrh	r3, [r3, #26]
 800eaf4:	f043 0302 	orr.w	r3, r3, #2
 800eaf8:	b29a      	uxth	r2, r3
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2207      	movs	r2, #7
 800eb02:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eb04:	e140      	b.n	800ed88 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f000 fa5c 	bl	800efc4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800eb0c:	4b27      	ldr	r3, [pc, #156]	; (800ebac <tcp_process+0x5d0>)
 800eb0e:	781b      	ldrb	r3, [r3, #0]
 800eb10:	f003 0320 	and.w	r3, r3, #32
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d071      	beq.n	800ebfc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eb18:	4b19      	ldr	r3, [pc, #100]	; (800eb80 <tcp_process+0x5a4>)
 800eb1a:	781b      	ldrb	r3, [r3, #0]
 800eb1c:	f003 0310 	and.w	r3, r3, #16
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d060      	beq.n	800ebe6 <tcp_process+0x60a>
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eb28:	4b16      	ldr	r3, [pc, #88]	; (800eb84 <tcp_process+0x5a8>)
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d15a      	bne.n	800ebe6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d156      	bne.n	800ebe6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	8b5b      	ldrh	r3, [r3, #26]
 800eb3c:	f043 0302 	orr.w	r3, r3, #2
 800eb40:	b29a      	uxth	r2, r3
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	f7fe fdbe 	bl	800d6c8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800eb4c:	4b18      	ldr	r3, [pc, #96]	; (800ebb0 <tcp_process+0x5d4>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	687a      	ldr	r2, [r7, #4]
 800eb52:	429a      	cmp	r2, r3
 800eb54:	d105      	bne.n	800eb62 <tcp_process+0x586>
 800eb56:	4b16      	ldr	r3, [pc, #88]	; (800ebb0 <tcp_process+0x5d4>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	68db      	ldr	r3, [r3, #12]
 800eb5c:	4a14      	ldr	r2, [pc, #80]	; (800ebb0 <tcp_process+0x5d4>)
 800eb5e:	6013      	str	r3, [r2, #0]
 800eb60:	e02e      	b.n	800ebc0 <tcp_process+0x5e4>
 800eb62:	4b13      	ldr	r3, [pc, #76]	; (800ebb0 <tcp_process+0x5d4>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	617b      	str	r3, [r7, #20]
 800eb68:	e027      	b.n	800ebba <tcp_process+0x5de>
 800eb6a:	697b      	ldr	r3, [r7, #20]
 800eb6c:	68db      	ldr	r3, [r3, #12]
 800eb6e:	687a      	ldr	r2, [r7, #4]
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d11f      	bne.n	800ebb4 <tcp_process+0x5d8>
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	68da      	ldr	r2, [r3, #12]
 800eb78:	697b      	ldr	r3, [r7, #20]
 800eb7a:	60da      	str	r2, [r3, #12]
 800eb7c:	e020      	b.n	800ebc0 <tcp_process+0x5e4>
 800eb7e:	bf00      	nop
 800eb80:	20000488 	.word	0x20000488
 800eb84:	20000480 	.word	0x20000480
 800eb88:	20000486 	.word	0x20000486
 800eb8c:	2000047c 	.word	0x2000047c
 800eb90:	2000046c 	.word	0x2000046c
 800eb94:	200045a8 	.word	0x200045a8
 800eb98:	200045ac 	.word	0x200045ac
 800eb9c:	08018720 	.word	0x08018720
 800eba0:	080189c0 	.word	0x080189c0
 800eba4:	0801876c 	.word	0x0801876c
 800eba8:	20000484 	.word	0x20000484
 800ebac:	20000489 	.word	0x20000489
 800ebb0:	20007afc 	.word	0x20007afc
 800ebb4:	697b      	ldr	r3, [r7, #20]
 800ebb6:	68db      	ldr	r3, [r3, #12]
 800ebb8:	617b      	str	r3, [r7, #20]
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d1d4      	bne.n	800eb6a <tcp_process+0x58e>
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	60da      	str	r2, [r3, #12]
 800ebc6:	4b77      	ldr	r3, [pc, #476]	; (800eda4 <tcp_process+0x7c8>)
 800ebc8:	2201      	movs	r2, #1
 800ebca:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	220a      	movs	r2, #10
 800ebd0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ebd2:	4b75      	ldr	r3, [pc, #468]	; (800eda8 <tcp_process+0x7cc>)
 800ebd4:	681a      	ldr	r2, [r3, #0]
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	60da      	str	r2, [r3, #12]
 800ebda:	4a73      	ldr	r2, [pc, #460]	; (800eda8 <tcp_process+0x7cc>)
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6013      	str	r3, [r2, #0]
 800ebe0:	f002 fd06 	bl	80115f0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ebe4:	e0d2      	b.n	800ed8c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	8b5b      	ldrh	r3, [r3, #26]
 800ebea:	f043 0302 	orr.w	r3, r3, #2
 800ebee:	b29a      	uxth	r2, r3
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	2208      	movs	r2, #8
 800ebf8:	751a      	strb	r2, [r3, #20]
      break;
 800ebfa:	e0c7      	b.n	800ed8c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ebfc:	4b6b      	ldr	r3, [pc, #428]	; (800edac <tcp_process+0x7d0>)
 800ebfe:	781b      	ldrb	r3, [r3, #0]
 800ec00:	f003 0310 	and.w	r3, r3, #16
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	f000 80c1 	beq.w	800ed8c <tcp_process+0x7b0>
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec0e:	4b68      	ldr	r3, [pc, #416]	; (800edb0 <tcp_process+0x7d4>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	429a      	cmp	r2, r3
 800ec14:	f040 80ba 	bne.w	800ed8c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	f040 80b5 	bne.w	800ed8c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2206      	movs	r2, #6
 800ec26:	751a      	strb	r2, [r3, #20]
      break;
 800ec28:	e0b0      	b.n	800ed8c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f000 f9ca 	bl	800efc4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ec30:	4b60      	ldr	r3, [pc, #384]	; (800edb4 <tcp_process+0x7d8>)
 800ec32:	781b      	ldrb	r3, [r3, #0]
 800ec34:	f003 0320 	and.w	r3, r3, #32
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	f000 80a9 	beq.w	800ed90 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	8b5b      	ldrh	r3, [r3, #26]
 800ec42:	f043 0302 	orr.w	r3, r3, #2
 800ec46:	b29a      	uxth	r2, r3
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f7fe fd3b 	bl	800d6c8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ec52:	4b59      	ldr	r3, [pc, #356]	; (800edb8 <tcp_process+0x7dc>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	687a      	ldr	r2, [r7, #4]
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d105      	bne.n	800ec68 <tcp_process+0x68c>
 800ec5c:	4b56      	ldr	r3, [pc, #344]	; (800edb8 <tcp_process+0x7dc>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	68db      	ldr	r3, [r3, #12]
 800ec62:	4a55      	ldr	r2, [pc, #340]	; (800edb8 <tcp_process+0x7dc>)
 800ec64:	6013      	str	r3, [r2, #0]
 800ec66:	e013      	b.n	800ec90 <tcp_process+0x6b4>
 800ec68:	4b53      	ldr	r3, [pc, #332]	; (800edb8 <tcp_process+0x7dc>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	613b      	str	r3, [r7, #16]
 800ec6e:	e00c      	b.n	800ec8a <tcp_process+0x6ae>
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	68db      	ldr	r3, [r3, #12]
 800ec74:	687a      	ldr	r2, [r7, #4]
 800ec76:	429a      	cmp	r2, r3
 800ec78:	d104      	bne.n	800ec84 <tcp_process+0x6a8>
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	68da      	ldr	r2, [r3, #12]
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	60da      	str	r2, [r3, #12]
 800ec82:	e005      	b.n	800ec90 <tcp_process+0x6b4>
 800ec84:	693b      	ldr	r3, [r7, #16]
 800ec86:	68db      	ldr	r3, [r3, #12]
 800ec88:	613b      	str	r3, [r7, #16]
 800ec8a:	693b      	ldr	r3, [r7, #16]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d1ef      	bne.n	800ec70 <tcp_process+0x694>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2200      	movs	r2, #0
 800ec94:	60da      	str	r2, [r3, #12]
 800ec96:	4b43      	ldr	r3, [pc, #268]	; (800eda4 <tcp_process+0x7c8>)
 800ec98:	2201      	movs	r2, #1
 800ec9a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	220a      	movs	r2, #10
 800eca0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800eca2:	4b41      	ldr	r3, [pc, #260]	; (800eda8 <tcp_process+0x7cc>)
 800eca4:	681a      	ldr	r2, [r3, #0]
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	60da      	str	r2, [r3, #12]
 800ecaa:	4a3f      	ldr	r2, [pc, #252]	; (800eda8 <tcp_process+0x7cc>)
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	6013      	str	r3, [r2, #0]
 800ecb0:	f002 fc9e 	bl	80115f0 <tcp_timer_needed>
      }
      break;
 800ecb4:	e06c      	b.n	800ed90 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f000 f984 	bl	800efc4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ecbc:	4b3b      	ldr	r3, [pc, #236]	; (800edac <tcp_process+0x7d0>)
 800ecbe:	781b      	ldrb	r3, [r3, #0]
 800ecc0:	f003 0310 	and.w	r3, r3, #16
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d065      	beq.n	800ed94 <tcp_process+0x7b8>
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eccc:	4b38      	ldr	r3, [pc, #224]	; (800edb0 <tcp_process+0x7d4>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	d15f      	bne.n	800ed94 <tcp_process+0x7b8>
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d15b      	bne.n	800ed94 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f7fe fcf3 	bl	800d6c8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ece2:	4b35      	ldr	r3, [pc, #212]	; (800edb8 <tcp_process+0x7dc>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	687a      	ldr	r2, [r7, #4]
 800ece8:	429a      	cmp	r2, r3
 800ecea:	d105      	bne.n	800ecf8 <tcp_process+0x71c>
 800ecec:	4b32      	ldr	r3, [pc, #200]	; (800edb8 <tcp_process+0x7dc>)
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	68db      	ldr	r3, [r3, #12]
 800ecf2:	4a31      	ldr	r2, [pc, #196]	; (800edb8 <tcp_process+0x7dc>)
 800ecf4:	6013      	str	r3, [r2, #0]
 800ecf6:	e013      	b.n	800ed20 <tcp_process+0x744>
 800ecf8:	4b2f      	ldr	r3, [pc, #188]	; (800edb8 <tcp_process+0x7dc>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	60fb      	str	r3, [r7, #12]
 800ecfe:	e00c      	b.n	800ed1a <tcp_process+0x73e>
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	68db      	ldr	r3, [r3, #12]
 800ed04:	687a      	ldr	r2, [r7, #4]
 800ed06:	429a      	cmp	r2, r3
 800ed08:	d104      	bne.n	800ed14 <tcp_process+0x738>
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	68da      	ldr	r2, [r3, #12]
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	60da      	str	r2, [r3, #12]
 800ed12:	e005      	b.n	800ed20 <tcp_process+0x744>
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	68db      	ldr	r3, [r3, #12]
 800ed18:	60fb      	str	r3, [r7, #12]
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d1ef      	bne.n	800ed00 <tcp_process+0x724>
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2200      	movs	r2, #0
 800ed24:	60da      	str	r2, [r3, #12]
 800ed26:	4b1f      	ldr	r3, [pc, #124]	; (800eda4 <tcp_process+0x7c8>)
 800ed28:	2201      	movs	r2, #1
 800ed2a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	220a      	movs	r2, #10
 800ed30:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ed32:	4b1d      	ldr	r3, [pc, #116]	; (800eda8 <tcp_process+0x7cc>)
 800ed34:	681a      	ldr	r2, [r3, #0]
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	60da      	str	r2, [r3, #12]
 800ed3a:	4a1b      	ldr	r2, [pc, #108]	; (800eda8 <tcp_process+0x7cc>)
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	6013      	str	r3, [r2, #0]
 800ed40:	f002 fc56 	bl	80115f0 <tcp_timer_needed>
      }
      break;
 800ed44:	e026      	b.n	800ed94 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f000 f93c 	bl	800efc4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ed4c:	4b17      	ldr	r3, [pc, #92]	; (800edac <tcp_process+0x7d0>)
 800ed4e:	781b      	ldrb	r3, [r3, #0]
 800ed50:	f003 0310 	and.w	r3, r3, #16
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d01f      	beq.n	800ed98 <tcp_process+0x7bc>
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ed5c:	4b14      	ldr	r3, [pc, #80]	; (800edb0 <tcp_process+0x7d4>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d119      	bne.n	800ed98 <tcp_process+0x7bc>
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d115      	bne.n	800ed98 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ed6c:	4b11      	ldr	r3, [pc, #68]	; (800edb4 <tcp_process+0x7d8>)
 800ed6e:	781b      	ldrb	r3, [r3, #0]
 800ed70:	f043 0310 	orr.w	r3, r3, #16
 800ed74:	b2da      	uxtb	r2, r3
 800ed76:	4b0f      	ldr	r3, [pc, #60]	; (800edb4 <tcp_process+0x7d8>)
 800ed78:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ed7a:	e00d      	b.n	800ed98 <tcp_process+0x7bc>
    default:
      break;
 800ed7c:	bf00      	nop
 800ed7e:	e00c      	b.n	800ed9a <tcp_process+0x7be>
      break;
 800ed80:	bf00      	nop
 800ed82:	e00a      	b.n	800ed9a <tcp_process+0x7be>
      break;
 800ed84:	bf00      	nop
 800ed86:	e008      	b.n	800ed9a <tcp_process+0x7be>
      break;
 800ed88:	bf00      	nop
 800ed8a:	e006      	b.n	800ed9a <tcp_process+0x7be>
      break;
 800ed8c:	bf00      	nop
 800ed8e:	e004      	b.n	800ed9a <tcp_process+0x7be>
      break;
 800ed90:	bf00      	nop
 800ed92:	e002      	b.n	800ed9a <tcp_process+0x7be>
      break;
 800ed94:	bf00      	nop
 800ed96:	e000      	b.n	800ed9a <tcp_process+0x7be>
      break;
 800ed98:	bf00      	nop
  }
  return ERR_OK;
 800ed9a:	2300      	movs	r3, #0
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3724      	adds	r7, #36	; 0x24
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd90      	pop	{r4, r7, pc}
 800eda4:	20007af8 	.word	0x20007af8
 800eda8:	20007b0c 	.word	0x20007b0c
 800edac:	20000488 	.word	0x20000488
 800edb0:	20000480 	.word	0x20000480
 800edb4:	20000489 	.word	0x20000489
 800edb8:	20007afc 	.word	0x20007afc

0800edbc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800edbc:	b590      	push	{r4, r7, lr}
 800edbe:	b085      	sub	sp, #20
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d106      	bne.n	800edda <tcp_oos_insert_segment+0x1e>
 800edcc:	4b3b      	ldr	r3, [pc, #236]	; (800eebc <tcp_oos_insert_segment+0x100>)
 800edce:	f240 421f 	movw	r2, #1055	; 0x41f
 800edd2:	493b      	ldr	r1, [pc, #236]	; (800eec0 <tcp_oos_insert_segment+0x104>)
 800edd4:	483b      	ldr	r0, [pc, #236]	; (800eec4 <tcp_oos_insert_segment+0x108>)
 800edd6:	f007 fc99 	bl	801670c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	68db      	ldr	r3, [r3, #12]
 800edde:	899b      	ldrh	r3, [r3, #12]
 800ede0:	b29b      	uxth	r3, r3
 800ede2:	4618      	mov	r0, r3
 800ede4:	f7fb fd6b 	bl	800a8be <lwip_htons>
 800ede8:	4603      	mov	r3, r0
 800edea:	b2db      	uxtb	r3, r3
 800edec:	f003 0301 	and.w	r3, r3, #1
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d028      	beq.n	800ee46 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800edf4:	6838      	ldr	r0, [r7, #0]
 800edf6:	f7fe fa67 	bl	800d2c8 <tcp_segs_free>
    next = NULL;
 800edfa:	2300      	movs	r3, #0
 800edfc:	603b      	str	r3, [r7, #0]
 800edfe:	e056      	b.n	800eeae <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	68db      	ldr	r3, [r3, #12]
 800ee04:	899b      	ldrh	r3, [r3, #12]
 800ee06:	b29b      	uxth	r3, r3
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7fb fd58 	bl	800a8be <lwip_htons>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	b2db      	uxtb	r3, r3
 800ee12:	f003 0301 	and.w	r3, r3, #1
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d00d      	beq.n	800ee36 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	68db      	ldr	r3, [r3, #12]
 800ee1e:	899b      	ldrh	r3, [r3, #12]
 800ee20:	b29c      	uxth	r4, r3
 800ee22:	2001      	movs	r0, #1
 800ee24:	f7fb fd4b 	bl	800a8be <lwip_htons>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	461a      	mov	r2, r3
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	68db      	ldr	r3, [r3, #12]
 800ee30:	4322      	orrs	r2, r4
 800ee32:	b292      	uxth	r2, r2
 800ee34:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ee40:	68f8      	ldr	r0, [r7, #12]
 800ee42:	f7fe fa55 	bl	800d2f0 <tcp_seg_free>
    while (next &&
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d00e      	beq.n	800ee6a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	891b      	ldrh	r3, [r3, #8]
 800ee50:	461a      	mov	r2, r3
 800ee52:	4b1d      	ldr	r3, [pc, #116]	; (800eec8 <tcp_oos_insert_segment+0x10c>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	441a      	add	r2, r3
 800ee58:	683b      	ldr	r3, [r7, #0]
 800ee5a:	68db      	ldr	r3, [r3, #12]
 800ee5c:	685b      	ldr	r3, [r3, #4]
 800ee5e:	6839      	ldr	r1, [r7, #0]
 800ee60:	8909      	ldrh	r1, [r1, #8]
 800ee62:	440b      	add	r3, r1
 800ee64:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	daca      	bge.n	800ee00 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d01e      	beq.n	800eeae <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	891b      	ldrh	r3, [r3, #8]
 800ee74:	461a      	mov	r2, r3
 800ee76:	4b14      	ldr	r3, [pc, #80]	; (800eec8 <tcp_oos_insert_segment+0x10c>)
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	441a      	add	r2, r3
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	68db      	ldr	r3, [r3, #12]
 800ee80:	685b      	ldr	r3, [r3, #4]
 800ee82:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	dd12      	ble.n	800eeae <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	68db      	ldr	r3, [r3, #12]
 800ee8c:	685b      	ldr	r3, [r3, #4]
 800ee8e:	b29a      	uxth	r2, r3
 800ee90:	4b0d      	ldr	r3, [pc, #52]	; (800eec8 <tcp_oos_insert_segment+0x10c>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	b29b      	uxth	r3, r3
 800ee96:	1ad3      	subs	r3, r2, r3
 800ee98:	b29a      	uxth	r2, r3
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	685a      	ldr	r2, [r3, #4]
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	891b      	ldrh	r3, [r3, #8]
 800eea6:	4619      	mov	r1, r3
 800eea8:	4610      	mov	r0, r2
 800eeaa:	f7fc fe23 	bl	800baf4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	683a      	ldr	r2, [r7, #0]
 800eeb2:	601a      	str	r2, [r3, #0]
}
 800eeb4:	bf00      	nop
 800eeb6:	3714      	adds	r7, #20
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd90      	pop	{r4, r7, pc}
 800eebc:	08018720 	.word	0x08018720
 800eec0:	080189e0 	.word	0x080189e0
 800eec4:	0801876c 	.word	0x0801876c
 800eec8:	2000047c 	.word	0x2000047c

0800eecc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800eecc:	b5b0      	push	{r4, r5, r7, lr}
 800eece:	b086      	sub	sp, #24
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	60f8      	str	r0, [r7, #12]
 800eed4:	60b9      	str	r1, [r7, #8]
 800eed6:	607a      	str	r2, [r7, #4]
 800eed8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800eeda:	e03e      	b.n	800ef5a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800eee6:	697b      	ldr	r3, [r7, #20]
 800eee8:	685b      	ldr	r3, [r3, #4]
 800eeea:	4618      	mov	r0, r3
 800eeec:	f7fd f810 	bl	800bf10 <pbuf_clen>
 800eef0:	4603      	mov	r3, r0
 800eef2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eefa:	8a7a      	ldrh	r2, [r7, #18]
 800eefc:	429a      	cmp	r2, r3
 800eefe:	d906      	bls.n	800ef0e <tcp_free_acked_segments+0x42>
 800ef00:	4b2a      	ldr	r3, [pc, #168]	; (800efac <tcp_free_acked_segments+0xe0>)
 800ef02:	f240 4257 	movw	r2, #1111	; 0x457
 800ef06:	492a      	ldr	r1, [pc, #168]	; (800efb0 <tcp_free_acked_segments+0xe4>)
 800ef08:	482a      	ldr	r0, [pc, #168]	; (800efb4 <tcp_free_acked_segments+0xe8>)
 800ef0a:	f007 fbff 	bl	801670c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800ef14:	8a7b      	ldrh	r3, [r7, #18]
 800ef16:	1ad3      	subs	r3, r2, r3
 800ef18:	b29a      	uxth	r2, r3
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ef20:	697b      	ldr	r3, [r7, #20]
 800ef22:	891a      	ldrh	r2, [r3, #8]
 800ef24:	4b24      	ldr	r3, [pc, #144]	; (800efb8 <tcp_free_acked_segments+0xec>)
 800ef26:	881b      	ldrh	r3, [r3, #0]
 800ef28:	4413      	add	r3, r2
 800ef2a:	b29a      	uxth	r2, r3
 800ef2c:	4b22      	ldr	r3, [pc, #136]	; (800efb8 <tcp_free_acked_segments+0xec>)
 800ef2e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ef30:	6978      	ldr	r0, [r7, #20]
 800ef32:	f7fe f9dd 	bl	800d2f0 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d00c      	beq.n	800ef5a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d109      	bne.n	800ef5a <tcp_free_acked_segments+0x8e>
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d106      	bne.n	800ef5a <tcp_free_acked_segments+0x8e>
 800ef4c:	4b17      	ldr	r3, [pc, #92]	; (800efac <tcp_free_acked_segments+0xe0>)
 800ef4e:	f240 4262 	movw	r2, #1122	; 0x462
 800ef52:	491a      	ldr	r1, [pc, #104]	; (800efbc <tcp_free_acked_segments+0xf0>)
 800ef54:	4817      	ldr	r0, [pc, #92]	; (800efb4 <tcp_free_acked_segments+0xe8>)
 800ef56:	f007 fbd9 	bl	801670c <iprintf>
  while (seg_list != NULL &&
 800ef5a:	68bb      	ldr	r3, [r7, #8]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d020      	beq.n	800efa2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	68db      	ldr	r3, [r3, #12]
 800ef64:	685b      	ldr	r3, [r3, #4]
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7fb fcbe 	bl	800a8e8 <lwip_htonl>
 800ef6c:	4604      	mov	r4, r0
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	891b      	ldrh	r3, [r3, #8]
 800ef72:	461d      	mov	r5, r3
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	68db      	ldr	r3, [r3, #12]
 800ef78:	899b      	ldrh	r3, [r3, #12]
 800ef7a:	b29b      	uxth	r3, r3
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	f7fb fc9e 	bl	800a8be <lwip_htons>
 800ef82:	4603      	mov	r3, r0
 800ef84:	b2db      	uxtb	r3, r3
 800ef86:	f003 0303 	and.w	r3, r3, #3
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d001      	beq.n	800ef92 <tcp_free_acked_segments+0xc6>
 800ef8e:	2301      	movs	r3, #1
 800ef90:	e000      	b.n	800ef94 <tcp_free_acked_segments+0xc8>
 800ef92:	2300      	movs	r3, #0
 800ef94:	442b      	add	r3, r5
 800ef96:	18e2      	adds	r2, r4, r3
 800ef98:	4b09      	ldr	r3, [pc, #36]	; (800efc0 <tcp_free_acked_segments+0xf4>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	dd9c      	ble.n	800eedc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800efa2:	68bb      	ldr	r3, [r7, #8]
}
 800efa4:	4618      	mov	r0, r3
 800efa6:	3718      	adds	r7, #24
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bdb0      	pop	{r4, r5, r7, pc}
 800efac:	08018720 	.word	0x08018720
 800efb0:	08018a08 	.word	0x08018a08
 800efb4:	0801876c 	.word	0x0801876c
 800efb8:	20000484 	.word	0x20000484
 800efbc:	08018a30 	.word	0x08018a30
 800efc0:	20000480 	.word	0x20000480

0800efc4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800efc4:	b5b0      	push	{r4, r5, r7, lr}
 800efc6:	b094      	sub	sp, #80	; 0x50
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800efcc:	2300      	movs	r3, #0
 800efce:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d106      	bne.n	800efe4 <tcp_receive+0x20>
 800efd6:	4ba6      	ldr	r3, [pc, #664]	; (800f270 <tcp_receive+0x2ac>)
 800efd8:	f240 427b 	movw	r2, #1147	; 0x47b
 800efdc:	49a5      	ldr	r1, [pc, #660]	; (800f274 <tcp_receive+0x2b0>)
 800efde:	48a6      	ldr	r0, [pc, #664]	; (800f278 <tcp_receive+0x2b4>)
 800efe0:	f007 fb94 	bl	801670c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	7d1b      	ldrb	r3, [r3, #20]
 800efe8:	2b03      	cmp	r3, #3
 800efea:	d806      	bhi.n	800effa <tcp_receive+0x36>
 800efec:	4ba0      	ldr	r3, [pc, #640]	; (800f270 <tcp_receive+0x2ac>)
 800efee:	f240 427c 	movw	r2, #1148	; 0x47c
 800eff2:	49a2      	ldr	r1, [pc, #648]	; (800f27c <tcp_receive+0x2b8>)
 800eff4:	48a0      	ldr	r0, [pc, #640]	; (800f278 <tcp_receive+0x2b4>)
 800eff6:	f007 fb89 	bl	801670c <iprintf>

  if (flags & TCP_ACK) {
 800effa:	4ba1      	ldr	r3, [pc, #644]	; (800f280 <tcp_receive+0x2bc>)
 800effc:	781b      	ldrb	r3, [r3, #0]
 800effe:	f003 0310 	and.w	r3, r3, #16
 800f002:	2b00      	cmp	r3, #0
 800f004:	f000 8263 	beq.w	800f4ce <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f00e:	461a      	mov	r2, r3
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f014:	4413      	add	r3, r2
 800f016:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f01c:	4b99      	ldr	r3, [pc, #612]	; (800f284 <tcp_receive+0x2c0>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	1ad3      	subs	r3, r2, r3
 800f022:	2b00      	cmp	r3, #0
 800f024:	db1b      	blt.n	800f05e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f02a:	4b96      	ldr	r3, [pc, #600]	; (800f284 <tcp_receive+0x2c0>)
 800f02c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f02e:	429a      	cmp	r2, r3
 800f030:	d106      	bne.n	800f040 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f036:	4b94      	ldr	r3, [pc, #592]	; (800f288 <tcp_receive+0x2c4>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	1ad3      	subs	r3, r2, r3
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	db0e      	blt.n	800f05e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f044:	4b90      	ldr	r3, [pc, #576]	; (800f288 <tcp_receive+0x2c4>)
 800f046:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f048:	429a      	cmp	r2, r3
 800f04a:	d125      	bne.n	800f098 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f04c:	4b8f      	ldr	r3, [pc, #572]	; (800f28c <tcp_receive+0x2c8>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	89db      	ldrh	r3, [r3, #14]
 800f052:	b29a      	uxth	r2, r3
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f05a:	429a      	cmp	r2, r3
 800f05c:	d91c      	bls.n	800f098 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f05e:	4b8b      	ldr	r3, [pc, #556]	; (800f28c <tcp_receive+0x2c8>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	89db      	ldrh	r3, [r3, #14]
 800f064:	b29a      	uxth	r2, r3
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f078:	429a      	cmp	r2, r3
 800f07a:	d205      	bcs.n	800f088 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f088:	4b7e      	ldr	r3, [pc, #504]	; (800f284 <tcp_receive+0x2c0>)
 800f08a:	681a      	ldr	r2, [r3, #0]
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f090:	4b7d      	ldr	r3, [pc, #500]	; (800f288 <tcp_receive+0x2c4>)
 800f092:	681a      	ldr	r2, [r3, #0]
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f098:	4b7b      	ldr	r3, [pc, #492]	; (800f288 <tcp_receive+0x2c4>)
 800f09a:	681a      	ldr	r2, [r3, #0]
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0a0:	1ad3      	subs	r3, r2, r3
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	dc58      	bgt.n	800f158 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f0a6:	4b7a      	ldr	r3, [pc, #488]	; (800f290 <tcp_receive+0x2cc>)
 800f0a8:	881b      	ldrh	r3, [r3, #0]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d14b      	bne.n	800f146 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0b2:	687a      	ldr	r2, [r7, #4]
 800f0b4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f0b8:	4413      	add	r3, r2
 800f0ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	d142      	bne.n	800f146 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	db3d      	blt.n	800f146 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f0ce:	4b6e      	ldr	r3, [pc, #440]	; (800f288 <tcp_receive+0x2c4>)
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	d137      	bne.n	800f146 <tcp_receive+0x182>
              found_dupack = 1;
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f0e0:	2bff      	cmp	r3, #255	; 0xff
 800f0e2:	d007      	beq.n	800f0f4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f0ea:	3301      	adds	r3, #1
 800f0ec:	b2da      	uxtb	r2, r3
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f0fa:	2b03      	cmp	r3, #3
 800f0fc:	d91b      	bls.n	800f136 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f108:	4413      	add	r3, r2
 800f10a:	b29a      	uxth	r2, r3
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f112:	429a      	cmp	r2, r3
 800f114:	d30a      	bcc.n	800f12c <tcp_receive+0x168>
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f120:	4413      	add	r3, r2
 800f122:	b29a      	uxth	r2, r3
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f12a:	e004      	b.n	800f136 <tcp_receive+0x172>
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f132:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f13c:	2b02      	cmp	r3, #2
 800f13e:	d902      	bls.n	800f146 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f001 feed 	bl	8010f20 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f148:	2b00      	cmp	r3, #0
 800f14a:	f040 8160 	bne.w	800f40e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	2200      	movs	r2, #0
 800f152:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f156:	e15a      	b.n	800f40e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f158:	4b4b      	ldr	r3, [pc, #300]	; (800f288 <tcp_receive+0x2c4>)
 800f15a:	681a      	ldr	r2, [r3, #0]
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f160:	1ad3      	subs	r3, r2, r3
 800f162:	3b01      	subs	r3, #1
 800f164:	2b00      	cmp	r3, #0
 800f166:	f2c0 814d 	blt.w	800f404 <tcp_receive+0x440>
 800f16a:	4b47      	ldr	r3, [pc, #284]	; (800f288 <tcp_receive+0x2c4>)
 800f16c:	681a      	ldr	r2, [r3, #0]
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f172:	1ad3      	subs	r3, r2, r3
 800f174:	2b00      	cmp	r3, #0
 800f176:	f300 8145 	bgt.w	800f404 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	8b5b      	ldrh	r3, [r3, #26]
 800f17e:	f003 0304 	and.w	r3, r3, #4
 800f182:	2b00      	cmp	r3, #0
 800f184:	d010      	beq.n	800f1a8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	8b5b      	ldrh	r3, [r3, #26]
 800f18a:	f023 0304 	bic.w	r3, r3, #4
 800f18e:	b29a      	uxth	r2, r3
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f1b6:	10db      	asrs	r3, r3, #3
 800f1b8:	b21b      	sxth	r3, r3
 800f1ba:	b29a      	uxth	r2, r3
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f1c2:	b29b      	uxth	r3, r3
 800f1c4:	4413      	add	r3, r2
 800f1c6:	b29b      	uxth	r3, r3
 800f1c8:	b21a      	sxth	r2, r3
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f1d0:	4b2d      	ldr	r3, [pc, #180]	; (800f288 <tcp_receive+0x2c4>)
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	b29a      	uxth	r2, r3
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1da:	b29b      	uxth	r3, r3
 800f1dc:	1ad3      	subs	r3, r2, r3
 800f1de:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f1e8:	4b27      	ldr	r3, [pc, #156]	; (800f288 <tcp_receive+0x2c4>)
 800f1ea:	681a      	ldr	r2, [r3, #0]
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	7d1b      	ldrb	r3, [r3, #20]
 800f1f4:	2b03      	cmp	r3, #3
 800f1f6:	f240 8096 	bls.w	800f326 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f206:	429a      	cmp	r2, r3
 800f208:	d244      	bcs.n	800f294 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	8b5b      	ldrh	r3, [r3, #26]
 800f20e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f212:	2b00      	cmp	r3, #0
 800f214:	d001      	beq.n	800f21a <tcp_receive+0x256>
 800f216:	2301      	movs	r3, #1
 800f218:	e000      	b.n	800f21c <tcp_receive+0x258>
 800f21a:	2302      	movs	r3, #2
 800f21c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f220:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f224:	b29a      	uxth	r2, r3
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f22a:	fb12 f303 	smulbb	r3, r2, r3
 800f22e:	b29b      	uxth	r3, r3
 800f230:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f232:	4293      	cmp	r3, r2
 800f234:	bf28      	it	cs
 800f236:	4613      	movcs	r3, r2
 800f238:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f240:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f242:	4413      	add	r3, r2
 800f244:	b29a      	uxth	r2, r3
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f24c:	429a      	cmp	r2, r3
 800f24e:	d309      	bcc.n	800f264 <tcp_receive+0x2a0>
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f256:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f258:	4413      	add	r3, r2
 800f25a:	b29a      	uxth	r2, r3
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f262:	e060      	b.n	800f326 <tcp_receive+0x362>
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f26a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f26e:	e05a      	b.n	800f326 <tcp_receive+0x362>
 800f270:	08018720 	.word	0x08018720
 800f274:	08018a50 	.word	0x08018a50
 800f278:	0801876c 	.word	0x0801876c
 800f27c:	08018a6c 	.word	0x08018a6c
 800f280:	20000488 	.word	0x20000488
 800f284:	2000047c 	.word	0x2000047c
 800f288:	20000480 	.word	0x20000480
 800f28c:	2000046c 	.word	0x2000046c
 800f290:	20000486 	.word	0x20000486
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f29a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f29c:	4413      	add	r3, r2
 800f29e:	b29a      	uxth	r2, r3
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d309      	bcc.n	800f2be <tcp_receive+0x2fa>
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f2b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f2b2:	4413      	add	r3, r2
 800f2b4:	b29a      	uxth	r2, r3
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f2bc:	e004      	b.n	800f2c8 <tcp_receive+0x304>
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	d326      	bcc.n	800f326 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f2e4:	1ad3      	subs	r3, r2, r3
 800f2e6:	b29a      	uxth	r2, r3
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f2f8:	4413      	add	r3, r2
 800f2fa:	b29a      	uxth	r2, r3
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f302:	429a      	cmp	r2, r3
 800f304:	d30a      	bcc.n	800f31c <tcp_receive+0x358>
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f310:	4413      	add	r3, r2
 800f312:	b29a      	uxth	r2, r3
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f31a:	e004      	b.n	800f326 <tcp_receive+0x362>
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f322:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f32e:	4a98      	ldr	r2, [pc, #608]	; (800f590 <tcp_receive+0x5cc>)
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f7ff fdcb 	bl	800eecc <tcp_free_acked_segments>
 800f336:	4602      	mov	r2, r0
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f344:	4a93      	ldr	r2, [pc, #588]	; (800f594 <tcp_receive+0x5d0>)
 800f346:	6878      	ldr	r0, [r7, #4]
 800f348:	f7ff fdc0 	bl	800eecc <tcp_free_acked_segments>
 800f34c:	4602      	mov	r2, r0
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f356:	2b00      	cmp	r3, #0
 800f358:	d104      	bne.n	800f364 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f360:	861a      	strh	r2, [r3, #48]	; 0x30
 800f362:	e002      	b.n	800f36a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2200      	movs	r2, #0
 800f368:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	2200      	movs	r2, #0
 800f36e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f374:	2b00      	cmp	r3, #0
 800f376:	d103      	bne.n	800f380 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2200      	movs	r2, #0
 800f37c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f386:	4b84      	ldr	r3, [pc, #528]	; (800f598 <tcp_receive+0x5d4>)
 800f388:	881b      	ldrh	r3, [r3, #0]
 800f38a:	4413      	add	r3, r2
 800f38c:	b29a      	uxth	r2, r3
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	8b5b      	ldrh	r3, [r3, #26]
 800f398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d035      	beq.n	800f40c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d118      	bne.n	800f3da <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d00c      	beq.n	800f3ca <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3b8:	68db      	ldr	r3, [r3, #12]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f7fb fa93 	bl	800a8e8 <lwip_htonl>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	dc20      	bgt.n	800f40c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	8b5b      	ldrh	r3, [r3, #26]
 800f3ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f3d2:	b29a      	uxth	r2, r3
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f3d8:	e018      	b.n	800f40c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3e2:	68db      	ldr	r3, [r3, #12]
 800f3e4:	685b      	ldr	r3, [r3, #4]
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f7fb fa7e 	bl	800a8e8 <lwip_htonl>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	1ae3      	subs	r3, r4, r3
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	dc0b      	bgt.n	800f40c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	8b5b      	ldrh	r3, [r3, #26]
 800f3f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f3fc:	b29a      	uxth	r2, r3
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f402:	e003      	b.n	800f40c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f001 ff83 	bl	8011310 <tcp_send_empty_ack>
 800f40a:	e000      	b.n	800f40e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f40c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f412:	2b00      	cmp	r3, #0
 800f414:	d05b      	beq.n	800f4ce <tcp_receive+0x50a>
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f41a:	4b60      	ldr	r3, [pc, #384]	; (800f59c <tcp_receive+0x5d8>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	1ad3      	subs	r3, r2, r3
 800f420:	2b00      	cmp	r3, #0
 800f422:	da54      	bge.n	800f4ce <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f424:	4b5e      	ldr	r3, [pc, #376]	; (800f5a0 <tcp_receive+0x5dc>)
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	b29a      	uxth	r2, r3
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f42e:	b29b      	uxth	r3, r3
 800f430:	1ad3      	subs	r3, r2, r3
 800f432:	b29b      	uxth	r3, r3
 800f434:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f438:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f442:	10db      	asrs	r3, r3, #3
 800f444:	b21b      	sxth	r3, r3
 800f446:	b29b      	uxth	r3, r3
 800f448:	1ad3      	subs	r3, r2, r3
 800f44a:	b29b      	uxth	r3, r3
 800f44c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f456:	b29a      	uxth	r2, r3
 800f458:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f45c:	4413      	add	r3, r2
 800f45e:	b29b      	uxth	r3, r3
 800f460:	b21a      	sxth	r2, r3
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f466:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	da05      	bge.n	800f47a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800f46e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f472:	425b      	negs	r3, r3
 800f474:	b29b      	uxth	r3, r3
 800f476:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f47a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f484:	109b      	asrs	r3, r3, #2
 800f486:	b21b      	sxth	r3, r3
 800f488:	b29b      	uxth	r3, r3
 800f48a:	1ad3      	subs	r3, r2, r3
 800f48c:	b29b      	uxth	r3, r3
 800f48e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f498:	b29a      	uxth	r2, r3
 800f49a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f49e:	4413      	add	r3, r2
 800f4a0:	b29b      	uxth	r3, r3
 800f4a2:	b21a      	sxth	r2, r3
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f4ae:	10db      	asrs	r3, r3, #3
 800f4b0:	b21b      	sxth	r3, r3
 800f4b2:	b29a      	uxth	r2, r3
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f4ba:	b29b      	uxth	r3, r3
 800f4bc:	4413      	add	r3, r2
 800f4be:	b29b      	uxth	r3, r3
 800f4c0:	b21a      	sxth	r2, r3
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f4ce:	4b35      	ldr	r3, [pc, #212]	; (800f5a4 <tcp_receive+0x5e0>)
 800f4d0:	881b      	ldrh	r3, [r3, #0]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	f000 84e1 	beq.w	800fe9a <tcp_receive+0xed6>
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	7d1b      	ldrb	r3, [r3, #20]
 800f4dc:	2b06      	cmp	r3, #6
 800f4de:	f200 84dc 	bhi.w	800fe9a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f4e6:	4b30      	ldr	r3, [pc, #192]	; (800f5a8 <tcp_receive+0x5e4>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	1ad3      	subs	r3, r2, r3
 800f4ec:	3b01      	subs	r3, #1
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	f2c0 808e 	blt.w	800f610 <tcp_receive+0x64c>
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f4f8:	4b2a      	ldr	r3, [pc, #168]	; (800f5a4 <tcp_receive+0x5e0>)
 800f4fa:	881b      	ldrh	r3, [r3, #0]
 800f4fc:	4619      	mov	r1, r3
 800f4fe:	4b2a      	ldr	r3, [pc, #168]	; (800f5a8 <tcp_receive+0x5e4>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	440b      	add	r3, r1
 800f504:	1ad3      	subs	r3, r2, r3
 800f506:	3301      	adds	r3, #1
 800f508:	2b00      	cmp	r3, #0
 800f50a:	f300 8081 	bgt.w	800f610 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f50e:	4b27      	ldr	r3, [pc, #156]	; (800f5ac <tcp_receive+0x5e8>)
 800f510:	685b      	ldr	r3, [r3, #4]
 800f512:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f518:	4b23      	ldr	r3, [pc, #140]	; (800f5a8 <tcp_receive+0x5e4>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	1ad3      	subs	r3, r2, r3
 800f51e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f520:	4b22      	ldr	r3, [pc, #136]	; (800f5ac <tcp_receive+0x5e8>)
 800f522:	685b      	ldr	r3, [r3, #4]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d106      	bne.n	800f536 <tcp_receive+0x572>
 800f528:	4b21      	ldr	r3, [pc, #132]	; (800f5b0 <tcp_receive+0x5ec>)
 800f52a:	f240 5294 	movw	r2, #1428	; 0x594
 800f52e:	4921      	ldr	r1, [pc, #132]	; (800f5b4 <tcp_receive+0x5f0>)
 800f530:	4821      	ldr	r0, [pc, #132]	; (800f5b8 <tcp_receive+0x5f4>)
 800f532:	f007 f8eb 	bl	801670c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f538:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f53c:	4293      	cmp	r3, r2
 800f53e:	d906      	bls.n	800f54e <tcp_receive+0x58a>
 800f540:	4b1b      	ldr	r3, [pc, #108]	; (800f5b0 <tcp_receive+0x5ec>)
 800f542:	f240 5295 	movw	r2, #1429	; 0x595
 800f546:	491d      	ldr	r1, [pc, #116]	; (800f5bc <tcp_receive+0x5f8>)
 800f548:	481b      	ldr	r0, [pc, #108]	; (800f5b8 <tcp_receive+0x5f4>)
 800f54a:	f007 f8df 	bl	801670c <iprintf>
      off = (u16_t)off32;
 800f54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f550:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f554:	4b15      	ldr	r3, [pc, #84]	; (800f5ac <tcp_receive+0x5e8>)
 800f556:	685b      	ldr	r3, [r3, #4]
 800f558:	891b      	ldrh	r3, [r3, #8]
 800f55a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f55e:	429a      	cmp	r2, r3
 800f560:	d906      	bls.n	800f570 <tcp_receive+0x5ac>
 800f562:	4b13      	ldr	r3, [pc, #76]	; (800f5b0 <tcp_receive+0x5ec>)
 800f564:	f240 5297 	movw	r2, #1431	; 0x597
 800f568:	4915      	ldr	r1, [pc, #84]	; (800f5c0 <tcp_receive+0x5fc>)
 800f56a:	4813      	ldr	r0, [pc, #76]	; (800f5b8 <tcp_receive+0x5f4>)
 800f56c:	f007 f8ce 	bl	801670c <iprintf>
      inseg.len -= off;
 800f570:	4b0e      	ldr	r3, [pc, #56]	; (800f5ac <tcp_receive+0x5e8>)
 800f572:	891a      	ldrh	r2, [r3, #8]
 800f574:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f578:	1ad3      	subs	r3, r2, r3
 800f57a:	b29a      	uxth	r2, r3
 800f57c:	4b0b      	ldr	r3, [pc, #44]	; (800f5ac <tcp_receive+0x5e8>)
 800f57e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f580:	4b0a      	ldr	r3, [pc, #40]	; (800f5ac <tcp_receive+0x5e8>)
 800f582:	685b      	ldr	r3, [r3, #4]
 800f584:	891a      	ldrh	r2, [r3, #8]
 800f586:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f58a:	1ad3      	subs	r3, r2, r3
 800f58c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f58e:	e029      	b.n	800f5e4 <tcp_receive+0x620>
 800f590:	08018a88 	.word	0x08018a88
 800f594:	08018a90 	.word	0x08018a90
 800f598:	20000484 	.word	0x20000484
 800f59c:	20000480 	.word	0x20000480
 800f5a0:	20007b00 	.word	0x20007b00
 800f5a4:	20000486 	.word	0x20000486
 800f5a8:	2000047c 	.word	0x2000047c
 800f5ac:	2000045c 	.word	0x2000045c
 800f5b0:	08018720 	.word	0x08018720
 800f5b4:	08018a98 	.word	0x08018a98
 800f5b8:	0801876c 	.word	0x0801876c
 800f5bc:	08018aa8 	.word	0x08018aa8
 800f5c0:	08018ab8 	.word	0x08018ab8
        off -= p->len;
 800f5c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5c6:	895b      	ldrh	r3, [r3, #10]
 800f5c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f5cc:	1ad3      	subs	r3, r2, r3
 800f5ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f5d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5d4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f5d6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f5d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5da:	2200      	movs	r2, #0
 800f5dc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f5de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f5e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5e6:	895b      	ldrh	r3, [r3, #10]
 800f5e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f5ec:	429a      	cmp	r2, r3
 800f5ee:	d8e9      	bhi.n	800f5c4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f5f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f5f4:	4619      	mov	r1, r3
 800f5f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f5f8:	f7fc fb7c 	bl	800bcf4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f600:	4a91      	ldr	r2, [pc, #580]	; (800f848 <tcp_receive+0x884>)
 800f602:	6013      	str	r3, [r2, #0]
 800f604:	4b91      	ldr	r3, [pc, #580]	; (800f84c <tcp_receive+0x888>)
 800f606:	68db      	ldr	r3, [r3, #12]
 800f608:	4a8f      	ldr	r2, [pc, #572]	; (800f848 <tcp_receive+0x884>)
 800f60a:	6812      	ldr	r2, [r2, #0]
 800f60c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f60e:	e00d      	b.n	800f62c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f610:	4b8d      	ldr	r3, [pc, #564]	; (800f848 <tcp_receive+0x884>)
 800f612:	681a      	ldr	r2, [r3, #0]
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f618:	1ad3      	subs	r3, r2, r3
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	da06      	bge.n	800f62c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	8b5b      	ldrh	r3, [r3, #26]
 800f622:	f043 0302 	orr.w	r3, r3, #2
 800f626:	b29a      	uxth	r2, r3
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f62c:	4b86      	ldr	r3, [pc, #536]	; (800f848 <tcp_receive+0x884>)
 800f62e:	681a      	ldr	r2, [r3, #0]
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f634:	1ad3      	subs	r3, r2, r3
 800f636:	2b00      	cmp	r3, #0
 800f638:	f2c0 842a 	blt.w	800fe90 <tcp_receive+0xecc>
 800f63c:	4b82      	ldr	r3, [pc, #520]	; (800f848 <tcp_receive+0x884>)
 800f63e:	681a      	ldr	r2, [r3, #0]
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f644:	6879      	ldr	r1, [r7, #4]
 800f646:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f648:	440b      	add	r3, r1
 800f64a:	1ad3      	subs	r3, r2, r3
 800f64c:	3301      	adds	r3, #1
 800f64e:	2b00      	cmp	r3, #0
 800f650:	f300 841e 	bgt.w	800fe90 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f658:	4b7b      	ldr	r3, [pc, #492]	; (800f848 <tcp_receive+0x884>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	429a      	cmp	r2, r3
 800f65e:	f040 829a 	bne.w	800fb96 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f662:	4b7a      	ldr	r3, [pc, #488]	; (800f84c <tcp_receive+0x888>)
 800f664:	891c      	ldrh	r4, [r3, #8]
 800f666:	4b79      	ldr	r3, [pc, #484]	; (800f84c <tcp_receive+0x888>)
 800f668:	68db      	ldr	r3, [r3, #12]
 800f66a:	899b      	ldrh	r3, [r3, #12]
 800f66c:	b29b      	uxth	r3, r3
 800f66e:	4618      	mov	r0, r3
 800f670:	f7fb f925 	bl	800a8be <lwip_htons>
 800f674:	4603      	mov	r3, r0
 800f676:	b2db      	uxtb	r3, r3
 800f678:	f003 0303 	and.w	r3, r3, #3
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d001      	beq.n	800f684 <tcp_receive+0x6c0>
 800f680:	2301      	movs	r3, #1
 800f682:	e000      	b.n	800f686 <tcp_receive+0x6c2>
 800f684:	2300      	movs	r3, #0
 800f686:	4423      	add	r3, r4
 800f688:	b29a      	uxth	r2, r3
 800f68a:	4b71      	ldr	r3, [pc, #452]	; (800f850 <tcp_receive+0x88c>)
 800f68c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f692:	4b6f      	ldr	r3, [pc, #444]	; (800f850 <tcp_receive+0x88c>)
 800f694:	881b      	ldrh	r3, [r3, #0]
 800f696:	429a      	cmp	r2, r3
 800f698:	d275      	bcs.n	800f786 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f69a:	4b6c      	ldr	r3, [pc, #432]	; (800f84c <tcp_receive+0x888>)
 800f69c:	68db      	ldr	r3, [r3, #12]
 800f69e:	899b      	ldrh	r3, [r3, #12]
 800f6a0:	b29b      	uxth	r3, r3
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7fb f90b 	bl	800a8be <lwip_htons>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	b2db      	uxtb	r3, r3
 800f6ac:	f003 0301 	and.w	r3, r3, #1
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d01f      	beq.n	800f6f4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f6b4:	4b65      	ldr	r3, [pc, #404]	; (800f84c <tcp_receive+0x888>)
 800f6b6:	68db      	ldr	r3, [r3, #12]
 800f6b8:	899b      	ldrh	r3, [r3, #12]
 800f6ba:	b29b      	uxth	r3, r3
 800f6bc:	b21b      	sxth	r3, r3
 800f6be:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f6c2:	b21c      	sxth	r4, r3
 800f6c4:	4b61      	ldr	r3, [pc, #388]	; (800f84c <tcp_receive+0x888>)
 800f6c6:	68db      	ldr	r3, [r3, #12]
 800f6c8:	899b      	ldrh	r3, [r3, #12]
 800f6ca:	b29b      	uxth	r3, r3
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f7fb f8f6 	bl	800a8be <lwip_htons>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	b2db      	uxtb	r3, r3
 800f6d6:	b29b      	uxth	r3, r3
 800f6d8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f6dc:	b29b      	uxth	r3, r3
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f7fb f8ed 	bl	800a8be <lwip_htons>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	b21b      	sxth	r3, r3
 800f6e8:	4323      	orrs	r3, r4
 800f6ea:	b21a      	sxth	r2, r3
 800f6ec:	4b57      	ldr	r3, [pc, #348]	; (800f84c <tcp_receive+0x888>)
 800f6ee:	68db      	ldr	r3, [r3, #12]
 800f6f0:	b292      	uxth	r2, r2
 800f6f2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f6f8:	4b54      	ldr	r3, [pc, #336]	; (800f84c <tcp_receive+0x888>)
 800f6fa:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f6fc:	4b53      	ldr	r3, [pc, #332]	; (800f84c <tcp_receive+0x888>)
 800f6fe:	68db      	ldr	r3, [r3, #12]
 800f700:	899b      	ldrh	r3, [r3, #12]
 800f702:	b29b      	uxth	r3, r3
 800f704:	4618      	mov	r0, r3
 800f706:	f7fb f8da 	bl	800a8be <lwip_htons>
 800f70a:	4603      	mov	r3, r0
 800f70c:	b2db      	uxtb	r3, r3
 800f70e:	f003 0302 	and.w	r3, r3, #2
 800f712:	2b00      	cmp	r3, #0
 800f714:	d005      	beq.n	800f722 <tcp_receive+0x75e>
            inseg.len -= 1;
 800f716:	4b4d      	ldr	r3, [pc, #308]	; (800f84c <tcp_receive+0x888>)
 800f718:	891b      	ldrh	r3, [r3, #8]
 800f71a:	3b01      	subs	r3, #1
 800f71c:	b29a      	uxth	r2, r3
 800f71e:	4b4b      	ldr	r3, [pc, #300]	; (800f84c <tcp_receive+0x888>)
 800f720:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f722:	4b4a      	ldr	r3, [pc, #296]	; (800f84c <tcp_receive+0x888>)
 800f724:	685a      	ldr	r2, [r3, #4]
 800f726:	4b49      	ldr	r3, [pc, #292]	; (800f84c <tcp_receive+0x888>)
 800f728:	891b      	ldrh	r3, [r3, #8]
 800f72a:	4619      	mov	r1, r3
 800f72c:	4610      	mov	r0, r2
 800f72e:	f7fc f9e1 	bl	800baf4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f732:	4b46      	ldr	r3, [pc, #280]	; (800f84c <tcp_receive+0x888>)
 800f734:	891c      	ldrh	r4, [r3, #8]
 800f736:	4b45      	ldr	r3, [pc, #276]	; (800f84c <tcp_receive+0x888>)
 800f738:	68db      	ldr	r3, [r3, #12]
 800f73a:	899b      	ldrh	r3, [r3, #12]
 800f73c:	b29b      	uxth	r3, r3
 800f73e:	4618      	mov	r0, r3
 800f740:	f7fb f8bd 	bl	800a8be <lwip_htons>
 800f744:	4603      	mov	r3, r0
 800f746:	b2db      	uxtb	r3, r3
 800f748:	f003 0303 	and.w	r3, r3, #3
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d001      	beq.n	800f754 <tcp_receive+0x790>
 800f750:	2301      	movs	r3, #1
 800f752:	e000      	b.n	800f756 <tcp_receive+0x792>
 800f754:	2300      	movs	r3, #0
 800f756:	4423      	add	r3, r4
 800f758:	b29a      	uxth	r2, r3
 800f75a:	4b3d      	ldr	r3, [pc, #244]	; (800f850 <tcp_receive+0x88c>)
 800f75c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f75e:	4b3c      	ldr	r3, [pc, #240]	; (800f850 <tcp_receive+0x88c>)
 800f760:	881b      	ldrh	r3, [r3, #0]
 800f762:	461a      	mov	r2, r3
 800f764:	4b38      	ldr	r3, [pc, #224]	; (800f848 <tcp_receive+0x884>)
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	441a      	add	r2, r3
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f76e:	6879      	ldr	r1, [r7, #4]
 800f770:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f772:	440b      	add	r3, r1
 800f774:	429a      	cmp	r2, r3
 800f776:	d006      	beq.n	800f786 <tcp_receive+0x7c2>
 800f778:	4b36      	ldr	r3, [pc, #216]	; (800f854 <tcp_receive+0x890>)
 800f77a:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800f77e:	4936      	ldr	r1, [pc, #216]	; (800f858 <tcp_receive+0x894>)
 800f780:	4836      	ldr	r0, [pc, #216]	; (800f85c <tcp_receive+0x898>)
 800f782:	f006 ffc3 	bl	801670c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	f000 80e7 	beq.w	800f95e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f790:	4b2e      	ldr	r3, [pc, #184]	; (800f84c <tcp_receive+0x888>)
 800f792:	68db      	ldr	r3, [r3, #12]
 800f794:	899b      	ldrh	r3, [r3, #12]
 800f796:	b29b      	uxth	r3, r3
 800f798:	4618      	mov	r0, r3
 800f79a:	f7fb f890 	bl	800a8be <lwip_htons>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	b2db      	uxtb	r3, r3
 800f7a2:	f003 0301 	and.w	r3, r3, #1
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d010      	beq.n	800f7cc <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f7aa:	e00a      	b.n	800f7c2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7b0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7b6:	681a      	ldr	r2, [r3, #0]
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f7bc:	68f8      	ldr	r0, [r7, #12]
 800f7be:	f7fd fd97 	bl	800d2f0 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d1f0      	bne.n	800f7ac <tcp_receive+0x7e8>
 800f7ca:	e0c8      	b.n	800f95e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7d0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f7d2:	e052      	b.n	800f87a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f7d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7d6:	68db      	ldr	r3, [r3, #12]
 800f7d8:	899b      	ldrh	r3, [r3, #12]
 800f7da:	b29b      	uxth	r3, r3
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f7fb f86e 	bl	800a8be <lwip_htons>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	b2db      	uxtb	r3, r3
 800f7e6:	f003 0301 	and.w	r3, r3, #1
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d03d      	beq.n	800f86a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f7ee:	4b17      	ldr	r3, [pc, #92]	; (800f84c <tcp_receive+0x888>)
 800f7f0:	68db      	ldr	r3, [r3, #12]
 800f7f2:	899b      	ldrh	r3, [r3, #12]
 800f7f4:	b29b      	uxth	r3, r3
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7fb f861 	bl	800a8be <lwip_htons>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	b2db      	uxtb	r3, r3
 800f800:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f804:	2b00      	cmp	r3, #0
 800f806:	d130      	bne.n	800f86a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f808:	4b10      	ldr	r3, [pc, #64]	; (800f84c <tcp_receive+0x888>)
 800f80a:	68db      	ldr	r3, [r3, #12]
 800f80c:	899b      	ldrh	r3, [r3, #12]
 800f80e:	b29c      	uxth	r4, r3
 800f810:	2001      	movs	r0, #1
 800f812:	f7fb f854 	bl	800a8be <lwip_htons>
 800f816:	4603      	mov	r3, r0
 800f818:	461a      	mov	r2, r3
 800f81a:	4b0c      	ldr	r3, [pc, #48]	; (800f84c <tcp_receive+0x888>)
 800f81c:	68db      	ldr	r3, [r3, #12]
 800f81e:	4322      	orrs	r2, r4
 800f820:	b292      	uxth	r2, r2
 800f822:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f824:	4b09      	ldr	r3, [pc, #36]	; (800f84c <tcp_receive+0x888>)
 800f826:	891c      	ldrh	r4, [r3, #8]
 800f828:	4b08      	ldr	r3, [pc, #32]	; (800f84c <tcp_receive+0x888>)
 800f82a:	68db      	ldr	r3, [r3, #12]
 800f82c:	899b      	ldrh	r3, [r3, #12]
 800f82e:	b29b      	uxth	r3, r3
 800f830:	4618      	mov	r0, r3
 800f832:	f7fb f844 	bl	800a8be <lwip_htons>
 800f836:	4603      	mov	r3, r0
 800f838:	b2db      	uxtb	r3, r3
 800f83a:	f003 0303 	and.w	r3, r3, #3
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d00e      	beq.n	800f860 <tcp_receive+0x89c>
 800f842:	2301      	movs	r3, #1
 800f844:	e00d      	b.n	800f862 <tcp_receive+0x89e>
 800f846:	bf00      	nop
 800f848:	2000047c 	.word	0x2000047c
 800f84c:	2000045c 	.word	0x2000045c
 800f850:	20000486 	.word	0x20000486
 800f854:	08018720 	.word	0x08018720
 800f858:	08018ac8 	.word	0x08018ac8
 800f85c:	0801876c 	.word	0x0801876c
 800f860:	2300      	movs	r3, #0
 800f862:	4423      	add	r3, r4
 800f864:	b29a      	uxth	r2, r3
 800f866:	4b98      	ldr	r3, [pc, #608]	; (800fac8 <tcp_receive+0xb04>)
 800f868:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f86c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f86e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f874:	6938      	ldr	r0, [r7, #16]
 800f876:	f7fd fd3b 	bl	800d2f0 <tcp_seg_free>
            while (next &&
 800f87a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d00e      	beq.n	800f89e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f880:	4b91      	ldr	r3, [pc, #580]	; (800fac8 <tcp_receive+0xb04>)
 800f882:	881b      	ldrh	r3, [r3, #0]
 800f884:	461a      	mov	r2, r3
 800f886:	4b91      	ldr	r3, [pc, #580]	; (800facc <tcp_receive+0xb08>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	441a      	add	r2, r3
 800f88c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f88e:	68db      	ldr	r3, [r3, #12]
 800f890:	685b      	ldr	r3, [r3, #4]
 800f892:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f894:	8909      	ldrh	r1, [r1, #8]
 800f896:	440b      	add	r3, r1
 800f898:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	da9a      	bge.n	800f7d4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f89e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d059      	beq.n	800f958 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f8a4:	4b88      	ldr	r3, [pc, #544]	; (800fac8 <tcp_receive+0xb04>)
 800f8a6:	881b      	ldrh	r3, [r3, #0]
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	4b88      	ldr	r3, [pc, #544]	; (800facc <tcp_receive+0xb08>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	441a      	add	r2, r3
 800f8b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8b2:	68db      	ldr	r3, [r3, #12]
 800f8b4:	685b      	ldr	r3, [r3, #4]
 800f8b6:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	dd4d      	ble.n	800f958 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f8bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8be:	68db      	ldr	r3, [r3, #12]
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	b29a      	uxth	r2, r3
 800f8c4:	4b81      	ldr	r3, [pc, #516]	; (800facc <tcp_receive+0xb08>)
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	b29b      	uxth	r3, r3
 800f8ca:	1ad3      	subs	r3, r2, r3
 800f8cc:	b29a      	uxth	r2, r3
 800f8ce:	4b80      	ldr	r3, [pc, #512]	; (800fad0 <tcp_receive+0xb0c>)
 800f8d0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f8d2:	4b7f      	ldr	r3, [pc, #508]	; (800fad0 <tcp_receive+0xb0c>)
 800f8d4:	68db      	ldr	r3, [r3, #12]
 800f8d6:	899b      	ldrh	r3, [r3, #12]
 800f8d8:	b29b      	uxth	r3, r3
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f7fa ffef 	bl	800a8be <lwip_htons>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	b2db      	uxtb	r3, r3
 800f8e4:	f003 0302 	and.w	r3, r3, #2
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d005      	beq.n	800f8f8 <tcp_receive+0x934>
                inseg.len -= 1;
 800f8ec:	4b78      	ldr	r3, [pc, #480]	; (800fad0 <tcp_receive+0xb0c>)
 800f8ee:	891b      	ldrh	r3, [r3, #8]
 800f8f0:	3b01      	subs	r3, #1
 800f8f2:	b29a      	uxth	r2, r3
 800f8f4:	4b76      	ldr	r3, [pc, #472]	; (800fad0 <tcp_receive+0xb0c>)
 800f8f6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f8f8:	4b75      	ldr	r3, [pc, #468]	; (800fad0 <tcp_receive+0xb0c>)
 800f8fa:	685a      	ldr	r2, [r3, #4]
 800f8fc:	4b74      	ldr	r3, [pc, #464]	; (800fad0 <tcp_receive+0xb0c>)
 800f8fe:	891b      	ldrh	r3, [r3, #8]
 800f900:	4619      	mov	r1, r3
 800f902:	4610      	mov	r0, r2
 800f904:	f7fc f8f6 	bl	800baf4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f908:	4b71      	ldr	r3, [pc, #452]	; (800fad0 <tcp_receive+0xb0c>)
 800f90a:	891c      	ldrh	r4, [r3, #8]
 800f90c:	4b70      	ldr	r3, [pc, #448]	; (800fad0 <tcp_receive+0xb0c>)
 800f90e:	68db      	ldr	r3, [r3, #12]
 800f910:	899b      	ldrh	r3, [r3, #12]
 800f912:	b29b      	uxth	r3, r3
 800f914:	4618      	mov	r0, r3
 800f916:	f7fa ffd2 	bl	800a8be <lwip_htons>
 800f91a:	4603      	mov	r3, r0
 800f91c:	b2db      	uxtb	r3, r3
 800f91e:	f003 0303 	and.w	r3, r3, #3
 800f922:	2b00      	cmp	r3, #0
 800f924:	d001      	beq.n	800f92a <tcp_receive+0x966>
 800f926:	2301      	movs	r3, #1
 800f928:	e000      	b.n	800f92c <tcp_receive+0x968>
 800f92a:	2300      	movs	r3, #0
 800f92c:	4423      	add	r3, r4
 800f92e:	b29a      	uxth	r2, r3
 800f930:	4b65      	ldr	r3, [pc, #404]	; (800fac8 <tcp_receive+0xb04>)
 800f932:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f934:	4b64      	ldr	r3, [pc, #400]	; (800fac8 <tcp_receive+0xb04>)
 800f936:	881b      	ldrh	r3, [r3, #0]
 800f938:	461a      	mov	r2, r3
 800f93a:	4b64      	ldr	r3, [pc, #400]	; (800facc <tcp_receive+0xb08>)
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	441a      	add	r2, r3
 800f940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f942:	68db      	ldr	r3, [r3, #12]
 800f944:	685b      	ldr	r3, [r3, #4]
 800f946:	429a      	cmp	r2, r3
 800f948:	d006      	beq.n	800f958 <tcp_receive+0x994>
 800f94a:	4b62      	ldr	r3, [pc, #392]	; (800fad4 <tcp_receive+0xb10>)
 800f94c:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800f950:	4961      	ldr	r1, [pc, #388]	; (800fad8 <tcp_receive+0xb14>)
 800f952:	4862      	ldr	r0, [pc, #392]	; (800fadc <tcp_receive+0xb18>)
 800f954:	f006 feda 	bl	801670c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f95c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f95e:	4b5a      	ldr	r3, [pc, #360]	; (800fac8 <tcp_receive+0xb04>)
 800f960:	881b      	ldrh	r3, [r3, #0]
 800f962:	461a      	mov	r2, r3
 800f964:	4b59      	ldr	r3, [pc, #356]	; (800facc <tcp_receive+0xb08>)
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	441a      	add	r2, r3
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f972:	4b55      	ldr	r3, [pc, #340]	; (800fac8 <tcp_receive+0xb04>)
 800f974:	881b      	ldrh	r3, [r3, #0]
 800f976:	429a      	cmp	r2, r3
 800f978:	d206      	bcs.n	800f988 <tcp_receive+0x9c4>
 800f97a:	4b56      	ldr	r3, [pc, #344]	; (800fad4 <tcp_receive+0xb10>)
 800f97c:	f240 6207 	movw	r2, #1543	; 0x607
 800f980:	4957      	ldr	r1, [pc, #348]	; (800fae0 <tcp_receive+0xb1c>)
 800f982:	4856      	ldr	r0, [pc, #344]	; (800fadc <tcp_receive+0xb18>)
 800f984:	f006 fec2 	bl	801670c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f98c:	4b4e      	ldr	r3, [pc, #312]	; (800fac8 <tcp_receive+0xb04>)
 800f98e:	881b      	ldrh	r3, [r3, #0]
 800f990:	1ad3      	subs	r3, r2, r3
 800f992:	b29a      	uxth	r2, r3
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f998:	6878      	ldr	r0, [r7, #4]
 800f99a:	f7fc ffcd 	bl	800c938 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f99e:	4b4c      	ldr	r3, [pc, #304]	; (800fad0 <tcp_receive+0xb0c>)
 800f9a0:	685b      	ldr	r3, [r3, #4]
 800f9a2:	891b      	ldrh	r3, [r3, #8]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d006      	beq.n	800f9b6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f9a8:	4b49      	ldr	r3, [pc, #292]	; (800fad0 <tcp_receive+0xb0c>)
 800f9aa:	685b      	ldr	r3, [r3, #4]
 800f9ac:	4a4d      	ldr	r2, [pc, #308]	; (800fae4 <tcp_receive+0xb20>)
 800f9ae:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f9b0:	4b47      	ldr	r3, [pc, #284]	; (800fad0 <tcp_receive+0xb0c>)
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f9b6:	4b46      	ldr	r3, [pc, #280]	; (800fad0 <tcp_receive+0xb0c>)
 800f9b8:	68db      	ldr	r3, [r3, #12]
 800f9ba:	899b      	ldrh	r3, [r3, #12]
 800f9bc:	b29b      	uxth	r3, r3
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f7fa ff7d 	bl	800a8be <lwip_htons>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	b2db      	uxtb	r3, r3
 800f9c8:	f003 0301 	and.w	r3, r3, #1
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	f000 80b8 	beq.w	800fb42 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f9d2:	4b45      	ldr	r3, [pc, #276]	; (800fae8 <tcp_receive+0xb24>)
 800f9d4:	781b      	ldrb	r3, [r3, #0]
 800f9d6:	f043 0320 	orr.w	r3, r3, #32
 800f9da:	b2da      	uxtb	r2, r3
 800f9dc:	4b42      	ldr	r3, [pc, #264]	; (800fae8 <tcp_receive+0xb24>)
 800f9de:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f9e0:	e0af      	b.n	800fb42 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9e6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9ec:	68db      	ldr	r3, [r3, #12]
 800f9ee:	685b      	ldr	r3, [r3, #4]
 800f9f0:	4a36      	ldr	r2, [pc, #216]	; (800facc <tcp_receive+0xb08>)
 800f9f2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f9f4:	68bb      	ldr	r3, [r7, #8]
 800f9f6:	891b      	ldrh	r3, [r3, #8]
 800f9f8:	461c      	mov	r4, r3
 800f9fa:	68bb      	ldr	r3, [r7, #8]
 800f9fc:	68db      	ldr	r3, [r3, #12]
 800f9fe:	899b      	ldrh	r3, [r3, #12]
 800fa00:	b29b      	uxth	r3, r3
 800fa02:	4618      	mov	r0, r3
 800fa04:	f7fa ff5b 	bl	800a8be <lwip_htons>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	b2db      	uxtb	r3, r3
 800fa0c:	f003 0303 	and.w	r3, r3, #3
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d001      	beq.n	800fa18 <tcp_receive+0xa54>
 800fa14:	2301      	movs	r3, #1
 800fa16:	e000      	b.n	800fa1a <tcp_receive+0xa56>
 800fa18:	2300      	movs	r3, #0
 800fa1a:	191a      	adds	r2, r3, r4
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa20:	441a      	add	r2, r3
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa2a:	461c      	mov	r4, r3
 800fa2c:	68bb      	ldr	r3, [r7, #8]
 800fa2e:	891b      	ldrh	r3, [r3, #8]
 800fa30:	461d      	mov	r5, r3
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	68db      	ldr	r3, [r3, #12]
 800fa36:	899b      	ldrh	r3, [r3, #12]
 800fa38:	b29b      	uxth	r3, r3
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f7fa ff3f 	bl	800a8be <lwip_htons>
 800fa40:	4603      	mov	r3, r0
 800fa42:	b2db      	uxtb	r3, r3
 800fa44:	f003 0303 	and.w	r3, r3, #3
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d001      	beq.n	800fa50 <tcp_receive+0xa8c>
 800fa4c:	2301      	movs	r3, #1
 800fa4e:	e000      	b.n	800fa52 <tcp_receive+0xa8e>
 800fa50:	2300      	movs	r3, #0
 800fa52:	442b      	add	r3, r5
 800fa54:	429c      	cmp	r4, r3
 800fa56:	d206      	bcs.n	800fa66 <tcp_receive+0xaa2>
 800fa58:	4b1e      	ldr	r3, [pc, #120]	; (800fad4 <tcp_receive+0xb10>)
 800fa5a:	f240 622c 	movw	r2, #1580	; 0x62c
 800fa5e:	4923      	ldr	r1, [pc, #140]	; (800faec <tcp_receive+0xb28>)
 800fa60:	481e      	ldr	r0, [pc, #120]	; (800fadc <tcp_receive+0xb18>)
 800fa62:	f006 fe53 	bl	801670c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	891b      	ldrh	r3, [r3, #8]
 800fa6a:	461c      	mov	r4, r3
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	68db      	ldr	r3, [r3, #12]
 800fa70:	899b      	ldrh	r3, [r3, #12]
 800fa72:	b29b      	uxth	r3, r3
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7fa ff22 	bl	800a8be <lwip_htons>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	b2db      	uxtb	r3, r3
 800fa7e:	f003 0303 	and.w	r3, r3, #3
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d001      	beq.n	800fa8a <tcp_receive+0xac6>
 800fa86:	2301      	movs	r3, #1
 800fa88:	e000      	b.n	800fa8c <tcp_receive+0xac8>
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	1919      	adds	r1, r3, r4
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fa92:	b28b      	uxth	r3, r1
 800fa94:	1ad3      	subs	r3, r2, r3
 800fa96:	b29a      	uxth	r2, r3
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	f7fc ff4b 	bl	800c938 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800faa2:	68bb      	ldr	r3, [r7, #8]
 800faa4:	685b      	ldr	r3, [r3, #4]
 800faa6:	891b      	ldrh	r3, [r3, #8]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d028      	beq.n	800fafe <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800faac:	4b0d      	ldr	r3, [pc, #52]	; (800fae4 <tcp_receive+0xb20>)
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d01d      	beq.n	800faf0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800fab4:	4b0b      	ldr	r3, [pc, #44]	; (800fae4 <tcp_receive+0xb20>)
 800fab6:	681a      	ldr	r2, [r3, #0]
 800fab8:	68bb      	ldr	r3, [r7, #8]
 800faba:	685b      	ldr	r3, [r3, #4]
 800fabc:	4619      	mov	r1, r3
 800fabe:	4610      	mov	r0, r2
 800fac0:	f7fc fa60 	bl	800bf84 <pbuf_cat>
 800fac4:	e018      	b.n	800faf8 <tcp_receive+0xb34>
 800fac6:	bf00      	nop
 800fac8:	20000486 	.word	0x20000486
 800facc:	2000047c 	.word	0x2000047c
 800fad0:	2000045c 	.word	0x2000045c
 800fad4:	08018720 	.word	0x08018720
 800fad8:	08018b00 	.word	0x08018b00
 800fadc:	0801876c 	.word	0x0801876c
 800fae0:	08018b3c 	.word	0x08018b3c
 800fae4:	2000048c 	.word	0x2000048c
 800fae8:	20000489 	.word	0x20000489
 800faec:	08018b5c 	.word	0x08018b5c
            } else {
              recv_data = cseg->p;
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	685b      	ldr	r3, [r3, #4]
 800faf4:	4a70      	ldr	r2, [pc, #448]	; (800fcb8 <tcp_receive+0xcf4>)
 800faf6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	2200      	movs	r2, #0
 800fafc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	68db      	ldr	r3, [r3, #12]
 800fb02:	899b      	ldrh	r3, [r3, #12]
 800fb04:	b29b      	uxth	r3, r3
 800fb06:	4618      	mov	r0, r3
 800fb08:	f7fa fed9 	bl	800a8be <lwip_htons>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	b2db      	uxtb	r3, r3
 800fb10:	f003 0301 	and.w	r3, r3, #1
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d00d      	beq.n	800fb34 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fb18:	4b68      	ldr	r3, [pc, #416]	; (800fcbc <tcp_receive+0xcf8>)
 800fb1a:	781b      	ldrb	r3, [r3, #0]
 800fb1c:	f043 0320 	orr.w	r3, r3, #32
 800fb20:	b2da      	uxtb	r2, r3
 800fb22:	4b66      	ldr	r3, [pc, #408]	; (800fcbc <tcp_receive+0xcf8>)
 800fb24:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	7d1b      	ldrb	r3, [r3, #20]
 800fb2a:	2b04      	cmp	r3, #4
 800fb2c:	d102      	bne.n	800fb34 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	2207      	movs	r2, #7
 800fb32:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	681a      	ldr	r2, [r3, #0]
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800fb3c:	68b8      	ldr	r0, [r7, #8]
 800fb3e:	f7fd fbd7 	bl	800d2f0 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d008      	beq.n	800fb5c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb4e:	68db      	ldr	r3, [r3, #12]
 800fb50:	685a      	ldr	r2, [r3, #4]
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800fb56:	429a      	cmp	r2, r3
 800fb58:	f43f af43 	beq.w	800f9e2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	8b5b      	ldrh	r3, [r3, #26]
 800fb60:	f003 0301 	and.w	r3, r3, #1
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d00e      	beq.n	800fb86 <tcp_receive+0xbc2>
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	8b5b      	ldrh	r3, [r3, #26]
 800fb6c:	f023 0301 	bic.w	r3, r3, #1
 800fb70:	b29a      	uxth	r2, r3
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	835a      	strh	r2, [r3, #26]
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	8b5b      	ldrh	r3, [r3, #26]
 800fb7a:	f043 0302 	orr.w	r3, r3, #2
 800fb7e:	b29a      	uxth	r2, r3
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fb84:	e188      	b.n	800fe98 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	8b5b      	ldrh	r3, [r3, #26]
 800fb8a:	f043 0301 	orr.w	r3, r3, #1
 800fb8e:	b29a      	uxth	r2, r3
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fb94:	e180      	b.n	800fe98 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d106      	bne.n	800fbac <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fb9e:	4848      	ldr	r0, [pc, #288]	; (800fcc0 <tcp_receive+0xcfc>)
 800fba0:	f7fd fbbe 	bl	800d320 <tcp_seg_copy>
 800fba4:	4602      	mov	r2, r0
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	675a      	str	r2, [r3, #116]	; 0x74
 800fbaa:	e16d      	b.n	800fe88 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800fbac:	2300      	movs	r3, #0
 800fbae:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fbb4:	63bb      	str	r3, [r7, #56]	; 0x38
 800fbb6:	e157      	b.n	800fe68 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800fbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbba:	68db      	ldr	r3, [r3, #12]
 800fbbc:	685a      	ldr	r2, [r3, #4]
 800fbbe:	4b41      	ldr	r3, [pc, #260]	; (800fcc4 <tcp_receive+0xd00>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	d11d      	bne.n	800fc02 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fbc6:	4b3e      	ldr	r3, [pc, #248]	; (800fcc0 <tcp_receive+0xcfc>)
 800fbc8:	891a      	ldrh	r2, [r3, #8]
 800fbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbcc:	891b      	ldrh	r3, [r3, #8]
 800fbce:	429a      	cmp	r2, r3
 800fbd0:	f240 814f 	bls.w	800fe72 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fbd4:	483a      	ldr	r0, [pc, #232]	; (800fcc0 <tcp_receive+0xcfc>)
 800fbd6:	f7fd fba3 	bl	800d320 <tcp_seg_copy>
 800fbda:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	f000 8149 	beq.w	800fe76 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800fbe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d003      	beq.n	800fbf2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800fbea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbec:	697a      	ldr	r2, [r7, #20]
 800fbee:	601a      	str	r2, [r3, #0]
 800fbf0:	e002      	b.n	800fbf8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	697a      	ldr	r2, [r7, #20]
 800fbf6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800fbf8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fbfa:	6978      	ldr	r0, [r7, #20]
 800fbfc:	f7ff f8de 	bl	800edbc <tcp_oos_insert_segment>
                }
                break;
 800fc00:	e139      	b.n	800fe76 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800fc02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d117      	bne.n	800fc38 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800fc08:	4b2e      	ldr	r3, [pc, #184]	; (800fcc4 <tcp_receive+0xd00>)
 800fc0a:	681a      	ldr	r2, [r3, #0]
 800fc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc0e:	68db      	ldr	r3, [r3, #12]
 800fc10:	685b      	ldr	r3, [r3, #4]
 800fc12:	1ad3      	subs	r3, r2, r3
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	da57      	bge.n	800fcc8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fc18:	4829      	ldr	r0, [pc, #164]	; (800fcc0 <tcp_receive+0xcfc>)
 800fc1a:	f7fd fb81 	bl	800d320 <tcp_seg_copy>
 800fc1e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800fc20:	69bb      	ldr	r3, [r7, #24]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	f000 8129 	beq.w	800fe7a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	69ba      	ldr	r2, [r7, #24]
 800fc2c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800fc2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fc30:	69b8      	ldr	r0, [r7, #24]
 800fc32:	f7ff f8c3 	bl	800edbc <tcp_oos_insert_segment>
                  }
                  break;
 800fc36:	e120      	b.n	800fe7a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800fc38:	4b22      	ldr	r3, [pc, #136]	; (800fcc4 <tcp_receive+0xd00>)
 800fc3a:	681a      	ldr	r2, [r3, #0]
 800fc3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc3e:	68db      	ldr	r3, [r3, #12]
 800fc40:	685b      	ldr	r3, [r3, #4]
 800fc42:	1ad3      	subs	r3, r2, r3
 800fc44:	3b01      	subs	r3, #1
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	db3e      	blt.n	800fcc8 <tcp_receive+0xd04>
 800fc4a:	4b1e      	ldr	r3, [pc, #120]	; (800fcc4 <tcp_receive+0xd00>)
 800fc4c:	681a      	ldr	r2, [r3, #0]
 800fc4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc50:	68db      	ldr	r3, [r3, #12]
 800fc52:	685b      	ldr	r3, [r3, #4]
 800fc54:	1ad3      	subs	r3, r2, r3
 800fc56:	3301      	adds	r3, #1
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	dc35      	bgt.n	800fcc8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fc5c:	4818      	ldr	r0, [pc, #96]	; (800fcc0 <tcp_receive+0xcfc>)
 800fc5e:	f7fd fb5f 	bl	800d320 <tcp_seg_copy>
 800fc62:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800fc64:	69fb      	ldr	r3, [r7, #28]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	f000 8109 	beq.w	800fe7e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800fc6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc6e:	68db      	ldr	r3, [r3, #12]
 800fc70:	685b      	ldr	r3, [r3, #4]
 800fc72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc74:	8912      	ldrh	r2, [r2, #8]
 800fc76:	441a      	add	r2, r3
 800fc78:	4b12      	ldr	r3, [pc, #72]	; (800fcc4 <tcp_receive+0xd00>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	1ad3      	subs	r3, r2, r3
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	dd12      	ble.n	800fca8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800fc82:	4b10      	ldr	r3, [pc, #64]	; (800fcc4 <tcp_receive+0xd00>)
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	b29a      	uxth	r2, r3
 800fc88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc8a:	68db      	ldr	r3, [r3, #12]
 800fc8c:	685b      	ldr	r3, [r3, #4]
 800fc8e:	b29b      	uxth	r3, r3
 800fc90:	1ad3      	subs	r3, r2, r3
 800fc92:	b29a      	uxth	r2, r3
 800fc94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc96:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fc98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc9a:	685a      	ldr	r2, [r3, #4]
 800fc9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc9e:	891b      	ldrh	r3, [r3, #8]
 800fca0:	4619      	mov	r1, r3
 800fca2:	4610      	mov	r0, r2
 800fca4:	f7fb ff26 	bl	800baf4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800fca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcaa:	69fa      	ldr	r2, [r7, #28]
 800fcac:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800fcae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fcb0:	69f8      	ldr	r0, [r7, #28]
 800fcb2:	f7ff f883 	bl	800edbc <tcp_oos_insert_segment>
                  }
                  break;
 800fcb6:	e0e2      	b.n	800fe7e <tcp_receive+0xeba>
 800fcb8:	2000048c 	.word	0x2000048c
 800fcbc:	20000489 	.word	0x20000489
 800fcc0:	2000045c 	.word	0x2000045c
 800fcc4:	2000047c 	.word	0x2000047c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800fcc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcca:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800fccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	f040 80c6 	bne.w	800fe62 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800fcd6:	4b80      	ldr	r3, [pc, #512]	; (800fed8 <tcp_receive+0xf14>)
 800fcd8:	681a      	ldr	r2, [r3, #0]
 800fcda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcdc:	68db      	ldr	r3, [r3, #12]
 800fcde:	685b      	ldr	r3, [r3, #4]
 800fce0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	f340 80bd 	ble.w	800fe62 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcea:	68db      	ldr	r3, [r3, #12]
 800fcec:	899b      	ldrh	r3, [r3, #12]
 800fcee:	b29b      	uxth	r3, r3
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f7fa fde4 	bl	800a8be <lwip_htons>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	b2db      	uxtb	r3, r3
 800fcfa:	f003 0301 	and.w	r3, r3, #1
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	f040 80bf 	bne.w	800fe82 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800fd04:	4875      	ldr	r0, [pc, #468]	; (800fedc <tcp_receive+0xf18>)
 800fd06:	f7fd fb0b 	bl	800d320 <tcp_seg_copy>
 800fd0a:	4602      	mov	r2, r0
 800fd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd0e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	f000 80b6 	beq.w	800fe86 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd1c:	68db      	ldr	r3, [r3, #12]
 800fd1e:	685b      	ldr	r3, [r3, #4]
 800fd20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd22:	8912      	ldrh	r2, [r2, #8]
 800fd24:	441a      	add	r2, r3
 800fd26:	4b6c      	ldr	r3, [pc, #432]	; (800fed8 <tcp_receive+0xf14>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	1ad3      	subs	r3, r2, r3
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	dd12      	ble.n	800fd56 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800fd30:	4b69      	ldr	r3, [pc, #420]	; (800fed8 <tcp_receive+0xf14>)
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	b29a      	uxth	r2, r3
 800fd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd38:	68db      	ldr	r3, [r3, #12]
 800fd3a:	685b      	ldr	r3, [r3, #4]
 800fd3c:	b29b      	uxth	r3, r3
 800fd3e:	1ad3      	subs	r3, r2, r3
 800fd40:	b29a      	uxth	r2, r3
 800fd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd44:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fd46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd48:	685a      	ldr	r2, [r3, #4]
 800fd4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd4c:	891b      	ldrh	r3, [r3, #8]
 800fd4e:	4619      	mov	r1, r3
 800fd50:	4610      	mov	r0, r2
 800fd52:	f7fb fecf 	bl	800baf4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fd56:	4b62      	ldr	r3, [pc, #392]	; (800fee0 <tcp_receive+0xf1c>)
 800fd58:	881b      	ldrh	r3, [r3, #0]
 800fd5a:	461a      	mov	r2, r3
 800fd5c:	4b5e      	ldr	r3, [pc, #376]	; (800fed8 <tcp_receive+0xf14>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	441a      	add	r2, r3
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd66:	6879      	ldr	r1, [r7, #4]
 800fd68:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fd6a:	440b      	add	r3, r1
 800fd6c:	1ad3      	subs	r3, r2, r3
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	f340 8089 	ble.w	800fe86 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	68db      	ldr	r3, [r3, #12]
 800fd7a:	899b      	ldrh	r3, [r3, #12]
 800fd7c:	b29b      	uxth	r3, r3
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f7fa fd9d 	bl	800a8be <lwip_htons>
 800fd84:	4603      	mov	r3, r0
 800fd86:	b2db      	uxtb	r3, r3
 800fd88:	f003 0301 	and.w	r3, r3, #1
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d022      	beq.n	800fdd6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fd90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	68db      	ldr	r3, [r3, #12]
 800fd96:	899b      	ldrh	r3, [r3, #12]
 800fd98:	b29b      	uxth	r3, r3
 800fd9a:	b21b      	sxth	r3, r3
 800fd9c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fda0:	b21c      	sxth	r4, r3
 800fda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	68db      	ldr	r3, [r3, #12]
 800fda8:	899b      	ldrh	r3, [r3, #12]
 800fdaa:	b29b      	uxth	r3, r3
 800fdac:	4618      	mov	r0, r3
 800fdae:	f7fa fd86 	bl	800a8be <lwip_htons>
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	b2db      	uxtb	r3, r3
 800fdb6:	b29b      	uxth	r3, r3
 800fdb8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fdbc:	b29b      	uxth	r3, r3
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	f7fa fd7d 	bl	800a8be <lwip_htons>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	b21b      	sxth	r3, r3
 800fdc8:	4323      	orrs	r3, r4
 800fdca:	b21a      	sxth	r2, r3
 800fdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	68db      	ldr	r3, [r3, #12]
 800fdd2:	b292      	uxth	r2, r2
 800fdd4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdda:	b29a      	uxth	r2, r3
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fde0:	4413      	add	r3, r2
 800fde2:	b299      	uxth	r1, r3
 800fde4:	4b3c      	ldr	r3, [pc, #240]	; (800fed8 <tcp_receive+0xf14>)
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	b29a      	uxth	r2, r3
 800fdea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	1a8a      	subs	r2, r1, r2
 800fdf0:	b292      	uxth	r2, r2
 800fdf2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fdf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	685a      	ldr	r2, [r3, #4]
 800fdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	891b      	ldrh	r3, [r3, #8]
 800fe00:	4619      	mov	r1, r3
 800fe02:	4610      	mov	r0, r2
 800fe04:	f7fb fe76 	bl	800baf4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fe08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	891c      	ldrh	r4, [r3, #8]
 800fe0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	68db      	ldr	r3, [r3, #12]
 800fe14:	899b      	ldrh	r3, [r3, #12]
 800fe16:	b29b      	uxth	r3, r3
 800fe18:	4618      	mov	r0, r3
 800fe1a:	f7fa fd50 	bl	800a8be <lwip_htons>
 800fe1e:	4603      	mov	r3, r0
 800fe20:	b2db      	uxtb	r3, r3
 800fe22:	f003 0303 	and.w	r3, r3, #3
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d001      	beq.n	800fe2e <tcp_receive+0xe6a>
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	e000      	b.n	800fe30 <tcp_receive+0xe6c>
 800fe2e:	2300      	movs	r3, #0
 800fe30:	4423      	add	r3, r4
 800fe32:	b29a      	uxth	r2, r3
 800fe34:	4b2a      	ldr	r3, [pc, #168]	; (800fee0 <tcp_receive+0xf1c>)
 800fe36:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fe38:	4b29      	ldr	r3, [pc, #164]	; (800fee0 <tcp_receive+0xf1c>)
 800fe3a:	881b      	ldrh	r3, [r3, #0]
 800fe3c:	461a      	mov	r2, r3
 800fe3e:	4b26      	ldr	r3, [pc, #152]	; (800fed8 <tcp_receive+0xf14>)
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	441a      	add	r2, r3
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe48:	6879      	ldr	r1, [r7, #4]
 800fe4a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fe4c:	440b      	add	r3, r1
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d019      	beq.n	800fe86 <tcp_receive+0xec2>
 800fe52:	4b24      	ldr	r3, [pc, #144]	; (800fee4 <tcp_receive+0xf20>)
 800fe54:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800fe58:	4923      	ldr	r1, [pc, #140]	; (800fee8 <tcp_receive+0xf24>)
 800fe5a:	4824      	ldr	r0, [pc, #144]	; (800feec <tcp_receive+0xf28>)
 800fe5c:	f006 fc56 	bl	801670c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fe60:	e011      	b.n	800fe86 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fe62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	63bb      	str	r3, [r7, #56]	; 0x38
 800fe68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	f47f aea4 	bne.w	800fbb8 <tcp_receive+0xbf4>
 800fe70:	e00a      	b.n	800fe88 <tcp_receive+0xec4>
                break;
 800fe72:	bf00      	nop
 800fe74:	e008      	b.n	800fe88 <tcp_receive+0xec4>
                break;
 800fe76:	bf00      	nop
 800fe78:	e006      	b.n	800fe88 <tcp_receive+0xec4>
                  break;
 800fe7a:	bf00      	nop
 800fe7c:	e004      	b.n	800fe88 <tcp_receive+0xec4>
                  break;
 800fe7e:	bf00      	nop
 800fe80:	e002      	b.n	800fe88 <tcp_receive+0xec4>
                  break;
 800fe82:	bf00      	nop
 800fe84:	e000      	b.n	800fe88 <tcp_receive+0xec4>
                break;
 800fe86:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f001 fa41 	bl	8011310 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fe8e:	e003      	b.n	800fe98 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fe90:	6878      	ldr	r0, [r7, #4]
 800fe92:	f001 fa3d 	bl	8011310 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fe96:	e01a      	b.n	800fece <tcp_receive+0xf0a>
 800fe98:	e019      	b.n	800fece <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fe9a:	4b0f      	ldr	r3, [pc, #60]	; (800fed8 <tcp_receive+0xf14>)
 800fe9c:	681a      	ldr	r2, [r3, #0]
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fea2:	1ad3      	subs	r3, r2, r3
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	db0a      	blt.n	800febe <tcp_receive+0xefa>
 800fea8:	4b0b      	ldr	r3, [pc, #44]	; (800fed8 <tcp_receive+0xf14>)
 800feaa:	681a      	ldr	r2, [r3, #0]
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feb0:	6879      	ldr	r1, [r7, #4]
 800feb2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800feb4:	440b      	add	r3, r1
 800feb6:	1ad3      	subs	r3, r2, r3
 800feb8:	3301      	adds	r3, #1
 800feba:	2b00      	cmp	r3, #0
 800febc:	dd07      	ble.n	800fece <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	8b5b      	ldrh	r3, [r3, #26]
 800fec2:	f043 0302 	orr.w	r3, r3, #2
 800fec6:	b29a      	uxth	r2, r3
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fecc:	e7ff      	b.n	800fece <tcp_receive+0xf0a>
 800fece:	bf00      	nop
 800fed0:	3750      	adds	r7, #80	; 0x50
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bdb0      	pop	{r4, r5, r7, pc}
 800fed6:	bf00      	nop
 800fed8:	2000047c 	.word	0x2000047c
 800fedc:	2000045c 	.word	0x2000045c
 800fee0:	20000486 	.word	0x20000486
 800fee4:	08018720 	.word	0x08018720
 800fee8:	08018ac8 	.word	0x08018ac8
 800feec:	0801876c 	.word	0x0801876c

0800fef0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fef0:	b480      	push	{r7}
 800fef2:	b083      	sub	sp, #12
 800fef4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fef6:	4b15      	ldr	r3, [pc, #84]	; (800ff4c <tcp_get_next_optbyte+0x5c>)
 800fef8:	881b      	ldrh	r3, [r3, #0]
 800fefa:	1c5a      	adds	r2, r3, #1
 800fefc:	b291      	uxth	r1, r2
 800fefe:	4a13      	ldr	r2, [pc, #76]	; (800ff4c <tcp_get_next_optbyte+0x5c>)
 800ff00:	8011      	strh	r1, [r2, #0]
 800ff02:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ff04:	4b12      	ldr	r3, [pc, #72]	; (800ff50 <tcp_get_next_optbyte+0x60>)
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d004      	beq.n	800ff16 <tcp_get_next_optbyte+0x26>
 800ff0c:	4b11      	ldr	r3, [pc, #68]	; (800ff54 <tcp_get_next_optbyte+0x64>)
 800ff0e:	881b      	ldrh	r3, [r3, #0]
 800ff10:	88fa      	ldrh	r2, [r7, #6]
 800ff12:	429a      	cmp	r2, r3
 800ff14:	d208      	bcs.n	800ff28 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ff16:	4b10      	ldr	r3, [pc, #64]	; (800ff58 <tcp_get_next_optbyte+0x68>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	3314      	adds	r3, #20
 800ff1c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ff1e:	88fb      	ldrh	r3, [r7, #6]
 800ff20:	683a      	ldr	r2, [r7, #0]
 800ff22:	4413      	add	r3, r2
 800ff24:	781b      	ldrb	r3, [r3, #0]
 800ff26:	e00b      	b.n	800ff40 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ff28:	88fb      	ldrh	r3, [r7, #6]
 800ff2a:	b2da      	uxtb	r2, r3
 800ff2c:	4b09      	ldr	r3, [pc, #36]	; (800ff54 <tcp_get_next_optbyte+0x64>)
 800ff2e:	881b      	ldrh	r3, [r3, #0]
 800ff30:	b2db      	uxtb	r3, r3
 800ff32:	1ad3      	subs	r3, r2, r3
 800ff34:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ff36:	4b06      	ldr	r3, [pc, #24]	; (800ff50 <tcp_get_next_optbyte+0x60>)
 800ff38:	681a      	ldr	r2, [r3, #0]
 800ff3a:	797b      	ldrb	r3, [r7, #5]
 800ff3c:	4413      	add	r3, r2
 800ff3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ff40:	4618      	mov	r0, r3
 800ff42:	370c      	adds	r7, #12
 800ff44:	46bd      	mov	sp, r7
 800ff46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4a:	4770      	bx	lr
 800ff4c:	20000478 	.word	0x20000478
 800ff50:	20000474 	.word	0x20000474
 800ff54:	20000472 	.word	0x20000472
 800ff58:	2000046c 	.word	0x2000046c

0800ff5c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b084      	sub	sp, #16
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d106      	bne.n	800ff78 <tcp_parseopt+0x1c>
 800ff6a:	4b31      	ldr	r3, [pc, #196]	; (8010030 <tcp_parseopt+0xd4>)
 800ff6c:	f240 727d 	movw	r2, #1917	; 0x77d
 800ff70:	4930      	ldr	r1, [pc, #192]	; (8010034 <tcp_parseopt+0xd8>)
 800ff72:	4831      	ldr	r0, [pc, #196]	; (8010038 <tcp_parseopt+0xdc>)
 800ff74:	f006 fbca 	bl	801670c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ff78:	4b30      	ldr	r3, [pc, #192]	; (801003c <tcp_parseopt+0xe0>)
 800ff7a:	881b      	ldrh	r3, [r3, #0]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d053      	beq.n	8010028 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ff80:	4b2f      	ldr	r3, [pc, #188]	; (8010040 <tcp_parseopt+0xe4>)
 800ff82:	2200      	movs	r2, #0
 800ff84:	801a      	strh	r2, [r3, #0]
 800ff86:	e043      	b.n	8010010 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800ff88:	f7ff ffb2 	bl	800fef0 <tcp_get_next_optbyte>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ff90:	7bfb      	ldrb	r3, [r7, #15]
 800ff92:	2b01      	cmp	r3, #1
 800ff94:	d03c      	beq.n	8010010 <tcp_parseopt+0xb4>
 800ff96:	2b02      	cmp	r3, #2
 800ff98:	d002      	beq.n	800ffa0 <tcp_parseopt+0x44>
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d03f      	beq.n	801001e <tcp_parseopt+0xc2>
 800ff9e:	e026      	b.n	800ffee <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800ffa0:	f7ff ffa6 	bl	800fef0 <tcp_get_next_optbyte>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	2b04      	cmp	r3, #4
 800ffa8:	d13b      	bne.n	8010022 <tcp_parseopt+0xc6>
 800ffaa:	4b25      	ldr	r3, [pc, #148]	; (8010040 <tcp_parseopt+0xe4>)
 800ffac:	881b      	ldrh	r3, [r3, #0]
 800ffae:	3302      	adds	r3, #2
 800ffb0:	4a22      	ldr	r2, [pc, #136]	; (801003c <tcp_parseopt+0xe0>)
 800ffb2:	8812      	ldrh	r2, [r2, #0]
 800ffb4:	4293      	cmp	r3, r2
 800ffb6:	dc34      	bgt.n	8010022 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ffb8:	f7ff ff9a 	bl	800fef0 <tcp_get_next_optbyte>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	b29b      	uxth	r3, r3
 800ffc0:	021b      	lsls	r3, r3, #8
 800ffc2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ffc4:	f7ff ff94 	bl	800fef0 <tcp_get_next_optbyte>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	b29a      	uxth	r2, r3
 800ffcc:	89bb      	ldrh	r3, [r7, #12]
 800ffce:	4313      	orrs	r3, r2
 800ffd0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ffd2:	89bb      	ldrh	r3, [r7, #12]
 800ffd4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ffd8:	d804      	bhi.n	800ffe4 <tcp_parseopt+0x88>
 800ffda:	89bb      	ldrh	r3, [r7, #12]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d001      	beq.n	800ffe4 <tcp_parseopt+0x88>
 800ffe0:	89ba      	ldrh	r2, [r7, #12]
 800ffe2:	e001      	b.n	800ffe8 <tcp_parseopt+0x8c>
 800ffe4:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800ffec:	e010      	b.n	8010010 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ffee:	f7ff ff7f 	bl	800fef0 <tcp_get_next_optbyte>
 800fff2:	4603      	mov	r3, r0
 800fff4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fff6:	7afb      	ldrb	r3, [r7, #11]
 800fff8:	2b01      	cmp	r3, #1
 800fffa:	d914      	bls.n	8010026 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800fffc:	7afb      	ldrb	r3, [r7, #11]
 800fffe:	b29a      	uxth	r2, r3
 8010000:	4b0f      	ldr	r3, [pc, #60]	; (8010040 <tcp_parseopt+0xe4>)
 8010002:	881b      	ldrh	r3, [r3, #0]
 8010004:	4413      	add	r3, r2
 8010006:	b29b      	uxth	r3, r3
 8010008:	3b02      	subs	r3, #2
 801000a:	b29a      	uxth	r2, r3
 801000c:	4b0c      	ldr	r3, [pc, #48]	; (8010040 <tcp_parseopt+0xe4>)
 801000e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010010:	4b0b      	ldr	r3, [pc, #44]	; (8010040 <tcp_parseopt+0xe4>)
 8010012:	881a      	ldrh	r2, [r3, #0]
 8010014:	4b09      	ldr	r3, [pc, #36]	; (801003c <tcp_parseopt+0xe0>)
 8010016:	881b      	ldrh	r3, [r3, #0]
 8010018:	429a      	cmp	r2, r3
 801001a:	d3b5      	bcc.n	800ff88 <tcp_parseopt+0x2c>
 801001c:	e004      	b.n	8010028 <tcp_parseopt+0xcc>
          return;
 801001e:	bf00      	nop
 8010020:	e002      	b.n	8010028 <tcp_parseopt+0xcc>
            return;
 8010022:	bf00      	nop
 8010024:	e000      	b.n	8010028 <tcp_parseopt+0xcc>
            return;
 8010026:	bf00      	nop
      }
    }
  }
}
 8010028:	3710      	adds	r7, #16
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}
 801002e:	bf00      	nop
 8010030:	08018720 	.word	0x08018720
 8010034:	08018b84 	.word	0x08018b84
 8010038:	0801876c 	.word	0x0801876c
 801003c:	20000470 	.word	0x20000470
 8010040:	20000478 	.word	0x20000478

08010044 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010044:	b480      	push	{r7}
 8010046:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010048:	4b05      	ldr	r3, [pc, #20]	; (8010060 <tcp_trigger_input_pcb_close+0x1c>)
 801004a:	781b      	ldrb	r3, [r3, #0]
 801004c:	f043 0310 	orr.w	r3, r3, #16
 8010050:	b2da      	uxtb	r2, r3
 8010052:	4b03      	ldr	r3, [pc, #12]	; (8010060 <tcp_trigger_input_pcb_close+0x1c>)
 8010054:	701a      	strb	r2, [r3, #0]
}
 8010056:	bf00      	nop
 8010058:	46bd      	mov	sp, r7
 801005a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005e:	4770      	bx	lr
 8010060:	20000489 	.word	0x20000489

08010064 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b084      	sub	sp, #16
 8010068:	af00      	add	r7, sp, #0
 801006a:	60f8      	str	r0, [r7, #12]
 801006c:	60b9      	str	r1, [r7, #8]
 801006e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d00a      	beq.n	801008c <tcp_route+0x28>
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	7a1b      	ldrb	r3, [r3, #8]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d006      	beq.n	801008c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	7a1b      	ldrb	r3, [r3, #8]
 8010082:	4618      	mov	r0, r3
 8010084:	f7fb fb60 	bl	800b748 <netif_get_by_index>
 8010088:	4603      	mov	r3, r0
 801008a:	e003      	b.n	8010094 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801008c:	6878      	ldr	r0, [r7, #4]
 801008e:	f005 f841 	bl	8015114 <ip4_route>
 8010092:	4603      	mov	r3, r0
  }
}
 8010094:	4618      	mov	r0, r3
 8010096:	3710      	adds	r7, #16
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}

0801009c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801009c:	b590      	push	{r4, r7, lr}
 801009e:	b087      	sub	sp, #28
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	60f8      	str	r0, [r7, #12]
 80100a4:	60b9      	str	r1, [r7, #8]
 80100a6:	603b      	str	r3, [r7, #0]
 80100a8:	4613      	mov	r3, r2
 80100aa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d105      	bne.n	80100be <tcp_create_segment+0x22>
 80100b2:	4b44      	ldr	r3, [pc, #272]	; (80101c4 <tcp_create_segment+0x128>)
 80100b4:	22a3      	movs	r2, #163	; 0xa3
 80100b6:	4944      	ldr	r1, [pc, #272]	; (80101c8 <tcp_create_segment+0x12c>)
 80100b8:	4844      	ldr	r0, [pc, #272]	; (80101cc <tcp_create_segment+0x130>)
 80100ba:	f006 fb27 	bl	801670c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d105      	bne.n	80100d0 <tcp_create_segment+0x34>
 80100c4:	4b3f      	ldr	r3, [pc, #252]	; (80101c4 <tcp_create_segment+0x128>)
 80100c6:	22a4      	movs	r2, #164	; 0xa4
 80100c8:	4941      	ldr	r1, [pc, #260]	; (80101d0 <tcp_create_segment+0x134>)
 80100ca:	4840      	ldr	r0, [pc, #256]	; (80101cc <tcp_create_segment+0x130>)
 80100cc:	f006 fb1e 	bl	801670c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80100d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80100d4:	009b      	lsls	r3, r3, #2
 80100d6:	b2db      	uxtb	r3, r3
 80100d8:	f003 0304 	and.w	r3, r3, #4
 80100dc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80100de:	2003      	movs	r0, #3
 80100e0:	f7fb f842 	bl	800b168 <memp_malloc>
 80100e4:	6138      	str	r0, [r7, #16]
 80100e6:	693b      	ldr	r3, [r7, #16]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d104      	bne.n	80100f6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80100ec:	68b8      	ldr	r0, [r7, #8]
 80100ee:	f7fb fe87 	bl	800be00 <pbuf_free>
    return NULL;
 80100f2:	2300      	movs	r3, #0
 80100f4:	e061      	b.n	80101ba <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80100f6:	693b      	ldr	r3, [r7, #16]
 80100f8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80100fc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80100fe:	693b      	ldr	r3, [r7, #16]
 8010100:	2200      	movs	r2, #0
 8010102:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010104:	693b      	ldr	r3, [r7, #16]
 8010106:	68ba      	ldr	r2, [r7, #8]
 8010108:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801010a:	68bb      	ldr	r3, [r7, #8]
 801010c:	891a      	ldrh	r2, [r3, #8]
 801010e:	7dfb      	ldrb	r3, [r7, #23]
 8010110:	b29b      	uxth	r3, r3
 8010112:	429a      	cmp	r2, r3
 8010114:	d205      	bcs.n	8010122 <tcp_create_segment+0x86>
 8010116:	4b2b      	ldr	r3, [pc, #172]	; (80101c4 <tcp_create_segment+0x128>)
 8010118:	22b0      	movs	r2, #176	; 0xb0
 801011a:	492e      	ldr	r1, [pc, #184]	; (80101d4 <tcp_create_segment+0x138>)
 801011c:	482b      	ldr	r0, [pc, #172]	; (80101cc <tcp_create_segment+0x130>)
 801011e:	f006 faf5 	bl	801670c <iprintf>
  seg->len = p->tot_len - optlen;
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	891a      	ldrh	r2, [r3, #8]
 8010126:	7dfb      	ldrb	r3, [r7, #23]
 8010128:	b29b      	uxth	r3, r3
 801012a:	1ad3      	subs	r3, r2, r3
 801012c:	b29a      	uxth	r2, r3
 801012e:	693b      	ldr	r3, [r7, #16]
 8010130:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010132:	2114      	movs	r1, #20
 8010134:	68b8      	ldr	r0, [r7, #8]
 8010136:	f7fb fdcd 	bl	800bcd4 <pbuf_add_header>
 801013a:	4603      	mov	r3, r0
 801013c:	2b00      	cmp	r3, #0
 801013e:	d004      	beq.n	801014a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010140:	6938      	ldr	r0, [r7, #16]
 8010142:	f7fd f8d5 	bl	800d2f0 <tcp_seg_free>
    return NULL;
 8010146:	2300      	movs	r3, #0
 8010148:	e037      	b.n	80101ba <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801014a:	693b      	ldr	r3, [r7, #16]
 801014c:	685b      	ldr	r3, [r3, #4]
 801014e:	685a      	ldr	r2, [r3, #4]
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	8ada      	ldrh	r2, [r3, #22]
 8010158:	693b      	ldr	r3, [r7, #16]
 801015a:	68dc      	ldr	r4, [r3, #12]
 801015c:	4610      	mov	r0, r2
 801015e:	f7fa fbae 	bl	800a8be <lwip_htons>
 8010162:	4603      	mov	r3, r0
 8010164:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	8b1a      	ldrh	r2, [r3, #24]
 801016a:	693b      	ldr	r3, [r7, #16]
 801016c:	68dc      	ldr	r4, [r3, #12]
 801016e:	4610      	mov	r0, r2
 8010170:	f7fa fba5 	bl	800a8be <lwip_htons>
 8010174:	4603      	mov	r3, r0
 8010176:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010178:	693b      	ldr	r3, [r7, #16]
 801017a:	68dc      	ldr	r4, [r3, #12]
 801017c:	6838      	ldr	r0, [r7, #0]
 801017e:	f7fa fbb3 	bl	800a8e8 <lwip_htonl>
 8010182:	4603      	mov	r3, r0
 8010184:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010186:	7dfb      	ldrb	r3, [r7, #23]
 8010188:	089b      	lsrs	r3, r3, #2
 801018a:	b2db      	uxtb	r3, r3
 801018c:	b29b      	uxth	r3, r3
 801018e:	3305      	adds	r3, #5
 8010190:	b29b      	uxth	r3, r3
 8010192:	031b      	lsls	r3, r3, #12
 8010194:	b29a      	uxth	r2, r3
 8010196:	79fb      	ldrb	r3, [r7, #7]
 8010198:	b29b      	uxth	r3, r3
 801019a:	4313      	orrs	r3, r2
 801019c:	b29a      	uxth	r2, r3
 801019e:	693b      	ldr	r3, [r7, #16]
 80101a0:	68dc      	ldr	r4, [r3, #12]
 80101a2:	4610      	mov	r0, r2
 80101a4:	f7fa fb8b 	bl	800a8be <lwip_htons>
 80101a8:	4603      	mov	r3, r0
 80101aa:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80101ac:	693b      	ldr	r3, [r7, #16]
 80101ae:	68db      	ldr	r3, [r3, #12]
 80101b0:	2200      	movs	r2, #0
 80101b2:	749a      	strb	r2, [r3, #18]
 80101b4:	2200      	movs	r2, #0
 80101b6:	74da      	strb	r2, [r3, #19]
  return seg;
 80101b8:	693b      	ldr	r3, [r7, #16]
}
 80101ba:	4618      	mov	r0, r3
 80101bc:	371c      	adds	r7, #28
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd90      	pop	{r4, r7, pc}
 80101c2:	bf00      	nop
 80101c4:	08018ba0 	.word	0x08018ba0
 80101c8:	08018bd4 	.word	0x08018bd4
 80101cc:	08018bf4 	.word	0x08018bf4
 80101d0:	08018c1c 	.word	0x08018c1c
 80101d4:	08018c40 	.word	0x08018c40

080101d8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80101d8:	b590      	push	{r4, r7, lr}
 80101da:	b08b      	sub	sp, #44	; 0x2c
 80101dc:	af02      	add	r7, sp, #8
 80101de:	6078      	str	r0, [r7, #4]
 80101e0:	460b      	mov	r3, r1
 80101e2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80101e4:	2300      	movs	r3, #0
 80101e6:	61fb      	str	r3, [r7, #28]
 80101e8:	2300      	movs	r3, #0
 80101ea:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80101ec:	2300      	movs	r3, #0
 80101ee:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d106      	bne.n	8010204 <tcp_split_unsent_seg+0x2c>
 80101f6:	4b95      	ldr	r3, [pc, #596]	; (801044c <tcp_split_unsent_seg+0x274>)
 80101f8:	f240 324b 	movw	r2, #843	; 0x34b
 80101fc:	4994      	ldr	r1, [pc, #592]	; (8010450 <tcp_split_unsent_seg+0x278>)
 80101fe:	4895      	ldr	r0, [pc, #596]	; (8010454 <tcp_split_unsent_seg+0x27c>)
 8010200:	f006 fa84 	bl	801670c <iprintf>

  useg = pcb->unsent;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010208:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801020a:	697b      	ldr	r3, [r7, #20]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d102      	bne.n	8010216 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010210:	f04f 33ff 	mov.w	r3, #4294967295
 8010214:	e116      	b.n	8010444 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010216:	887b      	ldrh	r3, [r7, #2]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d109      	bne.n	8010230 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801021c:	4b8b      	ldr	r3, [pc, #556]	; (801044c <tcp_split_unsent_seg+0x274>)
 801021e:	f240 3253 	movw	r2, #851	; 0x353
 8010222:	498d      	ldr	r1, [pc, #564]	; (8010458 <tcp_split_unsent_seg+0x280>)
 8010224:	488b      	ldr	r0, [pc, #556]	; (8010454 <tcp_split_unsent_seg+0x27c>)
 8010226:	f006 fa71 	bl	801670c <iprintf>
    return ERR_VAL;
 801022a:	f06f 0305 	mvn.w	r3, #5
 801022e:	e109      	b.n	8010444 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010230:	697b      	ldr	r3, [r7, #20]
 8010232:	891b      	ldrh	r3, [r3, #8]
 8010234:	887a      	ldrh	r2, [r7, #2]
 8010236:	429a      	cmp	r2, r3
 8010238:	d301      	bcc.n	801023e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801023a:	2300      	movs	r3, #0
 801023c:	e102      	b.n	8010444 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010242:	887a      	ldrh	r2, [r7, #2]
 8010244:	429a      	cmp	r2, r3
 8010246:	d906      	bls.n	8010256 <tcp_split_unsent_seg+0x7e>
 8010248:	4b80      	ldr	r3, [pc, #512]	; (801044c <tcp_split_unsent_seg+0x274>)
 801024a:	f240 325b 	movw	r2, #859	; 0x35b
 801024e:	4983      	ldr	r1, [pc, #524]	; (801045c <tcp_split_unsent_seg+0x284>)
 8010250:	4880      	ldr	r0, [pc, #512]	; (8010454 <tcp_split_unsent_seg+0x27c>)
 8010252:	f006 fa5b 	bl	801670c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010256:	697b      	ldr	r3, [r7, #20]
 8010258:	891b      	ldrh	r3, [r3, #8]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d106      	bne.n	801026c <tcp_split_unsent_seg+0x94>
 801025e:	4b7b      	ldr	r3, [pc, #492]	; (801044c <tcp_split_unsent_seg+0x274>)
 8010260:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010264:	497e      	ldr	r1, [pc, #504]	; (8010460 <tcp_split_unsent_seg+0x288>)
 8010266:	487b      	ldr	r0, [pc, #492]	; (8010454 <tcp_split_unsent_seg+0x27c>)
 8010268:	f006 fa50 	bl	801670c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801026c:	697b      	ldr	r3, [r7, #20]
 801026e:	7a9b      	ldrb	r3, [r3, #10]
 8010270:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010272:	7bfb      	ldrb	r3, [r7, #15]
 8010274:	009b      	lsls	r3, r3, #2
 8010276:	b2db      	uxtb	r3, r3
 8010278:	f003 0304 	and.w	r3, r3, #4
 801027c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801027e:	697b      	ldr	r3, [r7, #20]
 8010280:	891a      	ldrh	r2, [r3, #8]
 8010282:	887b      	ldrh	r3, [r7, #2]
 8010284:	1ad3      	subs	r3, r2, r3
 8010286:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010288:	7bbb      	ldrb	r3, [r7, #14]
 801028a:	b29a      	uxth	r2, r3
 801028c:	89bb      	ldrh	r3, [r7, #12]
 801028e:	4413      	add	r3, r2
 8010290:	b29b      	uxth	r3, r3
 8010292:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010296:	4619      	mov	r1, r3
 8010298:	2036      	movs	r0, #54	; 0x36
 801029a:	f7fb fad1 	bl	800b840 <pbuf_alloc>
 801029e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80102a0:	693b      	ldr	r3, [r7, #16]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	f000 80b7 	beq.w	8010416 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80102a8:	697b      	ldr	r3, [r7, #20]
 80102aa:	685b      	ldr	r3, [r3, #4]
 80102ac:	891a      	ldrh	r2, [r3, #8]
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	891b      	ldrh	r3, [r3, #8]
 80102b2:	1ad3      	subs	r3, r2, r3
 80102b4:	b29a      	uxth	r2, r3
 80102b6:	887b      	ldrh	r3, [r7, #2]
 80102b8:	4413      	add	r3, r2
 80102ba:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	6858      	ldr	r0, [r3, #4]
 80102c0:	693b      	ldr	r3, [r7, #16]
 80102c2:	685a      	ldr	r2, [r3, #4]
 80102c4:	7bbb      	ldrb	r3, [r7, #14]
 80102c6:	18d1      	adds	r1, r2, r3
 80102c8:	897b      	ldrh	r3, [r7, #10]
 80102ca:	89ba      	ldrh	r2, [r7, #12]
 80102cc:	f7fb ff92 	bl	800c1f4 <pbuf_copy_partial>
 80102d0:	4603      	mov	r3, r0
 80102d2:	461a      	mov	r2, r3
 80102d4:	89bb      	ldrh	r3, [r7, #12]
 80102d6:	4293      	cmp	r3, r2
 80102d8:	f040 809f 	bne.w	801041a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	68db      	ldr	r3, [r3, #12]
 80102e0:	899b      	ldrh	r3, [r3, #12]
 80102e2:	b29b      	uxth	r3, r3
 80102e4:	4618      	mov	r0, r3
 80102e6:	f7fa faea 	bl	800a8be <lwip_htons>
 80102ea:	4603      	mov	r3, r0
 80102ec:	b2db      	uxtb	r3, r3
 80102ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80102f2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80102f4:	2300      	movs	r3, #0
 80102f6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80102f8:	7efb      	ldrb	r3, [r7, #27]
 80102fa:	f003 0308 	and.w	r3, r3, #8
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d007      	beq.n	8010312 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010302:	7efb      	ldrb	r3, [r7, #27]
 8010304:	f023 0308 	bic.w	r3, r3, #8
 8010308:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801030a:	7ebb      	ldrb	r3, [r7, #26]
 801030c:	f043 0308 	orr.w	r3, r3, #8
 8010310:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010312:	7efb      	ldrb	r3, [r7, #27]
 8010314:	f003 0301 	and.w	r3, r3, #1
 8010318:	2b00      	cmp	r3, #0
 801031a:	d007      	beq.n	801032c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801031c:	7efb      	ldrb	r3, [r7, #27]
 801031e:	f023 0301 	bic.w	r3, r3, #1
 8010322:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010324:	7ebb      	ldrb	r3, [r7, #26]
 8010326:	f043 0301 	orr.w	r3, r3, #1
 801032a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801032c:	697b      	ldr	r3, [r7, #20]
 801032e:	68db      	ldr	r3, [r3, #12]
 8010330:	685b      	ldr	r3, [r3, #4]
 8010332:	4618      	mov	r0, r3
 8010334:	f7fa fad8 	bl	800a8e8 <lwip_htonl>
 8010338:	4602      	mov	r2, r0
 801033a:	887b      	ldrh	r3, [r7, #2]
 801033c:	18d1      	adds	r1, r2, r3
 801033e:	7eba      	ldrb	r2, [r7, #26]
 8010340:	7bfb      	ldrb	r3, [r7, #15]
 8010342:	9300      	str	r3, [sp, #0]
 8010344:	460b      	mov	r3, r1
 8010346:	6939      	ldr	r1, [r7, #16]
 8010348:	6878      	ldr	r0, [r7, #4]
 801034a:	f7ff fea7 	bl	801009c <tcp_create_segment>
 801034e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010350:	69fb      	ldr	r3, [r7, #28]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d063      	beq.n	801041e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010356:	697b      	ldr	r3, [r7, #20]
 8010358:	685b      	ldr	r3, [r3, #4]
 801035a:	4618      	mov	r0, r3
 801035c:	f7fb fdd8 	bl	800bf10 <pbuf_clen>
 8010360:	4603      	mov	r3, r0
 8010362:	461a      	mov	r2, r3
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801036a:	1a9b      	subs	r3, r3, r2
 801036c:	b29a      	uxth	r2, r3
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010374:	697b      	ldr	r3, [r7, #20]
 8010376:	6858      	ldr	r0, [r3, #4]
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	685b      	ldr	r3, [r3, #4]
 801037c:	891a      	ldrh	r2, [r3, #8]
 801037e:	89bb      	ldrh	r3, [r7, #12]
 8010380:	1ad3      	subs	r3, r2, r3
 8010382:	b29b      	uxth	r3, r3
 8010384:	4619      	mov	r1, r3
 8010386:	f7fb fbb5 	bl	800baf4 <pbuf_realloc>
  useg->len -= remainder;
 801038a:	697b      	ldr	r3, [r7, #20]
 801038c:	891a      	ldrh	r2, [r3, #8]
 801038e:	89bb      	ldrh	r3, [r7, #12]
 8010390:	1ad3      	subs	r3, r2, r3
 8010392:	b29a      	uxth	r2, r3
 8010394:	697b      	ldr	r3, [r7, #20]
 8010396:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010398:	697b      	ldr	r3, [r7, #20]
 801039a:	68db      	ldr	r3, [r3, #12]
 801039c:	899b      	ldrh	r3, [r3, #12]
 801039e:	b29c      	uxth	r4, r3
 80103a0:	7efb      	ldrb	r3, [r7, #27]
 80103a2:	b29b      	uxth	r3, r3
 80103a4:	4618      	mov	r0, r3
 80103a6:	f7fa fa8a 	bl	800a8be <lwip_htons>
 80103aa:	4603      	mov	r3, r0
 80103ac:	461a      	mov	r2, r3
 80103ae:	697b      	ldr	r3, [r7, #20]
 80103b0:	68db      	ldr	r3, [r3, #12]
 80103b2:	4322      	orrs	r2, r4
 80103b4:	b292      	uxth	r2, r2
 80103b6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	685b      	ldr	r3, [r3, #4]
 80103bc:	4618      	mov	r0, r3
 80103be:	f7fb fda7 	bl	800bf10 <pbuf_clen>
 80103c2:	4603      	mov	r3, r0
 80103c4:	461a      	mov	r2, r3
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80103cc:	4413      	add	r3, r2
 80103ce:	b29a      	uxth	r2, r3
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80103d6:	69fb      	ldr	r3, [r7, #28]
 80103d8:	685b      	ldr	r3, [r3, #4]
 80103da:	4618      	mov	r0, r3
 80103dc:	f7fb fd98 	bl	800bf10 <pbuf_clen>
 80103e0:	4603      	mov	r3, r0
 80103e2:	461a      	mov	r2, r3
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80103ea:	4413      	add	r3, r2
 80103ec:	b29a      	uxth	r2, r3
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80103f4:	697b      	ldr	r3, [r7, #20]
 80103f6:	681a      	ldr	r2, [r3, #0]
 80103f8:	69fb      	ldr	r3, [r7, #28]
 80103fa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80103fc:	697b      	ldr	r3, [r7, #20]
 80103fe:	69fa      	ldr	r2, [r7, #28]
 8010400:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010402:	69fb      	ldr	r3, [r7, #28]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d103      	bne.n	8010412 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	2200      	movs	r2, #0
 801040e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010412:	2300      	movs	r3, #0
 8010414:	e016      	b.n	8010444 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010416:	bf00      	nop
 8010418:	e002      	b.n	8010420 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801041a:	bf00      	nop
 801041c:	e000      	b.n	8010420 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801041e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010420:	69fb      	ldr	r3, [r7, #28]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d006      	beq.n	8010434 <tcp_split_unsent_seg+0x25c>
 8010426:	4b09      	ldr	r3, [pc, #36]	; (801044c <tcp_split_unsent_seg+0x274>)
 8010428:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801042c:	490d      	ldr	r1, [pc, #52]	; (8010464 <tcp_split_unsent_seg+0x28c>)
 801042e:	4809      	ldr	r0, [pc, #36]	; (8010454 <tcp_split_unsent_seg+0x27c>)
 8010430:	f006 f96c 	bl	801670c <iprintf>
  if (p != NULL) {
 8010434:	693b      	ldr	r3, [r7, #16]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d002      	beq.n	8010440 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801043a:	6938      	ldr	r0, [r7, #16]
 801043c:	f7fb fce0 	bl	800be00 <pbuf_free>
  }

  return ERR_MEM;
 8010440:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010444:	4618      	mov	r0, r3
 8010446:	3724      	adds	r7, #36	; 0x24
 8010448:	46bd      	mov	sp, r7
 801044a:	bd90      	pop	{r4, r7, pc}
 801044c:	08018ba0 	.word	0x08018ba0
 8010450:	08018f34 	.word	0x08018f34
 8010454:	08018bf4 	.word	0x08018bf4
 8010458:	08018f58 	.word	0x08018f58
 801045c:	08018f7c 	.word	0x08018f7c
 8010460:	08018f8c 	.word	0x08018f8c
 8010464:	08018f9c 	.word	0x08018f9c

08010468 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010468:	b590      	push	{r4, r7, lr}
 801046a:	b085      	sub	sp, #20
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d106      	bne.n	8010484 <tcp_send_fin+0x1c>
 8010476:	4b21      	ldr	r3, [pc, #132]	; (80104fc <tcp_send_fin+0x94>)
 8010478:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801047c:	4920      	ldr	r1, [pc, #128]	; (8010500 <tcp_send_fin+0x98>)
 801047e:	4821      	ldr	r0, [pc, #132]	; (8010504 <tcp_send_fin+0x9c>)
 8010480:	f006 f944 	bl	801670c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010488:	2b00      	cmp	r3, #0
 801048a:	d02e      	beq.n	80104ea <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010490:	60fb      	str	r3, [r7, #12]
 8010492:	e002      	b.n	801049a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d1f8      	bne.n	8010494 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	68db      	ldr	r3, [r3, #12]
 80104a6:	899b      	ldrh	r3, [r3, #12]
 80104a8:	b29b      	uxth	r3, r3
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7fa fa07 	bl	800a8be <lwip_htons>
 80104b0:	4603      	mov	r3, r0
 80104b2:	b2db      	uxtb	r3, r3
 80104b4:	f003 0307 	and.w	r3, r3, #7
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d116      	bne.n	80104ea <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	68db      	ldr	r3, [r3, #12]
 80104c0:	899b      	ldrh	r3, [r3, #12]
 80104c2:	b29c      	uxth	r4, r3
 80104c4:	2001      	movs	r0, #1
 80104c6:	f7fa f9fa 	bl	800a8be <lwip_htons>
 80104ca:	4603      	mov	r3, r0
 80104cc:	461a      	mov	r2, r3
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	68db      	ldr	r3, [r3, #12]
 80104d2:	4322      	orrs	r2, r4
 80104d4:	b292      	uxth	r2, r2
 80104d6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	8b5b      	ldrh	r3, [r3, #26]
 80104dc:	f043 0320 	orr.w	r3, r3, #32
 80104e0:	b29a      	uxth	r2, r3
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80104e6:	2300      	movs	r3, #0
 80104e8:	e004      	b.n	80104f4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80104ea:	2101      	movs	r1, #1
 80104ec:	6878      	ldr	r0, [r7, #4]
 80104ee:	f000 f80b 	bl	8010508 <tcp_enqueue_flags>
 80104f2:	4603      	mov	r3, r0
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3714      	adds	r7, #20
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd90      	pop	{r4, r7, pc}
 80104fc:	08018ba0 	.word	0x08018ba0
 8010500:	08018fa8 	.word	0x08018fa8
 8010504:	08018bf4 	.word	0x08018bf4

08010508 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010508:	b580      	push	{r7, lr}
 801050a:	b08a      	sub	sp, #40	; 0x28
 801050c:	af02      	add	r7, sp, #8
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	460b      	mov	r3, r1
 8010512:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010514:	2300      	movs	r3, #0
 8010516:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010518:	2300      	movs	r3, #0
 801051a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801051c:	78fb      	ldrb	r3, [r7, #3]
 801051e:	f003 0303 	and.w	r3, r3, #3
 8010522:	2b00      	cmp	r3, #0
 8010524:	d106      	bne.n	8010534 <tcp_enqueue_flags+0x2c>
 8010526:	4b67      	ldr	r3, [pc, #412]	; (80106c4 <tcp_enqueue_flags+0x1bc>)
 8010528:	f240 4212 	movw	r2, #1042	; 0x412
 801052c:	4966      	ldr	r1, [pc, #408]	; (80106c8 <tcp_enqueue_flags+0x1c0>)
 801052e:	4867      	ldr	r0, [pc, #412]	; (80106cc <tcp_enqueue_flags+0x1c4>)
 8010530:	f006 f8ec 	bl	801670c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d106      	bne.n	8010548 <tcp_enqueue_flags+0x40>
 801053a:	4b62      	ldr	r3, [pc, #392]	; (80106c4 <tcp_enqueue_flags+0x1bc>)
 801053c:	f240 4213 	movw	r2, #1043	; 0x413
 8010540:	4963      	ldr	r1, [pc, #396]	; (80106d0 <tcp_enqueue_flags+0x1c8>)
 8010542:	4862      	ldr	r0, [pc, #392]	; (80106cc <tcp_enqueue_flags+0x1c4>)
 8010544:	f006 f8e2 	bl	801670c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010548:	78fb      	ldrb	r3, [r7, #3]
 801054a:	f003 0302 	and.w	r3, r3, #2
 801054e:	2b00      	cmp	r3, #0
 8010550:	d001      	beq.n	8010556 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010552:	2301      	movs	r3, #1
 8010554:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010556:	7ffb      	ldrb	r3, [r7, #31]
 8010558:	009b      	lsls	r3, r3, #2
 801055a:	b2db      	uxtb	r3, r3
 801055c:	f003 0304 	and.w	r3, r3, #4
 8010560:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010562:	7dfb      	ldrb	r3, [r7, #23]
 8010564:	b29b      	uxth	r3, r3
 8010566:	f44f 7220 	mov.w	r2, #640	; 0x280
 801056a:	4619      	mov	r1, r3
 801056c:	2036      	movs	r0, #54	; 0x36
 801056e:	f7fb f967 	bl	800b840 <pbuf_alloc>
 8010572:	6138      	str	r0, [r7, #16]
 8010574:	693b      	ldr	r3, [r7, #16]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d109      	bne.n	801058e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	8b5b      	ldrh	r3, [r3, #26]
 801057e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010582:	b29a      	uxth	r2, r3
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010588:	f04f 33ff 	mov.w	r3, #4294967295
 801058c:	e095      	b.n	80106ba <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	895a      	ldrh	r2, [r3, #10]
 8010592:	7dfb      	ldrb	r3, [r7, #23]
 8010594:	b29b      	uxth	r3, r3
 8010596:	429a      	cmp	r2, r3
 8010598:	d206      	bcs.n	80105a8 <tcp_enqueue_flags+0xa0>
 801059a:	4b4a      	ldr	r3, [pc, #296]	; (80106c4 <tcp_enqueue_flags+0x1bc>)
 801059c:	f240 423a 	movw	r2, #1082	; 0x43a
 80105a0:	494c      	ldr	r1, [pc, #304]	; (80106d4 <tcp_enqueue_flags+0x1cc>)
 80105a2:	484a      	ldr	r0, [pc, #296]	; (80106cc <tcp_enqueue_flags+0x1c4>)
 80105a4:	f006 f8b2 	bl	801670c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80105ac:	78fa      	ldrb	r2, [r7, #3]
 80105ae:	7ffb      	ldrb	r3, [r7, #31]
 80105b0:	9300      	str	r3, [sp, #0]
 80105b2:	460b      	mov	r3, r1
 80105b4:	6939      	ldr	r1, [r7, #16]
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f7ff fd70 	bl	801009c <tcp_create_segment>
 80105bc:	60f8      	str	r0, [r7, #12]
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d109      	bne.n	80105d8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	8b5b      	ldrh	r3, [r3, #26]
 80105c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105cc:	b29a      	uxth	r2, r3
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80105d2:	f04f 33ff 	mov.w	r3, #4294967295
 80105d6:	e070      	b.n	80106ba <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	68db      	ldr	r3, [r3, #12]
 80105dc:	f003 0303 	and.w	r3, r3, #3
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d006      	beq.n	80105f2 <tcp_enqueue_flags+0xea>
 80105e4:	4b37      	ldr	r3, [pc, #220]	; (80106c4 <tcp_enqueue_flags+0x1bc>)
 80105e6:	f240 4242 	movw	r2, #1090	; 0x442
 80105ea:	493b      	ldr	r1, [pc, #236]	; (80106d8 <tcp_enqueue_flags+0x1d0>)
 80105ec:	4837      	ldr	r0, [pc, #220]	; (80106cc <tcp_enqueue_flags+0x1c4>)
 80105ee:	f006 f88d 	bl	801670c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	891b      	ldrh	r3, [r3, #8]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d006      	beq.n	8010608 <tcp_enqueue_flags+0x100>
 80105fa:	4b32      	ldr	r3, [pc, #200]	; (80106c4 <tcp_enqueue_flags+0x1bc>)
 80105fc:	f240 4243 	movw	r2, #1091	; 0x443
 8010600:	4936      	ldr	r1, [pc, #216]	; (80106dc <tcp_enqueue_flags+0x1d4>)
 8010602:	4832      	ldr	r0, [pc, #200]	; (80106cc <tcp_enqueue_flags+0x1c4>)
 8010604:	f006 f882 	bl	801670c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801060c:	2b00      	cmp	r3, #0
 801060e:	d103      	bne.n	8010618 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	68fa      	ldr	r2, [r7, #12]
 8010614:	66da      	str	r2, [r3, #108]	; 0x6c
 8010616:	e00d      	b.n	8010634 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801061c:	61bb      	str	r3, [r7, #24]
 801061e:	e002      	b.n	8010626 <tcp_enqueue_flags+0x11e>
 8010620:	69bb      	ldr	r3, [r7, #24]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	61bb      	str	r3, [r7, #24]
 8010626:	69bb      	ldr	r3, [r7, #24]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d1f8      	bne.n	8010620 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801062e:	69bb      	ldr	r3, [r7, #24]
 8010630:	68fa      	ldr	r2, [r7, #12]
 8010632:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2200      	movs	r2, #0
 8010638:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801063c:	78fb      	ldrb	r3, [r7, #3]
 801063e:	f003 0302 	and.w	r3, r3, #2
 8010642:	2b00      	cmp	r3, #0
 8010644:	d104      	bne.n	8010650 <tcp_enqueue_flags+0x148>
 8010646:	78fb      	ldrb	r3, [r7, #3]
 8010648:	f003 0301 	and.w	r3, r3, #1
 801064c:	2b00      	cmp	r3, #0
 801064e:	d004      	beq.n	801065a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010654:	1c5a      	adds	r2, r3, #1
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801065a:	78fb      	ldrb	r3, [r7, #3]
 801065c:	f003 0301 	and.w	r3, r3, #1
 8010660:	2b00      	cmp	r3, #0
 8010662:	d006      	beq.n	8010672 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	8b5b      	ldrh	r3, [r3, #26]
 8010668:	f043 0320 	orr.w	r3, r3, #32
 801066c:	b29a      	uxth	r2, r3
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	685b      	ldr	r3, [r3, #4]
 8010676:	4618      	mov	r0, r3
 8010678:	f7fb fc4a 	bl	800bf10 <pbuf_clen>
 801067c:	4603      	mov	r3, r0
 801067e:	461a      	mov	r2, r3
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010686:	4413      	add	r3, r2
 8010688:	b29a      	uxth	r2, r3
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010696:	2b00      	cmp	r3, #0
 8010698:	d00e      	beq.n	80106b8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d10a      	bne.n	80106b8 <tcp_enqueue_flags+0x1b0>
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d106      	bne.n	80106b8 <tcp_enqueue_flags+0x1b0>
 80106aa:	4b06      	ldr	r3, [pc, #24]	; (80106c4 <tcp_enqueue_flags+0x1bc>)
 80106ac:	f240 4266 	movw	r2, #1126	; 0x466
 80106b0:	490b      	ldr	r1, [pc, #44]	; (80106e0 <tcp_enqueue_flags+0x1d8>)
 80106b2:	4806      	ldr	r0, [pc, #24]	; (80106cc <tcp_enqueue_flags+0x1c4>)
 80106b4:	f006 f82a 	bl	801670c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80106b8:	2300      	movs	r3, #0
}
 80106ba:	4618      	mov	r0, r3
 80106bc:	3720      	adds	r7, #32
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}
 80106c2:	bf00      	nop
 80106c4:	08018ba0 	.word	0x08018ba0
 80106c8:	08018fc4 	.word	0x08018fc4
 80106cc:	08018bf4 	.word	0x08018bf4
 80106d0:	0801901c 	.word	0x0801901c
 80106d4:	0801903c 	.word	0x0801903c
 80106d8:	08019078 	.word	0x08019078
 80106dc:	08019090 	.word	0x08019090
 80106e0:	080190bc 	.word	0x080190bc

080106e4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80106e4:	b5b0      	push	{r4, r5, r7, lr}
 80106e6:	b08a      	sub	sp, #40	; 0x28
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d106      	bne.n	8010700 <tcp_output+0x1c>
 80106f2:	4ba0      	ldr	r3, [pc, #640]	; (8010974 <tcp_output+0x290>)
 80106f4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80106f8:	499f      	ldr	r1, [pc, #636]	; (8010978 <tcp_output+0x294>)
 80106fa:	48a0      	ldr	r0, [pc, #640]	; (801097c <tcp_output+0x298>)
 80106fc:	f006 f806 	bl	801670c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	7d1b      	ldrb	r3, [r3, #20]
 8010704:	2b01      	cmp	r3, #1
 8010706:	d106      	bne.n	8010716 <tcp_output+0x32>
 8010708:	4b9a      	ldr	r3, [pc, #616]	; (8010974 <tcp_output+0x290>)
 801070a:	f240 42e4 	movw	r2, #1252	; 0x4e4
 801070e:	499c      	ldr	r1, [pc, #624]	; (8010980 <tcp_output+0x29c>)
 8010710:	489a      	ldr	r0, [pc, #616]	; (801097c <tcp_output+0x298>)
 8010712:	f005 fffb 	bl	801670c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010716:	4b9b      	ldr	r3, [pc, #620]	; (8010984 <tcp_output+0x2a0>)
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	687a      	ldr	r2, [r7, #4]
 801071c:	429a      	cmp	r2, r3
 801071e:	d101      	bne.n	8010724 <tcp_output+0x40>
    return ERR_OK;
 8010720:	2300      	movs	r3, #0
 8010722:	e1d2      	b.n	8010aca <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010730:	429a      	cmp	r2, r3
 8010732:	d203      	bcs.n	801073c <tcp_output+0x58>
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801073a:	e002      	b.n	8010742 <tcp_output+0x5e>
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010742:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010748:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801074a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801074c:	2b00      	cmp	r3, #0
 801074e:	d10b      	bne.n	8010768 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	8b5b      	ldrh	r3, [r3, #26]
 8010754:	f003 0302 	and.w	r3, r3, #2
 8010758:	2b00      	cmp	r3, #0
 801075a:	f000 81a9 	beq.w	8010ab0 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801075e:	6878      	ldr	r0, [r7, #4]
 8010760:	f000 fdd6 	bl	8011310 <tcp_send_empty_ack>
 8010764:	4603      	mov	r3, r0
 8010766:	e1b0      	b.n	8010aca <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010768:	6879      	ldr	r1, [r7, #4]
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	3304      	adds	r3, #4
 801076e:	461a      	mov	r2, r3
 8010770:	6878      	ldr	r0, [r7, #4]
 8010772:	f7ff fc77 	bl	8010064 <tcp_route>
 8010776:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010778:	697b      	ldr	r3, [r7, #20]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d102      	bne.n	8010784 <tcp_output+0xa0>
    return ERR_RTE;
 801077e:	f06f 0303 	mvn.w	r3, #3
 8010782:	e1a2      	b.n	8010aca <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d003      	beq.n	8010792 <tcp_output+0xae>
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d111      	bne.n	80107b6 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d002      	beq.n	801079e <tcp_output+0xba>
 8010798:	697b      	ldr	r3, [r7, #20]
 801079a:	3304      	adds	r3, #4
 801079c:	e000      	b.n	80107a0 <tcp_output+0xbc>
 801079e:	2300      	movs	r3, #0
 80107a0:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80107a2:	693b      	ldr	r3, [r7, #16]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d102      	bne.n	80107ae <tcp_output+0xca>
      return ERR_RTE;
 80107a8:	f06f 0303 	mvn.w	r3, #3
 80107ac:	e18d      	b.n	8010aca <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	681a      	ldr	r2, [r3, #0]
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80107b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107b8:	68db      	ldr	r3, [r3, #12]
 80107ba:	685b      	ldr	r3, [r3, #4]
 80107bc:	4618      	mov	r0, r3
 80107be:	f7fa f893 	bl	800a8e8 <lwip_htonl>
 80107c2:	4602      	mov	r2, r0
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107c8:	1ad3      	subs	r3, r2, r3
 80107ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107cc:	8912      	ldrh	r2, [r2, #8]
 80107ce:	4413      	add	r3, r2
 80107d0:	69ba      	ldr	r2, [r7, #24]
 80107d2:	429a      	cmp	r2, r3
 80107d4:	d227      	bcs.n	8010826 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80107dc:	461a      	mov	r2, r3
 80107de:	69bb      	ldr	r3, [r7, #24]
 80107e0:	4293      	cmp	r3, r2
 80107e2:	d114      	bne.n	801080e <tcp_output+0x12a>
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d110      	bne.n	801080e <tcp_output+0x12a>
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d10b      	bne.n	801080e <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	2200      	movs	r2, #0
 80107fa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	2201      	movs	r2, #1
 8010802:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	2200      	movs	r2, #0
 801080a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	8b5b      	ldrh	r3, [r3, #26]
 8010812:	f003 0302 	and.w	r3, r3, #2
 8010816:	2b00      	cmp	r3, #0
 8010818:	f000 814c 	beq.w	8010ab4 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 801081c:	6878      	ldr	r0, [r7, #4]
 801081e:	f000 fd77 	bl	8011310 <tcp_send_empty_ack>
 8010822:	4603      	mov	r3, r0
 8010824:	e151      	b.n	8010aca <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	2200      	movs	r2, #0
 801082a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010832:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010834:	6a3b      	ldr	r3, [r7, #32]
 8010836:	2b00      	cmp	r3, #0
 8010838:	f000 811b 	beq.w	8010a72 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 801083c:	e002      	b.n	8010844 <tcp_output+0x160>
 801083e:	6a3b      	ldr	r3, [r7, #32]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	623b      	str	r3, [r7, #32]
 8010844:	6a3b      	ldr	r3, [r7, #32]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d1f8      	bne.n	801083e <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801084c:	e111      	b.n	8010a72 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801084e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010850:	68db      	ldr	r3, [r3, #12]
 8010852:	899b      	ldrh	r3, [r3, #12]
 8010854:	b29b      	uxth	r3, r3
 8010856:	4618      	mov	r0, r3
 8010858:	f7fa f831 	bl	800a8be <lwip_htons>
 801085c:	4603      	mov	r3, r0
 801085e:	b2db      	uxtb	r3, r3
 8010860:	f003 0304 	and.w	r3, r3, #4
 8010864:	2b00      	cmp	r3, #0
 8010866:	d006      	beq.n	8010876 <tcp_output+0x192>
 8010868:	4b42      	ldr	r3, [pc, #264]	; (8010974 <tcp_output+0x290>)
 801086a:	f240 5237 	movw	r2, #1335	; 0x537
 801086e:	4946      	ldr	r1, [pc, #280]	; (8010988 <tcp_output+0x2a4>)
 8010870:	4842      	ldr	r0, [pc, #264]	; (801097c <tcp_output+0x298>)
 8010872:	f005 ff4b 	bl	801670c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801087a:	2b00      	cmp	r3, #0
 801087c:	d01f      	beq.n	80108be <tcp_output+0x1da>
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	8b5b      	ldrh	r3, [r3, #26]
 8010882:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010886:	2b00      	cmp	r3, #0
 8010888:	d119      	bne.n	80108be <tcp_output+0x1da>
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801088e:	2b00      	cmp	r3, #0
 8010890:	d00b      	beq.n	80108aa <tcp_output+0x1c6>
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d110      	bne.n	80108be <tcp_output+0x1da>
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80108a0:	891a      	ldrh	r2, [r3, #8]
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80108a6:	429a      	cmp	r2, r3
 80108a8:	d209      	bcs.n	80108be <tcp_output+0x1da>
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d004      	beq.n	80108be <tcp_output+0x1da>
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80108ba:	2b08      	cmp	r3, #8
 80108bc:	d901      	bls.n	80108c2 <tcp_output+0x1de>
 80108be:	2301      	movs	r3, #1
 80108c0:	e000      	b.n	80108c4 <tcp_output+0x1e0>
 80108c2:	2300      	movs	r3, #0
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d106      	bne.n	80108d6 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	8b5b      	ldrh	r3, [r3, #26]
 80108cc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	f000 80e3 	beq.w	8010a9c <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	7d1b      	ldrb	r3, [r3, #20]
 80108da:	2b02      	cmp	r3, #2
 80108dc:	d00d      	beq.n	80108fa <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80108de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e0:	68db      	ldr	r3, [r3, #12]
 80108e2:	899b      	ldrh	r3, [r3, #12]
 80108e4:	b29c      	uxth	r4, r3
 80108e6:	2010      	movs	r0, #16
 80108e8:	f7f9 ffe9 	bl	800a8be <lwip_htons>
 80108ec:	4603      	mov	r3, r0
 80108ee:	461a      	mov	r2, r3
 80108f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f2:	68db      	ldr	r3, [r3, #12]
 80108f4:	4322      	orrs	r2, r4
 80108f6:	b292      	uxth	r2, r2
 80108f8:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80108fa:	697a      	ldr	r2, [r7, #20]
 80108fc:	6879      	ldr	r1, [r7, #4]
 80108fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010900:	f000 f908 	bl	8010b14 <tcp_output_segment>
 8010904:	4603      	mov	r3, r0
 8010906:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d009      	beq.n	8010924 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	8b5b      	ldrh	r3, [r3, #26]
 8010914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010918:	b29a      	uxth	r2, r3
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	835a      	strh	r2, [r3, #26]
      return err;
 801091e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010922:	e0d2      	b.n	8010aca <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010926:	681a      	ldr	r2, [r3, #0]
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	7d1b      	ldrb	r3, [r3, #20]
 8010930:	2b02      	cmp	r3, #2
 8010932:	d006      	beq.n	8010942 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	8b5b      	ldrh	r3, [r3, #26]
 8010938:	f023 0303 	bic.w	r3, r3, #3
 801093c:	b29a      	uxth	r2, r3
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010944:	68db      	ldr	r3, [r3, #12]
 8010946:	685b      	ldr	r3, [r3, #4]
 8010948:	4618      	mov	r0, r3
 801094a:	f7f9 ffcd 	bl	800a8e8 <lwip_htonl>
 801094e:	4604      	mov	r4, r0
 8010950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010952:	891b      	ldrh	r3, [r3, #8]
 8010954:	461d      	mov	r5, r3
 8010956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010958:	68db      	ldr	r3, [r3, #12]
 801095a:	899b      	ldrh	r3, [r3, #12]
 801095c:	b29b      	uxth	r3, r3
 801095e:	4618      	mov	r0, r3
 8010960:	f7f9 ffad 	bl	800a8be <lwip_htons>
 8010964:	4603      	mov	r3, r0
 8010966:	b2db      	uxtb	r3, r3
 8010968:	f003 0303 	and.w	r3, r3, #3
 801096c:	2b00      	cmp	r3, #0
 801096e:	d00d      	beq.n	801098c <tcp_output+0x2a8>
 8010970:	2301      	movs	r3, #1
 8010972:	e00c      	b.n	801098e <tcp_output+0x2aa>
 8010974:	08018ba0 	.word	0x08018ba0
 8010978:	080190e4 	.word	0x080190e4
 801097c:	08018bf4 	.word	0x08018bf4
 8010980:	080190fc 	.word	0x080190fc
 8010984:	20007b10 	.word	0x20007b10
 8010988:	08019124 	.word	0x08019124
 801098c:	2300      	movs	r3, #0
 801098e:	442b      	add	r3, r5
 8010990:	4423      	add	r3, r4
 8010992:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	1ad3      	subs	r3, r2, r3
 801099c:	2b00      	cmp	r3, #0
 801099e:	da02      	bge.n	80109a6 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	68ba      	ldr	r2, [r7, #8]
 80109a4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80109a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109a8:	891b      	ldrh	r3, [r3, #8]
 80109aa:	461c      	mov	r4, r3
 80109ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ae:	68db      	ldr	r3, [r3, #12]
 80109b0:	899b      	ldrh	r3, [r3, #12]
 80109b2:	b29b      	uxth	r3, r3
 80109b4:	4618      	mov	r0, r3
 80109b6:	f7f9 ff82 	bl	800a8be <lwip_htons>
 80109ba:	4603      	mov	r3, r0
 80109bc:	b2db      	uxtb	r3, r3
 80109be:	f003 0303 	and.w	r3, r3, #3
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d001      	beq.n	80109ca <tcp_output+0x2e6>
 80109c6:	2301      	movs	r3, #1
 80109c8:	e000      	b.n	80109cc <tcp_output+0x2e8>
 80109ca:	2300      	movs	r3, #0
 80109cc:	4423      	add	r3, r4
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d049      	beq.n	8010a66 <tcp_output+0x382>
      seg->next = NULL;
 80109d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d4:	2200      	movs	r2, #0
 80109d6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d105      	bne.n	80109ec <tcp_output+0x308>
        pcb->unacked = seg;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109e4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80109e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e8:	623b      	str	r3, [r7, #32]
 80109ea:	e03f      	b.n	8010a6c <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80109ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ee:	68db      	ldr	r3, [r3, #12]
 80109f0:	685b      	ldr	r3, [r3, #4]
 80109f2:	4618      	mov	r0, r3
 80109f4:	f7f9 ff78 	bl	800a8e8 <lwip_htonl>
 80109f8:	4604      	mov	r4, r0
 80109fa:	6a3b      	ldr	r3, [r7, #32]
 80109fc:	68db      	ldr	r3, [r3, #12]
 80109fe:	685b      	ldr	r3, [r3, #4]
 8010a00:	4618      	mov	r0, r3
 8010a02:	f7f9 ff71 	bl	800a8e8 <lwip_htonl>
 8010a06:	4603      	mov	r3, r0
 8010a08:	1ae3      	subs	r3, r4, r3
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	da24      	bge.n	8010a58 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	3370      	adds	r3, #112	; 0x70
 8010a12:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010a14:	e002      	b.n	8010a1c <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010a16:	69fb      	ldr	r3, [r7, #28]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010a1c:	69fb      	ldr	r3, [r7, #28]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d011      	beq.n	8010a48 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010a24:	69fb      	ldr	r3, [r7, #28]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	68db      	ldr	r3, [r3, #12]
 8010a2a:	685b      	ldr	r3, [r3, #4]
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f7f9 ff5b 	bl	800a8e8 <lwip_htonl>
 8010a32:	4604      	mov	r4, r0
 8010a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a36:	68db      	ldr	r3, [r3, #12]
 8010a38:	685b      	ldr	r3, [r3, #4]
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	f7f9 ff54 	bl	800a8e8 <lwip_htonl>
 8010a40:	4603      	mov	r3, r0
 8010a42:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	dbe6      	blt.n	8010a16 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8010a48:	69fb      	ldr	r3, [r7, #28]
 8010a4a:	681a      	ldr	r2, [r3, #0]
 8010a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a4e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010a50:	69fb      	ldr	r3, [r7, #28]
 8010a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a54:	601a      	str	r2, [r3, #0]
 8010a56:	e009      	b.n	8010a6c <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010a58:	6a3b      	ldr	r3, [r7, #32]
 8010a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a5c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010a5e:	6a3b      	ldr	r3, [r7, #32]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	623b      	str	r3, [r7, #32]
 8010a64:	e002      	b.n	8010a6c <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010a66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010a68:	f7fc fc42 	bl	800d2f0 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a70:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8010a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d012      	beq.n	8010a9e <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a7a:	68db      	ldr	r3, [r3, #12]
 8010a7c:	685b      	ldr	r3, [r3, #4]
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f7f9 ff32 	bl	800a8e8 <lwip_htonl>
 8010a84:	4602      	mov	r2, r0
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a8a:	1ad3      	subs	r3, r2, r3
 8010a8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a8e:	8912      	ldrh	r2, [r2, #8]
 8010a90:	4413      	add	r3, r2
  while (seg != NULL &&
 8010a92:	69ba      	ldr	r2, [r7, #24]
 8010a94:	429a      	cmp	r2, r3
 8010a96:	f4bf aeda 	bcs.w	801084e <tcp_output+0x16a>
 8010a9a:	e000      	b.n	8010a9e <tcp_output+0x3ba>
      break;
 8010a9c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d108      	bne.n	8010ab8 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8010aae:	e004      	b.n	8010aba <tcp_output+0x3d6>
    goto output_done;
 8010ab0:	bf00      	nop
 8010ab2:	e002      	b.n	8010aba <tcp_output+0x3d6>
    goto output_done;
 8010ab4:	bf00      	nop
 8010ab6:	e000      	b.n	8010aba <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010ab8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	8b5b      	ldrh	r3, [r3, #26]
 8010abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ac2:	b29a      	uxth	r2, r3
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010ac8:	2300      	movs	r3, #0
}
 8010aca:	4618      	mov	r0, r3
 8010acc:	3728      	adds	r7, #40	; 0x28
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bdb0      	pop	{r4, r5, r7, pc}
 8010ad2:	bf00      	nop

08010ad4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b082      	sub	sp, #8
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d106      	bne.n	8010af0 <tcp_output_segment_busy+0x1c>
 8010ae2:	4b09      	ldr	r3, [pc, #36]	; (8010b08 <tcp_output_segment_busy+0x34>)
 8010ae4:	f240 529a 	movw	r2, #1434	; 0x59a
 8010ae8:	4908      	ldr	r1, [pc, #32]	; (8010b0c <tcp_output_segment_busy+0x38>)
 8010aea:	4809      	ldr	r0, [pc, #36]	; (8010b10 <tcp_output_segment_busy+0x3c>)
 8010aec:	f005 fe0e 	bl	801670c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	685b      	ldr	r3, [r3, #4]
 8010af4:	7b9b      	ldrb	r3, [r3, #14]
 8010af6:	2b01      	cmp	r3, #1
 8010af8:	d001      	beq.n	8010afe <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010afa:	2301      	movs	r3, #1
 8010afc:	e000      	b.n	8010b00 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010afe:	2300      	movs	r3, #0
}
 8010b00:	4618      	mov	r0, r3
 8010b02:	3708      	adds	r7, #8
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}
 8010b08:	08018ba0 	.word	0x08018ba0
 8010b0c:	0801913c 	.word	0x0801913c
 8010b10:	08018bf4 	.word	0x08018bf4

08010b14 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010b14:	b5b0      	push	{r4, r5, r7, lr}
 8010b16:	b08c      	sub	sp, #48	; 0x30
 8010b18:	af04      	add	r7, sp, #16
 8010b1a:	60f8      	str	r0, [r7, #12]
 8010b1c:	60b9      	str	r1, [r7, #8]
 8010b1e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d106      	bne.n	8010b34 <tcp_output_segment+0x20>
 8010b26:	4b64      	ldr	r3, [pc, #400]	; (8010cb8 <tcp_output_segment+0x1a4>)
 8010b28:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010b2c:	4963      	ldr	r1, [pc, #396]	; (8010cbc <tcp_output_segment+0x1a8>)
 8010b2e:	4864      	ldr	r0, [pc, #400]	; (8010cc0 <tcp_output_segment+0x1ac>)
 8010b30:	f005 fdec 	bl	801670c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010b34:	68bb      	ldr	r3, [r7, #8]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d106      	bne.n	8010b48 <tcp_output_segment+0x34>
 8010b3a:	4b5f      	ldr	r3, [pc, #380]	; (8010cb8 <tcp_output_segment+0x1a4>)
 8010b3c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010b40:	4960      	ldr	r1, [pc, #384]	; (8010cc4 <tcp_output_segment+0x1b0>)
 8010b42:	485f      	ldr	r0, [pc, #380]	; (8010cc0 <tcp_output_segment+0x1ac>)
 8010b44:	f005 fde2 	bl	801670c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d106      	bne.n	8010b5c <tcp_output_segment+0x48>
 8010b4e:	4b5a      	ldr	r3, [pc, #360]	; (8010cb8 <tcp_output_segment+0x1a4>)
 8010b50:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010b54:	495c      	ldr	r1, [pc, #368]	; (8010cc8 <tcp_output_segment+0x1b4>)
 8010b56:	485a      	ldr	r0, [pc, #360]	; (8010cc0 <tcp_output_segment+0x1ac>)
 8010b58:	f005 fdd8 	bl	801670c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010b5c:	68f8      	ldr	r0, [r7, #12]
 8010b5e:	f7ff ffb9 	bl	8010ad4 <tcp_output_segment_busy>
 8010b62:	4603      	mov	r3, r0
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d001      	beq.n	8010b6c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	e0a0      	b.n	8010cae <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010b6c:	68bb      	ldr	r3, [r7, #8]
 8010b6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	68dc      	ldr	r4, [r3, #12]
 8010b74:	4610      	mov	r0, r2
 8010b76:	f7f9 feb7 	bl	800a8e8 <lwip_htonl>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010b7e:	68bb      	ldr	r3, [r7, #8]
 8010b80:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	68dc      	ldr	r4, [r3, #12]
 8010b86:	4610      	mov	r0, r2
 8010b88:	f7f9 fe99 	bl	800a8be <lwip_htons>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010b90:	68bb      	ldr	r3, [r7, #8]
 8010b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b94:	68ba      	ldr	r2, [r7, #8]
 8010b96:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010b98:	441a      	add	r2, r3
 8010b9a:	68bb      	ldr	r3, [r7, #8]
 8010b9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	68db      	ldr	r3, [r3, #12]
 8010ba2:	3314      	adds	r3, #20
 8010ba4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	7a9b      	ldrb	r3, [r3, #10]
 8010baa:	f003 0301 	and.w	r3, r3, #1
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d015      	beq.n	8010bde <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010bb2:	68bb      	ldr	r3, [r7, #8]
 8010bb4:	3304      	adds	r3, #4
 8010bb6:	461a      	mov	r2, r3
 8010bb8:	6879      	ldr	r1, [r7, #4]
 8010bba:	f44f 7006 	mov.w	r0, #536	; 0x218
 8010bbe:	f7fc fe8d 	bl	800d8dc <tcp_eff_send_mss_netif>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010bc6:	8b7b      	ldrh	r3, [r7, #26]
 8010bc8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f7f9 fe8b 	bl	800a8e8 <lwip_htonl>
 8010bd2:	4602      	mov	r2, r0
 8010bd4:	69fb      	ldr	r3, [r7, #28]
 8010bd6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010bd8:	69fb      	ldr	r3, [r7, #28]
 8010bda:	3304      	adds	r3, #4
 8010bdc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	da02      	bge.n	8010bee <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	2200      	movs	r2, #0
 8010bec:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010bee:	68bb      	ldr	r3, [r7, #8]
 8010bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d10c      	bne.n	8010c10 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8010bf6:	4b35      	ldr	r3, [pc, #212]	; (8010ccc <tcp_output_segment+0x1b8>)
 8010bf8:	681a      	ldr	r2, [r3, #0]
 8010bfa:	68bb      	ldr	r3, [r7, #8]
 8010bfc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	68db      	ldr	r3, [r3, #12]
 8010c02:	685b      	ldr	r3, [r3, #4]
 8010c04:	4618      	mov	r0, r3
 8010c06:	f7f9 fe6f 	bl	800a8e8 <lwip_htonl>
 8010c0a:	4602      	mov	r2, r0
 8010c0c:	68bb      	ldr	r3, [r7, #8]
 8010c0e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	68db      	ldr	r3, [r3, #12]
 8010c14:	461a      	mov	r2, r3
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	685b      	ldr	r3, [r3, #4]
 8010c1a:	685b      	ldr	r3, [r3, #4]
 8010c1c:	1ad3      	subs	r3, r2, r3
 8010c1e:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	685b      	ldr	r3, [r3, #4]
 8010c24:	8959      	ldrh	r1, [r3, #10]
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	685b      	ldr	r3, [r3, #4]
 8010c2a:	8b3a      	ldrh	r2, [r7, #24]
 8010c2c:	1a8a      	subs	r2, r1, r2
 8010c2e:	b292      	uxth	r2, r2
 8010c30:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	685b      	ldr	r3, [r3, #4]
 8010c36:	8919      	ldrh	r1, [r3, #8]
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	685b      	ldr	r3, [r3, #4]
 8010c3c:	8b3a      	ldrh	r2, [r7, #24]
 8010c3e:	1a8a      	subs	r2, r1, r2
 8010c40:	b292      	uxth	r2, r2
 8010c42:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	685b      	ldr	r3, [r3, #4]
 8010c48:	68fa      	ldr	r2, [r7, #12]
 8010c4a:	68d2      	ldr	r2, [r2, #12]
 8010c4c:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	68db      	ldr	r3, [r3, #12]
 8010c52:	2200      	movs	r2, #0
 8010c54:	741a      	strb	r2, [r3, #16]
 8010c56:	2200      	movs	r2, #0
 8010c58:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	68db      	ldr	r3, [r3, #12]
 8010c5e:	f103 0214 	add.w	r2, r3, #20
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	7a9b      	ldrb	r3, [r3, #10]
 8010c66:	009b      	lsls	r3, r3, #2
 8010c68:	f003 0304 	and.w	r3, r3, #4
 8010c6c:	4413      	add	r3, r2
 8010c6e:	69fa      	ldr	r2, [r7, #28]
 8010c70:	429a      	cmp	r2, r3
 8010c72:	d006      	beq.n	8010c82 <tcp_output_segment+0x16e>
 8010c74:	4b10      	ldr	r3, [pc, #64]	; (8010cb8 <tcp_output_segment+0x1a4>)
 8010c76:	f240 621c 	movw	r2, #1564	; 0x61c
 8010c7a:	4915      	ldr	r1, [pc, #84]	; (8010cd0 <tcp_output_segment+0x1bc>)
 8010c7c:	4810      	ldr	r0, [pc, #64]	; (8010cc0 <tcp_output_segment+0x1ac>)
 8010c7e:	f005 fd45 	bl	801670c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	6858      	ldr	r0, [r3, #4]
 8010c86:	68b9      	ldr	r1, [r7, #8]
 8010c88:	68bb      	ldr	r3, [r7, #8]
 8010c8a:	1d1c      	adds	r4, r3, #4
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	7add      	ldrb	r5, [r3, #11]
 8010c90:	68bb      	ldr	r3, [r7, #8]
 8010c92:	7a9b      	ldrb	r3, [r3, #10]
 8010c94:	687a      	ldr	r2, [r7, #4]
 8010c96:	9202      	str	r2, [sp, #8]
 8010c98:	2206      	movs	r2, #6
 8010c9a:	9201      	str	r2, [sp, #4]
 8010c9c:	9300      	str	r3, [sp, #0]
 8010c9e:	462b      	mov	r3, r5
 8010ca0:	4622      	mov	r2, r4
 8010ca2:	f004 fc11 	bl	80154c8 <ip4_output_if>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010caa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010cae:	4618      	mov	r0, r3
 8010cb0:	3720      	adds	r7, #32
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	bdb0      	pop	{r4, r5, r7, pc}
 8010cb6:	bf00      	nop
 8010cb8:	08018ba0 	.word	0x08018ba0
 8010cbc:	08019164 	.word	0x08019164
 8010cc0:	08018bf4 	.word	0x08018bf4
 8010cc4:	08019184 	.word	0x08019184
 8010cc8:	080191a4 	.word	0x080191a4
 8010ccc:	20007b00 	.word	0x20007b00
 8010cd0:	080191c8 	.word	0x080191c8

08010cd4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010cd4:	b5b0      	push	{r4, r5, r7, lr}
 8010cd6:	b084      	sub	sp, #16
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d106      	bne.n	8010cf0 <tcp_rexmit_rto_prepare+0x1c>
 8010ce2:	4b31      	ldr	r3, [pc, #196]	; (8010da8 <tcp_rexmit_rto_prepare+0xd4>)
 8010ce4:	f240 6263 	movw	r2, #1635	; 0x663
 8010ce8:	4930      	ldr	r1, [pc, #192]	; (8010dac <tcp_rexmit_rto_prepare+0xd8>)
 8010cea:	4831      	ldr	r0, [pc, #196]	; (8010db0 <tcp_rexmit_rto_prepare+0xdc>)
 8010cec:	f005 fd0e 	bl	801670c <iprintf>

  if (pcb->unacked == NULL) {
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d102      	bne.n	8010cfe <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010cf8:	f06f 0305 	mvn.w	r3, #5
 8010cfc:	e050      	b.n	8010da0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d02:	60fb      	str	r3, [r7, #12]
 8010d04:	e00b      	b.n	8010d1e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8010d06:	68f8      	ldr	r0, [r7, #12]
 8010d08:	f7ff fee4 	bl	8010ad4 <tcp_output_segment_busy>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d002      	beq.n	8010d18 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010d12:	f06f 0305 	mvn.w	r3, #5
 8010d16:	e043      	b.n	8010da0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	60fb      	str	r3, [r7, #12]
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d1ef      	bne.n	8010d06 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8010d26:	68f8      	ldr	r0, [r7, #12]
 8010d28:	f7ff fed4 	bl	8010ad4 <tcp_output_segment_busy>
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d002      	beq.n	8010d38 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010d32:	f06f 0305 	mvn.w	r3, #5
 8010d36:	e033      	b.n	8010da0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	2200      	movs	r2, #0
 8010d4c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	8b5b      	ldrh	r3, [r3, #26]
 8010d52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010d56:	b29a      	uxth	r2, r3
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	68db      	ldr	r3, [r3, #12]
 8010d60:	685b      	ldr	r3, [r3, #4]
 8010d62:	4618      	mov	r0, r3
 8010d64:	f7f9 fdc0 	bl	800a8e8 <lwip_htonl>
 8010d68:	4604      	mov	r4, r0
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	891b      	ldrh	r3, [r3, #8]
 8010d6e:	461d      	mov	r5, r3
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	68db      	ldr	r3, [r3, #12]
 8010d74:	899b      	ldrh	r3, [r3, #12]
 8010d76:	b29b      	uxth	r3, r3
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f7f9 fda0 	bl	800a8be <lwip_htons>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	b2db      	uxtb	r3, r3
 8010d82:	f003 0303 	and.w	r3, r3, #3
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d001      	beq.n	8010d8e <tcp_rexmit_rto_prepare+0xba>
 8010d8a:	2301      	movs	r3, #1
 8010d8c:	e000      	b.n	8010d90 <tcp_rexmit_rto_prepare+0xbc>
 8010d8e:	2300      	movs	r3, #0
 8010d90:	442b      	add	r3, r5
 8010d92:	18e2      	adds	r2, r4, r3
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8010d9e:	2300      	movs	r3, #0
}
 8010da0:	4618      	mov	r0, r3
 8010da2:	3710      	adds	r7, #16
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bdb0      	pop	{r4, r5, r7, pc}
 8010da8:	08018ba0 	.word	0x08018ba0
 8010dac:	080191dc 	.word	0x080191dc
 8010db0:	08018bf4 	.word	0x08018bf4

08010db4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b082      	sub	sp, #8
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d106      	bne.n	8010dd0 <tcp_rexmit_rto_commit+0x1c>
 8010dc2:	4b0d      	ldr	r3, [pc, #52]	; (8010df8 <tcp_rexmit_rto_commit+0x44>)
 8010dc4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010dc8:	490c      	ldr	r1, [pc, #48]	; (8010dfc <tcp_rexmit_rto_commit+0x48>)
 8010dca:	480d      	ldr	r0, [pc, #52]	; (8010e00 <tcp_rexmit_rto_commit+0x4c>)
 8010dcc:	f005 fc9e 	bl	801670c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010dd6:	2bff      	cmp	r3, #255	; 0xff
 8010dd8:	d007      	beq.n	8010dea <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010de0:	3301      	adds	r3, #1
 8010de2:	b2da      	uxtb	r2, r3
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8010dea:	6878      	ldr	r0, [r7, #4]
 8010dec:	f7ff fc7a 	bl	80106e4 <tcp_output>
}
 8010df0:	bf00      	nop
 8010df2:	3708      	adds	r7, #8
 8010df4:	46bd      	mov	sp, r7
 8010df6:	bd80      	pop	{r7, pc}
 8010df8:	08018ba0 	.word	0x08018ba0
 8010dfc:	08019200 	.word	0x08019200
 8010e00:	08018bf4 	.word	0x08018bf4

08010e04 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b082      	sub	sp, #8
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d106      	bne.n	8010e20 <tcp_rexmit_rto+0x1c>
 8010e12:	4b0a      	ldr	r3, [pc, #40]	; (8010e3c <tcp_rexmit_rto+0x38>)
 8010e14:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010e18:	4909      	ldr	r1, [pc, #36]	; (8010e40 <tcp_rexmit_rto+0x3c>)
 8010e1a:	480a      	ldr	r0, [pc, #40]	; (8010e44 <tcp_rexmit_rto+0x40>)
 8010e1c:	f005 fc76 	bl	801670c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f7ff ff57 	bl	8010cd4 <tcp_rexmit_rto_prepare>
 8010e26:	4603      	mov	r3, r0
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d102      	bne.n	8010e32 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010e2c:	6878      	ldr	r0, [r7, #4]
 8010e2e:	f7ff ffc1 	bl	8010db4 <tcp_rexmit_rto_commit>
  }
}
 8010e32:	bf00      	nop
 8010e34:	3708      	adds	r7, #8
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}
 8010e3a:	bf00      	nop
 8010e3c:	08018ba0 	.word	0x08018ba0
 8010e40:	08019224 	.word	0x08019224
 8010e44:	08018bf4 	.word	0x08018bf4

08010e48 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010e48:	b590      	push	{r4, r7, lr}
 8010e4a:	b085      	sub	sp, #20
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d106      	bne.n	8010e64 <tcp_rexmit+0x1c>
 8010e56:	4b2f      	ldr	r3, [pc, #188]	; (8010f14 <tcp_rexmit+0xcc>)
 8010e58:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010e5c:	492e      	ldr	r1, [pc, #184]	; (8010f18 <tcp_rexmit+0xd0>)
 8010e5e:	482f      	ldr	r0, [pc, #188]	; (8010f1c <tcp_rexmit+0xd4>)
 8010e60:	f005 fc54 	bl	801670c <iprintf>

  if (pcb->unacked == NULL) {
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d102      	bne.n	8010e72 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010e6c:	f06f 0305 	mvn.w	r3, #5
 8010e70:	e04c      	b.n	8010f0c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e76:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010e78:	68b8      	ldr	r0, [r7, #8]
 8010e7a:	f7ff fe2b 	bl	8010ad4 <tcp_output_segment_busy>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d002      	beq.n	8010e8a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010e84:	f06f 0305 	mvn.w	r3, #5
 8010e88:	e040      	b.n	8010f0c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010e8a:	68bb      	ldr	r3, [r7, #8]
 8010e8c:	681a      	ldr	r2, [r3, #0]
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	336c      	adds	r3, #108	; 0x6c
 8010e96:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010e98:	e002      	b.n	8010ea0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d011      	beq.n	8010ecc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	68db      	ldr	r3, [r3, #12]
 8010eae:	685b      	ldr	r3, [r3, #4]
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f7f9 fd19 	bl	800a8e8 <lwip_htonl>
 8010eb6:	4604      	mov	r4, r0
 8010eb8:	68bb      	ldr	r3, [r7, #8]
 8010eba:	68db      	ldr	r3, [r3, #12]
 8010ebc:	685b      	ldr	r3, [r3, #4]
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	f7f9 fd12 	bl	800a8e8 <lwip_htonl>
 8010ec4:	4603      	mov	r3, r0
 8010ec6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	dbe6      	blt.n	8010e9a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	681a      	ldr	r2, [r3, #0]
 8010ed0:	68bb      	ldr	r3, [r7, #8]
 8010ed2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	68ba      	ldr	r2, [r7, #8]
 8010ed8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010eda:	68bb      	ldr	r3, [r7, #8]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d103      	bne.n	8010eea <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010ef0:	2bff      	cmp	r3, #255	; 0xff
 8010ef2:	d007      	beq.n	8010f04 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010efa:	3301      	adds	r3, #1
 8010efc:	b2da      	uxtb	r2, r3
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	2200      	movs	r2, #0
 8010f08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010f0a:	2300      	movs	r3, #0
}
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	3714      	adds	r7, #20
 8010f10:	46bd      	mov	sp, r7
 8010f12:	bd90      	pop	{r4, r7, pc}
 8010f14:	08018ba0 	.word	0x08018ba0
 8010f18:	08019240 	.word	0x08019240
 8010f1c:	08018bf4 	.word	0x08018bf4

08010f20 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b082      	sub	sp, #8
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d106      	bne.n	8010f3c <tcp_rexmit_fast+0x1c>
 8010f2e:	4b2e      	ldr	r3, [pc, #184]	; (8010fe8 <tcp_rexmit_fast+0xc8>)
 8010f30:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010f34:	492d      	ldr	r1, [pc, #180]	; (8010fec <tcp_rexmit_fast+0xcc>)
 8010f36:	482e      	ldr	r0, [pc, #184]	; (8010ff0 <tcp_rexmit_fast+0xd0>)
 8010f38:	f005 fbe8 	bl	801670c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d04d      	beq.n	8010fe0 <tcp_rexmit_fast+0xc0>
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	8b5b      	ldrh	r3, [r3, #26]
 8010f48:	f003 0304 	and.w	r3, r3, #4
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d147      	bne.n	8010fe0 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010f50:	6878      	ldr	r0, [r7, #4]
 8010f52:	f7ff ff79 	bl	8010e48 <tcp_rexmit>
 8010f56:	4603      	mov	r3, r0
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d141      	bne.n	8010fe0 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010f68:	429a      	cmp	r2, r3
 8010f6a:	d207      	bcs.n	8010f7c <tcp_rexmit_fast+0x5c>
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010f72:	0fda      	lsrs	r2, r3, #31
 8010f74:	4413      	add	r3, r2
 8010f76:	105b      	asrs	r3, r3, #1
 8010f78:	b29b      	uxth	r3, r3
 8010f7a:	e006      	b.n	8010f8a <tcp_rexmit_fast+0x6a>
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010f82:	0fda      	lsrs	r2, r3, #31
 8010f84:	4413      	add	r3, r2
 8010f86:	105b      	asrs	r3, r3, #1
 8010f88:	b29b      	uxth	r3, r3
 8010f8a:	687a      	ldr	r2, [r7, #4]
 8010f8c:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010f96:	461a      	mov	r2, r3
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010f9c:	005b      	lsls	r3, r3, #1
 8010f9e:	429a      	cmp	r2, r3
 8010fa0:	d206      	bcs.n	8010fb0 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fa6:	005b      	lsls	r3, r3, #1
 8010fa8:	b29a      	uxth	r2, r3
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fba:	4619      	mov	r1, r3
 8010fbc:	0049      	lsls	r1, r1, #1
 8010fbe:	440b      	add	r3, r1
 8010fc0:	b29b      	uxth	r3, r3
 8010fc2:	4413      	add	r3, r2
 8010fc4:	b29a      	uxth	r2, r3
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	8b5b      	ldrh	r3, [r3, #26]
 8010fd0:	f043 0304 	orr.w	r3, r3, #4
 8010fd4:	b29a      	uxth	r2, r3
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2200      	movs	r2, #0
 8010fde:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010fe0:	bf00      	nop
 8010fe2:	3708      	adds	r7, #8
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd80      	pop	{r7, pc}
 8010fe8:	08018ba0 	.word	0x08018ba0
 8010fec:	08019258 	.word	0x08019258
 8010ff0:	08018bf4 	.word	0x08018bf4

08010ff4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b086      	sub	sp, #24
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	60f8      	str	r0, [r7, #12]
 8010ffc:	607b      	str	r3, [r7, #4]
 8010ffe:	460b      	mov	r3, r1
 8011000:	817b      	strh	r3, [r7, #10]
 8011002:	4613      	mov	r3, r2
 8011004:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011006:	897a      	ldrh	r2, [r7, #10]
 8011008:	893b      	ldrh	r3, [r7, #8]
 801100a:	4413      	add	r3, r2
 801100c:	b29b      	uxth	r3, r3
 801100e:	3314      	adds	r3, #20
 8011010:	b29b      	uxth	r3, r3
 8011012:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011016:	4619      	mov	r1, r3
 8011018:	2022      	movs	r0, #34	; 0x22
 801101a:	f7fa fc11 	bl	800b840 <pbuf_alloc>
 801101e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011020:	697b      	ldr	r3, [r7, #20]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d04e      	beq.n	80110c4 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011026:	697b      	ldr	r3, [r7, #20]
 8011028:	895b      	ldrh	r3, [r3, #10]
 801102a:	461a      	mov	r2, r3
 801102c:	897b      	ldrh	r3, [r7, #10]
 801102e:	3314      	adds	r3, #20
 8011030:	429a      	cmp	r2, r3
 8011032:	da06      	bge.n	8011042 <tcp_output_alloc_header_common+0x4e>
 8011034:	4b26      	ldr	r3, [pc, #152]	; (80110d0 <tcp_output_alloc_header_common+0xdc>)
 8011036:	f240 7224 	movw	r2, #1828	; 0x724
 801103a:	4926      	ldr	r1, [pc, #152]	; (80110d4 <tcp_output_alloc_header_common+0xe0>)
 801103c:	4826      	ldr	r0, [pc, #152]	; (80110d8 <tcp_output_alloc_header_common+0xe4>)
 801103e:	f005 fb65 	bl	801670c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011042:	697b      	ldr	r3, [r7, #20]
 8011044:	685b      	ldr	r3, [r3, #4]
 8011046:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011048:	8c3b      	ldrh	r3, [r7, #32]
 801104a:	4618      	mov	r0, r3
 801104c:	f7f9 fc37 	bl	800a8be <lwip_htons>
 8011050:	4603      	mov	r3, r0
 8011052:	461a      	mov	r2, r3
 8011054:	693b      	ldr	r3, [r7, #16]
 8011056:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011058:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801105a:	4618      	mov	r0, r3
 801105c:	f7f9 fc2f 	bl	800a8be <lwip_htons>
 8011060:	4603      	mov	r3, r0
 8011062:	461a      	mov	r2, r3
 8011064:	693b      	ldr	r3, [r7, #16]
 8011066:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011068:	693b      	ldr	r3, [r7, #16]
 801106a:	687a      	ldr	r2, [r7, #4]
 801106c:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801106e:	68f8      	ldr	r0, [r7, #12]
 8011070:	f7f9 fc3a 	bl	800a8e8 <lwip_htonl>
 8011074:	4602      	mov	r2, r0
 8011076:	693b      	ldr	r3, [r7, #16]
 8011078:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801107a:	897b      	ldrh	r3, [r7, #10]
 801107c:	089b      	lsrs	r3, r3, #2
 801107e:	b29b      	uxth	r3, r3
 8011080:	3305      	adds	r3, #5
 8011082:	b29b      	uxth	r3, r3
 8011084:	031b      	lsls	r3, r3, #12
 8011086:	b29a      	uxth	r2, r3
 8011088:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801108c:	b29b      	uxth	r3, r3
 801108e:	4313      	orrs	r3, r2
 8011090:	b29b      	uxth	r3, r3
 8011092:	4618      	mov	r0, r3
 8011094:	f7f9 fc13 	bl	800a8be <lwip_htons>
 8011098:	4603      	mov	r3, r0
 801109a:	461a      	mov	r2, r3
 801109c:	693b      	ldr	r3, [r7, #16]
 801109e:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80110a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80110a2:	4618      	mov	r0, r3
 80110a4:	f7f9 fc0b 	bl	800a8be <lwip_htons>
 80110a8:	4603      	mov	r3, r0
 80110aa:	461a      	mov	r2, r3
 80110ac:	693b      	ldr	r3, [r7, #16]
 80110ae:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80110b0:	693b      	ldr	r3, [r7, #16]
 80110b2:	2200      	movs	r2, #0
 80110b4:	741a      	strb	r2, [r3, #16]
 80110b6:	2200      	movs	r2, #0
 80110b8:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80110ba:	693b      	ldr	r3, [r7, #16]
 80110bc:	2200      	movs	r2, #0
 80110be:	749a      	strb	r2, [r3, #18]
 80110c0:	2200      	movs	r2, #0
 80110c2:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80110c4:	697b      	ldr	r3, [r7, #20]
}
 80110c6:	4618      	mov	r0, r3
 80110c8:	3718      	adds	r7, #24
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}
 80110ce:	bf00      	nop
 80110d0:	08018ba0 	.word	0x08018ba0
 80110d4:	08019278 	.word	0x08019278
 80110d8:	08018bf4 	.word	0x08018bf4

080110dc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80110dc:	b5b0      	push	{r4, r5, r7, lr}
 80110de:	b08a      	sub	sp, #40	; 0x28
 80110e0:	af04      	add	r7, sp, #16
 80110e2:	60f8      	str	r0, [r7, #12]
 80110e4:	607b      	str	r3, [r7, #4]
 80110e6:	460b      	mov	r3, r1
 80110e8:	817b      	strh	r3, [r7, #10]
 80110ea:	4613      	mov	r3, r2
 80110ec:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d106      	bne.n	8011102 <tcp_output_alloc_header+0x26>
 80110f4:	4b15      	ldr	r3, [pc, #84]	; (801114c <tcp_output_alloc_header+0x70>)
 80110f6:	f240 7242 	movw	r2, #1858	; 0x742
 80110fa:	4915      	ldr	r1, [pc, #84]	; (8011150 <tcp_output_alloc_header+0x74>)
 80110fc:	4815      	ldr	r0, [pc, #84]	; (8011154 <tcp_output_alloc_header+0x78>)
 80110fe:	f005 fb05 	bl	801670c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	8adb      	ldrh	r3, [r3, #22]
 801110a:	68fa      	ldr	r2, [r7, #12]
 801110c:	8b12      	ldrh	r2, [r2, #24]
 801110e:	68f9      	ldr	r1, [r7, #12]
 8011110:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8011112:	893d      	ldrh	r5, [r7, #8]
 8011114:	897c      	ldrh	r4, [r7, #10]
 8011116:	9103      	str	r1, [sp, #12]
 8011118:	2110      	movs	r1, #16
 801111a:	9102      	str	r1, [sp, #8]
 801111c:	9201      	str	r2, [sp, #4]
 801111e:	9300      	str	r3, [sp, #0]
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	462a      	mov	r2, r5
 8011124:	4621      	mov	r1, r4
 8011126:	f7ff ff65 	bl	8010ff4 <tcp_output_alloc_header_common>
 801112a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801112c:	697b      	ldr	r3, [r7, #20]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d006      	beq.n	8011140 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011136:	68fa      	ldr	r2, [r7, #12]
 8011138:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801113a:	441a      	add	r2, r3
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011140:	697b      	ldr	r3, [r7, #20]
}
 8011142:	4618      	mov	r0, r3
 8011144:	3718      	adds	r7, #24
 8011146:	46bd      	mov	sp, r7
 8011148:	bdb0      	pop	{r4, r5, r7, pc}
 801114a:	bf00      	nop
 801114c:	08018ba0 	.word	0x08018ba0
 8011150:	080192a8 	.word	0x080192a8
 8011154:	08018bf4 	.word	0x08018bf4

08011158 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b088      	sub	sp, #32
 801115c:	af00      	add	r7, sp, #0
 801115e:	60f8      	str	r0, [r7, #12]
 8011160:	60b9      	str	r1, [r7, #8]
 8011162:	4611      	mov	r1, r2
 8011164:	461a      	mov	r2, r3
 8011166:	460b      	mov	r3, r1
 8011168:	71fb      	strb	r3, [r7, #7]
 801116a:	4613      	mov	r3, r2
 801116c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801116e:	2300      	movs	r3, #0
 8011170:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011172:	68bb      	ldr	r3, [r7, #8]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d106      	bne.n	8011186 <tcp_output_fill_options+0x2e>
 8011178:	4b13      	ldr	r3, [pc, #76]	; (80111c8 <tcp_output_fill_options+0x70>)
 801117a:	f240 7256 	movw	r2, #1878	; 0x756
 801117e:	4913      	ldr	r1, [pc, #76]	; (80111cc <tcp_output_fill_options+0x74>)
 8011180:	4813      	ldr	r0, [pc, #76]	; (80111d0 <tcp_output_fill_options+0x78>)
 8011182:	f005 fac3 	bl	801670c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	685b      	ldr	r3, [r3, #4]
 801118a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801118c:	69bb      	ldr	r3, [r7, #24]
 801118e:	3314      	adds	r3, #20
 8011190:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011192:	69bb      	ldr	r3, [r7, #24]
 8011194:	f103 0214 	add.w	r2, r3, #20
 8011198:	8bfb      	ldrh	r3, [r7, #30]
 801119a:	009b      	lsls	r3, r3, #2
 801119c:	4619      	mov	r1, r3
 801119e:	79fb      	ldrb	r3, [r7, #7]
 80111a0:	009b      	lsls	r3, r3, #2
 80111a2:	f003 0304 	and.w	r3, r3, #4
 80111a6:	440b      	add	r3, r1
 80111a8:	4413      	add	r3, r2
 80111aa:	697a      	ldr	r2, [r7, #20]
 80111ac:	429a      	cmp	r2, r3
 80111ae:	d006      	beq.n	80111be <tcp_output_fill_options+0x66>
 80111b0:	4b05      	ldr	r3, [pc, #20]	; (80111c8 <tcp_output_fill_options+0x70>)
 80111b2:	f240 7275 	movw	r2, #1909	; 0x775
 80111b6:	4907      	ldr	r1, [pc, #28]	; (80111d4 <tcp_output_fill_options+0x7c>)
 80111b8:	4805      	ldr	r0, [pc, #20]	; (80111d0 <tcp_output_fill_options+0x78>)
 80111ba:	f005 faa7 	bl	801670c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80111be:	bf00      	nop
 80111c0:	3720      	adds	r7, #32
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd80      	pop	{r7, pc}
 80111c6:	bf00      	nop
 80111c8:	08018ba0 	.word	0x08018ba0
 80111cc:	080192d0 	.word	0x080192d0
 80111d0:	08018bf4 	.word	0x08018bf4
 80111d4:	080191c8 	.word	0x080191c8

080111d8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b08a      	sub	sp, #40	; 0x28
 80111dc:	af04      	add	r7, sp, #16
 80111de:	60f8      	str	r0, [r7, #12]
 80111e0:	60b9      	str	r1, [r7, #8]
 80111e2:	607a      	str	r2, [r7, #4]
 80111e4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d106      	bne.n	80111fa <tcp_output_control_segment+0x22>
 80111ec:	4b1c      	ldr	r3, [pc, #112]	; (8011260 <tcp_output_control_segment+0x88>)
 80111ee:	f240 7287 	movw	r2, #1927	; 0x787
 80111f2:	491c      	ldr	r1, [pc, #112]	; (8011264 <tcp_output_control_segment+0x8c>)
 80111f4:	481c      	ldr	r0, [pc, #112]	; (8011268 <tcp_output_control_segment+0x90>)
 80111f6:	f005 fa89 	bl	801670c <iprintf>

  netif = tcp_route(pcb, src, dst);
 80111fa:	683a      	ldr	r2, [r7, #0]
 80111fc:	6879      	ldr	r1, [r7, #4]
 80111fe:	68f8      	ldr	r0, [r7, #12]
 8011200:	f7fe ff30 	bl	8010064 <tcp_route>
 8011204:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011206:	693b      	ldr	r3, [r7, #16]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d102      	bne.n	8011212 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801120c:	23fc      	movs	r3, #252	; 0xfc
 801120e:	75fb      	strb	r3, [r7, #23]
 8011210:	e01c      	b.n	801124c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d006      	beq.n	8011226 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	7adb      	ldrb	r3, [r3, #11]
 801121c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	7a9b      	ldrb	r3, [r3, #10]
 8011222:	757b      	strb	r3, [r7, #21]
 8011224:	e003      	b.n	801122e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011226:	23ff      	movs	r3, #255	; 0xff
 8011228:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801122a:	2300      	movs	r3, #0
 801122c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801122e:	7dba      	ldrb	r2, [r7, #22]
 8011230:	693b      	ldr	r3, [r7, #16]
 8011232:	9302      	str	r3, [sp, #8]
 8011234:	2306      	movs	r3, #6
 8011236:	9301      	str	r3, [sp, #4]
 8011238:	7d7b      	ldrb	r3, [r7, #21]
 801123a:	9300      	str	r3, [sp, #0]
 801123c:	4613      	mov	r3, r2
 801123e:	683a      	ldr	r2, [r7, #0]
 8011240:	6879      	ldr	r1, [r7, #4]
 8011242:	68b8      	ldr	r0, [r7, #8]
 8011244:	f004 f940 	bl	80154c8 <ip4_output_if>
 8011248:	4603      	mov	r3, r0
 801124a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801124c:	68b8      	ldr	r0, [r7, #8]
 801124e:	f7fa fdd7 	bl	800be00 <pbuf_free>
  return err;
 8011252:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011256:	4618      	mov	r0, r3
 8011258:	3718      	adds	r7, #24
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}
 801125e:	bf00      	nop
 8011260:	08018ba0 	.word	0x08018ba0
 8011264:	080192f8 	.word	0x080192f8
 8011268:	08018bf4 	.word	0x08018bf4

0801126c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801126c:	b590      	push	{r4, r7, lr}
 801126e:	b08b      	sub	sp, #44	; 0x2c
 8011270:	af04      	add	r7, sp, #16
 8011272:	60f8      	str	r0, [r7, #12]
 8011274:	60b9      	str	r1, [r7, #8]
 8011276:	607a      	str	r2, [r7, #4]
 8011278:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801127a:	683b      	ldr	r3, [r7, #0]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d106      	bne.n	801128e <tcp_rst+0x22>
 8011280:	4b1f      	ldr	r3, [pc, #124]	; (8011300 <tcp_rst+0x94>)
 8011282:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011286:	491f      	ldr	r1, [pc, #124]	; (8011304 <tcp_rst+0x98>)
 8011288:	481f      	ldr	r0, [pc, #124]	; (8011308 <tcp_rst+0x9c>)
 801128a:	f005 fa3f 	bl	801670c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801128e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011290:	2b00      	cmp	r3, #0
 8011292:	d106      	bne.n	80112a2 <tcp_rst+0x36>
 8011294:	4b1a      	ldr	r3, [pc, #104]	; (8011300 <tcp_rst+0x94>)
 8011296:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801129a:	491c      	ldr	r1, [pc, #112]	; (801130c <tcp_rst+0xa0>)
 801129c:	481a      	ldr	r0, [pc, #104]	; (8011308 <tcp_rst+0x9c>)
 801129e:	f005 fa35 	bl	801670c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80112a2:	2300      	movs	r3, #0
 80112a4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80112a6:	f246 0308 	movw	r3, #24584	; 0x6008
 80112aa:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80112ac:	7dfb      	ldrb	r3, [r7, #23]
 80112ae:	b29c      	uxth	r4, r3
 80112b0:	68b8      	ldr	r0, [r7, #8]
 80112b2:	f7f9 fb19 	bl	800a8e8 <lwip_htonl>
 80112b6:	4602      	mov	r2, r0
 80112b8:	8abb      	ldrh	r3, [r7, #20]
 80112ba:	9303      	str	r3, [sp, #12]
 80112bc:	2314      	movs	r3, #20
 80112be:	9302      	str	r3, [sp, #8]
 80112c0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80112c2:	9301      	str	r3, [sp, #4]
 80112c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80112c6:	9300      	str	r3, [sp, #0]
 80112c8:	4613      	mov	r3, r2
 80112ca:	2200      	movs	r2, #0
 80112cc:	4621      	mov	r1, r4
 80112ce:	6878      	ldr	r0, [r7, #4]
 80112d0:	f7ff fe90 	bl	8010ff4 <tcp_output_alloc_header_common>
 80112d4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80112d6:	693b      	ldr	r3, [r7, #16]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d00c      	beq.n	80112f6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80112dc:	7dfb      	ldrb	r3, [r7, #23]
 80112de:	2200      	movs	r2, #0
 80112e0:	6939      	ldr	r1, [r7, #16]
 80112e2:	68f8      	ldr	r0, [r7, #12]
 80112e4:	f7ff ff38 	bl	8011158 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80112e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ea:	683a      	ldr	r2, [r7, #0]
 80112ec:	6939      	ldr	r1, [r7, #16]
 80112ee:	68f8      	ldr	r0, [r7, #12]
 80112f0:	f7ff ff72 	bl	80111d8 <tcp_output_control_segment>
 80112f4:	e000      	b.n	80112f8 <tcp_rst+0x8c>
    return;
 80112f6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80112f8:	371c      	adds	r7, #28
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bd90      	pop	{r4, r7, pc}
 80112fe:	bf00      	nop
 8011300:	08018ba0 	.word	0x08018ba0
 8011304:	08019324 	.word	0x08019324
 8011308:	08018bf4 	.word	0x08018bf4
 801130c:	08019340 	.word	0x08019340

08011310 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011310:	b590      	push	{r4, r7, lr}
 8011312:	b087      	sub	sp, #28
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011318:	2300      	movs	r3, #0
 801131a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801131c:	2300      	movs	r3, #0
 801131e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d106      	bne.n	8011334 <tcp_send_empty_ack+0x24>
 8011326:	4b28      	ldr	r3, [pc, #160]	; (80113c8 <tcp_send_empty_ack+0xb8>)
 8011328:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801132c:	4927      	ldr	r1, [pc, #156]	; (80113cc <tcp_send_empty_ack+0xbc>)
 801132e:	4828      	ldr	r0, [pc, #160]	; (80113d0 <tcp_send_empty_ack+0xc0>)
 8011330:	f005 f9ec 	bl	801670c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011334:	7dfb      	ldrb	r3, [r7, #23]
 8011336:	009b      	lsls	r3, r3, #2
 8011338:	b2db      	uxtb	r3, r3
 801133a:	f003 0304 	and.w	r3, r3, #4
 801133e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011340:	7d7b      	ldrb	r3, [r7, #21]
 8011342:	b29c      	uxth	r4, r3
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011348:	4618      	mov	r0, r3
 801134a:	f7f9 facd 	bl	800a8e8 <lwip_htonl>
 801134e:	4603      	mov	r3, r0
 8011350:	2200      	movs	r2, #0
 8011352:	4621      	mov	r1, r4
 8011354:	6878      	ldr	r0, [r7, #4]
 8011356:	f7ff fec1 	bl	80110dc <tcp_output_alloc_header>
 801135a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801135c:	693b      	ldr	r3, [r7, #16]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d109      	bne.n	8011376 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	8b5b      	ldrh	r3, [r3, #26]
 8011366:	f043 0303 	orr.w	r3, r3, #3
 801136a:	b29a      	uxth	r2, r3
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011370:	f06f 0301 	mvn.w	r3, #1
 8011374:	e023      	b.n	80113be <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011376:	7dbb      	ldrb	r3, [r7, #22]
 8011378:	7dfa      	ldrb	r2, [r7, #23]
 801137a:	6939      	ldr	r1, [r7, #16]
 801137c:	6878      	ldr	r0, [r7, #4]
 801137e:	f7ff feeb 	bl	8011158 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011382:	687a      	ldr	r2, [r7, #4]
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	3304      	adds	r3, #4
 8011388:	6939      	ldr	r1, [r7, #16]
 801138a:	6878      	ldr	r0, [r7, #4]
 801138c:	f7ff ff24 	bl	80111d8 <tcp_output_control_segment>
 8011390:	4603      	mov	r3, r0
 8011392:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d007      	beq.n	80113ac <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	8b5b      	ldrh	r3, [r3, #26]
 80113a0:	f043 0303 	orr.w	r3, r3, #3
 80113a4:	b29a      	uxth	r2, r3
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	835a      	strh	r2, [r3, #26]
 80113aa:	e006      	b.n	80113ba <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	8b5b      	ldrh	r3, [r3, #26]
 80113b0:	f023 0303 	bic.w	r3, r3, #3
 80113b4:	b29a      	uxth	r2, r3
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80113ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80113be:	4618      	mov	r0, r3
 80113c0:	371c      	adds	r7, #28
 80113c2:	46bd      	mov	sp, r7
 80113c4:	bd90      	pop	{r4, r7, pc}
 80113c6:	bf00      	nop
 80113c8:	08018ba0 	.word	0x08018ba0
 80113cc:	0801935c 	.word	0x0801935c
 80113d0:	08018bf4 	.word	0x08018bf4

080113d4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80113d4:	b590      	push	{r4, r7, lr}
 80113d6:	b087      	sub	sp, #28
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80113dc:	2300      	movs	r3, #0
 80113de:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d106      	bne.n	80113f4 <tcp_keepalive+0x20>
 80113e6:	4b18      	ldr	r3, [pc, #96]	; (8011448 <tcp_keepalive+0x74>)
 80113e8:	f640 0224 	movw	r2, #2084	; 0x824
 80113ec:	4917      	ldr	r1, [pc, #92]	; (801144c <tcp_keepalive+0x78>)
 80113ee:	4818      	ldr	r0, [pc, #96]	; (8011450 <tcp_keepalive+0x7c>)
 80113f0:	f005 f98c 	bl	801670c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80113f4:	7dfb      	ldrb	r3, [r7, #23]
 80113f6:	b29c      	uxth	r4, r3
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80113fc:	3b01      	subs	r3, #1
 80113fe:	4618      	mov	r0, r3
 8011400:	f7f9 fa72 	bl	800a8e8 <lwip_htonl>
 8011404:	4603      	mov	r3, r0
 8011406:	2200      	movs	r2, #0
 8011408:	4621      	mov	r1, r4
 801140a:	6878      	ldr	r0, [r7, #4]
 801140c:	f7ff fe66 	bl	80110dc <tcp_output_alloc_header>
 8011410:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011412:	693b      	ldr	r3, [r7, #16]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d102      	bne.n	801141e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011418:	f04f 33ff 	mov.w	r3, #4294967295
 801141c:	e010      	b.n	8011440 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801141e:	7dfb      	ldrb	r3, [r7, #23]
 8011420:	2200      	movs	r2, #0
 8011422:	6939      	ldr	r1, [r7, #16]
 8011424:	6878      	ldr	r0, [r7, #4]
 8011426:	f7ff fe97 	bl	8011158 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801142a:	687a      	ldr	r2, [r7, #4]
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	3304      	adds	r3, #4
 8011430:	6939      	ldr	r1, [r7, #16]
 8011432:	6878      	ldr	r0, [r7, #4]
 8011434:	f7ff fed0 	bl	80111d8 <tcp_output_control_segment>
 8011438:	4603      	mov	r3, r0
 801143a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801143c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011440:	4618      	mov	r0, r3
 8011442:	371c      	adds	r7, #28
 8011444:	46bd      	mov	sp, r7
 8011446:	bd90      	pop	{r4, r7, pc}
 8011448:	08018ba0 	.word	0x08018ba0
 801144c:	0801937c 	.word	0x0801937c
 8011450:	08018bf4 	.word	0x08018bf4

08011454 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011454:	b590      	push	{r4, r7, lr}
 8011456:	b08b      	sub	sp, #44	; 0x2c
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801145c:	2300      	movs	r3, #0
 801145e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d106      	bne.n	8011476 <tcp_zero_window_probe+0x22>
 8011468:	4b4c      	ldr	r3, [pc, #304]	; (801159c <tcp_zero_window_probe+0x148>)
 801146a:	f640 024f 	movw	r2, #2127	; 0x84f
 801146e:	494c      	ldr	r1, [pc, #304]	; (80115a0 <tcp_zero_window_probe+0x14c>)
 8011470:	484c      	ldr	r0, [pc, #304]	; (80115a4 <tcp_zero_window_probe+0x150>)
 8011472:	f005 f94b 	bl	801670c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801147a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801147c:	6a3b      	ldr	r3, [r7, #32]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d101      	bne.n	8011486 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011482:	2300      	movs	r3, #0
 8011484:	e086      	b.n	8011594 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801148c:	2bff      	cmp	r3, #255	; 0xff
 801148e:	d007      	beq.n	80114a0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011496:	3301      	adds	r3, #1
 8011498:	b2da      	uxtb	r2, r3
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80114a0:	6a3b      	ldr	r3, [r7, #32]
 80114a2:	68db      	ldr	r3, [r3, #12]
 80114a4:	899b      	ldrh	r3, [r3, #12]
 80114a6:	b29b      	uxth	r3, r3
 80114a8:	4618      	mov	r0, r3
 80114aa:	f7f9 fa08 	bl	800a8be <lwip_htons>
 80114ae:	4603      	mov	r3, r0
 80114b0:	b2db      	uxtb	r3, r3
 80114b2:	f003 0301 	and.w	r3, r3, #1
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d005      	beq.n	80114c6 <tcp_zero_window_probe+0x72>
 80114ba:	6a3b      	ldr	r3, [r7, #32]
 80114bc:	891b      	ldrh	r3, [r3, #8]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d101      	bne.n	80114c6 <tcp_zero_window_probe+0x72>
 80114c2:	2301      	movs	r3, #1
 80114c4:	e000      	b.n	80114c8 <tcp_zero_window_probe+0x74>
 80114c6:	2300      	movs	r3, #0
 80114c8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80114ca:	7ffb      	ldrb	r3, [r7, #31]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	bf0c      	ite	eq
 80114d0:	2301      	moveq	r3, #1
 80114d2:	2300      	movne	r3, #0
 80114d4:	b2db      	uxtb	r3, r3
 80114d6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80114d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114dc:	b299      	uxth	r1, r3
 80114de:	6a3b      	ldr	r3, [r7, #32]
 80114e0:	68db      	ldr	r3, [r3, #12]
 80114e2:	685b      	ldr	r3, [r3, #4]
 80114e4:	8bba      	ldrh	r2, [r7, #28]
 80114e6:	6878      	ldr	r0, [r7, #4]
 80114e8:	f7ff fdf8 	bl	80110dc <tcp_output_alloc_header>
 80114ec:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80114ee:	69bb      	ldr	r3, [r7, #24]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d102      	bne.n	80114fa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80114f4:	f04f 33ff 	mov.w	r3, #4294967295
 80114f8:	e04c      	b.n	8011594 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80114fa:	69bb      	ldr	r3, [r7, #24]
 80114fc:	685b      	ldr	r3, [r3, #4]
 80114fe:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011500:	7ffb      	ldrb	r3, [r7, #31]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d011      	beq.n	801152a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011506:	697b      	ldr	r3, [r7, #20]
 8011508:	899b      	ldrh	r3, [r3, #12]
 801150a:	b29b      	uxth	r3, r3
 801150c:	b21b      	sxth	r3, r3
 801150e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011512:	b21c      	sxth	r4, r3
 8011514:	2011      	movs	r0, #17
 8011516:	f7f9 f9d2 	bl	800a8be <lwip_htons>
 801151a:	4603      	mov	r3, r0
 801151c:	b21b      	sxth	r3, r3
 801151e:	4323      	orrs	r3, r4
 8011520:	b21b      	sxth	r3, r3
 8011522:	b29a      	uxth	r2, r3
 8011524:	697b      	ldr	r3, [r7, #20]
 8011526:	819a      	strh	r2, [r3, #12]
 8011528:	e010      	b.n	801154c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801152a:	69bb      	ldr	r3, [r7, #24]
 801152c:	685b      	ldr	r3, [r3, #4]
 801152e:	3314      	adds	r3, #20
 8011530:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011532:	6a3b      	ldr	r3, [r7, #32]
 8011534:	6858      	ldr	r0, [r3, #4]
 8011536:	6a3b      	ldr	r3, [r7, #32]
 8011538:	685b      	ldr	r3, [r3, #4]
 801153a:	891a      	ldrh	r2, [r3, #8]
 801153c:	6a3b      	ldr	r3, [r7, #32]
 801153e:	891b      	ldrh	r3, [r3, #8]
 8011540:	1ad3      	subs	r3, r2, r3
 8011542:	b29b      	uxth	r3, r3
 8011544:	2201      	movs	r2, #1
 8011546:	6939      	ldr	r1, [r7, #16]
 8011548:	f7fa fe54 	bl	800c1f4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801154c:	6a3b      	ldr	r3, [r7, #32]
 801154e:	68db      	ldr	r3, [r3, #12]
 8011550:	685b      	ldr	r3, [r3, #4]
 8011552:	4618      	mov	r0, r3
 8011554:	f7f9 f9c8 	bl	800a8e8 <lwip_htonl>
 8011558:	4603      	mov	r3, r0
 801155a:	3301      	adds	r3, #1
 801155c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	1ad3      	subs	r3, r2, r3
 8011566:	2b00      	cmp	r3, #0
 8011568:	da02      	bge.n	8011570 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	68fa      	ldr	r2, [r7, #12]
 801156e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011574:	2200      	movs	r2, #0
 8011576:	69b9      	ldr	r1, [r7, #24]
 8011578:	6878      	ldr	r0, [r7, #4]
 801157a:	f7ff fded 	bl	8011158 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801157e:	687a      	ldr	r2, [r7, #4]
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	3304      	adds	r3, #4
 8011584:	69b9      	ldr	r1, [r7, #24]
 8011586:	6878      	ldr	r0, [r7, #4]
 8011588:	f7ff fe26 	bl	80111d8 <tcp_output_control_segment>
 801158c:	4603      	mov	r3, r0
 801158e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011590:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011594:	4618      	mov	r0, r3
 8011596:	372c      	adds	r7, #44	; 0x2c
 8011598:	46bd      	mov	sp, r7
 801159a:	bd90      	pop	{r4, r7, pc}
 801159c:	08018ba0 	.word	0x08018ba0
 80115a0:	08019398 	.word	0x08019398
 80115a4:	08018bf4 	.word	0x08018bf4

080115a8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b082      	sub	sp, #8
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80115b0:	f7fa ff0e 	bl	800c3d0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80115b4:	4b0a      	ldr	r3, [pc, #40]	; (80115e0 <tcpip_tcp_timer+0x38>)
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d103      	bne.n	80115c4 <tcpip_tcp_timer+0x1c>
 80115bc:	4b09      	ldr	r3, [pc, #36]	; (80115e4 <tcpip_tcp_timer+0x3c>)
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d005      	beq.n	80115d0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80115c4:	2200      	movs	r2, #0
 80115c6:	4908      	ldr	r1, [pc, #32]	; (80115e8 <tcpip_tcp_timer+0x40>)
 80115c8:	20fa      	movs	r0, #250	; 0xfa
 80115ca:	f000 f8f1 	bl	80117b0 <sys_timeout>
 80115ce:	e002      	b.n	80115d6 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80115d0:	4b06      	ldr	r3, [pc, #24]	; (80115ec <tcpip_tcp_timer+0x44>)
 80115d2:	2200      	movs	r2, #0
 80115d4:	601a      	str	r2, [r3, #0]
  }
}
 80115d6:	bf00      	nop
 80115d8:	3708      	adds	r7, #8
 80115da:	46bd      	mov	sp, r7
 80115dc:	bd80      	pop	{r7, pc}
 80115de:	bf00      	nop
 80115e0:	20007afc 	.word	0x20007afc
 80115e4:	20007b0c 	.word	0x20007b0c
 80115e8:	080115a9 	.word	0x080115a9
 80115ec:	20000498 	.word	0x20000498

080115f0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80115f0:	b580      	push	{r7, lr}
 80115f2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80115f4:	4b0a      	ldr	r3, [pc, #40]	; (8011620 <tcp_timer_needed+0x30>)
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d10f      	bne.n	801161c <tcp_timer_needed+0x2c>
 80115fc:	4b09      	ldr	r3, [pc, #36]	; (8011624 <tcp_timer_needed+0x34>)
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d103      	bne.n	801160c <tcp_timer_needed+0x1c>
 8011604:	4b08      	ldr	r3, [pc, #32]	; (8011628 <tcp_timer_needed+0x38>)
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d007      	beq.n	801161c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801160c:	4b04      	ldr	r3, [pc, #16]	; (8011620 <tcp_timer_needed+0x30>)
 801160e:	2201      	movs	r2, #1
 8011610:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011612:	2200      	movs	r2, #0
 8011614:	4905      	ldr	r1, [pc, #20]	; (801162c <tcp_timer_needed+0x3c>)
 8011616:	20fa      	movs	r0, #250	; 0xfa
 8011618:	f000 f8ca 	bl	80117b0 <sys_timeout>
  }
}
 801161c:	bf00      	nop
 801161e:	bd80      	pop	{r7, pc}
 8011620:	20000498 	.word	0x20000498
 8011624:	20007afc 	.word	0x20007afc
 8011628:	20007b0c 	.word	0x20007b0c
 801162c:	080115a9 	.word	0x080115a9

08011630 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b086      	sub	sp, #24
 8011634:	af00      	add	r7, sp, #0
 8011636:	60f8      	str	r0, [r7, #12]
 8011638:	60b9      	str	r1, [r7, #8]
 801163a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801163c:	2006      	movs	r0, #6
 801163e:	f7f9 fd93 	bl	800b168 <memp_malloc>
 8011642:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011644:	693b      	ldr	r3, [r7, #16]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d109      	bne.n	801165e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801164a:	693b      	ldr	r3, [r7, #16]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d151      	bne.n	80116f4 <sys_timeout_abs+0xc4>
 8011650:	4b2a      	ldr	r3, [pc, #168]	; (80116fc <sys_timeout_abs+0xcc>)
 8011652:	22be      	movs	r2, #190	; 0xbe
 8011654:	492a      	ldr	r1, [pc, #168]	; (8011700 <sys_timeout_abs+0xd0>)
 8011656:	482b      	ldr	r0, [pc, #172]	; (8011704 <sys_timeout_abs+0xd4>)
 8011658:	f005 f858 	bl	801670c <iprintf>
    return;
 801165c:	e04a      	b.n	80116f4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801165e:	693b      	ldr	r3, [r7, #16]
 8011660:	2200      	movs	r2, #0
 8011662:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011664:	693b      	ldr	r3, [r7, #16]
 8011666:	68ba      	ldr	r2, [r7, #8]
 8011668:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801166a:	693b      	ldr	r3, [r7, #16]
 801166c:	687a      	ldr	r2, [r7, #4]
 801166e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011670:	693b      	ldr	r3, [r7, #16]
 8011672:	68fa      	ldr	r2, [r7, #12]
 8011674:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011676:	4b24      	ldr	r3, [pc, #144]	; (8011708 <sys_timeout_abs+0xd8>)
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d103      	bne.n	8011686 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801167e:	4a22      	ldr	r2, [pc, #136]	; (8011708 <sys_timeout_abs+0xd8>)
 8011680:	693b      	ldr	r3, [r7, #16]
 8011682:	6013      	str	r3, [r2, #0]
    return;
 8011684:	e037      	b.n	80116f6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011686:	693b      	ldr	r3, [r7, #16]
 8011688:	685a      	ldr	r2, [r3, #4]
 801168a:	4b1f      	ldr	r3, [pc, #124]	; (8011708 <sys_timeout_abs+0xd8>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	685b      	ldr	r3, [r3, #4]
 8011690:	1ad3      	subs	r3, r2, r3
 8011692:	0fdb      	lsrs	r3, r3, #31
 8011694:	f003 0301 	and.w	r3, r3, #1
 8011698:	b2db      	uxtb	r3, r3
 801169a:	2b00      	cmp	r3, #0
 801169c:	d007      	beq.n	80116ae <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801169e:	4b1a      	ldr	r3, [pc, #104]	; (8011708 <sys_timeout_abs+0xd8>)
 80116a0:	681a      	ldr	r2, [r3, #0]
 80116a2:	693b      	ldr	r3, [r7, #16]
 80116a4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80116a6:	4a18      	ldr	r2, [pc, #96]	; (8011708 <sys_timeout_abs+0xd8>)
 80116a8:	693b      	ldr	r3, [r7, #16]
 80116aa:	6013      	str	r3, [r2, #0]
 80116ac:	e023      	b.n	80116f6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80116ae:	4b16      	ldr	r3, [pc, #88]	; (8011708 <sys_timeout_abs+0xd8>)
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	617b      	str	r3, [r7, #20]
 80116b4:	e01a      	b.n	80116ec <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80116b6:	697b      	ldr	r3, [r7, #20]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d00b      	beq.n	80116d6 <sys_timeout_abs+0xa6>
 80116be:	693b      	ldr	r3, [r7, #16]
 80116c0:	685a      	ldr	r2, [r3, #4]
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	685b      	ldr	r3, [r3, #4]
 80116c8:	1ad3      	subs	r3, r2, r3
 80116ca:	0fdb      	lsrs	r3, r3, #31
 80116cc:	f003 0301 	and.w	r3, r3, #1
 80116d0:	b2db      	uxtb	r3, r3
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d007      	beq.n	80116e6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80116d6:	697b      	ldr	r3, [r7, #20]
 80116d8:	681a      	ldr	r2, [r3, #0]
 80116da:	693b      	ldr	r3, [r7, #16]
 80116dc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80116de:	697b      	ldr	r3, [r7, #20]
 80116e0:	693a      	ldr	r2, [r7, #16]
 80116e2:	601a      	str	r2, [r3, #0]
        break;
 80116e4:	e007      	b.n	80116f6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80116e6:	697b      	ldr	r3, [r7, #20]
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	617b      	str	r3, [r7, #20]
 80116ec:	697b      	ldr	r3, [r7, #20]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d1e1      	bne.n	80116b6 <sys_timeout_abs+0x86>
 80116f2:	e000      	b.n	80116f6 <sys_timeout_abs+0xc6>
    return;
 80116f4:	bf00      	nop
      }
    }
  }
}
 80116f6:	3718      	adds	r7, #24
 80116f8:	46bd      	mov	sp, r7
 80116fa:	bd80      	pop	{r7, pc}
 80116fc:	080193bc 	.word	0x080193bc
 8011700:	080193f0 	.word	0x080193f0
 8011704:	08019430 	.word	0x08019430
 8011708:	20000490 	.word	0x20000490

0801170c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b086      	sub	sp, #24
 8011710:	af00      	add	r7, sp, #0
 8011712:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011718:	697b      	ldr	r3, [r7, #20]
 801171a:	685b      	ldr	r3, [r3, #4]
 801171c:	4798      	blx	r3

  now = sys_now();
 801171e:	f7f9 f8c7 	bl	800a8b0 <sys_now>
 8011722:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011724:	697b      	ldr	r3, [r7, #20]
 8011726:	681a      	ldr	r2, [r3, #0]
 8011728:	4b0f      	ldr	r3, [pc, #60]	; (8011768 <lwip_cyclic_timer+0x5c>)
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	4413      	add	r3, r2
 801172e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011730:	68fa      	ldr	r2, [r7, #12]
 8011732:	693b      	ldr	r3, [r7, #16]
 8011734:	1ad3      	subs	r3, r2, r3
 8011736:	0fdb      	lsrs	r3, r3, #31
 8011738:	f003 0301 	and.w	r3, r3, #1
 801173c:	b2db      	uxtb	r3, r3
 801173e:	2b00      	cmp	r3, #0
 8011740:	d009      	beq.n	8011756 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011742:	697b      	ldr	r3, [r7, #20]
 8011744:	681a      	ldr	r2, [r3, #0]
 8011746:	693b      	ldr	r3, [r7, #16]
 8011748:	4413      	add	r3, r2
 801174a:	687a      	ldr	r2, [r7, #4]
 801174c:	4907      	ldr	r1, [pc, #28]	; (801176c <lwip_cyclic_timer+0x60>)
 801174e:	4618      	mov	r0, r3
 8011750:	f7ff ff6e 	bl	8011630 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011754:	e004      	b.n	8011760 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011756:	687a      	ldr	r2, [r7, #4]
 8011758:	4904      	ldr	r1, [pc, #16]	; (801176c <lwip_cyclic_timer+0x60>)
 801175a:	68f8      	ldr	r0, [r7, #12]
 801175c:	f7ff ff68 	bl	8011630 <sys_timeout_abs>
}
 8011760:	bf00      	nop
 8011762:	3718      	adds	r7, #24
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}
 8011768:	20000494 	.word	0x20000494
 801176c:	0801170d 	.word	0x0801170d

08011770 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b082      	sub	sp, #8
 8011774:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011776:	2301      	movs	r3, #1
 8011778:	607b      	str	r3, [r7, #4]
 801177a:	e00e      	b.n	801179a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801177c:	4a0a      	ldr	r2, [pc, #40]	; (80117a8 <sys_timeouts_init+0x38>)
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	00db      	lsls	r3, r3, #3
 8011788:	4a07      	ldr	r2, [pc, #28]	; (80117a8 <sys_timeouts_init+0x38>)
 801178a:	4413      	add	r3, r2
 801178c:	461a      	mov	r2, r3
 801178e:	4907      	ldr	r1, [pc, #28]	; (80117ac <sys_timeouts_init+0x3c>)
 8011790:	f000 f80e 	bl	80117b0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	3301      	adds	r3, #1
 8011798:	607b      	str	r3, [r7, #4]
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	2b04      	cmp	r3, #4
 801179e:	d9ed      	bls.n	801177c <sys_timeouts_init+0xc>
  }
}
 80117a0:	bf00      	nop
 80117a2:	3708      	adds	r7, #8
 80117a4:	46bd      	mov	sp, r7
 80117a6:	bd80      	pop	{r7, pc}
 80117a8:	08028ce4 	.word	0x08028ce4
 80117ac:	0801170d 	.word	0x0801170d

080117b0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b086      	sub	sp, #24
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	60f8      	str	r0, [r7, #12]
 80117b8:	60b9      	str	r1, [r7, #8]
 80117ba:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80117c2:	d306      	bcc.n	80117d2 <sys_timeout+0x22>
 80117c4:	4b0a      	ldr	r3, [pc, #40]	; (80117f0 <sys_timeout+0x40>)
 80117c6:	f240 1229 	movw	r2, #297	; 0x129
 80117ca:	490a      	ldr	r1, [pc, #40]	; (80117f4 <sys_timeout+0x44>)
 80117cc:	480a      	ldr	r0, [pc, #40]	; (80117f8 <sys_timeout+0x48>)
 80117ce:	f004 ff9d 	bl	801670c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80117d2:	f7f9 f86d 	bl	800a8b0 <sys_now>
 80117d6:	4602      	mov	r2, r0
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	4413      	add	r3, r2
 80117dc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80117de:	687a      	ldr	r2, [r7, #4]
 80117e0:	68b9      	ldr	r1, [r7, #8]
 80117e2:	6978      	ldr	r0, [r7, #20]
 80117e4:	f7ff ff24 	bl	8011630 <sys_timeout_abs>
#endif
}
 80117e8:	bf00      	nop
 80117ea:	3718      	adds	r7, #24
 80117ec:	46bd      	mov	sp, r7
 80117ee:	bd80      	pop	{r7, pc}
 80117f0:	080193bc 	.word	0x080193bc
 80117f4:	08019458 	.word	0x08019458
 80117f8:	08019430 	.word	0x08019430

080117fc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b084      	sub	sp, #16
 8011800:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011802:	f7f9 f855 	bl	800a8b0 <sys_now>
 8011806:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8011808:	4b1a      	ldr	r3, [pc, #104]	; (8011874 <sys_check_timeouts+0x78>)
 801180a:	781b      	ldrb	r3, [r3, #0]
 801180c:	b2db      	uxtb	r3, r3
 801180e:	2b00      	cmp	r3, #0
 8011810:	d001      	beq.n	8011816 <sys_check_timeouts+0x1a>
 8011812:	f7f9 ffbf 	bl	800b794 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8011816:	4b18      	ldr	r3, [pc, #96]	; (8011878 <sys_check_timeouts+0x7c>)
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801181c:	68bb      	ldr	r3, [r7, #8]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d022      	beq.n	8011868 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011822:	68bb      	ldr	r3, [r7, #8]
 8011824:	685b      	ldr	r3, [r3, #4]
 8011826:	68fa      	ldr	r2, [r7, #12]
 8011828:	1ad3      	subs	r3, r2, r3
 801182a:	0fdb      	lsrs	r3, r3, #31
 801182c:	f003 0301 	and.w	r3, r3, #1
 8011830:	b2db      	uxtb	r3, r3
 8011832:	2b00      	cmp	r3, #0
 8011834:	d11a      	bne.n	801186c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011836:	68bb      	ldr	r3, [r7, #8]
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	4a0f      	ldr	r2, [pc, #60]	; (8011878 <sys_check_timeouts+0x7c>)
 801183c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801183e:	68bb      	ldr	r3, [r7, #8]
 8011840:	689b      	ldr	r3, [r3, #8]
 8011842:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011844:	68bb      	ldr	r3, [r7, #8]
 8011846:	68db      	ldr	r3, [r3, #12]
 8011848:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801184a:	68bb      	ldr	r3, [r7, #8]
 801184c:	685b      	ldr	r3, [r3, #4]
 801184e:	4a0b      	ldr	r2, [pc, #44]	; (801187c <sys_check_timeouts+0x80>)
 8011850:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011852:	68b9      	ldr	r1, [r7, #8]
 8011854:	2006      	movs	r0, #6
 8011856:	f7f9 fcd3 	bl	800b200 <memp_free>
    if (handler != NULL) {
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d0d3      	beq.n	8011808 <sys_check_timeouts+0xc>
      handler(arg);
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	6838      	ldr	r0, [r7, #0]
 8011864:	4798      	blx	r3
  do {
 8011866:	e7cf      	b.n	8011808 <sys_check_timeouts+0xc>
      return;
 8011868:	bf00      	nop
 801186a:	e000      	b.n	801186e <sys_check_timeouts+0x72>
      return;
 801186c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801186e:	3710      	adds	r7, #16
 8011870:	46bd      	mov	sp, r7
 8011872:	bd80      	pop	{r7, pc}
 8011874:	20007af4 	.word	0x20007af4
 8011878:	20000490 	.word	0x20000490
 801187c:	20000494 	.word	0x20000494

08011880 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011880:	b580      	push	{r7, lr}
 8011882:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011884:	f004 ff5a 	bl	801673c <rand>
 8011888:	4603      	mov	r3, r0
 801188a:	b29b      	uxth	r3, r3
 801188c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011890:	b29b      	uxth	r3, r3
 8011892:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011896:	b29a      	uxth	r2, r3
 8011898:	4b01      	ldr	r3, [pc, #4]	; (80118a0 <udp_init+0x20>)
 801189a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801189c:	bf00      	nop
 801189e:	bd80      	pop	{r7, pc}
 80118a0:	2000001c 	.word	0x2000001c

080118a4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80118a4:	b480      	push	{r7}
 80118a6:	b083      	sub	sp, #12
 80118a8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80118aa:	2300      	movs	r3, #0
 80118ac:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80118ae:	4b17      	ldr	r3, [pc, #92]	; (801190c <udp_new_port+0x68>)
 80118b0:	881b      	ldrh	r3, [r3, #0]
 80118b2:	1c5a      	adds	r2, r3, #1
 80118b4:	b291      	uxth	r1, r2
 80118b6:	4a15      	ldr	r2, [pc, #84]	; (801190c <udp_new_port+0x68>)
 80118b8:	8011      	strh	r1, [r2, #0]
 80118ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118be:	4293      	cmp	r3, r2
 80118c0:	d103      	bne.n	80118ca <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80118c2:	4b12      	ldr	r3, [pc, #72]	; (801190c <udp_new_port+0x68>)
 80118c4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80118c8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80118ca:	4b11      	ldr	r3, [pc, #68]	; (8011910 <udp_new_port+0x6c>)
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	603b      	str	r3, [r7, #0]
 80118d0:	e011      	b.n	80118f6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80118d2:	683b      	ldr	r3, [r7, #0]
 80118d4:	8a5a      	ldrh	r2, [r3, #18]
 80118d6:	4b0d      	ldr	r3, [pc, #52]	; (801190c <udp_new_port+0x68>)
 80118d8:	881b      	ldrh	r3, [r3, #0]
 80118da:	429a      	cmp	r2, r3
 80118dc:	d108      	bne.n	80118f0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80118de:	88fb      	ldrh	r3, [r7, #6]
 80118e0:	3301      	adds	r3, #1
 80118e2:	80fb      	strh	r3, [r7, #6]
 80118e4:	88fb      	ldrh	r3, [r7, #6]
 80118e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80118ea:	d3e0      	bcc.n	80118ae <udp_new_port+0xa>
        return 0;
 80118ec:	2300      	movs	r3, #0
 80118ee:	e007      	b.n	8011900 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	68db      	ldr	r3, [r3, #12]
 80118f4:	603b      	str	r3, [r7, #0]
 80118f6:	683b      	ldr	r3, [r7, #0]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d1ea      	bne.n	80118d2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80118fc:	4b03      	ldr	r3, [pc, #12]	; (801190c <udp_new_port+0x68>)
 80118fe:	881b      	ldrh	r3, [r3, #0]
}
 8011900:	4618      	mov	r0, r3
 8011902:	370c      	adds	r7, #12
 8011904:	46bd      	mov	sp, r7
 8011906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190a:	4770      	bx	lr
 801190c:	2000001c 	.word	0x2000001c
 8011910:	20007b14 	.word	0x20007b14

08011914 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b084      	sub	sp, #16
 8011918:	af00      	add	r7, sp, #0
 801191a:	60f8      	str	r0, [r7, #12]
 801191c:	60b9      	str	r1, [r7, #8]
 801191e:	4613      	mov	r3, r2
 8011920:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d105      	bne.n	8011934 <udp_input_local_match+0x20>
 8011928:	4b27      	ldr	r3, [pc, #156]	; (80119c8 <udp_input_local_match+0xb4>)
 801192a:	2287      	movs	r2, #135	; 0x87
 801192c:	4927      	ldr	r1, [pc, #156]	; (80119cc <udp_input_local_match+0xb8>)
 801192e:	4828      	ldr	r0, [pc, #160]	; (80119d0 <udp_input_local_match+0xbc>)
 8011930:	f004 feec 	bl	801670c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011934:	68bb      	ldr	r3, [r7, #8]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d105      	bne.n	8011946 <udp_input_local_match+0x32>
 801193a:	4b23      	ldr	r3, [pc, #140]	; (80119c8 <udp_input_local_match+0xb4>)
 801193c:	2288      	movs	r2, #136	; 0x88
 801193e:	4925      	ldr	r1, [pc, #148]	; (80119d4 <udp_input_local_match+0xc0>)
 8011940:	4823      	ldr	r0, [pc, #140]	; (80119d0 <udp_input_local_match+0xbc>)
 8011942:	f004 fee3 	bl	801670c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	7a1b      	ldrb	r3, [r3, #8]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d00b      	beq.n	8011966 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	7a1a      	ldrb	r2, [r3, #8]
 8011952:	4b21      	ldr	r3, [pc, #132]	; (80119d8 <udp_input_local_match+0xc4>)
 8011954:	685b      	ldr	r3, [r3, #4]
 8011956:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801195a:	3301      	adds	r3, #1
 801195c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801195e:	429a      	cmp	r2, r3
 8011960:	d001      	beq.n	8011966 <udp_input_local_match+0x52>
    return 0;
 8011962:	2300      	movs	r3, #0
 8011964:	e02b      	b.n	80119be <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011966:	79fb      	ldrb	r3, [r7, #7]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d018      	beq.n	801199e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d013      	beq.n	801199a <udp_input_local_match+0x86>
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d00f      	beq.n	801199a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801197a:	4b17      	ldr	r3, [pc, #92]	; (80119d8 <udp_input_local_match+0xc4>)
 801197c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801197e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011982:	d00a      	beq.n	801199a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	681a      	ldr	r2, [r3, #0]
 8011988:	4b13      	ldr	r3, [pc, #76]	; (80119d8 <udp_input_local_match+0xc4>)
 801198a:	695b      	ldr	r3, [r3, #20]
 801198c:	405a      	eors	r2, r3
 801198e:	68bb      	ldr	r3, [r7, #8]
 8011990:	3308      	adds	r3, #8
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011996:	2b00      	cmp	r3, #0
 8011998:	d110      	bne.n	80119bc <udp_input_local_match+0xa8>
          return 1;
 801199a:	2301      	movs	r3, #1
 801199c:	e00f      	b.n	80119be <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d009      	beq.n	80119b8 <udp_input_local_match+0xa4>
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d005      	beq.n	80119b8 <udp_input_local_match+0xa4>
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	681a      	ldr	r2, [r3, #0]
 80119b0:	4b09      	ldr	r3, [pc, #36]	; (80119d8 <udp_input_local_match+0xc4>)
 80119b2:	695b      	ldr	r3, [r3, #20]
 80119b4:	429a      	cmp	r2, r3
 80119b6:	d101      	bne.n	80119bc <udp_input_local_match+0xa8>
        return 1;
 80119b8:	2301      	movs	r3, #1
 80119ba:	e000      	b.n	80119be <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80119bc:	2300      	movs	r3, #0
}
 80119be:	4618      	mov	r0, r3
 80119c0:	3710      	adds	r7, #16
 80119c2:	46bd      	mov	sp, r7
 80119c4:	bd80      	pop	{r7, pc}
 80119c6:	bf00      	nop
 80119c8:	080194a4 	.word	0x080194a4
 80119cc:	080194d4 	.word	0x080194d4
 80119d0:	080194f8 	.word	0x080194f8
 80119d4:	08019520 	.word	0x08019520
 80119d8:	20004598 	.word	0x20004598

080119dc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80119dc:	b590      	push	{r4, r7, lr}
 80119de:	b08d      	sub	sp, #52	; 0x34
 80119e0:	af02      	add	r7, sp, #8
 80119e2:	6078      	str	r0, [r7, #4]
 80119e4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80119e6:	2300      	movs	r3, #0
 80119e8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d105      	bne.n	80119fc <udp_input+0x20>
 80119f0:	4b7c      	ldr	r3, [pc, #496]	; (8011be4 <udp_input+0x208>)
 80119f2:	22cf      	movs	r2, #207	; 0xcf
 80119f4:	497c      	ldr	r1, [pc, #496]	; (8011be8 <udp_input+0x20c>)
 80119f6:	487d      	ldr	r0, [pc, #500]	; (8011bec <udp_input+0x210>)
 80119f8:	f004 fe88 	bl	801670c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80119fc:	683b      	ldr	r3, [r7, #0]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d105      	bne.n	8011a0e <udp_input+0x32>
 8011a02:	4b78      	ldr	r3, [pc, #480]	; (8011be4 <udp_input+0x208>)
 8011a04:	22d0      	movs	r2, #208	; 0xd0
 8011a06:	497a      	ldr	r1, [pc, #488]	; (8011bf0 <udp_input+0x214>)
 8011a08:	4878      	ldr	r0, [pc, #480]	; (8011bec <udp_input+0x210>)
 8011a0a:	f004 fe7f 	bl	801670c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	895b      	ldrh	r3, [r3, #10]
 8011a12:	2b07      	cmp	r3, #7
 8011a14:	d803      	bhi.n	8011a1e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011a16:	6878      	ldr	r0, [r7, #4]
 8011a18:	f7fa f9f2 	bl	800be00 <pbuf_free>
    goto end;
 8011a1c:	e0de      	b.n	8011bdc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	685b      	ldr	r3, [r3, #4]
 8011a22:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011a24:	4b73      	ldr	r3, [pc, #460]	; (8011bf4 <udp_input+0x218>)
 8011a26:	695a      	ldr	r2, [r3, #20]
 8011a28:	4b72      	ldr	r3, [pc, #456]	; (8011bf4 <udp_input+0x218>)
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	4619      	mov	r1, r3
 8011a2e:	4610      	mov	r0, r2
 8011a30:	f003 fe22 	bl	8015678 <ip4_addr_isbroadcast_u32>
 8011a34:	4603      	mov	r3, r0
 8011a36:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011a38:	697b      	ldr	r3, [r7, #20]
 8011a3a:	881b      	ldrh	r3, [r3, #0]
 8011a3c:	b29b      	uxth	r3, r3
 8011a3e:	4618      	mov	r0, r3
 8011a40:	f7f8 ff3d 	bl	800a8be <lwip_htons>
 8011a44:	4603      	mov	r3, r0
 8011a46:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011a48:	697b      	ldr	r3, [r7, #20]
 8011a4a:	885b      	ldrh	r3, [r3, #2]
 8011a4c:	b29b      	uxth	r3, r3
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f7f8 ff35 	bl	800a8be <lwip_htons>
 8011a54:	4603      	mov	r3, r0
 8011a56:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011a58:	2300      	movs	r3, #0
 8011a5a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011a60:	2300      	movs	r3, #0
 8011a62:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a64:	4b64      	ldr	r3, [pc, #400]	; (8011bf8 <udp_input+0x21c>)
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	627b      	str	r3, [r7, #36]	; 0x24
 8011a6a:	e054      	b.n	8011b16 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a6e:	8a5b      	ldrh	r3, [r3, #18]
 8011a70:	89fa      	ldrh	r2, [r7, #14]
 8011a72:	429a      	cmp	r2, r3
 8011a74:	d14a      	bne.n	8011b0c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011a76:	7cfb      	ldrb	r3, [r7, #19]
 8011a78:	461a      	mov	r2, r3
 8011a7a:	6839      	ldr	r1, [r7, #0]
 8011a7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011a7e:	f7ff ff49 	bl	8011914 <udp_input_local_match>
 8011a82:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d041      	beq.n	8011b0c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a8a:	7c1b      	ldrb	r3, [r3, #16]
 8011a8c:	f003 0304 	and.w	r3, r3, #4
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d11d      	bne.n	8011ad0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011a94:	69fb      	ldr	r3, [r7, #28]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d102      	bne.n	8011aa0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a9c:	61fb      	str	r3, [r7, #28]
 8011a9e:	e017      	b.n	8011ad0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011aa0:	7cfb      	ldrb	r3, [r7, #19]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d014      	beq.n	8011ad0 <udp_input+0xf4>
 8011aa6:	4b53      	ldr	r3, [pc, #332]	; (8011bf4 <udp_input+0x218>)
 8011aa8:	695b      	ldr	r3, [r3, #20]
 8011aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011aae:	d10f      	bne.n	8011ad0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011ab0:	69fb      	ldr	r3, [r7, #28]
 8011ab2:	681a      	ldr	r2, [r3, #0]
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	3304      	adds	r3, #4
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	429a      	cmp	r2, r3
 8011abc:	d008      	beq.n	8011ad0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ac0:	681a      	ldr	r2, [r3, #0]
 8011ac2:	683b      	ldr	r3, [r7, #0]
 8011ac4:	3304      	adds	r3, #4
 8011ac6:	681b      	ldr	r3, [r3, #0]
 8011ac8:	429a      	cmp	r2, r3
 8011aca:	d101      	bne.n	8011ad0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ace:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ad2:	8a9b      	ldrh	r3, [r3, #20]
 8011ad4:	8a3a      	ldrh	r2, [r7, #16]
 8011ad6:	429a      	cmp	r2, r3
 8011ad8:	d118      	bne.n	8011b0c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011adc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d005      	beq.n	8011aee <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae4:	685a      	ldr	r2, [r3, #4]
 8011ae6:	4b43      	ldr	r3, [pc, #268]	; (8011bf4 <udp_input+0x218>)
 8011ae8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011aea:	429a      	cmp	r2, r3
 8011aec:	d10e      	bne.n	8011b0c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011aee:	6a3b      	ldr	r3, [r7, #32]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d014      	beq.n	8011b1e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af6:	68da      	ldr	r2, [r3, #12]
 8011af8:	6a3b      	ldr	r3, [r7, #32]
 8011afa:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011afc:	4b3e      	ldr	r3, [pc, #248]	; (8011bf8 <udp_input+0x21c>)
 8011afe:	681a      	ldr	r2, [r3, #0]
 8011b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b02:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011b04:	4a3c      	ldr	r2, [pc, #240]	; (8011bf8 <udp_input+0x21c>)
 8011b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b08:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011b0a:	e008      	b.n	8011b1e <udp_input+0x142>
      }
    }

    prev = pcb;
 8011b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b0e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b12:	68db      	ldr	r3, [r3, #12]
 8011b14:	627b      	str	r3, [r7, #36]	; 0x24
 8011b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d1a7      	bne.n	8011a6c <udp_input+0x90>
 8011b1c:	e000      	b.n	8011b20 <udp_input+0x144>
        break;
 8011b1e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d101      	bne.n	8011b2a <udp_input+0x14e>
    pcb = uncon_pcb;
 8011b26:	69fb      	ldr	r3, [r7, #28]
 8011b28:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d002      	beq.n	8011b36 <udp_input+0x15a>
    for_us = 1;
 8011b30:	2301      	movs	r3, #1
 8011b32:	76fb      	strb	r3, [r7, #27]
 8011b34:	e00a      	b.n	8011b4c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011b36:	683b      	ldr	r3, [r7, #0]
 8011b38:	3304      	adds	r3, #4
 8011b3a:	681a      	ldr	r2, [r3, #0]
 8011b3c:	4b2d      	ldr	r3, [pc, #180]	; (8011bf4 <udp_input+0x218>)
 8011b3e:	695b      	ldr	r3, [r3, #20]
 8011b40:	429a      	cmp	r2, r3
 8011b42:	bf0c      	ite	eq
 8011b44:	2301      	moveq	r3, #1
 8011b46:	2300      	movne	r3, #0
 8011b48:	b2db      	uxtb	r3, r3
 8011b4a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011b4c:	7efb      	ldrb	r3, [r7, #27]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d041      	beq.n	8011bd6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011b52:	2108      	movs	r1, #8
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f7fa f8cd 	bl	800bcf4 <pbuf_remove_header>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d00a      	beq.n	8011b76 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011b60:	4b20      	ldr	r3, [pc, #128]	; (8011be4 <udp_input+0x208>)
 8011b62:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011b66:	4925      	ldr	r1, [pc, #148]	; (8011bfc <udp_input+0x220>)
 8011b68:	4820      	ldr	r0, [pc, #128]	; (8011bec <udp_input+0x210>)
 8011b6a:	f004 fdcf 	bl	801670c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	f7fa f946 	bl	800be00 <pbuf_free>
      goto end;
 8011b74:	e032      	b.n	8011bdc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d012      	beq.n	8011ba2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b7e:	699b      	ldr	r3, [r3, #24]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d00a      	beq.n	8011b9a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b86:	699c      	ldr	r4, [r3, #24]
 8011b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b8a:	69d8      	ldr	r0, [r3, #28]
 8011b8c:	8a3b      	ldrh	r3, [r7, #16]
 8011b8e:	9300      	str	r3, [sp, #0]
 8011b90:	4b1b      	ldr	r3, [pc, #108]	; (8011c00 <udp_input+0x224>)
 8011b92:	687a      	ldr	r2, [r7, #4]
 8011b94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011b96:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011b98:	e021      	b.n	8011bde <udp_input+0x202>
        pbuf_free(p);
 8011b9a:	6878      	ldr	r0, [r7, #4]
 8011b9c:	f7fa f930 	bl	800be00 <pbuf_free>
        goto end;
 8011ba0:	e01c      	b.n	8011bdc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011ba2:	7cfb      	ldrb	r3, [r7, #19]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d112      	bne.n	8011bce <udp_input+0x1f2>
 8011ba8:	4b12      	ldr	r3, [pc, #72]	; (8011bf4 <udp_input+0x218>)
 8011baa:	695b      	ldr	r3, [r3, #20]
 8011bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011bb0:	2be0      	cmp	r3, #224	; 0xe0
 8011bb2:	d00c      	beq.n	8011bce <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011bb4:	4b0f      	ldr	r3, [pc, #60]	; (8011bf4 <udp_input+0x218>)
 8011bb6:	899b      	ldrh	r3, [r3, #12]
 8011bb8:	3308      	adds	r3, #8
 8011bba:	b29b      	uxth	r3, r3
 8011bbc:	b21b      	sxth	r3, r3
 8011bbe:	4619      	mov	r1, r3
 8011bc0:	6878      	ldr	r0, [r7, #4]
 8011bc2:	f7fa f90a 	bl	800bdda <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011bc6:	2103      	movs	r1, #3
 8011bc8:	6878      	ldr	r0, [r7, #4]
 8011bca:	f003 fa19 	bl	8015000 <icmp_dest_unreach>
      pbuf_free(p);
 8011bce:	6878      	ldr	r0, [r7, #4]
 8011bd0:	f7fa f916 	bl	800be00 <pbuf_free>
  return;
 8011bd4:	e003      	b.n	8011bde <udp_input+0x202>
    pbuf_free(p);
 8011bd6:	6878      	ldr	r0, [r7, #4]
 8011bd8:	f7fa f912 	bl	800be00 <pbuf_free>
  return;
 8011bdc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011bde:	372c      	adds	r7, #44	; 0x2c
 8011be0:	46bd      	mov	sp, r7
 8011be2:	bd90      	pop	{r4, r7, pc}
 8011be4:	080194a4 	.word	0x080194a4
 8011be8:	08019548 	.word	0x08019548
 8011bec:	080194f8 	.word	0x080194f8
 8011bf0:	08019560 	.word	0x08019560
 8011bf4:	20004598 	.word	0x20004598
 8011bf8:	20007b14 	.word	0x20007b14
 8011bfc:	0801957c 	.word	0x0801957c
 8011c00:	200045a8 	.word	0x200045a8

08011c04 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b088      	sub	sp, #32
 8011c08:	af02      	add	r7, sp, #8
 8011c0a:	60f8      	str	r0, [r7, #12]
 8011c0c:	60b9      	str	r1, [r7, #8]
 8011c0e:	607a      	str	r2, [r7, #4]
 8011c10:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d109      	bne.n	8011c2c <udp_sendto+0x28>
 8011c18:	4b23      	ldr	r3, [pc, #140]	; (8011ca8 <udp_sendto+0xa4>)
 8011c1a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011c1e:	4923      	ldr	r1, [pc, #140]	; (8011cac <udp_sendto+0xa8>)
 8011c20:	4823      	ldr	r0, [pc, #140]	; (8011cb0 <udp_sendto+0xac>)
 8011c22:	f004 fd73 	bl	801670c <iprintf>
 8011c26:	f06f 030f 	mvn.w	r3, #15
 8011c2a:	e038      	b.n	8011c9e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8011c2c:	68bb      	ldr	r3, [r7, #8]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d109      	bne.n	8011c46 <udp_sendto+0x42>
 8011c32:	4b1d      	ldr	r3, [pc, #116]	; (8011ca8 <udp_sendto+0xa4>)
 8011c34:	f240 2219 	movw	r2, #537	; 0x219
 8011c38:	491e      	ldr	r1, [pc, #120]	; (8011cb4 <udp_sendto+0xb0>)
 8011c3a:	481d      	ldr	r0, [pc, #116]	; (8011cb0 <udp_sendto+0xac>)
 8011c3c:	f004 fd66 	bl	801670c <iprintf>
 8011c40:	f06f 030f 	mvn.w	r3, #15
 8011c44:	e02b      	b.n	8011c9e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d109      	bne.n	8011c60 <udp_sendto+0x5c>
 8011c4c:	4b16      	ldr	r3, [pc, #88]	; (8011ca8 <udp_sendto+0xa4>)
 8011c4e:	f240 221a 	movw	r2, #538	; 0x21a
 8011c52:	4919      	ldr	r1, [pc, #100]	; (8011cb8 <udp_sendto+0xb4>)
 8011c54:	4816      	ldr	r0, [pc, #88]	; (8011cb0 <udp_sendto+0xac>)
 8011c56:	f004 fd59 	bl	801670c <iprintf>
 8011c5a:	f06f 030f 	mvn.w	r3, #15
 8011c5e:	e01e      	b.n	8011c9e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	7a1b      	ldrb	r3, [r3, #8]
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d006      	beq.n	8011c76 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	7a1b      	ldrb	r3, [r3, #8]
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	f7f9 fd6b 	bl	800b748 <netif_get_by_index>
 8011c72:	6178      	str	r0, [r7, #20]
 8011c74:	e003      	b.n	8011c7e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8011c76:	6878      	ldr	r0, [r7, #4]
 8011c78:	f003 fa4c 	bl	8015114 <ip4_route>
 8011c7c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8011c7e:	697b      	ldr	r3, [r7, #20]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d102      	bne.n	8011c8a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8011c84:	f06f 0303 	mvn.w	r3, #3
 8011c88:	e009      	b.n	8011c9e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8011c8a:	887a      	ldrh	r2, [r7, #2]
 8011c8c:	697b      	ldr	r3, [r7, #20]
 8011c8e:	9300      	str	r3, [sp, #0]
 8011c90:	4613      	mov	r3, r2
 8011c92:	687a      	ldr	r2, [r7, #4]
 8011c94:	68b9      	ldr	r1, [r7, #8]
 8011c96:	68f8      	ldr	r0, [r7, #12]
 8011c98:	f000 f810 	bl	8011cbc <udp_sendto_if>
 8011c9c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	3718      	adds	r7, #24
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	bd80      	pop	{r7, pc}
 8011ca6:	bf00      	nop
 8011ca8:	080194a4 	.word	0x080194a4
 8011cac:	080195c8 	.word	0x080195c8
 8011cb0:	080194f8 	.word	0x080194f8
 8011cb4:	080195e0 	.word	0x080195e0
 8011cb8:	080195fc 	.word	0x080195fc

08011cbc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b088      	sub	sp, #32
 8011cc0:	af02      	add	r7, sp, #8
 8011cc2:	60f8      	str	r0, [r7, #12]
 8011cc4:	60b9      	str	r1, [r7, #8]
 8011cc6:	607a      	str	r2, [r7, #4]
 8011cc8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d109      	bne.n	8011ce4 <udp_sendto_if+0x28>
 8011cd0:	4b2e      	ldr	r3, [pc, #184]	; (8011d8c <udp_sendto_if+0xd0>)
 8011cd2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011cd6:	492e      	ldr	r1, [pc, #184]	; (8011d90 <udp_sendto_if+0xd4>)
 8011cd8:	482e      	ldr	r0, [pc, #184]	; (8011d94 <udp_sendto_if+0xd8>)
 8011cda:	f004 fd17 	bl	801670c <iprintf>
 8011cde:	f06f 030f 	mvn.w	r3, #15
 8011ce2:	e04f      	b.n	8011d84 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8011ce4:	68bb      	ldr	r3, [r7, #8]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d109      	bne.n	8011cfe <udp_sendto_if+0x42>
 8011cea:	4b28      	ldr	r3, [pc, #160]	; (8011d8c <udp_sendto_if+0xd0>)
 8011cec:	f240 2281 	movw	r2, #641	; 0x281
 8011cf0:	4929      	ldr	r1, [pc, #164]	; (8011d98 <udp_sendto_if+0xdc>)
 8011cf2:	4828      	ldr	r0, [pc, #160]	; (8011d94 <udp_sendto_if+0xd8>)
 8011cf4:	f004 fd0a 	bl	801670c <iprintf>
 8011cf8:	f06f 030f 	mvn.w	r3, #15
 8011cfc:	e042      	b.n	8011d84 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d109      	bne.n	8011d18 <udp_sendto_if+0x5c>
 8011d04:	4b21      	ldr	r3, [pc, #132]	; (8011d8c <udp_sendto_if+0xd0>)
 8011d06:	f240 2282 	movw	r2, #642	; 0x282
 8011d0a:	4924      	ldr	r1, [pc, #144]	; (8011d9c <udp_sendto_if+0xe0>)
 8011d0c:	4821      	ldr	r0, [pc, #132]	; (8011d94 <udp_sendto_if+0xd8>)
 8011d0e:	f004 fcfd 	bl	801670c <iprintf>
 8011d12:	f06f 030f 	mvn.w	r3, #15
 8011d16:	e035      	b.n	8011d84 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011d18:	6a3b      	ldr	r3, [r7, #32]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d109      	bne.n	8011d32 <udp_sendto_if+0x76>
 8011d1e:	4b1b      	ldr	r3, [pc, #108]	; (8011d8c <udp_sendto_if+0xd0>)
 8011d20:	f240 2283 	movw	r2, #643	; 0x283
 8011d24:	491e      	ldr	r1, [pc, #120]	; (8011da0 <udp_sendto_if+0xe4>)
 8011d26:	481b      	ldr	r0, [pc, #108]	; (8011d94 <udp_sendto_if+0xd8>)
 8011d28:	f004 fcf0 	bl	801670c <iprintf>
 8011d2c:	f06f 030f 	mvn.w	r3, #15
 8011d30:	e028      	b.n	8011d84 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d009      	beq.n	8011d4c <udp_sendto_if+0x90>
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d005      	beq.n	8011d4c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011d48:	2be0      	cmp	r3, #224	; 0xe0
 8011d4a:	d103      	bne.n	8011d54 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8011d4c:	6a3b      	ldr	r3, [r7, #32]
 8011d4e:	3304      	adds	r3, #4
 8011d50:	617b      	str	r3, [r7, #20]
 8011d52:	e00b      	b.n	8011d6c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	681a      	ldr	r2, [r3, #0]
 8011d58:	6a3b      	ldr	r3, [r7, #32]
 8011d5a:	3304      	adds	r3, #4
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	429a      	cmp	r2, r3
 8011d60:	d002      	beq.n	8011d68 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8011d62:	f06f 0303 	mvn.w	r3, #3
 8011d66:	e00d      	b.n	8011d84 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8011d6c:	887a      	ldrh	r2, [r7, #2]
 8011d6e:	697b      	ldr	r3, [r7, #20]
 8011d70:	9301      	str	r3, [sp, #4]
 8011d72:	6a3b      	ldr	r3, [r7, #32]
 8011d74:	9300      	str	r3, [sp, #0]
 8011d76:	4613      	mov	r3, r2
 8011d78:	687a      	ldr	r2, [r7, #4]
 8011d7a:	68b9      	ldr	r1, [r7, #8]
 8011d7c:	68f8      	ldr	r0, [r7, #12]
 8011d7e:	f000 f811 	bl	8011da4 <udp_sendto_if_src>
 8011d82:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011d84:	4618      	mov	r0, r3
 8011d86:	3718      	adds	r7, #24
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}
 8011d8c:	080194a4 	.word	0x080194a4
 8011d90:	08019618 	.word	0x08019618
 8011d94:	080194f8 	.word	0x080194f8
 8011d98:	08019634 	.word	0x08019634
 8011d9c:	08019650 	.word	0x08019650
 8011da0:	08019670 	.word	0x08019670

08011da4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b08c      	sub	sp, #48	; 0x30
 8011da8:	af04      	add	r7, sp, #16
 8011daa:	60f8      	str	r0, [r7, #12]
 8011dac:	60b9      	str	r1, [r7, #8]
 8011dae:	607a      	str	r2, [r7, #4]
 8011db0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d109      	bne.n	8011dcc <udp_sendto_if_src+0x28>
 8011db8:	4b65      	ldr	r3, [pc, #404]	; (8011f50 <udp_sendto_if_src+0x1ac>)
 8011dba:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011dbe:	4965      	ldr	r1, [pc, #404]	; (8011f54 <udp_sendto_if_src+0x1b0>)
 8011dc0:	4865      	ldr	r0, [pc, #404]	; (8011f58 <udp_sendto_if_src+0x1b4>)
 8011dc2:	f004 fca3 	bl	801670c <iprintf>
 8011dc6:	f06f 030f 	mvn.w	r3, #15
 8011dca:	e0bc      	b.n	8011f46 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8011dcc:	68bb      	ldr	r3, [r7, #8]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d109      	bne.n	8011de6 <udp_sendto_if_src+0x42>
 8011dd2:	4b5f      	ldr	r3, [pc, #380]	; (8011f50 <udp_sendto_if_src+0x1ac>)
 8011dd4:	f240 22d2 	movw	r2, #722	; 0x2d2
 8011dd8:	4960      	ldr	r1, [pc, #384]	; (8011f5c <udp_sendto_if_src+0x1b8>)
 8011dda:	485f      	ldr	r0, [pc, #380]	; (8011f58 <udp_sendto_if_src+0x1b4>)
 8011ddc:	f004 fc96 	bl	801670c <iprintf>
 8011de0:	f06f 030f 	mvn.w	r3, #15
 8011de4:	e0af      	b.n	8011f46 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d109      	bne.n	8011e00 <udp_sendto_if_src+0x5c>
 8011dec:	4b58      	ldr	r3, [pc, #352]	; (8011f50 <udp_sendto_if_src+0x1ac>)
 8011dee:	f240 22d3 	movw	r2, #723	; 0x2d3
 8011df2:	495b      	ldr	r1, [pc, #364]	; (8011f60 <udp_sendto_if_src+0x1bc>)
 8011df4:	4858      	ldr	r0, [pc, #352]	; (8011f58 <udp_sendto_if_src+0x1b4>)
 8011df6:	f004 fc89 	bl	801670c <iprintf>
 8011dfa:	f06f 030f 	mvn.w	r3, #15
 8011dfe:	e0a2      	b.n	8011f46 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8011e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d109      	bne.n	8011e1a <udp_sendto_if_src+0x76>
 8011e06:	4b52      	ldr	r3, [pc, #328]	; (8011f50 <udp_sendto_if_src+0x1ac>)
 8011e08:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8011e0c:	4955      	ldr	r1, [pc, #340]	; (8011f64 <udp_sendto_if_src+0x1c0>)
 8011e0e:	4852      	ldr	r0, [pc, #328]	; (8011f58 <udp_sendto_if_src+0x1b4>)
 8011e10:	f004 fc7c 	bl	801670c <iprintf>
 8011e14:	f06f 030f 	mvn.w	r3, #15
 8011e18:	e095      	b.n	8011f46 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8011e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d109      	bne.n	8011e34 <udp_sendto_if_src+0x90>
 8011e20:	4b4b      	ldr	r3, [pc, #300]	; (8011f50 <udp_sendto_if_src+0x1ac>)
 8011e22:	f240 22d5 	movw	r2, #725	; 0x2d5
 8011e26:	4950      	ldr	r1, [pc, #320]	; (8011f68 <udp_sendto_if_src+0x1c4>)
 8011e28:	484b      	ldr	r0, [pc, #300]	; (8011f58 <udp_sendto_if_src+0x1b4>)
 8011e2a:	f004 fc6f 	bl	801670c <iprintf>
 8011e2e:	f06f 030f 	mvn.w	r3, #15
 8011e32:	e088      	b.n	8011f46 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	8a5b      	ldrh	r3, [r3, #18]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d10f      	bne.n	8011e5c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011e3c:	68f9      	ldr	r1, [r7, #12]
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	8a5b      	ldrh	r3, [r3, #18]
 8011e42:	461a      	mov	r2, r3
 8011e44:	68f8      	ldr	r0, [r7, #12]
 8011e46:	f000 f893 	bl	8011f70 <udp_bind>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8011e4e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d002      	beq.n	8011e5c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8011e56:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011e5a:	e074      	b.n	8011f46 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8011e5c:	68bb      	ldr	r3, [r7, #8]
 8011e5e:	891b      	ldrh	r3, [r3, #8]
 8011e60:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8011e64:	4293      	cmp	r3, r2
 8011e66:	d902      	bls.n	8011e6e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8011e68:	f04f 33ff 	mov.w	r3, #4294967295
 8011e6c:	e06b      	b.n	8011f46 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8011e6e:	2108      	movs	r1, #8
 8011e70:	68b8      	ldr	r0, [r7, #8]
 8011e72:	f7f9 ff2f 	bl	800bcd4 <pbuf_add_header>
 8011e76:	4603      	mov	r3, r0
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d015      	beq.n	8011ea8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011e7c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011e80:	2108      	movs	r1, #8
 8011e82:	2022      	movs	r0, #34	; 0x22
 8011e84:	f7f9 fcdc 	bl	800b840 <pbuf_alloc>
 8011e88:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8011e8a:	69fb      	ldr	r3, [r7, #28]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d102      	bne.n	8011e96 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8011e90:	f04f 33ff 	mov.w	r3, #4294967295
 8011e94:	e057      	b.n	8011f46 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8011e96:	68bb      	ldr	r3, [r7, #8]
 8011e98:	891b      	ldrh	r3, [r3, #8]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d006      	beq.n	8011eac <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8011e9e:	68b9      	ldr	r1, [r7, #8]
 8011ea0:	69f8      	ldr	r0, [r7, #28]
 8011ea2:	f7fa f8c5 	bl	800c030 <pbuf_chain>
 8011ea6:	e001      	b.n	8011eac <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8011ea8:	68bb      	ldr	r3, [r7, #8]
 8011eaa:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011eac:	69fb      	ldr	r3, [r7, #28]
 8011eae:	895b      	ldrh	r3, [r3, #10]
 8011eb0:	2b07      	cmp	r3, #7
 8011eb2:	d806      	bhi.n	8011ec2 <udp_sendto_if_src+0x11e>
 8011eb4:	4b26      	ldr	r3, [pc, #152]	; (8011f50 <udp_sendto_if_src+0x1ac>)
 8011eb6:	f240 320e 	movw	r2, #782	; 0x30e
 8011eba:	492c      	ldr	r1, [pc, #176]	; (8011f6c <udp_sendto_if_src+0x1c8>)
 8011ebc:	4826      	ldr	r0, [pc, #152]	; (8011f58 <udp_sendto_if_src+0x1b4>)
 8011ebe:	f004 fc25 	bl	801670c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8011ec2:	69fb      	ldr	r3, [r7, #28]
 8011ec4:	685b      	ldr	r3, [r3, #4]
 8011ec6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	8a5b      	ldrh	r3, [r3, #18]
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f7f8 fcf6 	bl	800a8be <lwip_htons>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	461a      	mov	r2, r3
 8011ed6:	697b      	ldr	r3, [r7, #20]
 8011ed8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8011eda:	887b      	ldrh	r3, [r7, #2]
 8011edc:	4618      	mov	r0, r3
 8011ede:	f7f8 fcee 	bl	800a8be <lwip_htons>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	461a      	mov	r2, r3
 8011ee6:	697b      	ldr	r3, [r7, #20]
 8011ee8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8011eea:	697b      	ldr	r3, [r7, #20]
 8011eec:	2200      	movs	r2, #0
 8011eee:	719a      	strb	r2, [r3, #6]
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8011ef4:	69fb      	ldr	r3, [r7, #28]
 8011ef6:	891b      	ldrh	r3, [r3, #8]
 8011ef8:	4618      	mov	r0, r3
 8011efa:	f7f8 fce0 	bl	800a8be <lwip_htons>
 8011efe:	4603      	mov	r3, r0
 8011f00:	461a      	mov	r2, r3
 8011f02:	697b      	ldr	r3, [r7, #20]
 8011f04:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8011f06:	2311      	movs	r3, #17
 8011f08:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	7adb      	ldrb	r3, [r3, #11]
 8011f0e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	7a9b      	ldrb	r3, [r3, #10]
 8011f14:	7cb9      	ldrb	r1, [r7, #18]
 8011f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f18:	9202      	str	r2, [sp, #8]
 8011f1a:	7cfa      	ldrb	r2, [r7, #19]
 8011f1c:	9201      	str	r2, [sp, #4]
 8011f1e:	9300      	str	r3, [sp, #0]
 8011f20:	460b      	mov	r3, r1
 8011f22:	687a      	ldr	r2, [r7, #4]
 8011f24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011f26:	69f8      	ldr	r0, [r7, #28]
 8011f28:	f003 faf8 	bl	801551c <ip4_output_if_src>
 8011f2c:	4603      	mov	r3, r0
 8011f2e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8011f30:	69fa      	ldr	r2, [r7, #28]
 8011f32:	68bb      	ldr	r3, [r7, #8]
 8011f34:	429a      	cmp	r2, r3
 8011f36:	d004      	beq.n	8011f42 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8011f38:	69f8      	ldr	r0, [r7, #28]
 8011f3a:	f7f9 ff61 	bl	800be00 <pbuf_free>
    q = NULL;
 8011f3e:	2300      	movs	r3, #0
 8011f40:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8011f42:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8011f46:	4618      	mov	r0, r3
 8011f48:	3720      	adds	r7, #32
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	bd80      	pop	{r7, pc}
 8011f4e:	bf00      	nop
 8011f50:	080194a4 	.word	0x080194a4
 8011f54:	08019690 	.word	0x08019690
 8011f58:	080194f8 	.word	0x080194f8
 8011f5c:	080196b0 	.word	0x080196b0
 8011f60:	080196d0 	.word	0x080196d0
 8011f64:	080196f4 	.word	0x080196f4
 8011f68:	08019718 	.word	0x08019718
 8011f6c:	0801973c 	.word	0x0801973c

08011f70 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b086      	sub	sp, #24
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	60f8      	str	r0, [r7, #12]
 8011f78:	60b9      	str	r1, [r7, #8]
 8011f7a:	4613      	mov	r3, r2
 8011f7c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011f7e:	68bb      	ldr	r3, [r7, #8]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d101      	bne.n	8011f88 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011f84:	4b39      	ldr	r3, [pc, #228]	; (801206c <udp_bind+0xfc>)
 8011f86:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d109      	bne.n	8011fa2 <udp_bind+0x32>
 8011f8e:	4b38      	ldr	r3, [pc, #224]	; (8012070 <udp_bind+0x100>)
 8011f90:	f240 32b7 	movw	r2, #951	; 0x3b7
 8011f94:	4937      	ldr	r1, [pc, #220]	; (8012074 <udp_bind+0x104>)
 8011f96:	4838      	ldr	r0, [pc, #224]	; (8012078 <udp_bind+0x108>)
 8011f98:	f004 fbb8 	bl	801670c <iprintf>
 8011f9c:	f06f 030f 	mvn.w	r3, #15
 8011fa0:	e060      	b.n	8012064 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011fa6:	4b35      	ldr	r3, [pc, #212]	; (801207c <udp_bind+0x10c>)
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	617b      	str	r3, [r7, #20]
 8011fac:	e009      	b.n	8011fc2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011fae:	68fa      	ldr	r2, [r7, #12]
 8011fb0:	697b      	ldr	r3, [r7, #20]
 8011fb2:	429a      	cmp	r2, r3
 8011fb4:	d102      	bne.n	8011fbc <udp_bind+0x4c>
      rebind = 1;
 8011fb6:	2301      	movs	r3, #1
 8011fb8:	74fb      	strb	r3, [r7, #19]
      break;
 8011fba:	e005      	b.n	8011fc8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011fbc:	697b      	ldr	r3, [r7, #20]
 8011fbe:	68db      	ldr	r3, [r3, #12]
 8011fc0:	617b      	str	r3, [r7, #20]
 8011fc2:	697b      	ldr	r3, [r7, #20]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d1f2      	bne.n	8011fae <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8011fc8:	88fb      	ldrh	r3, [r7, #6]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d109      	bne.n	8011fe2 <udp_bind+0x72>
    port = udp_new_port();
 8011fce:	f7ff fc69 	bl	80118a4 <udp_new_port>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011fd6:	88fb      	ldrh	r3, [r7, #6]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d12c      	bne.n	8012036 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011fdc:	f06f 0307 	mvn.w	r3, #7
 8011fe0:	e040      	b.n	8012064 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011fe2:	4b26      	ldr	r3, [pc, #152]	; (801207c <udp_bind+0x10c>)
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	617b      	str	r3, [r7, #20]
 8011fe8:	e022      	b.n	8012030 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8011fea:	68fa      	ldr	r2, [r7, #12]
 8011fec:	697b      	ldr	r3, [r7, #20]
 8011fee:	429a      	cmp	r2, r3
 8011ff0:	d01b      	beq.n	801202a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8011ff2:	697b      	ldr	r3, [r7, #20]
 8011ff4:	8a5b      	ldrh	r3, [r3, #18]
 8011ff6:	88fa      	ldrh	r2, [r7, #6]
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	d116      	bne.n	801202a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011ffc:	697b      	ldr	r3, [r7, #20]
 8011ffe:	681a      	ldr	r2, [r3, #0]
 8012000:	68bb      	ldr	r3, [r7, #8]
 8012002:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012004:	429a      	cmp	r2, r3
 8012006:	d00d      	beq.n	8012024 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012008:	68bb      	ldr	r3, [r7, #8]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d00a      	beq.n	8012024 <udp_bind+0xb4>
 801200e:	68bb      	ldr	r3, [r7, #8]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d006      	beq.n	8012024 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012016:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012018:	2b00      	cmp	r3, #0
 801201a:	d003      	beq.n	8012024 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801201c:	697b      	ldr	r3, [r7, #20]
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d102      	bne.n	801202a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012024:	f06f 0307 	mvn.w	r3, #7
 8012028:	e01c      	b.n	8012064 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801202a:	697b      	ldr	r3, [r7, #20]
 801202c:	68db      	ldr	r3, [r3, #12]
 801202e:	617b      	str	r3, [r7, #20]
 8012030:	697b      	ldr	r3, [r7, #20]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d1d9      	bne.n	8011fea <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012036:	68bb      	ldr	r3, [r7, #8]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d002      	beq.n	8012042 <udp_bind+0xd2>
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	e000      	b.n	8012044 <udp_bind+0xd4>
 8012042:	2300      	movs	r3, #0
 8012044:	68fa      	ldr	r2, [r7, #12]
 8012046:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	88fa      	ldrh	r2, [r7, #6]
 801204c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801204e:	7cfb      	ldrb	r3, [r7, #19]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d106      	bne.n	8012062 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012054:	4b09      	ldr	r3, [pc, #36]	; (801207c <udp_bind+0x10c>)
 8012056:	681a      	ldr	r2, [r3, #0]
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801205c:	4a07      	ldr	r2, [pc, #28]	; (801207c <udp_bind+0x10c>)
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8012062:	2300      	movs	r3, #0
}
 8012064:	4618      	mov	r0, r3
 8012066:	3718      	adds	r7, #24
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}
 801206c:	08028d0c 	.word	0x08028d0c
 8012070:	080194a4 	.word	0x080194a4
 8012074:	0801976c 	.word	0x0801976c
 8012078:	080194f8 	.word	0x080194f8
 801207c:	20007b14 	.word	0x20007b14

08012080 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b086      	sub	sp, #24
 8012084:	af00      	add	r7, sp, #0
 8012086:	60f8      	str	r0, [r7, #12]
 8012088:	60b9      	str	r1, [r7, #8]
 801208a:	4613      	mov	r3, r2
 801208c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d109      	bne.n	80120a8 <udp_connect+0x28>
 8012094:	4b2c      	ldr	r3, [pc, #176]	; (8012148 <udp_connect+0xc8>)
 8012096:	f240 4235 	movw	r2, #1077	; 0x435
 801209a:	492c      	ldr	r1, [pc, #176]	; (801214c <udp_connect+0xcc>)
 801209c:	482c      	ldr	r0, [pc, #176]	; (8012150 <udp_connect+0xd0>)
 801209e:	f004 fb35 	bl	801670c <iprintf>
 80120a2:	f06f 030f 	mvn.w	r3, #15
 80120a6:	e04b      	b.n	8012140 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80120a8:	68bb      	ldr	r3, [r7, #8]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d109      	bne.n	80120c2 <udp_connect+0x42>
 80120ae:	4b26      	ldr	r3, [pc, #152]	; (8012148 <udp_connect+0xc8>)
 80120b0:	f240 4236 	movw	r2, #1078	; 0x436
 80120b4:	4927      	ldr	r1, [pc, #156]	; (8012154 <udp_connect+0xd4>)
 80120b6:	4826      	ldr	r0, [pc, #152]	; (8012150 <udp_connect+0xd0>)
 80120b8:	f004 fb28 	bl	801670c <iprintf>
 80120bc:	f06f 030f 	mvn.w	r3, #15
 80120c0:	e03e      	b.n	8012140 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	8a5b      	ldrh	r3, [r3, #18]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d10f      	bne.n	80120ea <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80120ca:	68f9      	ldr	r1, [r7, #12]
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	8a5b      	ldrh	r3, [r3, #18]
 80120d0:	461a      	mov	r2, r3
 80120d2:	68f8      	ldr	r0, [r7, #12]
 80120d4:	f7ff ff4c 	bl	8011f70 <udp_bind>
 80120d8:	4603      	mov	r3, r0
 80120da:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80120dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d002      	beq.n	80120ea <udp_connect+0x6a>
      return err;
 80120e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80120e8:	e02a      	b.n	8012140 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80120ea:	68bb      	ldr	r3, [r7, #8]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d002      	beq.n	80120f6 <udp_connect+0x76>
 80120f0:	68bb      	ldr	r3, [r7, #8]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	e000      	b.n	80120f8 <udp_connect+0x78>
 80120f6:	2300      	movs	r3, #0
 80120f8:	68fa      	ldr	r2, [r7, #12]
 80120fa:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	88fa      	ldrh	r2, [r7, #6]
 8012100:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	7c1b      	ldrb	r3, [r3, #16]
 8012106:	f043 0304 	orr.w	r3, r3, #4
 801210a:	b2da      	uxtb	r2, r3
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012110:	4b11      	ldr	r3, [pc, #68]	; (8012158 <udp_connect+0xd8>)
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	617b      	str	r3, [r7, #20]
 8012116:	e008      	b.n	801212a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8012118:	68fa      	ldr	r2, [r7, #12]
 801211a:	697b      	ldr	r3, [r7, #20]
 801211c:	429a      	cmp	r2, r3
 801211e:	d101      	bne.n	8012124 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8012120:	2300      	movs	r3, #0
 8012122:	e00d      	b.n	8012140 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012124:	697b      	ldr	r3, [r7, #20]
 8012126:	68db      	ldr	r3, [r3, #12]
 8012128:	617b      	str	r3, [r7, #20]
 801212a:	697b      	ldr	r3, [r7, #20]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d1f3      	bne.n	8012118 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8012130:	4b09      	ldr	r3, [pc, #36]	; (8012158 <udp_connect+0xd8>)
 8012132:	681a      	ldr	r2, [r3, #0]
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8012138:	4a07      	ldr	r2, [pc, #28]	; (8012158 <udp_connect+0xd8>)
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801213e:	2300      	movs	r3, #0
}
 8012140:	4618      	mov	r0, r3
 8012142:	3718      	adds	r7, #24
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}
 8012148:	080194a4 	.word	0x080194a4
 801214c:	08019784 	.word	0x08019784
 8012150:	080194f8 	.word	0x080194f8
 8012154:	080197a0 	.word	0x080197a0
 8012158:	20007b14 	.word	0x20007b14

0801215c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801215c:	b580      	push	{r7, lr}
 801215e:	b084      	sub	sp, #16
 8012160:	af00      	add	r7, sp, #0
 8012162:	60f8      	str	r0, [r7, #12]
 8012164:	60b9      	str	r1, [r7, #8]
 8012166:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d107      	bne.n	801217e <udp_recv+0x22>
 801216e:	4b08      	ldr	r3, [pc, #32]	; (8012190 <udp_recv+0x34>)
 8012170:	f240 428a 	movw	r2, #1162	; 0x48a
 8012174:	4907      	ldr	r1, [pc, #28]	; (8012194 <udp_recv+0x38>)
 8012176:	4808      	ldr	r0, [pc, #32]	; (8012198 <udp_recv+0x3c>)
 8012178:	f004 fac8 	bl	801670c <iprintf>
 801217c:	e005      	b.n	801218a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	68ba      	ldr	r2, [r7, #8]
 8012182:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	687a      	ldr	r2, [r7, #4]
 8012188:	61da      	str	r2, [r3, #28]
}
 801218a:	3710      	adds	r7, #16
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}
 8012190:	080194a4 	.word	0x080194a4
 8012194:	080197d8 	.word	0x080197d8
 8012198:	080194f8 	.word	0x080194f8

0801219c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b084      	sub	sp, #16
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d107      	bne.n	80121ba <udp_remove+0x1e>
 80121aa:	4b19      	ldr	r3, [pc, #100]	; (8012210 <udp_remove+0x74>)
 80121ac:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80121b0:	4918      	ldr	r1, [pc, #96]	; (8012214 <udp_remove+0x78>)
 80121b2:	4819      	ldr	r0, [pc, #100]	; (8012218 <udp_remove+0x7c>)
 80121b4:	f004 faaa 	bl	801670c <iprintf>
 80121b8:	e026      	b.n	8012208 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80121ba:	4b18      	ldr	r3, [pc, #96]	; (801221c <udp_remove+0x80>)
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	687a      	ldr	r2, [r7, #4]
 80121c0:	429a      	cmp	r2, r3
 80121c2:	d105      	bne.n	80121d0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80121c4:	4b15      	ldr	r3, [pc, #84]	; (801221c <udp_remove+0x80>)
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	68db      	ldr	r3, [r3, #12]
 80121ca:	4a14      	ldr	r2, [pc, #80]	; (801221c <udp_remove+0x80>)
 80121cc:	6013      	str	r3, [r2, #0]
 80121ce:	e017      	b.n	8012200 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80121d0:	4b12      	ldr	r3, [pc, #72]	; (801221c <udp_remove+0x80>)
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	60fb      	str	r3, [r7, #12]
 80121d6:	e010      	b.n	80121fa <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	68db      	ldr	r3, [r3, #12]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d009      	beq.n	80121f4 <udp_remove+0x58>
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	68db      	ldr	r3, [r3, #12]
 80121e4:	687a      	ldr	r2, [r7, #4]
 80121e6:	429a      	cmp	r2, r3
 80121e8:	d104      	bne.n	80121f4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	68da      	ldr	r2, [r3, #12]
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	60da      	str	r2, [r3, #12]
        break;
 80121f2:	e005      	b.n	8012200 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	68db      	ldr	r3, [r3, #12]
 80121f8:	60fb      	str	r3, [r7, #12]
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d1eb      	bne.n	80121d8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012200:	6879      	ldr	r1, [r7, #4]
 8012202:	2000      	movs	r0, #0
 8012204:	f7f8 fffc 	bl	800b200 <memp_free>
}
 8012208:	3710      	adds	r7, #16
 801220a:	46bd      	mov	sp, r7
 801220c:	bd80      	pop	{r7, pc}
 801220e:	bf00      	nop
 8012210:	080194a4 	.word	0x080194a4
 8012214:	080197f0 	.word	0x080197f0
 8012218:	080194f8 	.word	0x080194f8
 801221c:	20007b14 	.word	0x20007b14

08012220 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b082      	sub	sp, #8
 8012224:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8012226:	2000      	movs	r0, #0
 8012228:	f7f8 ff9e 	bl	800b168 <memp_malloc>
 801222c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d007      	beq.n	8012244 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012234:	2220      	movs	r2, #32
 8012236:	2100      	movs	r1, #0
 8012238:	6878      	ldr	r0, [r7, #4]
 801223a:	f004 f9b7 	bl	80165ac <memset>
    pcb->ttl = UDP_TTL;
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	22ff      	movs	r2, #255	; 0xff
 8012242:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012244:	687b      	ldr	r3, [r7, #4]
}
 8012246:	4618      	mov	r0, r3
 8012248:	3708      	adds	r7, #8
 801224a:	46bd      	mov	sp, r7
 801224c:	bd80      	pop	{r7, pc}
	...

08012250 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012250:	b480      	push	{r7}
 8012252:	b085      	sub	sp, #20
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
 8012258:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d01e      	beq.n	801229e <udp_netif_ip_addr_changed+0x4e>
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	2b00      	cmp	r3, #0
 8012266:	d01a      	beq.n	801229e <udp_netif_ip_addr_changed+0x4e>
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d017      	beq.n	801229e <udp_netif_ip_addr_changed+0x4e>
 801226e:	683b      	ldr	r3, [r7, #0]
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d013      	beq.n	801229e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012276:	4b0d      	ldr	r3, [pc, #52]	; (80122ac <udp_netif_ip_addr_changed+0x5c>)
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	60fb      	str	r3, [r7, #12]
 801227c:	e00c      	b.n	8012298 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	681a      	ldr	r2, [r3, #0]
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	429a      	cmp	r2, r3
 8012288:	d103      	bne.n	8012292 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801228a:	683b      	ldr	r3, [r7, #0]
 801228c:	681a      	ldr	r2, [r3, #0]
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	68db      	ldr	r3, [r3, #12]
 8012296:	60fb      	str	r3, [r7, #12]
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d1ef      	bne.n	801227e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801229e:	bf00      	nop
 80122a0:	3714      	adds	r7, #20
 80122a2:	46bd      	mov	sp, r7
 80122a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a8:	4770      	bx	lr
 80122aa:	bf00      	nop
 80122ac:	20007b14 	.word	0x20007b14

080122b0 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80122b4:	4b20      	ldr	r3, [pc, #128]	; (8012338 <dhcp_inc_pcb_refcount+0x88>)
 80122b6:	781b      	ldrb	r3, [r3, #0]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d133      	bne.n	8012324 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80122bc:	4b1f      	ldr	r3, [pc, #124]	; (801233c <dhcp_inc_pcb_refcount+0x8c>)
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d005      	beq.n	80122d0 <dhcp_inc_pcb_refcount+0x20>
 80122c4:	4b1e      	ldr	r3, [pc, #120]	; (8012340 <dhcp_inc_pcb_refcount+0x90>)
 80122c6:	22e5      	movs	r2, #229	; 0xe5
 80122c8:	491e      	ldr	r1, [pc, #120]	; (8012344 <dhcp_inc_pcb_refcount+0x94>)
 80122ca:	481f      	ldr	r0, [pc, #124]	; (8012348 <dhcp_inc_pcb_refcount+0x98>)
 80122cc:	f004 fa1e 	bl	801670c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80122d0:	f7ff ffa6 	bl	8012220 <udp_new>
 80122d4:	4602      	mov	r2, r0
 80122d6:	4b19      	ldr	r3, [pc, #100]	; (801233c <dhcp_inc_pcb_refcount+0x8c>)
 80122d8:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 80122da:	4b18      	ldr	r3, [pc, #96]	; (801233c <dhcp_inc_pcb_refcount+0x8c>)
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d102      	bne.n	80122e8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80122e2:	f04f 33ff 	mov.w	r3, #4294967295
 80122e6:	e024      	b.n	8012332 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80122e8:	4b14      	ldr	r3, [pc, #80]	; (801233c <dhcp_inc_pcb_refcount+0x8c>)
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	7a5a      	ldrb	r2, [r3, #9]
 80122ee:	4b13      	ldr	r3, [pc, #76]	; (801233c <dhcp_inc_pcb_refcount+0x8c>)
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	f042 0220 	orr.w	r2, r2, #32
 80122f6:	b2d2      	uxtb	r2, r2
 80122f8:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80122fa:	4b10      	ldr	r3, [pc, #64]	; (801233c <dhcp_inc_pcb_refcount+0x8c>)
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	2244      	movs	r2, #68	; 0x44
 8012300:	4912      	ldr	r1, [pc, #72]	; (801234c <dhcp_inc_pcb_refcount+0x9c>)
 8012302:	4618      	mov	r0, r3
 8012304:	f7ff fe34 	bl	8011f70 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8012308:	4b0c      	ldr	r3, [pc, #48]	; (801233c <dhcp_inc_pcb_refcount+0x8c>)
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	2243      	movs	r2, #67	; 0x43
 801230e:	490f      	ldr	r1, [pc, #60]	; (801234c <dhcp_inc_pcb_refcount+0x9c>)
 8012310:	4618      	mov	r0, r3
 8012312:	f7ff feb5 	bl	8012080 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8012316:	4b09      	ldr	r3, [pc, #36]	; (801233c <dhcp_inc_pcb_refcount+0x8c>)
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	2200      	movs	r2, #0
 801231c:	490c      	ldr	r1, [pc, #48]	; (8012350 <dhcp_inc_pcb_refcount+0xa0>)
 801231e:	4618      	mov	r0, r3
 8012320:	f7ff ff1c 	bl	801215c <udp_recv>
  }

  dhcp_pcb_refcount++;
 8012324:	4b04      	ldr	r3, [pc, #16]	; (8012338 <dhcp_inc_pcb_refcount+0x88>)
 8012326:	781b      	ldrb	r3, [r3, #0]
 8012328:	3301      	adds	r3, #1
 801232a:	b2da      	uxtb	r2, r3
 801232c:	4b02      	ldr	r3, [pc, #8]	; (8012338 <dhcp_inc_pcb_refcount+0x88>)
 801232e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8012330:	2300      	movs	r3, #0
}
 8012332:	4618      	mov	r0, r3
 8012334:	bd80      	pop	{r7, pc}
 8012336:	bf00      	nop
 8012338:	200004a0 	.word	0x200004a0
 801233c:	2000049c 	.word	0x2000049c
 8012340:	08019808 	.word	0x08019808
 8012344:	08019840 	.word	0x08019840
 8012348:	08019868 	.word	0x08019868
 801234c:	08028d0c 	.word	0x08028d0c
 8012350:	08013b6d 	.word	0x08013b6d

08012354 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8012354:	b580      	push	{r7, lr}
 8012356:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8012358:	4b0e      	ldr	r3, [pc, #56]	; (8012394 <dhcp_dec_pcb_refcount+0x40>)
 801235a:	781b      	ldrb	r3, [r3, #0]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d105      	bne.n	801236c <dhcp_dec_pcb_refcount+0x18>
 8012360:	4b0d      	ldr	r3, [pc, #52]	; (8012398 <dhcp_dec_pcb_refcount+0x44>)
 8012362:	22ff      	movs	r2, #255	; 0xff
 8012364:	490d      	ldr	r1, [pc, #52]	; (801239c <dhcp_dec_pcb_refcount+0x48>)
 8012366:	480e      	ldr	r0, [pc, #56]	; (80123a0 <dhcp_dec_pcb_refcount+0x4c>)
 8012368:	f004 f9d0 	bl	801670c <iprintf>
  dhcp_pcb_refcount--;
 801236c:	4b09      	ldr	r3, [pc, #36]	; (8012394 <dhcp_dec_pcb_refcount+0x40>)
 801236e:	781b      	ldrb	r3, [r3, #0]
 8012370:	3b01      	subs	r3, #1
 8012372:	b2da      	uxtb	r2, r3
 8012374:	4b07      	ldr	r3, [pc, #28]	; (8012394 <dhcp_dec_pcb_refcount+0x40>)
 8012376:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8012378:	4b06      	ldr	r3, [pc, #24]	; (8012394 <dhcp_dec_pcb_refcount+0x40>)
 801237a:	781b      	ldrb	r3, [r3, #0]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d107      	bne.n	8012390 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8012380:	4b08      	ldr	r3, [pc, #32]	; (80123a4 <dhcp_dec_pcb_refcount+0x50>)
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	4618      	mov	r0, r3
 8012386:	f7ff ff09 	bl	801219c <udp_remove>
    dhcp_pcb = NULL;
 801238a:	4b06      	ldr	r3, [pc, #24]	; (80123a4 <dhcp_dec_pcb_refcount+0x50>)
 801238c:	2200      	movs	r2, #0
 801238e:	601a      	str	r2, [r3, #0]
  }
}
 8012390:	bf00      	nop
 8012392:	bd80      	pop	{r7, pc}
 8012394:	200004a0 	.word	0x200004a0
 8012398:	08019808 	.word	0x08019808
 801239c:	08019890 	.word	0x08019890
 80123a0:	08019868 	.word	0x08019868
 80123a4:	2000049c 	.word	0x2000049c

080123a8 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b084      	sub	sp, #16
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	6a1b      	ldr	r3, [r3, #32]
 80123b4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80123b6:	210c      	movs	r1, #12
 80123b8:	68f8      	ldr	r0, [r7, #12]
 80123ba:	f001 f819 	bl	80133f0 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80123be:	4b06      	ldr	r3, [pc, #24]	; (80123d8 <dhcp_handle_nak+0x30>)
 80123c0:	4a05      	ldr	r2, [pc, #20]	; (80123d8 <dhcp_handle_nak+0x30>)
 80123c2:	4905      	ldr	r1, [pc, #20]	; (80123d8 <dhcp_handle_nak+0x30>)
 80123c4:	6878      	ldr	r0, [r7, #4]
 80123c6:	f7f9 f8b9 	bl	800b53c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	f000 fc0c 	bl	8012be8 <dhcp_discover>
}
 80123d0:	bf00      	nop
 80123d2:	3710      	adds	r7, #16
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}
 80123d8:	08028d0c 	.word	0x08028d0c

080123dc <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b084      	sub	sp, #16
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	6a1b      	ldr	r3, [r3, #32]
 80123e8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80123ea:	2108      	movs	r1, #8
 80123ec:	68f8      	ldr	r0, [r7, #12]
 80123ee:	f000 ffff 	bl	80133f0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	331c      	adds	r3, #28
 80123f6:	2200      	movs	r2, #0
 80123f8:	4619      	mov	r1, r3
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f002 fafe 	bl	80149fc <etharp_query>
 8012400:	4603      	mov	r3, r0
 8012402:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	799b      	ldrb	r3, [r3, #6]
 8012408:	2bff      	cmp	r3, #255	; 0xff
 801240a:	d005      	beq.n	8012418 <dhcp_check+0x3c>
    dhcp->tries++;
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	799b      	ldrb	r3, [r3, #6]
 8012410:	3301      	adds	r3, #1
 8012412:	b2da      	uxtb	r2, r3
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8012418:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801241c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801241e:	893b      	ldrh	r3, [r7, #8]
 8012420:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012424:	4a06      	ldr	r2, [pc, #24]	; (8012440 <dhcp_check+0x64>)
 8012426:	fb82 1203 	smull	r1, r2, r2, r3
 801242a:	1152      	asrs	r2, r2, #5
 801242c:	17db      	asrs	r3, r3, #31
 801242e:	1ad3      	subs	r3, r2, r3
 8012430:	b29a      	uxth	r2, r3
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8012436:	bf00      	nop
 8012438:	3710      	adds	r7, #16
 801243a:	46bd      	mov	sp, r7
 801243c:	bd80      	pop	{r7, pc}
 801243e:	bf00      	nop
 8012440:	10624dd3 	.word	0x10624dd3

08012444 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012444:	b580      	push	{r7, lr}
 8012446:	b084      	sub	sp, #16
 8012448:	af00      	add	r7, sp, #0
 801244a:	6078      	str	r0, [r7, #4]
 801244c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	6a1b      	ldr	r3, [r3, #32]
 8012452:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8012454:	4b0c      	ldr	r3, [pc, #48]	; (8012488 <dhcp_handle_offer+0x44>)
 8012456:	789b      	ldrb	r3, [r3, #2]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d011      	beq.n	8012480 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	2200      	movs	r2, #0
 8012460:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8012462:	4b0a      	ldr	r3, [pc, #40]	; (801248c <dhcp_handle_offer+0x48>)
 8012464:	689b      	ldr	r3, [r3, #8]
 8012466:	4618      	mov	r0, r3
 8012468:	f7f8 fa3e 	bl	800a8e8 <lwip_htonl>
 801246c:	4602      	mov	r2, r0
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012472:	683b      	ldr	r3, [r7, #0]
 8012474:	691a      	ldr	r2, [r3, #16]
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801247a:	6878      	ldr	r0, [r7, #4]
 801247c:	f000 f808 	bl	8012490 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8012480:	bf00      	nop
 8012482:	3710      	adds	r7, #16
 8012484:	46bd      	mov	sp, r7
 8012486:	bd80      	pop	{r7, pc}
 8012488:	20007b18 	.word	0x20007b18
 801248c:	20007b20 	.word	0x20007b20

08012490 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8012490:	b5b0      	push	{r4, r5, r7, lr}
 8012492:	b08a      	sub	sp, #40	; 0x28
 8012494:	af02      	add	r7, sp, #8
 8012496:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d109      	bne.n	80124b2 <dhcp_select+0x22>
 801249e:	4b71      	ldr	r3, [pc, #452]	; (8012664 <dhcp_select+0x1d4>)
 80124a0:	f240 1277 	movw	r2, #375	; 0x177
 80124a4:	4970      	ldr	r1, [pc, #448]	; (8012668 <dhcp_select+0x1d8>)
 80124a6:	4871      	ldr	r0, [pc, #452]	; (801266c <dhcp_select+0x1dc>)
 80124a8:	f004 f930 	bl	801670c <iprintf>
 80124ac:	f06f 030f 	mvn.w	r3, #15
 80124b0:	e0d3      	b.n	801265a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	6a1b      	ldr	r3, [r3, #32]
 80124b6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80124b8:	69bb      	ldr	r3, [r7, #24]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d109      	bne.n	80124d2 <dhcp_select+0x42>
 80124be:	4b69      	ldr	r3, [pc, #420]	; (8012664 <dhcp_select+0x1d4>)
 80124c0:	f240 1279 	movw	r2, #377	; 0x179
 80124c4:	496a      	ldr	r1, [pc, #424]	; (8012670 <dhcp_select+0x1e0>)
 80124c6:	4869      	ldr	r0, [pc, #420]	; (801266c <dhcp_select+0x1dc>)
 80124c8:	f004 f920 	bl	801670c <iprintf>
 80124cc:	f06f 0305 	mvn.w	r3, #5
 80124d0:	e0c3      	b.n	801265a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80124d2:	2101      	movs	r1, #1
 80124d4:	69b8      	ldr	r0, [r7, #24]
 80124d6:	f000 ff8b 	bl	80133f0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80124da:	f107 030c 	add.w	r3, r7, #12
 80124de:	2203      	movs	r2, #3
 80124e0:	69b9      	ldr	r1, [r7, #24]
 80124e2:	6878      	ldr	r0, [r7, #4]
 80124e4:	f001 fc0e 	bl	8013d04 <dhcp_create_msg>
 80124e8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80124ea:	697b      	ldr	r3, [r7, #20]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	f000 8085 	beq.w	80125fc <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80124f2:	697b      	ldr	r3, [r7, #20]
 80124f4:	685b      	ldr	r3, [r3, #4]
 80124f6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80124f8:	89b8      	ldrh	r0, [r7, #12]
 80124fa:	693b      	ldr	r3, [r7, #16]
 80124fc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012500:	2302      	movs	r3, #2
 8012502:	2239      	movs	r2, #57	; 0x39
 8012504:	f000 ff8e 	bl	8013424 <dhcp_option>
 8012508:	4603      	mov	r3, r0
 801250a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801250c:	89b8      	ldrh	r0, [r7, #12]
 801250e:	693b      	ldr	r3, [r7, #16]
 8012510:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012518:	461a      	mov	r2, r3
 801251a:	f000 ffdd 	bl	80134d8 <dhcp_option_short>
 801251e:	4603      	mov	r3, r0
 8012520:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012522:	89b8      	ldrh	r0, [r7, #12]
 8012524:	693b      	ldr	r3, [r7, #16]
 8012526:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801252a:	2304      	movs	r3, #4
 801252c:	2232      	movs	r2, #50	; 0x32
 801252e:	f000 ff79 	bl	8013424 <dhcp_option>
 8012532:	4603      	mov	r3, r0
 8012534:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012536:	89bc      	ldrh	r4, [r7, #12]
 8012538:	693b      	ldr	r3, [r7, #16]
 801253a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801253e:	69bb      	ldr	r3, [r7, #24]
 8012540:	69db      	ldr	r3, [r3, #28]
 8012542:	4618      	mov	r0, r3
 8012544:	f7f8 f9d0 	bl	800a8e8 <lwip_htonl>
 8012548:	4603      	mov	r3, r0
 801254a:	461a      	mov	r2, r3
 801254c:	4629      	mov	r1, r5
 801254e:	4620      	mov	r0, r4
 8012550:	f000 fff4 	bl	801353c <dhcp_option_long>
 8012554:	4603      	mov	r3, r0
 8012556:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012558:	89b8      	ldrh	r0, [r7, #12]
 801255a:	693b      	ldr	r3, [r7, #16]
 801255c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012560:	2304      	movs	r3, #4
 8012562:	2236      	movs	r2, #54	; 0x36
 8012564:	f000 ff5e 	bl	8013424 <dhcp_option>
 8012568:	4603      	mov	r3, r0
 801256a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801256c:	89bc      	ldrh	r4, [r7, #12]
 801256e:	693b      	ldr	r3, [r7, #16]
 8012570:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012574:	69bb      	ldr	r3, [r7, #24]
 8012576:	699b      	ldr	r3, [r3, #24]
 8012578:	4618      	mov	r0, r3
 801257a:	f7f8 f9b5 	bl	800a8e8 <lwip_htonl>
 801257e:	4603      	mov	r3, r0
 8012580:	461a      	mov	r2, r3
 8012582:	4629      	mov	r1, r5
 8012584:	4620      	mov	r0, r4
 8012586:	f000 ffd9 	bl	801353c <dhcp_option_long>
 801258a:	4603      	mov	r3, r0
 801258c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801258e:	89b8      	ldrh	r0, [r7, #12]
 8012590:	693b      	ldr	r3, [r7, #16]
 8012592:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012596:	2303      	movs	r3, #3
 8012598:	2237      	movs	r2, #55	; 0x37
 801259a:	f000 ff43 	bl	8013424 <dhcp_option>
 801259e:	4603      	mov	r3, r0
 80125a0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80125a2:	2300      	movs	r3, #0
 80125a4:	77bb      	strb	r3, [r7, #30]
 80125a6:	e00e      	b.n	80125c6 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80125a8:	89b8      	ldrh	r0, [r7, #12]
 80125aa:	693b      	ldr	r3, [r7, #16]
 80125ac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80125b0:	7fbb      	ldrb	r3, [r7, #30]
 80125b2:	4a30      	ldr	r2, [pc, #192]	; (8012674 <dhcp_select+0x1e4>)
 80125b4:	5cd3      	ldrb	r3, [r2, r3]
 80125b6:	461a      	mov	r2, r3
 80125b8:	f000 ff68 	bl	801348c <dhcp_option_byte>
 80125bc:	4603      	mov	r3, r0
 80125be:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80125c0:	7fbb      	ldrb	r3, [r7, #30]
 80125c2:	3301      	adds	r3, #1
 80125c4:	77bb      	strb	r3, [r7, #30]
 80125c6:	7fbb      	ldrb	r3, [r7, #30]
 80125c8:	2b02      	cmp	r3, #2
 80125ca:	d9ed      	bls.n	80125a8 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80125cc:	89b8      	ldrh	r0, [r7, #12]
 80125ce:	693b      	ldr	r3, [r7, #16]
 80125d0:	33f0      	adds	r3, #240	; 0xf0
 80125d2:	697a      	ldr	r2, [r7, #20]
 80125d4:	4619      	mov	r1, r3
 80125d6:	f001 fc6b 	bl	8013eb0 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80125da:	4b27      	ldr	r3, [pc, #156]	; (8012678 <dhcp_select+0x1e8>)
 80125dc:	6818      	ldr	r0, [r3, #0]
 80125de:	4b27      	ldr	r3, [pc, #156]	; (801267c <dhcp_select+0x1ec>)
 80125e0:	9301      	str	r3, [sp, #4]
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	9300      	str	r3, [sp, #0]
 80125e6:	2343      	movs	r3, #67	; 0x43
 80125e8:	4a25      	ldr	r2, [pc, #148]	; (8012680 <dhcp_select+0x1f0>)
 80125ea:	6979      	ldr	r1, [r7, #20]
 80125ec:	f7ff fbda 	bl	8011da4 <udp_sendto_if_src>
 80125f0:	4603      	mov	r3, r0
 80125f2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80125f4:	6978      	ldr	r0, [r7, #20]
 80125f6:	f7f9 fc03 	bl	800be00 <pbuf_free>
 80125fa:	e001      	b.n	8012600 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80125fc:	23ff      	movs	r3, #255	; 0xff
 80125fe:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012600:	69bb      	ldr	r3, [r7, #24]
 8012602:	799b      	ldrb	r3, [r3, #6]
 8012604:	2bff      	cmp	r3, #255	; 0xff
 8012606:	d005      	beq.n	8012614 <dhcp_select+0x184>
    dhcp->tries++;
 8012608:	69bb      	ldr	r3, [r7, #24]
 801260a:	799b      	ldrb	r3, [r3, #6]
 801260c:	3301      	adds	r3, #1
 801260e:	b2da      	uxtb	r2, r3
 8012610:	69bb      	ldr	r3, [r7, #24]
 8012612:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012614:	69bb      	ldr	r3, [r7, #24]
 8012616:	799b      	ldrb	r3, [r3, #6]
 8012618:	2b05      	cmp	r3, #5
 801261a:	d80d      	bhi.n	8012638 <dhcp_select+0x1a8>
 801261c:	69bb      	ldr	r3, [r7, #24]
 801261e:	799b      	ldrb	r3, [r3, #6]
 8012620:	461a      	mov	r2, r3
 8012622:	2301      	movs	r3, #1
 8012624:	4093      	lsls	r3, r2
 8012626:	b29b      	uxth	r3, r3
 8012628:	461a      	mov	r2, r3
 801262a:	0152      	lsls	r2, r2, #5
 801262c:	1ad2      	subs	r2, r2, r3
 801262e:	0092      	lsls	r2, r2, #2
 8012630:	4413      	add	r3, r2
 8012632:	00db      	lsls	r3, r3, #3
 8012634:	b29b      	uxth	r3, r3
 8012636:	e001      	b.n	801263c <dhcp_select+0x1ac>
 8012638:	f64e 2360 	movw	r3, #60000	; 0xea60
 801263c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801263e:	89fb      	ldrh	r3, [r7, #14]
 8012640:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012644:	4a0f      	ldr	r2, [pc, #60]	; (8012684 <dhcp_select+0x1f4>)
 8012646:	fb82 1203 	smull	r1, r2, r2, r3
 801264a:	1152      	asrs	r2, r2, #5
 801264c:	17db      	asrs	r3, r3, #31
 801264e:	1ad3      	subs	r3, r2, r3
 8012650:	b29a      	uxth	r2, r3
 8012652:	69bb      	ldr	r3, [r7, #24]
 8012654:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012656:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801265a:	4618      	mov	r0, r3
 801265c:	3720      	adds	r7, #32
 801265e:	46bd      	mov	sp, r7
 8012660:	bdb0      	pop	{r4, r5, r7, pc}
 8012662:	bf00      	nop
 8012664:	08019808 	.word	0x08019808
 8012668:	080198b4 	.word	0x080198b4
 801266c:	08019868 	.word	0x08019868
 8012670:	080198d0 	.word	0x080198d0
 8012674:	20000020 	.word	0x20000020
 8012678:	2000049c 	.word	0x2000049c
 801267c:	08028d0c 	.word	0x08028d0c
 8012680:	08028d10 	.word	0x08028d10
 8012684:	10624dd3 	.word	0x10624dd3

08012688 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b082      	sub	sp, #8
 801268c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801268e:	4b27      	ldr	r3, [pc, #156]	; (801272c <dhcp_coarse_tmr+0xa4>)
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	607b      	str	r3, [r7, #4]
 8012694:	e042      	b.n	801271c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	6a1b      	ldr	r3, [r3, #32]
 801269a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d039      	beq.n	8012716 <dhcp_coarse_tmr+0x8e>
 80126a2:	683b      	ldr	r3, [r7, #0]
 80126a4:	795b      	ldrb	r3, [r3, #5]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d035      	beq.n	8012716 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	8a9b      	ldrh	r3, [r3, #20]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d012      	beq.n	80126d8 <dhcp_coarse_tmr+0x50>
 80126b2:	683b      	ldr	r3, [r7, #0]
 80126b4:	8a5b      	ldrh	r3, [r3, #18]
 80126b6:	3301      	adds	r3, #1
 80126b8:	b29a      	uxth	r2, r3
 80126ba:	683b      	ldr	r3, [r7, #0]
 80126bc:	825a      	strh	r2, [r3, #18]
 80126be:	683b      	ldr	r3, [r7, #0]
 80126c0:	8a5a      	ldrh	r2, [r3, #18]
 80126c2:	683b      	ldr	r3, [r7, #0]
 80126c4:	8a9b      	ldrh	r3, [r3, #20]
 80126c6:	429a      	cmp	r2, r3
 80126c8:	d106      	bne.n	80126d8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80126ca:	6878      	ldr	r0, [r7, #4]
 80126cc:	f000 fdf6 	bl	80132bc <dhcp_release_and_stop>
        dhcp_start(netif);
 80126d0:	6878      	ldr	r0, [r7, #4]
 80126d2:	f000 f969 	bl	80129a8 <dhcp_start>
 80126d6:	e01e      	b.n	8012716 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80126d8:	683b      	ldr	r3, [r7, #0]
 80126da:	8a1b      	ldrh	r3, [r3, #16]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d00b      	beq.n	80126f8 <dhcp_coarse_tmr+0x70>
 80126e0:	683b      	ldr	r3, [r7, #0]
 80126e2:	8a1b      	ldrh	r3, [r3, #16]
 80126e4:	1e5a      	subs	r2, r3, #1
 80126e6:	b291      	uxth	r1, r2
 80126e8:	683a      	ldr	r2, [r7, #0]
 80126ea:	8211      	strh	r1, [r2, #16]
 80126ec:	2b01      	cmp	r3, #1
 80126ee:	d103      	bne.n	80126f8 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	f000 f8c6 	bl	8012882 <dhcp_t2_timeout>
 80126f6:	e00e      	b.n	8012716 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80126f8:	683b      	ldr	r3, [r7, #0]
 80126fa:	89db      	ldrh	r3, [r3, #14]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d00a      	beq.n	8012716 <dhcp_coarse_tmr+0x8e>
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	89db      	ldrh	r3, [r3, #14]
 8012704:	1e5a      	subs	r2, r3, #1
 8012706:	b291      	uxth	r1, r2
 8012708:	683a      	ldr	r2, [r7, #0]
 801270a:	81d1      	strh	r1, [r2, #14]
 801270c:	2b01      	cmp	r3, #1
 801270e:	d102      	bne.n	8012716 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8012710:	6878      	ldr	r0, [r7, #4]
 8012712:	f000 f888 	bl	8012826 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	607b      	str	r3, [r7, #4]
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d1b9      	bne.n	8012696 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8012722:	bf00      	nop
 8012724:	3708      	adds	r7, #8
 8012726:	46bd      	mov	sp, r7
 8012728:	bd80      	pop	{r7, pc}
 801272a:	bf00      	nop
 801272c:	20007aec 	.word	0x20007aec

08012730 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b082      	sub	sp, #8
 8012734:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8012736:	4b16      	ldr	r3, [pc, #88]	; (8012790 <dhcp_fine_tmr+0x60>)
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	607b      	str	r3, [r7, #4]
 801273c:	e020      	b.n	8012780 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	6a1b      	ldr	r3, [r3, #32]
 8012742:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8012744:	683b      	ldr	r3, [r7, #0]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d017      	beq.n	801277a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	891b      	ldrh	r3, [r3, #8]
 801274e:	2b01      	cmp	r3, #1
 8012750:	d906      	bls.n	8012760 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	891b      	ldrh	r3, [r3, #8]
 8012756:	3b01      	subs	r3, #1
 8012758:	b29a      	uxth	r2, r3
 801275a:	683b      	ldr	r3, [r7, #0]
 801275c:	811a      	strh	r2, [r3, #8]
 801275e:	e00c      	b.n	801277a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	891b      	ldrh	r3, [r3, #8]
 8012764:	2b01      	cmp	r3, #1
 8012766:	d108      	bne.n	801277a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	891b      	ldrh	r3, [r3, #8]
 801276c:	3b01      	subs	r3, #1
 801276e:	b29a      	uxth	r2, r3
 8012770:	683b      	ldr	r3, [r7, #0]
 8012772:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8012774:	6878      	ldr	r0, [r7, #4]
 8012776:	f000 f80d 	bl	8012794 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	607b      	str	r3, [r7, #4]
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d1db      	bne.n	801273e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8012786:	bf00      	nop
 8012788:	3708      	adds	r7, #8
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}
 801278e:	bf00      	nop
 8012790:	20007aec 	.word	0x20007aec

08012794 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b084      	sub	sp, #16
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	6a1b      	ldr	r3, [r3, #32]
 80127a0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	795b      	ldrb	r3, [r3, #5]
 80127a6:	2b0c      	cmp	r3, #12
 80127a8:	d003      	beq.n	80127b2 <dhcp_timeout+0x1e>
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	795b      	ldrb	r3, [r3, #5]
 80127ae:	2b06      	cmp	r3, #6
 80127b0:	d103      	bne.n	80127ba <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80127b2:	6878      	ldr	r0, [r7, #4]
 80127b4:	f000 fa18 	bl	8012be8 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80127b8:	e031      	b.n	801281e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	795b      	ldrb	r3, [r3, #5]
 80127be:	2b01      	cmp	r3, #1
 80127c0:	d10e      	bne.n	80127e0 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	799b      	ldrb	r3, [r3, #6]
 80127c6:	2b05      	cmp	r3, #5
 80127c8:	d803      	bhi.n	80127d2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80127ca:	6878      	ldr	r0, [r7, #4]
 80127cc:	f7ff fe60 	bl	8012490 <dhcp_select>
}
 80127d0:	e025      	b.n	801281e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80127d2:	6878      	ldr	r0, [r7, #4]
 80127d4:	f000 fd72 	bl	80132bc <dhcp_release_and_stop>
      dhcp_start(netif);
 80127d8:	6878      	ldr	r0, [r7, #4]
 80127da:	f000 f8e5 	bl	80129a8 <dhcp_start>
}
 80127de:	e01e      	b.n	801281e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	795b      	ldrb	r3, [r3, #5]
 80127e4:	2b08      	cmp	r3, #8
 80127e6:	d10b      	bne.n	8012800 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	799b      	ldrb	r3, [r3, #6]
 80127ec:	2b01      	cmp	r3, #1
 80127ee:	d803      	bhi.n	80127f8 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80127f0:	6878      	ldr	r0, [r7, #4]
 80127f2:	f7ff fdf3 	bl	80123dc <dhcp_check>
}
 80127f6:	e012      	b.n	801281e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80127f8:	6878      	ldr	r0, [r7, #4]
 80127fa:	f000 fa97 	bl	8012d2c <dhcp_bind>
}
 80127fe:	e00e      	b.n	801281e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	795b      	ldrb	r3, [r3, #5]
 8012804:	2b03      	cmp	r3, #3
 8012806:	d10a      	bne.n	801281e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	799b      	ldrb	r3, [r3, #6]
 801280c:	2b01      	cmp	r3, #1
 801280e:	d803      	bhi.n	8012818 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8012810:	6878      	ldr	r0, [r7, #4]
 8012812:	f000 fc9d 	bl	8013150 <dhcp_reboot>
}
 8012816:	e002      	b.n	801281e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	f000 f9e5 	bl	8012be8 <dhcp_discover>
}
 801281e:	bf00      	nop
 8012820:	3710      	adds	r7, #16
 8012822:	46bd      	mov	sp, r7
 8012824:	bd80      	pop	{r7, pc}

08012826 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8012826:	b580      	push	{r7, lr}
 8012828:	b084      	sub	sp, #16
 801282a:	af00      	add	r7, sp, #0
 801282c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	6a1b      	ldr	r3, [r3, #32]
 8012832:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	795b      	ldrb	r3, [r3, #5]
 8012838:	2b01      	cmp	r3, #1
 801283a:	d007      	beq.n	801284c <dhcp_t1_timeout+0x26>
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	795b      	ldrb	r3, [r3, #5]
 8012840:	2b0a      	cmp	r3, #10
 8012842:	d003      	beq.n	801284c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012848:	2b05      	cmp	r3, #5
 801284a:	d116      	bne.n	801287a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801284c:	6878      	ldr	r0, [r7, #4]
 801284e:	f000 fb47 	bl	8012ee0 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	899b      	ldrh	r3, [r3, #12]
 8012856:	461a      	mov	r2, r3
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	8a5b      	ldrh	r3, [r3, #18]
 801285c:	1ad3      	subs	r3, r2, r3
 801285e:	2b01      	cmp	r3, #1
 8012860:	dd0b      	ble.n	801287a <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	899b      	ldrh	r3, [r3, #12]
 8012866:	461a      	mov	r2, r3
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	8a5b      	ldrh	r3, [r3, #18]
 801286c:	1ad3      	subs	r3, r2, r3
 801286e:	0fda      	lsrs	r2, r3, #31
 8012870:	4413      	add	r3, r2
 8012872:	105b      	asrs	r3, r3, #1
 8012874:	b29a      	uxth	r2, r3
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801287a:	bf00      	nop
 801287c:	3710      	adds	r7, #16
 801287e:	46bd      	mov	sp, r7
 8012880:	bd80      	pop	{r7, pc}

08012882 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8012882:	b580      	push	{r7, lr}
 8012884:	b084      	sub	sp, #16
 8012886:	af00      	add	r7, sp, #0
 8012888:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	6a1b      	ldr	r3, [r3, #32]
 801288e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	795b      	ldrb	r3, [r3, #5]
 8012894:	2b01      	cmp	r3, #1
 8012896:	d00b      	beq.n	80128b0 <dhcp_t2_timeout+0x2e>
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	795b      	ldrb	r3, [r3, #5]
 801289c:	2b0a      	cmp	r3, #10
 801289e:	d007      	beq.n	80128b0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80128a4:	2b05      	cmp	r3, #5
 80128a6:	d003      	beq.n	80128b0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	795b      	ldrb	r3, [r3, #5]
 80128ac:	2b04      	cmp	r3, #4
 80128ae:	d116      	bne.n	80128de <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80128b0:	6878      	ldr	r0, [r7, #4]
 80128b2:	f000 fbb1 	bl	8013018 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	8a9b      	ldrh	r3, [r3, #20]
 80128ba:	461a      	mov	r2, r3
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	8a5b      	ldrh	r3, [r3, #18]
 80128c0:	1ad3      	subs	r3, r2, r3
 80128c2:	2b01      	cmp	r3, #1
 80128c4:	dd0b      	ble.n	80128de <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	8a9b      	ldrh	r3, [r3, #20]
 80128ca:	461a      	mov	r2, r3
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	8a5b      	ldrh	r3, [r3, #18]
 80128d0:	1ad3      	subs	r3, r2, r3
 80128d2:	0fda      	lsrs	r2, r3, #31
 80128d4:	4413      	add	r3, r2
 80128d6:	105b      	asrs	r3, r3, #1
 80128d8:	b29a      	uxth	r2, r3
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80128de:	bf00      	nop
 80128e0:	3710      	adds	r7, #16
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bd80      	pop	{r7, pc}
	...

080128e8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b084      	sub	sp, #16
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
 80128f0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	6a1b      	ldr	r3, [r3, #32]
 80128f6:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	2200      	movs	r2, #0
 80128fc:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	2200      	movs	r2, #0
 8012902:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8012904:	4b26      	ldr	r3, [pc, #152]	; (80129a0 <dhcp_handle_ack+0xb8>)
 8012906:	78db      	ldrb	r3, [r3, #3]
 8012908:	2b00      	cmp	r3, #0
 801290a:	d003      	beq.n	8012914 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801290c:	4b25      	ldr	r3, [pc, #148]	; (80129a4 <dhcp_handle_ack+0xbc>)
 801290e:	68da      	ldr	r2, [r3, #12]
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8012914:	4b22      	ldr	r3, [pc, #136]	; (80129a0 <dhcp_handle_ack+0xb8>)
 8012916:	791b      	ldrb	r3, [r3, #4]
 8012918:	2b00      	cmp	r3, #0
 801291a:	d004      	beq.n	8012926 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801291c:	4b21      	ldr	r3, [pc, #132]	; (80129a4 <dhcp_handle_ack+0xbc>)
 801291e:	691a      	ldr	r2, [r3, #16]
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	62da      	str	r2, [r3, #44]	; 0x2c
 8012924:	e004      	b.n	8012930 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801292a:	085a      	lsrs	r2, r3, #1
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8012930:	4b1b      	ldr	r3, [pc, #108]	; (80129a0 <dhcp_handle_ack+0xb8>)
 8012932:	795b      	ldrb	r3, [r3, #5]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d004      	beq.n	8012942 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8012938:	4b1a      	ldr	r3, [pc, #104]	; (80129a4 <dhcp_handle_ack+0xbc>)
 801293a:	695a      	ldr	r2, [r3, #20]
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	631a      	str	r2, [r3, #48]	; 0x30
 8012940:	e007      	b.n	8012952 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8012942:	68fb      	ldr	r3, [r7, #12]
 8012944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012946:	4613      	mov	r3, r2
 8012948:	00db      	lsls	r3, r3, #3
 801294a:	1a9b      	subs	r3, r3, r2
 801294c:	08da      	lsrs	r2, r3, #3
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012952:	683b      	ldr	r3, [r7, #0]
 8012954:	691a      	ldr	r2, [r3, #16]
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801295a:	4b11      	ldr	r3, [pc, #68]	; (80129a0 <dhcp_handle_ack+0xb8>)
 801295c:	799b      	ldrb	r3, [r3, #6]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d00b      	beq.n	801297a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8012962:	4b10      	ldr	r3, [pc, #64]	; (80129a4 <dhcp_handle_ack+0xbc>)
 8012964:	699b      	ldr	r3, [r3, #24]
 8012966:	4618      	mov	r0, r3
 8012968:	f7f7 ffbe 	bl	800a8e8 <lwip_htonl>
 801296c:	4602      	mov	r2, r0
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	2201      	movs	r2, #1
 8012976:	71da      	strb	r2, [r3, #7]
 8012978:	e002      	b.n	8012980 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	2200      	movs	r2, #0
 801297e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8012980:	4b07      	ldr	r3, [pc, #28]	; (80129a0 <dhcp_handle_ack+0xb8>)
 8012982:	79db      	ldrb	r3, [r3, #7]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d007      	beq.n	8012998 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8012988:	4b06      	ldr	r3, [pc, #24]	; (80129a4 <dhcp_handle_ack+0xbc>)
 801298a:	69db      	ldr	r3, [r3, #28]
 801298c:	4618      	mov	r0, r3
 801298e:	f7f7 ffab 	bl	800a8e8 <lwip_htonl>
 8012992:	4602      	mov	r2, r0
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8012998:	bf00      	nop
 801299a:	3710      	adds	r7, #16
 801299c:	46bd      	mov	sp, r7
 801299e:	bd80      	pop	{r7, pc}
 80129a0:	20007b18 	.word	0x20007b18
 80129a4:	20007b20 	.word	0x20007b20

080129a8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b084      	sub	sp, #16
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d109      	bne.n	80129ca <dhcp_start+0x22>
 80129b6:	4b37      	ldr	r3, [pc, #220]	; (8012a94 <dhcp_start+0xec>)
 80129b8:	f240 22e7 	movw	r2, #743	; 0x2e7
 80129bc:	4936      	ldr	r1, [pc, #216]	; (8012a98 <dhcp_start+0xf0>)
 80129be:	4837      	ldr	r0, [pc, #220]	; (8012a9c <dhcp_start+0xf4>)
 80129c0:	f003 fea4 	bl	801670c <iprintf>
 80129c4:	f06f 030f 	mvn.w	r3, #15
 80129c8:	e060      	b.n	8012a8c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80129d0:	f003 0301 	and.w	r3, r3, #1
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d109      	bne.n	80129ec <dhcp_start+0x44>
 80129d8:	4b2e      	ldr	r3, [pc, #184]	; (8012a94 <dhcp_start+0xec>)
 80129da:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80129de:	4930      	ldr	r1, [pc, #192]	; (8012aa0 <dhcp_start+0xf8>)
 80129e0:	482e      	ldr	r0, [pc, #184]	; (8012a9c <dhcp_start+0xf4>)
 80129e2:	f003 fe93 	bl	801670c <iprintf>
 80129e6:	f06f 030f 	mvn.w	r3, #15
 80129ea:	e04f      	b.n	8012a8c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	6a1b      	ldr	r3, [r3, #32]
 80129f0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80129f6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80129fa:	d202      	bcs.n	8012a02 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80129fc:	f04f 33ff 	mov.w	r3, #4294967295
 8012a00:	e044      	b.n	8012a8c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d10d      	bne.n	8012a24 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8012a08:	2034      	movs	r0, #52	; 0x34
 8012a0a:	f7f8 fa3f 	bl	800ae8c <mem_malloc>
 8012a0e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8012a10:	68fb      	ldr	r3, [r7, #12]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d102      	bne.n	8012a1c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8012a16:	f04f 33ff 	mov.w	r3, #4294967295
 8012a1a:	e037      	b.n	8012a8c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	68fa      	ldr	r2, [r7, #12]
 8012a20:	621a      	str	r2, [r3, #32]
 8012a22:	e005      	b.n	8012a30 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	791b      	ldrb	r3, [r3, #4]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d001      	beq.n	8012a30 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8012a2c:	f7ff fc92 	bl	8012354 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8012a30:	2234      	movs	r2, #52	; 0x34
 8012a32:	2100      	movs	r1, #0
 8012a34:	68f8      	ldr	r0, [r7, #12]
 8012a36:	f003 fdb9 	bl	80165ac <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8012a3a:	f7ff fc39 	bl	80122b0 <dhcp_inc_pcb_refcount>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d002      	beq.n	8012a4a <dhcp_start+0xa2>
    return ERR_MEM;
 8012a44:	f04f 33ff 	mov.w	r3, #4294967295
 8012a48:	e020      	b.n	8012a8c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	2201      	movs	r2, #1
 8012a4e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012a56:	f003 0304 	and.w	r3, r3, #4
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d105      	bne.n	8012a6a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8012a5e:	2102      	movs	r1, #2
 8012a60:	68f8      	ldr	r0, [r7, #12]
 8012a62:	f000 fcc5 	bl	80133f0 <dhcp_set_state>
    return ERR_OK;
 8012a66:	2300      	movs	r3, #0
 8012a68:	e010      	b.n	8012a8c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8012a6a:	6878      	ldr	r0, [r7, #4]
 8012a6c:	f000 f8bc 	bl	8012be8 <dhcp_discover>
 8012a70:	4603      	mov	r3, r0
 8012a72:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8012a74:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d005      	beq.n	8012a88 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8012a7c:	6878      	ldr	r0, [r7, #4]
 8012a7e:	f000 fc1d 	bl	80132bc <dhcp_release_and_stop>
    return ERR_MEM;
 8012a82:	f04f 33ff 	mov.w	r3, #4294967295
 8012a86:	e001      	b.n	8012a8c <dhcp_start+0xe4>
  }
  return result;
 8012a88:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	3710      	adds	r7, #16
 8012a90:	46bd      	mov	sp, r7
 8012a92:	bd80      	pop	{r7, pc}
 8012a94:	08019808 	.word	0x08019808
 8012a98:	080198ec 	.word	0x080198ec
 8012a9c:	08019868 	.word	0x08019868
 8012aa0:	08019930 	.word	0x08019930

08012aa4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b084      	sub	sp, #16
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
 8012aac:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d107      	bne.n	8012ac4 <dhcp_arp_reply+0x20>
 8012ab4:	4b0e      	ldr	r3, [pc, #56]	; (8012af0 <dhcp_arp_reply+0x4c>)
 8012ab6:	f240 328b 	movw	r2, #907	; 0x38b
 8012aba:	490e      	ldr	r1, [pc, #56]	; (8012af4 <dhcp_arp_reply+0x50>)
 8012abc:	480e      	ldr	r0, [pc, #56]	; (8012af8 <dhcp_arp_reply+0x54>)
 8012abe:	f003 fe25 	bl	801670c <iprintf>
 8012ac2:	e012      	b.n	8012aea <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	6a1b      	ldr	r3, [r3, #32]
 8012ac8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d00c      	beq.n	8012aea <dhcp_arp_reply+0x46>
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	795b      	ldrb	r3, [r3, #5]
 8012ad4:	2b08      	cmp	r3, #8
 8012ad6:	d108      	bne.n	8012aea <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8012ad8:	683b      	ldr	r3, [r7, #0]
 8012ada:	681a      	ldr	r2, [r3, #0]
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	69db      	ldr	r3, [r3, #28]
 8012ae0:	429a      	cmp	r2, r3
 8012ae2:	d102      	bne.n	8012aea <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8012ae4:	6878      	ldr	r0, [r7, #4]
 8012ae6:	f000 f809 	bl	8012afc <dhcp_decline>
    }
  }
}
 8012aea:	3710      	adds	r7, #16
 8012aec:	46bd      	mov	sp, r7
 8012aee:	bd80      	pop	{r7, pc}
 8012af0:	08019808 	.word	0x08019808
 8012af4:	080198ec 	.word	0x080198ec
 8012af8:	08019868 	.word	0x08019868

08012afc <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8012afc:	b5b0      	push	{r4, r5, r7, lr}
 8012afe:	b08a      	sub	sp, #40	; 0x28
 8012b00:	af02      	add	r7, sp, #8
 8012b02:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	6a1b      	ldr	r3, [r3, #32]
 8012b08:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012b0a:	210c      	movs	r1, #12
 8012b0c:	69b8      	ldr	r0, [r7, #24]
 8012b0e:	f000 fc6f 	bl	80133f0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8012b12:	f107 030c 	add.w	r3, r7, #12
 8012b16:	2204      	movs	r2, #4
 8012b18:	69b9      	ldr	r1, [r7, #24]
 8012b1a:	6878      	ldr	r0, [r7, #4]
 8012b1c:	f001 f8f2 	bl	8013d04 <dhcp_create_msg>
 8012b20:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012b22:	697b      	ldr	r3, [r7, #20]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d035      	beq.n	8012b94 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012b28:	697b      	ldr	r3, [r7, #20]
 8012b2a:	685b      	ldr	r3, [r3, #4]
 8012b2c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012b2e:	89b8      	ldrh	r0, [r7, #12]
 8012b30:	693b      	ldr	r3, [r7, #16]
 8012b32:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012b36:	2304      	movs	r3, #4
 8012b38:	2232      	movs	r2, #50	; 0x32
 8012b3a:	f000 fc73 	bl	8013424 <dhcp_option>
 8012b3e:	4603      	mov	r3, r0
 8012b40:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012b42:	89bc      	ldrh	r4, [r7, #12]
 8012b44:	693b      	ldr	r3, [r7, #16]
 8012b46:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012b4a:	69bb      	ldr	r3, [r7, #24]
 8012b4c:	69db      	ldr	r3, [r3, #28]
 8012b4e:	4618      	mov	r0, r3
 8012b50:	f7f7 feca 	bl	800a8e8 <lwip_htonl>
 8012b54:	4603      	mov	r3, r0
 8012b56:	461a      	mov	r2, r3
 8012b58:	4629      	mov	r1, r5
 8012b5a:	4620      	mov	r0, r4
 8012b5c:	f000 fcee 	bl	801353c <dhcp_option_long>
 8012b60:	4603      	mov	r3, r0
 8012b62:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012b64:	89b8      	ldrh	r0, [r7, #12]
 8012b66:	693b      	ldr	r3, [r7, #16]
 8012b68:	33f0      	adds	r3, #240	; 0xf0
 8012b6a:	697a      	ldr	r2, [r7, #20]
 8012b6c:	4619      	mov	r1, r3
 8012b6e:	f001 f99f 	bl	8013eb0 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012b72:	4b19      	ldr	r3, [pc, #100]	; (8012bd8 <dhcp_decline+0xdc>)
 8012b74:	6818      	ldr	r0, [r3, #0]
 8012b76:	4b19      	ldr	r3, [pc, #100]	; (8012bdc <dhcp_decline+0xe0>)
 8012b78:	9301      	str	r3, [sp, #4]
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	9300      	str	r3, [sp, #0]
 8012b7e:	2343      	movs	r3, #67	; 0x43
 8012b80:	4a17      	ldr	r2, [pc, #92]	; (8012be0 <dhcp_decline+0xe4>)
 8012b82:	6979      	ldr	r1, [r7, #20]
 8012b84:	f7ff f90e 	bl	8011da4 <udp_sendto_if_src>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012b8c:	6978      	ldr	r0, [r7, #20]
 8012b8e:	f7f9 f937 	bl	800be00 <pbuf_free>
 8012b92:	e001      	b.n	8012b98 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012b94:	23ff      	movs	r3, #255	; 0xff
 8012b96:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012b98:	69bb      	ldr	r3, [r7, #24]
 8012b9a:	799b      	ldrb	r3, [r3, #6]
 8012b9c:	2bff      	cmp	r3, #255	; 0xff
 8012b9e:	d005      	beq.n	8012bac <dhcp_decline+0xb0>
    dhcp->tries++;
 8012ba0:	69bb      	ldr	r3, [r7, #24]
 8012ba2:	799b      	ldrb	r3, [r3, #6]
 8012ba4:	3301      	adds	r3, #1
 8012ba6:	b2da      	uxtb	r2, r3
 8012ba8:	69bb      	ldr	r3, [r7, #24]
 8012baa:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8012bac:	f242 7310 	movw	r3, #10000	; 0x2710
 8012bb0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012bb2:	89fb      	ldrh	r3, [r7, #14]
 8012bb4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012bb8:	4a0a      	ldr	r2, [pc, #40]	; (8012be4 <dhcp_decline+0xe8>)
 8012bba:	fb82 1203 	smull	r1, r2, r2, r3
 8012bbe:	1152      	asrs	r2, r2, #5
 8012bc0:	17db      	asrs	r3, r3, #31
 8012bc2:	1ad3      	subs	r3, r2, r3
 8012bc4:	b29a      	uxth	r2, r3
 8012bc6:	69bb      	ldr	r3, [r7, #24]
 8012bc8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012bca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012bce:	4618      	mov	r0, r3
 8012bd0:	3720      	adds	r7, #32
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8012bd6:	bf00      	nop
 8012bd8:	2000049c 	.word	0x2000049c
 8012bdc:	08028d0c 	.word	0x08028d0c
 8012be0:	08028d10 	.word	0x08028d10
 8012be4:	10624dd3 	.word	0x10624dd3

08012be8 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b08a      	sub	sp, #40	; 0x28
 8012bec:	af02      	add	r7, sp, #8
 8012bee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	6a1b      	ldr	r3, [r3, #32]
 8012bf4:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8012bfa:	69bb      	ldr	r3, [r7, #24]
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8012c00:	2106      	movs	r1, #6
 8012c02:	69b8      	ldr	r0, [r7, #24]
 8012c04:	f000 fbf4 	bl	80133f0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8012c08:	f107 0308 	add.w	r3, r7, #8
 8012c0c:	2201      	movs	r2, #1
 8012c0e:	69b9      	ldr	r1, [r7, #24]
 8012c10:	6878      	ldr	r0, [r7, #4]
 8012c12:	f001 f877 	bl	8013d04 <dhcp_create_msg>
 8012c16:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8012c18:	693b      	ldr	r3, [r7, #16]
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d04b      	beq.n	8012cb6 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012c1e:	693b      	ldr	r3, [r7, #16]
 8012c20:	685b      	ldr	r3, [r3, #4]
 8012c22:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012c24:	8938      	ldrh	r0, [r7, #8]
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012c2c:	2302      	movs	r3, #2
 8012c2e:	2239      	movs	r2, #57	; 0x39
 8012c30:	f000 fbf8 	bl	8013424 <dhcp_option>
 8012c34:	4603      	mov	r3, r0
 8012c36:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012c38:	8938      	ldrh	r0, [r7, #8]
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012c44:	461a      	mov	r2, r3
 8012c46:	f000 fc47 	bl	80134d8 <dhcp_option_short>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012c4e:	8938      	ldrh	r0, [r7, #8]
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012c56:	2303      	movs	r3, #3
 8012c58:	2237      	movs	r2, #55	; 0x37
 8012c5a:	f000 fbe3 	bl	8013424 <dhcp_option>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012c62:	2300      	movs	r3, #0
 8012c64:	77fb      	strb	r3, [r7, #31]
 8012c66:	e00e      	b.n	8012c86 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012c68:	8938      	ldrh	r0, [r7, #8]
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012c70:	7ffb      	ldrb	r3, [r7, #31]
 8012c72:	4a29      	ldr	r2, [pc, #164]	; (8012d18 <dhcp_discover+0x130>)
 8012c74:	5cd3      	ldrb	r3, [r2, r3]
 8012c76:	461a      	mov	r2, r3
 8012c78:	f000 fc08 	bl	801348c <dhcp_option_byte>
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012c80:	7ffb      	ldrb	r3, [r7, #31]
 8012c82:	3301      	adds	r3, #1
 8012c84:	77fb      	strb	r3, [r7, #31]
 8012c86:	7ffb      	ldrb	r3, [r7, #31]
 8012c88:	2b02      	cmp	r3, #2
 8012c8a:	d9ed      	bls.n	8012c68 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012c8c:	8938      	ldrh	r0, [r7, #8]
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	33f0      	adds	r3, #240	; 0xf0
 8012c92:	693a      	ldr	r2, [r7, #16]
 8012c94:	4619      	mov	r1, r3
 8012c96:	f001 f90b 	bl	8013eb0 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012c9a:	4b20      	ldr	r3, [pc, #128]	; (8012d1c <dhcp_discover+0x134>)
 8012c9c:	6818      	ldr	r0, [r3, #0]
 8012c9e:	4b20      	ldr	r3, [pc, #128]	; (8012d20 <dhcp_discover+0x138>)
 8012ca0:	9301      	str	r3, [sp, #4]
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	9300      	str	r3, [sp, #0]
 8012ca6:	2343      	movs	r3, #67	; 0x43
 8012ca8:	4a1e      	ldr	r2, [pc, #120]	; (8012d24 <dhcp_discover+0x13c>)
 8012caa:	6939      	ldr	r1, [r7, #16]
 8012cac:	f7ff f87a 	bl	8011da4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8012cb0:	6938      	ldr	r0, [r7, #16]
 8012cb2:	f7f9 f8a5 	bl	800be00 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8012cb6:	69bb      	ldr	r3, [r7, #24]
 8012cb8:	799b      	ldrb	r3, [r3, #6]
 8012cba:	2bff      	cmp	r3, #255	; 0xff
 8012cbc:	d005      	beq.n	8012cca <dhcp_discover+0xe2>
    dhcp->tries++;
 8012cbe:	69bb      	ldr	r3, [r7, #24]
 8012cc0:	799b      	ldrb	r3, [r3, #6]
 8012cc2:	3301      	adds	r3, #1
 8012cc4:	b2da      	uxtb	r2, r3
 8012cc6:	69bb      	ldr	r3, [r7, #24]
 8012cc8:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012cca:	69bb      	ldr	r3, [r7, #24]
 8012ccc:	799b      	ldrb	r3, [r3, #6]
 8012cce:	2b05      	cmp	r3, #5
 8012cd0:	d80d      	bhi.n	8012cee <dhcp_discover+0x106>
 8012cd2:	69bb      	ldr	r3, [r7, #24]
 8012cd4:	799b      	ldrb	r3, [r3, #6]
 8012cd6:	461a      	mov	r2, r3
 8012cd8:	2301      	movs	r3, #1
 8012cda:	4093      	lsls	r3, r2
 8012cdc:	b29b      	uxth	r3, r3
 8012cde:	461a      	mov	r2, r3
 8012ce0:	0152      	lsls	r2, r2, #5
 8012ce2:	1ad2      	subs	r2, r2, r3
 8012ce4:	0092      	lsls	r2, r2, #2
 8012ce6:	4413      	add	r3, r2
 8012ce8:	00db      	lsls	r3, r3, #3
 8012cea:	b29b      	uxth	r3, r3
 8012cec:	e001      	b.n	8012cf2 <dhcp_discover+0x10a>
 8012cee:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012cf2:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012cf4:	897b      	ldrh	r3, [r7, #10]
 8012cf6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012cfa:	4a0b      	ldr	r2, [pc, #44]	; (8012d28 <dhcp_discover+0x140>)
 8012cfc:	fb82 1203 	smull	r1, r2, r2, r3
 8012d00:	1152      	asrs	r2, r2, #5
 8012d02:	17db      	asrs	r3, r3, #31
 8012d04:	1ad3      	subs	r3, r2, r3
 8012d06:	b29a      	uxth	r2, r3
 8012d08:	69bb      	ldr	r3, [r7, #24]
 8012d0a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012d0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012d10:	4618      	mov	r0, r3
 8012d12:	3720      	adds	r7, #32
 8012d14:	46bd      	mov	sp, r7
 8012d16:	bd80      	pop	{r7, pc}
 8012d18:	20000020 	.word	0x20000020
 8012d1c:	2000049c 	.word	0x2000049c
 8012d20:	08028d0c 	.word	0x08028d0c
 8012d24:	08028d10 	.word	0x08028d10
 8012d28:	10624dd3 	.word	0x10624dd3

08012d2c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b088      	sub	sp, #32
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d107      	bne.n	8012d4a <dhcp_bind+0x1e>
 8012d3a:	4b64      	ldr	r3, [pc, #400]	; (8012ecc <dhcp_bind+0x1a0>)
 8012d3c:	f240 4215 	movw	r2, #1045	; 0x415
 8012d40:	4963      	ldr	r1, [pc, #396]	; (8012ed0 <dhcp_bind+0x1a4>)
 8012d42:	4864      	ldr	r0, [pc, #400]	; (8012ed4 <dhcp_bind+0x1a8>)
 8012d44:	f003 fce2 	bl	801670c <iprintf>
 8012d48:	e0bc      	b.n	8012ec4 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	6a1b      	ldr	r3, [r3, #32]
 8012d4e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8012d50:	69bb      	ldr	r3, [r7, #24]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d107      	bne.n	8012d66 <dhcp_bind+0x3a>
 8012d56:	4b5d      	ldr	r3, [pc, #372]	; (8012ecc <dhcp_bind+0x1a0>)
 8012d58:	f240 4217 	movw	r2, #1047	; 0x417
 8012d5c:	495e      	ldr	r1, [pc, #376]	; (8012ed8 <dhcp_bind+0x1ac>)
 8012d5e:	485d      	ldr	r0, [pc, #372]	; (8012ed4 <dhcp_bind+0x1a8>)
 8012d60:	f003 fcd4 	bl	801670c <iprintf>
 8012d64:	e0ae      	b.n	8012ec4 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8012d66:	69bb      	ldr	r3, [r7, #24]
 8012d68:	2200      	movs	r2, #0
 8012d6a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8012d6c:	69bb      	ldr	r3, [r7, #24]
 8012d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d74:	d019      	beq.n	8012daa <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012d76:	69bb      	ldr	r3, [r7, #24]
 8012d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d7a:	331e      	adds	r3, #30
 8012d7c:	4a57      	ldr	r2, [pc, #348]	; (8012edc <dhcp_bind+0x1b0>)
 8012d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8012d82:	095b      	lsrs	r3, r3, #5
 8012d84:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012d86:	69fb      	ldr	r3, [r7, #28]
 8012d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012d8c:	d302      	bcc.n	8012d94 <dhcp_bind+0x68>
      timeout = 0xffff;
 8012d8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012d92:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8012d94:	69fb      	ldr	r3, [r7, #28]
 8012d96:	b29a      	uxth	r2, r3
 8012d98:	69bb      	ldr	r3, [r7, #24]
 8012d9a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8012d9c:	69bb      	ldr	r3, [r7, #24]
 8012d9e:	8a9b      	ldrh	r3, [r3, #20]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d102      	bne.n	8012daa <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8012da4:	69bb      	ldr	r3, [r7, #24]
 8012da6:	2201      	movs	r2, #1
 8012da8:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8012daa:	69bb      	ldr	r3, [r7, #24]
 8012dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012db2:	d01d      	beq.n	8012df0 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012db4:	69bb      	ldr	r3, [r7, #24]
 8012db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012db8:	331e      	adds	r3, #30
 8012dba:	4a48      	ldr	r2, [pc, #288]	; (8012edc <dhcp_bind+0x1b0>)
 8012dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8012dc0:	095b      	lsrs	r3, r3, #5
 8012dc2:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012dc4:	69fb      	ldr	r3, [r7, #28]
 8012dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012dca:	d302      	bcc.n	8012dd2 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8012dcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012dd0:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8012dd2:	69fb      	ldr	r3, [r7, #28]
 8012dd4:	b29a      	uxth	r2, r3
 8012dd6:	69bb      	ldr	r3, [r7, #24]
 8012dd8:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8012dda:	69bb      	ldr	r3, [r7, #24]
 8012ddc:	895b      	ldrh	r3, [r3, #10]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d102      	bne.n	8012de8 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8012de2:	69bb      	ldr	r3, [r7, #24]
 8012de4:	2201      	movs	r2, #1
 8012de6:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8012de8:	69bb      	ldr	r3, [r7, #24]
 8012dea:	895a      	ldrh	r2, [r3, #10]
 8012dec:	69bb      	ldr	r3, [r7, #24]
 8012dee:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8012df0:	69bb      	ldr	r3, [r7, #24]
 8012df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012df8:	d01d      	beq.n	8012e36 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012dfa:	69bb      	ldr	r3, [r7, #24]
 8012dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dfe:	331e      	adds	r3, #30
 8012e00:	4a36      	ldr	r2, [pc, #216]	; (8012edc <dhcp_bind+0x1b0>)
 8012e02:	fba2 2303 	umull	r2, r3, r2, r3
 8012e06:	095b      	lsrs	r3, r3, #5
 8012e08:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012e0a:	69fb      	ldr	r3, [r7, #28]
 8012e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012e10:	d302      	bcc.n	8012e18 <dhcp_bind+0xec>
      timeout = 0xffff;
 8012e12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012e16:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8012e18:	69fb      	ldr	r3, [r7, #28]
 8012e1a:	b29a      	uxth	r2, r3
 8012e1c:	69bb      	ldr	r3, [r7, #24]
 8012e1e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8012e20:	69bb      	ldr	r3, [r7, #24]
 8012e22:	899b      	ldrh	r3, [r3, #12]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d102      	bne.n	8012e2e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8012e28:	69bb      	ldr	r3, [r7, #24]
 8012e2a:	2201      	movs	r2, #1
 8012e2c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8012e2e:	69bb      	ldr	r3, [r7, #24]
 8012e30:	899a      	ldrh	r2, [r3, #12]
 8012e32:	69bb      	ldr	r3, [r7, #24]
 8012e34:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8012e36:	69bb      	ldr	r3, [r7, #24]
 8012e38:	895a      	ldrh	r2, [r3, #10]
 8012e3a:	69bb      	ldr	r3, [r7, #24]
 8012e3c:	899b      	ldrh	r3, [r3, #12]
 8012e3e:	429a      	cmp	r2, r3
 8012e40:	d306      	bcc.n	8012e50 <dhcp_bind+0x124>
 8012e42:	69bb      	ldr	r3, [r7, #24]
 8012e44:	899b      	ldrh	r3, [r3, #12]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d002      	beq.n	8012e50 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8012e4a:	69bb      	ldr	r3, [r7, #24]
 8012e4c:	2200      	movs	r2, #0
 8012e4e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8012e50:	69bb      	ldr	r3, [r7, #24]
 8012e52:	79db      	ldrb	r3, [r3, #7]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d003      	beq.n	8012e60 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8012e58:	69bb      	ldr	r3, [r7, #24]
 8012e5a:	6a1b      	ldr	r3, [r3, #32]
 8012e5c:	613b      	str	r3, [r7, #16]
 8012e5e:	e014      	b.n	8012e8a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8012e60:	69bb      	ldr	r3, [r7, #24]
 8012e62:	331c      	adds	r3, #28
 8012e64:	781b      	ldrb	r3, [r3, #0]
 8012e66:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8012e68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	db02      	blt.n	8012e76 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8012e70:	23ff      	movs	r3, #255	; 0xff
 8012e72:	613b      	str	r3, [r7, #16]
 8012e74:	e009      	b.n	8012e8a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8012e76:	7dfb      	ldrb	r3, [r7, #23]
 8012e78:	2bbf      	cmp	r3, #191	; 0xbf
 8012e7a:	d903      	bls.n	8012e84 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8012e7c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012e80:	613b      	str	r3, [r7, #16]
 8012e82:	e002      	b.n	8012e8a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8012e84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012e88:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8012e8a:	69bb      	ldr	r3, [r7, #24]
 8012e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e8e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8012e90:	68fb      	ldr	r3, [r7, #12]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d108      	bne.n	8012ea8 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8012e96:	69bb      	ldr	r3, [r7, #24]
 8012e98:	69da      	ldr	r2, [r3, #28]
 8012e9a:	693b      	ldr	r3, [r7, #16]
 8012e9c:	4013      	ands	r3, r2
 8012e9e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012ea6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8012ea8:	210a      	movs	r1, #10
 8012eaa:	69b8      	ldr	r0, [r7, #24]
 8012eac:	f000 faa0 	bl	80133f0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8012eb0:	69bb      	ldr	r3, [r7, #24]
 8012eb2:	f103 011c 	add.w	r1, r3, #28
 8012eb6:	f107 030c 	add.w	r3, r7, #12
 8012eba:	f107 0210 	add.w	r2, r7, #16
 8012ebe:	6878      	ldr	r0, [r7, #4]
 8012ec0:	f7f8 fb3c 	bl	800b53c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8012ec4:	3720      	adds	r7, #32
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	bd80      	pop	{r7, pc}
 8012eca:	bf00      	nop
 8012ecc:	08019808 	.word	0x08019808
 8012ed0:	08019968 	.word	0x08019968
 8012ed4:	08019868 	.word	0x08019868
 8012ed8:	08019984 	.word	0x08019984
 8012edc:	88888889 	.word	0x88888889

08012ee0 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b08a      	sub	sp, #40	; 0x28
 8012ee4:	af02      	add	r7, sp, #8
 8012ee6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	6a1b      	ldr	r3, [r3, #32]
 8012eec:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8012eee:	2105      	movs	r1, #5
 8012ef0:	69b8      	ldr	r0, [r7, #24]
 8012ef2:	f000 fa7d 	bl	80133f0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012ef6:	f107 030c 	add.w	r3, r7, #12
 8012efa:	2203      	movs	r2, #3
 8012efc:	69b9      	ldr	r1, [r7, #24]
 8012efe:	6878      	ldr	r0, [r7, #4]
 8012f00:	f000 ff00 	bl	8013d04 <dhcp_create_msg>
 8012f04:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012f06:	697b      	ldr	r3, [r7, #20]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d04e      	beq.n	8012faa <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012f0c:	697b      	ldr	r3, [r7, #20]
 8012f0e:	685b      	ldr	r3, [r3, #4]
 8012f10:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012f12:	89b8      	ldrh	r0, [r7, #12]
 8012f14:	693b      	ldr	r3, [r7, #16]
 8012f16:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012f1a:	2302      	movs	r3, #2
 8012f1c:	2239      	movs	r2, #57	; 0x39
 8012f1e:	f000 fa81 	bl	8013424 <dhcp_option>
 8012f22:	4603      	mov	r3, r0
 8012f24:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012f26:	89b8      	ldrh	r0, [r7, #12]
 8012f28:	693b      	ldr	r3, [r7, #16]
 8012f2a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012f32:	461a      	mov	r2, r3
 8012f34:	f000 fad0 	bl	80134d8 <dhcp_option_short>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012f3c:	89b8      	ldrh	r0, [r7, #12]
 8012f3e:	693b      	ldr	r3, [r7, #16]
 8012f40:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012f44:	2303      	movs	r3, #3
 8012f46:	2237      	movs	r2, #55	; 0x37
 8012f48:	f000 fa6c 	bl	8013424 <dhcp_option>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012f50:	2300      	movs	r3, #0
 8012f52:	77bb      	strb	r3, [r7, #30]
 8012f54:	e00e      	b.n	8012f74 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012f56:	89b8      	ldrh	r0, [r7, #12]
 8012f58:	693b      	ldr	r3, [r7, #16]
 8012f5a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012f5e:	7fbb      	ldrb	r3, [r7, #30]
 8012f60:	4a2a      	ldr	r2, [pc, #168]	; (801300c <dhcp_renew+0x12c>)
 8012f62:	5cd3      	ldrb	r3, [r2, r3]
 8012f64:	461a      	mov	r2, r3
 8012f66:	f000 fa91 	bl	801348c <dhcp_option_byte>
 8012f6a:	4603      	mov	r3, r0
 8012f6c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012f6e:	7fbb      	ldrb	r3, [r7, #30]
 8012f70:	3301      	adds	r3, #1
 8012f72:	77bb      	strb	r3, [r7, #30]
 8012f74:	7fbb      	ldrb	r3, [r7, #30]
 8012f76:	2b02      	cmp	r3, #2
 8012f78:	d9ed      	bls.n	8012f56 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012f7a:	89b8      	ldrh	r0, [r7, #12]
 8012f7c:	693b      	ldr	r3, [r7, #16]
 8012f7e:	33f0      	adds	r3, #240	; 0xf0
 8012f80:	697a      	ldr	r2, [r7, #20]
 8012f82:	4619      	mov	r1, r3
 8012f84:	f000 ff94 	bl	8013eb0 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012f88:	4b21      	ldr	r3, [pc, #132]	; (8013010 <dhcp_renew+0x130>)
 8012f8a:	6818      	ldr	r0, [r3, #0]
 8012f8c:	69bb      	ldr	r3, [r7, #24]
 8012f8e:	f103 0218 	add.w	r2, r3, #24
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	9300      	str	r3, [sp, #0]
 8012f96:	2343      	movs	r3, #67	; 0x43
 8012f98:	6979      	ldr	r1, [r7, #20]
 8012f9a:	f7fe fe8f 	bl	8011cbc <udp_sendto_if>
 8012f9e:	4603      	mov	r3, r0
 8012fa0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012fa2:	6978      	ldr	r0, [r7, #20]
 8012fa4:	f7f8 ff2c 	bl	800be00 <pbuf_free>
 8012fa8:	e001      	b.n	8012fae <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012faa:	23ff      	movs	r3, #255	; 0xff
 8012fac:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012fae:	69bb      	ldr	r3, [r7, #24]
 8012fb0:	799b      	ldrb	r3, [r3, #6]
 8012fb2:	2bff      	cmp	r3, #255	; 0xff
 8012fb4:	d005      	beq.n	8012fc2 <dhcp_renew+0xe2>
    dhcp->tries++;
 8012fb6:	69bb      	ldr	r3, [r7, #24]
 8012fb8:	799b      	ldrb	r3, [r3, #6]
 8012fba:	3301      	adds	r3, #1
 8012fbc:	b2da      	uxtb	r2, r3
 8012fbe:	69bb      	ldr	r3, [r7, #24]
 8012fc0:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8012fc2:	69bb      	ldr	r3, [r7, #24]
 8012fc4:	799b      	ldrb	r3, [r3, #6]
 8012fc6:	2b09      	cmp	r3, #9
 8012fc8:	d80a      	bhi.n	8012fe0 <dhcp_renew+0x100>
 8012fca:	69bb      	ldr	r3, [r7, #24]
 8012fcc:	799b      	ldrb	r3, [r3, #6]
 8012fce:	b29b      	uxth	r3, r3
 8012fd0:	461a      	mov	r2, r3
 8012fd2:	0152      	lsls	r2, r2, #5
 8012fd4:	1ad2      	subs	r2, r2, r3
 8012fd6:	0092      	lsls	r2, r2, #2
 8012fd8:	4413      	add	r3, r2
 8012fda:	011b      	lsls	r3, r3, #4
 8012fdc:	b29b      	uxth	r3, r3
 8012fde:	e001      	b.n	8012fe4 <dhcp_renew+0x104>
 8012fe0:	f644 6320 	movw	r3, #20000	; 0x4e20
 8012fe4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012fe6:	89fb      	ldrh	r3, [r7, #14]
 8012fe8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012fec:	4a09      	ldr	r2, [pc, #36]	; (8013014 <dhcp_renew+0x134>)
 8012fee:	fb82 1203 	smull	r1, r2, r2, r3
 8012ff2:	1152      	asrs	r2, r2, #5
 8012ff4:	17db      	asrs	r3, r3, #31
 8012ff6:	1ad3      	subs	r3, r2, r3
 8012ff8:	b29a      	uxth	r2, r3
 8012ffa:	69bb      	ldr	r3, [r7, #24]
 8012ffc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012ffe:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013002:	4618      	mov	r0, r3
 8013004:	3720      	adds	r7, #32
 8013006:	46bd      	mov	sp, r7
 8013008:	bd80      	pop	{r7, pc}
 801300a:	bf00      	nop
 801300c:	20000020 	.word	0x20000020
 8013010:	2000049c 	.word	0x2000049c
 8013014:	10624dd3 	.word	0x10624dd3

08013018 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8013018:	b580      	push	{r7, lr}
 801301a:	b08a      	sub	sp, #40	; 0x28
 801301c:	af02      	add	r7, sp, #8
 801301e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	6a1b      	ldr	r3, [r3, #32]
 8013024:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8013026:	2104      	movs	r1, #4
 8013028:	69b8      	ldr	r0, [r7, #24]
 801302a:	f000 f9e1 	bl	80133f0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801302e:	f107 030c 	add.w	r3, r7, #12
 8013032:	2203      	movs	r2, #3
 8013034:	69b9      	ldr	r1, [r7, #24]
 8013036:	6878      	ldr	r0, [r7, #4]
 8013038:	f000 fe64 	bl	8013d04 <dhcp_create_msg>
 801303c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801303e:	697b      	ldr	r3, [r7, #20]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d04c      	beq.n	80130de <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013044:	697b      	ldr	r3, [r7, #20]
 8013046:	685b      	ldr	r3, [r3, #4]
 8013048:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801304a:	89b8      	ldrh	r0, [r7, #12]
 801304c:	693b      	ldr	r3, [r7, #16]
 801304e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013052:	2302      	movs	r3, #2
 8013054:	2239      	movs	r2, #57	; 0x39
 8013056:	f000 f9e5 	bl	8013424 <dhcp_option>
 801305a:	4603      	mov	r3, r0
 801305c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801305e:	89b8      	ldrh	r0, [r7, #12]
 8013060:	693b      	ldr	r3, [r7, #16]
 8013062:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801306a:	461a      	mov	r2, r3
 801306c:	f000 fa34 	bl	80134d8 <dhcp_option_short>
 8013070:	4603      	mov	r3, r0
 8013072:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013074:	89b8      	ldrh	r0, [r7, #12]
 8013076:	693b      	ldr	r3, [r7, #16]
 8013078:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801307c:	2303      	movs	r3, #3
 801307e:	2237      	movs	r2, #55	; 0x37
 8013080:	f000 f9d0 	bl	8013424 <dhcp_option>
 8013084:	4603      	mov	r3, r0
 8013086:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013088:	2300      	movs	r3, #0
 801308a:	77bb      	strb	r3, [r7, #30]
 801308c:	e00e      	b.n	80130ac <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801308e:	89b8      	ldrh	r0, [r7, #12]
 8013090:	693b      	ldr	r3, [r7, #16]
 8013092:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013096:	7fbb      	ldrb	r3, [r7, #30]
 8013098:	4a29      	ldr	r2, [pc, #164]	; (8013140 <dhcp_rebind+0x128>)
 801309a:	5cd3      	ldrb	r3, [r2, r3]
 801309c:	461a      	mov	r2, r3
 801309e:	f000 f9f5 	bl	801348c <dhcp_option_byte>
 80130a2:	4603      	mov	r3, r0
 80130a4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80130a6:	7fbb      	ldrb	r3, [r7, #30]
 80130a8:	3301      	adds	r3, #1
 80130aa:	77bb      	strb	r3, [r7, #30]
 80130ac:	7fbb      	ldrb	r3, [r7, #30]
 80130ae:	2b02      	cmp	r3, #2
 80130b0:	d9ed      	bls.n	801308e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80130b2:	89b8      	ldrh	r0, [r7, #12]
 80130b4:	693b      	ldr	r3, [r7, #16]
 80130b6:	33f0      	adds	r3, #240	; 0xf0
 80130b8:	697a      	ldr	r2, [r7, #20]
 80130ba:	4619      	mov	r1, r3
 80130bc:	f000 fef8 	bl	8013eb0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80130c0:	4b20      	ldr	r3, [pc, #128]	; (8013144 <dhcp_rebind+0x12c>)
 80130c2:	6818      	ldr	r0, [r3, #0]
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	9300      	str	r3, [sp, #0]
 80130c8:	2343      	movs	r3, #67	; 0x43
 80130ca:	4a1f      	ldr	r2, [pc, #124]	; (8013148 <dhcp_rebind+0x130>)
 80130cc:	6979      	ldr	r1, [r7, #20]
 80130ce:	f7fe fdf5 	bl	8011cbc <udp_sendto_if>
 80130d2:	4603      	mov	r3, r0
 80130d4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80130d6:	6978      	ldr	r0, [r7, #20]
 80130d8:	f7f8 fe92 	bl	800be00 <pbuf_free>
 80130dc:	e001      	b.n	80130e2 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80130de:	23ff      	movs	r3, #255	; 0xff
 80130e0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80130e2:	69bb      	ldr	r3, [r7, #24]
 80130e4:	799b      	ldrb	r3, [r3, #6]
 80130e6:	2bff      	cmp	r3, #255	; 0xff
 80130e8:	d005      	beq.n	80130f6 <dhcp_rebind+0xde>
    dhcp->tries++;
 80130ea:	69bb      	ldr	r3, [r7, #24]
 80130ec:	799b      	ldrb	r3, [r3, #6]
 80130ee:	3301      	adds	r3, #1
 80130f0:	b2da      	uxtb	r2, r3
 80130f2:	69bb      	ldr	r3, [r7, #24]
 80130f4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80130f6:	69bb      	ldr	r3, [r7, #24]
 80130f8:	799b      	ldrb	r3, [r3, #6]
 80130fa:	2b09      	cmp	r3, #9
 80130fc:	d80a      	bhi.n	8013114 <dhcp_rebind+0xfc>
 80130fe:	69bb      	ldr	r3, [r7, #24]
 8013100:	799b      	ldrb	r3, [r3, #6]
 8013102:	b29b      	uxth	r3, r3
 8013104:	461a      	mov	r2, r3
 8013106:	0152      	lsls	r2, r2, #5
 8013108:	1ad2      	subs	r2, r2, r3
 801310a:	0092      	lsls	r2, r2, #2
 801310c:	4413      	add	r3, r2
 801310e:	00db      	lsls	r3, r3, #3
 8013110:	b29b      	uxth	r3, r3
 8013112:	e001      	b.n	8013118 <dhcp_rebind+0x100>
 8013114:	f242 7310 	movw	r3, #10000	; 0x2710
 8013118:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801311a:	89fb      	ldrh	r3, [r7, #14]
 801311c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013120:	4a0a      	ldr	r2, [pc, #40]	; (801314c <dhcp_rebind+0x134>)
 8013122:	fb82 1203 	smull	r1, r2, r2, r3
 8013126:	1152      	asrs	r2, r2, #5
 8013128:	17db      	asrs	r3, r3, #31
 801312a:	1ad3      	subs	r3, r2, r3
 801312c:	b29a      	uxth	r2, r3
 801312e:	69bb      	ldr	r3, [r7, #24]
 8013130:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013132:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013136:	4618      	mov	r0, r3
 8013138:	3720      	adds	r7, #32
 801313a:	46bd      	mov	sp, r7
 801313c:	bd80      	pop	{r7, pc}
 801313e:	bf00      	nop
 8013140:	20000020 	.word	0x20000020
 8013144:	2000049c 	.word	0x2000049c
 8013148:	08028d10 	.word	0x08028d10
 801314c:	10624dd3 	.word	0x10624dd3

08013150 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8013150:	b5b0      	push	{r4, r5, r7, lr}
 8013152:	b08a      	sub	sp, #40	; 0x28
 8013154:	af02      	add	r7, sp, #8
 8013156:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	6a1b      	ldr	r3, [r3, #32]
 801315c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801315e:	2103      	movs	r1, #3
 8013160:	69b8      	ldr	r0, [r7, #24]
 8013162:	f000 f945 	bl	80133f0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013166:	f107 030c 	add.w	r3, r7, #12
 801316a:	2203      	movs	r2, #3
 801316c:	69b9      	ldr	r1, [r7, #24]
 801316e:	6878      	ldr	r0, [r7, #4]
 8013170:	f000 fdc8 	bl	8013d04 <dhcp_create_msg>
 8013174:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013176:	697b      	ldr	r3, [r7, #20]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d066      	beq.n	801324a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801317c:	697b      	ldr	r3, [r7, #20]
 801317e:	685b      	ldr	r3, [r3, #4]
 8013180:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013182:	89b8      	ldrh	r0, [r7, #12]
 8013184:	693b      	ldr	r3, [r7, #16]
 8013186:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801318a:	2302      	movs	r3, #2
 801318c:	2239      	movs	r2, #57	; 0x39
 801318e:	f000 f949 	bl	8013424 <dhcp_option>
 8013192:	4603      	mov	r3, r0
 8013194:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8013196:	89b8      	ldrh	r0, [r7, #12]
 8013198:	693b      	ldr	r3, [r7, #16]
 801319a:	33f0      	adds	r3, #240	; 0xf0
 801319c:	f44f 7210 	mov.w	r2, #576	; 0x240
 80131a0:	4619      	mov	r1, r3
 80131a2:	f000 f999 	bl	80134d8 <dhcp_option_short>
 80131a6:	4603      	mov	r3, r0
 80131a8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80131aa:	89b8      	ldrh	r0, [r7, #12]
 80131ac:	693b      	ldr	r3, [r7, #16]
 80131ae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80131b2:	2304      	movs	r3, #4
 80131b4:	2232      	movs	r2, #50	; 0x32
 80131b6:	f000 f935 	bl	8013424 <dhcp_option>
 80131ba:	4603      	mov	r3, r0
 80131bc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80131be:	89bc      	ldrh	r4, [r7, #12]
 80131c0:	693b      	ldr	r3, [r7, #16]
 80131c2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80131c6:	69bb      	ldr	r3, [r7, #24]
 80131c8:	69db      	ldr	r3, [r3, #28]
 80131ca:	4618      	mov	r0, r3
 80131cc:	f7f7 fb8c 	bl	800a8e8 <lwip_htonl>
 80131d0:	4603      	mov	r3, r0
 80131d2:	461a      	mov	r2, r3
 80131d4:	4629      	mov	r1, r5
 80131d6:	4620      	mov	r0, r4
 80131d8:	f000 f9b0 	bl	801353c <dhcp_option_long>
 80131dc:	4603      	mov	r3, r0
 80131de:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80131e0:	89b8      	ldrh	r0, [r7, #12]
 80131e2:	693b      	ldr	r3, [r7, #16]
 80131e4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80131e8:	2303      	movs	r3, #3
 80131ea:	2237      	movs	r2, #55	; 0x37
 80131ec:	f000 f91a 	bl	8013424 <dhcp_option>
 80131f0:	4603      	mov	r3, r0
 80131f2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80131f4:	2300      	movs	r3, #0
 80131f6:	77bb      	strb	r3, [r7, #30]
 80131f8:	e00e      	b.n	8013218 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80131fa:	89b8      	ldrh	r0, [r7, #12]
 80131fc:	693b      	ldr	r3, [r7, #16]
 80131fe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013202:	7fbb      	ldrb	r3, [r7, #30]
 8013204:	4a29      	ldr	r2, [pc, #164]	; (80132ac <dhcp_reboot+0x15c>)
 8013206:	5cd3      	ldrb	r3, [r2, r3]
 8013208:	461a      	mov	r2, r3
 801320a:	f000 f93f 	bl	801348c <dhcp_option_byte>
 801320e:	4603      	mov	r3, r0
 8013210:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013212:	7fbb      	ldrb	r3, [r7, #30]
 8013214:	3301      	adds	r3, #1
 8013216:	77bb      	strb	r3, [r7, #30]
 8013218:	7fbb      	ldrb	r3, [r7, #30]
 801321a:	2b02      	cmp	r3, #2
 801321c:	d9ed      	bls.n	80131fa <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801321e:	89b8      	ldrh	r0, [r7, #12]
 8013220:	693b      	ldr	r3, [r7, #16]
 8013222:	33f0      	adds	r3, #240	; 0xf0
 8013224:	697a      	ldr	r2, [r7, #20]
 8013226:	4619      	mov	r1, r3
 8013228:	f000 fe42 	bl	8013eb0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801322c:	4b20      	ldr	r3, [pc, #128]	; (80132b0 <dhcp_reboot+0x160>)
 801322e:	6818      	ldr	r0, [r3, #0]
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	9300      	str	r3, [sp, #0]
 8013234:	2343      	movs	r3, #67	; 0x43
 8013236:	4a1f      	ldr	r2, [pc, #124]	; (80132b4 <dhcp_reboot+0x164>)
 8013238:	6979      	ldr	r1, [r7, #20]
 801323a:	f7fe fd3f 	bl	8011cbc <udp_sendto_if>
 801323e:	4603      	mov	r3, r0
 8013240:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013242:	6978      	ldr	r0, [r7, #20]
 8013244:	f7f8 fddc 	bl	800be00 <pbuf_free>
 8013248:	e001      	b.n	801324e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801324a:	23ff      	movs	r3, #255	; 0xff
 801324c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801324e:	69bb      	ldr	r3, [r7, #24]
 8013250:	799b      	ldrb	r3, [r3, #6]
 8013252:	2bff      	cmp	r3, #255	; 0xff
 8013254:	d005      	beq.n	8013262 <dhcp_reboot+0x112>
    dhcp->tries++;
 8013256:	69bb      	ldr	r3, [r7, #24]
 8013258:	799b      	ldrb	r3, [r3, #6]
 801325a:	3301      	adds	r3, #1
 801325c:	b2da      	uxtb	r2, r3
 801325e:	69bb      	ldr	r3, [r7, #24]
 8013260:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8013262:	69bb      	ldr	r3, [r7, #24]
 8013264:	799b      	ldrb	r3, [r3, #6]
 8013266:	2b09      	cmp	r3, #9
 8013268:	d80a      	bhi.n	8013280 <dhcp_reboot+0x130>
 801326a:	69bb      	ldr	r3, [r7, #24]
 801326c:	799b      	ldrb	r3, [r3, #6]
 801326e:	b29b      	uxth	r3, r3
 8013270:	461a      	mov	r2, r3
 8013272:	0152      	lsls	r2, r2, #5
 8013274:	1ad2      	subs	r2, r2, r3
 8013276:	0092      	lsls	r2, r2, #2
 8013278:	4413      	add	r3, r2
 801327a:	00db      	lsls	r3, r3, #3
 801327c:	b29b      	uxth	r3, r3
 801327e:	e001      	b.n	8013284 <dhcp_reboot+0x134>
 8013280:	f242 7310 	movw	r3, #10000	; 0x2710
 8013284:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013286:	89fb      	ldrh	r3, [r7, #14]
 8013288:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801328c:	4a0a      	ldr	r2, [pc, #40]	; (80132b8 <dhcp_reboot+0x168>)
 801328e:	fb82 1203 	smull	r1, r2, r2, r3
 8013292:	1152      	asrs	r2, r2, #5
 8013294:	17db      	asrs	r3, r3, #31
 8013296:	1ad3      	subs	r3, r2, r3
 8013298:	b29a      	uxth	r2, r3
 801329a:	69bb      	ldr	r3, [r7, #24]
 801329c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801329e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80132a2:	4618      	mov	r0, r3
 80132a4:	3720      	adds	r7, #32
 80132a6:	46bd      	mov	sp, r7
 80132a8:	bdb0      	pop	{r4, r5, r7, pc}
 80132aa:	bf00      	nop
 80132ac:	20000020 	.word	0x20000020
 80132b0:	2000049c 	.word	0x2000049c
 80132b4:	08028d10 	.word	0x08028d10
 80132b8:	10624dd3 	.word	0x10624dd3

080132bc <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80132bc:	b5b0      	push	{r4, r5, r7, lr}
 80132be:	b08a      	sub	sp, #40	; 0x28
 80132c0:	af02      	add	r7, sp, #8
 80132c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	6a1b      	ldr	r3, [r3, #32]
 80132c8:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80132ca:	69fb      	ldr	r3, [r7, #28]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	f000 8084 	beq.w	80133da <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80132d2:	69fb      	ldr	r3, [r7, #28]
 80132d4:	795b      	ldrb	r3, [r3, #5]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	f000 8081 	beq.w	80133de <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80132dc:	69fb      	ldr	r3, [r7, #28]
 80132de:	699b      	ldr	r3, [r3, #24]
 80132e0:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80132e2:	69fb      	ldr	r3, [r7, #28]
 80132e4:	2200      	movs	r2, #0
 80132e6:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80132e8:	69fb      	ldr	r3, [r7, #28]
 80132ea:	2200      	movs	r2, #0
 80132ec:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80132ee:	69fb      	ldr	r3, [r7, #28]
 80132f0:	2200      	movs	r2, #0
 80132f2:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80132f4:	69fb      	ldr	r3, [r7, #28]
 80132f6:	2200      	movs	r2, #0
 80132f8:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80132fa:	69fb      	ldr	r3, [r7, #28]
 80132fc:	2200      	movs	r2, #0
 80132fe:	631a      	str	r2, [r3, #48]	; 0x30
 8013300:	69fb      	ldr	r3, [r7, #28]
 8013302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013304:	69fb      	ldr	r3, [r7, #28]
 8013306:	62da      	str	r2, [r3, #44]	; 0x2c
 8013308:	69fb      	ldr	r3, [r7, #28]
 801330a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801330c:	69fb      	ldr	r3, [r7, #28]
 801330e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8013310:	69fb      	ldr	r3, [r7, #28]
 8013312:	2200      	movs	r2, #0
 8013314:	829a      	strh	r2, [r3, #20]
 8013316:	69fb      	ldr	r3, [r7, #28]
 8013318:	8a9a      	ldrh	r2, [r3, #20]
 801331a:	69fb      	ldr	r3, [r7, #28]
 801331c:	825a      	strh	r2, [r3, #18]
 801331e:	69fb      	ldr	r3, [r7, #28]
 8013320:	8a5a      	ldrh	r2, [r3, #18]
 8013322:	69fb      	ldr	r3, [r7, #28]
 8013324:	821a      	strh	r2, [r3, #16]
 8013326:	69fb      	ldr	r3, [r7, #28]
 8013328:	8a1a      	ldrh	r2, [r3, #16]
 801332a:	69fb      	ldr	r3, [r7, #28]
 801332c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801332e:	6878      	ldr	r0, [r7, #4]
 8013330:	f000 fdec 	bl	8013f0c <dhcp_supplied_address>
 8013334:	4603      	mov	r3, r0
 8013336:	2b00      	cmp	r3, #0
 8013338:	d03b      	beq.n	80133b2 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801333a:	f107 030e 	add.w	r3, r7, #14
 801333e:	2207      	movs	r2, #7
 8013340:	69f9      	ldr	r1, [r7, #28]
 8013342:	6878      	ldr	r0, [r7, #4]
 8013344:	f000 fcde 	bl	8013d04 <dhcp_create_msg>
 8013348:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801334a:	69bb      	ldr	r3, [r7, #24]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d030      	beq.n	80133b2 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013350:	69bb      	ldr	r3, [r7, #24]
 8013352:	685b      	ldr	r3, [r3, #4]
 8013354:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013356:	89f8      	ldrh	r0, [r7, #14]
 8013358:	697b      	ldr	r3, [r7, #20]
 801335a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801335e:	2304      	movs	r3, #4
 8013360:	2236      	movs	r2, #54	; 0x36
 8013362:	f000 f85f 	bl	8013424 <dhcp_option>
 8013366:	4603      	mov	r3, r0
 8013368:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801336a:	89fc      	ldrh	r4, [r7, #14]
 801336c:	697b      	ldr	r3, [r7, #20]
 801336e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013372:	693b      	ldr	r3, [r7, #16]
 8013374:	4618      	mov	r0, r3
 8013376:	f7f7 fab7 	bl	800a8e8 <lwip_htonl>
 801337a:	4603      	mov	r3, r0
 801337c:	461a      	mov	r2, r3
 801337e:	4629      	mov	r1, r5
 8013380:	4620      	mov	r0, r4
 8013382:	f000 f8db 	bl	801353c <dhcp_option_long>
 8013386:	4603      	mov	r3, r0
 8013388:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801338a:	89f8      	ldrh	r0, [r7, #14]
 801338c:	697b      	ldr	r3, [r7, #20]
 801338e:	33f0      	adds	r3, #240	; 0xf0
 8013390:	69ba      	ldr	r2, [r7, #24]
 8013392:	4619      	mov	r1, r3
 8013394:	f000 fd8c 	bl	8013eb0 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013398:	4b13      	ldr	r3, [pc, #76]	; (80133e8 <dhcp_release_and_stop+0x12c>)
 801339a:	6818      	ldr	r0, [r3, #0]
 801339c:	f107 0210 	add.w	r2, r7, #16
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	9300      	str	r3, [sp, #0]
 80133a4:	2343      	movs	r3, #67	; 0x43
 80133a6:	69b9      	ldr	r1, [r7, #24]
 80133a8:	f7fe fc88 	bl	8011cbc <udp_sendto_if>
      pbuf_free(p_out);
 80133ac:	69b8      	ldr	r0, [r7, #24]
 80133ae:	f7f8 fd27 	bl	800be00 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80133b2:	4b0e      	ldr	r3, [pc, #56]	; (80133ec <dhcp_release_and_stop+0x130>)
 80133b4:	4a0d      	ldr	r2, [pc, #52]	; (80133ec <dhcp_release_and_stop+0x130>)
 80133b6:	490d      	ldr	r1, [pc, #52]	; (80133ec <dhcp_release_and_stop+0x130>)
 80133b8:	6878      	ldr	r0, [r7, #4]
 80133ba:	f7f8 f8bf 	bl	800b53c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80133be:	2100      	movs	r1, #0
 80133c0:	69f8      	ldr	r0, [r7, #28]
 80133c2:	f000 f815 	bl	80133f0 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80133c6:	69fb      	ldr	r3, [r7, #28]
 80133c8:	791b      	ldrb	r3, [r3, #4]
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d008      	beq.n	80133e0 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80133ce:	f7fe ffc1 	bl	8012354 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80133d2:	69fb      	ldr	r3, [r7, #28]
 80133d4:	2200      	movs	r2, #0
 80133d6:	711a      	strb	r2, [r3, #4]
 80133d8:	e002      	b.n	80133e0 <dhcp_release_and_stop+0x124>
    return;
 80133da:	bf00      	nop
 80133dc:	e000      	b.n	80133e0 <dhcp_release_and_stop+0x124>
    return;
 80133de:	bf00      	nop
  }
}
 80133e0:	3720      	adds	r7, #32
 80133e2:	46bd      	mov	sp, r7
 80133e4:	bdb0      	pop	{r4, r5, r7, pc}
 80133e6:	bf00      	nop
 80133e8:	2000049c 	.word	0x2000049c
 80133ec:	08028d0c 	.word	0x08028d0c

080133f0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80133f0:	b480      	push	{r7}
 80133f2:	b083      	sub	sp, #12
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
 80133f8:	460b      	mov	r3, r1
 80133fa:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	795b      	ldrb	r3, [r3, #5]
 8013400:	78fa      	ldrb	r2, [r7, #3]
 8013402:	429a      	cmp	r2, r3
 8013404:	d008      	beq.n	8013418 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	78fa      	ldrb	r2, [r7, #3]
 801340a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	2200      	movs	r2, #0
 8013410:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	2200      	movs	r2, #0
 8013416:	811a      	strh	r2, [r3, #8]
  }
}
 8013418:	bf00      	nop
 801341a:	370c      	adds	r7, #12
 801341c:	46bd      	mov	sp, r7
 801341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013422:	4770      	bx	lr

08013424 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8013424:	b580      	push	{r7, lr}
 8013426:	b082      	sub	sp, #8
 8013428:	af00      	add	r7, sp, #0
 801342a:	6039      	str	r1, [r7, #0]
 801342c:	4611      	mov	r1, r2
 801342e:	461a      	mov	r2, r3
 8013430:	4603      	mov	r3, r0
 8013432:	80fb      	strh	r3, [r7, #6]
 8013434:	460b      	mov	r3, r1
 8013436:	717b      	strb	r3, [r7, #5]
 8013438:	4613      	mov	r3, r2
 801343a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801343c:	88fa      	ldrh	r2, [r7, #6]
 801343e:	793b      	ldrb	r3, [r7, #4]
 8013440:	4413      	add	r3, r2
 8013442:	3302      	adds	r3, #2
 8013444:	2b44      	cmp	r3, #68	; 0x44
 8013446:	d906      	bls.n	8013456 <dhcp_option+0x32>
 8013448:	4b0d      	ldr	r3, [pc, #52]	; (8013480 <dhcp_option+0x5c>)
 801344a:	f240 529a 	movw	r2, #1434	; 0x59a
 801344e:	490d      	ldr	r1, [pc, #52]	; (8013484 <dhcp_option+0x60>)
 8013450:	480d      	ldr	r0, [pc, #52]	; (8013488 <dhcp_option+0x64>)
 8013452:	f003 f95b 	bl	801670c <iprintf>
  options[options_out_len++] = option_type;
 8013456:	88fb      	ldrh	r3, [r7, #6]
 8013458:	1c5a      	adds	r2, r3, #1
 801345a:	80fa      	strh	r2, [r7, #6]
 801345c:	461a      	mov	r2, r3
 801345e:	683b      	ldr	r3, [r7, #0]
 8013460:	4413      	add	r3, r2
 8013462:	797a      	ldrb	r2, [r7, #5]
 8013464:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8013466:	88fb      	ldrh	r3, [r7, #6]
 8013468:	1c5a      	adds	r2, r3, #1
 801346a:	80fa      	strh	r2, [r7, #6]
 801346c:	461a      	mov	r2, r3
 801346e:	683b      	ldr	r3, [r7, #0]
 8013470:	4413      	add	r3, r2
 8013472:	793a      	ldrb	r2, [r7, #4]
 8013474:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013476:	88fb      	ldrh	r3, [r7, #6]
}
 8013478:	4618      	mov	r0, r3
 801347a:	3708      	adds	r7, #8
 801347c:	46bd      	mov	sp, r7
 801347e:	bd80      	pop	{r7, pc}
 8013480:	08019808 	.word	0x08019808
 8013484:	0801999c 	.word	0x0801999c
 8013488:	08019868 	.word	0x08019868

0801348c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801348c:	b580      	push	{r7, lr}
 801348e:	b082      	sub	sp, #8
 8013490:	af00      	add	r7, sp, #0
 8013492:	4603      	mov	r3, r0
 8013494:	6039      	str	r1, [r7, #0]
 8013496:	80fb      	strh	r3, [r7, #6]
 8013498:	4613      	mov	r3, r2
 801349a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801349c:	88fb      	ldrh	r3, [r7, #6]
 801349e:	2b43      	cmp	r3, #67	; 0x43
 80134a0:	d906      	bls.n	80134b0 <dhcp_option_byte+0x24>
 80134a2:	4b0a      	ldr	r3, [pc, #40]	; (80134cc <dhcp_option_byte+0x40>)
 80134a4:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80134a8:	4909      	ldr	r1, [pc, #36]	; (80134d0 <dhcp_option_byte+0x44>)
 80134aa:	480a      	ldr	r0, [pc, #40]	; (80134d4 <dhcp_option_byte+0x48>)
 80134ac:	f003 f92e 	bl	801670c <iprintf>
  options[options_out_len++] = value;
 80134b0:	88fb      	ldrh	r3, [r7, #6]
 80134b2:	1c5a      	adds	r2, r3, #1
 80134b4:	80fa      	strh	r2, [r7, #6]
 80134b6:	461a      	mov	r2, r3
 80134b8:	683b      	ldr	r3, [r7, #0]
 80134ba:	4413      	add	r3, r2
 80134bc:	797a      	ldrb	r2, [r7, #5]
 80134be:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80134c0:	88fb      	ldrh	r3, [r7, #6]
}
 80134c2:	4618      	mov	r0, r3
 80134c4:	3708      	adds	r7, #8
 80134c6:	46bd      	mov	sp, r7
 80134c8:	bd80      	pop	{r7, pc}
 80134ca:	bf00      	nop
 80134cc:	08019808 	.word	0x08019808
 80134d0:	080199e0 	.word	0x080199e0
 80134d4:	08019868 	.word	0x08019868

080134d8 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80134d8:	b580      	push	{r7, lr}
 80134da:	b082      	sub	sp, #8
 80134dc:	af00      	add	r7, sp, #0
 80134de:	4603      	mov	r3, r0
 80134e0:	6039      	str	r1, [r7, #0]
 80134e2:	80fb      	strh	r3, [r7, #6]
 80134e4:	4613      	mov	r3, r2
 80134e6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80134e8:	88fb      	ldrh	r3, [r7, #6]
 80134ea:	3302      	adds	r3, #2
 80134ec:	2b44      	cmp	r3, #68	; 0x44
 80134ee:	d906      	bls.n	80134fe <dhcp_option_short+0x26>
 80134f0:	4b0f      	ldr	r3, [pc, #60]	; (8013530 <dhcp_option_short+0x58>)
 80134f2:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80134f6:	490f      	ldr	r1, [pc, #60]	; (8013534 <dhcp_option_short+0x5c>)
 80134f8:	480f      	ldr	r0, [pc, #60]	; (8013538 <dhcp_option_short+0x60>)
 80134fa:	f003 f907 	bl	801670c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80134fe:	88bb      	ldrh	r3, [r7, #4]
 8013500:	0a1b      	lsrs	r3, r3, #8
 8013502:	b29a      	uxth	r2, r3
 8013504:	88fb      	ldrh	r3, [r7, #6]
 8013506:	1c59      	adds	r1, r3, #1
 8013508:	80f9      	strh	r1, [r7, #6]
 801350a:	4619      	mov	r1, r3
 801350c:	683b      	ldr	r3, [r7, #0]
 801350e:	440b      	add	r3, r1
 8013510:	b2d2      	uxtb	r2, r2
 8013512:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8013514:	88fb      	ldrh	r3, [r7, #6]
 8013516:	1c5a      	adds	r2, r3, #1
 8013518:	80fa      	strh	r2, [r7, #6]
 801351a:	461a      	mov	r2, r3
 801351c:	683b      	ldr	r3, [r7, #0]
 801351e:	4413      	add	r3, r2
 8013520:	88ba      	ldrh	r2, [r7, #4]
 8013522:	b2d2      	uxtb	r2, r2
 8013524:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013526:	88fb      	ldrh	r3, [r7, #6]
}
 8013528:	4618      	mov	r0, r3
 801352a:	3708      	adds	r7, #8
 801352c:	46bd      	mov	sp, r7
 801352e:	bd80      	pop	{r7, pc}
 8013530:	08019808 	.word	0x08019808
 8013534:	08019a18 	.word	0x08019a18
 8013538:	08019868 	.word	0x08019868

0801353c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801353c:	b580      	push	{r7, lr}
 801353e:	b084      	sub	sp, #16
 8013540:	af00      	add	r7, sp, #0
 8013542:	4603      	mov	r3, r0
 8013544:	60b9      	str	r1, [r7, #8]
 8013546:	607a      	str	r2, [r7, #4]
 8013548:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801354a:	89fb      	ldrh	r3, [r7, #14]
 801354c:	3304      	adds	r3, #4
 801354e:	2b44      	cmp	r3, #68	; 0x44
 8013550:	d906      	bls.n	8013560 <dhcp_option_long+0x24>
 8013552:	4b19      	ldr	r3, [pc, #100]	; (80135b8 <dhcp_option_long+0x7c>)
 8013554:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8013558:	4918      	ldr	r1, [pc, #96]	; (80135bc <dhcp_option_long+0x80>)
 801355a:	4819      	ldr	r0, [pc, #100]	; (80135c0 <dhcp_option_long+0x84>)
 801355c:	f003 f8d6 	bl	801670c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	0e1a      	lsrs	r2, r3, #24
 8013564:	89fb      	ldrh	r3, [r7, #14]
 8013566:	1c59      	adds	r1, r3, #1
 8013568:	81f9      	strh	r1, [r7, #14]
 801356a:	4619      	mov	r1, r3
 801356c:	68bb      	ldr	r3, [r7, #8]
 801356e:	440b      	add	r3, r1
 8013570:	b2d2      	uxtb	r2, r2
 8013572:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	0c1a      	lsrs	r2, r3, #16
 8013578:	89fb      	ldrh	r3, [r7, #14]
 801357a:	1c59      	adds	r1, r3, #1
 801357c:	81f9      	strh	r1, [r7, #14]
 801357e:	4619      	mov	r1, r3
 8013580:	68bb      	ldr	r3, [r7, #8]
 8013582:	440b      	add	r3, r1
 8013584:	b2d2      	uxtb	r2, r2
 8013586:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	0a1a      	lsrs	r2, r3, #8
 801358c:	89fb      	ldrh	r3, [r7, #14]
 801358e:	1c59      	adds	r1, r3, #1
 8013590:	81f9      	strh	r1, [r7, #14]
 8013592:	4619      	mov	r1, r3
 8013594:	68bb      	ldr	r3, [r7, #8]
 8013596:	440b      	add	r3, r1
 8013598:	b2d2      	uxtb	r2, r2
 801359a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801359c:	89fb      	ldrh	r3, [r7, #14]
 801359e:	1c5a      	adds	r2, r3, #1
 80135a0:	81fa      	strh	r2, [r7, #14]
 80135a2:	461a      	mov	r2, r3
 80135a4:	68bb      	ldr	r3, [r7, #8]
 80135a6:	4413      	add	r3, r2
 80135a8:	687a      	ldr	r2, [r7, #4]
 80135aa:	b2d2      	uxtb	r2, r2
 80135ac:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80135ae:	89fb      	ldrh	r3, [r7, #14]
}
 80135b0:	4618      	mov	r0, r3
 80135b2:	3710      	adds	r7, #16
 80135b4:	46bd      	mov	sp, r7
 80135b6:	bd80      	pop	{r7, pc}
 80135b8:	08019808 	.word	0x08019808
 80135bc:	08019a54 	.word	0x08019a54
 80135c0:	08019868 	.word	0x08019868

080135c4 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b090      	sub	sp, #64	; 0x40
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	6078      	str	r0, [r7, #4]
 80135cc:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80135ce:	2300      	movs	r3, #0
 80135d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 80135d2:	2300      	movs	r3, #0
 80135d4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80135d6:	2208      	movs	r2, #8
 80135d8:	2100      	movs	r1, #0
 80135da:	48be      	ldr	r0, [pc, #760]	; (80138d4 <dhcp_parse_reply+0x310>)
 80135dc:	f002 ffe6 	bl	80165ac <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	895b      	ldrh	r3, [r3, #10]
 80135e4:	2b2b      	cmp	r3, #43	; 0x2b
 80135e6:	d802      	bhi.n	80135ee <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80135e8:	f06f 0301 	mvn.w	r3, #1
 80135ec:	e2a8      	b.n	8013b40 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	685b      	ldr	r3, [r3, #4]
 80135f2:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80135f4:	23f0      	movs	r3, #240	; 0xf0
 80135f6:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	891b      	ldrh	r3, [r3, #8]
 80135fc:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013602:	e00c      	b.n	801361e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8013604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013606:	895b      	ldrh	r3, [r3, #10]
 8013608:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801360a:	1ad3      	subs	r3, r2, r3
 801360c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801360e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013610:	895b      	ldrh	r3, [r3, #10]
 8013612:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8013614:	1ad3      	subs	r3, r2, r3
 8013616:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8013618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801361e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013620:	2b00      	cmp	r3, #0
 8013622:	d004      	beq.n	801362e <dhcp_parse_reply+0x6a>
 8013624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013626:	895b      	ldrh	r3, [r3, #10]
 8013628:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801362a:	429a      	cmp	r2, r3
 801362c:	d2ea      	bcs.n	8013604 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801362e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013630:	2b00      	cmp	r3, #0
 8013632:	d102      	bne.n	801363a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8013634:	f06f 0301 	mvn.w	r3, #1
 8013638:	e282      	b.n	8013b40 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 801363a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801363c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801363e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013640:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8013642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013644:	685b      	ldr	r3, [r3, #4]
 8013646:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013648:	e23a      	b.n	8013ac0 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 801364a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801364c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801364e:	4413      	add	r3, r2
 8013650:	781b      	ldrb	r3, [r3, #0]
 8013652:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8013654:	2300      	movs	r3, #0
 8013656:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801365a:	f04f 33ff 	mov.w	r3, #4294967295
 801365e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8013660:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013662:	3302      	adds	r3, #2
 8013664:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8013666:	8bfa      	ldrh	r2, [r7, #30]
 8013668:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801366a:	429a      	cmp	r2, r3
 801366c:	d202      	bcs.n	8013674 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801366e:	f06f 0301 	mvn.w	r3, #1
 8013672:	e265      	b.n	8013b40 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8013674:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013676:	3301      	adds	r3, #1
 8013678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801367a:	8952      	ldrh	r2, [r2, #10]
 801367c:	4293      	cmp	r3, r2
 801367e:	da07      	bge.n	8013690 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8013680:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013682:	3301      	adds	r3, #1
 8013684:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013686:	4413      	add	r3, r2
 8013688:	781b      	ldrb	r3, [r3, #0]
 801368a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801368e:	e00b      	b.n	80136a8 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8013690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d004      	beq.n	80136a2 <dhcp_parse_reply+0xde>
 8013698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	685b      	ldr	r3, [r3, #4]
 801369e:	781b      	ldrb	r3, [r3, #0]
 80136a0:	e000      	b.n	80136a4 <dhcp_parse_reply+0xe0>
 80136a2:	2300      	movs	r3, #0
 80136a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80136a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80136ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 80136b0:	7dfb      	ldrb	r3, [r7, #23]
 80136b2:	2b3b      	cmp	r3, #59	; 0x3b
 80136b4:	f200 812d 	bhi.w	8013912 <dhcp_parse_reply+0x34e>
 80136b8:	a201      	add	r2, pc, #4	; (adr r2, 80136c0 <dhcp_parse_reply+0xfc>)
 80136ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136be:	bf00      	nop
 80136c0:	080137b1 	.word	0x080137b1
 80136c4:	080137c1 	.word	0x080137c1
 80136c8:	08013913 	.word	0x08013913
 80136cc:	080137e3 	.word	0x080137e3
 80136d0:	08013913 	.word	0x08013913
 80136d4:	08013913 	.word	0x08013913
 80136d8:	08013913 	.word	0x08013913
 80136dc:	08013913 	.word	0x08013913
 80136e0:	08013913 	.word	0x08013913
 80136e4:	08013913 	.word	0x08013913
 80136e8:	08013913 	.word	0x08013913
 80136ec:	08013913 	.word	0x08013913
 80136f0:	08013913 	.word	0x08013913
 80136f4:	08013913 	.word	0x08013913
 80136f8:	08013913 	.word	0x08013913
 80136fc:	08013913 	.word	0x08013913
 8013700:	08013913 	.word	0x08013913
 8013704:	08013913 	.word	0x08013913
 8013708:	08013913 	.word	0x08013913
 801370c:	08013913 	.word	0x08013913
 8013710:	08013913 	.word	0x08013913
 8013714:	08013913 	.word	0x08013913
 8013718:	08013913 	.word	0x08013913
 801371c:	08013913 	.word	0x08013913
 8013720:	08013913 	.word	0x08013913
 8013724:	08013913 	.word	0x08013913
 8013728:	08013913 	.word	0x08013913
 801372c:	08013913 	.word	0x08013913
 8013730:	08013913 	.word	0x08013913
 8013734:	08013913 	.word	0x08013913
 8013738:	08013913 	.word	0x08013913
 801373c:	08013913 	.word	0x08013913
 8013740:	08013913 	.word	0x08013913
 8013744:	08013913 	.word	0x08013913
 8013748:	08013913 	.word	0x08013913
 801374c:	08013913 	.word	0x08013913
 8013750:	08013913 	.word	0x08013913
 8013754:	08013913 	.word	0x08013913
 8013758:	08013913 	.word	0x08013913
 801375c:	08013913 	.word	0x08013913
 8013760:	08013913 	.word	0x08013913
 8013764:	08013913 	.word	0x08013913
 8013768:	08013913 	.word	0x08013913
 801376c:	08013913 	.word	0x08013913
 8013770:	08013913 	.word	0x08013913
 8013774:	08013913 	.word	0x08013913
 8013778:	08013913 	.word	0x08013913
 801377c:	08013913 	.word	0x08013913
 8013780:	08013913 	.word	0x08013913
 8013784:	08013913 	.word	0x08013913
 8013788:	08013913 	.word	0x08013913
 801378c:	0801380f 	.word	0x0801380f
 8013790:	08013831 	.word	0x08013831
 8013794:	0801386d 	.word	0x0801386d
 8013798:	0801388f 	.word	0x0801388f
 801379c:	08013913 	.word	0x08013913
 80137a0:	08013913 	.word	0x08013913
 80137a4:	08013913 	.word	0x08013913
 80137a8:	080138b1 	.word	0x080138b1
 80137ac:	080138f1 	.word	0x080138f1
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80137b0:	2300      	movs	r3, #0
 80137b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80137b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80137ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80137be:	e0ac      	b.n	801391a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80137c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80137c4:	2b04      	cmp	r3, #4
 80137c6:	d009      	beq.n	80137dc <dhcp_parse_reply+0x218>
 80137c8:	4b43      	ldr	r3, [pc, #268]	; (80138d8 <dhcp_parse_reply+0x314>)
 80137ca:	f240 622e 	movw	r2, #1582	; 0x62e
 80137ce:	4943      	ldr	r1, [pc, #268]	; (80138dc <dhcp_parse_reply+0x318>)
 80137d0:	4843      	ldr	r0, [pc, #268]	; (80138e0 <dhcp_parse_reply+0x31c>)
 80137d2:	f002 ff9b 	bl	801670c <iprintf>
 80137d6:	f06f 0305 	mvn.w	r3, #5
 80137da:	e1b1      	b.n	8013b40 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80137dc:	2306      	movs	r3, #6
 80137de:	623b      	str	r3, [r7, #32]
        break;
 80137e0:	e09b      	b.n	801391a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80137e2:	2304      	movs	r3, #4
 80137e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80137e8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80137ec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80137f0:	429a      	cmp	r2, r3
 80137f2:	d209      	bcs.n	8013808 <dhcp_parse_reply+0x244>
 80137f4:	4b38      	ldr	r3, [pc, #224]	; (80138d8 <dhcp_parse_reply+0x314>)
 80137f6:	f240 6233 	movw	r2, #1587	; 0x633
 80137fa:	493a      	ldr	r1, [pc, #232]	; (80138e4 <dhcp_parse_reply+0x320>)
 80137fc:	4838      	ldr	r0, [pc, #224]	; (80138e0 <dhcp_parse_reply+0x31c>)
 80137fe:	f002 ff85 	bl	801670c <iprintf>
 8013802:	f06f 0305 	mvn.w	r3, #5
 8013806:	e19b      	b.n	8013b40 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8013808:	2307      	movs	r3, #7
 801380a:	623b      	str	r3, [r7, #32]
        break;
 801380c:	e085      	b.n	801391a <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801380e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013812:	2b04      	cmp	r3, #4
 8013814:	d009      	beq.n	801382a <dhcp_parse_reply+0x266>
 8013816:	4b30      	ldr	r3, [pc, #192]	; (80138d8 <dhcp_parse_reply+0x314>)
 8013818:	f240 6241 	movw	r2, #1601	; 0x641
 801381c:	492f      	ldr	r1, [pc, #188]	; (80138dc <dhcp_parse_reply+0x318>)
 801381e:	4830      	ldr	r0, [pc, #192]	; (80138e0 <dhcp_parse_reply+0x31c>)
 8013820:	f002 ff74 	bl	801670c <iprintf>
 8013824:	f06f 0305 	mvn.w	r3, #5
 8013828:	e18a      	b.n	8013b40 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801382a:	2303      	movs	r3, #3
 801382c:	623b      	str	r3, [r7, #32]
        break;
 801382e:	e074      	b.n	801391a <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013834:	2b01      	cmp	r3, #1
 8013836:	d009      	beq.n	801384c <dhcp_parse_reply+0x288>
 8013838:	4b27      	ldr	r3, [pc, #156]	; (80138d8 <dhcp_parse_reply+0x314>)
 801383a:	f240 624f 	movw	r2, #1615	; 0x64f
 801383e:	492a      	ldr	r1, [pc, #168]	; (80138e8 <dhcp_parse_reply+0x324>)
 8013840:	4827      	ldr	r0, [pc, #156]	; (80138e0 <dhcp_parse_reply+0x31c>)
 8013842:	f002 ff63 	bl	801670c <iprintf>
 8013846:	f06f 0305 	mvn.w	r3, #5
 801384a:	e179      	b.n	8013b40 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801384c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801384e:	2bf0      	cmp	r3, #240	; 0xf0
 8013850:	d009      	beq.n	8013866 <dhcp_parse_reply+0x2a2>
 8013852:	4b21      	ldr	r3, [pc, #132]	; (80138d8 <dhcp_parse_reply+0x314>)
 8013854:	f240 6251 	movw	r2, #1617	; 0x651
 8013858:	4924      	ldr	r1, [pc, #144]	; (80138ec <dhcp_parse_reply+0x328>)
 801385a:	4821      	ldr	r0, [pc, #132]	; (80138e0 <dhcp_parse_reply+0x31c>)
 801385c:	f002 ff56 	bl	801670c <iprintf>
 8013860:	f06f 0305 	mvn.w	r3, #5
 8013864:	e16c      	b.n	8013b40 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8013866:	2300      	movs	r3, #0
 8013868:	623b      	str	r3, [r7, #32]
        break;
 801386a:	e056      	b.n	801391a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801386c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013870:	2b01      	cmp	r3, #1
 8013872:	d009      	beq.n	8013888 <dhcp_parse_reply+0x2c4>
 8013874:	4b18      	ldr	r3, [pc, #96]	; (80138d8 <dhcp_parse_reply+0x314>)
 8013876:	f240 6255 	movw	r2, #1621	; 0x655
 801387a:	491b      	ldr	r1, [pc, #108]	; (80138e8 <dhcp_parse_reply+0x324>)
 801387c:	4818      	ldr	r0, [pc, #96]	; (80138e0 <dhcp_parse_reply+0x31c>)
 801387e:	f002 ff45 	bl	801670c <iprintf>
 8013882:	f06f 0305 	mvn.w	r3, #5
 8013886:	e15b      	b.n	8013b40 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8013888:	2301      	movs	r3, #1
 801388a:	623b      	str	r3, [r7, #32]
        break;
 801388c:	e045      	b.n	801391a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801388e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013892:	2b04      	cmp	r3, #4
 8013894:	d009      	beq.n	80138aa <dhcp_parse_reply+0x2e6>
 8013896:	4b10      	ldr	r3, [pc, #64]	; (80138d8 <dhcp_parse_reply+0x314>)
 8013898:	f240 6259 	movw	r2, #1625	; 0x659
 801389c:	490f      	ldr	r1, [pc, #60]	; (80138dc <dhcp_parse_reply+0x318>)
 801389e:	4810      	ldr	r0, [pc, #64]	; (80138e0 <dhcp_parse_reply+0x31c>)
 80138a0:	f002 ff34 	bl	801670c <iprintf>
 80138a4:	f06f 0305 	mvn.w	r3, #5
 80138a8:	e14a      	b.n	8013b40 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80138aa:	2302      	movs	r3, #2
 80138ac:	623b      	str	r3, [r7, #32]
        break;
 80138ae:	e034      	b.n	801391a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80138b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80138b4:	2b04      	cmp	r3, #4
 80138b6:	d009      	beq.n	80138cc <dhcp_parse_reply+0x308>
 80138b8:	4b07      	ldr	r3, [pc, #28]	; (80138d8 <dhcp_parse_reply+0x314>)
 80138ba:	f240 625d 	movw	r2, #1629	; 0x65d
 80138be:	4907      	ldr	r1, [pc, #28]	; (80138dc <dhcp_parse_reply+0x318>)
 80138c0:	4807      	ldr	r0, [pc, #28]	; (80138e0 <dhcp_parse_reply+0x31c>)
 80138c2:	f002 ff23 	bl	801670c <iprintf>
 80138c6:	f06f 0305 	mvn.w	r3, #5
 80138ca:	e139      	b.n	8013b40 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 80138cc:	2304      	movs	r3, #4
 80138ce:	623b      	str	r3, [r7, #32]
        break;
 80138d0:	e023      	b.n	801391a <dhcp_parse_reply+0x356>
 80138d2:	bf00      	nop
 80138d4:	20007b18 	.word	0x20007b18
 80138d8:	08019808 	.word	0x08019808
 80138dc:	08019a90 	.word	0x08019a90
 80138e0:	08019868 	.word	0x08019868
 80138e4:	08019a9c 	.word	0x08019a9c
 80138e8:	08019ab0 	.word	0x08019ab0
 80138ec:	08019abc 	.word	0x08019abc
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80138f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80138f4:	2b04      	cmp	r3, #4
 80138f6:	d009      	beq.n	801390c <dhcp_parse_reply+0x348>
 80138f8:	4b93      	ldr	r3, [pc, #588]	; (8013b48 <dhcp_parse_reply+0x584>)
 80138fa:	f240 6261 	movw	r2, #1633	; 0x661
 80138fe:	4993      	ldr	r1, [pc, #588]	; (8013b4c <dhcp_parse_reply+0x588>)
 8013900:	4893      	ldr	r0, [pc, #588]	; (8013b50 <dhcp_parse_reply+0x58c>)
 8013902:	f002 ff03 	bl	801670c <iprintf>
 8013906:	f06f 0305 	mvn.w	r3, #5
 801390a:	e119      	b.n	8013b40 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 801390c:	2305      	movs	r3, #5
 801390e:	623b      	str	r3, [r7, #32]
        break;
 8013910:	e003      	b.n	801391a <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8013912:	2300      	movs	r3, #0
 8013914:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8013918:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801391a:	7dfb      	ldrb	r3, [r7, #23]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d103      	bne.n	8013928 <dhcp_parse_reply+0x364>
      offset++;
 8013920:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013922:	3301      	adds	r3, #1
 8013924:	877b      	strh	r3, [r7, #58]	; 0x3a
 8013926:	e0a1      	b.n	8013a6c <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8013928:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801392a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801392e:	4413      	add	r3, r2
 8013930:	3302      	adds	r3, #2
 8013932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013936:	db02      	blt.n	801393e <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8013938:	f06f 0301 	mvn.w	r3, #1
 801393c:	e100      	b.n	8013b40 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 801393e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013942:	b29a      	uxth	r2, r3
 8013944:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013946:	4413      	add	r3, r2
 8013948:	b29b      	uxth	r3, r3
 801394a:	3302      	adds	r3, #2
 801394c:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801394e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013952:	2b00      	cmp	r3, #0
 8013954:	f000 808a 	beq.w	8013a6c <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8013958:	2300      	movs	r3, #0
 801395a:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801395c:	6a3b      	ldr	r3, [r7, #32]
 801395e:	2b00      	cmp	r3, #0
 8013960:	db02      	blt.n	8013968 <dhcp_parse_reply+0x3a4>
 8013962:	6a3b      	ldr	r3, [r7, #32]
 8013964:	2b07      	cmp	r3, #7
 8013966:	dd06      	ble.n	8013976 <dhcp_parse_reply+0x3b2>
 8013968:	4b77      	ldr	r3, [pc, #476]	; (8013b48 <dhcp_parse_reply+0x584>)
 801396a:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801396e:	4979      	ldr	r1, [pc, #484]	; (8013b54 <dhcp_parse_reply+0x590>)
 8013970:	4877      	ldr	r0, [pc, #476]	; (8013b50 <dhcp_parse_reply+0x58c>)
 8013972:	f002 fecb 	bl	801670c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8013976:	4a78      	ldr	r2, [pc, #480]	; (8013b58 <dhcp_parse_reply+0x594>)
 8013978:	6a3b      	ldr	r3, [r7, #32]
 801397a:	4413      	add	r3, r2
 801397c:	781b      	ldrb	r3, [r3, #0]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d174      	bne.n	8013a6c <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8013982:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013986:	2b04      	cmp	r3, #4
 8013988:	bf28      	it	cs
 801398a:	2304      	movcs	r3, #4
 801398c:	b2db      	uxtb	r3, r3
 801398e:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8013990:	8bfb      	ldrh	r3, [r7, #30]
 8013992:	8aba      	ldrh	r2, [r7, #20]
 8013994:	f107 0108 	add.w	r1, r7, #8
 8013998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801399a:	f7f8 fc2b 	bl	800c1f4 <pbuf_copy_partial>
 801399e:	4603      	mov	r3, r0
 80139a0:	461a      	mov	r2, r3
 80139a2:	8abb      	ldrh	r3, [r7, #20]
 80139a4:	4293      	cmp	r3, r2
 80139a6:	d002      	beq.n	80139ae <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 80139a8:	f06f 0301 	mvn.w	r3, #1
 80139ac:	e0c8      	b.n	8013b40 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 80139ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80139b2:	2b04      	cmp	r3, #4
 80139b4:	d933      	bls.n	8013a1e <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80139b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80139ba:	f003 0303 	and.w	r3, r3, #3
 80139be:	b2db      	uxtb	r3, r3
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d009      	beq.n	80139d8 <dhcp_parse_reply+0x414>
 80139c4:	4b60      	ldr	r3, [pc, #384]	; (8013b48 <dhcp_parse_reply+0x584>)
 80139c6:	f240 6281 	movw	r2, #1665	; 0x681
 80139ca:	4964      	ldr	r1, [pc, #400]	; (8013b5c <dhcp_parse_reply+0x598>)
 80139cc:	4860      	ldr	r0, [pc, #384]	; (8013b50 <dhcp_parse_reply+0x58c>)
 80139ce:	f002 fe9d 	bl	801670c <iprintf>
 80139d2:	f06f 0305 	mvn.w	r3, #5
 80139d6:	e0b3      	b.n	8013b40 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 80139d8:	4a5f      	ldr	r2, [pc, #380]	; (8013b58 <dhcp_parse_reply+0x594>)
 80139da:	6a3b      	ldr	r3, [r7, #32]
 80139dc:	4413      	add	r3, r2
 80139de:	2201      	movs	r2, #1
 80139e0:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80139e2:	68bb      	ldr	r3, [r7, #8]
 80139e4:	4618      	mov	r0, r3
 80139e6:	f7f6 ff7f 	bl	800a8e8 <lwip_htonl>
 80139ea:	4601      	mov	r1, r0
 80139ec:	4a5c      	ldr	r2, [pc, #368]	; (8013b60 <dhcp_parse_reply+0x59c>)
 80139ee:	6a3b      	ldr	r3, [r7, #32]
 80139f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80139f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80139f8:	3b04      	subs	r3, #4
 80139fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80139fe:	8bfb      	ldrh	r3, [r7, #30]
 8013a00:	3304      	adds	r3, #4
 8013a02:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8013a04:	8a7a      	ldrh	r2, [r7, #18]
 8013a06:	8bfb      	ldrh	r3, [r7, #30]
 8013a08:	429a      	cmp	r2, r3
 8013a0a:	d202      	bcs.n	8013a12 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8013a0c:	f06f 0301 	mvn.w	r3, #1
 8013a10:	e096      	b.n	8013b40 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8013a12:	8a7b      	ldrh	r3, [r7, #18]
 8013a14:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8013a16:	6a3b      	ldr	r3, [r7, #32]
 8013a18:	3301      	adds	r3, #1
 8013a1a:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8013a1c:	e79e      	b.n	801395c <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8013a1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013a22:	2b04      	cmp	r3, #4
 8013a24:	d106      	bne.n	8013a34 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8013a26:	68bb      	ldr	r3, [r7, #8]
 8013a28:	4618      	mov	r0, r3
 8013a2a:	f7f6 ff5d 	bl	800a8e8 <lwip_htonl>
 8013a2e:	4603      	mov	r3, r0
 8013a30:	60bb      	str	r3, [r7, #8]
 8013a32:	e011      	b.n	8013a58 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8013a34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013a38:	2b01      	cmp	r3, #1
 8013a3a:	d009      	beq.n	8013a50 <dhcp_parse_reply+0x48c>
 8013a3c:	4b42      	ldr	r3, [pc, #264]	; (8013b48 <dhcp_parse_reply+0x584>)
 8013a3e:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8013a42:	4948      	ldr	r1, [pc, #288]	; (8013b64 <dhcp_parse_reply+0x5a0>)
 8013a44:	4842      	ldr	r0, [pc, #264]	; (8013b50 <dhcp_parse_reply+0x58c>)
 8013a46:	f002 fe61 	bl	801670c <iprintf>
 8013a4a:	f06f 0305 	mvn.w	r3, #5
 8013a4e:	e077      	b.n	8013b40 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8013a50:	f107 0308 	add.w	r3, r7, #8
 8013a54:	781b      	ldrb	r3, [r3, #0]
 8013a56:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8013a58:	4a3f      	ldr	r2, [pc, #252]	; (8013b58 <dhcp_parse_reply+0x594>)
 8013a5a:	6a3b      	ldr	r3, [r7, #32]
 8013a5c:	4413      	add	r3, r2
 8013a5e:	2201      	movs	r2, #1
 8013a60:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8013a62:	68ba      	ldr	r2, [r7, #8]
 8013a64:	493e      	ldr	r1, [pc, #248]	; (8013b60 <dhcp_parse_reply+0x59c>)
 8013a66:	6a3b      	ldr	r3, [r7, #32]
 8013a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8013a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a6e:	895b      	ldrh	r3, [r3, #10]
 8013a70:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013a72:	429a      	cmp	r2, r3
 8013a74:	d324      	bcc.n	8013ac0 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8013a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a78:	895b      	ldrh	r3, [r3, #10]
 8013a7a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013a7c:	1ad3      	subs	r3, r2, r3
 8013a7e:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8013a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a82:	895b      	ldrh	r3, [r3, #10]
 8013a84:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8013a86:	1ad3      	subs	r3, r2, r3
 8013a88:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8013a8a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013a8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013a8e:	429a      	cmp	r2, r3
 8013a90:	d213      	bcs.n	8013aba <dhcp_parse_reply+0x4f6>
        q = q->next;
 8013a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8013a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d109      	bne.n	8013ab2 <dhcp_parse_reply+0x4ee>
 8013a9e:	4b2a      	ldr	r3, [pc, #168]	; (8013b48 <dhcp_parse_reply+0x584>)
 8013aa0:	f240 629d 	movw	r2, #1693	; 0x69d
 8013aa4:	4930      	ldr	r1, [pc, #192]	; (8013b68 <dhcp_parse_reply+0x5a4>)
 8013aa6:	482a      	ldr	r0, [pc, #168]	; (8013b50 <dhcp_parse_reply+0x58c>)
 8013aa8:	f002 fe30 	bl	801670c <iprintf>
 8013aac:	f06f 0305 	mvn.w	r3, #5
 8013ab0:	e046      	b.n	8013b40 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8013ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ab4:	685b      	ldr	r3, [r3, #4]
 8013ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013ab8:	e002      	b.n	8013ac0 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8013aba:	f06f 0301 	mvn.w	r3, #1
 8013abe:	e03f      	b.n	8013b40 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d00a      	beq.n	8013adc <dhcp_parse_reply+0x518>
 8013ac6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013ac8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013aca:	429a      	cmp	r2, r3
 8013acc:	d206      	bcs.n	8013adc <dhcp_parse_reply+0x518>
 8013ace:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013ad0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013ad2:	4413      	add	r3, r2
 8013ad4:	781b      	ldrb	r3, [r3, #0]
 8013ad6:	2bff      	cmp	r3, #255	; 0xff
 8013ad8:	f47f adb7 	bne.w	801364a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8013adc:	4b1e      	ldr	r3, [pc, #120]	; (8013b58 <dhcp_parse_reply+0x594>)
 8013ade:	781b      	ldrb	r3, [r3, #0]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d018      	beq.n	8013b16 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8013ae4:	4b1e      	ldr	r3, [pc, #120]	; (8013b60 <dhcp_parse_reply+0x59c>)
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8013aea:	4b1b      	ldr	r3, [pc, #108]	; (8013b58 <dhcp_parse_reply+0x594>)
 8013aec:	2200      	movs	r2, #0
 8013aee:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	2b01      	cmp	r3, #1
 8013af4:	d102      	bne.n	8013afc <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8013af6:	2301      	movs	r3, #1
 8013af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013afa:	e00c      	b.n	8013b16 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	2b02      	cmp	r3, #2
 8013b00:	d102      	bne.n	8013b08 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8013b02:	2301      	movs	r3, #1
 8013b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8013b06:	e006      	b.n	8013b16 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	2b03      	cmp	r3, #3
 8013b0c:	d103      	bne.n	8013b16 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8013b0e:	2301      	movs	r3, #1
 8013b10:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8013b12:	2301      	movs	r3, #1
 8013b14:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8013b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d006      	beq.n	8013b2a <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8013b20:	236c      	movs	r3, #108	; 0x6c
 8013b22:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8013b24:	23ec      	movs	r3, #236	; 0xec
 8013b26:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8013b28:	e569      	b.n	80135fe <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8013b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d006      	beq.n	8013b3e <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8013b30:	2300      	movs	r3, #0
 8013b32:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8013b34:	232c      	movs	r3, #44	; 0x2c
 8013b36:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8013b38:	236c      	movs	r3, #108	; 0x6c
 8013b3a:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8013b3c:	e55f      	b.n	80135fe <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8013b3e:	2300      	movs	r3, #0
}
 8013b40:	4618      	mov	r0, r3
 8013b42:	3740      	adds	r7, #64	; 0x40
 8013b44:	46bd      	mov	sp, r7
 8013b46:	bd80      	pop	{r7, pc}
 8013b48:	08019808 	.word	0x08019808
 8013b4c:	08019a90 	.word	0x08019a90
 8013b50:	08019868 	.word	0x08019868
 8013b54:	08019ad4 	.word	0x08019ad4
 8013b58:	20007b18 	.word	0x20007b18
 8013b5c:	08019ae8 	.word	0x08019ae8
 8013b60:	20007b20 	.word	0x20007b20
 8013b64:	08019b00 	.word	0x08019b00
 8013b68:	08019b14 	.word	0x08019b14

08013b6c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8013b6c:	b580      	push	{r7, lr}
 8013b6e:	b08a      	sub	sp, #40	; 0x28
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	60f8      	str	r0, [r7, #12]
 8013b74:	60b9      	str	r1, [r7, #8]
 8013b76:	607a      	str	r2, [r7, #4]
 8013b78:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8013b7a:	4b5f      	ldr	r3, [pc, #380]	; (8013cf8 <dhcp_recv+0x18c>)
 8013b7c:	685b      	ldr	r3, [r3, #4]
 8013b7e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013b80:	6a3b      	ldr	r3, [r7, #32]
 8013b82:	6a1b      	ldr	r3, [r3, #32]
 8013b84:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	685b      	ldr	r3, [r3, #4]
 8013b8a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8013b8c:	69fb      	ldr	r3, [r7, #28]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	f000 809d 	beq.w	8013cce <dhcp_recv+0x162>
 8013b94:	69fb      	ldr	r3, [r7, #28]
 8013b96:	791b      	ldrb	r3, [r3, #4]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	f000 8098 	beq.w	8013cce <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	895b      	ldrh	r3, [r3, #10]
 8013ba2:	2b2b      	cmp	r3, #43	; 0x2b
 8013ba4:	f240 8095 	bls.w	8013cd2 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8013ba8:	69bb      	ldr	r3, [r7, #24]
 8013baa:	781b      	ldrb	r3, [r3, #0]
 8013bac:	2b02      	cmp	r3, #2
 8013bae:	f040 8092 	bne.w	8013cd6 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013bb8:	e012      	b.n	8013be0 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8013bba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013bbe:	6a3a      	ldr	r2, [r7, #32]
 8013bc0:	4413      	add	r3, r2
 8013bc2:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8013bc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013bca:	69b9      	ldr	r1, [r7, #24]
 8013bcc:	440b      	add	r3, r1
 8013bce:	7f1b      	ldrb	r3, [r3, #28]
 8013bd0:	429a      	cmp	r2, r3
 8013bd2:	f040 8082 	bne.w	8013cda <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013bd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013bda:	3301      	adds	r3, #1
 8013bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013be0:	6a3b      	ldr	r3, [r7, #32]
 8013be2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013be6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013bea:	429a      	cmp	r2, r3
 8013bec:	d203      	bcs.n	8013bf6 <dhcp_recv+0x8a>
 8013bee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013bf2:	2b05      	cmp	r3, #5
 8013bf4:	d9e1      	bls.n	8013bba <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8013bf6:	69bb      	ldr	r3, [r7, #24]
 8013bf8:	685b      	ldr	r3, [r3, #4]
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	f7f6 fe74 	bl	800a8e8 <lwip_htonl>
 8013c00:	4602      	mov	r2, r0
 8013c02:	69fb      	ldr	r3, [r7, #28]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	429a      	cmp	r2, r3
 8013c08:	d169      	bne.n	8013cde <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8013c0a:	69f9      	ldr	r1, [r7, #28]
 8013c0c:	6878      	ldr	r0, [r7, #4]
 8013c0e:	f7ff fcd9 	bl	80135c4 <dhcp_parse_reply>
 8013c12:	4603      	mov	r3, r0
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d164      	bne.n	8013ce2 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8013c18:	4b38      	ldr	r3, [pc, #224]	; (8013cfc <dhcp_recv+0x190>)
 8013c1a:	785b      	ldrb	r3, [r3, #1]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d062      	beq.n	8013ce6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	685b      	ldr	r3, [r3, #4]
 8013c24:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8013c26:	4b36      	ldr	r3, [pc, #216]	; (8013d00 <dhcp_recv+0x194>)
 8013c28:	685b      	ldr	r3, [r3, #4]
 8013c2a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8013c2c:	7cfb      	ldrb	r3, [r7, #19]
 8013c2e:	2b05      	cmp	r3, #5
 8013c30:	d12a      	bne.n	8013c88 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013c32:	69fb      	ldr	r3, [r7, #28]
 8013c34:	795b      	ldrb	r3, [r3, #5]
 8013c36:	2b01      	cmp	r3, #1
 8013c38:	d112      	bne.n	8013c60 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8013c3a:	6979      	ldr	r1, [r7, #20]
 8013c3c:	6a38      	ldr	r0, [r7, #32]
 8013c3e:	f7fe fe53 	bl	80128e8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8013c42:	6a3b      	ldr	r3, [r7, #32]
 8013c44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013c48:	f003 0308 	and.w	r3, r3, #8
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d003      	beq.n	8013c58 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8013c50:	6a38      	ldr	r0, [r7, #32]
 8013c52:	f7fe fbc3 	bl	80123dc <dhcp_check>
 8013c56:	e047      	b.n	8013ce8 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8013c58:	6a38      	ldr	r0, [r7, #32]
 8013c5a:	f7ff f867 	bl	8012d2c <dhcp_bind>
 8013c5e:	e043      	b.n	8013ce8 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8013c60:	69fb      	ldr	r3, [r7, #28]
 8013c62:	795b      	ldrb	r3, [r3, #5]
 8013c64:	2b03      	cmp	r3, #3
 8013c66:	d007      	beq.n	8013c78 <dhcp_recv+0x10c>
 8013c68:	69fb      	ldr	r3, [r7, #28]
 8013c6a:	795b      	ldrb	r3, [r3, #5]
 8013c6c:	2b04      	cmp	r3, #4
 8013c6e:	d003      	beq.n	8013c78 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8013c70:	69fb      	ldr	r3, [r7, #28]
 8013c72:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8013c74:	2b05      	cmp	r3, #5
 8013c76:	d137      	bne.n	8013ce8 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 8013c78:	6979      	ldr	r1, [r7, #20]
 8013c7a:	6a38      	ldr	r0, [r7, #32]
 8013c7c:	f7fe fe34 	bl	80128e8 <dhcp_handle_ack>
      dhcp_bind(netif);
 8013c80:	6a38      	ldr	r0, [r7, #32]
 8013c82:	f7ff f853 	bl	8012d2c <dhcp_bind>
 8013c86:	e02f      	b.n	8013ce8 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8013c88:	7cfb      	ldrb	r3, [r7, #19]
 8013c8a:	2b06      	cmp	r3, #6
 8013c8c:	d113      	bne.n	8013cb6 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013c8e:	69fb      	ldr	r3, [r7, #28]
 8013c90:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8013c92:	2b03      	cmp	r3, #3
 8013c94:	d00b      	beq.n	8013cae <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013c96:	69fb      	ldr	r3, [r7, #28]
 8013c98:	795b      	ldrb	r3, [r3, #5]
 8013c9a:	2b01      	cmp	r3, #1
 8013c9c:	d007      	beq.n	8013cae <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013c9e:	69fb      	ldr	r3, [r7, #28]
 8013ca0:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013ca2:	2b04      	cmp	r3, #4
 8013ca4:	d003      	beq.n	8013cae <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013ca6:	69fb      	ldr	r3, [r7, #28]
 8013ca8:	795b      	ldrb	r3, [r3, #5]
 8013caa:	2b05      	cmp	r3, #5
 8013cac:	d103      	bne.n	8013cb6 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8013cae:	6a38      	ldr	r0, [r7, #32]
 8013cb0:	f7fe fb7a 	bl	80123a8 <dhcp_handle_nak>
 8013cb4:	e018      	b.n	8013ce8 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8013cb6:	7cfb      	ldrb	r3, [r7, #19]
 8013cb8:	2b02      	cmp	r3, #2
 8013cba:	d108      	bne.n	8013cce <dhcp_recv+0x162>
 8013cbc:	69fb      	ldr	r3, [r7, #28]
 8013cbe:	795b      	ldrb	r3, [r3, #5]
 8013cc0:	2b06      	cmp	r3, #6
 8013cc2:	d104      	bne.n	8013cce <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8013cc4:	6979      	ldr	r1, [r7, #20]
 8013cc6:	6a38      	ldr	r0, [r7, #32]
 8013cc8:	f7fe fbbc 	bl	8012444 <dhcp_handle_offer>
 8013ccc:	e00c      	b.n	8013ce8 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 8013cce:	bf00      	nop
 8013cd0:	e00a      	b.n	8013ce8 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8013cd2:	bf00      	nop
 8013cd4:	e008      	b.n	8013ce8 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8013cd6:	bf00      	nop
 8013cd8:	e006      	b.n	8013ce8 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 8013cda:	bf00      	nop
 8013cdc:	e004      	b.n	8013ce8 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8013cde:	bf00      	nop
 8013ce0:	e002      	b.n	8013ce8 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8013ce2:	bf00      	nop
 8013ce4:	e000      	b.n	8013ce8 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8013ce6:	bf00      	nop
  pbuf_free(p);
 8013ce8:	6878      	ldr	r0, [r7, #4]
 8013cea:	f7f8 f889 	bl	800be00 <pbuf_free>
}
 8013cee:	bf00      	nop
 8013cf0:	3728      	adds	r7, #40	; 0x28
 8013cf2:	46bd      	mov	sp, r7
 8013cf4:	bd80      	pop	{r7, pc}
 8013cf6:	bf00      	nop
 8013cf8:	20004598 	.word	0x20004598
 8013cfc:	20007b18 	.word	0x20007b18
 8013d00:	20007b20 	.word	0x20007b20

08013d04 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b088      	sub	sp, #32
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	60f8      	str	r0, [r7, #12]
 8013d0c:	60b9      	str	r1, [r7, #8]
 8013d0e:	603b      	str	r3, [r7, #0]
 8013d10:	4613      	mov	r3, r2
 8013d12:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d108      	bne.n	8013d2c <dhcp_create_msg+0x28>
 8013d1a:	4b5f      	ldr	r3, [pc, #380]	; (8013e98 <dhcp_create_msg+0x194>)
 8013d1c:	f240 7269 	movw	r2, #1897	; 0x769
 8013d20:	495e      	ldr	r1, [pc, #376]	; (8013e9c <dhcp_create_msg+0x198>)
 8013d22:	485f      	ldr	r0, [pc, #380]	; (8013ea0 <dhcp_create_msg+0x19c>)
 8013d24:	f002 fcf2 	bl	801670c <iprintf>
 8013d28:	2300      	movs	r3, #0
 8013d2a:	e0b1      	b.n	8013e90 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8013d2c:	68bb      	ldr	r3, [r7, #8]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d108      	bne.n	8013d44 <dhcp_create_msg+0x40>
 8013d32:	4b59      	ldr	r3, [pc, #356]	; (8013e98 <dhcp_create_msg+0x194>)
 8013d34:	f240 726a 	movw	r2, #1898	; 0x76a
 8013d38:	495a      	ldr	r1, [pc, #360]	; (8013ea4 <dhcp_create_msg+0x1a0>)
 8013d3a:	4859      	ldr	r0, [pc, #356]	; (8013ea0 <dhcp_create_msg+0x19c>)
 8013d3c:	f002 fce6 	bl	801670c <iprintf>
 8013d40:	2300      	movs	r3, #0
 8013d42:	e0a5      	b.n	8013e90 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8013d44:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013d48:	f44f 719a 	mov.w	r1, #308	; 0x134
 8013d4c:	2036      	movs	r0, #54	; 0x36
 8013d4e:	f7f7 fd77 	bl	800b840 <pbuf_alloc>
 8013d52:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8013d54:	69bb      	ldr	r3, [r7, #24]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d101      	bne.n	8013d5e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	e098      	b.n	8013e90 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8013d5e:	69bb      	ldr	r3, [r7, #24]
 8013d60:	895b      	ldrh	r3, [r3, #10]
 8013d62:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8013d66:	d206      	bcs.n	8013d76 <dhcp_create_msg+0x72>
 8013d68:	4b4b      	ldr	r3, [pc, #300]	; (8013e98 <dhcp_create_msg+0x194>)
 8013d6a:	f240 7272 	movw	r2, #1906	; 0x772
 8013d6e:	494e      	ldr	r1, [pc, #312]	; (8013ea8 <dhcp_create_msg+0x1a4>)
 8013d70:	484b      	ldr	r0, [pc, #300]	; (8013ea0 <dhcp_create_msg+0x19c>)
 8013d72:	f002 fccb 	bl	801670c <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8013d76:	79fb      	ldrb	r3, [r7, #7]
 8013d78:	2b03      	cmp	r3, #3
 8013d7a:	d103      	bne.n	8013d84 <dhcp_create_msg+0x80>
 8013d7c:	68bb      	ldr	r3, [r7, #8]
 8013d7e:	795b      	ldrb	r3, [r3, #5]
 8013d80:	2b03      	cmp	r3, #3
 8013d82:	d10d      	bne.n	8013da0 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8013d84:	68bb      	ldr	r3, [r7, #8]
 8013d86:	799b      	ldrb	r3, [r3, #6]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d105      	bne.n	8013d98 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8013d8c:	f002 fcd6 	bl	801673c <rand>
 8013d90:	4603      	mov	r3, r0
 8013d92:	461a      	mov	r2, r3
 8013d94:	4b45      	ldr	r3, [pc, #276]	; (8013eac <dhcp_create_msg+0x1a8>)
 8013d96:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8013d98:	4b44      	ldr	r3, [pc, #272]	; (8013eac <dhcp_create_msg+0x1a8>)
 8013d9a:	681a      	ldr	r2, [r3, #0]
 8013d9c:	68bb      	ldr	r3, [r7, #8]
 8013d9e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8013da0:	69bb      	ldr	r3, [r7, #24]
 8013da2:	685b      	ldr	r3, [r3, #4]
 8013da4:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8013da6:	f44f 729a 	mov.w	r2, #308	; 0x134
 8013daa:	2100      	movs	r1, #0
 8013dac:	6978      	ldr	r0, [r7, #20]
 8013dae:	f002 fbfd 	bl	80165ac <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8013db2:	697b      	ldr	r3, [r7, #20]
 8013db4:	2201      	movs	r2, #1
 8013db6:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8013db8:	697b      	ldr	r3, [r7, #20]
 8013dba:	2201      	movs	r2, #1
 8013dbc:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8013dc4:	697b      	ldr	r3, [r7, #20]
 8013dc6:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8013dc8:	68bb      	ldr	r3, [r7, #8]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	4618      	mov	r0, r3
 8013dce:	f7f6 fd8b 	bl	800a8e8 <lwip_htonl>
 8013dd2:	4602      	mov	r2, r0
 8013dd4:	697b      	ldr	r3, [r7, #20]
 8013dd6:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8013dd8:	79fb      	ldrb	r3, [r7, #7]
 8013dda:	2b08      	cmp	r3, #8
 8013ddc:	d010      	beq.n	8013e00 <dhcp_create_msg+0xfc>
 8013dde:	79fb      	ldrb	r3, [r7, #7]
 8013de0:	2b04      	cmp	r3, #4
 8013de2:	d00d      	beq.n	8013e00 <dhcp_create_msg+0xfc>
 8013de4:	79fb      	ldrb	r3, [r7, #7]
 8013de6:	2b07      	cmp	r3, #7
 8013de8:	d00a      	beq.n	8013e00 <dhcp_create_msg+0xfc>
 8013dea:	79fb      	ldrb	r3, [r7, #7]
 8013dec:	2b03      	cmp	r3, #3
 8013dee:	d10c      	bne.n	8013e0a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8013df0:	68bb      	ldr	r3, [r7, #8]
 8013df2:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8013df4:	2b05      	cmp	r3, #5
 8013df6:	d003      	beq.n	8013e00 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8013df8:	68bb      	ldr	r3, [r7, #8]
 8013dfa:	795b      	ldrb	r3, [r3, #5]
 8013dfc:	2b04      	cmp	r3, #4
 8013dfe:	d104      	bne.n	8013e0a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	3304      	adds	r3, #4
 8013e04:	681a      	ldr	r2, [r3, #0]
 8013e06:	697b      	ldr	r3, [r7, #20]
 8013e08:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	83fb      	strh	r3, [r7, #30]
 8013e0e:	e00c      	b.n	8013e2a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8013e10:	8bfa      	ldrh	r2, [r7, #30]
 8013e12:	8bfb      	ldrh	r3, [r7, #30]
 8013e14:	68f9      	ldr	r1, [r7, #12]
 8013e16:	440a      	add	r2, r1
 8013e18:	f892 1026 	ldrb.w	r1, [r2, #38]	; 0x26
 8013e1c:	697a      	ldr	r2, [r7, #20]
 8013e1e:	4413      	add	r3, r2
 8013e20:	460a      	mov	r2, r1
 8013e22:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013e24:	8bfb      	ldrh	r3, [r7, #30]
 8013e26:	3301      	adds	r3, #1
 8013e28:	83fb      	strh	r3, [r7, #30]
 8013e2a:	8bfb      	ldrh	r3, [r7, #30]
 8013e2c:	2b05      	cmp	r3, #5
 8013e2e:	d9ef      	bls.n	8013e10 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8013e30:	697b      	ldr	r3, [r7, #20]
 8013e32:	2200      	movs	r2, #0
 8013e34:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8013e38:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8013e42:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8013e46:	2200      	movs	r2, #0
 8013e48:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8013e4c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8013e50:	2200      	movs	r2, #0
 8013e52:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8013e56:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8013e5a:	697b      	ldr	r3, [r7, #20]
 8013e5c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013e60:	2301      	movs	r3, #1
 8013e62:	2235      	movs	r2, #53	; 0x35
 8013e64:	2000      	movs	r0, #0
 8013e66:	f7ff fadd 	bl	8013424 <dhcp_option>
 8013e6a:	4603      	mov	r3, r0
 8013e6c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8013e6e:	697b      	ldr	r3, [r7, #20]
 8013e70:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013e74:	79fa      	ldrb	r2, [r7, #7]
 8013e76:	8a7b      	ldrh	r3, [r7, #18]
 8013e78:	4618      	mov	r0, r3
 8013e7a:	f7ff fb07 	bl	801348c <dhcp_option_byte>
 8013e7e:	4603      	mov	r3, r0
 8013e80:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8013e82:	683b      	ldr	r3, [r7, #0]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d002      	beq.n	8013e8e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8013e88:	683b      	ldr	r3, [r7, #0]
 8013e8a:	8a7a      	ldrh	r2, [r7, #18]
 8013e8c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8013e8e:	69bb      	ldr	r3, [r7, #24]
}
 8013e90:	4618      	mov	r0, r3
 8013e92:	3720      	adds	r7, #32
 8013e94:	46bd      	mov	sp, r7
 8013e96:	bd80      	pop	{r7, pc}
 8013e98:	08019808 	.word	0x08019808
 8013e9c:	08019b28 	.word	0x08019b28
 8013ea0:	08019868 	.word	0x08019868
 8013ea4:	08019b48 	.word	0x08019b48
 8013ea8:	08019b68 	.word	0x08019b68
 8013eac:	200004a4 	.word	0x200004a4

08013eb0 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8013eb0:	b580      	push	{r7, lr}
 8013eb2:	b084      	sub	sp, #16
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	4603      	mov	r3, r0
 8013eb8:	60b9      	str	r1, [r7, #8]
 8013eba:	607a      	str	r2, [r7, #4]
 8013ebc:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8013ebe:	89fb      	ldrh	r3, [r7, #14]
 8013ec0:	1c5a      	adds	r2, r3, #1
 8013ec2:	81fa      	strh	r2, [r7, #14]
 8013ec4:	461a      	mov	r2, r3
 8013ec6:	68bb      	ldr	r3, [r7, #8]
 8013ec8:	4413      	add	r3, r2
 8013eca:	22ff      	movs	r2, #255	; 0xff
 8013ecc:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8013ece:	e007      	b.n	8013ee0 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8013ed0:	89fb      	ldrh	r3, [r7, #14]
 8013ed2:	1c5a      	adds	r2, r3, #1
 8013ed4:	81fa      	strh	r2, [r7, #14]
 8013ed6:	461a      	mov	r2, r3
 8013ed8:	68bb      	ldr	r3, [r7, #8]
 8013eda:	4413      	add	r3, r2
 8013edc:	2200      	movs	r2, #0
 8013ede:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8013ee0:	89fb      	ldrh	r3, [r7, #14]
 8013ee2:	2b43      	cmp	r3, #67	; 0x43
 8013ee4:	d904      	bls.n	8013ef0 <dhcp_option_trailer+0x40>
 8013ee6:	89fb      	ldrh	r3, [r7, #14]
 8013ee8:	f003 0303 	and.w	r3, r3, #3
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d002      	beq.n	8013ef6 <dhcp_option_trailer+0x46>
 8013ef0:	89fb      	ldrh	r3, [r7, #14]
 8013ef2:	2b43      	cmp	r3, #67	; 0x43
 8013ef4:	d9ec      	bls.n	8013ed0 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8013ef6:	89fb      	ldrh	r3, [r7, #14]
 8013ef8:	33f0      	adds	r3, #240	; 0xf0
 8013efa:	b29b      	uxth	r3, r3
 8013efc:	4619      	mov	r1, r3
 8013efe:	6878      	ldr	r0, [r7, #4]
 8013f00:	f7f7 fdf8 	bl	800baf4 <pbuf_realloc>
}
 8013f04:	bf00      	nop
 8013f06:	3710      	adds	r7, #16
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	bd80      	pop	{r7, pc}

08013f0c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8013f0c:	b480      	push	{r7}
 8013f0e:	b085      	sub	sp, #20
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d017      	beq.n	8013f4a <dhcp_supplied_address+0x3e>
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	6a1b      	ldr	r3, [r3, #32]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d013      	beq.n	8013f4a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	6a1b      	ldr	r3, [r3, #32]
 8013f26:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	795b      	ldrb	r3, [r3, #5]
 8013f2c:	2b0a      	cmp	r3, #10
 8013f2e:	d007      	beq.n	8013f40 <dhcp_supplied_address+0x34>
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	795b      	ldrb	r3, [r3, #5]
 8013f34:	2b05      	cmp	r3, #5
 8013f36:	d003      	beq.n	8013f40 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8013f3c:	2b04      	cmp	r3, #4
 8013f3e:	d101      	bne.n	8013f44 <dhcp_supplied_address+0x38>
 8013f40:	2301      	movs	r3, #1
 8013f42:	e000      	b.n	8013f46 <dhcp_supplied_address+0x3a>
 8013f44:	2300      	movs	r3, #0
 8013f46:	b2db      	uxtb	r3, r3
 8013f48:	e000      	b.n	8013f4c <dhcp_supplied_address+0x40>
  }
  return 0;
 8013f4a:	2300      	movs	r3, #0
}
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	3714      	adds	r7, #20
 8013f50:	46bd      	mov	sp, r7
 8013f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f56:	4770      	bx	lr

08013f58 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013f58:	b580      	push	{r7, lr}
 8013f5a:	b082      	sub	sp, #8
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013f60:	4915      	ldr	r1, [pc, #84]	; (8013fb8 <etharp_free_entry+0x60>)
 8013f62:	687a      	ldr	r2, [r7, #4]
 8013f64:	4613      	mov	r3, r2
 8013f66:	005b      	lsls	r3, r3, #1
 8013f68:	4413      	add	r3, r2
 8013f6a:	00db      	lsls	r3, r3, #3
 8013f6c:	440b      	add	r3, r1
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d013      	beq.n	8013f9c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013f74:	4910      	ldr	r1, [pc, #64]	; (8013fb8 <etharp_free_entry+0x60>)
 8013f76:	687a      	ldr	r2, [r7, #4]
 8013f78:	4613      	mov	r3, r2
 8013f7a:	005b      	lsls	r3, r3, #1
 8013f7c:	4413      	add	r3, r2
 8013f7e:	00db      	lsls	r3, r3, #3
 8013f80:	440b      	add	r3, r1
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	4618      	mov	r0, r3
 8013f86:	f7f7 ff3b 	bl	800be00 <pbuf_free>
    arp_table[i].q = NULL;
 8013f8a:	490b      	ldr	r1, [pc, #44]	; (8013fb8 <etharp_free_entry+0x60>)
 8013f8c:	687a      	ldr	r2, [r7, #4]
 8013f8e:	4613      	mov	r3, r2
 8013f90:	005b      	lsls	r3, r3, #1
 8013f92:	4413      	add	r3, r2
 8013f94:	00db      	lsls	r3, r3, #3
 8013f96:	440b      	add	r3, r1
 8013f98:	2200      	movs	r2, #0
 8013f9a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013f9c:	4906      	ldr	r1, [pc, #24]	; (8013fb8 <etharp_free_entry+0x60>)
 8013f9e:	687a      	ldr	r2, [r7, #4]
 8013fa0:	4613      	mov	r3, r2
 8013fa2:	005b      	lsls	r3, r3, #1
 8013fa4:	4413      	add	r3, r2
 8013fa6:	00db      	lsls	r3, r3, #3
 8013fa8:	440b      	add	r3, r1
 8013faa:	3314      	adds	r3, #20
 8013fac:	2200      	movs	r2, #0
 8013fae:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013fb0:	bf00      	nop
 8013fb2:	3708      	adds	r7, #8
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	bd80      	pop	{r7, pc}
 8013fb8:	200004a8 	.word	0x200004a8

08013fbc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b082      	sub	sp, #8
 8013fc0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	607b      	str	r3, [r7, #4]
 8013fc6:	e096      	b.n	80140f6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013fc8:	494f      	ldr	r1, [pc, #316]	; (8014108 <etharp_tmr+0x14c>)
 8013fca:	687a      	ldr	r2, [r7, #4]
 8013fcc:	4613      	mov	r3, r2
 8013fce:	005b      	lsls	r3, r3, #1
 8013fd0:	4413      	add	r3, r2
 8013fd2:	00db      	lsls	r3, r3, #3
 8013fd4:	440b      	add	r3, r1
 8013fd6:	3314      	adds	r3, #20
 8013fd8:	781b      	ldrb	r3, [r3, #0]
 8013fda:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013fdc:	78fb      	ldrb	r3, [r7, #3]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	f000 8086 	beq.w	80140f0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013fe4:	4948      	ldr	r1, [pc, #288]	; (8014108 <etharp_tmr+0x14c>)
 8013fe6:	687a      	ldr	r2, [r7, #4]
 8013fe8:	4613      	mov	r3, r2
 8013fea:	005b      	lsls	r3, r3, #1
 8013fec:	4413      	add	r3, r2
 8013fee:	00db      	lsls	r3, r3, #3
 8013ff0:	440b      	add	r3, r1
 8013ff2:	3312      	adds	r3, #18
 8013ff4:	881b      	ldrh	r3, [r3, #0]
 8013ff6:	3301      	adds	r3, #1
 8013ff8:	b298      	uxth	r0, r3
 8013ffa:	4943      	ldr	r1, [pc, #268]	; (8014108 <etharp_tmr+0x14c>)
 8013ffc:	687a      	ldr	r2, [r7, #4]
 8013ffe:	4613      	mov	r3, r2
 8014000:	005b      	lsls	r3, r3, #1
 8014002:	4413      	add	r3, r2
 8014004:	00db      	lsls	r3, r3, #3
 8014006:	440b      	add	r3, r1
 8014008:	3312      	adds	r3, #18
 801400a:	4602      	mov	r2, r0
 801400c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801400e:	493e      	ldr	r1, [pc, #248]	; (8014108 <etharp_tmr+0x14c>)
 8014010:	687a      	ldr	r2, [r7, #4]
 8014012:	4613      	mov	r3, r2
 8014014:	005b      	lsls	r3, r3, #1
 8014016:	4413      	add	r3, r2
 8014018:	00db      	lsls	r3, r3, #3
 801401a:	440b      	add	r3, r1
 801401c:	3312      	adds	r3, #18
 801401e:	881b      	ldrh	r3, [r3, #0]
 8014020:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014024:	d215      	bcs.n	8014052 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014026:	4938      	ldr	r1, [pc, #224]	; (8014108 <etharp_tmr+0x14c>)
 8014028:	687a      	ldr	r2, [r7, #4]
 801402a:	4613      	mov	r3, r2
 801402c:	005b      	lsls	r3, r3, #1
 801402e:	4413      	add	r3, r2
 8014030:	00db      	lsls	r3, r3, #3
 8014032:	440b      	add	r3, r1
 8014034:	3314      	adds	r3, #20
 8014036:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014038:	2b01      	cmp	r3, #1
 801403a:	d10e      	bne.n	801405a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801403c:	4932      	ldr	r1, [pc, #200]	; (8014108 <etharp_tmr+0x14c>)
 801403e:	687a      	ldr	r2, [r7, #4]
 8014040:	4613      	mov	r3, r2
 8014042:	005b      	lsls	r3, r3, #1
 8014044:	4413      	add	r3, r2
 8014046:	00db      	lsls	r3, r3, #3
 8014048:	440b      	add	r3, r1
 801404a:	3312      	adds	r3, #18
 801404c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801404e:	2b04      	cmp	r3, #4
 8014050:	d903      	bls.n	801405a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014052:	6878      	ldr	r0, [r7, #4]
 8014054:	f7ff ff80 	bl	8013f58 <etharp_free_entry>
 8014058:	e04a      	b.n	80140f0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801405a:	492b      	ldr	r1, [pc, #172]	; (8014108 <etharp_tmr+0x14c>)
 801405c:	687a      	ldr	r2, [r7, #4]
 801405e:	4613      	mov	r3, r2
 8014060:	005b      	lsls	r3, r3, #1
 8014062:	4413      	add	r3, r2
 8014064:	00db      	lsls	r3, r3, #3
 8014066:	440b      	add	r3, r1
 8014068:	3314      	adds	r3, #20
 801406a:	781b      	ldrb	r3, [r3, #0]
 801406c:	2b03      	cmp	r3, #3
 801406e:	d10a      	bne.n	8014086 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014070:	4925      	ldr	r1, [pc, #148]	; (8014108 <etharp_tmr+0x14c>)
 8014072:	687a      	ldr	r2, [r7, #4]
 8014074:	4613      	mov	r3, r2
 8014076:	005b      	lsls	r3, r3, #1
 8014078:	4413      	add	r3, r2
 801407a:	00db      	lsls	r3, r3, #3
 801407c:	440b      	add	r3, r1
 801407e:	3314      	adds	r3, #20
 8014080:	2204      	movs	r2, #4
 8014082:	701a      	strb	r2, [r3, #0]
 8014084:	e034      	b.n	80140f0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014086:	4920      	ldr	r1, [pc, #128]	; (8014108 <etharp_tmr+0x14c>)
 8014088:	687a      	ldr	r2, [r7, #4]
 801408a:	4613      	mov	r3, r2
 801408c:	005b      	lsls	r3, r3, #1
 801408e:	4413      	add	r3, r2
 8014090:	00db      	lsls	r3, r3, #3
 8014092:	440b      	add	r3, r1
 8014094:	3314      	adds	r3, #20
 8014096:	781b      	ldrb	r3, [r3, #0]
 8014098:	2b04      	cmp	r3, #4
 801409a:	d10a      	bne.n	80140b2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801409c:	491a      	ldr	r1, [pc, #104]	; (8014108 <etharp_tmr+0x14c>)
 801409e:	687a      	ldr	r2, [r7, #4]
 80140a0:	4613      	mov	r3, r2
 80140a2:	005b      	lsls	r3, r3, #1
 80140a4:	4413      	add	r3, r2
 80140a6:	00db      	lsls	r3, r3, #3
 80140a8:	440b      	add	r3, r1
 80140aa:	3314      	adds	r3, #20
 80140ac:	2202      	movs	r2, #2
 80140ae:	701a      	strb	r2, [r3, #0]
 80140b0:	e01e      	b.n	80140f0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80140b2:	4915      	ldr	r1, [pc, #84]	; (8014108 <etharp_tmr+0x14c>)
 80140b4:	687a      	ldr	r2, [r7, #4]
 80140b6:	4613      	mov	r3, r2
 80140b8:	005b      	lsls	r3, r3, #1
 80140ba:	4413      	add	r3, r2
 80140bc:	00db      	lsls	r3, r3, #3
 80140be:	440b      	add	r3, r1
 80140c0:	3314      	adds	r3, #20
 80140c2:	781b      	ldrb	r3, [r3, #0]
 80140c4:	2b01      	cmp	r3, #1
 80140c6:	d113      	bne.n	80140f0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80140c8:	490f      	ldr	r1, [pc, #60]	; (8014108 <etharp_tmr+0x14c>)
 80140ca:	687a      	ldr	r2, [r7, #4]
 80140cc:	4613      	mov	r3, r2
 80140ce:	005b      	lsls	r3, r3, #1
 80140d0:	4413      	add	r3, r2
 80140d2:	00db      	lsls	r3, r3, #3
 80140d4:	440b      	add	r3, r1
 80140d6:	3308      	adds	r3, #8
 80140d8:	6818      	ldr	r0, [r3, #0]
 80140da:	687a      	ldr	r2, [r7, #4]
 80140dc:	4613      	mov	r3, r2
 80140de:	005b      	lsls	r3, r3, #1
 80140e0:	4413      	add	r3, r2
 80140e2:	00db      	lsls	r3, r3, #3
 80140e4:	4a08      	ldr	r2, [pc, #32]	; (8014108 <etharp_tmr+0x14c>)
 80140e6:	4413      	add	r3, r2
 80140e8:	3304      	adds	r3, #4
 80140ea:	4619      	mov	r1, r3
 80140ec:	f000 fe72 	bl	8014dd4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	3301      	adds	r3, #1
 80140f4:	607b      	str	r3, [r7, #4]
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	2b09      	cmp	r3, #9
 80140fa:	f77f af65 	ble.w	8013fc8 <etharp_tmr+0xc>
      }
    }
  }
}
 80140fe:	bf00      	nop
 8014100:	3708      	adds	r7, #8
 8014102:	46bd      	mov	sp, r7
 8014104:	bd80      	pop	{r7, pc}
 8014106:	bf00      	nop
 8014108:	200004a8 	.word	0x200004a8

0801410c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801410c:	b580      	push	{r7, lr}
 801410e:	b08a      	sub	sp, #40	; 0x28
 8014110:	af00      	add	r7, sp, #0
 8014112:	60f8      	str	r0, [r7, #12]
 8014114:	460b      	mov	r3, r1
 8014116:	607a      	str	r2, [r7, #4]
 8014118:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801411a:	230a      	movs	r3, #10
 801411c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801411e:	230a      	movs	r3, #10
 8014120:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014122:	230a      	movs	r3, #10
 8014124:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014126:	2300      	movs	r3, #0
 8014128:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801412a:	230a      	movs	r3, #10
 801412c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801412e:	2300      	movs	r3, #0
 8014130:	83bb      	strh	r3, [r7, #28]
 8014132:	2300      	movs	r3, #0
 8014134:	837b      	strh	r3, [r7, #26]
 8014136:	2300      	movs	r3, #0
 8014138:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801413a:	2300      	movs	r3, #0
 801413c:	843b      	strh	r3, [r7, #32]
 801413e:	e0ae      	b.n	801429e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014140:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014144:	49a6      	ldr	r1, [pc, #664]	; (80143e0 <etharp_find_entry+0x2d4>)
 8014146:	4613      	mov	r3, r2
 8014148:	005b      	lsls	r3, r3, #1
 801414a:	4413      	add	r3, r2
 801414c:	00db      	lsls	r3, r3, #3
 801414e:	440b      	add	r3, r1
 8014150:	3314      	adds	r3, #20
 8014152:	781b      	ldrb	r3, [r3, #0]
 8014154:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014156:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801415a:	2b0a      	cmp	r3, #10
 801415c:	d105      	bne.n	801416a <etharp_find_entry+0x5e>
 801415e:	7dfb      	ldrb	r3, [r7, #23]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d102      	bne.n	801416a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014164:	8c3b      	ldrh	r3, [r7, #32]
 8014166:	847b      	strh	r3, [r7, #34]	; 0x22
 8014168:	e095      	b.n	8014296 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801416a:	7dfb      	ldrb	r3, [r7, #23]
 801416c:	2b00      	cmp	r3, #0
 801416e:	f000 8092 	beq.w	8014296 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014172:	7dfb      	ldrb	r3, [r7, #23]
 8014174:	2b01      	cmp	r3, #1
 8014176:	d009      	beq.n	801418c <etharp_find_entry+0x80>
 8014178:	7dfb      	ldrb	r3, [r7, #23]
 801417a:	2b01      	cmp	r3, #1
 801417c:	d806      	bhi.n	801418c <etharp_find_entry+0x80>
 801417e:	4b99      	ldr	r3, [pc, #612]	; (80143e4 <etharp_find_entry+0x2d8>)
 8014180:	f44f 7292 	mov.w	r2, #292	; 0x124
 8014184:	4998      	ldr	r1, [pc, #608]	; (80143e8 <etharp_find_entry+0x2dc>)
 8014186:	4899      	ldr	r0, [pc, #612]	; (80143ec <etharp_find_entry+0x2e0>)
 8014188:	f002 fac0 	bl	801670c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d020      	beq.n	80141d4 <etharp_find_entry+0xc8>
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	6819      	ldr	r1, [r3, #0]
 8014196:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801419a:	4891      	ldr	r0, [pc, #580]	; (80143e0 <etharp_find_entry+0x2d4>)
 801419c:	4613      	mov	r3, r2
 801419e:	005b      	lsls	r3, r3, #1
 80141a0:	4413      	add	r3, r2
 80141a2:	00db      	lsls	r3, r3, #3
 80141a4:	4403      	add	r3, r0
 80141a6:	3304      	adds	r3, #4
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	4299      	cmp	r1, r3
 80141ac:	d112      	bne.n	80141d4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d00c      	beq.n	80141ce <etharp_find_entry+0xc2>
 80141b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141b8:	4989      	ldr	r1, [pc, #548]	; (80143e0 <etharp_find_entry+0x2d4>)
 80141ba:	4613      	mov	r3, r2
 80141bc:	005b      	lsls	r3, r3, #1
 80141be:	4413      	add	r3, r2
 80141c0:	00db      	lsls	r3, r3, #3
 80141c2:	440b      	add	r3, r1
 80141c4:	3308      	adds	r3, #8
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	687a      	ldr	r2, [r7, #4]
 80141ca:	429a      	cmp	r2, r3
 80141cc:	d102      	bne.n	80141d4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80141ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80141d2:	e100      	b.n	80143d6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80141d4:	7dfb      	ldrb	r3, [r7, #23]
 80141d6:	2b01      	cmp	r3, #1
 80141d8:	d140      	bne.n	801425c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80141da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141de:	4980      	ldr	r1, [pc, #512]	; (80143e0 <etharp_find_entry+0x2d4>)
 80141e0:	4613      	mov	r3, r2
 80141e2:	005b      	lsls	r3, r3, #1
 80141e4:	4413      	add	r3, r2
 80141e6:	00db      	lsls	r3, r3, #3
 80141e8:	440b      	add	r3, r1
 80141ea:	681b      	ldr	r3, [r3, #0]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d01a      	beq.n	8014226 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80141f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141f4:	497a      	ldr	r1, [pc, #488]	; (80143e0 <etharp_find_entry+0x2d4>)
 80141f6:	4613      	mov	r3, r2
 80141f8:	005b      	lsls	r3, r3, #1
 80141fa:	4413      	add	r3, r2
 80141fc:	00db      	lsls	r3, r3, #3
 80141fe:	440b      	add	r3, r1
 8014200:	3312      	adds	r3, #18
 8014202:	881b      	ldrh	r3, [r3, #0]
 8014204:	8bba      	ldrh	r2, [r7, #28]
 8014206:	429a      	cmp	r2, r3
 8014208:	d845      	bhi.n	8014296 <etharp_find_entry+0x18a>
            old_queue = i;
 801420a:	8c3b      	ldrh	r3, [r7, #32]
 801420c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801420e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014212:	4973      	ldr	r1, [pc, #460]	; (80143e0 <etharp_find_entry+0x2d4>)
 8014214:	4613      	mov	r3, r2
 8014216:	005b      	lsls	r3, r3, #1
 8014218:	4413      	add	r3, r2
 801421a:	00db      	lsls	r3, r3, #3
 801421c:	440b      	add	r3, r1
 801421e:	3312      	adds	r3, #18
 8014220:	881b      	ldrh	r3, [r3, #0]
 8014222:	83bb      	strh	r3, [r7, #28]
 8014224:	e037      	b.n	8014296 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014226:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801422a:	496d      	ldr	r1, [pc, #436]	; (80143e0 <etharp_find_entry+0x2d4>)
 801422c:	4613      	mov	r3, r2
 801422e:	005b      	lsls	r3, r3, #1
 8014230:	4413      	add	r3, r2
 8014232:	00db      	lsls	r3, r3, #3
 8014234:	440b      	add	r3, r1
 8014236:	3312      	adds	r3, #18
 8014238:	881b      	ldrh	r3, [r3, #0]
 801423a:	8b7a      	ldrh	r2, [r7, #26]
 801423c:	429a      	cmp	r2, r3
 801423e:	d82a      	bhi.n	8014296 <etharp_find_entry+0x18a>
            old_pending = i;
 8014240:	8c3b      	ldrh	r3, [r7, #32]
 8014242:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014244:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014248:	4965      	ldr	r1, [pc, #404]	; (80143e0 <etharp_find_entry+0x2d4>)
 801424a:	4613      	mov	r3, r2
 801424c:	005b      	lsls	r3, r3, #1
 801424e:	4413      	add	r3, r2
 8014250:	00db      	lsls	r3, r3, #3
 8014252:	440b      	add	r3, r1
 8014254:	3312      	adds	r3, #18
 8014256:	881b      	ldrh	r3, [r3, #0]
 8014258:	837b      	strh	r3, [r7, #26]
 801425a:	e01c      	b.n	8014296 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801425c:	7dfb      	ldrb	r3, [r7, #23]
 801425e:	2b01      	cmp	r3, #1
 8014260:	d919      	bls.n	8014296 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014262:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014266:	495e      	ldr	r1, [pc, #376]	; (80143e0 <etharp_find_entry+0x2d4>)
 8014268:	4613      	mov	r3, r2
 801426a:	005b      	lsls	r3, r3, #1
 801426c:	4413      	add	r3, r2
 801426e:	00db      	lsls	r3, r3, #3
 8014270:	440b      	add	r3, r1
 8014272:	3312      	adds	r3, #18
 8014274:	881b      	ldrh	r3, [r3, #0]
 8014276:	8b3a      	ldrh	r2, [r7, #24]
 8014278:	429a      	cmp	r2, r3
 801427a:	d80c      	bhi.n	8014296 <etharp_find_entry+0x18a>
            old_stable = i;
 801427c:	8c3b      	ldrh	r3, [r7, #32]
 801427e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014280:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014284:	4956      	ldr	r1, [pc, #344]	; (80143e0 <etharp_find_entry+0x2d4>)
 8014286:	4613      	mov	r3, r2
 8014288:	005b      	lsls	r3, r3, #1
 801428a:	4413      	add	r3, r2
 801428c:	00db      	lsls	r3, r3, #3
 801428e:	440b      	add	r3, r1
 8014290:	3312      	adds	r3, #18
 8014292:	881b      	ldrh	r3, [r3, #0]
 8014294:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014296:	8c3b      	ldrh	r3, [r7, #32]
 8014298:	3301      	adds	r3, #1
 801429a:	b29b      	uxth	r3, r3
 801429c:	843b      	strh	r3, [r7, #32]
 801429e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80142a2:	2b09      	cmp	r3, #9
 80142a4:	f77f af4c 	ble.w	8014140 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80142a8:	7afb      	ldrb	r3, [r7, #11]
 80142aa:	f003 0302 	and.w	r3, r3, #2
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d108      	bne.n	80142c4 <etharp_find_entry+0x1b8>
 80142b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80142b6:	2b0a      	cmp	r3, #10
 80142b8:	d107      	bne.n	80142ca <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80142ba:	7afb      	ldrb	r3, [r7, #11]
 80142bc:	f003 0301 	and.w	r3, r3, #1
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d102      	bne.n	80142ca <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80142c4:	f04f 33ff 	mov.w	r3, #4294967295
 80142c8:	e085      	b.n	80143d6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80142ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80142ce:	2b09      	cmp	r3, #9
 80142d0:	dc02      	bgt.n	80142d8 <etharp_find_entry+0x1cc>
    i = empty;
 80142d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80142d4:	843b      	strh	r3, [r7, #32]
 80142d6:	e039      	b.n	801434c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80142d8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80142dc:	2b09      	cmp	r3, #9
 80142de:	dc14      	bgt.n	801430a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80142e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80142e2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80142e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142e8:	493d      	ldr	r1, [pc, #244]	; (80143e0 <etharp_find_entry+0x2d4>)
 80142ea:	4613      	mov	r3, r2
 80142ec:	005b      	lsls	r3, r3, #1
 80142ee:	4413      	add	r3, r2
 80142f0:	00db      	lsls	r3, r3, #3
 80142f2:	440b      	add	r3, r1
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d018      	beq.n	801432c <etharp_find_entry+0x220>
 80142fa:	4b3a      	ldr	r3, [pc, #232]	; (80143e4 <etharp_find_entry+0x2d8>)
 80142fc:	f240 126d 	movw	r2, #365	; 0x16d
 8014300:	493b      	ldr	r1, [pc, #236]	; (80143f0 <etharp_find_entry+0x2e4>)
 8014302:	483a      	ldr	r0, [pc, #232]	; (80143ec <etharp_find_entry+0x2e0>)
 8014304:	f002 fa02 	bl	801670c <iprintf>
 8014308:	e010      	b.n	801432c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801430a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801430e:	2b09      	cmp	r3, #9
 8014310:	dc02      	bgt.n	8014318 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014312:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014314:	843b      	strh	r3, [r7, #32]
 8014316:	e009      	b.n	801432c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014318:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801431c:	2b09      	cmp	r3, #9
 801431e:	dc02      	bgt.n	8014326 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014320:	8bfb      	ldrh	r3, [r7, #30]
 8014322:	843b      	strh	r3, [r7, #32]
 8014324:	e002      	b.n	801432c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014326:	f04f 33ff 	mov.w	r3, #4294967295
 801432a:	e054      	b.n	80143d6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801432c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014330:	2b09      	cmp	r3, #9
 8014332:	dd06      	ble.n	8014342 <etharp_find_entry+0x236>
 8014334:	4b2b      	ldr	r3, [pc, #172]	; (80143e4 <etharp_find_entry+0x2d8>)
 8014336:	f240 127f 	movw	r2, #383	; 0x17f
 801433a:	492e      	ldr	r1, [pc, #184]	; (80143f4 <etharp_find_entry+0x2e8>)
 801433c:	482b      	ldr	r0, [pc, #172]	; (80143ec <etharp_find_entry+0x2e0>)
 801433e:	f002 f9e5 	bl	801670c <iprintf>
    etharp_free_entry(i);
 8014342:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014346:	4618      	mov	r0, r3
 8014348:	f7ff fe06 	bl	8013f58 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801434c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014350:	2b09      	cmp	r3, #9
 8014352:	dd06      	ble.n	8014362 <etharp_find_entry+0x256>
 8014354:	4b23      	ldr	r3, [pc, #140]	; (80143e4 <etharp_find_entry+0x2d8>)
 8014356:	f240 1283 	movw	r2, #387	; 0x183
 801435a:	4926      	ldr	r1, [pc, #152]	; (80143f4 <etharp_find_entry+0x2e8>)
 801435c:	4823      	ldr	r0, [pc, #140]	; (80143ec <etharp_find_entry+0x2e0>)
 801435e:	f002 f9d5 	bl	801670c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014362:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014366:	491e      	ldr	r1, [pc, #120]	; (80143e0 <etharp_find_entry+0x2d4>)
 8014368:	4613      	mov	r3, r2
 801436a:	005b      	lsls	r3, r3, #1
 801436c:	4413      	add	r3, r2
 801436e:	00db      	lsls	r3, r3, #3
 8014370:	440b      	add	r3, r1
 8014372:	3314      	adds	r3, #20
 8014374:	781b      	ldrb	r3, [r3, #0]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d006      	beq.n	8014388 <etharp_find_entry+0x27c>
 801437a:	4b1a      	ldr	r3, [pc, #104]	; (80143e4 <etharp_find_entry+0x2d8>)
 801437c:	f240 1285 	movw	r2, #389	; 0x185
 8014380:	491d      	ldr	r1, [pc, #116]	; (80143f8 <etharp_find_entry+0x2ec>)
 8014382:	481a      	ldr	r0, [pc, #104]	; (80143ec <etharp_find_entry+0x2e0>)
 8014384:	f002 f9c2 	bl	801670c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d00b      	beq.n	80143a6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801438e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	6819      	ldr	r1, [r3, #0]
 8014396:	4812      	ldr	r0, [pc, #72]	; (80143e0 <etharp_find_entry+0x2d4>)
 8014398:	4613      	mov	r3, r2
 801439a:	005b      	lsls	r3, r3, #1
 801439c:	4413      	add	r3, r2
 801439e:	00db      	lsls	r3, r3, #3
 80143a0:	4403      	add	r3, r0
 80143a2:	3304      	adds	r3, #4
 80143a4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80143a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143aa:	490d      	ldr	r1, [pc, #52]	; (80143e0 <etharp_find_entry+0x2d4>)
 80143ac:	4613      	mov	r3, r2
 80143ae:	005b      	lsls	r3, r3, #1
 80143b0:	4413      	add	r3, r2
 80143b2:	00db      	lsls	r3, r3, #3
 80143b4:	440b      	add	r3, r1
 80143b6:	3312      	adds	r3, #18
 80143b8:	2200      	movs	r2, #0
 80143ba:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80143bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80143c0:	4907      	ldr	r1, [pc, #28]	; (80143e0 <etharp_find_entry+0x2d4>)
 80143c2:	4613      	mov	r3, r2
 80143c4:	005b      	lsls	r3, r3, #1
 80143c6:	4413      	add	r3, r2
 80143c8:	00db      	lsls	r3, r3, #3
 80143ca:	440b      	add	r3, r1
 80143cc:	3308      	adds	r3, #8
 80143ce:	687a      	ldr	r2, [r7, #4]
 80143d0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80143d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80143d6:	4618      	mov	r0, r3
 80143d8:	3728      	adds	r7, #40	; 0x28
 80143da:	46bd      	mov	sp, r7
 80143dc:	bd80      	pop	{r7, pc}
 80143de:	bf00      	nop
 80143e0:	200004a8 	.word	0x200004a8
 80143e4:	08019ba8 	.word	0x08019ba8
 80143e8:	08019be0 	.word	0x08019be0
 80143ec:	08019c20 	.word	0x08019c20
 80143f0:	08019c48 	.word	0x08019c48
 80143f4:	08019c60 	.word	0x08019c60
 80143f8:	08019c74 	.word	0x08019c74

080143fc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80143fc:	b580      	push	{r7, lr}
 80143fe:	b088      	sub	sp, #32
 8014400:	af02      	add	r7, sp, #8
 8014402:	60f8      	str	r0, [r7, #12]
 8014404:	60b9      	str	r1, [r7, #8]
 8014406:	607a      	str	r2, [r7, #4]
 8014408:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014410:	2b06      	cmp	r3, #6
 8014412:	d006      	beq.n	8014422 <etharp_update_arp_entry+0x26>
 8014414:	4b48      	ldr	r3, [pc, #288]	; (8014538 <etharp_update_arp_entry+0x13c>)
 8014416:	f240 12a9 	movw	r2, #425	; 0x1a9
 801441a:	4948      	ldr	r1, [pc, #288]	; (801453c <etharp_update_arp_entry+0x140>)
 801441c:	4848      	ldr	r0, [pc, #288]	; (8014540 <etharp_update_arp_entry+0x144>)
 801441e:	f002 f975 	bl	801670c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014422:	68bb      	ldr	r3, [r7, #8]
 8014424:	2b00      	cmp	r3, #0
 8014426:	d012      	beq.n	801444e <etharp_update_arp_entry+0x52>
 8014428:	68bb      	ldr	r3, [r7, #8]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d00e      	beq.n	801444e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014430:	68bb      	ldr	r3, [r7, #8]
 8014432:	681b      	ldr	r3, [r3, #0]
 8014434:	68f9      	ldr	r1, [r7, #12]
 8014436:	4618      	mov	r0, r3
 8014438:	f001 f91e 	bl	8015678 <ip4_addr_isbroadcast_u32>
 801443c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801443e:	2b00      	cmp	r3, #0
 8014440:	d105      	bne.n	801444e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014442:	68bb      	ldr	r3, [r7, #8]
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801444a:	2be0      	cmp	r3, #224	; 0xe0
 801444c:	d102      	bne.n	8014454 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801444e:	f06f 030f 	mvn.w	r3, #15
 8014452:	e06c      	b.n	801452e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014454:	78fb      	ldrb	r3, [r7, #3]
 8014456:	68fa      	ldr	r2, [r7, #12]
 8014458:	4619      	mov	r1, r3
 801445a:	68b8      	ldr	r0, [r7, #8]
 801445c:	f7ff fe56 	bl	801410c <etharp_find_entry>
 8014460:	4603      	mov	r3, r0
 8014462:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014464:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014468:	2b00      	cmp	r3, #0
 801446a:	da02      	bge.n	8014472 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801446c:	8afb      	ldrh	r3, [r7, #22]
 801446e:	b25b      	sxtb	r3, r3
 8014470:	e05d      	b.n	801452e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014472:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014476:	4933      	ldr	r1, [pc, #204]	; (8014544 <etharp_update_arp_entry+0x148>)
 8014478:	4613      	mov	r3, r2
 801447a:	005b      	lsls	r3, r3, #1
 801447c:	4413      	add	r3, r2
 801447e:	00db      	lsls	r3, r3, #3
 8014480:	440b      	add	r3, r1
 8014482:	3314      	adds	r3, #20
 8014484:	2202      	movs	r2, #2
 8014486:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014488:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801448c:	492d      	ldr	r1, [pc, #180]	; (8014544 <etharp_update_arp_entry+0x148>)
 801448e:	4613      	mov	r3, r2
 8014490:	005b      	lsls	r3, r3, #1
 8014492:	4413      	add	r3, r2
 8014494:	00db      	lsls	r3, r3, #3
 8014496:	440b      	add	r3, r1
 8014498:	3308      	adds	r3, #8
 801449a:	68fa      	ldr	r2, [r7, #12]
 801449c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801449e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80144a2:	4613      	mov	r3, r2
 80144a4:	005b      	lsls	r3, r3, #1
 80144a6:	4413      	add	r3, r2
 80144a8:	00db      	lsls	r3, r3, #3
 80144aa:	3308      	adds	r3, #8
 80144ac:	4a25      	ldr	r2, [pc, #148]	; (8014544 <etharp_update_arp_entry+0x148>)
 80144ae:	4413      	add	r3, r2
 80144b0:	3304      	adds	r3, #4
 80144b2:	2206      	movs	r2, #6
 80144b4:	6879      	ldr	r1, [r7, #4]
 80144b6:	4618      	mov	r0, r3
 80144b8:	f002 f86d 	bl	8016596 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80144bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80144c0:	4920      	ldr	r1, [pc, #128]	; (8014544 <etharp_update_arp_entry+0x148>)
 80144c2:	4613      	mov	r3, r2
 80144c4:	005b      	lsls	r3, r3, #1
 80144c6:	4413      	add	r3, r2
 80144c8:	00db      	lsls	r3, r3, #3
 80144ca:	440b      	add	r3, r1
 80144cc:	3312      	adds	r3, #18
 80144ce:	2200      	movs	r2, #0
 80144d0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80144d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80144d6:	491b      	ldr	r1, [pc, #108]	; (8014544 <etharp_update_arp_entry+0x148>)
 80144d8:	4613      	mov	r3, r2
 80144da:	005b      	lsls	r3, r3, #1
 80144dc:	4413      	add	r3, r2
 80144de:	00db      	lsls	r3, r3, #3
 80144e0:	440b      	add	r3, r1
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d021      	beq.n	801452c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80144e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80144ec:	4915      	ldr	r1, [pc, #84]	; (8014544 <etharp_update_arp_entry+0x148>)
 80144ee:	4613      	mov	r3, r2
 80144f0:	005b      	lsls	r3, r3, #1
 80144f2:	4413      	add	r3, r2
 80144f4:	00db      	lsls	r3, r3, #3
 80144f6:	440b      	add	r3, r1
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80144fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014500:	4910      	ldr	r1, [pc, #64]	; (8014544 <etharp_update_arp_entry+0x148>)
 8014502:	4613      	mov	r3, r2
 8014504:	005b      	lsls	r3, r3, #1
 8014506:	4413      	add	r3, r2
 8014508:	00db      	lsls	r3, r3, #3
 801450a:	440b      	add	r3, r1
 801450c:	2200      	movs	r2, #0
 801450e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014516:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801451a:	9300      	str	r3, [sp, #0]
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	6939      	ldr	r1, [r7, #16]
 8014520:	68f8      	ldr	r0, [r7, #12]
 8014522:	f001 ffad 	bl	8016480 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014526:	6938      	ldr	r0, [r7, #16]
 8014528:	f7f7 fc6a 	bl	800be00 <pbuf_free>
  }
  return ERR_OK;
 801452c:	2300      	movs	r3, #0
}
 801452e:	4618      	mov	r0, r3
 8014530:	3718      	adds	r7, #24
 8014532:	46bd      	mov	sp, r7
 8014534:	bd80      	pop	{r7, pc}
 8014536:	bf00      	nop
 8014538:	08019ba8 	.word	0x08019ba8
 801453c:	08019ca0 	.word	0x08019ca0
 8014540:	08019c20 	.word	0x08019c20
 8014544:	200004a8 	.word	0x200004a8

08014548 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014548:	b580      	push	{r7, lr}
 801454a:	b084      	sub	sp, #16
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014550:	2300      	movs	r3, #0
 8014552:	60fb      	str	r3, [r7, #12]
 8014554:	e01e      	b.n	8014594 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014556:	4913      	ldr	r1, [pc, #76]	; (80145a4 <etharp_cleanup_netif+0x5c>)
 8014558:	68fa      	ldr	r2, [r7, #12]
 801455a:	4613      	mov	r3, r2
 801455c:	005b      	lsls	r3, r3, #1
 801455e:	4413      	add	r3, r2
 8014560:	00db      	lsls	r3, r3, #3
 8014562:	440b      	add	r3, r1
 8014564:	3314      	adds	r3, #20
 8014566:	781b      	ldrb	r3, [r3, #0]
 8014568:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801456a:	7afb      	ldrb	r3, [r7, #11]
 801456c:	2b00      	cmp	r3, #0
 801456e:	d00e      	beq.n	801458e <etharp_cleanup_netif+0x46>
 8014570:	490c      	ldr	r1, [pc, #48]	; (80145a4 <etharp_cleanup_netif+0x5c>)
 8014572:	68fa      	ldr	r2, [r7, #12]
 8014574:	4613      	mov	r3, r2
 8014576:	005b      	lsls	r3, r3, #1
 8014578:	4413      	add	r3, r2
 801457a:	00db      	lsls	r3, r3, #3
 801457c:	440b      	add	r3, r1
 801457e:	3308      	adds	r3, #8
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	687a      	ldr	r2, [r7, #4]
 8014584:	429a      	cmp	r2, r3
 8014586:	d102      	bne.n	801458e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014588:	68f8      	ldr	r0, [r7, #12]
 801458a:	f7ff fce5 	bl	8013f58 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	3301      	adds	r3, #1
 8014592:	60fb      	str	r3, [r7, #12]
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	2b09      	cmp	r3, #9
 8014598:	dddd      	ble.n	8014556 <etharp_cleanup_netif+0xe>
    }
  }
}
 801459a:	bf00      	nop
 801459c:	3710      	adds	r7, #16
 801459e:	46bd      	mov	sp, r7
 80145a0:	bd80      	pop	{r7, pc}
 80145a2:	bf00      	nop
 80145a4:	200004a8 	.word	0x200004a8

080145a8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80145a8:	b5b0      	push	{r4, r5, r7, lr}
 80145aa:	b08a      	sub	sp, #40	; 0x28
 80145ac:	af04      	add	r7, sp, #16
 80145ae:	6078      	str	r0, [r7, #4]
 80145b0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80145b2:	683b      	ldr	r3, [r7, #0]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d107      	bne.n	80145c8 <etharp_input+0x20>
 80145b8:	4b3f      	ldr	r3, [pc, #252]	; (80146b8 <etharp_input+0x110>)
 80145ba:	f240 228a 	movw	r2, #650	; 0x28a
 80145be:	493f      	ldr	r1, [pc, #252]	; (80146bc <etharp_input+0x114>)
 80145c0:	483f      	ldr	r0, [pc, #252]	; (80146c0 <etharp_input+0x118>)
 80145c2:	f002 f8a3 	bl	801670c <iprintf>
 80145c6:	e074      	b.n	80146b2 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	685b      	ldr	r3, [r3, #4]
 80145cc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80145ce:	693b      	ldr	r3, [r7, #16]
 80145d0:	881b      	ldrh	r3, [r3, #0]
 80145d2:	b29b      	uxth	r3, r3
 80145d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80145d8:	d10c      	bne.n	80145f4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80145da:	693b      	ldr	r3, [r7, #16]
 80145dc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80145de:	2b06      	cmp	r3, #6
 80145e0:	d108      	bne.n	80145f4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80145e2:	693b      	ldr	r3, [r7, #16]
 80145e4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80145e6:	2b04      	cmp	r3, #4
 80145e8:	d104      	bne.n	80145f4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80145ea:	693b      	ldr	r3, [r7, #16]
 80145ec:	885b      	ldrh	r3, [r3, #2]
 80145ee:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80145f0:	2b08      	cmp	r3, #8
 80145f2:	d003      	beq.n	80145fc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80145f4:	6878      	ldr	r0, [r7, #4]
 80145f6:	f7f7 fc03 	bl	800be00 <pbuf_free>
    return;
 80145fa:	e05a      	b.n	80146b2 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80145fc:	693b      	ldr	r3, [r7, #16]
 80145fe:	330e      	adds	r3, #14
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014604:	693b      	ldr	r3, [r7, #16]
 8014606:	3318      	adds	r3, #24
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801460c:	683b      	ldr	r3, [r7, #0]
 801460e:	3304      	adds	r3, #4
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d102      	bne.n	801461c <etharp_input+0x74>
    for_us = 0;
 8014616:	2300      	movs	r3, #0
 8014618:	75fb      	strb	r3, [r7, #23]
 801461a:	e009      	b.n	8014630 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801461c:	68ba      	ldr	r2, [r7, #8]
 801461e:	683b      	ldr	r3, [r7, #0]
 8014620:	3304      	adds	r3, #4
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	429a      	cmp	r2, r3
 8014626:	bf0c      	ite	eq
 8014628:	2301      	moveq	r3, #1
 801462a:	2300      	movne	r3, #0
 801462c:	b2db      	uxtb	r3, r3
 801462e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014630:	693b      	ldr	r3, [r7, #16]
 8014632:	f103 0208 	add.w	r2, r3, #8
 8014636:	7dfb      	ldrb	r3, [r7, #23]
 8014638:	2b00      	cmp	r3, #0
 801463a:	d001      	beq.n	8014640 <etharp_input+0x98>
 801463c:	2301      	movs	r3, #1
 801463e:	e000      	b.n	8014642 <etharp_input+0x9a>
 8014640:	2302      	movs	r3, #2
 8014642:	f107 010c 	add.w	r1, r7, #12
 8014646:	6838      	ldr	r0, [r7, #0]
 8014648:	f7ff fed8 	bl	80143fc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801464c:	693b      	ldr	r3, [r7, #16]
 801464e:	88db      	ldrh	r3, [r3, #6]
 8014650:	b29b      	uxth	r3, r3
 8014652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014656:	d003      	beq.n	8014660 <etharp_input+0xb8>
 8014658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801465c:	d01e      	beq.n	801469c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801465e:	e025      	b.n	80146ac <etharp_input+0x104>
      if (for_us) {
 8014660:	7dfb      	ldrb	r3, [r7, #23]
 8014662:	2b00      	cmp	r3, #0
 8014664:	d021      	beq.n	80146aa <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014666:	683b      	ldr	r3, [r7, #0]
 8014668:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801466c:	693b      	ldr	r3, [r7, #16]
 801466e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014672:	683b      	ldr	r3, [r7, #0]
 8014674:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8014678:	683b      	ldr	r3, [r7, #0]
 801467a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801467c:	693a      	ldr	r2, [r7, #16]
 801467e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014680:	2102      	movs	r1, #2
 8014682:	9103      	str	r1, [sp, #12]
 8014684:	f107 010c 	add.w	r1, r7, #12
 8014688:	9102      	str	r1, [sp, #8]
 801468a:	9201      	str	r2, [sp, #4]
 801468c:	9300      	str	r3, [sp, #0]
 801468e:	462b      	mov	r3, r5
 8014690:	4622      	mov	r2, r4
 8014692:	4601      	mov	r1, r0
 8014694:	6838      	ldr	r0, [r7, #0]
 8014696:	f000 faef 	bl	8014c78 <etharp_raw>
      break;
 801469a:	e006      	b.n	80146aa <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801469c:	f107 030c 	add.w	r3, r7, #12
 80146a0:	4619      	mov	r1, r3
 80146a2:	6838      	ldr	r0, [r7, #0]
 80146a4:	f7fe f9fe 	bl	8012aa4 <dhcp_arp_reply>
      break;
 80146a8:	e000      	b.n	80146ac <etharp_input+0x104>
      break;
 80146aa:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80146ac:	6878      	ldr	r0, [r7, #4]
 80146ae:	f7f7 fba7 	bl	800be00 <pbuf_free>
}
 80146b2:	3718      	adds	r7, #24
 80146b4:	46bd      	mov	sp, r7
 80146b6:	bdb0      	pop	{r4, r5, r7, pc}
 80146b8:	08019ba8 	.word	0x08019ba8
 80146bc:	08019cf8 	.word	0x08019cf8
 80146c0:	08019c20 	.word	0x08019c20

080146c4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b086      	sub	sp, #24
 80146c8:	af02      	add	r7, sp, #8
 80146ca:	60f8      	str	r0, [r7, #12]
 80146cc:	60b9      	str	r1, [r7, #8]
 80146ce:	4613      	mov	r3, r2
 80146d0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80146d2:	79fa      	ldrb	r2, [r7, #7]
 80146d4:	4944      	ldr	r1, [pc, #272]	; (80147e8 <etharp_output_to_arp_index+0x124>)
 80146d6:	4613      	mov	r3, r2
 80146d8:	005b      	lsls	r3, r3, #1
 80146da:	4413      	add	r3, r2
 80146dc:	00db      	lsls	r3, r3, #3
 80146de:	440b      	add	r3, r1
 80146e0:	3314      	adds	r3, #20
 80146e2:	781b      	ldrb	r3, [r3, #0]
 80146e4:	2b01      	cmp	r3, #1
 80146e6:	d806      	bhi.n	80146f6 <etharp_output_to_arp_index+0x32>
 80146e8:	4b40      	ldr	r3, [pc, #256]	; (80147ec <etharp_output_to_arp_index+0x128>)
 80146ea:	f240 22ef 	movw	r2, #751	; 0x2ef
 80146ee:	4940      	ldr	r1, [pc, #256]	; (80147f0 <etharp_output_to_arp_index+0x12c>)
 80146f0:	4840      	ldr	r0, [pc, #256]	; (80147f4 <etharp_output_to_arp_index+0x130>)
 80146f2:	f002 f80b 	bl	801670c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80146f6:	79fa      	ldrb	r2, [r7, #7]
 80146f8:	493b      	ldr	r1, [pc, #236]	; (80147e8 <etharp_output_to_arp_index+0x124>)
 80146fa:	4613      	mov	r3, r2
 80146fc:	005b      	lsls	r3, r3, #1
 80146fe:	4413      	add	r3, r2
 8014700:	00db      	lsls	r3, r3, #3
 8014702:	440b      	add	r3, r1
 8014704:	3314      	adds	r3, #20
 8014706:	781b      	ldrb	r3, [r3, #0]
 8014708:	2b02      	cmp	r3, #2
 801470a:	d153      	bne.n	80147b4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801470c:	79fa      	ldrb	r2, [r7, #7]
 801470e:	4936      	ldr	r1, [pc, #216]	; (80147e8 <etharp_output_to_arp_index+0x124>)
 8014710:	4613      	mov	r3, r2
 8014712:	005b      	lsls	r3, r3, #1
 8014714:	4413      	add	r3, r2
 8014716:	00db      	lsls	r3, r3, #3
 8014718:	440b      	add	r3, r1
 801471a:	3312      	adds	r3, #18
 801471c:	881b      	ldrh	r3, [r3, #0]
 801471e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014722:	d919      	bls.n	8014758 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014724:	79fa      	ldrb	r2, [r7, #7]
 8014726:	4613      	mov	r3, r2
 8014728:	005b      	lsls	r3, r3, #1
 801472a:	4413      	add	r3, r2
 801472c:	00db      	lsls	r3, r3, #3
 801472e:	4a2e      	ldr	r2, [pc, #184]	; (80147e8 <etharp_output_to_arp_index+0x124>)
 8014730:	4413      	add	r3, r2
 8014732:	3304      	adds	r3, #4
 8014734:	4619      	mov	r1, r3
 8014736:	68f8      	ldr	r0, [r7, #12]
 8014738:	f000 fb4c 	bl	8014dd4 <etharp_request>
 801473c:	4603      	mov	r3, r0
 801473e:	2b00      	cmp	r3, #0
 8014740:	d138      	bne.n	80147b4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014742:	79fa      	ldrb	r2, [r7, #7]
 8014744:	4928      	ldr	r1, [pc, #160]	; (80147e8 <etharp_output_to_arp_index+0x124>)
 8014746:	4613      	mov	r3, r2
 8014748:	005b      	lsls	r3, r3, #1
 801474a:	4413      	add	r3, r2
 801474c:	00db      	lsls	r3, r3, #3
 801474e:	440b      	add	r3, r1
 8014750:	3314      	adds	r3, #20
 8014752:	2203      	movs	r2, #3
 8014754:	701a      	strb	r2, [r3, #0]
 8014756:	e02d      	b.n	80147b4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014758:	79fa      	ldrb	r2, [r7, #7]
 801475a:	4923      	ldr	r1, [pc, #140]	; (80147e8 <etharp_output_to_arp_index+0x124>)
 801475c:	4613      	mov	r3, r2
 801475e:	005b      	lsls	r3, r3, #1
 8014760:	4413      	add	r3, r2
 8014762:	00db      	lsls	r3, r3, #3
 8014764:	440b      	add	r3, r1
 8014766:	3312      	adds	r3, #18
 8014768:	881b      	ldrh	r3, [r3, #0]
 801476a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801476e:	d321      	bcc.n	80147b4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014770:	79fa      	ldrb	r2, [r7, #7]
 8014772:	4613      	mov	r3, r2
 8014774:	005b      	lsls	r3, r3, #1
 8014776:	4413      	add	r3, r2
 8014778:	00db      	lsls	r3, r3, #3
 801477a:	4a1b      	ldr	r2, [pc, #108]	; (80147e8 <etharp_output_to_arp_index+0x124>)
 801477c:	4413      	add	r3, r2
 801477e:	1d19      	adds	r1, r3, #4
 8014780:	79fa      	ldrb	r2, [r7, #7]
 8014782:	4613      	mov	r3, r2
 8014784:	005b      	lsls	r3, r3, #1
 8014786:	4413      	add	r3, r2
 8014788:	00db      	lsls	r3, r3, #3
 801478a:	3308      	adds	r3, #8
 801478c:	4a16      	ldr	r2, [pc, #88]	; (80147e8 <etharp_output_to_arp_index+0x124>)
 801478e:	4413      	add	r3, r2
 8014790:	3304      	adds	r3, #4
 8014792:	461a      	mov	r2, r3
 8014794:	68f8      	ldr	r0, [r7, #12]
 8014796:	f000 fafb 	bl	8014d90 <etharp_request_dst>
 801479a:	4603      	mov	r3, r0
 801479c:	2b00      	cmp	r3, #0
 801479e:	d109      	bne.n	80147b4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80147a0:	79fa      	ldrb	r2, [r7, #7]
 80147a2:	4911      	ldr	r1, [pc, #68]	; (80147e8 <etharp_output_to_arp_index+0x124>)
 80147a4:	4613      	mov	r3, r2
 80147a6:	005b      	lsls	r3, r3, #1
 80147a8:	4413      	add	r3, r2
 80147aa:	00db      	lsls	r3, r3, #3
 80147ac:	440b      	add	r3, r1
 80147ae:	3314      	adds	r3, #20
 80147b0:	2203      	movs	r2, #3
 80147b2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80147ba:	79fa      	ldrb	r2, [r7, #7]
 80147bc:	4613      	mov	r3, r2
 80147be:	005b      	lsls	r3, r3, #1
 80147c0:	4413      	add	r3, r2
 80147c2:	00db      	lsls	r3, r3, #3
 80147c4:	3308      	adds	r3, #8
 80147c6:	4a08      	ldr	r2, [pc, #32]	; (80147e8 <etharp_output_to_arp_index+0x124>)
 80147c8:	4413      	add	r3, r2
 80147ca:	1d1a      	adds	r2, r3, #4
 80147cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80147d0:	9300      	str	r3, [sp, #0]
 80147d2:	4613      	mov	r3, r2
 80147d4:	460a      	mov	r2, r1
 80147d6:	68b9      	ldr	r1, [r7, #8]
 80147d8:	68f8      	ldr	r0, [r7, #12]
 80147da:	f001 fe51 	bl	8016480 <ethernet_output>
 80147de:	4603      	mov	r3, r0
}
 80147e0:	4618      	mov	r0, r3
 80147e2:	3710      	adds	r7, #16
 80147e4:	46bd      	mov	sp, r7
 80147e6:	bd80      	pop	{r7, pc}
 80147e8:	200004a8 	.word	0x200004a8
 80147ec:	08019ba8 	.word	0x08019ba8
 80147f0:	08019d18 	.word	0x08019d18
 80147f4:	08019c20 	.word	0x08019c20

080147f8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80147f8:	b580      	push	{r7, lr}
 80147fa:	b08a      	sub	sp, #40	; 0x28
 80147fc:	af02      	add	r7, sp, #8
 80147fe:	60f8      	str	r0, [r7, #12]
 8014800:	60b9      	str	r1, [r7, #8]
 8014802:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	2b00      	cmp	r3, #0
 801480c:	d106      	bne.n	801481c <etharp_output+0x24>
 801480e:	4b73      	ldr	r3, [pc, #460]	; (80149dc <etharp_output+0x1e4>)
 8014810:	f240 321e 	movw	r2, #798	; 0x31e
 8014814:	4972      	ldr	r1, [pc, #456]	; (80149e0 <etharp_output+0x1e8>)
 8014816:	4873      	ldr	r0, [pc, #460]	; (80149e4 <etharp_output+0x1ec>)
 8014818:	f001 ff78 	bl	801670c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801481c:	68bb      	ldr	r3, [r7, #8]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d106      	bne.n	8014830 <etharp_output+0x38>
 8014822:	4b6e      	ldr	r3, [pc, #440]	; (80149dc <etharp_output+0x1e4>)
 8014824:	f240 321f 	movw	r2, #799	; 0x31f
 8014828:	496f      	ldr	r1, [pc, #444]	; (80149e8 <etharp_output+0x1f0>)
 801482a:	486e      	ldr	r0, [pc, #440]	; (80149e4 <etharp_output+0x1ec>)
 801482c:	f001 ff6e 	bl	801670c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	2b00      	cmp	r3, #0
 8014834:	d106      	bne.n	8014844 <etharp_output+0x4c>
 8014836:	4b69      	ldr	r3, [pc, #420]	; (80149dc <etharp_output+0x1e4>)
 8014838:	f44f 7248 	mov.w	r2, #800	; 0x320
 801483c:	496b      	ldr	r1, [pc, #428]	; (80149ec <etharp_output+0x1f4>)
 801483e:	4869      	ldr	r0, [pc, #420]	; (80149e4 <etharp_output+0x1ec>)
 8014840:	f001 ff64 	bl	801670c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	68f9      	ldr	r1, [r7, #12]
 801484a:	4618      	mov	r0, r3
 801484c:	f000 ff14 	bl	8015678 <ip4_addr_isbroadcast_u32>
 8014850:	4603      	mov	r3, r0
 8014852:	2b00      	cmp	r3, #0
 8014854:	d002      	beq.n	801485c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014856:	4b66      	ldr	r3, [pc, #408]	; (80149f0 <etharp_output+0x1f8>)
 8014858:	61fb      	str	r3, [r7, #28]
 801485a:	e0af      	b.n	80149bc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014864:	2be0      	cmp	r3, #224	; 0xe0
 8014866:	d118      	bne.n	801489a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014868:	2301      	movs	r3, #1
 801486a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801486c:	2300      	movs	r3, #0
 801486e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014870:	235e      	movs	r3, #94	; 0x5e
 8014872:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	3301      	adds	r3, #1
 8014878:	781b      	ldrb	r3, [r3, #0]
 801487a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801487e:	b2db      	uxtb	r3, r3
 8014880:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	3302      	adds	r3, #2
 8014886:	781b      	ldrb	r3, [r3, #0]
 8014888:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	3303      	adds	r3, #3
 801488e:	781b      	ldrb	r3, [r3, #0]
 8014890:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014892:	f107 0310 	add.w	r3, r7, #16
 8014896:	61fb      	str	r3, [r7, #28]
 8014898:	e090      	b.n	80149bc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	681a      	ldr	r2, [r3, #0]
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	3304      	adds	r3, #4
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	405a      	eors	r2, r3
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	3308      	adds	r3, #8
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	4013      	ands	r3, r2
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d012      	beq.n	80148d8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80148b8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80148bc:	4293      	cmp	r3, r2
 80148be:	d00b      	beq.n	80148d8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	330c      	adds	r3, #12
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d003      	beq.n	80148d2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	330c      	adds	r3, #12
 80148ce:	61bb      	str	r3, [r7, #24]
 80148d0:	e002      	b.n	80148d8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80148d2:	f06f 0303 	mvn.w	r3, #3
 80148d6:	e07d      	b.n	80149d4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80148d8:	4b46      	ldr	r3, [pc, #280]	; (80149f4 <etharp_output+0x1fc>)
 80148da:	781b      	ldrb	r3, [r3, #0]
 80148dc:	4619      	mov	r1, r3
 80148de:	4a46      	ldr	r2, [pc, #280]	; (80149f8 <etharp_output+0x200>)
 80148e0:	460b      	mov	r3, r1
 80148e2:	005b      	lsls	r3, r3, #1
 80148e4:	440b      	add	r3, r1
 80148e6:	00db      	lsls	r3, r3, #3
 80148e8:	4413      	add	r3, r2
 80148ea:	3314      	adds	r3, #20
 80148ec:	781b      	ldrb	r3, [r3, #0]
 80148ee:	2b01      	cmp	r3, #1
 80148f0:	d925      	bls.n	801493e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80148f2:	4b40      	ldr	r3, [pc, #256]	; (80149f4 <etharp_output+0x1fc>)
 80148f4:	781b      	ldrb	r3, [r3, #0]
 80148f6:	4619      	mov	r1, r3
 80148f8:	4a3f      	ldr	r2, [pc, #252]	; (80149f8 <etharp_output+0x200>)
 80148fa:	460b      	mov	r3, r1
 80148fc:	005b      	lsls	r3, r3, #1
 80148fe:	440b      	add	r3, r1
 8014900:	00db      	lsls	r3, r3, #3
 8014902:	4413      	add	r3, r2
 8014904:	3308      	adds	r3, #8
 8014906:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014908:	68fa      	ldr	r2, [r7, #12]
 801490a:	429a      	cmp	r2, r3
 801490c:	d117      	bne.n	801493e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801490e:	69bb      	ldr	r3, [r7, #24]
 8014910:	681a      	ldr	r2, [r3, #0]
 8014912:	4b38      	ldr	r3, [pc, #224]	; (80149f4 <etharp_output+0x1fc>)
 8014914:	781b      	ldrb	r3, [r3, #0]
 8014916:	4618      	mov	r0, r3
 8014918:	4937      	ldr	r1, [pc, #220]	; (80149f8 <etharp_output+0x200>)
 801491a:	4603      	mov	r3, r0
 801491c:	005b      	lsls	r3, r3, #1
 801491e:	4403      	add	r3, r0
 8014920:	00db      	lsls	r3, r3, #3
 8014922:	440b      	add	r3, r1
 8014924:	3304      	adds	r3, #4
 8014926:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014928:	429a      	cmp	r2, r3
 801492a:	d108      	bne.n	801493e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801492c:	4b31      	ldr	r3, [pc, #196]	; (80149f4 <etharp_output+0x1fc>)
 801492e:	781b      	ldrb	r3, [r3, #0]
 8014930:	461a      	mov	r2, r3
 8014932:	68b9      	ldr	r1, [r7, #8]
 8014934:	68f8      	ldr	r0, [r7, #12]
 8014936:	f7ff fec5 	bl	80146c4 <etharp_output_to_arp_index>
 801493a:	4603      	mov	r3, r0
 801493c:	e04a      	b.n	80149d4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801493e:	2300      	movs	r3, #0
 8014940:	75fb      	strb	r3, [r7, #23]
 8014942:	e031      	b.n	80149a8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014944:	7dfa      	ldrb	r2, [r7, #23]
 8014946:	492c      	ldr	r1, [pc, #176]	; (80149f8 <etharp_output+0x200>)
 8014948:	4613      	mov	r3, r2
 801494a:	005b      	lsls	r3, r3, #1
 801494c:	4413      	add	r3, r2
 801494e:	00db      	lsls	r3, r3, #3
 8014950:	440b      	add	r3, r1
 8014952:	3314      	adds	r3, #20
 8014954:	781b      	ldrb	r3, [r3, #0]
 8014956:	2b01      	cmp	r3, #1
 8014958:	d923      	bls.n	80149a2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801495a:	7dfa      	ldrb	r2, [r7, #23]
 801495c:	4926      	ldr	r1, [pc, #152]	; (80149f8 <etharp_output+0x200>)
 801495e:	4613      	mov	r3, r2
 8014960:	005b      	lsls	r3, r3, #1
 8014962:	4413      	add	r3, r2
 8014964:	00db      	lsls	r3, r3, #3
 8014966:	440b      	add	r3, r1
 8014968:	3308      	adds	r3, #8
 801496a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801496c:	68fa      	ldr	r2, [r7, #12]
 801496e:	429a      	cmp	r2, r3
 8014970:	d117      	bne.n	80149a2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014972:	69bb      	ldr	r3, [r7, #24]
 8014974:	6819      	ldr	r1, [r3, #0]
 8014976:	7dfa      	ldrb	r2, [r7, #23]
 8014978:	481f      	ldr	r0, [pc, #124]	; (80149f8 <etharp_output+0x200>)
 801497a:	4613      	mov	r3, r2
 801497c:	005b      	lsls	r3, r3, #1
 801497e:	4413      	add	r3, r2
 8014980:	00db      	lsls	r3, r3, #3
 8014982:	4403      	add	r3, r0
 8014984:	3304      	adds	r3, #4
 8014986:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014988:	4299      	cmp	r1, r3
 801498a:	d10a      	bne.n	80149a2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801498c:	4a19      	ldr	r2, [pc, #100]	; (80149f4 <etharp_output+0x1fc>)
 801498e:	7dfb      	ldrb	r3, [r7, #23]
 8014990:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014992:	7dfb      	ldrb	r3, [r7, #23]
 8014994:	461a      	mov	r2, r3
 8014996:	68b9      	ldr	r1, [r7, #8]
 8014998:	68f8      	ldr	r0, [r7, #12]
 801499a:	f7ff fe93 	bl	80146c4 <etharp_output_to_arp_index>
 801499e:	4603      	mov	r3, r0
 80149a0:	e018      	b.n	80149d4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80149a2:	7dfb      	ldrb	r3, [r7, #23]
 80149a4:	3301      	adds	r3, #1
 80149a6:	75fb      	strb	r3, [r7, #23]
 80149a8:	7dfb      	ldrb	r3, [r7, #23]
 80149aa:	2b09      	cmp	r3, #9
 80149ac:	d9ca      	bls.n	8014944 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80149ae:	68ba      	ldr	r2, [r7, #8]
 80149b0:	69b9      	ldr	r1, [r7, #24]
 80149b2:	68f8      	ldr	r0, [r7, #12]
 80149b4:	f000 f822 	bl	80149fc <etharp_query>
 80149b8:	4603      	mov	r3, r0
 80149ba:	e00b      	b.n	80149d4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80149c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80149c6:	9300      	str	r3, [sp, #0]
 80149c8:	69fb      	ldr	r3, [r7, #28]
 80149ca:	68b9      	ldr	r1, [r7, #8]
 80149cc:	68f8      	ldr	r0, [r7, #12]
 80149ce:	f001 fd57 	bl	8016480 <ethernet_output>
 80149d2:	4603      	mov	r3, r0
}
 80149d4:	4618      	mov	r0, r3
 80149d6:	3720      	adds	r7, #32
 80149d8:	46bd      	mov	sp, r7
 80149da:	bd80      	pop	{r7, pc}
 80149dc:	08019ba8 	.word	0x08019ba8
 80149e0:	08019cf8 	.word	0x08019cf8
 80149e4:	08019c20 	.word	0x08019c20
 80149e8:	08019d48 	.word	0x08019d48
 80149ec:	08019ce8 	.word	0x08019ce8
 80149f0:	08028d14 	.word	0x08028d14
 80149f4:	20000598 	.word	0x20000598
 80149f8:	200004a8 	.word	0x200004a8

080149fc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b08c      	sub	sp, #48	; 0x30
 8014a00:	af02      	add	r7, sp, #8
 8014a02:	60f8      	str	r0, [r7, #12]
 8014a04:	60b9      	str	r1, [r7, #8]
 8014a06:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	3326      	adds	r3, #38	; 0x26
 8014a0c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014a0e:	23ff      	movs	r3, #255	; 0xff
 8014a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014a14:	2300      	movs	r3, #0
 8014a16:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014a18:	68bb      	ldr	r3, [r7, #8]
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	68f9      	ldr	r1, [r7, #12]
 8014a1e:	4618      	mov	r0, r3
 8014a20:	f000 fe2a 	bl	8015678 <ip4_addr_isbroadcast_u32>
 8014a24:	4603      	mov	r3, r0
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d10c      	bne.n	8014a44 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014a2a:	68bb      	ldr	r3, [r7, #8]
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014a32:	2be0      	cmp	r3, #224	; 0xe0
 8014a34:	d006      	beq.n	8014a44 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014a36:	68bb      	ldr	r3, [r7, #8]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d003      	beq.n	8014a44 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014a3c:	68bb      	ldr	r3, [r7, #8]
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d102      	bne.n	8014a4a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014a44:	f06f 030f 	mvn.w	r3, #15
 8014a48:	e102      	b.n	8014c50 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014a4a:	68fa      	ldr	r2, [r7, #12]
 8014a4c:	2101      	movs	r1, #1
 8014a4e:	68b8      	ldr	r0, [r7, #8]
 8014a50:	f7ff fb5c 	bl	801410c <etharp_find_entry>
 8014a54:	4603      	mov	r3, r0
 8014a56:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014a58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	da02      	bge.n	8014a66 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014a60:	8a7b      	ldrh	r3, [r7, #18]
 8014a62:	b25b      	sxtb	r3, r3
 8014a64:	e0f4      	b.n	8014c50 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014a66:	8a7b      	ldrh	r3, [r7, #18]
 8014a68:	2b7e      	cmp	r3, #126	; 0x7e
 8014a6a:	d906      	bls.n	8014a7a <etharp_query+0x7e>
 8014a6c:	4b7a      	ldr	r3, [pc, #488]	; (8014c58 <etharp_query+0x25c>)
 8014a6e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014a72:	497a      	ldr	r1, [pc, #488]	; (8014c5c <etharp_query+0x260>)
 8014a74:	487a      	ldr	r0, [pc, #488]	; (8014c60 <etharp_query+0x264>)
 8014a76:	f001 fe49 	bl	801670c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014a7a:	8a7b      	ldrh	r3, [r7, #18]
 8014a7c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014a7e:	7c7a      	ldrb	r2, [r7, #17]
 8014a80:	4978      	ldr	r1, [pc, #480]	; (8014c64 <etharp_query+0x268>)
 8014a82:	4613      	mov	r3, r2
 8014a84:	005b      	lsls	r3, r3, #1
 8014a86:	4413      	add	r3, r2
 8014a88:	00db      	lsls	r3, r3, #3
 8014a8a:	440b      	add	r3, r1
 8014a8c:	3314      	adds	r3, #20
 8014a8e:	781b      	ldrb	r3, [r3, #0]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d115      	bne.n	8014ac0 <etharp_query+0xc4>
    is_new_entry = 1;
 8014a94:	2301      	movs	r3, #1
 8014a96:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014a98:	7c7a      	ldrb	r2, [r7, #17]
 8014a9a:	4972      	ldr	r1, [pc, #456]	; (8014c64 <etharp_query+0x268>)
 8014a9c:	4613      	mov	r3, r2
 8014a9e:	005b      	lsls	r3, r3, #1
 8014aa0:	4413      	add	r3, r2
 8014aa2:	00db      	lsls	r3, r3, #3
 8014aa4:	440b      	add	r3, r1
 8014aa6:	3314      	adds	r3, #20
 8014aa8:	2201      	movs	r2, #1
 8014aaa:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014aac:	7c7a      	ldrb	r2, [r7, #17]
 8014aae:	496d      	ldr	r1, [pc, #436]	; (8014c64 <etharp_query+0x268>)
 8014ab0:	4613      	mov	r3, r2
 8014ab2:	005b      	lsls	r3, r3, #1
 8014ab4:	4413      	add	r3, r2
 8014ab6:	00db      	lsls	r3, r3, #3
 8014ab8:	440b      	add	r3, r1
 8014aba:	3308      	adds	r3, #8
 8014abc:	68fa      	ldr	r2, [r7, #12]
 8014abe:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014ac0:	7c7a      	ldrb	r2, [r7, #17]
 8014ac2:	4968      	ldr	r1, [pc, #416]	; (8014c64 <etharp_query+0x268>)
 8014ac4:	4613      	mov	r3, r2
 8014ac6:	005b      	lsls	r3, r3, #1
 8014ac8:	4413      	add	r3, r2
 8014aca:	00db      	lsls	r3, r3, #3
 8014acc:	440b      	add	r3, r1
 8014ace:	3314      	adds	r3, #20
 8014ad0:	781b      	ldrb	r3, [r3, #0]
 8014ad2:	2b01      	cmp	r3, #1
 8014ad4:	d011      	beq.n	8014afa <etharp_query+0xfe>
 8014ad6:	7c7a      	ldrb	r2, [r7, #17]
 8014ad8:	4962      	ldr	r1, [pc, #392]	; (8014c64 <etharp_query+0x268>)
 8014ada:	4613      	mov	r3, r2
 8014adc:	005b      	lsls	r3, r3, #1
 8014ade:	4413      	add	r3, r2
 8014ae0:	00db      	lsls	r3, r3, #3
 8014ae2:	440b      	add	r3, r1
 8014ae4:	3314      	adds	r3, #20
 8014ae6:	781b      	ldrb	r3, [r3, #0]
 8014ae8:	2b01      	cmp	r3, #1
 8014aea:	d806      	bhi.n	8014afa <etharp_query+0xfe>
 8014aec:	4b5a      	ldr	r3, [pc, #360]	; (8014c58 <etharp_query+0x25c>)
 8014aee:	f240 32cf 	movw	r2, #975	; 0x3cf
 8014af2:	495d      	ldr	r1, [pc, #372]	; (8014c68 <etharp_query+0x26c>)
 8014af4:	485a      	ldr	r0, [pc, #360]	; (8014c60 <etharp_query+0x264>)
 8014af6:	f001 fe09 	bl	801670c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014afa:	6a3b      	ldr	r3, [r7, #32]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d102      	bne.n	8014b06 <etharp_query+0x10a>
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d10c      	bne.n	8014b20 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014b06:	68b9      	ldr	r1, [r7, #8]
 8014b08:	68f8      	ldr	r0, [r7, #12]
 8014b0a:	f000 f963 	bl	8014dd4 <etharp_request>
 8014b0e:	4603      	mov	r3, r0
 8014b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d102      	bne.n	8014b20 <etharp_query+0x124>
      return result;
 8014b1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014b1e:	e097      	b.n	8014c50 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d106      	bne.n	8014b34 <etharp_query+0x138>
 8014b26:	4b4c      	ldr	r3, [pc, #304]	; (8014c58 <etharp_query+0x25c>)
 8014b28:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014b2c:	494f      	ldr	r1, [pc, #316]	; (8014c6c <etharp_query+0x270>)
 8014b2e:	484c      	ldr	r0, [pc, #304]	; (8014c60 <etharp_query+0x264>)
 8014b30:	f001 fdec 	bl	801670c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014b34:	7c7a      	ldrb	r2, [r7, #17]
 8014b36:	494b      	ldr	r1, [pc, #300]	; (8014c64 <etharp_query+0x268>)
 8014b38:	4613      	mov	r3, r2
 8014b3a:	005b      	lsls	r3, r3, #1
 8014b3c:	4413      	add	r3, r2
 8014b3e:	00db      	lsls	r3, r3, #3
 8014b40:	440b      	add	r3, r1
 8014b42:	3314      	adds	r3, #20
 8014b44:	781b      	ldrb	r3, [r3, #0]
 8014b46:	2b01      	cmp	r3, #1
 8014b48:	d918      	bls.n	8014b7c <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014b4a:	4a49      	ldr	r2, [pc, #292]	; (8014c70 <etharp_query+0x274>)
 8014b4c:	7c7b      	ldrb	r3, [r7, #17]
 8014b4e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014b50:	7c7a      	ldrb	r2, [r7, #17]
 8014b52:	4613      	mov	r3, r2
 8014b54:	005b      	lsls	r3, r3, #1
 8014b56:	4413      	add	r3, r2
 8014b58:	00db      	lsls	r3, r3, #3
 8014b5a:	3308      	adds	r3, #8
 8014b5c:	4a41      	ldr	r2, [pc, #260]	; (8014c64 <etharp_query+0x268>)
 8014b5e:	4413      	add	r3, r2
 8014b60:	1d1a      	adds	r2, r3, #4
 8014b62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014b66:	9300      	str	r3, [sp, #0]
 8014b68:	4613      	mov	r3, r2
 8014b6a:	697a      	ldr	r2, [r7, #20]
 8014b6c:	6879      	ldr	r1, [r7, #4]
 8014b6e:	68f8      	ldr	r0, [r7, #12]
 8014b70:	f001 fc86 	bl	8016480 <ethernet_output>
 8014b74:	4603      	mov	r3, r0
 8014b76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014b7a:	e067      	b.n	8014c4c <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014b7c:	7c7a      	ldrb	r2, [r7, #17]
 8014b7e:	4939      	ldr	r1, [pc, #228]	; (8014c64 <etharp_query+0x268>)
 8014b80:	4613      	mov	r3, r2
 8014b82:	005b      	lsls	r3, r3, #1
 8014b84:	4413      	add	r3, r2
 8014b86:	00db      	lsls	r3, r3, #3
 8014b88:	440b      	add	r3, r1
 8014b8a:	3314      	adds	r3, #20
 8014b8c:	781b      	ldrb	r3, [r3, #0]
 8014b8e:	2b01      	cmp	r3, #1
 8014b90:	d15c      	bne.n	8014c4c <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014b92:	2300      	movs	r3, #0
 8014b94:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014b9a:	e01c      	b.n	8014bd6 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014b9c:	69fb      	ldr	r3, [r7, #28]
 8014b9e:	895a      	ldrh	r2, [r3, #10]
 8014ba0:	69fb      	ldr	r3, [r7, #28]
 8014ba2:	891b      	ldrh	r3, [r3, #8]
 8014ba4:	429a      	cmp	r2, r3
 8014ba6:	d10a      	bne.n	8014bbe <etharp_query+0x1c2>
 8014ba8:	69fb      	ldr	r3, [r7, #28]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d006      	beq.n	8014bbe <etharp_query+0x1c2>
 8014bb0:	4b29      	ldr	r3, [pc, #164]	; (8014c58 <etharp_query+0x25c>)
 8014bb2:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014bb6:	492f      	ldr	r1, [pc, #188]	; (8014c74 <etharp_query+0x278>)
 8014bb8:	4829      	ldr	r0, [pc, #164]	; (8014c60 <etharp_query+0x264>)
 8014bba:	f001 fda7 	bl	801670c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014bbe:	69fb      	ldr	r3, [r7, #28]
 8014bc0:	7b1b      	ldrb	r3, [r3, #12]
 8014bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d002      	beq.n	8014bd0 <etharp_query+0x1d4>
        copy_needed = 1;
 8014bca:	2301      	movs	r3, #1
 8014bcc:	61bb      	str	r3, [r7, #24]
        break;
 8014bce:	e005      	b.n	8014bdc <etharp_query+0x1e0>
      }
      p = p->next;
 8014bd0:	69fb      	ldr	r3, [r7, #28]
 8014bd2:	681b      	ldr	r3, [r3, #0]
 8014bd4:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014bd6:	69fb      	ldr	r3, [r7, #28]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d1df      	bne.n	8014b9c <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8014bdc:	69bb      	ldr	r3, [r7, #24]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d007      	beq.n	8014bf2 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014be2:	687a      	ldr	r2, [r7, #4]
 8014be4:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014be8:	200e      	movs	r0, #14
 8014bea:	f7f7 fb75 	bl	800c2d8 <pbuf_clone>
 8014bee:	61f8      	str	r0, [r7, #28]
 8014bf0:	e004      	b.n	8014bfc <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014bf6:	69f8      	ldr	r0, [r7, #28]
 8014bf8:	f7f7 f9a2 	bl	800bf40 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014bfc:	69fb      	ldr	r3, [r7, #28]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d021      	beq.n	8014c46 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014c02:	7c7a      	ldrb	r2, [r7, #17]
 8014c04:	4917      	ldr	r1, [pc, #92]	; (8014c64 <etharp_query+0x268>)
 8014c06:	4613      	mov	r3, r2
 8014c08:	005b      	lsls	r3, r3, #1
 8014c0a:	4413      	add	r3, r2
 8014c0c:	00db      	lsls	r3, r3, #3
 8014c0e:	440b      	add	r3, r1
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d00a      	beq.n	8014c2c <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014c16:	7c7a      	ldrb	r2, [r7, #17]
 8014c18:	4912      	ldr	r1, [pc, #72]	; (8014c64 <etharp_query+0x268>)
 8014c1a:	4613      	mov	r3, r2
 8014c1c:	005b      	lsls	r3, r3, #1
 8014c1e:	4413      	add	r3, r2
 8014c20:	00db      	lsls	r3, r3, #3
 8014c22:	440b      	add	r3, r1
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	4618      	mov	r0, r3
 8014c28:	f7f7 f8ea 	bl	800be00 <pbuf_free>
      }
      arp_table[i].q = p;
 8014c2c:	7c7a      	ldrb	r2, [r7, #17]
 8014c2e:	490d      	ldr	r1, [pc, #52]	; (8014c64 <etharp_query+0x268>)
 8014c30:	4613      	mov	r3, r2
 8014c32:	005b      	lsls	r3, r3, #1
 8014c34:	4413      	add	r3, r2
 8014c36:	00db      	lsls	r3, r3, #3
 8014c38:	440b      	add	r3, r1
 8014c3a:	69fa      	ldr	r2, [r7, #28]
 8014c3c:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014c3e:	2300      	movs	r3, #0
 8014c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014c44:	e002      	b.n	8014c4c <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014c46:	23ff      	movs	r3, #255	; 0xff
 8014c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014c4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014c50:	4618      	mov	r0, r3
 8014c52:	3728      	adds	r7, #40	; 0x28
 8014c54:	46bd      	mov	sp, r7
 8014c56:	bd80      	pop	{r7, pc}
 8014c58:	08019ba8 	.word	0x08019ba8
 8014c5c:	08019d54 	.word	0x08019d54
 8014c60:	08019c20 	.word	0x08019c20
 8014c64:	200004a8 	.word	0x200004a8
 8014c68:	08019d64 	.word	0x08019d64
 8014c6c:	08019d48 	.word	0x08019d48
 8014c70:	20000598 	.word	0x20000598
 8014c74:	08019d8c 	.word	0x08019d8c

08014c78 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b08a      	sub	sp, #40	; 0x28
 8014c7c:	af02      	add	r7, sp, #8
 8014c7e:	60f8      	str	r0, [r7, #12]
 8014c80:	60b9      	str	r1, [r7, #8]
 8014c82:	607a      	str	r2, [r7, #4]
 8014c84:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014c86:	2300      	movs	r3, #0
 8014c88:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d106      	bne.n	8014c9e <etharp_raw+0x26>
 8014c90:	4b3a      	ldr	r3, [pc, #232]	; (8014d7c <etharp_raw+0x104>)
 8014c92:	f240 4257 	movw	r2, #1111	; 0x457
 8014c96:	493a      	ldr	r1, [pc, #232]	; (8014d80 <etharp_raw+0x108>)
 8014c98:	483a      	ldr	r0, [pc, #232]	; (8014d84 <etharp_raw+0x10c>)
 8014c9a:	f001 fd37 	bl	801670c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014c9e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014ca2:	211c      	movs	r1, #28
 8014ca4:	200e      	movs	r0, #14
 8014ca6:	f7f6 fdcb 	bl	800b840 <pbuf_alloc>
 8014caa:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014cac:	69bb      	ldr	r3, [r7, #24]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d102      	bne.n	8014cb8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8014cb6:	e05d      	b.n	8014d74 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014cb8:	69bb      	ldr	r3, [r7, #24]
 8014cba:	895b      	ldrh	r3, [r3, #10]
 8014cbc:	2b1b      	cmp	r3, #27
 8014cbe:	d806      	bhi.n	8014cce <etharp_raw+0x56>
 8014cc0:	4b2e      	ldr	r3, [pc, #184]	; (8014d7c <etharp_raw+0x104>)
 8014cc2:	f240 4263 	movw	r2, #1123	; 0x463
 8014cc6:	4930      	ldr	r1, [pc, #192]	; (8014d88 <etharp_raw+0x110>)
 8014cc8:	482e      	ldr	r0, [pc, #184]	; (8014d84 <etharp_raw+0x10c>)
 8014cca:	f001 fd1f 	bl	801670c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014cce:	69bb      	ldr	r3, [r7, #24]
 8014cd0:	685b      	ldr	r3, [r3, #4]
 8014cd2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014cd4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	f7f5 fdf1 	bl	800a8be <lwip_htons>
 8014cdc:	4603      	mov	r3, r0
 8014cde:	461a      	mov	r2, r3
 8014ce0:	697b      	ldr	r3, [r7, #20]
 8014ce2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014cea:	2b06      	cmp	r3, #6
 8014cec:	d006      	beq.n	8014cfc <etharp_raw+0x84>
 8014cee:	4b23      	ldr	r3, [pc, #140]	; (8014d7c <etharp_raw+0x104>)
 8014cf0:	f240 426a 	movw	r2, #1130	; 0x46a
 8014cf4:	4925      	ldr	r1, [pc, #148]	; (8014d8c <etharp_raw+0x114>)
 8014cf6:	4823      	ldr	r0, [pc, #140]	; (8014d84 <etharp_raw+0x10c>)
 8014cf8:	f001 fd08 	bl	801670c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014cfc:	697b      	ldr	r3, [r7, #20]
 8014cfe:	3308      	adds	r3, #8
 8014d00:	2206      	movs	r2, #6
 8014d02:	6839      	ldr	r1, [r7, #0]
 8014d04:	4618      	mov	r0, r3
 8014d06:	f001 fc46 	bl	8016596 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014d0a:	697b      	ldr	r3, [r7, #20]
 8014d0c:	3312      	adds	r3, #18
 8014d0e:	2206      	movs	r2, #6
 8014d10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014d12:	4618      	mov	r0, r3
 8014d14:	f001 fc3f 	bl	8016596 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014d18:	697b      	ldr	r3, [r7, #20]
 8014d1a:	330e      	adds	r3, #14
 8014d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014d1e:	6812      	ldr	r2, [r2, #0]
 8014d20:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014d22:	697b      	ldr	r3, [r7, #20]
 8014d24:	3318      	adds	r3, #24
 8014d26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d28:	6812      	ldr	r2, [r2, #0]
 8014d2a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014d2c:	697b      	ldr	r3, [r7, #20]
 8014d2e:	2200      	movs	r2, #0
 8014d30:	701a      	strb	r2, [r3, #0]
 8014d32:	2200      	movs	r2, #0
 8014d34:	f042 0201 	orr.w	r2, r2, #1
 8014d38:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014d3a:	697b      	ldr	r3, [r7, #20]
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	f042 0208 	orr.w	r2, r2, #8
 8014d42:	709a      	strb	r2, [r3, #2]
 8014d44:	2200      	movs	r2, #0
 8014d46:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014d48:	697b      	ldr	r3, [r7, #20]
 8014d4a:	2206      	movs	r2, #6
 8014d4c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014d4e:	697b      	ldr	r3, [r7, #20]
 8014d50:	2204      	movs	r2, #4
 8014d52:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014d54:	f640 0306 	movw	r3, #2054	; 0x806
 8014d58:	9300      	str	r3, [sp, #0]
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	68ba      	ldr	r2, [r7, #8]
 8014d5e:	69b9      	ldr	r1, [r7, #24]
 8014d60:	68f8      	ldr	r0, [r7, #12]
 8014d62:	f001 fb8d 	bl	8016480 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014d66:	69b8      	ldr	r0, [r7, #24]
 8014d68:	f7f7 f84a 	bl	800be00 <pbuf_free>
  p = NULL;
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014d70:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014d74:	4618      	mov	r0, r3
 8014d76:	3720      	adds	r7, #32
 8014d78:	46bd      	mov	sp, r7
 8014d7a:	bd80      	pop	{r7, pc}
 8014d7c:	08019ba8 	.word	0x08019ba8
 8014d80:	08019cf8 	.word	0x08019cf8
 8014d84:	08019c20 	.word	0x08019c20
 8014d88:	08019da8 	.word	0x08019da8
 8014d8c:	08019ddc 	.word	0x08019ddc

08014d90 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b088      	sub	sp, #32
 8014d94:	af04      	add	r7, sp, #16
 8014d96:	60f8      	str	r0, [r7, #12]
 8014d98:	60b9      	str	r1, [r7, #8]
 8014d9a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014dac:	2201      	movs	r2, #1
 8014dae:	9203      	str	r2, [sp, #12]
 8014db0:	68ba      	ldr	r2, [r7, #8]
 8014db2:	9202      	str	r2, [sp, #8]
 8014db4:	4a06      	ldr	r2, [pc, #24]	; (8014dd0 <etharp_request_dst+0x40>)
 8014db6:	9201      	str	r2, [sp, #4]
 8014db8:	9300      	str	r3, [sp, #0]
 8014dba:	4603      	mov	r3, r0
 8014dbc:	687a      	ldr	r2, [r7, #4]
 8014dbe:	68f8      	ldr	r0, [r7, #12]
 8014dc0:	f7ff ff5a 	bl	8014c78 <etharp_raw>
 8014dc4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	3710      	adds	r7, #16
 8014dca:	46bd      	mov	sp, r7
 8014dcc:	bd80      	pop	{r7, pc}
 8014dce:	bf00      	nop
 8014dd0:	08028d1c 	.word	0x08028d1c

08014dd4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b082      	sub	sp, #8
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	6078      	str	r0, [r7, #4]
 8014ddc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014dde:	4a05      	ldr	r2, [pc, #20]	; (8014df4 <etharp_request+0x20>)
 8014de0:	6839      	ldr	r1, [r7, #0]
 8014de2:	6878      	ldr	r0, [r7, #4]
 8014de4:	f7ff ffd4 	bl	8014d90 <etharp_request_dst>
 8014de8:	4603      	mov	r3, r0
}
 8014dea:	4618      	mov	r0, r3
 8014dec:	3708      	adds	r7, #8
 8014dee:	46bd      	mov	sp, r7
 8014df0:	bd80      	pop	{r7, pc}
 8014df2:	bf00      	nop
 8014df4:	08028d14 	.word	0x08028d14

08014df8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014df8:	b580      	push	{r7, lr}
 8014dfa:	b08e      	sub	sp, #56	; 0x38
 8014dfc:	af04      	add	r7, sp, #16
 8014dfe:	6078      	str	r0, [r7, #4]
 8014e00:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014e02:	4b79      	ldr	r3, [pc, #484]	; (8014fe8 <icmp_input+0x1f0>)
 8014e04:	689b      	ldr	r3, [r3, #8]
 8014e06:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e0a:	781b      	ldrb	r3, [r3, #0]
 8014e0c:	f003 030f 	and.w	r3, r3, #15
 8014e10:	b2db      	uxtb	r3, r3
 8014e12:	009b      	lsls	r3, r3, #2
 8014e14:	b2db      	uxtb	r3, r3
 8014e16:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014e18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014e1a:	2b13      	cmp	r3, #19
 8014e1c:	f240 80cd 	bls.w	8014fba <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	895b      	ldrh	r3, [r3, #10]
 8014e24:	2b03      	cmp	r3, #3
 8014e26:	f240 80ca 	bls.w	8014fbe <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	685b      	ldr	r3, [r3, #4]
 8014e2e:	781b      	ldrb	r3, [r3, #0]
 8014e30:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014e34:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	f000 80b7 	beq.w	8014fac <icmp_input+0x1b4>
 8014e3e:	2b08      	cmp	r3, #8
 8014e40:	f040 80b7 	bne.w	8014fb2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014e44:	4b69      	ldr	r3, [pc, #420]	; (8014fec <icmp_input+0x1f4>)
 8014e46:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014e48:	4b67      	ldr	r3, [pc, #412]	; (8014fe8 <icmp_input+0x1f0>)
 8014e4a:	695b      	ldr	r3, [r3, #20]
 8014e4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014e50:	2be0      	cmp	r3, #224	; 0xe0
 8014e52:	f000 80bb 	beq.w	8014fcc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014e56:	4b64      	ldr	r3, [pc, #400]	; (8014fe8 <icmp_input+0x1f0>)
 8014e58:	695a      	ldr	r2, [r3, #20]
 8014e5a:	4b63      	ldr	r3, [pc, #396]	; (8014fe8 <icmp_input+0x1f0>)
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	4619      	mov	r1, r3
 8014e60:	4610      	mov	r0, r2
 8014e62:	f000 fc09 	bl	8015678 <ip4_addr_isbroadcast_u32>
 8014e66:	4603      	mov	r3, r0
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	f040 80b1 	bne.w	8014fd0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	891b      	ldrh	r3, [r3, #8]
 8014e72:	2b07      	cmp	r3, #7
 8014e74:	f240 80a5 	bls.w	8014fc2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014e78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014e7a:	330e      	adds	r3, #14
 8014e7c:	4619      	mov	r1, r3
 8014e7e:	6878      	ldr	r0, [r7, #4]
 8014e80:	f7f6 ff28 	bl	800bcd4 <pbuf_add_header>
 8014e84:	4603      	mov	r3, r0
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d04b      	beq.n	8014f22 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	891a      	ldrh	r2, [r3, #8]
 8014e8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014e90:	4413      	add	r3, r2
 8014e92:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	891b      	ldrh	r3, [r3, #8]
 8014e98:	8b7a      	ldrh	r2, [r7, #26]
 8014e9a:	429a      	cmp	r2, r3
 8014e9c:	f0c0 809a 	bcc.w	8014fd4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014ea0:	8b7b      	ldrh	r3, [r7, #26]
 8014ea2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014ea6:	4619      	mov	r1, r3
 8014ea8:	200e      	movs	r0, #14
 8014eaa:	f7f6 fcc9 	bl	800b840 <pbuf_alloc>
 8014eae:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014eb0:	697b      	ldr	r3, [r7, #20]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	f000 8090 	beq.w	8014fd8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014eb8:	697b      	ldr	r3, [r7, #20]
 8014eba:	895b      	ldrh	r3, [r3, #10]
 8014ebc:	461a      	mov	r2, r3
 8014ebe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ec0:	3308      	adds	r3, #8
 8014ec2:	429a      	cmp	r2, r3
 8014ec4:	d203      	bcs.n	8014ece <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014ec6:	6978      	ldr	r0, [r7, #20]
 8014ec8:	f7f6 ff9a 	bl	800be00 <pbuf_free>
          goto icmperr;
 8014ecc:	e085      	b.n	8014fda <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014ece:	697b      	ldr	r3, [r7, #20]
 8014ed0:	685b      	ldr	r3, [r3, #4]
 8014ed2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014ed4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014ed6:	4618      	mov	r0, r3
 8014ed8:	f001 fb5d 	bl	8016596 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014edc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ede:	4619      	mov	r1, r3
 8014ee0:	6978      	ldr	r0, [r7, #20]
 8014ee2:	f7f6 ff07 	bl	800bcf4 <pbuf_remove_header>
 8014ee6:	4603      	mov	r3, r0
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d009      	beq.n	8014f00 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014eec:	4b40      	ldr	r3, [pc, #256]	; (8014ff0 <icmp_input+0x1f8>)
 8014eee:	22b6      	movs	r2, #182	; 0xb6
 8014ef0:	4940      	ldr	r1, [pc, #256]	; (8014ff4 <icmp_input+0x1fc>)
 8014ef2:	4841      	ldr	r0, [pc, #260]	; (8014ff8 <icmp_input+0x200>)
 8014ef4:	f001 fc0a 	bl	801670c <iprintf>
          pbuf_free(r);
 8014ef8:	6978      	ldr	r0, [r7, #20]
 8014efa:	f7f6 ff81 	bl	800be00 <pbuf_free>
          goto icmperr;
 8014efe:	e06c      	b.n	8014fda <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014f00:	6879      	ldr	r1, [r7, #4]
 8014f02:	6978      	ldr	r0, [r7, #20]
 8014f04:	f7f7 f8a4 	bl	800c050 <pbuf_copy>
 8014f08:	4603      	mov	r3, r0
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d003      	beq.n	8014f16 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014f0e:	6978      	ldr	r0, [r7, #20]
 8014f10:	f7f6 ff76 	bl	800be00 <pbuf_free>
          goto icmperr;
 8014f14:	e061      	b.n	8014fda <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014f16:	6878      	ldr	r0, [r7, #4]
 8014f18:	f7f6 ff72 	bl	800be00 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014f1c:	697b      	ldr	r3, [r7, #20]
 8014f1e:	607b      	str	r3, [r7, #4]
 8014f20:	e00f      	b.n	8014f42 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014f22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f24:	330e      	adds	r3, #14
 8014f26:	4619      	mov	r1, r3
 8014f28:	6878      	ldr	r0, [r7, #4]
 8014f2a:	f7f6 fee3 	bl	800bcf4 <pbuf_remove_header>
 8014f2e:	4603      	mov	r3, r0
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d006      	beq.n	8014f42 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014f34:	4b2e      	ldr	r3, [pc, #184]	; (8014ff0 <icmp_input+0x1f8>)
 8014f36:	22c7      	movs	r2, #199	; 0xc7
 8014f38:	4930      	ldr	r1, [pc, #192]	; (8014ffc <icmp_input+0x204>)
 8014f3a:	482f      	ldr	r0, [pc, #188]	; (8014ff8 <icmp_input+0x200>)
 8014f3c:	f001 fbe6 	bl	801670c <iprintf>
          goto icmperr;
 8014f40:	e04b      	b.n	8014fda <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	685b      	ldr	r3, [r3, #4]
 8014f46:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014f48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f4a:	4619      	mov	r1, r3
 8014f4c:	6878      	ldr	r0, [r7, #4]
 8014f4e:	f7f6 fec1 	bl	800bcd4 <pbuf_add_header>
 8014f52:	4603      	mov	r3, r0
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d12b      	bne.n	8014fb0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	685b      	ldr	r3, [r3, #4]
 8014f5c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014f5e:	69fb      	ldr	r3, [r7, #28]
 8014f60:	681a      	ldr	r2, [r3, #0]
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014f66:	4b20      	ldr	r3, [pc, #128]	; (8014fe8 <icmp_input+0x1f0>)
 8014f68:	691a      	ldr	r2, [r3, #16]
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014f6e:	693b      	ldr	r3, [r7, #16]
 8014f70:	2200      	movs	r2, #0
 8014f72:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014f74:	693b      	ldr	r3, [r7, #16]
 8014f76:	2200      	movs	r2, #0
 8014f78:	709a      	strb	r2, [r3, #2]
 8014f7a:	2200      	movs	r2, #0
 8014f7c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	22ff      	movs	r2, #255	; 0xff
 8014f82:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	2200      	movs	r2, #0
 8014f88:	729a      	strb	r2, [r3, #10]
 8014f8a:	2200      	movs	r2, #0
 8014f8c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014f8e:	683b      	ldr	r3, [r7, #0]
 8014f90:	9302      	str	r3, [sp, #8]
 8014f92:	2301      	movs	r3, #1
 8014f94:	9301      	str	r3, [sp, #4]
 8014f96:	2300      	movs	r3, #0
 8014f98:	9300      	str	r3, [sp, #0]
 8014f9a:	23ff      	movs	r3, #255	; 0xff
 8014f9c:	2200      	movs	r2, #0
 8014f9e:	69f9      	ldr	r1, [r7, #28]
 8014fa0:	6878      	ldr	r0, [r7, #4]
 8014fa2:	f000 fa91 	bl	80154c8 <ip4_output_if>
 8014fa6:	4603      	mov	r3, r0
 8014fa8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014faa:	e001      	b.n	8014fb0 <icmp_input+0x1b8>
      break;
 8014fac:	bf00      	nop
 8014fae:	e000      	b.n	8014fb2 <icmp_input+0x1ba>
      break;
 8014fb0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014fb2:	6878      	ldr	r0, [r7, #4]
 8014fb4:	f7f6 ff24 	bl	800be00 <pbuf_free>
  return;
 8014fb8:	e013      	b.n	8014fe2 <icmp_input+0x1ea>
    goto lenerr;
 8014fba:	bf00      	nop
 8014fbc:	e002      	b.n	8014fc4 <icmp_input+0x1cc>
    goto lenerr;
 8014fbe:	bf00      	nop
 8014fc0:	e000      	b.n	8014fc4 <icmp_input+0x1cc>
        goto lenerr;
 8014fc2:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014fc4:	6878      	ldr	r0, [r7, #4]
 8014fc6:	f7f6 ff1b 	bl	800be00 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014fca:	e00a      	b.n	8014fe2 <icmp_input+0x1ea>
        goto icmperr;
 8014fcc:	bf00      	nop
 8014fce:	e004      	b.n	8014fda <icmp_input+0x1e2>
        goto icmperr;
 8014fd0:	bf00      	nop
 8014fd2:	e002      	b.n	8014fda <icmp_input+0x1e2>
          goto icmperr;
 8014fd4:	bf00      	nop
 8014fd6:	e000      	b.n	8014fda <icmp_input+0x1e2>
          goto icmperr;
 8014fd8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014fda:	6878      	ldr	r0, [r7, #4]
 8014fdc:	f7f6 ff10 	bl	800be00 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014fe0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014fe2:	3728      	adds	r7, #40	; 0x28
 8014fe4:	46bd      	mov	sp, r7
 8014fe6:	bd80      	pop	{r7, pc}
 8014fe8:	20004598 	.word	0x20004598
 8014fec:	200045ac 	.word	0x200045ac
 8014ff0:	08019e20 	.word	0x08019e20
 8014ff4:	08019e58 	.word	0x08019e58
 8014ff8:	08019e90 	.word	0x08019e90
 8014ffc:	08019eb8 	.word	0x08019eb8

08015000 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015000:	b580      	push	{r7, lr}
 8015002:	b082      	sub	sp, #8
 8015004:	af00      	add	r7, sp, #0
 8015006:	6078      	str	r0, [r7, #4]
 8015008:	460b      	mov	r3, r1
 801500a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801500c:	78fb      	ldrb	r3, [r7, #3]
 801500e:	461a      	mov	r2, r3
 8015010:	2103      	movs	r1, #3
 8015012:	6878      	ldr	r0, [r7, #4]
 8015014:	f000 f814 	bl	8015040 <icmp_send_response>
}
 8015018:	bf00      	nop
 801501a:	3708      	adds	r7, #8
 801501c:	46bd      	mov	sp, r7
 801501e:	bd80      	pop	{r7, pc}

08015020 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015020:	b580      	push	{r7, lr}
 8015022:	b082      	sub	sp, #8
 8015024:	af00      	add	r7, sp, #0
 8015026:	6078      	str	r0, [r7, #4]
 8015028:	460b      	mov	r3, r1
 801502a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801502c:	78fb      	ldrb	r3, [r7, #3]
 801502e:	461a      	mov	r2, r3
 8015030:	210b      	movs	r1, #11
 8015032:	6878      	ldr	r0, [r7, #4]
 8015034:	f000 f804 	bl	8015040 <icmp_send_response>
}
 8015038:	bf00      	nop
 801503a:	3708      	adds	r7, #8
 801503c:	46bd      	mov	sp, r7
 801503e:	bd80      	pop	{r7, pc}

08015040 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015040:	b580      	push	{r7, lr}
 8015042:	b08c      	sub	sp, #48	; 0x30
 8015044:	af04      	add	r7, sp, #16
 8015046:	6078      	str	r0, [r7, #4]
 8015048:	460b      	mov	r3, r1
 801504a:	70fb      	strb	r3, [r7, #3]
 801504c:	4613      	mov	r3, r2
 801504e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015050:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015054:	2124      	movs	r1, #36	; 0x24
 8015056:	2022      	movs	r0, #34	; 0x22
 8015058:	f7f6 fbf2 	bl	800b840 <pbuf_alloc>
 801505c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801505e:	69fb      	ldr	r3, [r7, #28]
 8015060:	2b00      	cmp	r3, #0
 8015062:	d04c      	beq.n	80150fe <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015064:	69fb      	ldr	r3, [r7, #28]
 8015066:	895b      	ldrh	r3, [r3, #10]
 8015068:	2b23      	cmp	r3, #35	; 0x23
 801506a:	d806      	bhi.n	801507a <icmp_send_response+0x3a>
 801506c:	4b26      	ldr	r3, [pc, #152]	; (8015108 <icmp_send_response+0xc8>)
 801506e:	f240 1269 	movw	r2, #361	; 0x169
 8015072:	4926      	ldr	r1, [pc, #152]	; (801510c <icmp_send_response+0xcc>)
 8015074:	4826      	ldr	r0, [pc, #152]	; (8015110 <icmp_send_response+0xd0>)
 8015076:	f001 fb49 	bl	801670c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	685b      	ldr	r3, [r3, #4]
 801507e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015080:	69fb      	ldr	r3, [r7, #28]
 8015082:	685b      	ldr	r3, [r3, #4]
 8015084:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015086:	697b      	ldr	r3, [r7, #20]
 8015088:	78fa      	ldrb	r2, [r7, #3]
 801508a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801508c:	697b      	ldr	r3, [r7, #20]
 801508e:	78ba      	ldrb	r2, [r7, #2]
 8015090:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015092:	697b      	ldr	r3, [r7, #20]
 8015094:	2200      	movs	r2, #0
 8015096:	711a      	strb	r2, [r3, #4]
 8015098:	2200      	movs	r2, #0
 801509a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801509c:	697b      	ldr	r3, [r7, #20]
 801509e:	2200      	movs	r2, #0
 80150a0:	719a      	strb	r2, [r3, #6]
 80150a2:	2200      	movs	r2, #0
 80150a4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80150a6:	69fb      	ldr	r3, [r7, #28]
 80150a8:	685b      	ldr	r3, [r3, #4]
 80150aa:	f103 0008 	add.w	r0, r3, #8
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	685b      	ldr	r3, [r3, #4]
 80150b2:	221c      	movs	r2, #28
 80150b4:	4619      	mov	r1, r3
 80150b6:	f001 fa6e 	bl	8016596 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80150ba:	69bb      	ldr	r3, [r7, #24]
 80150bc:	68db      	ldr	r3, [r3, #12]
 80150be:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80150c0:	f107 030c 	add.w	r3, r7, #12
 80150c4:	4618      	mov	r0, r3
 80150c6:	f000 f825 	bl	8015114 <ip4_route>
 80150ca:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80150cc:	693b      	ldr	r3, [r7, #16]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d011      	beq.n	80150f6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80150d2:	697b      	ldr	r3, [r7, #20]
 80150d4:	2200      	movs	r2, #0
 80150d6:	709a      	strb	r2, [r3, #2]
 80150d8:	2200      	movs	r2, #0
 80150da:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80150dc:	f107 020c 	add.w	r2, r7, #12
 80150e0:	693b      	ldr	r3, [r7, #16]
 80150e2:	9302      	str	r3, [sp, #8]
 80150e4:	2301      	movs	r3, #1
 80150e6:	9301      	str	r3, [sp, #4]
 80150e8:	2300      	movs	r3, #0
 80150ea:	9300      	str	r3, [sp, #0]
 80150ec:	23ff      	movs	r3, #255	; 0xff
 80150ee:	2100      	movs	r1, #0
 80150f0:	69f8      	ldr	r0, [r7, #28]
 80150f2:	f000 f9e9 	bl	80154c8 <ip4_output_if>
  }
  pbuf_free(q);
 80150f6:	69f8      	ldr	r0, [r7, #28]
 80150f8:	f7f6 fe82 	bl	800be00 <pbuf_free>
 80150fc:	e000      	b.n	8015100 <icmp_send_response+0xc0>
    return;
 80150fe:	bf00      	nop
}
 8015100:	3720      	adds	r7, #32
 8015102:	46bd      	mov	sp, r7
 8015104:	bd80      	pop	{r7, pc}
 8015106:	bf00      	nop
 8015108:	08019e20 	.word	0x08019e20
 801510c:	08019eec 	.word	0x08019eec
 8015110:	08019e90 	.word	0x08019e90

08015114 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015114:	b480      	push	{r7}
 8015116:	b085      	sub	sp, #20
 8015118:	af00      	add	r7, sp, #0
 801511a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801511c:	4b33      	ldr	r3, [pc, #204]	; (80151ec <ip4_route+0xd8>)
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	60fb      	str	r3, [r7, #12]
 8015122:	e036      	b.n	8015192 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801512a:	f003 0301 	and.w	r3, r3, #1
 801512e:	b2db      	uxtb	r3, r3
 8015130:	2b00      	cmp	r3, #0
 8015132:	d02b      	beq.n	801518c <ip4_route+0x78>
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801513a:	089b      	lsrs	r3, r3, #2
 801513c:	f003 0301 	and.w	r3, r3, #1
 8015140:	b2db      	uxtb	r3, r3
 8015142:	2b00      	cmp	r3, #0
 8015144:	d022      	beq.n	801518c <ip4_route+0x78>
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	3304      	adds	r3, #4
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d01d      	beq.n	801518c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	681a      	ldr	r2, [r3, #0]
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	3304      	adds	r3, #4
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	405a      	eors	r2, r3
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	3308      	adds	r3, #8
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	4013      	ands	r3, r2
 8015164:	2b00      	cmp	r3, #0
 8015166:	d101      	bne.n	801516c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	e038      	b.n	80151de <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015172:	f003 0302 	and.w	r3, r3, #2
 8015176:	2b00      	cmp	r3, #0
 8015178:	d108      	bne.n	801518c <ip4_route+0x78>
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	681a      	ldr	r2, [r3, #0]
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	330c      	adds	r3, #12
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	429a      	cmp	r2, r3
 8015186:	d101      	bne.n	801518c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	e028      	b.n	80151de <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	60fb      	str	r3, [r7, #12]
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	2b00      	cmp	r3, #0
 8015196:	d1c5      	bne.n	8015124 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015198:	4b15      	ldr	r3, [pc, #84]	; (80151f0 <ip4_route+0xdc>)
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	2b00      	cmp	r3, #0
 801519e:	d01a      	beq.n	80151d6 <ip4_route+0xc2>
 80151a0:	4b13      	ldr	r3, [pc, #76]	; (80151f0 <ip4_route+0xdc>)
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80151a8:	f003 0301 	and.w	r3, r3, #1
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d012      	beq.n	80151d6 <ip4_route+0xc2>
 80151b0:	4b0f      	ldr	r3, [pc, #60]	; (80151f0 <ip4_route+0xdc>)
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80151b8:	f003 0304 	and.w	r3, r3, #4
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d00a      	beq.n	80151d6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80151c0:	4b0b      	ldr	r3, [pc, #44]	; (80151f0 <ip4_route+0xdc>)
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	3304      	adds	r3, #4
 80151c6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d004      	beq.n	80151d6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	b2db      	uxtb	r3, r3
 80151d2:	2b7f      	cmp	r3, #127	; 0x7f
 80151d4:	d101      	bne.n	80151da <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80151d6:	2300      	movs	r3, #0
 80151d8:	e001      	b.n	80151de <ip4_route+0xca>
  }

  return netif_default;
 80151da:	4b05      	ldr	r3, [pc, #20]	; (80151f0 <ip4_route+0xdc>)
 80151dc:	681b      	ldr	r3, [r3, #0]
}
 80151de:	4618      	mov	r0, r3
 80151e0:	3714      	adds	r7, #20
 80151e2:	46bd      	mov	sp, r7
 80151e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e8:	4770      	bx	lr
 80151ea:	bf00      	nop
 80151ec:	20007aec 	.word	0x20007aec
 80151f0:	20007af0 	.word	0x20007af0

080151f4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80151f4:	b580      	push	{r7, lr}
 80151f6:	b082      	sub	sp, #8
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015202:	f003 0301 	and.w	r3, r3, #1
 8015206:	b2db      	uxtb	r3, r3
 8015208:	2b00      	cmp	r3, #0
 801520a:	d016      	beq.n	801523a <ip4_input_accept+0x46>
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	3304      	adds	r3, #4
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	2b00      	cmp	r3, #0
 8015214:	d011      	beq.n	801523a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015216:	4b0b      	ldr	r3, [pc, #44]	; (8015244 <ip4_input_accept+0x50>)
 8015218:	695a      	ldr	r2, [r3, #20]
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	3304      	adds	r3, #4
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	429a      	cmp	r2, r3
 8015222:	d008      	beq.n	8015236 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015224:	4b07      	ldr	r3, [pc, #28]	; (8015244 <ip4_input_accept+0x50>)
 8015226:	695b      	ldr	r3, [r3, #20]
 8015228:	6879      	ldr	r1, [r7, #4]
 801522a:	4618      	mov	r0, r3
 801522c:	f000 fa24 	bl	8015678 <ip4_addr_isbroadcast_u32>
 8015230:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015232:	2b00      	cmp	r3, #0
 8015234:	d001      	beq.n	801523a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015236:	2301      	movs	r3, #1
 8015238:	e000      	b.n	801523c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801523a:	2300      	movs	r3, #0
}
 801523c:	4618      	mov	r0, r3
 801523e:	3708      	adds	r7, #8
 8015240:	46bd      	mov	sp, r7
 8015242:	bd80      	pop	{r7, pc}
 8015244:	20004598 	.word	0x20004598

08015248 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015248:	b580      	push	{r7, lr}
 801524a:	b088      	sub	sp, #32
 801524c:	af00      	add	r7, sp, #0
 801524e:	6078      	str	r0, [r7, #4]
 8015250:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8015252:	2301      	movs	r3, #1
 8015254:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	685b      	ldr	r3, [r3, #4]
 801525a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801525c:	69fb      	ldr	r3, [r7, #28]
 801525e:	781b      	ldrb	r3, [r3, #0]
 8015260:	091b      	lsrs	r3, r3, #4
 8015262:	b2db      	uxtb	r3, r3
 8015264:	2b04      	cmp	r3, #4
 8015266:	d004      	beq.n	8015272 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015268:	6878      	ldr	r0, [r7, #4]
 801526a:	f7f6 fdc9 	bl	800be00 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801526e:	2300      	movs	r3, #0
 8015270:	e121      	b.n	80154b6 <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015272:	69fb      	ldr	r3, [r7, #28]
 8015274:	781b      	ldrb	r3, [r3, #0]
 8015276:	f003 030f 	and.w	r3, r3, #15
 801527a:	b2db      	uxtb	r3, r3
 801527c:	009b      	lsls	r3, r3, #2
 801527e:	b2db      	uxtb	r3, r3
 8015280:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015282:	69fb      	ldr	r3, [r7, #28]
 8015284:	885b      	ldrh	r3, [r3, #2]
 8015286:	b29b      	uxth	r3, r3
 8015288:	4618      	mov	r0, r3
 801528a:	f7f5 fb18 	bl	800a8be <lwip_htons>
 801528e:	4603      	mov	r3, r0
 8015290:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	891b      	ldrh	r3, [r3, #8]
 8015296:	8a3a      	ldrh	r2, [r7, #16]
 8015298:	429a      	cmp	r2, r3
 801529a:	d204      	bcs.n	80152a6 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801529c:	8a3b      	ldrh	r3, [r7, #16]
 801529e:	4619      	mov	r1, r3
 80152a0:	6878      	ldr	r0, [r7, #4]
 80152a2:	f7f6 fc27 	bl	800baf4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	895b      	ldrh	r3, [r3, #10]
 80152aa:	8a7a      	ldrh	r2, [r7, #18]
 80152ac:	429a      	cmp	r2, r3
 80152ae:	d807      	bhi.n	80152c0 <ip4_input+0x78>
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	891b      	ldrh	r3, [r3, #8]
 80152b4:	8a3a      	ldrh	r2, [r7, #16]
 80152b6:	429a      	cmp	r2, r3
 80152b8:	d802      	bhi.n	80152c0 <ip4_input+0x78>
 80152ba:	8a7b      	ldrh	r3, [r7, #18]
 80152bc:	2b13      	cmp	r3, #19
 80152be:	d804      	bhi.n	80152ca <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80152c0:	6878      	ldr	r0, [r7, #4]
 80152c2:	f7f6 fd9d 	bl	800be00 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80152c6:	2300      	movs	r3, #0
 80152c8:	e0f5      	b.n	80154b6 <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80152ca:	69fb      	ldr	r3, [r7, #28]
 80152cc:	691b      	ldr	r3, [r3, #16]
 80152ce:	4a7c      	ldr	r2, [pc, #496]	; (80154c0 <ip4_input+0x278>)
 80152d0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80152d2:	69fb      	ldr	r3, [r7, #28]
 80152d4:	68db      	ldr	r3, [r3, #12]
 80152d6:	4a7a      	ldr	r2, [pc, #488]	; (80154c0 <ip4_input+0x278>)
 80152d8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80152da:	4b79      	ldr	r3, [pc, #484]	; (80154c0 <ip4_input+0x278>)
 80152dc:	695b      	ldr	r3, [r3, #20]
 80152de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80152e2:	2be0      	cmp	r3, #224	; 0xe0
 80152e4:	d112      	bne.n	801530c <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80152e6:	683b      	ldr	r3, [r7, #0]
 80152e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80152ec:	f003 0301 	and.w	r3, r3, #1
 80152f0:	b2db      	uxtb	r3, r3
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d007      	beq.n	8015306 <ip4_input+0xbe>
 80152f6:	683b      	ldr	r3, [r7, #0]
 80152f8:	3304      	adds	r3, #4
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d002      	beq.n	8015306 <ip4_input+0xbe>
      netif = inp;
 8015300:	683b      	ldr	r3, [r7, #0]
 8015302:	61bb      	str	r3, [r7, #24]
 8015304:	e02a      	b.n	801535c <ip4_input+0x114>
    } else {
      netif = NULL;
 8015306:	2300      	movs	r3, #0
 8015308:	61bb      	str	r3, [r7, #24]
 801530a:	e027      	b.n	801535c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801530c:	6838      	ldr	r0, [r7, #0]
 801530e:	f7ff ff71 	bl	80151f4 <ip4_input_accept>
 8015312:	4603      	mov	r3, r0
 8015314:	2b00      	cmp	r3, #0
 8015316:	d002      	beq.n	801531e <ip4_input+0xd6>
      netif = inp;
 8015318:	683b      	ldr	r3, [r7, #0]
 801531a:	61bb      	str	r3, [r7, #24]
 801531c:	e01e      	b.n	801535c <ip4_input+0x114>
    } else {
      netif = NULL;
 801531e:	2300      	movs	r3, #0
 8015320:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8015322:	4b67      	ldr	r3, [pc, #412]	; (80154c0 <ip4_input+0x278>)
 8015324:	695b      	ldr	r3, [r3, #20]
 8015326:	b2db      	uxtb	r3, r3
 8015328:	2b7f      	cmp	r3, #127	; 0x7f
 801532a:	d017      	beq.n	801535c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801532c:	4b65      	ldr	r3, [pc, #404]	; (80154c4 <ip4_input+0x27c>)
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	61bb      	str	r3, [r7, #24]
 8015332:	e00e      	b.n	8015352 <ip4_input+0x10a>
          if (netif == inp) {
 8015334:	69ba      	ldr	r2, [r7, #24]
 8015336:	683b      	ldr	r3, [r7, #0]
 8015338:	429a      	cmp	r2, r3
 801533a:	d006      	beq.n	801534a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801533c:	69b8      	ldr	r0, [r7, #24]
 801533e:	f7ff ff59 	bl	80151f4 <ip4_input_accept>
 8015342:	4603      	mov	r3, r0
 8015344:	2b00      	cmp	r3, #0
 8015346:	d108      	bne.n	801535a <ip4_input+0x112>
 8015348:	e000      	b.n	801534c <ip4_input+0x104>
            continue;
 801534a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801534c:	69bb      	ldr	r3, [r7, #24]
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	61bb      	str	r3, [r7, #24]
 8015352:	69bb      	ldr	r3, [r7, #24]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d1ed      	bne.n	8015334 <ip4_input+0xec>
 8015358:	e000      	b.n	801535c <ip4_input+0x114>
            break;
 801535a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801535c:	69bb      	ldr	r3, [r7, #24]
 801535e:	2b00      	cmp	r3, #0
 8015360:	d111      	bne.n	8015386 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8015362:	69fb      	ldr	r3, [r7, #28]
 8015364:	7a5b      	ldrb	r3, [r3, #9]
 8015366:	2b11      	cmp	r3, #17
 8015368:	d10d      	bne.n	8015386 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801536a:	8a7b      	ldrh	r3, [r7, #18]
 801536c:	69fa      	ldr	r2, [r7, #28]
 801536e:	4413      	add	r3, r2
 8015370:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	885b      	ldrh	r3, [r3, #2]
 8015376:	b29b      	uxth	r3, r3
 8015378:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801537c:	d103      	bne.n	8015386 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801537e:	683b      	ldr	r3, [r7, #0]
 8015380:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8015382:	2300      	movs	r3, #0
 8015384:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8015386:	697b      	ldr	r3, [r7, #20]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d017      	beq.n	80153bc <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801538c:	4b4c      	ldr	r3, [pc, #304]	; (80154c0 <ip4_input+0x278>)
 801538e:	691b      	ldr	r3, [r3, #16]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d013      	beq.n	80153bc <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015394:	4b4a      	ldr	r3, [pc, #296]	; (80154c0 <ip4_input+0x278>)
 8015396:	691b      	ldr	r3, [r3, #16]
 8015398:	6839      	ldr	r1, [r7, #0]
 801539a:	4618      	mov	r0, r3
 801539c:	f000 f96c 	bl	8015678 <ip4_addr_isbroadcast_u32>
 80153a0:	4603      	mov	r3, r0
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d105      	bne.n	80153b2 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80153a6:	4b46      	ldr	r3, [pc, #280]	; (80154c0 <ip4_input+0x278>)
 80153a8:	691b      	ldr	r3, [r3, #16]
 80153aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80153ae:	2be0      	cmp	r3, #224	; 0xe0
 80153b0:	d104      	bne.n	80153bc <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80153b2:	6878      	ldr	r0, [r7, #4]
 80153b4:	f7f6 fd24 	bl	800be00 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80153b8:	2300      	movs	r3, #0
 80153ba:	e07c      	b.n	80154b6 <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80153bc:	69bb      	ldr	r3, [r7, #24]
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d104      	bne.n	80153cc <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80153c2:	6878      	ldr	r0, [r7, #4]
 80153c4:	f7f6 fd1c 	bl	800be00 <pbuf_free>
    return ERR_OK;
 80153c8:	2300      	movs	r3, #0
 80153ca:	e074      	b.n	80154b6 <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80153cc:	69fb      	ldr	r3, [r7, #28]
 80153ce:	88db      	ldrh	r3, [r3, #6]
 80153d0:	b29b      	uxth	r3, r3
 80153d2:	461a      	mov	r2, r3
 80153d4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80153d8:	4013      	ands	r3, r2
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d00b      	beq.n	80153f6 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80153de:	6878      	ldr	r0, [r7, #4]
 80153e0:	f000 fc90 	bl	8015d04 <ip4_reass>
 80153e4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d101      	bne.n	80153f0 <ip4_input+0x1a8>
      return ERR_OK;
 80153ec:	2300      	movs	r3, #0
 80153ee:	e062      	b.n	80154b6 <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	685b      	ldr	r3, [r3, #4]
 80153f4:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80153f6:	4a32      	ldr	r2, [pc, #200]	; (80154c0 <ip4_input+0x278>)
 80153f8:	69bb      	ldr	r3, [r7, #24]
 80153fa:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80153fc:	4a30      	ldr	r2, [pc, #192]	; (80154c0 <ip4_input+0x278>)
 80153fe:	683b      	ldr	r3, [r7, #0]
 8015400:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015402:	4a2f      	ldr	r2, [pc, #188]	; (80154c0 <ip4_input+0x278>)
 8015404:	69fb      	ldr	r3, [r7, #28]
 8015406:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015408:	69fb      	ldr	r3, [r7, #28]
 801540a:	781b      	ldrb	r3, [r3, #0]
 801540c:	f003 030f 	and.w	r3, r3, #15
 8015410:	b2db      	uxtb	r3, r3
 8015412:	009b      	lsls	r3, r3, #2
 8015414:	b2db      	uxtb	r3, r3
 8015416:	b29a      	uxth	r2, r3
 8015418:	4b29      	ldr	r3, [pc, #164]	; (80154c0 <ip4_input+0x278>)
 801541a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801541c:	8a7b      	ldrh	r3, [r7, #18]
 801541e:	4619      	mov	r1, r3
 8015420:	6878      	ldr	r0, [r7, #4]
 8015422:	f7f6 fc67 	bl	800bcf4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015426:	69fb      	ldr	r3, [r7, #28]
 8015428:	7a5b      	ldrb	r3, [r3, #9]
 801542a:	2b06      	cmp	r3, #6
 801542c:	d009      	beq.n	8015442 <ip4_input+0x1fa>
 801542e:	2b11      	cmp	r3, #17
 8015430:	d002      	beq.n	8015438 <ip4_input+0x1f0>
 8015432:	2b01      	cmp	r3, #1
 8015434:	d00a      	beq.n	801544c <ip4_input+0x204>
 8015436:	e00e      	b.n	8015456 <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015438:	6839      	ldr	r1, [r7, #0]
 801543a:	6878      	ldr	r0, [r7, #4]
 801543c:	f7fc face 	bl	80119dc <udp_input>
        break;
 8015440:	e026      	b.n	8015490 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015442:	6839      	ldr	r1, [r7, #0]
 8015444:	6878      	ldr	r0, [r7, #4]
 8015446:	f7f8 fb07 	bl	800da58 <tcp_input>
        break;
 801544a:	e021      	b.n	8015490 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801544c:	6839      	ldr	r1, [r7, #0]
 801544e:	6878      	ldr	r0, [r7, #4]
 8015450:	f7ff fcd2 	bl	8014df8 <icmp_input>
        break;
 8015454:	e01c      	b.n	8015490 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015456:	4b1a      	ldr	r3, [pc, #104]	; (80154c0 <ip4_input+0x278>)
 8015458:	695b      	ldr	r3, [r3, #20]
 801545a:	69b9      	ldr	r1, [r7, #24]
 801545c:	4618      	mov	r0, r3
 801545e:	f000 f90b 	bl	8015678 <ip4_addr_isbroadcast_u32>
 8015462:	4603      	mov	r3, r0
 8015464:	2b00      	cmp	r3, #0
 8015466:	d10f      	bne.n	8015488 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015468:	4b15      	ldr	r3, [pc, #84]	; (80154c0 <ip4_input+0x278>)
 801546a:	695b      	ldr	r3, [r3, #20]
 801546c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015470:	2be0      	cmp	r3, #224	; 0xe0
 8015472:	d009      	beq.n	8015488 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015474:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015478:	4619      	mov	r1, r3
 801547a:	6878      	ldr	r0, [r7, #4]
 801547c:	f7f6 fcad 	bl	800bdda <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015480:	2102      	movs	r1, #2
 8015482:	6878      	ldr	r0, [r7, #4]
 8015484:	f7ff fdbc 	bl	8015000 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015488:	6878      	ldr	r0, [r7, #4]
 801548a:	f7f6 fcb9 	bl	800be00 <pbuf_free>
        break;
 801548e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015490:	4b0b      	ldr	r3, [pc, #44]	; (80154c0 <ip4_input+0x278>)
 8015492:	2200      	movs	r2, #0
 8015494:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015496:	4b0a      	ldr	r3, [pc, #40]	; (80154c0 <ip4_input+0x278>)
 8015498:	2200      	movs	r2, #0
 801549a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801549c:	4b08      	ldr	r3, [pc, #32]	; (80154c0 <ip4_input+0x278>)
 801549e:	2200      	movs	r2, #0
 80154a0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80154a2:	4b07      	ldr	r3, [pc, #28]	; (80154c0 <ip4_input+0x278>)
 80154a4:	2200      	movs	r2, #0
 80154a6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80154a8:	4b05      	ldr	r3, [pc, #20]	; (80154c0 <ip4_input+0x278>)
 80154aa:	2200      	movs	r2, #0
 80154ac:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80154ae:	4b04      	ldr	r3, [pc, #16]	; (80154c0 <ip4_input+0x278>)
 80154b0:	2200      	movs	r2, #0
 80154b2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80154b4:	2300      	movs	r3, #0
}
 80154b6:	4618      	mov	r0, r3
 80154b8:	3720      	adds	r7, #32
 80154ba:	46bd      	mov	sp, r7
 80154bc:	bd80      	pop	{r7, pc}
 80154be:	bf00      	nop
 80154c0:	20004598 	.word	0x20004598
 80154c4:	20007aec 	.word	0x20007aec

080154c8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b08a      	sub	sp, #40	; 0x28
 80154cc:	af04      	add	r7, sp, #16
 80154ce:	60f8      	str	r0, [r7, #12]
 80154d0:	60b9      	str	r1, [r7, #8]
 80154d2:	607a      	str	r2, [r7, #4]
 80154d4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80154d6:	68bb      	ldr	r3, [r7, #8]
 80154d8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d009      	beq.n	80154f4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80154e0:	68bb      	ldr	r3, [r7, #8]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d003      	beq.n	80154ee <ip4_output_if+0x26>
 80154e6:	68bb      	ldr	r3, [r7, #8]
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d102      	bne.n	80154f4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80154ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154f0:	3304      	adds	r3, #4
 80154f2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80154f4:	78fa      	ldrb	r2, [r7, #3]
 80154f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154f8:	9302      	str	r3, [sp, #8]
 80154fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80154fe:	9301      	str	r3, [sp, #4]
 8015500:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015504:	9300      	str	r3, [sp, #0]
 8015506:	4613      	mov	r3, r2
 8015508:	687a      	ldr	r2, [r7, #4]
 801550a:	6979      	ldr	r1, [r7, #20]
 801550c:	68f8      	ldr	r0, [r7, #12]
 801550e:	f000 f805 	bl	801551c <ip4_output_if_src>
 8015512:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015514:	4618      	mov	r0, r3
 8015516:	3718      	adds	r7, #24
 8015518:	46bd      	mov	sp, r7
 801551a:	bd80      	pop	{r7, pc}

0801551c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801551c:	b580      	push	{r7, lr}
 801551e:	b088      	sub	sp, #32
 8015520:	af00      	add	r7, sp, #0
 8015522:	60f8      	str	r0, [r7, #12]
 8015524:	60b9      	str	r1, [r7, #8]
 8015526:	607a      	str	r2, [r7, #4]
 8015528:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	7b9b      	ldrb	r3, [r3, #14]
 801552e:	2b01      	cmp	r3, #1
 8015530:	d006      	beq.n	8015540 <ip4_output_if_src+0x24>
 8015532:	4b4b      	ldr	r3, [pc, #300]	; (8015660 <ip4_output_if_src+0x144>)
 8015534:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015538:	494a      	ldr	r1, [pc, #296]	; (8015664 <ip4_output_if_src+0x148>)
 801553a:	484b      	ldr	r0, [pc, #300]	; (8015668 <ip4_output_if_src+0x14c>)
 801553c:	f001 f8e6 	bl	801670c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d060      	beq.n	8015608 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015546:	2314      	movs	r3, #20
 8015548:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801554a:	2114      	movs	r1, #20
 801554c:	68f8      	ldr	r0, [r7, #12]
 801554e:	f7f6 fbc1 	bl	800bcd4 <pbuf_add_header>
 8015552:	4603      	mov	r3, r0
 8015554:	2b00      	cmp	r3, #0
 8015556:	d002      	beq.n	801555e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015558:	f06f 0301 	mvn.w	r3, #1
 801555c:	e07c      	b.n	8015658 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	685b      	ldr	r3, [r3, #4]
 8015562:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	895b      	ldrh	r3, [r3, #10]
 8015568:	2b13      	cmp	r3, #19
 801556a:	d806      	bhi.n	801557a <ip4_output_if_src+0x5e>
 801556c:	4b3c      	ldr	r3, [pc, #240]	; (8015660 <ip4_output_if_src+0x144>)
 801556e:	f240 3289 	movw	r2, #905	; 0x389
 8015572:	493e      	ldr	r1, [pc, #248]	; (801566c <ip4_output_if_src+0x150>)
 8015574:	483c      	ldr	r0, [pc, #240]	; (8015668 <ip4_output_if_src+0x14c>)
 8015576:	f001 f8c9 	bl	801670c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801557a:	69fb      	ldr	r3, [r7, #28]
 801557c:	78fa      	ldrb	r2, [r7, #3]
 801557e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015580:	69fb      	ldr	r3, [r7, #28]
 8015582:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015586:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	681a      	ldr	r2, [r3, #0]
 801558c:	69fb      	ldr	r3, [r7, #28]
 801558e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015590:	8b7b      	ldrh	r3, [r7, #26]
 8015592:	089b      	lsrs	r3, r3, #2
 8015594:	b29b      	uxth	r3, r3
 8015596:	b2db      	uxtb	r3, r3
 8015598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801559c:	b2da      	uxtb	r2, r3
 801559e:	69fb      	ldr	r3, [r7, #28]
 80155a0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80155a2:	69fb      	ldr	r3, [r7, #28]
 80155a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80155a8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80155aa:	68fb      	ldr	r3, [r7, #12]
 80155ac:	891b      	ldrh	r3, [r3, #8]
 80155ae:	4618      	mov	r0, r3
 80155b0:	f7f5 f985 	bl	800a8be <lwip_htons>
 80155b4:	4603      	mov	r3, r0
 80155b6:	461a      	mov	r2, r3
 80155b8:	69fb      	ldr	r3, [r7, #28]
 80155ba:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80155bc:	69fb      	ldr	r3, [r7, #28]
 80155be:	2200      	movs	r2, #0
 80155c0:	719a      	strb	r2, [r3, #6]
 80155c2:	2200      	movs	r2, #0
 80155c4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80155c6:	4b2a      	ldr	r3, [pc, #168]	; (8015670 <ip4_output_if_src+0x154>)
 80155c8:	881b      	ldrh	r3, [r3, #0]
 80155ca:	4618      	mov	r0, r3
 80155cc:	f7f5 f977 	bl	800a8be <lwip_htons>
 80155d0:	4603      	mov	r3, r0
 80155d2:	461a      	mov	r2, r3
 80155d4:	69fb      	ldr	r3, [r7, #28]
 80155d6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80155d8:	4b25      	ldr	r3, [pc, #148]	; (8015670 <ip4_output_if_src+0x154>)
 80155da:	881b      	ldrh	r3, [r3, #0]
 80155dc:	3301      	adds	r3, #1
 80155de:	b29a      	uxth	r2, r3
 80155e0:	4b23      	ldr	r3, [pc, #140]	; (8015670 <ip4_output_if_src+0x154>)
 80155e2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80155e4:	68bb      	ldr	r3, [r7, #8]
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d104      	bne.n	80155f4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80155ea:	4b22      	ldr	r3, [pc, #136]	; (8015674 <ip4_output_if_src+0x158>)
 80155ec:	681a      	ldr	r2, [r3, #0]
 80155ee:	69fb      	ldr	r3, [r7, #28]
 80155f0:	60da      	str	r2, [r3, #12]
 80155f2:	e003      	b.n	80155fc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80155f4:	68bb      	ldr	r3, [r7, #8]
 80155f6:	681a      	ldr	r2, [r3, #0]
 80155f8:	69fb      	ldr	r3, [r7, #28]
 80155fa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80155fc:	69fb      	ldr	r3, [r7, #28]
 80155fe:	2200      	movs	r2, #0
 8015600:	729a      	strb	r2, [r3, #10]
 8015602:	2200      	movs	r2, #0
 8015604:	72da      	strb	r2, [r3, #11]
 8015606:	e00f      	b.n	8015628 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	895b      	ldrh	r3, [r3, #10]
 801560c:	2b13      	cmp	r3, #19
 801560e:	d802      	bhi.n	8015616 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015610:	f06f 0301 	mvn.w	r3, #1
 8015614:	e020      	b.n	8015658 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	685b      	ldr	r3, [r3, #4]
 801561a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801561c:	69fb      	ldr	r3, [r7, #28]
 801561e:	691b      	ldr	r3, [r3, #16]
 8015620:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015622:	f107 0314 	add.w	r3, r7, #20
 8015626:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801562a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801562c:	2b00      	cmp	r3, #0
 801562e:	d00c      	beq.n	801564a <ip4_output_if_src+0x12e>
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	891a      	ldrh	r2, [r3, #8]
 8015634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015636:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015638:	429a      	cmp	r2, r3
 801563a:	d906      	bls.n	801564a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801563c:	687a      	ldr	r2, [r7, #4]
 801563e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015640:	68f8      	ldr	r0, [r7, #12]
 8015642:	f000 fd4b 	bl	80160dc <ip4_frag>
 8015646:	4603      	mov	r3, r0
 8015648:	e006      	b.n	8015658 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801564c:	695b      	ldr	r3, [r3, #20]
 801564e:	687a      	ldr	r2, [r7, #4]
 8015650:	68f9      	ldr	r1, [r7, #12]
 8015652:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015654:	4798      	blx	r3
 8015656:	4603      	mov	r3, r0
}
 8015658:	4618      	mov	r0, r3
 801565a:	3720      	adds	r7, #32
 801565c:	46bd      	mov	sp, r7
 801565e:	bd80      	pop	{r7, pc}
 8015660:	08019f18 	.word	0x08019f18
 8015664:	08019f4c 	.word	0x08019f4c
 8015668:	08019f58 	.word	0x08019f58
 801566c:	08019f80 	.word	0x08019f80
 8015670:	2000059a 	.word	0x2000059a
 8015674:	08028d0c 	.word	0x08028d0c

08015678 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015678:	b480      	push	{r7}
 801567a:	b085      	sub	sp, #20
 801567c:	af00      	add	r7, sp, #0
 801567e:	6078      	str	r0, [r7, #4]
 8015680:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	f1b3 3fff 	cmp.w	r3, #4294967295
 801568c:	d002      	beq.n	8015694 <ip4_addr_isbroadcast_u32+0x1c>
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d101      	bne.n	8015698 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015694:	2301      	movs	r3, #1
 8015696:	e02a      	b.n	80156ee <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015698:	683b      	ldr	r3, [r7, #0]
 801569a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801569e:	f003 0302 	and.w	r3, r3, #2
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d101      	bne.n	80156aa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80156a6:	2300      	movs	r3, #0
 80156a8:	e021      	b.n	80156ee <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80156aa:	683b      	ldr	r3, [r7, #0]
 80156ac:	3304      	adds	r3, #4
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	687a      	ldr	r2, [r7, #4]
 80156b2:	429a      	cmp	r2, r3
 80156b4:	d101      	bne.n	80156ba <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80156b6:	2300      	movs	r3, #0
 80156b8:	e019      	b.n	80156ee <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80156ba:	68fa      	ldr	r2, [r7, #12]
 80156bc:	683b      	ldr	r3, [r7, #0]
 80156be:	3304      	adds	r3, #4
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	405a      	eors	r2, r3
 80156c4:	683b      	ldr	r3, [r7, #0]
 80156c6:	3308      	adds	r3, #8
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	4013      	ands	r3, r2
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d10d      	bne.n	80156ec <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80156d0:	683b      	ldr	r3, [r7, #0]
 80156d2:	3308      	adds	r3, #8
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	43da      	mvns	r2, r3
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80156dc:	683b      	ldr	r3, [r7, #0]
 80156de:	3308      	adds	r3, #8
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80156e4:	429a      	cmp	r2, r3
 80156e6:	d101      	bne.n	80156ec <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80156e8:	2301      	movs	r3, #1
 80156ea:	e000      	b.n	80156ee <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80156ec:	2300      	movs	r3, #0
  }
}
 80156ee:	4618      	mov	r0, r3
 80156f0:	3714      	adds	r7, #20
 80156f2:	46bd      	mov	sp, r7
 80156f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f8:	4770      	bx	lr
	...

080156fc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80156fc:	b580      	push	{r7, lr}
 80156fe:	b084      	sub	sp, #16
 8015700:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015702:	2300      	movs	r3, #0
 8015704:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015706:	4b12      	ldr	r3, [pc, #72]	; (8015750 <ip_reass_tmr+0x54>)
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801570c:	e018      	b.n	8015740 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801570e:	68fb      	ldr	r3, [r7, #12]
 8015710:	7fdb      	ldrb	r3, [r3, #31]
 8015712:	2b00      	cmp	r3, #0
 8015714:	d00b      	beq.n	801572e <ip_reass_tmr+0x32>
      r->timer--;
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	7fdb      	ldrb	r3, [r3, #31]
 801571a:	3b01      	subs	r3, #1
 801571c:	b2da      	uxtb	r2, r3
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	60fb      	str	r3, [r7, #12]
 801572c:	e008      	b.n	8015740 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015738:	68b9      	ldr	r1, [r7, #8]
 801573a:	6878      	ldr	r0, [r7, #4]
 801573c:	f000 f80a 	bl	8015754 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d1e3      	bne.n	801570e <ip_reass_tmr+0x12>
    }
  }
}
 8015746:	bf00      	nop
 8015748:	3710      	adds	r7, #16
 801574a:	46bd      	mov	sp, r7
 801574c:	bd80      	pop	{r7, pc}
 801574e:	bf00      	nop
 8015750:	2000059c 	.word	0x2000059c

08015754 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015754:	b580      	push	{r7, lr}
 8015756:	b088      	sub	sp, #32
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
 801575c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801575e:	2300      	movs	r3, #0
 8015760:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015762:	683a      	ldr	r2, [r7, #0]
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	429a      	cmp	r2, r3
 8015768:	d105      	bne.n	8015776 <ip_reass_free_complete_datagram+0x22>
 801576a:	4b45      	ldr	r3, [pc, #276]	; (8015880 <ip_reass_free_complete_datagram+0x12c>)
 801576c:	22ab      	movs	r2, #171	; 0xab
 801576e:	4945      	ldr	r1, [pc, #276]	; (8015884 <ip_reass_free_complete_datagram+0x130>)
 8015770:	4845      	ldr	r0, [pc, #276]	; (8015888 <ip_reass_free_complete_datagram+0x134>)
 8015772:	f000 ffcb 	bl	801670c <iprintf>
  if (prev != NULL) {
 8015776:	683b      	ldr	r3, [r7, #0]
 8015778:	2b00      	cmp	r3, #0
 801577a:	d00a      	beq.n	8015792 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801577c:	683b      	ldr	r3, [r7, #0]
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	687a      	ldr	r2, [r7, #4]
 8015782:	429a      	cmp	r2, r3
 8015784:	d005      	beq.n	8015792 <ip_reass_free_complete_datagram+0x3e>
 8015786:	4b3e      	ldr	r3, [pc, #248]	; (8015880 <ip_reass_free_complete_datagram+0x12c>)
 8015788:	22ad      	movs	r2, #173	; 0xad
 801578a:	4940      	ldr	r1, [pc, #256]	; (801588c <ip_reass_free_complete_datagram+0x138>)
 801578c:	483e      	ldr	r0, [pc, #248]	; (8015888 <ip_reass_free_complete_datagram+0x134>)
 801578e:	f000 ffbd 	bl	801670c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	685b      	ldr	r3, [r3, #4]
 8015796:	685b      	ldr	r3, [r3, #4]
 8015798:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801579a:	697b      	ldr	r3, [r7, #20]
 801579c:	889b      	ldrh	r3, [r3, #4]
 801579e:	b29b      	uxth	r3, r3
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d12a      	bne.n	80157fa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	685b      	ldr	r3, [r3, #4]
 80157a8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80157aa:	697b      	ldr	r3, [r7, #20]
 80157ac:	681a      	ldr	r2, [r3, #0]
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80157b2:	69bb      	ldr	r3, [r7, #24]
 80157b4:	6858      	ldr	r0, [r3, #4]
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	3308      	adds	r3, #8
 80157ba:	2214      	movs	r2, #20
 80157bc:	4619      	mov	r1, r3
 80157be:	f000 feea 	bl	8016596 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80157c2:	2101      	movs	r1, #1
 80157c4:	69b8      	ldr	r0, [r7, #24]
 80157c6:	f7ff fc2b 	bl	8015020 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80157ca:	69b8      	ldr	r0, [r7, #24]
 80157cc:	f7f6 fba0 	bl	800bf10 <pbuf_clen>
 80157d0:	4603      	mov	r3, r0
 80157d2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80157d4:	8bfa      	ldrh	r2, [r7, #30]
 80157d6:	8a7b      	ldrh	r3, [r7, #18]
 80157d8:	4413      	add	r3, r2
 80157da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80157de:	db05      	blt.n	80157ec <ip_reass_free_complete_datagram+0x98>
 80157e0:	4b27      	ldr	r3, [pc, #156]	; (8015880 <ip_reass_free_complete_datagram+0x12c>)
 80157e2:	22bc      	movs	r2, #188	; 0xbc
 80157e4:	492a      	ldr	r1, [pc, #168]	; (8015890 <ip_reass_free_complete_datagram+0x13c>)
 80157e6:	4828      	ldr	r0, [pc, #160]	; (8015888 <ip_reass_free_complete_datagram+0x134>)
 80157e8:	f000 ff90 	bl	801670c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80157ec:	8bfa      	ldrh	r2, [r7, #30]
 80157ee:	8a7b      	ldrh	r3, [r7, #18]
 80157f0:	4413      	add	r3, r2
 80157f2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80157f4:	69b8      	ldr	r0, [r7, #24]
 80157f6:	f7f6 fb03 	bl	800be00 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	685b      	ldr	r3, [r3, #4]
 80157fe:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015800:	e01f      	b.n	8015842 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015802:	69bb      	ldr	r3, [r7, #24]
 8015804:	685b      	ldr	r3, [r3, #4]
 8015806:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015808:	69bb      	ldr	r3, [r7, #24]
 801580a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801580c:	697b      	ldr	r3, [r7, #20]
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015812:	68f8      	ldr	r0, [r7, #12]
 8015814:	f7f6 fb7c 	bl	800bf10 <pbuf_clen>
 8015818:	4603      	mov	r3, r0
 801581a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801581c:	8bfa      	ldrh	r2, [r7, #30]
 801581e:	8a7b      	ldrh	r3, [r7, #18]
 8015820:	4413      	add	r3, r2
 8015822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015826:	db05      	blt.n	8015834 <ip_reass_free_complete_datagram+0xe0>
 8015828:	4b15      	ldr	r3, [pc, #84]	; (8015880 <ip_reass_free_complete_datagram+0x12c>)
 801582a:	22cc      	movs	r2, #204	; 0xcc
 801582c:	4918      	ldr	r1, [pc, #96]	; (8015890 <ip_reass_free_complete_datagram+0x13c>)
 801582e:	4816      	ldr	r0, [pc, #88]	; (8015888 <ip_reass_free_complete_datagram+0x134>)
 8015830:	f000 ff6c 	bl	801670c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015834:	8bfa      	ldrh	r2, [r7, #30]
 8015836:	8a7b      	ldrh	r3, [r7, #18]
 8015838:	4413      	add	r3, r2
 801583a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801583c:	68f8      	ldr	r0, [r7, #12]
 801583e:	f7f6 fadf 	bl	800be00 <pbuf_free>
  while (p != NULL) {
 8015842:	69bb      	ldr	r3, [r7, #24]
 8015844:	2b00      	cmp	r3, #0
 8015846:	d1dc      	bne.n	8015802 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015848:	6839      	ldr	r1, [r7, #0]
 801584a:	6878      	ldr	r0, [r7, #4]
 801584c:	f000 f8c2 	bl	80159d4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015850:	4b10      	ldr	r3, [pc, #64]	; (8015894 <ip_reass_free_complete_datagram+0x140>)
 8015852:	881b      	ldrh	r3, [r3, #0]
 8015854:	8bfa      	ldrh	r2, [r7, #30]
 8015856:	429a      	cmp	r2, r3
 8015858:	d905      	bls.n	8015866 <ip_reass_free_complete_datagram+0x112>
 801585a:	4b09      	ldr	r3, [pc, #36]	; (8015880 <ip_reass_free_complete_datagram+0x12c>)
 801585c:	22d2      	movs	r2, #210	; 0xd2
 801585e:	490e      	ldr	r1, [pc, #56]	; (8015898 <ip_reass_free_complete_datagram+0x144>)
 8015860:	4809      	ldr	r0, [pc, #36]	; (8015888 <ip_reass_free_complete_datagram+0x134>)
 8015862:	f000 ff53 	bl	801670c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015866:	4b0b      	ldr	r3, [pc, #44]	; (8015894 <ip_reass_free_complete_datagram+0x140>)
 8015868:	881a      	ldrh	r2, [r3, #0]
 801586a:	8bfb      	ldrh	r3, [r7, #30]
 801586c:	1ad3      	subs	r3, r2, r3
 801586e:	b29a      	uxth	r2, r3
 8015870:	4b08      	ldr	r3, [pc, #32]	; (8015894 <ip_reass_free_complete_datagram+0x140>)
 8015872:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015874:	8bfb      	ldrh	r3, [r7, #30]
}
 8015876:	4618      	mov	r0, r3
 8015878:	3720      	adds	r7, #32
 801587a:	46bd      	mov	sp, r7
 801587c:	bd80      	pop	{r7, pc}
 801587e:	bf00      	nop
 8015880:	08019fb0 	.word	0x08019fb0
 8015884:	08019fec 	.word	0x08019fec
 8015888:	08019ff8 	.word	0x08019ff8
 801588c:	0801a020 	.word	0x0801a020
 8015890:	0801a034 	.word	0x0801a034
 8015894:	200005a0 	.word	0x200005a0
 8015898:	0801a054 	.word	0x0801a054

0801589c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801589c:	b580      	push	{r7, lr}
 801589e:	b08a      	sub	sp, #40	; 0x28
 80158a0:	af00      	add	r7, sp, #0
 80158a2:	6078      	str	r0, [r7, #4]
 80158a4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80158a6:	2300      	movs	r3, #0
 80158a8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80158aa:	2300      	movs	r3, #0
 80158ac:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80158ae:	2300      	movs	r3, #0
 80158b0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80158b2:	2300      	movs	r3, #0
 80158b4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80158b6:	2300      	movs	r3, #0
 80158b8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80158ba:	4b28      	ldr	r3, [pc, #160]	; (801595c <ip_reass_remove_oldest_datagram+0xc0>)
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80158c0:	e030      	b.n	8015924 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80158c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158c4:	695a      	ldr	r2, [r3, #20]
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	68db      	ldr	r3, [r3, #12]
 80158ca:	429a      	cmp	r2, r3
 80158cc:	d10c      	bne.n	80158e8 <ip_reass_remove_oldest_datagram+0x4c>
 80158ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158d0:	699a      	ldr	r2, [r3, #24]
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	691b      	ldr	r3, [r3, #16]
 80158d6:	429a      	cmp	r2, r3
 80158d8:	d106      	bne.n	80158e8 <ip_reass_remove_oldest_datagram+0x4c>
 80158da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158dc:	899a      	ldrh	r2, [r3, #12]
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	889b      	ldrh	r3, [r3, #4]
 80158e2:	b29b      	uxth	r3, r3
 80158e4:	429a      	cmp	r2, r3
 80158e6:	d014      	beq.n	8015912 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80158e8:	693b      	ldr	r3, [r7, #16]
 80158ea:	3301      	adds	r3, #1
 80158ec:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80158ee:	6a3b      	ldr	r3, [r7, #32]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d104      	bne.n	80158fe <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80158f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158f6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80158f8:	69fb      	ldr	r3, [r7, #28]
 80158fa:	61bb      	str	r3, [r7, #24]
 80158fc:	e009      	b.n	8015912 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80158fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015900:	7fda      	ldrb	r2, [r3, #31]
 8015902:	6a3b      	ldr	r3, [r7, #32]
 8015904:	7fdb      	ldrb	r3, [r3, #31]
 8015906:	429a      	cmp	r2, r3
 8015908:	d803      	bhi.n	8015912 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801590c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801590e:	69fb      	ldr	r3, [r7, #28]
 8015910:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	2b00      	cmp	r3, #0
 8015918:	d001      	beq.n	801591e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801591c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015926:	2b00      	cmp	r3, #0
 8015928:	d1cb      	bne.n	80158c2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801592a:	6a3b      	ldr	r3, [r7, #32]
 801592c:	2b00      	cmp	r3, #0
 801592e:	d008      	beq.n	8015942 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015930:	69b9      	ldr	r1, [r7, #24]
 8015932:	6a38      	ldr	r0, [r7, #32]
 8015934:	f7ff ff0e 	bl	8015754 <ip_reass_free_complete_datagram>
 8015938:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801593a:	697a      	ldr	r2, [r7, #20]
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	4413      	add	r3, r2
 8015940:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015942:	697a      	ldr	r2, [r7, #20]
 8015944:	683b      	ldr	r3, [r7, #0]
 8015946:	429a      	cmp	r2, r3
 8015948:	da02      	bge.n	8015950 <ip_reass_remove_oldest_datagram+0xb4>
 801594a:	693b      	ldr	r3, [r7, #16]
 801594c:	2b01      	cmp	r3, #1
 801594e:	dcac      	bgt.n	80158aa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015950:	697b      	ldr	r3, [r7, #20]
}
 8015952:	4618      	mov	r0, r3
 8015954:	3728      	adds	r7, #40	; 0x28
 8015956:	46bd      	mov	sp, r7
 8015958:	bd80      	pop	{r7, pc}
 801595a:	bf00      	nop
 801595c:	2000059c 	.word	0x2000059c

08015960 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015960:	b580      	push	{r7, lr}
 8015962:	b084      	sub	sp, #16
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
 8015968:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801596a:	2004      	movs	r0, #4
 801596c:	f7f5 fbfc 	bl	800b168 <memp_malloc>
 8015970:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d110      	bne.n	801599a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015978:	6839      	ldr	r1, [r7, #0]
 801597a:	6878      	ldr	r0, [r7, #4]
 801597c:	f7ff ff8e 	bl	801589c <ip_reass_remove_oldest_datagram>
 8015980:	4602      	mov	r2, r0
 8015982:	683b      	ldr	r3, [r7, #0]
 8015984:	4293      	cmp	r3, r2
 8015986:	dc03      	bgt.n	8015990 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015988:	2004      	movs	r0, #4
 801598a:	f7f5 fbed 	bl	800b168 <memp_malloc>
 801598e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	2b00      	cmp	r3, #0
 8015994:	d101      	bne.n	801599a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015996:	2300      	movs	r3, #0
 8015998:	e016      	b.n	80159c8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801599a:	2220      	movs	r2, #32
 801599c:	2100      	movs	r1, #0
 801599e:	68f8      	ldr	r0, [r7, #12]
 80159a0:	f000 fe04 	bl	80165ac <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	220f      	movs	r2, #15
 80159a8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80159aa:	4b09      	ldr	r3, [pc, #36]	; (80159d0 <ip_reass_enqueue_new_datagram+0x70>)
 80159ac:	681a      	ldr	r2, [r3, #0]
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80159b2:	4a07      	ldr	r2, [pc, #28]	; (80159d0 <ip_reass_enqueue_new_datagram+0x70>)
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	3308      	adds	r3, #8
 80159bc:	2214      	movs	r2, #20
 80159be:	6879      	ldr	r1, [r7, #4]
 80159c0:	4618      	mov	r0, r3
 80159c2:	f000 fde8 	bl	8016596 <memcpy>
  return ipr;
 80159c6:	68fb      	ldr	r3, [r7, #12]
}
 80159c8:	4618      	mov	r0, r3
 80159ca:	3710      	adds	r7, #16
 80159cc:	46bd      	mov	sp, r7
 80159ce:	bd80      	pop	{r7, pc}
 80159d0:	2000059c 	.word	0x2000059c

080159d4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80159d4:	b580      	push	{r7, lr}
 80159d6:	b082      	sub	sp, #8
 80159d8:	af00      	add	r7, sp, #0
 80159da:	6078      	str	r0, [r7, #4]
 80159dc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80159de:	4b10      	ldr	r3, [pc, #64]	; (8015a20 <ip_reass_dequeue_datagram+0x4c>)
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	687a      	ldr	r2, [r7, #4]
 80159e4:	429a      	cmp	r2, r3
 80159e6:	d104      	bne.n	80159f2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	4a0c      	ldr	r2, [pc, #48]	; (8015a20 <ip_reass_dequeue_datagram+0x4c>)
 80159ee:	6013      	str	r3, [r2, #0]
 80159f0:	e00d      	b.n	8015a0e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80159f2:	683b      	ldr	r3, [r7, #0]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d106      	bne.n	8015a06 <ip_reass_dequeue_datagram+0x32>
 80159f8:	4b0a      	ldr	r3, [pc, #40]	; (8015a24 <ip_reass_dequeue_datagram+0x50>)
 80159fa:	f240 1245 	movw	r2, #325	; 0x145
 80159fe:	490a      	ldr	r1, [pc, #40]	; (8015a28 <ip_reass_dequeue_datagram+0x54>)
 8015a00:	480a      	ldr	r0, [pc, #40]	; (8015a2c <ip_reass_dequeue_datagram+0x58>)
 8015a02:	f000 fe83 	bl	801670c <iprintf>
    prev->next = ipr->next;
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	681a      	ldr	r2, [r3, #0]
 8015a0a:	683b      	ldr	r3, [r7, #0]
 8015a0c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015a0e:	6879      	ldr	r1, [r7, #4]
 8015a10:	2004      	movs	r0, #4
 8015a12:	f7f5 fbf5 	bl	800b200 <memp_free>
}
 8015a16:	bf00      	nop
 8015a18:	3708      	adds	r7, #8
 8015a1a:	46bd      	mov	sp, r7
 8015a1c:	bd80      	pop	{r7, pc}
 8015a1e:	bf00      	nop
 8015a20:	2000059c 	.word	0x2000059c
 8015a24:	08019fb0 	.word	0x08019fb0
 8015a28:	0801a078 	.word	0x0801a078
 8015a2c:	08019ff8 	.word	0x08019ff8

08015a30 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015a30:	b580      	push	{r7, lr}
 8015a32:	b08c      	sub	sp, #48	; 0x30
 8015a34:	af00      	add	r7, sp, #0
 8015a36:	60f8      	str	r0, [r7, #12]
 8015a38:	60b9      	str	r1, [r7, #8]
 8015a3a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015a40:	2301      	movs	r3, #1
 8015a42:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015a44:	68bb      	ldr	r3, [r7, #8]
 8015a46:	685b      	ldr	r3, [r3, #4]
 8015a48:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015a4a:	69fb      	ldr	r3, [r7, #28]
 8015a4c:	885b      	ldrh	r3, [r3, #2]
 8015a4e:	b29b      	uxth	r3, r3
 8015a50:	4618      	mov	r0, r3
 8015a52:	f7f4 ff34 	bl	800a8be <lwip_htons>
 8015a56:	4603      	mov	r3, r0
 8015a58:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015a5a:	69fb      	ldr	r3, [r7, #28]
 8015a5c:	781b      	ldrb	r3, [r3, #0]
 8015a5e:	f003 030f 	and.w	r3, r3, #15
 8015a62:	b2db      	uxtb	r3, r3
 8015a64:	009b      	lsls	r3, r3, #2
 8015a66:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015a68:	7e7b      	ldrb	r3, [r7, #25]
 8015a6a:	b29b      	uxth	r3, r3
 8015a6c:	8b7a      	ldrh	r2, [r7, #26]
 8015a6e:	429a      	cmp	r2, r3
 8015a70:	d202      	bcs.n	8015a78 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015a72:	f04f 33ff 	mov.w	r3, #4294967295
 8015a76:	e135      	b.n	8015ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015a78:	7e7b      	ldrb	r3, [r7, #25]
 8015a7a:	b29b      	uxth	r3, r3
 8015a7c:	8b7a      	ldrh	r2, [r7, #26]
 8015a7e:	1ad3      	subs	r3, r2, r3
 8015a80:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015a82:	69fb      	ldr	r3, [r7, #28]
 8015a84:	88db      	ldrh	r3, [r3, #6]
 8015a86:	b29b      	uxth	r3, r3
 8015a88:	4618      	mov	r0, r3
 8015a8a:	f7f4 ff18 	bl	800a8be <lwip_htons>
 8015a8e:	4603      	mov	r3, r0
 8015a90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015a94:	b29b      	uxth	r3, r3
 8015a96:	00db      	lsls	r3, r3, #3
 8015a98:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015a9a:	68bb      	ldr	r3, [r7, #8]
 8015a9c:	685b      	ldr	r3, [r3, #4]
 8015a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aa2:	2200      	movs	r2, #0
 8015aa4:	701a      	strb	r2, [r3, #0]
 8015aa6:	2200      	movs	r2, #0
 8015aa8:	705a      	strb	r2, [r3, #1]
 8015aaa:	2200      	movs	r2, #0
 8015aac:	709a      	strb	r2, [r3, #2]
 8015aae:	2200      	movs	r2, #0
 8015ab0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ab4:	8afa      	ldrh	r2, [r7, #22]
 8015ab6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015ab8:	8afa      	ldrh	r2, [r7, #22]
 8015aba:	8b7b      	ldrh	r3, [r7, #26]
 8015abc:	4413      	add	r3, r2
 8015abe:	b29a      	uxth	r2, r3
 8015ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ac2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ac6:	88db      	ldrh	r3, [r3, #6]
 8015ac8:	b29b      	uxth	r3, r3
 8015aca:	8afa      	ldrh	r2, [r7, #22]
 8015acc:	429a      	cmp	r2, r3
 8015ace:	d902      	bls.n	8015ad6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8015ad4:	e106      	b.n	8015ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	685b      	ldr	r3, [r3, #4]
 8015ada:	627b      	str	r3, [r7, #36]	; 0x24
 8015adc:	e068      	b.n	8015bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ae0:	685b      	ldr	r3, [r3, #4]
 8015ae2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ae6:	889b      	ldrh	r3, [r3, #4]
 8015ae8:	b29a      	uxth	r2, r3
 8015aea:	693b      	ldr	r3, [r7, #16]
 8015aec:	889b      	ldrh	r3, [r3, #4]
 8015aee:	b29b      	uxth	r3, r3
 8015af0:	429a      	cmp	r2, r3
 8015af2:	d235      	bcs.n	8015b60 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015af6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015af8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d020      	beq.n	8015b42 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b02:	889b      	ldrh	r3, [r3, #4]
 8015b04:	b29a      	uxth	r2, r3
 8015b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b08:	88db      	ldrh	r3, [r3, #6]
 8015b0a:	b29b      	uxth	r3, r3
 8015b0c:	429a      	cmp	r2, r3
 8015b0e:	d307      	bcc.n	8015b20 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b12:	88db      	ldrh	r3, [r3, #6]
 8015b14:	b29a      	uxth	r2, r3
 8015b16:	693b      	ldr	r3, [r7, #16]
 8015b18:	889b      	ldrh	r3, [r3, #4]
 8015b1a:	b29b      	uxth	r3, r3
 8015b1c:	429a      	cmp	r2, r3
 8015b1e:	d902      	bls.n	8015b26 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015b20:	f04f 33ff 	mov.w	r3, #4294967295
 8015b24:	e0de      	b.n	8015ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b28:	68ba      	ldr	r2, [r7, #8]
 8015b2a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b2e:	88db      	ldrh	r3, [r3, #6]
 8015b30:	b29a      	uxth	r2, r3
 8015b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b34:	889b      	ldrh	r3, [r3, #4]
 8015b36:	b29b      	uxth	r3, r3
 8015b38:	429a      	cmp	r2, r3
 8015b3a:	d03d      	beq.n	8015bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015b40:	e03a      	b.n	8015bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b44:	88db      	ldrh	r3, [r3, #6]
 8015b46:	b29a      	uxth	r2, r3
 8015b48:	693b      	ldr	r3, [r7, #16]
 8015b4a:	889b      	ldrh	r3, [r3, #4]
 8015b4c:	b29b      	uxth	r3, r3
 8015b4e:	429a      	cmp	r2, r3
 8015b50:	d902      	bls.n	8015b58 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015b52:	f04f 33ff 	mov.w	r3, #4294967295
 8015b56:	e0c5      	b.n	8015ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	68ba      	ldr	r2, [r7, #8]
 8015b5c:	605a      	str	r2, [r3, #4]
      break;
 8015b5e:	e02b      	b.n	8015bb8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b62:	889b      	ldrh	r3, [r3, #4]
 8015b64:	b29a      	uxth	r2, r3
 8015b66:	693b      	ldr	r3, [r7, #16]
 8015b68:	889b      	ldrh	r3, [r3, #4]
 8015b6a:	b29b      	uxth	r3, r3
 8015b6c:	429a      	cmp	r2, r3
 8015b6e:	d102      	bne.n	8015b76 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015b70:	f04f 33ff 	mov.w	r3, #4294967295
 8015b74:	e0b6      	b.n	8015ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b78:	889b      	ldrh	r3, [r3, #4]
 8015b7a:	b29a      	uxth	r2, r3
 8015b7c:	693b      	ldr	r3, [r7, #16]
 8015b7e:	88db      	ldrh	r3, [r3, #6]
 8015b80:	b29b      	uxth	r3, r3
 8015b82:	429a      	cmp	r2, r3
 8015b84:	d202      	bcs.n	8015b8c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015b86:	f04f 33ff 	mov.w	r3, #4294967295
 8015b8a:	e0ab      	b.n	8015ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d009      	beq.n	8015ba6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b94:	88db      	ldrh	r3, [r3, #6]
 8015b96:	b29a      	uxth	r2, r3
 8015b98:	693b      	ldr	r3, [r7, #16]
 8015b9a:	889b      	ldrh	r3, [r3, #4]
 8015b9c:	b29b      	uxth	r3, r3
 8015b9e:	429a      	cmp	r2, r3
 8015ba0:	d001      	beq.n	8015ba6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015ba6:	693b      	ldr	r3, [r7, #16]
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015bac:	693b      	ldr	r3, [r7, #16]
 8015bae:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d193      	bne.n	8015ade <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015bb6:	e000      	b.n	8015bba <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015bb8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d12d      	bne.n	8015c1c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d01c      	beq.n	8015c00 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bc8:	88db      	ldrh	r3, [r3, #6]
 8015bca:	b29a      	uxth	r2, r3
 8015bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bce:	889b      	ldrh	r3, [r3, #4]
 8015bd0:	b29b      	uxth	r3, r3
 8015bd2:	429a      	cmp	r2, r3
 8015bd4:	d906      	bls.n	8015be4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015bd6:	4b45      	ldr	r3, [pc, #276]	; (8015cec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015bd8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015bdc:	4944      	ldr	r1, [pc, #272]	; (8015cf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015bde:	4845      	ldr	r0, [pc, #276]	; (8015cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015be0:	f000 fd94 	bl	801670c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015be6:	68ba      	ldr	r2, [r7, #8]
 8015be8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bec:	88db      	ldrh	r3, [r3, #6]
 8015bee:	b29a      	uxth	r2, r3
 8015bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bf2:	889b      	ldrh	r3, [r3, #4]
 8015bf4:	b29b      	uxth	r3, r3
 8015bf6:	429a      	cmp	r2, r3
 8015bf8:	d010      	beq.n	8015c1c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	623b      	str	r3, [r7, #32]
 8015bfe:	e00d      	b.n	8015c1c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	685b      	ldr	r3, [r3, #4]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d006      	beq.n	8015c16 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015c08:	4b38      	ldr	r3, [pc, #224]	; (8015cec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015c0a:	f240 12bf 	movw	r2, #447	; 0x1bf
 8015c0e:	493a      	ldr	r1, [pc, #232]	; (8015cf8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015c10:	4838      	ldr	r0, [pc, #224]	; (8015cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015c12:	f000 fd7b 	bl	801670c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	68ba      	ldr	r2, [r7, #8]
 8015c1a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d105      	bne.n	8015c2e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	7f9b      	ldrb	r3, [r3, #30]
 8015c26:	f003 0301 	and.w	r3, r3, #1
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d059      	beq.n	8015ce2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015c2e:	6a3b      	ldr	r3, [r7, #32]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d04f      	beq.n	8015cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	685b      	ldr	r3, [r3, #4]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d006      	beq.n	8015c4a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	685b      	ldr	r3, [r3, #4]
 8015c40:	685b      	ldr	r3, [r3, #4]
 8015c42:	889b      	ldrh	r3, [r3, #4]
 8015c44:	b29b      	uxth	r3, r3
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d002      	beq.n	8015c50 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015c4a:	2300      	movs	r3, #0
 8015c4c:	623b      	str	r3, [r7, #32]
 8015c4e:	e041      	b.n	8015cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c52:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015c5a:	e012      	b.n	8015c82 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c5e:	685b      	ldr	r3, [r3, #4]
 8015c60:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c64:	88db      	ldrh	r3, [r3, #6]
 8015c66:	b29a      	uxth	r2, r3
 8015c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c6a:	889b      	ldrh	r3, [r3, #4]
 8015c6c:	b29b      	uxth	r3, r3
 8015c6e:	429a      	cmp	r2, r3
 8015c70:	d002      	beq.n	8015c78 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015c72:	2300      	movs	r3, #0
 8015c74:	623b      	str	r3, [r7, #32]
            break;
 8015c76:	e007      	b.n	8015c88 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c7a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d1e9      	bne.n	8015c5c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015c88:	6a3b      	ldr	r3, [r7, #32]
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d022      	beq.n	8015cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	685b      	ldr	r3, [r3, #4]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d106      	bne.n	8015ca4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015c96:	4b15      	ldr	r3, [pc, #84]	; (8015cec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015c98:	f240 12df 	movw	r2, #479	; 0x1df
 8015c9c:	4917      	ldr	r1, [pc, #92]	; (8015cfc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015c9e:	4815      	ldr	r0, [pc, #84]	; (8015cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015ca0:	f000 fd34 	bl	801670c <iprintf>
          LWIP_ASSERT("sanity check",
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	685b      	ldr	r3, [r3, #4]
 8015ca8:	685b      	ldr	r3, [r3, #4]
 8015caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015cac:	429a      	cmp	r2, r3
 8015cae:	d106      	bne.n	8015cbe <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015cb0:	4b0e      	ldr	r3, [pc, #56]	; (8015cec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015cb2:	f240 12e1 	movw	r2, #481	; 0x1e1
 8015cb6:	4911      	ldr	r1, [pc, #68]	; (8015cfc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015cb8:	480e      	ldr	r0, [pc, #56]	; (8015cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015cba:	f000 fd27 	bl	801670c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cc0:	681b      	ldr	r3, [r3, #0]
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d006      	beq.n	8015cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015cc6:	4b09      	ldr	r3, [pc, #36]	; (8015cec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015cc8:	f240 12e3 	movw	r2, #483	; 0x1e3
 8015ccc:	490c      	ldr	r1, [pc, #48]	; (8015d00 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015cce:	4809      	ldr	r0, [pc, #36]	; (8015cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015cd0:	f000 fd1c 	bl	801670c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015cd4:	6a3b      	ldr	r3, [r7, #32]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	bf14      	ite	ne
 8015cda:	2301      	movne	r3, #1
 8015cdc:	2300      	moveq	r3, #0
 8015cde:	b2db      	uxtb	r3, r3
 8015ce0:	e000      	b.n	8015ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015ce2:	2300      	movs	r3, #0
}
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	3730      	adds	r7, #48	; 0x30
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	bd80      	pop	{r7, pc}
 8015cec:	08019fb0 	.word	0x08019fb0
 8015cf0:	0801a094 	.word	0x0801a094
 8015cf4:	08019ff8 	.word	0x08019ff8
 8015cf8:	0801a0b4 	.word	0x0801a0b4
 8015cfc:	0801a0ec 	.word	0x0801a0ec
 8015d00:	0801a0fc 	.word	0x0801a0fc

08015d04 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015d04:	b580      	push	{r7, lr}
 8015d06:	b08e      	sub	sp, #56	; 0x38
 8015d08:	af00      	add	r7, sp, #0
 8015d0a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	685b      	ldr	r3, [r3, #4]
 8015d10:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d14:	781b      	ldrb	r3, [r3, #0]
 8015d16:	f003 030f 	and.w	r3, r3, #15
 8015d1a:	b2db      	uxtb	r3, r3
 8015d1c:	009b      	lsls	r3, r3, #2
 8015d1e:	b2db      	uxtb	r3, r3
 8015d20:	2b14      	cmp	r3, #20
 8015d22:	f040 8167 	bne.w	8015ff4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d28:	88db      	ldrh	r3, [r3, #6]
 8015d2a:	b29b      	uxth	r3, r3
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	f7f4 fdc6 	bl	800a8be <lwip_htons>
 8015d32:	4603      	mov	r3, r0
 8015d34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015d38:	b29b      	uxth	r3, r3
 8015d3a:	00db      	lsls	r3, r3, #3
 8015d3c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d40:	885b      	ldrh	r3, [r3, #2]
 8015d42:	b29b      	uxth	r3, r3
 8015d44:	4618      	mov	r0, r3
 8015d46:	f7f4 fdba 	bl	800a8be <lwip_htons>
 8015d4a:	4603      	mov	r3, r0
 8015d4c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d50:	781b      	ldrb	r3, [r3, #0]
 8015d52:	f003 030f 	and.w	r3, r3, #15
 8015d56:	b2db      	uxtb	r3, r3
 8015d58:	009b      	lsls	r3, r3, #2
 8015d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015d5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015d62:	b29b      	uxth	r3, r3
 8015d64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015d66:	429a      	cmp	r2, r3
 8015d68:	f0c0 8146 	bcc.w	8015ff8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015d6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015d70:	b29b      	uxth	r3, r3
 8015d72:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015d74:	1ad3      	subs	r3, r2, r3
 8015d76:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015d78:	6878      	ldr	r0, [r7, #4]
 8015d7a:	f7f6 f8c9 	bl	800bf10 <pbuf_clen>
 8015d7e:	4603      	mov	r3, r0
 8015d80:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015d82:	4ba3      	ldr	r3, [pc, #652]	; (8016010 <ip4_reass+0x30c>)
 8015d84:	881b      	ldrh	r3, [r3, #0]
 8015d86:	461a      	mov	r2, r3
 8015d88:	8c3b      	ldrh	r3, [r7, #32]
 8015d8a:	4413      	add	r3, r2
 8015d8c:	2b0a      	cmp	r3, #10
 8015d8e:	dd10      	ble.n	8015db2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015d90:	8c3b      	ldrh	r3, [r7, #32]
 8015d92:	4619      	mov	r1, r3
 8015d94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d96:	f7ff fd81 	bl	801589c <ip_reass_remove_oldest_datagram>
 8015d9a:	4603      	mov	r3, r0
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	f000 812d 	beq.w	8015ffc <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015da2:	4b9b      	ldr	r3, [pc, #620]	; (8016010 <ip4_reass+0x30c>)
 8015da4:	881b      	ldrh	r3, [r3, #0]
 8015da6:	461a      	mov	r2, r3
 8015da8:	8c3b      	ldrh	r3, [r7, #32]
 8015daa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015dac:	2b0a      	cmp	r3, #10
 8015dae:	f300 8125 	bgt.w	8015ffc <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015db2:	4b98      	ldr	r3, [pc, #608]	; (8016014 <ip4_reass+0x310>)
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	633b      	str	r3, [r7, #48]	; 0x30
 8015db8:	e015      	b.n	8015de6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dbc:	695a      	ldr	r2, [r3, #20]
 8015dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dc0:	68db      	ldr	r3, [r3, #12]
 8015dc2:	429a      	cmp	r2, r3
 8015dc4:	d10c      	bne.n	8015de0 <ip4_reass+0xdc>
 8015dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dc8:	699a      	ldr	r2, [r3, #24]
 8015dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dcc:	691b      	ldr	r3, [r3, #16]
 8015dce:	429a      	cmp	r2, r3
 8015dd0:	d106      	bne.n	8015de0 <ip4_reass+0xdc>
 8015dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dd4:	899a      	ldrh	r2, [r3, #12]
 8015dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dd8:	889b      	ldrh	r3, [r3, #4]
 8015dda:	b29b      	uxth	r3, r3
 8015ddc:	429a      	cmp	r2, r3
 8015dde:	d006      	beq.n	8015dee <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	633b      	str	r3, [r7, #48]	; 0x30
 8015de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d1e6      	bne.n	8015dba <ip4_reass+0xb6>
 8015dec:	e000      	b.n	8015df0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015dee:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d109      	bne.n	8015e0a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015df6:	8c3b      	ldrh	r3, [r7, #32]
 8015df8:	4619      	mov	r1, r3
 8015dfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015dfc:	f7ff fdb0 	bl	8015960 <ip_reass_enqueue_new_datagram>
 8015e00:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d11c      	bne.n	8015e42 <ip4_reass+0x13e>
      goto nullreturn;
 8015e08:	e0f9      	b.n	8015ffe <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e0c:	88db      	ldrh	r3, [r3, #6]
 8015e0e:	b29b      	uxth	r3, r3
 8015e10:	4618      	mov	r0, r3
 8015e12:	f7f4 fd54 	bl	800a8be <lwip_htons>
 8015e16:	4603      	mov	r3, r0
 8015e18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d110      	bne.n	8015e42 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e22:	89db      	ldrh	r3, [r3, #14]
 8015e24:	4618      	mov	r0, r3
 8015e26:	f7f4 fd4a 	bl	800a8be <lwip_htons>
 8015e2a:	4603      	mov	r3, r0
 8015e2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d006      	beq.n	8015e42 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e36:	3308      	adds	r3, #8
 8015e38:	2214      	movs	r2, #20
 8015e3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	f000 fbaa 	bl	8016596 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e44:	88db      	ldrh	r3, [r3, #6]
 8015e46:	b29b      	uxth	r3, r3
 8015e48:	f003 0320 	and.w	r3, r3, #32
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	bf0c      	ite	eq
 8015e50:	2301      	moveq	r3, #1
 8015e52:	2300      	movne	r3, #0
 8015e54:	b2db      	uxtb	r3, r3
 8015e56:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015e58:	69fb      	ldr	r3, [r7, #28]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d00e      	beq.n	8015e7c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015e5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015e60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e62:	4413      	add	r3, r2
 8015e64:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015e66:	8b7a      	ldrh	r2, [r7, #26]
 8015e68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015e6a:	429a      	cmp	r2, r3
 8015e6c:	f0c0 80a0 	bcc.w	8015fb0 <ip4_reass+0x2ac>
 8015e70:	8b7b      	ldrh	r3, [r7, #26]
 8015e72:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015e76:	4293      	cmp	r3, r2
 8015e78:	f200 809a 	bhi.w	8015fb0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015e7c:	69fa      	ldr	r2, [r7, #28]
 8015e7e:	6879      	ldr	r1, [r7, #4]
 8015e80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e82:	f7ff fdd5 	bl	8015a30 <ip_reass_chain_frag_into_datagram_and_validate>
 8015e86:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015e88:	697b      	ldr	r3, [r7, #20]
 8015e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e8e:	f000 8091 	beq.w	8015fb4 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015e92:	4b5f      	ldr	r3, [pc, #380]	; (8016010 <ip4_reass+0x30c>)
 8015e94:	881a      	ldrh	r2, [r3, #0]
 8015e96:	8c3b      	ldrh	r3, [r7, #32]
 8015e98:	4413      	add	r3, r2
 8015e9a:	b29a      	uxth	r2, r3
 8015e9c:	4b5c      	ldr	r3, [pc, #368]	; (8016010 <ip4_reass+0x30c>)
 8015e9e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015ea0:	69fb      	ldr	r3, [r7, #28]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d00d      	beq.n	8015ec2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015ea6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015ea8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015eaa:	4413      	add	r3, r2
 8015eac:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eb0:	8a7a      	ldrh	r2, [r7, #18]
 8015eb2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eb6:	7f9b      	ldrb	r3, [r3, #30]
 8015eb8:	f043 0301 	orr.w	r3, r3, #1
 8015ebc:	b2da      	uxtb	r2, r3
 8015ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ec0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015ec2:	697b      	ldr	r3, [r7, #20]
 8015ec4:	2b01      	cmp	r3, #1
 8015ec6:	d171      	bne.n	8015fac <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eca:	8b9b      	ldrh	r3, [r3, #28]
 8015ecc:	3314      	adds	r3, #20
 8015ece:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ed2:	685b      	ldr	r3, [r3, #4]
 8015ed4:	685b      	ldr	r3, [r3, #4]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015edc:	685b      	ldr	r3, [r3, #4]
 8015ede:	685b      	ldr	r3, [r3, #4]
 8015ee0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ee4:	3308      	adds	r3, #8
 8015ee6:	2214      	movs	r2, #20
 8015ee8:	4619      	mov	r1, r3
 8015eea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015eec:	f000 fb53 	bl	8016596 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015ef0:	8a3b      	ldrh	r3, [r7, #16]
 8015ef2:	4618      	mov	r0, r3
 8015ef4:	f7f4 fce3 	bl	800a8be <lwip_htons>
 8015ef8:	4603      	mov	r3, r0
 8015efa:	461a      	mov	r2, r3
 8015efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015efe:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f02:	2200      	movs	r2, #0
 8015f04:	719a      	strb	r2, [r3, #6]
 8015f06:	2200      	movs	r2, #0
 8015f08:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f0c:	2200      	movs	r2, #0
 8015f0e:	729a      	strb	r2, [r3, #10]
 8015f10:	2200      	movs	r2, #0
 8015f12:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f16:	685b      	ldr	r3, [r3, #4]
 8015f18:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015f1a:	e00d      	b.n	8015f38 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f1e:	685b      	ldr	r3, [r3, #4]
 8015f20:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015f22:	2114      	movs	r1, #20
 8015f24:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015f26:	f7f5 fee5 	bl	800bcf4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015f2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015f2c:	6878      	ldr	r0, [r7, #4]
 8015f2e:	f7f6 f829 	bl	800bf84 <pbuf_cat>
      r = iprh->next_pbuf;
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d1ee      	bne.n	8015f1c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015f3e:	4b35      	ldr	r3, [pc, #212]	; (8016014 <ip4_reass+0x310>)
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f44:	429a      	cmp	r2, r3
 8015f46:	d102      	bne.n	8015f4e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015f48:	2300      	movs	r3, #0
 8015f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015f4c:	e010      	b.n	8015f70 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015f4e:	4b31      	ldr	r3, [pc, #196]	; (8016014 <ip4_reass+0x310>)
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015f54:	e007      	b.n	8015f66 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f5c:	429a      	cmp	r2, r3
 8015f5e:	d006      	beq.n	8015f6e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d1f4      	bne.n	8015f56 <ip4_reass+0x252>
 8015f6c:	e000      	b.n	8015f70 <ip4_reass+0x26c>
          break;
 8015f6e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015f70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015f72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f74:	f7ff fd2e 	bl	80159d4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015f78:	6878      	ldr	r0, [r7, #4]
 8015f7a:	f7f5 ffc9 	bl	800bf10 <pbuf_clen>
 8015f7e:	4603      	mov	r3, r0
 8015f80:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015f82:	4b23      	ldr	r3, [pc, #140]	; (8016010 <ip4_reass+0x30c>)
 8015f84:	881b      	ldrh	r3, [r3, #0]
 8015f86:	8c3a      	ldrh	r2, [r7, #32]
 8015f88:	429a      	cmp	r2, r3
 8015f8a:	d906      	bls.n	8015f9a <ip4_reass+0x296>
 8015f8c:	4b22      	ldr	r3, [pc, #136]	; (8016018 <ip4_reass+0x314>)
 8015f8e:	f240 229b 	movw	r2, #667	; 0x29b
 8015f92:	4922      	ldr	r1, [pc, #136]	; (801601c <ip4_reass+0x318>)
 8015f94:	4822      	ldr	r0, [pc, #136]	; (8016020 <ip4_reass+0x31c>)
 8015f96:	f000 fbb9 	bl	801670c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015f9a:	4b1d      	ldr	r3, [pc, #116]	; (8016010 <ip4_reass+0x30c>)
 8015f9c:	881a      	ldrh	r2, [r3, #0]
 8015f9e:	8c3b      	ldrh	r3, [r7, #32]
 8015fa0:	1ad3      	subs	r3, r2, r3
 8015fa2:	b29a      	uxth	r2, r3
 8015fa4:	4b1a      	ldr	r3, [pc, #104]	; (8016010 <ip4_reass+0x30c>)
 8015fa6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	e02c      	b.n	8016006 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015fac:	2300      	movs	r3, #0
 8015fae:	e02a      	b.n	8016006 <ip4_reass+0x302>

nullreturn_ipr:
 8015fb0:	bf00      	nop
 8015fb2:	e000      	b.n	8015fb6 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8015fb4:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d106      	bne.n	8015fca <ip4_reass+0x2c6>
 8015fbc:	4b16      	ldr	r3, [pc, #88]	; (8016018 <ip4_reass+0x314>)
 8015fbe:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8015fc2:	4918      	ldr	r1, [pc, #96]	; (8016024 <ip4_reass+0x320>)
 8015fc4:	4816      	ldr	r0, [pc, #88]	; (8016020 <ip4_reass+0x31c>)
 8015fc6:	f000 fba1 	bl	801670c <iprintf>
  if (ipr->p == NULL) {
 8015fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fcc:	685b      	ldr	r3, [r3, #4]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d114      	bne.n	8015ffc <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015fd2:	4b10      	ldr	r3, [pc, #64]	; (8016014 <ip4_reass+0x310>)
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015fd8:	429a      	cmp	r2, r3
 8015fda:	d006      	beq.n	8015fea <ip4_reass+0x2e6>
 8015fdc:	4b0e      	ldr	r3, [pc, #56]	; (8016018 <ip4_reass+0x314>)
 8015fde:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015fe2:	4911      	ldr	r1, [pc, #68]	; (8016028 <ip4_reass+0x324>)
 8015fe4:	480e      	ldr	r0, [pc, #56]	; (8016020 <ip4_reass+0x31c>)
 8015fe6:	f000 fb91 	bl	801670c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015fea:	2100      	movs	r1, #0
 8015fec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015fee:	f7ff fcf1 	bl	80159d4 <ip_reass_dequeue_datagram>
 8015ff2:	e004      	b.n	8015ffe <ip4_reass+0x2fa>
    goto nullreturn;
 8015ff4:	bf00      	nop
 8015ff6:	e002      	b.n	8015ffe <ip4_reass+0x2fa>
    goto nullreturn;
 8015ff8:	bf00      	nop
 8015ffa:	e000      	b.n	8015ffe <ip4_reass+0x2fa>
  }

nullreturn:
 8015ffc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015ffe:	6878      	ldr	r0, [r7, #4]
 8016000:	f7f5 fefe 	bl	800be00 <pbuf_free>
  return NULL;
 8016004:	2300      	movs	r3, #0
}
 8016006:	4618      	mov	r0, r3
 8016008:	3738      	adds	r7, #56	; 0x38
 801600a:	46bd      	mov	sp, r7
 801600c:	bd80      	pop	{r7, pc}
 801600e:	bf00      	nop
 8016010:	200005a0 	.word	0x200005a0
 8016014:	2000059c 	.word	0x2000059c
 8016018:	08019fb0 	.word	0x08019fb0
 801601c:	0801a120 	.word	0x0801a120
 8016020:	08019ff8 	.word	0x08019ff8
 8016024:	0801a13c 	.word	0x0801a13c
 8016028:	0801a148 	.word	0x0801a148

0801602c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801602c:	b580      	push	{r7, lr}
 801602e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016030:	2005      	movs	r0, #5
 8016032:	f7f5 f899 	bl	800b168 <memp_malloc>
 8016036:	4603      	mov	r3, r0
}
 8016038:	4618      	mov	r0, r3
 801603a:	bd80      	pop	{r7, pc}

0801603c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801603c:	b580      	push	{r7, lr}
 801603e:	b082      	sub	sp, #8
 8016040:	af00      	add	r7, sp, #0
 8016042:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d106      	bne.n	8016058 <ip_frag_free_pbuf_custom_ref+0x1c>
 801604a:	4b07      	ldr	r3, [pc, #28]	; (8016068 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801604c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016050:	4906      	ldr	r1, [pc, #24]	; (801606c <ip_frag_free_pbuf_custom_ref+0x30>)
 8016052:	4807      	ldr	r0, [pc, #28]	; (8016070 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016054:	f000 fb5a 	bl	801670c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016058:	6879      	ldr	r1, [r7, #4]
 801605a:	2005      	movs	r0, #5
 801605c:	f7f5 f8d0 	bl	800b200 <memp_free>
}
 8016060:	bf00      	nop
 8016062:	3708      	adds	r7, #8
 8016064:	46bd      	mov	sp, r7
 8016066:	bd80      	pop	{r7, pc}
 8016068:	08019fb0 	.word	0x08019fb0
 801606c:	0801a168 	.word	0x0801a168
 8016070:	08019ff8 	.word	0x08019ff8

08016074 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016074:	b580      	push	{r7, lr}
 8016076:	b084      	sub	sp, #16
 8016078:	af00      	add	r7, sp, #0
 801607a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	2b00      	cmp	r3, #0
 8016084:	d106      	bne.n	8016094 <ipfrag_free_pbuf_custom+0x20>
 8016086:	4b11      	ldr	r3, [pc, #68]	; (80160cc <ipfrag_free_pbuf_custom+0x58>)
 8016088:	f240 22ce 	movw	r2, #718	; 0x2ce
 801608c:	4910      	ldr	r1, [pc, #64]	; (80160d0 <ipfrag_free_pbuf_custom+0x5c>)
 801608e:	4811      	ldr	r0, [pc, #68]	; (80160d4 <ipfrag_free_pbuf_custom+0x60>)
 8016090:	f000 fb3c 	bl	801670c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016094:	68fa      	ldr	r2, [r7, #12]
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	429a      	cmp	r2, r3
 801609a:	d006      	beq.n	80160aa <ipfrag_free_pbuf_custom+0x36>
 801609c:	4b0b      	ldr	r3, [pc, #44]	; (80160cc <ipfrag_free_pbuf_custom+0x58>)
 801609e:	f240 22cf 	movw	r2, #719	; 0x2cf
 80160a2:	490d      	ldr	r1, [pc, #52]	; (80160d8 <ipfrag_free_pbuf_custom+0x64>)
 80160a4:	480b      	ldr	r0, [pc, #44]	; (80160d4 <ipfrag_free_pbuf_custom+0x60>)
 80160a6:	f000 fb31 	bl	801670c <iprintf>
  if (pcr->original != NULL) {
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	695b      	ldr	r3, [r3, #20]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d004      	beq.n	80160bc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	695b      	ldr	r3, [r3, #20]
 80160b6:	4618      	mov	r0, r3
 80160b8:	f7f5 fea2 	bl	800be00 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80160bc:	68f8      	ldr	r0, [r7, #12]
 80160be:	f7ff ffbd 	bl	801603c <ip_frag_free_pbuf_custom_ref>
}
 80160c2:	bf00      	nop
 80160c4:	3710      	adds	r7, #16
 80160c6:	46bd      	mov	sp, r7
 80160c8:	bd80      	pop	{r7, pc}
 80160ca:	bf00      	nop
 80160cc:	08019fb0 	.word	0x08019fb0
 80160d0:	0801a174 	.word	0x0801a174
 80160d4:	08019ff8 	.word	0x08019ff8
 80160d8:	0801a180 	.word	0x0801a180

080160dc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80160dc:	b580      	push	{r7, lr}
 80160de:	b094      	sub	sp, #80	; 0x50
 80160e0:	af02      	add	r7, sp, #8
 80160e2:	60f8      	str	r0, [r7, #12]
 80160e4:	60b9      	str	r1, [r7, #8]
 80160e6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80160e8:	2300      	movs	r3, #0
 80160ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80160ee:	68bb      	ldr	r3, [r7, #8]
 80160f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80160f2:	3b14      	subs	r3, #20
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	da00      	bge.n	80160fa <ip4_frag+0x1e>
 80160f8:	3307      	adds	r3, #7
 80160fa:	10db      	asrs	r3, r3, #3
 80160fc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80160fe:	2314      	movs	r3, #20
 8016100:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	685b      	ldr	r3, [r3, #4]
 8016106:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801610a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801610c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801610e:	781b      	ldrb	r3, [r3, #0]
 8016110:	f003 030f 	and.w	r3, r3, #15
 8016114:	b2db      	uxtb	r3, r3
 8016116:	009b      	lsls	r3, r3, #2
 8016118:	b2db      	uxtb	r3, r3
 801611a:	2b14      	cmp	r3, #20
 801611c:	d002      	beq.n	8016124 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801611e:	f06f 0305 	mvn.w	r3, #5
 8016122:	e10f      	b.n	8016344 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	895b      	ldrh	r3, [r3, #10]
 8016128:	2b13      	cmp	r3, #19
 801612a:	d809      	bhi.n	8016140 <ip4_frag+0x64>
 801612c:	4b87      	ldr	r3, [pc, #540]	; (801634c <ip4_frag+0x270>)
 801612e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016132:	4987      	ldr	r1, [pc, #540]	; (8016350 <ip4_frag+0x274>)
 8016134:	4887      	ldr	r0, [pc, #540]	; (8016354 <ip4_frag+0x278>)
 8016136:	f000 fae9 	bl	801670c <iprintf>
 801613a:	f06f 0305 	mvn.w	r3, #5
 801613e:	e101      	b.n	8016344 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016142:	88db      	ldrh	r3, [r3, #6]
 8016144:	b29b      	uxth	r3, r3
 8016146:	4618      	mov	r0, r3
 8016148:	f7f4 fbb9 	bl	800a8be <lwip_htons>
 801614c:	4603      	mov	r3, r0
 801614e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016150:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016152:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016156:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801615a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801615c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016160:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	891b      	ldrh	r3, [r3, #8]
 8016166:	3b14      	subs	r3, #20
 8016168:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801616c:	e0e0      	b.n	8016330 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801616e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016170:	00db      	lsls	r3, r3, #3
 8016172:	b29b      	uxth	r3, r3
 8016174:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016178:	4293      	cmp	r3, r2
 801617a:	bf28      	it	cs
 801617c:	4613      	movcs	r3, r2
 801617e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016180:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016184:	2114      	movs	r1, #20
 8016186:	200e      	movs	r0, #14
 8016188:	f7f5 fb5a 	bl	800b840 <pbuf_alloc>
 801618c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016190:	2b00      	cmp	r3, #0
 8016192:	f000 80d4 	beq.w	801633e <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016198:	895b      	ldrh	r3, [r3, #10]
 801619a:	2b13      	cmp	r3, #19
 801619c:	d806      	bhi.n	80161ac <ip4_frag+0xd0>
 801619e:	4b6b      	ldr	r3, [pc, #428]	; (801634c <ip4_frag+0x270>)
 80161a0:	f240 3225 	movw	r2, #805	; 0x325
 80161a4:	496c      	ldr	r1, [pc, #432]	; (8016358 <ip4_frag+0x27c>)
 80161a6:	486b      	ldr	r0, [pc, #428]	; (8016354 <ip4_frag+0x278>)
 80161a8:	f000 fab0 	bl	801670c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80161ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161ae:	685b      	ldr	r3, [r3, #4]
 80161b0:	2214      	movs	r2, #20
 80161b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80161b4:	4618      	mov	r0, r3
 80161b6:	f000 f9ee 	bl	8016596 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80161ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161bc:	685b      	ldr	r3, [r3, #4]
 80161be:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80161c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80161c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80161c6:	e064      	b.n	8016292 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	895a      	ldrh	r2, [r3, #10]
 80161cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80161ce:	1ad3      	subs	r3, r2, r3
 80161d0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80161d2:	68fb      	ldr	r3, [r7, #12]
 80161d4:	895b      	ldrh	r3, [r3, #10]
 80161d6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80161d8:	429a      	cmp	r2, r3
 80161da:	d906      	bls.n	80161ea <ip4_frag+0x10e>
 80161dc:	4b5b      	ldr	r3, [pc, #364]	; (801634c <ip4_frag+0x270>)
 80161de:	f240 322d 	movw	r2, #813	; 0x32d
 80161e2:	495e      	ldr	r1, [pc, #376]	; (801635c <ip4_frag+0x280>)
 80161e4:	485b      	ldr	r0, [pc, #364]	; (8016354 <ip4_frag+0x278>)
 80161e6:	f000 fa91 	bl	801670c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80161ea:	8bfa      	ldrh	r2, [r7, #30]
 80161ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80161f0:	4293      	cmp	r3, r2
 80161f2:	bf28      	it	cs
 80161f4:	4613      	movcs	r3, r2
 80161f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80161fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d105      	bne.n	801620e <ip4_frag+0x132>
        poff = 0;
 8016202:	2300      	movs	r3, #0
 8016204:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	60fb      	str	r3, [r7, #12]
        continue;
 801620c:	e041      	b.n	8016292 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801620e:	f7ff ff0d 	bl	801602c <ip_frag_alloc_pbuf_custom_ref>
 8016212:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016214:	69bb      	ldr	r3, [r7, #24]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d103      	bne.n	8016222 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801621a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801621c:	f7f5 fdf0 	bl	800be00 <pbuf_free>
        goto memerr;
 8016220:	e08e      	b.n	8016340 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016222:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016228:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801622a:	4413      	add	r3, r2
 801622c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016230:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016234:	9201      	str	r2, [sp, #4]
 8016236:	9300      	str	r3, [sp, #0]
 8016238:	4603      	mov	r3, r0
 801623a:	2241      	movs	r2, #65	; 0x41
 801623c:	2000      	movs	r0, #0
 801623e:	f7f5 fc25 	bl	800ba8c <pbuf_alloced_custom>
 8016242:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016244:	697b      	ldr	r3, [r7, #20]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d106      	bne.n	8016258 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801624a:	69b8      	ldr	r0, [r7, #24]
 801624c:	f7ff fef6 	bl	801603c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016250:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016252:	f7f5 fdd5 	bl	800be00 <pbuf_free>
        goto memerr;
 8016256:	e073      	b.n	8016340 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8016258:	68f8      	ldr	r0, [r7, #12]
 801625a:	f7f5 fe71 	bl	800bf40 <pbuf_ref>
      pcr->original = p;
 801625e:	69bb      	ldr	r3, [r7, #24]
 8016260:	68fa      	ldr	r2, [r7, #12]
 8016262:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016264:	69bb      	ldr	r3, [r7, #24]
 8016266:	4a3e      	ldr	r2, [pc, #248]	; (8016360 <ip4_frag+0x284>)
 8016268:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801626a:	6979      	ldr	r1, [r7, #20]
 801626c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801626e:	f7f5 fe89 	bl	800bf84 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016272:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016276:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801627a:	1ad3      	subs	r3, r2, r3
 801627c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016280:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016284:	2b00      	cmp	r3, #0
 8016286:	d004      	beq.n	8016292 <ip4_frag+0x1b6>
        poff = 0;
 8016288:	2300      	movs	r3, #0
 801628a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016292:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016296:	2b00      	cmp	r3, #0
 8016298:	d196      	bne.n	80161c8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801629a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801629c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80162a0:	4413      	add	r3, r2
 80162a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80162a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80162a8:	68bb      	ldr	r3, [r7, #8]
 80162aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80162ac:	3b14      	subs	r3, #20
 80162ae:	429a      	cmp	r2, r3
 80162b0:	bfd4      	ite	le
 80162b2:	2301      	movle	r3, #1
 80162b4:	2300      	movgt	r3, #0
 80162b6:	b2db      	uxtb	r3, r3
 80162b8:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80162ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80162be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80162c2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80162c4:	6a3b      	ldr	r3, [r7, #32]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d002      	beq.n	80162d0 <ip4_frag+0x1f4>
 80162ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d003      	beq.n	80162d8 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80162d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80162d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80162d6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80162d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80162da:	4618      	mov	r0, r3
 80162dc:	f7f4 faef 	bl	800a8be <lwip_htons>
 80162e0:	4603      	mov	r3, r0
 80162e2:	461a      	mov	r2, r3
 80162e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162e6:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80162e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80162ea:	3314      	adds	r3, #20
 80162ec:	b29b      	uxth	r3, r3
 80162ee:	4618      	mov	r0, r3
 80162f0:	f7f4 fae5 	bl	800a8be <lwip_htons>
 80162f4:	4603      	mov	r3, r0
 80162f6:	461a      	mov	r2, r3
 80162f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162fa:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80162fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162fe:	2200      	movs	r2, #0
 8016300:	729a      	strb	r2, [r3, #10]
 8016302:	2200      	movs	r2, #0
 8016304:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016306:	68bb      	ldr	r3, [r7, #8]
 8016308:	695b      	ldr	r3, [r3, #20]
 801630a:	687a      	ldr	r2, [r7, #4]
 801630c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801630e:	68b8      	ldr	r0, [r7, #8]
 8016310:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016312:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016314:	f7f5 fd74 	bl	800be00 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016318:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801631c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801631e:	1ad3      	subs	r3, r2, r3
 8016320:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016324:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016328:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801632a:	4413      	add	r3, r2
 801632c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016330:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016334:	2b00      	cmp	r3, #0
 8016336:	f47f af1a 	bne.w	801616e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801633a:	2300      	movs	r3, #0
 801633c:	e002      	b.n	8016344 <ip4_frag+0x268>
      goto memerr;
 801633e:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016340:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016344:	4618      	mov	r0, r3
 8016346:	3748      	adds	r7, #72	; 0x48
 8016348:	46bd      	mov	sp, r7
 801634a:	bd80      	pop	{r7, pc}
 801634c:	08019fb0 	.word	0x08019fb0
 8016350:	0801a18c 	.word	0x0801a18c
 8016354:	08019ff8 	.word	0x08019ff8
 8016358:	0801a1a8 	.word	0x0801a1a8
 801635c:	0801a1c8 	.word	0x0801a1c8
 8016360:	08016075 	.word	0x08016075

08016364 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016364:	b580      	push	{r7, lr}
 8016366:	b086      	sub	sp, #24
 8016368:	af00      	add	r7, sp, #0
 801636a:	6078      	str	r0, [r7, #4]
 801636c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801636e:	230e      	movs	r3, #14
 8016370:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	895b      	ldrh	r3, [r3, #10]
 8016376:	2b0e      	cmp	r3, #14
 8016378:	d96e      	bls.n	8016458 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	7bdb      	ldrb	r3, [r3, #15]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d106      	bne.n	8016390 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016382:	683b      	ldr	r3, [r7, #0]
 8016384:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016388:	3301      	adds	r3, #1
 801638a:	b2da      	uxtb	r2, r3
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	685b      	ldr	r3, [r3, #4]
 8016394:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016396:	693b      	ldr	r3, [r7, #16]
 8016398:	7b1a      	ldrb	r2, [r3, #12]
 801639a:	7b5b      	ldrb	r3, [r3, #13]
 801639c:	021b      	lsls	r3, r3, #8
 801639e:	4313      	orrs	r3, r2
 80163a0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80163a2:	693b      	ldr	r3, [r7, #16]
 80163a4:	781b      	ldrb	r3, [r3, #0]
 80163a6:	f003 0301 	and.w	r3, r3, #1
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d023      	beq.n	80163f6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80163ae:	693b      	ldr	r3, [r7, #16]
 80163b0:	781b      	ldrb	r3, [r3, #0]
 80163b2:	2b01      	cmp	r3, #1
 80163b4:	d10f      	bne.n	80163d6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80163b6:	693b      	ldr	r3, [r7, #16]
 80163b8:	785b      	ldrb	r3, [r3, #1]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d11b      	bne.n	80163f6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80163be:	693b      	ldr	r3, [r7, #16]
 80163c0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80163c2:	2b5e      	cmp	r3, #94	; 0x5e
 80163c4:	d117      	bne.n	80163f6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	7b5b      	ldrb	r3, [r3, #13]
 80163ca:	f043 0310 	orr.w	r3, r3, #16
 80163ce:	b2da      	uxtb	r2, r3
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	735a      	strb	r2, [r3, #13]
 80163d4:	e00f      	b.n	80163f6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80163d6:	693b      	ldr	r3, [r7, #16]
 80163d8:	2206      	movs	r2, #6
 80163da:	4928      	ldr	r1, [pc, #160]	; (801647c <ethernet_input+0x118>)
 80163dc:	4618      	mov	r0, r3
 80163de:	f000 f8cb 	bl	8016578 <memcmp>
 80163e2:	4603      	mov	r3, r0
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d106      	bne.n	80163f6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	7b5b      	ldrb	r3, [r3, #13]
 80163ec:	f043 0308 	orr.w	r3, r3, #8
 80163f0:	b2da      	uxtb	r2, r3
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80163f6:	89fb      	ldrh	r3, [r7, #14]
 80163f8:	2b08      	cmp	r3, #8
 80163fa:	d003      	beq.n	8016404 <ethernet_input+0xa0>
 80163fc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016400:	d014      	beq.n	801642c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016402:	e032      	b.n	801646a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016404:	683b      	ldr	r3, [r7, #0]
 8016406:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801640a:	f003 0308 	and.w	r3, r3, #8
 801640e:	2b00      	cmp	r3, #0
 8016410:	d024      	beq.n	801645c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016412:	8afb      	ldrh	r3, [r7, #22]
 8016414:	4619      	mov	r1, r3
 8016416:	6878      	ldr	r0, [r7, #4]
 8016418:	f7f5 fc6c 	bl	800bcf4 <pbuf_remove_header>
 801641c:	4603      	mov	r3, r0
 801641e:	2b00      	cmp	r3, #0
 8016420:	d11e      	bne.n	8016460 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016422:	6839      	ldr	r1, [r7, #0]
 8016424:	6878      	ldr	r0, [r7, #4]
 8016426:	f7fe ff0f 	bl	8015248 <ip4_input>
      break;
 801642a:	e013      	b.n	8016454 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801642c:	683b      	ldr	r3, [r7, #0]
 801642e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016432:	f003 0308 	and.w	r3, r3, #8
 8016436:	2b00      	cmp	r3, #0
 8016438:	d014      	beq.n	8016464 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801643a:	8afb      	ldrh	r3, [r7, #22]
 801643c:	4619      	mov	r1, r3
 801643e:	6878      	ldr	r0, [r7, #4]
 8016440:	f7f5 fc58 	bl	800bcf4 <pbuf_remove_header>
 8016444:	4603      	mov	r3, r0
 8016446:	2b00      	cmp	r3, #0
 8016448:	d10e      	bne.n	8016468 <ethernet_input+0x104>
        etharp_input(p, netif);
 801644a:	6839      	ldr	r1, [r7, #0]
 801644c:	6878      	ldr	r0, [r7, #4]
 801644e:	f7fe f8ab 	bl	80145a8 <etharp_input>
      break;
 8016452:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016454:	2300      	movs	r3, #0
 8016456:	e00c      	b.n	8016472 <ethernet_input+0x10e>
    goto free_and_return;
 8016458:	bf00      	nop
 801645a:	e006      	b.n	801646a <ethernet_input+0x106>
        goto free_and_return;
 801645c:	bf00      	nop
 801645e:	e004      	b.n	801646a <ethernet_input+0x106>
        goto free_and_return;
 8016460:	bf00      	nop
 8016462:	e002      	b.n	801646a <ethernet_input+0x106>
        goto free_and_return;
 8016464:	bf00      	nop
 8016466:	e000      	b.n	801646a <ethernet_input+0x106>
        goto free_and_return;
 8016468:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801646a:	6878      	ldr	r0, [r7, #4]
 801646c:	f7f5 fcc8 	bl	800be00 <pbuf_free>
  return ERR_OK;
 8016470:	2300      	movs	r3, #0
}
 8016472:	4618      	mov	r0, r3
 8016474:	3718      	adds	r7, #24
 8016476:	46bd      	mov	sp, r7
 8016478:	bd80      	pop	{r7, pc}
 801647a:	bf00      	nop
 801647c:	08028d14 	.word	0x08028d14

08016480 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016480:	b580      	push	{r7, lr}
 8016482:	b086      	sub	sp, #24
 8016484:	af00      	add	r7, sp, #0
 8016486:	60f8      	str	r0, [r7, #12]
 8016488:	60b9      	str	r1, [r7, #8]
 801648a:	607a      	str	r2, [r7, #4]
 801648c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801648e:	8c3b      	ldrh	r3, [r7, #32]
 8016490:	4618      	mov	r0, r3
 8016492:	f7f4 fa14 	bl	800a8be <lwip_htons>
 8016496:	4603      	mov	r3, r0
 8016498:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801649a:	210e      	movs	r1, #14
 801649c:	68b8      	ldr	r0, [r7, #8]
 801649e:	f7f5 fc19 	bl	800bcd4 <pbuf_add_header>
 80164a2:	4603      	mov	r3, r0
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d125      	bne.n	80164f4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80164a8:	68bb      	ldr	r3, [r7, #8]
 80164aa:	685b      	ldr	r3, [r3, #4]
 80164ac:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80164ae:	693b      	ldr	r3, [r7, #16]
 80164b0:	8afa      	ldrh	r2, [r7, #22]
 80164b2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80164b4:	693b      	ldr	r3, [r7, #16]
 80164b6:	2206      	movs	r2, #6
 80164b8:	6839      	ldr	r1, [r7, #0]
 80164ba:	4618      	mov	r0, r3
 80164bc:	f000 f86b 	bl	8016596 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80164c0:	693b      	ldr	r3, [r7, #16]
 80164c2:	3306      	adds	r3, #6
 80164c4:	2206      	movs	r2, #6
 80164c6:	6879      	ldr	r1, [r7, #4]
 80164c8:	4618      	mov	r0, r3
 80164ca:	f000 f864 	bl	8016596 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80164d4:	2b06      	cmp	r3, #6
 80164d6:	d006      	beq.n	80164e6 <ethernet_output+0x66>
 80164d8:	4b0a      	ldr	r3, [pc, #40]	; (8016504 <ethernet_output+0x84>)
 80164da:	f240 1233 	movw	r2, #307	; 0x133
 80164de:	490a      	ldr	r1, [pc, #40]	; (8016508 <ethernet_output+0x88>)
 80164e0:	480a      	ldr	r0, [pc, #40]	; (801650c <ethernet_output+0x8c>)
 80164e2:	f000 f913 	bl	801670c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	699b      	ldr	r3, [r3, #24]
 80164ea:	68b9      	ldr	r1, [r7, #8]
 80164ec:	68f8      	ldr	r0, [r7, #12]
 80164ee:	4798      	blx	r3
 80164f0:	4603      	mov	r3, r0
 80164f2:	e002      	b.n	80164fa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80164f4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80164f6:	f06f 0301 	mvn.w	r3, #1
}
 80164fa:	4618      	mov	r0, r3
 80164fc:	3718      	adds	r7, #24
 80164fe:	46bd      	mov	sp, r7
 8016500:	bd80      	pop	{r7, pc}
 8016502:	bf00      	nop
 8016504:	0801a1d8 	.word	0x0801a1d8
 8016508:	0801a210 	.word	0x0801a210
 801650c:	0801a244 	.word	0x0801a244

08016510 <__libc_init_array>:
 8016510:	b570      	push	{r4, r5, r6, lr}
 8016512:	4e0d      	ldr	r6, [pc, #52]	; (8016548 <__libc_init_array+0x38>)
 8016514:	4c0d      	ldr	r4, [pc, #52]	; (801654c <__libc_init_array+0x3c>)
 8016516:	1ba4      	subs	r4, r4, r6
 8016518:	10a4      	asrs	r4, r4, #2
 801651a:	2500      	movs	r5, #0
 801651c:	42a5      	cmp	r5, r4
 801651e:	d109      	bne.n	8016534 <__libc_init_array+0x24>
 8016520:	4e0b      	ldr	r6, [pc, #44]	; (8016550 <__libc_init_array+0x40>)
 8016522:	4c0c      	ldr	r4, [pc, #48]	; (8016554 <__libc_init_array+0x44>)
 8016524:	f000 ff62 	bl	80173ec <_init>
 8016528:	1ba4      	subs	r4, r4, r6
 801652a:	10a4      	asrs	r4, r4, #2
 801652c:	2500      	movs	r5, #0
 801652e:	42a5      	cmp	r5, r4
 8016530:	d105      	bne.n	801653e <__libc_init_array+0x2e>
 8016532:	bd70      	pop	{r4, r5, r6, pc}
 8016534:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016538:	4798      	blx	r3
 801653a:	3501      	adds	r5, #1
 801653c:	e7ee      	b.n	801651c <__libc_init_array+0xc>
 801653e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8016542:	4798      	blx	r3
 8016544:	3501      	adds	r5, #1
 8016546:	e7f2      	b.n	801652e <__libc_init_array+0x1e>
 8016548:	08028dc4 	.word	0x08028dc4
 801654c:	08028dc4 	.word	0x08028dc4
 8016550:	08028dc4 	.word	0x08028dc4
 8016554:	08028dc8 	.word	0x08028dc8

08016558 <malloc>:
 8016558:	4b02      	ldr	r3, [pc, #8]	; (8016564 <malloc+0xc>)
 801655a:	4601      	mov	r1, r0
 801655c:	6818      	ldr	r0, [r3, #0]
 801655e:	f000 b87b 	b.w	8016658 <_malloc_r>
 8016562:	bf00      	nop
 8016564:	20000024 	.word	0x20000024

08016568 <free>:
 8016568:	4b02      	ldr	r3, [pc, #8]	; (8016574 <free+0xc>)
 801656a:	4601      	mov	r1, r0
 801656c:	6818      	ldr	r0, [r3, #0]
 801656e:	f000 b825 	b.w	80165bc <_free_r>
 8016572:	bf00      	nop
 8016574:	20000024 	.word	0x20000024

08016578 <memcmp>:
 8016578:	b530      	push	{r4, r5, lr}
 801657a:	2400      	movs	r4, #0
 801657c:	42a2      	cmp	r2, r4
 801657e:	d101      	bne.n	8016584 <memcmp+0xc>
 8016580:	2000      	movs	r0, #0
 8016582:	e007      	b.n	8016594 <memcmp+0x1c>
 8016584:	5d03      	ldrb	r3, [r0, r4]
 8016586:	3401      	adds	r4, #1
 8016588:	190d      	adds	r5, r1, r4
 801658a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801658e:	42ab      	cmp	r3, r5
 8016590:	d0f4      	beq.n	801657c <memcmp+0x4>
 8016592:	1b58      	subs	r0, r3, r5
 8016594:	bd30      	pop	{r4, r5, pc}

08016596 <memcpy>:
 8016596:	b510      	push	{r4, lr}
 8016598:	1e43      	subs	r3, r0, #1
 801659a:	440a      	add	r2, r1
 801659c:	4291      	cmp	r1, r2
 801659e:	d100      	bne.n	80165a2 <memcpy+0xc>
 80165a0:	bd10      	pop	{r4, pc}
 80165a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80165a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80165aa:	e7f7      	b.n	801659c <memcpy+0x6>

080165ac <memset>:
 80165ac:	4402      	add	r2, r0
 80165ae:	4603      	mov	r3, r0
 80165b0:	4293      	cmp	r3, r2
 80165b2:	d100      	bne.n	80165b6 <memset+0xa>
 80165b4:	4770      	bx	lr
 80165b6:	f803 1b01 	strb.w	r1, [r3], #1
 80165ba:	e7f9      	b.n	80165b0 <memset+0x4>

080165bc <_free_r>:
 80165bc:	b538      	push	{r3, r4, r5, lr}
 80165be:	4605      	mov	r5, r0
 80165c0:	2900      	cmp	r1, #0
 80165c2:	d045      	beq.n	8016650 <_free_r+0x94>
 80165c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80165c8:	1f0c      	subs	r4, r1, #4
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	bfb8      	it	lt
 80165ce:	18e4      	addlt	r4, r4, r3
 80165d0:	f000 f9c2 	bl	8016958 <__malloc_lock>
 80165d4:	4a1f      	ldr	r2, [pc, #124]	; (8016654 <_free_r+0x98>)
 80165d6:	6813      	ldr	r3, [r2, #0]
 80165d8:	4610      	mov	r0, r2
 80165da:	b933      	cbnz	r3, 80165ea <_free_r+0x2e>
 80165dc:	6063      	str	r3, [r4, #4]
 80165de:	6014      	str	r4, [r2, #0]
 80165e0:	4628      	mov	r0, r5
 80165e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80165e6:	f000 b9b8 	b.w	801695a <__malloc_unlock>
 80165ea:	42a3      	cmp	r3, r4
 80165ec:	d90c      	bls.n	8016608 <_free_r+0x4c>
 80165ee:	6821      	ldr	r1, [r4, #0]
 80165f0:	1862      	adds	r2, r4, r1
 80165f2:	4293      	cmp	r3, r2
 80165f4:	bf04      	itt	eq
 80165f6:	681a      	ldreq	r2, [r3, #0]
 80165f8:	685b      	ldreq	r3, [r3, #4]
 80165fa:	6063      	str	r3, [r4, #4]
 80165fc:	bf04      	itt	eq
 80165fe:	1852      	addeq	r2, r2, r1
 8016600:	6022      	streq	r2, [r4, #0]
 8016602:	6004      	str	r4, [r0, #0]
 8016604:	e7ec      	b.n	80165e0 <_free_r+0x24>
 8016606:	4613      	mov	r3, r2
 8016608:	685a      	ldr	r2, [r3, #4]
 801660a:	b10a      	cbz	r2, 8016610 <_free_r+0x54>
 801660c:	42a2      	cmp	r2, r4
 801660e:	d9fa      	bls.n	8016606 <_free_r+0x4a>
 8016610:	6819      	ldr	r1, [r3, #0]
 8016612:	1858      	adds	r0, r3, r1
 8016614:	42a0      	cmp	r0, r4
 8016616:	d10b      	bne.n	8016630 <_free_r+0x74>
 8016618:	6820      	ldr	r0, [r4, #0]
 801661a:	4401      	add	r1, r0
 801661c:	1858      	adds	r0, r3, r1
 801661e:	4282      	cmp	r2, r0
 8016620:	6019      	str	r1, [r3, #0]
 8016622:	d1dd      	bne.n	80165e0 <_free_r+0x24>
 8016624:	6810      	ldr	r0, [r2, #0]
 8016626:	6852      	ldr	r2, [r2, #4]
 8016628:	605a      	str	r2, [r3, #4]
 801662a:	4401      	add	r1, r0
 801662c:	6019      	str	r1, [r3, #0]
 801662e:	e7d7      	b.n	80165e0 <_free_r+0x24>
 8016630:	d902      	bls.n	8016638 <_free_r+0x7c>
 8016632:	230c      	movs	r3, #12
 8016634:	602b      	str	r3, [r5, #0]
 8016636:	e7d3      	b.n	80165e0 <_free_r+0x24>
 8016638:	6820      	ldr	r0, [r4, #0]
 801663a:	1821      	adds	r1, r4, r0
 801663c:	428a      	cmp	r2, r1
 801663e:	bf04      	itt	eq
 8016640:	6811      	ldreq	r1, [r2, #0]
 8016642:	6852      	ldreq	r2, [r2, #4]
 8016644:	6062      	str	r2, [r4, #4]
 8016646:	bf04      	itt	eq
 8016648:	1809      	addeq	r1, r1, r0
 801664a:	6021      	streq	r1, [r4, #0]
 801664c:	605c      	str	r4, [r3, #4]
 801664e:	e7c7      	b.n	80165e0 <_free_r+0x24>
 8016650:	bd38      	pop	{r3, r4, r5, pc}
 8016652:	bf00      	nop
 8016654:	200005a4 	.word	0x200005a4

08016658 <_malloc_r>:
 8016658:	b570      	push	{r4, r5, r6, lr}
 801665a:	1ccd      	adds	r5, r1, #3
 801665c:	f025 0503 	bic.w	r5, r5, #3
 8016660:	3508      	adds	r5, #8
 8016662:	2d0c      	cmp	r5, #12
 8016664:	bf38      	it	cc
 8016666:	250c      	movcc	r5, #12
 8016668:	2d00      	cmp	r5, #0
 801666a:	4606      	mov	r6, r0
 801666c:	db01      	blt.n	8016672 <_malloc_r+0x1a>
 801666e:	42a9      	cmp	r1, r5
 8016670:	d903      	bls.n	801667a <_malloc_r+0x22>
 8016672:	230c      	movs	r3, #12
 8016674:	6033      	str	r3, [r6, #0]
 8016676:	2000      	movs	r0, #0
 8016678:	bd70      	pop	{r4, r5, r6, pc}
 801667a:	f000 f96d 	bl	8016958 <__malloc_lock>
 801667e:	4a21      	ldr	r2, [pc, #132]	; (8016704 <_malloc_r+0xac>)
 8016680:	6814      	ldr	r4, [r2, #0]
 8016682:	4621      	mov	r1, r4
 8016684:	b991      	cbnz	r1, 80166ac <_malloc_r+0x54>
 8016686:	4c20      	ldr	r4, [pc, #128]	; (8016708 <_malloc_r+0xb0>)
 8016688:	6823      	ldr	r3, [r4, #0]
 801668a:	b91b      	cbnz	r3, 8016694 <_malloc_r+0x3c>
 801668c:	4630      	mov	r0, r6
 801668e:	f000 f889 	bl	80167a4 <_sbrk_r>
 8016692:	6020      	str	r0, [r4, #0]
 8016694:	4629      	mov	r1, r5
 8016696:	4630      	mov	r0, r6
 8016698:	f000 f884 	bl	80167a4 <_sbrk_r>
 801669c:	1c43      	adds	r3, r0, #1
 801669e:	d124      	bne.n	80166ea <_malloc_r+0x92>
 80166a0:	230c      	movs	r3, #12
 80166a2:	6033      	str	r3, [r6, #0]
 80166a4:	4630      	mov	r0, r6
 80166a6:	f000 f958 	bl	801695a <__malloc_unlock>
 80166aa:	e7e4      	b.n	8016676 <_malloc_r+0x1e>
 80166ac:	680b      	ldr	r3, [r1, #0]
 80166ae:	1b5b      	subs	r3, r3, r5
 80166b0:	d418      	bmi.n	80166e4 <_malloc_r+0x8c>
 80166b2:	2b0b      	cmp	r3, #11
 80166b4:	d90f      	bls.n	80166d6 <_malloc_r+0x7e>
 80166b6:	600b      	str	r3, [r1, #0]
 80166b8:	50cd      	str	r5, [r1, r3]
 80166ba:	18cc      	adds	r4, r1, r3
 80166bc:	4630      	mov	r0, r6
 80166be:	f000 f94c 	bl	801695a <__malloc_unlock>
 80166c2:	f104 000b 	add.w	r0, r4, #11
 80166c6:	1d23      	adds	r3, r4, #4
 80166c8:	f020 0007 	bic.w	r0, r0, #7
 80166cc:	1ac3      	subs	r3, r0, r3
 80166ce:	d0d3      	beq.n	8016678 <_malloc_r+0x20>
 80166d0:	425a      	negs	r2, r3
 80166d2:	50e2      	str	r2, [r4, r3]
 80166d4:	e7d0      	b.n	8016678 <_malloc_r+0x20>
 80166d6:	428c      	cmp	r4, r1
 80166d8:	684b      	ldr	r3, [r1, #4]
 80166da:	bf16      	itet	ne
 80166dc:	6063      	strne	r3, [r4, #4]
 80166de:	6013      	streq	r3, [r2, #0]
 80166e0:	460c      	movne	r4, r1
 80166e2:	e7eb      	b.n	80166bc <_malloc_r+0x64>
 80166e4:	460c      	mov	r4, r1
 80166e6:	6849      	ldr	r1, [r1, #4]
 80166e8:	e7cc      	b.n	8016684 <_malloc_r+0x2c>
 80166ea:	1cc4      	adds	r4, r0, #3
 80166ec:	f024 0403 	bic.w	r4, r4, #3
 80166f0:	42a0      	cmp	r0, r4
 80166f2:	d005      	beq.n	8016700 <_malloc_r+0xa8>
 80166f4:	1a21      	subs	r1, r4, r0
 80166f6:	4630      	mov	r0, r6
 80166f8:	f000 f854 	bl	80167a4 <_sbrk_r>
 80166fc:	3001      	adds	r0, #1
 80166fe:	d0cf      	beq.n	80166a0 <_malloc_r+0x48>
 8016700:	6025      	str	r5, [r4, #0]
 8016702:	e7db      	b.n	80166bc <_malloc_r+0x64>
 8016704:	200005a4 	.word	0x200005a4
 8016708:	200005a8 	.word	0x200005a8

0801670c <iprintf>:
 801670c:	b40f      	push	{r0, r1, r2, r3}
 801670e:	4b0a      	ldr	r3, [pc, #40]	; (8016738 <iprintf+0x2c>)
 8016710:	b513      	push	{r0, r1, r4, lr}
 8016712:	681c      	ldr	r4, [r3, #0]
 8016714:	b124      	cbz	r4, 8016720 <iprintf+0x14>
 8016716:	69a3      	ldr	r3, [r4, #24]
 8016718:	b913      	cbnz	r3, 8016720 <iprintf+0x14>
 801671a:	4620      	mov	r0, r4
 801671c:	f000 f892 	bl	8016844 <__sinit>
 8016720:	ab05      	add	r3, sp, #20
 8016722:	9a04      	ldr	r2, [sp, #16]
 8016724:	68a1      	ldr	r1, [r4, #8]
 8016726:	9301      	str	r3, [sp, #4]
 8016728:	4620      	mov	r0, r4
 801672a:	f000 f941 	bl	80169b0 <_vfiprintf_r>
 801672e:	b002      	add	sp, #8
 8016730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016734:	b004      	add	sp, #16
 8016736:	4770      	bx	lr
 8016738:	20000024 	.word	0x20000024

0801673c <rand>:
 801673c:	b538      	push	{r3, r4, r5, lr}
 801673e:	4b13      	ldr	r3, [pc, #76]	; (801678c <rand+0x50>)
 8016740:	681c      	ldr	r4, [r3, #0]
 8016742:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016744:	b97b      	cbnz	r3, 8016766 <rand+0x2a>
 8016746:	2018      	movs	r0, #24
 8016748:	f7ff ff06 	bl	8016558 <malloc>
 801674c:	4a10      	ldr	r2, [pc, #64]	; (8016790 <rand+0x54>)
 801674e:	4b11      	ldr	r3, [pc, #68]	; (8016794 <rand+0x58>)
 8016750:	63a0      	str	r0, [r4, #56]	; 0x38
 8016752:	e9c0 2300 	strd	r2, r3, [r0]
 8016756:	4b10      	ldr	r3, [pc, #64]	; (8016798 <rand+0x5c>)
 8016758:	6083      	str	r3, [r0, #8]
 801675a:	230b      	movs	r3, #11
 801675c:	8183      	strh	r3, [r0, #12]
 801675e:	2201      	movs	r2, #1
 8016760:	2300      	movs	r3, #0
 8016762:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016766:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016768:	480c      	ldr	r0, [pc, #48]	; (801679c <rand+0x60>)
 801676a:	690a      	ldr	r2, [r1, #16]
 801676c:	694b      	ldr	r3, [r1, #20]
 801676e:	4c0c      	ldr	r4, [pc, #48]	; (80167a0 <rand+0x64>)
 8016770:	4350      	muls	r0, r2
 8016772:	fb04 0003 	mla	r0, r4, r3, r0
 8016776:	fba2 2304 	umull	r2, r3, r2, r4
 801677a:	4403      	add	r3, r0
 801677c:	1c54      	adds	r4, r2, #1
 801677e:	f143 0500 	adc.w	r5, r3, #0
 8016782:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8016786:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801678a:	bd38      	pop	{r3, r4, r5, pc}
 801678c:	20000024 	.word	0x20000024
 8016790:	abcd330e 	.word	0xabcd330e
 8016794:	e66d1234 	.word	0xe66d1234
 8016798:	0005deec 	.word	0x0005deec
 801679c:	5851f42d 	.word	0x5851f42d
 80167a0:	4c957f2d 	.word	0x4c957f2d

080167a4 <_sbrk_r>:
 80167a4:	b538      	push	{r3, r4, r5, lr}
 80167a6:	4c06      	ldr	r4, [pc, #24]	; (80167c0 <_sbrk_r+0x1c>)
 80167a8:	2300      	movs	r3, #0
 80167aa:	4605      	mov	r5, r0
 80167ac:	4608      	mov	r0, r1
 80167ae:	6023      	str	r3, [r4, #0]
 80167b0:	f7f0 f9d4 	bl	8006b5c <_sbrk>
 80167b4:	1c43      	adds	r3, r0, #1
 80167b6:	d102      	bne.n	80167be <_sbrk_r+0x1a>
 80167b8:	6823      	ldr	r3, [r4, #0]
 80167ba:	b103      	cbz	r3, 80167be <_sbrk_r+0x1a>
 80167bc:	602b      	str	r3, [r5, #0]
 80167be:	bd38      	pop	{r3, r4, r5, pc}
 80167c0:	20007b40 	.word	0x20007b40

080167c4 <std>:
 80167c4:	2300      	movs	r3, #0
 80167c6:	b510      	push	{r4, lr}
 80167c8:	4604      	mov	r4, r0
 80167ca:	e9c0 3300 	strd	r3, r3, [r0]
 80167ce:	6083      	str	r3, [r0, #8]
 80167d0:	8181      	strh	r1, [r0, #12]
 80167d2:	6643      	str	r3, [r0, #100]	; 0x64
 80167d4:	81c2      	strh	r2, [r0, #14]
 80167d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80167da:	6183      	str	r3, [r0, #24]
 80167dc:	4619      	mov	r1, r3
 80167de:	2208      	movs	r2, #8
 80167e0:	305c      	adds	r0, #92	; 0x5c
 80167e2:	f7ff fee3 	bl	80165ac <memset>
 80167e6:	4b05      	ldr	r3, [pc, #20]	; (80167fc <std+0x38>)
 80167e8:	6263      	str	r3, [r4, #36]	; 0x24
 80167ea:	4b05      	ldr	r3, [pc, #20]	; (8016800 <std+0x3c>)
 80167ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80167ee:	4b05      	ldr	r3, [pc, #20]	; (8016804 <std+0x40>)
 80167f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80167f2:	4b05      	ldr	r3, [pc, #20]	; (8016808 <std+0x44>)
 80167f4:	6224      	str	r4, [r4, #32]
 80167f6:	6323      	str	r3, [r4, #48]	; 0x30
 80167f8:	bd10      	pop	{r4, pc}
 80167fa:	bf00      	nop
 80167fc:	08016eed 	.word	0x08016eed
 8016800:	08016f0f 	.word	0x08016f0f
 8016804:	08016f47 	.word	0x08016f47
 8016808:	08016f6b 	.word	0x08016f6b

0801680c <_cleanup_r>:
 801680c:	4901      	ldr	r1, [pc, #4]	; (8016814 <_cleanup_r+0x8>)
 801680e:	f000 b885 	b.w	801691c <_fwalk_reent>
 8016812:	bf00      	nop
 8016814:	08017245 	.word	0x08017245

08016818 <__sfmoreglue>:
 8016818:	b570      	push	{r4, r5, r6, lr}
 801681a:	1e4a      	subs	r2, r1, #1
 801681c:	2568      	movs	r5, #104	; 0x68
 801681e:	4355      	muls	r5, r2
 8016820:	460e      	mov	r6, r1
 8016822:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016826:	f7ff ff17 	bl	8016658 <_malloc_r>
 801682a:	4604      	mov	r4, r0
 801682c:	b140      	cbz	r0, 8016840 <__sfmoreglue+0x28>
 801682e:	2100      	movs	r1, #0
 8016830:	e9c0 1600 	strd	r1, r6, [r0]
 8016834:	300c      	adds	r0, #12
 8016836:	60a0      	str	r0, [r4, #8]
 8016838:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801683c:	f7ff feb6 	bl	80165ac <memset>
 8016840:	4620      	mov	r0, r4
 8016842:	bd70      	pop	{r4, r5, r6, pc}

08016844 <__sinit>:
 8016844:	6983      	ldr	r3, [r0, #24]
 8016846:	b510      	push	{r4, lr}
 8016848:	4604      	mov	r4, r0
 801684a:	bb33      	cbnz	r3, 801689a <__sinit+0x56>
 801684c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8016850:	6503      	str	r3, [r0, #80]	; 0x50
 8016852:	4b12      	ldr	r3, [pc, #72]	; (801689c <__sinit+0x58>)
 8016854:	4a12      	ldr	r2, [pc, #72]	; (80168a0 <__sinit+0x5c>)
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	6282      	str	r2, [r0, #40]	; 0x28
 801685a:	4298      	cmp	r0, r3
 801685c:	bf04      	itt	eq
 801685e:	2301      	moveq	r3, #1
 8016860:	6183      	streq	r3, [r0, #24]
 8016862:	f000 f81f 	bl	80168a4 <__sfp>
 8016866:	6060      	str	r0, [r4, #4]
 8016868:	4620      	mov	r0, r4
 801686a:	f000 f81b 	bl	80168a4 <__sfp>
 801686e:	60a0      	str	r0, [r4, #8]
 8016870:	4620      	mov	r0, r4
 8016872:	f000 f817 	bl	80168a4 <__sfp>
 8016876:	2200      	movs	r2, #0
 8016878:	60e0      	str	r0, [r4, #12]
 801687a:	2104      	movs	r1, #4
 801687c:	6860      	ldr	r0, [r4, #4]
 801687e:	f7ff ffa1 	bl	80167c4 <std>
 8016882:	2201      	movs	r2, #1
 8016884:	2109      	movs	r1, #9
 8016886:	68a0      	ldr	r0, [r4, #8]
 8016888:	f7ff ff9c 	bl	80167c4 <std>
 801688c:	2202      	movs	r2, #2
 801688e:	2112      	movs	r1, #18
 8016890:	68e0      	ldr	r0, [r4, #12]
 8016892:	f7ff ff97 	bl	80167c4 <std>
 8016896:	2301      	movs	r3, #1
 8016898:	61a3      	str	r3, [r4, #24]
 801689a:	bd10      	pop	{r4, pc}
 801689c:	08028d24 	.word	0x08028d24
 80168a0:	0801680d 	.word	0x0801680d

080168a4 <__sfp>:
 80168a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168a6:	4b1b      	ldr	r3, [pc, #108]	; (8016914 <__sfp+0x70>)
 80168a8:	681e      	ldr	r6, [r3, #0]
 80168aa:	69b3      	ldr	r3, [r6, #24]
 80168ac:	4607      	mov	r7, r0
 80168ae:	b913      	cbnz	r3, 80168b6 <__sfp+0x12>
 80168b0:	4630      	mov	r0, r6
 80168b2:	f7ff ffc7 	bl	8016844 <__sinit>
 80168b6:	3648      	adds	r6, #72	; 0x48
 80168b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80168bc:	3b01      	subs	r3, #1
 80168be:	d503      	bpl.n	80168c8 <__sfp+0x24>
 80168c0:	6833      	ldr	r3, [r6, #0]
 80168c2:	b133      	cbz	r3, 80168d2 <__sfp+0x2e>
 80168c4:	6836      	ldr	r6, [r6, #0]
 80168c6:	e7f7      	b.n	80168b8 <__sfp+0x14>
 80168c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80168cc:	b16d      	cbz	r5, 80168ea <__sfp+0x46>
 80168ce:	3468      	adds	r4, #104	; 0x68
 80168d0:	e7f4      	b.n	80168bc <__sfp+0x18>
 80168d2:	2104      	movs	r1, #4
 80168d4:	4638      	mov	r0, r7
 80168d6:	f7ff ff9f 	bl	8016818 <__sfmoreglue>
 80168da:	6030      	str	r0, [r6, #0]
 80168dc:	2800      	cmp	r0, #0
 80168de:	d1f1      	bne.n	80168c4 <__sfp+0x20>
 80168e0:	230c      	movs	r3, #12
 80168e2:	603b      	str	r3, [r7, #0]
 80168e4:	4604      	mov	r4, r0
 80168e6:	4620      	mov	r0, r4
 80168e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168ea:	4b0b      	ldr	r3, [pc, #44]	; (8016918 <__sfp+0x74>)
 80168ec:	6665      	str	r5, [r4, #100]	; 0x64
 80168ee:	e9c4 5500 	strd	r5, r5, [r4]
 80168f2:	60a5      	str	r5, [r4, #8]
 80168f4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80168f8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80168fc:	2208      	movs	r2, #8
 80168fe:	4629      	mov	r1, r5
 8016900:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016904:	f7ff fe52 	bl	80165ac <memset>
 8016908:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801690c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016910:	e7e9      	b.n	80168e6 <__sfp+0x42>
 8016912:	bf00      	nop
 8016914:	08028d24 	.word	0x08028d24
 8016918:	ffff0001 	.word	0xffff0001

0801691c <_fwalk_reent>:
 801691c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016920:	4680      	mov	r8, r0
 8016922:	4689      	mov	r9, r1
 8016924:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016928:	2600      	movs	r6, #0
 801692a:	b914      	cbnz	r4, 8016932 <_fwalk_reent+0x16>
 801692c:	4630      	mov	r0, r6
 801692e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016932:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8016936:	3f01      	subs	r7, #1
 8016938:	d501      	bpl.n	801693e <_fwalk_reent+0x22>
 801693a:	6824      	ldr	r4, [r4, #0]
 801693c:	e7f5      	b.n	801692a <_fwalk_reent+0xe>
 801693e:	89ab      	ldrh	r3, [r5, #12]
 8016940:	2b01      	cmp	r3, #1
 8016942:	d907      	bls.n	8016954 <_fwalk_reent+0x38>
 8016944:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016948:	3301      	adds	r3, #1
 801694a:	d003      	beq.n	8016954 <_fwalk_reent+0x38>
 801694c:	4629      	mov	r1, r5
 801694e:	4640      	mov	r0, r8
 8016950:	47c8      	blx	r9
 8016952:	4306      	orrs	r6, r0
 8016954:	3568      	adds	r5, #104	; 0x68
 8016956:	e7ee      	b.n	8016936 <_fwalk_reent+0x1a>

08016958 <__malloc_lock>:
 8016958:	4770      	bx	lr

0801695a <__malloc_unlock>:
 801695a:	4770      	bx	lr

0801695c <__sfputc_r>:
 801695c:	6893      	ldr	r3, [r2, #8]
 801695e:	3b01      	subs	r3, #1
 8016960:	2b00      	cmp	r3, #0
 8016962:	b410      	push	{r4}
 8016964:	6093      	str	r3, [r2, #8]
 8016966:	da08      	bge.n	801697a <__sfputc_r+0x1e>
 8016968:	6994      	ldr	r4, [r2, #24]
 801696a:	42a3      	cmp	r3, r4
 801696c:	db01      	blt.n	8016972 <__sfputc_r+0x16>
 801696e:	290a      	cmp	r1, #10
 8016970:	d103      	bne.n	801697a <__sfputc_r+0x1e>
 8016972:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016976:	f000 bafd 	b.w	8016f74 <__swbuf_r>
 801697a:	6813      	ldr	r3, [r2, #0]
 801697c:	1c58      	adds	r0, r3, #1
 801697e:	6010      	str	r0, [r2, #0]
 8016980:	7019      	strb	r1, [r3, #0]
 8016982:	4608      	mov	r0, r1
 8016984:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016988:	4770      	bx	lr

0801698a <__sfputs_r>:
 801698a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801698c:	4606      	mov	r6, r0
 801698e:	460f      	mov	r7, r1
 8016990:	4614      	mov	r4, r2
 8016992:	18d5      	adds	r5, r2, r3
 8016994:	42ac      	cmp	r4, r5
 8016996:	d101      	bne.n	801699c <__sfputs_r+0x12>
 8016998:	2000      	movs	r0, #0
 801699a:	e007      	b.n	80169ac <__sfputs_r+0x22>
 801699c:	463a      	mov	r2, r7
 801699e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80169a2:	4630      	mov	r0, r6
 80169a4:	f7ff ffda 	bl	801695c <__sfputc_r>
 80169a8:	1c43      	adds	r3, r0, #1
 80169aa:	d1f3      	bne.n	8016994 <__sfputs_r+0xa>
 80169ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080169b0 <_vfiprintf_r>:
 80169b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169b4:	460c      	mov	r4, r1
 80169b6:	b09d      	sub	sp, #116	; 0x74
 80169b8:	4617      	mov	r7, r2
 80169ba:	461d      	mov	r5, r3
 80169bc:	4606      	mov	r6, r0
 80169be:	b118      	cbz	r0, 80169c8 <_vfiprintf_r+0x18>
 80169c0:	6983      	ldr	r3, [r0, #24]
 80169c2:	b90b      	cbnz	r3, 80169c8 <_vfiprintf_r+0x18>
 80169c4:	f7ff ff3e 	bl	8016844 <__sinit>
 80169c8:	4b7c      	ldr	r3, [pc, #496]	; (8016bbc <_vfiprintf_r+0x20c>)
 80169ca:	429c      	cmp	r4, r3
 80169cc:	d158      	bne.n	8016a80 <_vfiprintf_r+0xd0>
 80169ce:	6874      	ldr	r4, [r6, #4]
 80169d0:	89a3      	ldrh	r3, [r4, #12]
 80169d2:	0718      	lsls	r0, r3, #28
 80169d4:	d55e      	bpl.n	8016a94 <_vfiprintf_r+0xe4>
 80169d6:	6923      	ldr	r3, [r4, #16]
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d05b      	beq.n	8016a94 <_vfiprintf_r+0xe4>
 80169dc:	2300      	movs	r3, #0
 80169de:	9309      	str	r3, [sp, #36]	; 0x24
 80169e0:	2320      	movs	r3, #32
 80169e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80169e6:	2330      	movs	r3, #48	; 0x30
 80169e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80169ec:	9503      	str	r5, [sp, #12]
 80169ee:	f04f 0b01 	mov.w	fp, #1
 80169f2:	46b8      	mov	r8, r7
 80169f4:	4645      	mov	r5, r8
 80169f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80169fa:	b10b      	cbz	r3, 8016a00 <_vfiprintf_r+0x50>
 80169fc:	2b25      	cmp	r3, #37	; 0x25
 80169fe:	d154      	bne.n	8016aaa <_vfiprintf_r+0xfa>
 8016a00:	ebb8 0a07 	subs.w	sl, r8, r7
 8016a04:	d00b      	beq.n	8016a1e <_vfiprintf_r+0x6e>
 8016a06:	4653      	mov	r3, sl
 8016a08:	463a      	mov	r2, r7
 8016a0a:	4621      	mov	r1, r4
 8016a0c:	4630      	mov	r0, r6
 8016a0e:	f7ff ffbc 	bl	801698a <__sfputs_r>
 8016a12:	3001      	adds	r0, #1
 8016a14:	f000 80c2 	beq.w	8016b9c <_vfiprintf_r+0x1ec>
 8016a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a1a:	4453      	add	r3, sl
 8016a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8016a1e:	f898 3000 	ldrb.w	r3, [r8]
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	f000 80ba 	beq.w	8016b9c <_vfiprintf_r+0x1ec>
 8016a28:	2300      	movs	r3, #0
 8016a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8016a2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016a32:	9304      	str	r3, [sp, #16]
 8016a34:	9307      	str	r3, [sp, #28]
 8016a36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016a3a:	931a      	str	r3, [sp, #104]	; 0x68
 8016a3c:	46a8      	mov	r8, r5
 8016a3e:	2205      	movs	r2, #5
 8016a40:	f818 1b01 	ldrb.w	r1, [r8], #1
 8016a44:	485e      	ldr	r0, [pc, #376]	; (8016bc0 <_vfiprintf_r+0x210>)
 8016a46:	f7e9 fbd3 	bl	80001f0 <memchr>
 8016a4a:	9b04      	ldr	r3, [sp, #16]
 8016a4c:	bb78      	cbnz	r0, 8016aae <_vfiprintf_r+0xfe>
 8016a4e:	06d9      	lsls	r1, r3, #27
 8016a50:	bf44      	itt	mi
 8016a52:	2220      	movmi	r2, #32
 8016a54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016a58:	071a      	lsls	r2, r3, #28
 8016a5a:	bf44      	itt	mi
 8016a5c:	222b      	movmi	r2, #43	; 0x2b
 8016a5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016a62:	782a      	ldrb	r2, [r5, #0]
 8016a64:	2a2a      	cmp	r2, #42	; 0x2a
 8016a66:	d02a      	beq.n	8016abe <_vfiprintf_r+0x10e>
 8016a68:	9a07      	ldr	r2, [sp, #28]
 8016a6a:	46a8      	mov	r8, r5
 8016a6c:	2000      	movs	r0, #0
 8016a6e:	250a      	movs	r5, #10
 8016a70:	4641      	mov	r1, r8
 8016a72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016a76:	3b30      	subs	r3, #48	; 0x30
 8016a78:	2b09      	cmp	r3, #9
 8016a7a:	d969      	bls.n	8016b50 <_vfiprintf_r+0x1a0>
 8016a7c:	b360      	cbz	r0, 8016ad8 <_vfiprintf_r+0x128>
 8016a7e:	e024      	b.n	8016aca <_vfiprintf_r+0x11a>
 8016a80:	4b50      	ldr	r3, [pc, #320]	; (8016bc4 <_vfiprintf_r+0x214>)
 8016a82:	429c      	cmp	r4, r3
 8016a84:	d101      	bne.n	8016a8a <_vfiprintf_r+0xda>
 8016a86:	68b4      	ldr	r4, [r6, #8]
 8016a88:	e7a2      	b.n	80169d0 <_vfiprintf_r+0x20>
 8016a8a:	4b4f      	ldr	r3, [pc, #316]	; (8016bc8 <_vfiprintf_r+0x218>)
 8016a8c:	429c      	cmp	r4, r3
 8016a8e:	bf08      	it	eq
 8016a90:	68f4      	ldreq	r4, [r6, #12]
 8016a92:	e79d      	b.n	80169d0 <_vfiprintf_r+0x20>
 8016a94:	4621      	mov	r1, r4
 8016a96:	4630      	mov	r0, r6
 8016a98:	f000 fad0 	bl	801703c <__swsetup_r>
 8016a9c:	2800      	cmp	r0, #0
 8016a9e:	d09d      	beq.n	80169dc <_vfiprintf_r+0x2c>
 8016aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8016aa4:	b01d      	add	sp, #116	; 0x74
 8016aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016aaa:	46a8      	mov	r8, r5
 8016aac:	e7a2      	b.n	80169f4 <_vfiprintf_r+0x44>
 8016aae:	4a44      	ldr	r2, [pc, #272]	; (8016bc0 <_vfiprintf_r+0x210>)
 8016ab0:	1a80      	subs	r0, r0, r2
 8016ab2:	fa0b f000 	lsl.w	r0, fp, r0
 8016ab6:	4318      	orrs	r0, r3
 8016ab8:	9004      	str	r0, [sp, #16]
 8016aba:	4645      	mov	r5, r8
 8016abc:	e7be      	b.n	8016a3c <_vfiprintf_r+0x8c>
 8016abe:	9a03      	ldr	r2, [sp, #12]
 8016ac0:	1d11      	adds	r1, r2, #4
 8016ac2:	6812      	ldr	r2, [r2, #0]
 8016ac4:	9103      	str	r1, [sp, #12]
 8016ac6:	2a00      	cmp	r2, #0
 8016ac8:	db01      	blt.n	8016ace <_vfiprintf_r+0x11e>
 8016aca:	9207      	str	r2, [sp, #28]
 8016acc:	e004      	b.n	8016ad8 <_vfiprintf_r+0x128>
 8016ace:	4252      	negs	r2, r2
 8016ad0:	f043 0302 	orr.w	r3, r3, #2
 8016ad4:	9207      	str	r2, [sp, #28]
 8016ad6:	9304      	str	r3, [sp, #16]
 8016ad8:	f898 3000 	ldrb.w	r3, [r8]
 8016adc:	2b2e      	cmp	r3, #46	; 0x2e
 8016ade:	d10e      	bne.n	8016afe <_vfiprintf_r+0x14e>
 8016ae0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016ae4:	2b2a      	cmp	r3, #42	; 0x2a
 8016ae6:	d138      	bne.n	8016b5a <_vfiprintf_r+0x1aa>
 8016ae8:	9b03      	ldr	r3, [sp, #12]
 8016aea:	1d1a      	adds	r2, r3, #4
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	9203      	str	r2, [sp, #12]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	bfb8      	it	lt
 8016af4:	f04f 33ff 	movlt.w	r3, #4294967295
 8016af8:	f108 0802 	add.w	r8, r8, #2
 8016afc:	9305      	str	r3, [sp, #20]
 8016afe:	4d33      	ldr	r5, [pc, #204]	; (8016bcc <_vfiprintf_r+0x21c>)
 8016b00:	f898 1000 	ldrb.w	r1, [r8]
 8016b04:	2203      	movs	r2, #3
 8016b06:	4628      	mov	r0, r5
 8016b08:	f7e9 fb72 	bl	80001f0 <memchr>
 8016b0c:	b140      	cbz	r0, 8016b20 <_vfiprintf_r+0x170>
 8016b0e:	2340      	movs	r3, #64	; 0x40
 8016b10:	1b40      	subs	r0, r0, r5
 8016b12:	fa03 f000 	lsl.w	r0, r3, r0
 8016b16:	9b04      	ldr	r3, [sp, #16]
 8016b18:	4303      	orrs	r3, r0
 8016b1a:	f108 0801 	add.w	r8, r8, #1
 8016b1e:	9304      	str	r3, [sp, #16]
 8016b20:	f898 1000 	ldrb.w	r1, [r8]
 8016b24:	482a      	ldr	r0, [pc, #168]	; (8016bd0 <_vfiprintf_r+0x220>)
 8016b26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016b2a:	2206      	movs	r2, #6
 8016b2c:	f108 0701 	add.w	r7, r8, #1
 8016b30:	f7e9 fb5e 	bl	80001f0 <memchr>
 8016b34:	2800      	cmp	r0, #0
 8016b36:	d037      	beq.n	8016ba8 <_vfiprintf_r+0x1f8>
 8016b38:	4b26      	ldr	r3, [pc, #152]	; (8016bd4 <_vfiprintf_r+0x224>)
 8016b3a:	bb1b      	cbnz	r3, 8016b84 <_vfiprintf_r+0x1d4>
 8016b3c:	9b03      	ldr	r3, [sp, #12]
 8016b3e:	3307      	adds	r3, #7
 8016b40:	f023 0307 	bic.w	r3, r3, #7
 8016b44:	3308      	adds	r3, #8
 8016b46:	9303      	str	r3, [sp, #12]
 8016b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b4a:	444b      	add	r3, r9
 8016b4c:	9309      	str	r3, [sp, #36]	; 0x24
 8016b4e:	e750      	b.n	80169f2 <_vfiprintf_r+0x42>
 8016b50:	fb05 3202 	mla	r2, r5, r2, r3
 8016b54:	2001      	movs	r0, #1
 8016b56:	4688      	mov	r8, r1
 8016b58:	e78a      	b.n	8016a70 <_vfiprintf_r+0xc0>
 8016b5a:	2300      	movs	r3, #0
 8016b5c:	f108 0801 	add.w	r8, r8, #1
 8016b60:	9305      	str	r3, [sp, #20]
 8016b62:	4619      	mov	r1, r3
 8016b64:	250a      	movs	r5, #10
 8016b66:	4640      	mov	r0, r8
 8016b68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b6c:	3a30      	subs	r2, #48	; 0x30
 8016b6e:	2a09      	cmp	r2, #9
 8016b70:	d903      	bls.n	8016b7a <_vfiprintf_r+0x1ca>
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d0c3      	beq.n	8016afe <_vfiprintf_r+0x14e>
 8016b76:	9105      	str	r1, [sp, #20]
 8016b78:	e7c1      	b.n	8016afe <_vfiprintf_r+0x14e>
 8016b7a:	fb05 2101 	mla	r1, r5, r1, r2
 8016b7e:	2301      	movs	r3, #1
 8016b80:	4680      	mov	r8, r0
 8016b82:	e7f0      	b.n	8016b66 <_vfiprintf_r+0x1b6>
 8016b84:	ab03      	add	r3, sp, #12
 8016b86:	9300      	str	r3, [sp, #0]
 8016b88:	4622      	mov	r2, r4
 8016b8a:	4b13      	ldr	r3, [pc, #76]	; (8016bd8 <_vfiprintf_r+0x228>)
 8016b8c:	a904      	add	r1, sp, #16
 8016b8e:	4630      	mov	r0, r6
 8016b90:	f3af 8000 	nop.w
 8016b94:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016b98:	4681      	mov	r9, r0
 8016b9a:	d1d5      	bne.n	8016b48 <_vfiprintf_r+0x198>
 8016b9c:	89a3      	ldrh	r3, [r4, #12]
 8016b9e:	065b      	lsls	r3, r3, #25
 8016ba0:	f53f af7e 	bmi.w	8016aa0 <_vfiprintf_r+0xf0>
 8016ba4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016ba6:	e77d      	b.n	8016aa4 <_vfiprintf_r+0xf4>
 8016ba8:	ab03      	add	r3, sp, #12
 8016baa:	9300      	str	r3, [sp, #0]
 8016bac:	4622      	mov	r2, r4
 8016bae:	4b0a      	ldr	r3, [pc, #40]	; (8016bd8 <_vfiprintf_r+0x228>)
 8016bb0:	a904      	add	r1, sp, #16
 8016bb2:	4630      	mov	r0, r6
 8016bb4:	f000 f888 	bl	8016cc8 <_printf_i>
 8016bb8:	e7ec      	b.n	8016b94 <_vfiprintf_r+0x1e4>
 8016bba:	bf00      	nop
 8016bbc:	08028d48 	.word	0x08028d48
 8016bc0:	08028d88 	.word	0x08028d88
 8016bc4:	08028d68 	.word	0x08028d68
 8016bc8:	08028d28 	.word	0x08028d28
 8016bcc:	08028d8e 	.word	0x08028d8e
 8016bd0:	08028d92 	.word	0x08028d92
 8016bd4:	00000000 	.word	0x00000000
 8016bd8:	0801698b 	.word	0x0801698b

08016bdc <_printf_common>:
 8016bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016be0:	4691      	mov	r9, r2
 8016be2:	461f      	mov	r7, r3
 8016be4:	688a      	ldr	r2, [r1, #8]
 8016be6:	690b      	ldr	r3, [r1, #16]
 8016be8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016bec:	4293      	cmp	r3, r2
 8016bee:	bfb8      	it	lt
 8016bf0:	4613      	movlt	r3, r2
 8016bf2:	f8c9 3000 	str.w	r3, [r9]
 8016bf6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016bfa:	4606      	mov	r6, r0
 8016bfc:	460c      	mov	r4, r1
 8016bfe:	b112      	cbz	r2, 8016c06 <_printf_common+0x2a>
 8016c00:	3301      	adds	r3, #1
 8016c02:	f8c9 3000 	str.w	r3, [r9]
 8016c06:	6823      	ldr	r3, [r4, #0]
 8016c08:	0699      	lsls	r1, r3, #26
 8016c0a:	bf42      	ittt	mi
 8016c0c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016c10:	3302      	addmi	r3, #2
 8016c12:	f8c9 3000 	strmi.w	r3, [r9]
 8016c16:	6825      	ldr	r5, [r4, #0]
 8016c18:	f015 0506 	ands.w	r5, r5, #6
 8016c1c:	d107      	bne.n	8016c2e <_printf_common+0x52>
 8016c1e:	f104 0a19 	add.w	sl, r4, #25
 8016c22:	68e3      	ldr	r3, [r4, #12]
 8016c24:	f8d9 2000 	ldr.w	r2, [r9]
 8016c28:	1a9b      	subs	r3, r3, r2
 8016c2a:	42ab      	cmp	r3, r5
 8016c2c:	dc28      	bgt.n	8016c80 <_printf_common+0xa4>
 8016c2e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8016c32:	6822      	ldr	r2, [r4, #0]
 8016c34:	3300      	adds	r3, #0
 8016c36:	bf18      	it	ne
 8016c38:	2301      	movne	r3, #1
 8016c3a:	0692      	lsls	r2, r2, #26
 8016c3c:	d42d      	bmi.n	8016c9a <_printf_common+0xbe>
 8016c3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016c42:	4639      	mov	r1, r7
 8016c44:	4630      	mov	r0, r6
 8016c46:	47c0      	blx	r8
 8016c48:	3001      	adds	r0, #1
 8016c4a:	d020      	beq.n	8016c8e <_printf_common+0xb2>
 8016c4c:	6823      	ldr	r3, [r4, #0]
 8016c4e:	68e5      	ldr	r5, [r4, #12]
 8016c50:	f8d9 2000 	ldr.w	r2, [r9]
 8016c54:	f003 0306 	and.w	r3, r3, #6
 8016c58:	2b04      	cmp	r3, #4
 8016c5a:	bf08      	it	eq
 8016c5c:	1aad      	subeq	r5, r5, r2
 8016c5e:	68a3      	ldr	r3, [r4, #8]
 8016c60:	6922      	ldr	r2, [r4, #16]
 8016c62:	bf0c      	ite	eq
 8016c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016c68:	2500      	movne	r5, #0
 8016c6a:	4293      	cmp	r3, r2
 8016c6c:	bfc4      	itt	gt
 8016c6e:	1a9b      	subgt	r3, r3, r2
 8016c70:	18ed      	addgt	r5, r5, r3
 8016c72:	f04f 0900 	mov.w	r9, #0
 8016c76:	341a      	adds	r4, #26
 8016c78:	454d      	cmp	r5, r9
 8016c7a:	d11a      	bne.n	8016cb2 <_printf_common+0xd6>
 8016c7c:	2000      	movs	r0, #0
 8016c7e:	e008      	b.n	8016c92 <_printf_common+0xb6>
 8016c80:	2301      	movs	r3, #1
 8016c82:	4652      	mov	r2, sl
 8016c84:	4639      	mov	r1, r7
 8016c86:	4630      	mov	r0, r6
 8016c88:	47c0      	blx	r8
 8016c8a:	3001      	adds	r0, #1
 8016c8c:	d103      	bne.n	8016c96 <_printf_common+0xba>
 8016c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8016c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c96:	3501      	adds	r5, #1
 8016c98:	e7c3      	b.n	8016c22 <_printf_common+0x46>
 8016c9a:	18e1      	adds	r1, r4, r3
 8016c9c:	1c5a      	adds	r2, r3, #1
 8016c9e:	2030      	movs	r0, #48	; 0x30
 8016ca0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016ca4:	4422      	add	r2, r4
 8016ca6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016caa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016cae:	3302      	adds	r3, #2
 8016cb0:	e7c5      	b.n	8016c3e <_printf_common+0x62>
 8016cb2:	2301      	movs	r3, #1
 8016cb4:	4622      	mov	r2, r4
 8016cb6:	4639      	mov	r1, r7
 8016cb8:	4630      	mov	r0, r6
 8016cba:	47c0      	blx	r8
 8016cbc:	3001      	adds	r0, #1
 8016cbe:	d0e6      	beq.n	8016c8e <_printf_common+0xb2>
 8016cc0:	f109 0901 	add.w	r9, r9, #1
 8016cc4:	e7d8      	b.n	8016c78 <_printf_common+0x9c>
	...

08016cc8 <_printf_i>:
 8016cc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016ccc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8016cd0:	460c      	mov	r4, r1
 8016cd2:	7e09      	ldrb	r1, [r1, #24]
 8016cd4:	b085      	sub	sp, #20
 8016cd6:	296e      	cmp	r1, #110	; 0x6e
 8016cd8:	4617      	mov	r7, r2
 8016cda:	4606      	mov	r6, r0
 8016cdc:	4698      	mov	r8, r3
 8016cde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016ce0:	f000 80b3 	beq.w	8016e4a <_printf_i+0x182>
 8016ce4:	d822      	bhi.n	8016d2c <_printf_i+0x64>
 8016ce6:	2963      	cmp	r1, #99	; 0x63
 8016ce8:	d036      	beq.n	8016d58 <_printf_i+0x90>
 8016cea:	d80a      	bhi.n	8016d02 <_printf_i+0x3a>
 8016cec:	2900      	cmp	r1, #0
 8016cee:	f000 80b9 	beq.w	8016e64 <_printf_i+0x19c>
 8016cf2:	2958      	cmp	r1, #88	; 0x58
 8016cf4:	f000 8083 	beq.w	8016dfe <_printf_i+0x136>
 8016cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016cfc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8016d00:	e032      	b.n	8016d68 <_printf_i+0xa0>
 8016d02:	2964      	cmp	r1, #100	; 0x64
 8016d04:	d001      	beq.n	8016d0a <_printf_i+0x42>
 8016d06:	2969      	cmp	r1, #105	; 0x69
 8016d08:	d1f6      	bne.n	8016cf8 <_printf_i+0x30>
 8016d0a:	6820      	ldr	r0, [r4, #0]
 8016d0c:	6813      	ldr	r3, [r2, #0]
 8016d0e:	0605      	lsls	r5, r0, #24
 8016d10:	f103 0104 	add.w	r1, r3, #4
 8016d14:	d52a      	bpl.n	8016d6c <_printf_i+0xa4>
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	6011      	str	r1, [r2, #0]
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	da03      	bge.n	8016d26 <_printf_i+0x5e>
 8016d1e:	222d      	movs	r2, #45	; 0x2d
 8016d20:	425b      	negs	r3, r3
 8016d22:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016d26:	486f      	ldr	r0, [pc, #444]	; (8016ee4 <_printf_i+0x21c>)
 8016d28:	220a      	movs	r2, #10
 8016d2a:	e039      	b.n	8016da0 <_printf_i+0xd8>
 8016d2c:	2973      	cmp	r1, #115	; 0x73
 8016d2e:	f000 809d 	beq.w	8016e6c <_printf_i+0x1a4>
 8016d32:	d808      	bhi.n	8016d46 <_printf_i+0x7e>
 8016d34:	296f      	cmp	r1, #111	; 0x6f
 8016d36:	d020      	beq.n	8016d7a <_printf_i+0xb2>
 8016d38:	2970      	cmp	r1, #112	; 0x70
 8016d3a:	d1dd      	bne.n	8016cf8 <_printf_i+0x30>
 8016d3c:	6823      	ldr	r3, [r4, #0]
 8016d3e:	f043 0320 	orr.w	r3, r3, #32
 8016d42:	6023      	str	r3, [r4, #0]
 8016d44:	e003      	b.n	8016d4e <_printf_i+0x86>
 8016d46:	2975      	cmp	r1, #117	; 0x75
 8016d48:	d017      	beq.n	8016d7a <_printf_i+0xb2>
 8016d4a:	2978      	cmp	r1, #120	; 0x78
 8016d4c:	d1d4      	bne.n	8016cf8 <_printf_i+0x30>
 8016d4e:	2378      	movs	r3, #120	; 0x78
 8016d50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016d54:	4864      	ldr	r0, [pc, #400]	; (8016ee8 <_printf_i+0x220>)
 8016d56:	e055      	b.n	8016e04 <_printf_i+0x13c>
 8016d58:	6813      	ldr	r3, [r2, #0]
 8016d5a:	1d19      	adds	r1, r3, #4
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	6011      	str	r1, [r2, #0]
 8016d60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016d64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016d68:	2301      	movs	r3, #1
 8016d6a:	e08c      	b.n	8016e86 <_printf_i+0x1be>
 8016d6c:	681b      	ldr	r3, [r3, #0]
 8016d6e:	6011      	str	r1, [r2, #0]
 8016d70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016d74:	bf18      	it	ne
 8016d76:	b21b      	sxthne	r3, r3
 8016d78:	e7cf      	b.n	8016d1a <_printf_i+0x52>
 8016d7a:	6813      	ldr	r3, [r2, #0]
 8016d7c:	6825      	ldr	r5, [r4, #0]
 8016d7e:	1d18      	adds	r0, r3, #4
 8016d80:	6010      	str	r0, [r2, #0]
 8016d82:	0628      	lsls	r0, r5, #24
 8016d84:	d501      	bpl.n	8016d8a <_printf_i+0xc2>
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	e002      	b.n	8016d90 <_printf_i+0xc8>
 8016d8a:	0668      	lsls	r0, r5, #25
 8016d8c:	d5fb      	bpl.n	8016d86 <_printf_i+0xbe>
 8016d8e:	881b      	ldrh	r3, [r3, #0]
 8016d90:	4854      	ldr	r0, [pc, #336]	; (8016ee4 <_printf_i+0x21c>)
 8016d92:	296f      	cmp	r1, #111	; 0x6f
 8016d94:	bf14      	ite	ne
 8016d96:	220a      	movne	r2, #10
 8016d98:	2208      	moveq	r2, #8
 8016d9a:	2100      	movs	r1, #0
 8016d9c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016da0:	6865      	ldr	r5, [r4, #4]
 8016da2:	60a5      	str	r5, [r4, #8]
 8016da4:	2d00      	cmp	r5, #0
 8016da6:	f2c0 8095 	blt.w	8016ed4 <_printf_i+0x20c>
 8016daa:	6821      	ldr	r1, [r4, #0]
 8016dac:	f021 0104 	bic.w	r1, r1, #4
 8016db0:	6021      	str	r1, [r4, #0]
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d13d      	bne.n	8016e32 <_printf_i+0x16a>
 8016db6:	2d00      	cmp	r5, #0
 8016db8:	f040 808e 	bne.w	8016ed8 <_printf_i+0x210>
 8016dbc:	4665      	mov	r5, ip
 8016dbe:	2a08      	cmp	r2, #8
 8016dc0:	d10b      	bne.n	8016dda <_printf_i+0x112>
 8016dc2:	6823      	ldr	r3, [r4, #0]
 8016dc4:	07db      	lsls	r3, r3, #31
 8016dc6:	d508      	bpl.n	8016dda <_printf_i+0x112>
 8016dc8:	6923      	ldr	r3, [r4, #16]
 8016dca:	6862      	ldr	r2, [r4, #4]
 8016dcc:	429a      	cmp	r2, r3
 8016dce:	bfde      	ittt	le
 8016dd0:	2330      	movle	r3, #48	; 0x30
 8016dd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016dd6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016dda:	ebac 0305 	sub.w	r3, ip, r5
 8016dde:	6123      	str	r3, [r4, #16]
 8016de0:	f8cd 8000 	str.w	r8, [sp]
 8016de4:	463b      	mov	r3, r7
 8016de6:	aa03      	add	r2, sp, #12
 8016de8:	4621      	mov	r1, r4
 8016dea:	4630      	mov	r0, r6
 8016dec:	f7ff fef6 	bl	8016bdc <_printf_common>
 8016df0:	3001      	adds	r0, #1
 8016df2:	d14d      	bne.n	8016e90 <_printf_i+0x1c8>
 8016df4:	f04f 30ff 	mov.w	r0, #4294967295
 8016df8:	b005      	add	sp, #20
 8016dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016dfe:	4839      	ldr	r0, [pc, #228]	; (8016ee4 <_printf_i+0x21c>)
 8016e00:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016e04:	6813      	ldr	r3, [r2, #0]
 8016e06:	6821      	ldr	r1, [r4, #0]
 8016e08:	1d1d      	adds	r5, r3, #4
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	6015      	str	r5, [r2, #0]
 8016e0e:	060a      	lsls	r2, r1, #24
 8016e10:	d50b      	bpl.n	8016e2a <_printf_i+0x162>
 8016e12:	07ca      	lsls	r2, r1, #31
 8016e14:	bf44      	itt	mi
 8016e16:	f041 0120 	orrmi.w	r1, r1, #32
 8016e1a:	6021      	strmi	r1, [r4, #0]
 8016e1c:	b91b      	cbnz	r3, 8016e26 <_printf_i+0x15e>
 8016e1e:	6822      	ldr	r2, [r4, #0]
 8016e20:	f022 0220 	bic.w	r2, r2, #32
 8016e24:	6022      	str	r2, [r4, #0]
 8016e26:	2210      	movs	r2, #16
 8016e28:	e7b7      	b.n	8016d9a <_printf_i+0xd2>
 8016e2a:	064d      	lsls	r5, r1, #25
 8016e2c:	bf48      	it	mi
 8016e2e:	b29b      	uxthmi	r3, r3
 8016e30:	e7ef      	b.n	8016e12 <_printf_i+0x14a>
 8016e32:	4665      	mov	r5, ip
 8016e34:	fbb3 f1f2 	udiv	r1, r3, r2
 8016e38:	fb02 3311 	mls	r3, r2, r1, r3
 8016e3c:	5cc3      	ldrb	r3, [r0, r3]
 8016e3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8016e42:	460b      	mov	r3, r1
 8016e44:	2900      	cmp	r1, #0
 8016e46:	d1f5      	bne.n	8016e34 <_printf_i+0x16c>
 8016e48:	e7b9      	b.n	8016dbe <_printf_i+0xf6>
 8016e4a:	6813      	ldr	r3, [r2, #0]
 8016e4c:	6825      	ldr	r5, [r4, #0]
 8016e4e:	6961      	ldr	r1, [r4, #20]
 8016e50:	1d18      	adds	r0, r3, #4
 8016e52:	6010      	str	r0, [r2, #0]
 8016e54:	0628      	lsls	r0, r5, #24
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	d501      	bpl.n	8016e5e <_printf_i+0x196>
 8016e5a:	6019      	str	r1, [r3, #0]
 8016e5c:	e002      	b.n	8016e64 <_printf_i+0x19c>
 8016e5e:	066a      	lsls	r2, r5, #25
 8016e60:	d5fb      	bpl.n	8016e5a <_printf_i+0x192>
 8016e62:	8019      	strh	r1, [r3, #0]
 8016e64:	2300      	movs	r3, #0
 8016e66:	6123      	str	r3, [r4, #16]
 8016e68:	4665      	mov	r5, ip
 8016e6a:	e7b9      	b.n	8016de0 <_printf_i+0x118>
 8016e6c:	6813      	ldr	r3, [r2, #0]
 8016e6e:	1d19      	adds	r1, r3, #4
 8016e70:	6011      	str	r1, [r2, #0]
 8016e72:	681d      	ldr	r5, [r3, #0]
 8016e74:	6862      	ldr	r2, [r4, #4]
 8016e76:	2100      	movs	r1, #0
 8016e78:	4628      	mov	r0, r5
 8016e7a:	f7e9 f9b9 	bl	80001f0 <memchr>
 8016e7e:	b108      	cbz	r0, 8016e84 <_printf_i+0x1bc>
 8016e80:	1b40      	subs	r0, r0, r5
 8016e82:	6060      	str	r0, [r4, #4]
 8016e84:	6863      	ldr	r3, [r4, #4]
 8016e86:	6123      	str	r3, [r4, #16]
 8016e88:	2300      	movs	r3, #0
 8016e8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016e8e:	e7a7      	b.n	8016de0 <_printf_i+0x118>
 8016e90:	6923      	ldr	r3, [r4, #16]
 8016e92:	462a      	mov	r2, r5
 8016e94:	4639      	mov	r1, r7
 8016e96:	4630      	mov	r0, r6
 8016e98:	47c0      	blx	r8
 8016e9a:	3001      	adds	r0, #1
 8016e9c:	d0aa      	beq.n	8016df4 <_printf_i+0x12c>
 8016e9e:	6823      	ldr	r3, [r4, #0]
 8016ea0:	079b      	lsls	r3, r3, #30
 8016ea2:	d413      	bmi.n	8016ecc <_printf_i+0x204>
 8016ea4:	68e0      	ldr	r0, [r4, #12]
 8016ea6:	9b03      	ldr	r3, [sp, #12]
 8016ea8:	4298      	cmp	r0, r3
 8016eaa:	bfb8      	it	lt
 8016eac:	4618      	movlt	r0, r3
 8016eae:	e7a3      	b.n	8016df8 <_printf_i+0x130>
 8016eb0:	2301      	movs	r3, #1
 8016eb2:	464a      	mov	r2, r9
 8016eb4:	4639      	mov	r1, r7
 8016eb6:	4630      	mov	r0, r6
 8016eb8:	47c0      	blx	r8
 8016eba:	3001      	adds	r0, #1
 8016ebc:	d09a      	beq.n	8016df4 <_printf_i+0x12c>
 8016ebe:	3501      	adds	r5, #1
 8016ec0:	68e3      	ldr	r3, [r4, #12]
 8016ec2:	9a03      	ldr	r2, [sp, #12]
 8016ec4:	1a9b      	subs	r3, r3, r2
 8016ec6:	42ab      	cmp	r3, r5
 8016ec8:	dcf2      	bgt.n	8016eb0 <_printf_i+0x1e8>
 8016eca:	e7eb      	b.n	8016ea4 <_printf_i+0x1dc>
 8016ecc:	2500      	movs	r5, #0
 8016ece:	f104 0919 	add.w	r9, r4, #25
 8016ed2:	e7f5      	b.n	8016ec0 <_printf_i+0x1f8>
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d1ac      	bne.n	8016e32 <_printf_i+0x16a>
 8016ed8:	7803      	ldrb	r3, [r0, #0]
 8016eda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016ede:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016ee2:	e76c      	b.n	8016dbe <_printf_i+0xf6>
 8016ee4:	08028d99 	.word	0x08028d99
 8016ee8:	08028daa 	.word	0x08028daa

08016eec <__sread>:
 8016eec:	b510      	push	{r4, lr}
 8016eee:	460c      	mov	r4, r1
 8016ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ef4:	f000 fa46 	bl	8017384 <_read_r>
 8016ef8:	2800      	cmp	r0, #0
 8016efa:	bfab      	itete	ge
 8016efc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016efe:	89a3      	ldrhlt	r3, [r4, #12]
 8016f00:	181b      	addge	r3, r3, r0
 8016f02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016f06:	bfac      	ite	ge
 8016f08:	6563      	strge	r3, [r4, #84]	; 0x54
 8016f0a:	81a3      	strhlt	r3, [r4, #12]
 8016f0c:	bd10      	pop	{r4, pc}

08016f0e <__swrite>:
 8016f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f12:	461f      	mov	r7, r3
 8016f14:	898b      	ldrh	r3, [r1, #12]
 8016f16:	05db      	lsls	r3, r3, #23
 8016f18:	4605      	mov	r5, r0
 8016f1a:	460c      	mov	r4, r1
 8016f1c:	4616      	mov	r6, r2
 8016f1e:	d505      	bpl.n	8016f2c <__swrite+0x1e>
 8016f20:	2302      	movs	r3, #2
 8016f22:	2200      	movs	r2, #0
 8016f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f28:	f000 f9b6 	bl	8017298 <_lseek_r>
 8016f2c:	89a3      	ldrh	r3, [r4, #12]
 8016f2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016f32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016f36:	81a3      	strh	r3, [r4, #12]
 8016f38:	4632      	mov	r2, r6
 8016f3a:	463b      	mov	r3, r7
 8016f3c:	4628      	mov	r0, r5
 8016f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016f42:	f000 b869 	b.w	8017018 <_write_r>

08016f46 <__sseek>:
 8016f46:	b510      	push	{r4, lr}
 8016f48:	460c      	mov	r4, r1
 8016f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f4e:	f000 f9a3 	bl	8017298 <_lseek_r>
 8016f52:	1c43      	adds	r3, r0, #1
 8016f54:	89a3      	ldrh	r3, [r4, #12]
 8016f56:	bf15      	itete	ne
 8016f58:	6560      	strne	r0, [r4, #84]	; 0x54
 8016f5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016f5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016f62:	81a3      	strheq	r3, [r4, #12]
 8016f64:	bf18      	it	ne
 8016f66:	81a3      	strhne	r3, [r4, #12]
 8016f68:	bd10      	pop	{r4, pc}

08016f6a <__sclose>:
 8016f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f6e:	f000 b8d3 	b.w	8017118 <_close_r>
	...

08016f74 <__swbuf_r>:
 8016f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f76:	460e      	mov	r6, r1
 8016f78:	4614      	mov	r4, r2
 8016f7a:	4605      	mov	r5, r0
 8016f7c:	b118      	cbz	r0, 8016f86 <__swbuf_r+0x12>
 8016f7e:	6983      	ldr	r3, [r0, #24]
 8016f80:	b90b      	cbnz	r3, 8016f86 <__swbuf_r+0x12>
 8016f82:	f7ff fc5f 	bl	8016844 <__sinit>
 8016f86:	4b21      	ldr	r3, [pc, #132]	; (801700c <__swbuf_r+0x98>)
 8016f88:	429c      	cmp	r4, r3
 8016f8a:	d12a      	bne.n	8016fe2 <__swbuf_r+0x6e>
 8016f8c:	686c      	ldr	r4, [r5, #4]
 8016f8e:	69a3      	ldr	r3, [r4, #24]
 8016f90:	60a3      	str	r3, [r4, #8]
 8016f92:	89a3      	ldrh	r3, [r4, #12]
 8016f94:	071a      	lsls	r2, r3, #28
 8016f96:	d52e      	bpl.n	8016ff6 <__swbuf_r+0x82>
 8016f98:	6923      	ldr	r3, [r4, #16]
 8016f9a:	b363      	cbz	r3, 8016ff6 <__swbuf_r+0x82>
 8016f9c:	6923      	ldr	r3, [r4, #16]
 8016f9e:	6820      	ldr	r0, [r4, #0]
 8016fa0:	1ac0      	subs	r0, r0, r3
 8016fa2:	6963      	ldr	r3, [r4, #20]
 8016fa4:	b2f6      	uxtb	r6, r6
 8016fa6:	4283      	cmp	r3, r0
 8016fa8:	4637      	mov	r7, r6
 8016faa:	dc04      	bgt.n	8016fb6 <__swbuf_r+0x42>
 8016fac:	4621      	mov	r1, r4
 8016fae:	4628      	mov	r0, r5
 8016fb0:	f000 f948 	bl	8017244 <_fflush_r>
 8016fb4:	bb28      	cbnz	r0, 8017002 <__swbuf_r+0x8e>
 8016fb6:	68a3      	ldr	r3, [r4, #8]
 8016fb8:	3b01      	subs	r3, #1
 8016fba:	60a3      	str	r3, [r4, #8]
 8016fbc:	6823      	ldr	r3, [r4, #0]
 8016fbe:	1c5a      	adds	r2, r3, #1
 8016fc0:	6022      	str	r2, [r4, #0]
 8016fc2:	701e      	strb	r6, [r3, #0]
 8016fc4:	6963      	ldr	r3, [r4, #20]
 8016fc6:	3001      	adds	r0, #1
 8016fc8:	4283      	cmp	r3, r0
 8016fca:	d004      	beq.n	8016fd6 <__swbuf_r+0x62>
 8016fcc:	89a3      	ldrh	r3, [r4, #12]
 8016fce:	07db      	lsls	r3, r3, #31
 8016fd0:	d519      	bpl.n	8017006 <__swbuf_r+0x92>
 8016fd2:	2e0a      	cmp	r6, #10
 8016fd4:	d117      	bne.n	8017006 <__swbuf_r+0x92>
 8016fd6:	4621      	mov	r1, r4
 8016fd8:	4628      	mov	r0, r5
 8016fda:	f000 f933 	bl	8017244 <_fflush_r>
 8016fde:	b190      	cbz	r0, 8017006 <__swbuf_r+0x92>
 8016fe0:	e00f      	b.n	8017002 <__swbuf_r+0x8e>
 8016fe2:	4b0b      	ldr	r3, [pc, #44]	; (8017010 <__swbuf_r+0x9c>)
 8016fe4:	429c      	cmp	r4, r3
 8016fe6:	d101      	bne.n	8016fec <__swbuf_r+0x78>
 8016fe8:	68ac      	ldr	r4, [r5, #8]
 8016fea:	e7d0      	b.n	8016f8e <__swbuf_r+0x1a>
 8016fec:	4b09      	ldr	r3, [pc, #36]	; (8017014 <__swbuf_r+0xa0>)
 8016fee:	429c      	cmp	r4, r3
 8016ff0:	bf08      	it	eq
 8016ff2:	68ec      	ldreq	r4, [r5, #12]
 8016ff4:	e7cb      	b.n	8016f8e <__swbuf_r+0x1a>
 8016ff6:	4621      	mov	r1, r4
 8016ff8:	4628      	mov	r0, r5
 8016ffa:	f000 f81f 	bl	801703c <__swsetup_r>
 8016ffe:	2800      	cmp	r0, #0
 8017000:	d0cc      	beq.n	8016f9c <__swbuf_r+0x28>
 8017002:	f04f 37ff 	mov.w	r7, #4294967295
 8017006:	4638      	mov	r0, r7
 8017008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801700a:	bf00      	nop
 801700c:	08028d48 	.word	0x08028d48
 8017010:	08028d68 	.word	0x08028d68
 8017014:	08028d28 	.word	0x08028d28

08017018 <_write_r>:
 8017018:	b538      	push	{r3, r4, r5, lr}
 801701a:	4c07      	ldr	r4, [pc, #28]	; (8017038 <_write_r+0x20>)
 801701c:	4605      	mov	r5, r0
 801701e:	4608      	mov	r0, r1
 8017020:	4611      	mov	r1, r2
 8017022:	2200      	movs	r2, #0
 8017024:	6022      	str	r2, [r4, #0]
 8017026:	461a      	mov	r2, r3
 8017028:	f7ef fd47 	bl	8006aba <_write>
 801702c:	1c43      	adds	r3, r0, #1
 801702e:	d102      	bne.n	8017036 <_write_r+0x1e>
 8017030:	6823      	ldr	r3, [r4, #0]
 8017032:	b103      	cbz	r3, 8017036 <_write_r+0x1e>
 8017034:	602b      	str	r3, [r5, #0]
 8017036:	bd38      	pop	{r3, r4, r5, pc}
 8017038:	20007b40 	.word	0x20007b40

0801703c <__swsetup_r>:
 801703c:	4b32      	ldr	r3, [pc, #200]	; (8017108 <__swsetup_r+0xcc>)
 801703e:	b570      	push	{r4, r5, r6, lr}
 8017040:	681d      	ldr	r5, [r3, #0]
 8017042:	4606      	mov	r6, r0
 8017044:	460c      	mov	r4, r1
 8017046:	b125      	cbz	r5, 8017052 <__swsetup_r+0x16>
 8017048:	69ab      	ldr	r3, [r5, #24]
 801704a:	b913      	cbnz	r3, 8017052 <__swsetup_r+0x16>
 801704c:	4628      	mov	r0, r5
 801704e:	f7ff fbf9 	bl	8016844 <__sinit>
 8017052:	4b2e      	ldr	r3, [pc, #184]	; (801710c <__swsetup_r+0xd0>)
 8017054:	429c      	cmp	r4, r3
 8017056:	d10f      	bne.n	8017078 <__swsetup_r+0x3c>
 8017058:	686c      	ldr	r4, [r5, #4]
 801705a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801705e:	b29a      	uxth	r2, r3
 8017060:	0715      	lsls	r5, r2, #28
 8017062:	d42c      	bmi.n	80170be <__swsetup_r+0x82>
 8017064:	06d0      	lsls	r0, r2, #27
 8017066:	d411      	bmi.n	801708c <__swsetup_r+0x50>
 8017068:	2209      	movs	r2, #9
 801706a:	6032      	str	r2, [r6, #0]
 801706c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017070:	81a3      	strh	r3, [r4, #12]
 8017072:	f04f 30ff 	mov.w	r0, #4294967295
 8017076:	e03e      	b.n	80170f6 <__swsetup_r+0xba>
 8017078:	4b25      	ldr	r3, [pc, #148]	; (8017110 <__swsetup_r+0xd4>)
 801707a:	429c      	cmp	r4, r3
 801707c:	d101      	bne.n	8017082 <__swsetup_r+0x46>
 801707e:	68ac      	ldr	r4, [r5, #8]
 8017080:	e7eb      	b.n	801705a <__swsetup_r+0x1e>
 8017082:	4b24      	ldr	r3, [pc, #144]	; (8017114 <__swsetup_r+0xd8>)
 8017084:	429c      	cmp	r4, r3
 8017086:	bf08      	it	eq
 8017088:	68ec      	ldreq	r4, [r5, #12]
 801708a:	e7e6      	b.n	801705a <__swsetup_r+0x1e>
 801708c:	0751      	lsls	r1, r2, #29
 801708e:	d512      	bpl.n	80170b6 <__swsetup_r+0x7a>
 8017090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017092:	b141      	cbz	r1, 80170a6 <__swsetup_r+0x6a>
 8017094:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017098:	4299      	cmp	r1, r3
 801709a:	d002      	beq.n	80170a2 <__swsetup_r+0x66>
 801709c:	4630      	mov	r0, r6
 801709e:	f7ff fa8d 	bl	80165bc <_free_r>
 80170a2:	2300      	movs	r3, #0
 80170a4:	6363      	str	r3, [r4, #52]	; 0x34
 80170a6:	89a3      	ldrh	r3, [r4, #12]
 80170a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80170ac:	81a3      	strh	r3, [r4, #12]
 80170ae:	2300      	movs	r3, #0
 80170b0:	6063      	str	r3, [r4, #4]
 80170b2:	6923      	ldr	r3, [r4, #16]
 80170b4:	6023      	str	r3, [r4, #0]
 80170b6:	89a3      	ldrh	r3, [r4, #12]
 80170b8:	f043 0308 	orr.w	r3, r3, #8
 80170bc:	81a3      	strh	r3, [r4, #12]
 80170be:	6923      	ldr	r3, [r4, #16]
 80170c0:	b94b      	cbnz	r3, 80170d6 <__swsetup_r+0x9a>
 80170c2:	89a3      	ldrh	r3, [r4, #12]
 80170c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80170c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80170cc:	d003      	beq.n	80170d6 <__swsetup_r+0x9a>
 80170ce:	4621      	mov	r1, r4
 80170d0:	4630      	mov	r0, r6
 80170d2:	f000 f917 	bl	8017304 <__smakebuf_r>
 80170d6:	89a2      	ldrh	r2, [r4, #12]
 80170d8:	f012 0301 	ands.w	r3, r2, #1
 80170dc:	d00c      	beq.n	80170f8 <__swsetup_r+0xbc>
 80170de:	2300      	movs	r3, #0
 80170e0:	60a3      	str	r3, [r4, #8]
 80170e2:	6963      	ldr	r3, [r4, #20]
 80170e4:	425b      	negs	r3, r3
 80170e6:	61a3      	str	r3, [r4, #24]
 80170e8:	6923      	ldr	r3, [r4, #16]
 80170ea:	b953      	cbnz	r3, 8017102 <__swsetup_r+0xc6>
 80170ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80170f0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80170f4:	d1ba      	bne.n	801706c <__swsetup_r+0x30>
 80170f6:	bd70      	pop	{r4, r5, r6, pc}
 80170f8:	0792      	lsls	r2, r2, #30
 80170fa:	bf58      	it	pl
 80170fc:	6963      	ldrpl	r3, [r4, #20]
 80170fe:	60a3      	str	r3, [r4, #8]
 8017100:	e7f2      	b.n	80170e8 <__swsetup_r+0xac>
 8017102:	2000      	movs	r0, #0
 8017104:	e7f7      	b.n	80170f6 <__swsetup_r+0xba>
 8017106:	bf00      	nop
 8017108:	20000024 	.word	0x20000024
 801710c:	08028d48 	.word	0x08028d48
 8017110:	08028d68 	.word	0x08028d68
 8017114:	08028d28 	.word	0x08028d28

08017118 <_close_r>:
 8017118:	b538      	push	{r3, r4, r5, lr}
 801711a:	4c06      	ldr	r4, [pc, #24]	; (8017134 <_close_r+0x1c>)
 801711c:	2300      	movs	r3, #0
 801711e:	4605      	mov	r5, r0
 8017120:	4608      	mov	r0, r1
 8017122:	6023      	str	r3, [r4, #0]
 8017124:	f7ef fce5 	bl	8006af2 <_close>
 8017128:	1c43      	adds	r3, r0, #1
 801712a:	d102      	bne.n	8017132 <_close_r+0x1a>
 801712c:	6823      	ldr	r3, [r4, #0]
 801712e:	b103      	cbz	r3, 8017132 <_close_r+0x1a>
 8017130:	602b      	str	r3, [r5, #0]
 8017132:	bd38      	pop	{r3, r4, r5, pc}
 8017134:	20007b40 	.word	0x20007b40

08017138 <__sflush_r>:
 8017138:	898a      	ldrh	r2, [r1, #12]
 801713a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801713e:	4605      	mov	r5, r0
 8017140:	0710      	lsls	r0, r2, #28
 8017142:	460c      	mov	r4, r1
 8017144:	d458      	bmi.n	80171f8 <__sflush_r+0xc0>
 8017146:	684b      	ldr	r3, [r1, #4]
 8017148:	2b00      	cmp	r3, #0
 801714a:	dc05      	bgt.n	8017158 <__sflush_r+0x20>
 801714c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801714e:	2b00      	cmp	r3, #0
 8017150:	dc02      	bgt.n	8017158 <__sflush_r+0x20>
 8017152:	2000      	movs	r0, #0
 8017154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017158:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801715a:	2e00      	cmp	r6, #0
 801715c:	d0f9      	beq.n	8017152 <__sflush_r+0x1a>
 801715e:	2300      	movs	r3, #0
 8017160:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017164:	682f      	ldr	r7, [r5, #0]
 8017166:	6a21      	ldr	r1, [r4, #32]
 8017168:	602b      	str	r3, [r5, #0]
 801716a:	d032      	beq.n	80171d2 <__sflush_r+0x9a>
 801716c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801716e:	89a3      	ldrh	r3, [r4, #12]
 8017170:	075a      	lsls	r2, r3, #29
 8017172:	d505      	bpl.n	8017180 <__sflush_r+0x48>
 8017174:	6863      	ldr	r3, [r4, #4]
 8017176:	1ac0      	subs	r0, r0, r3
 8017178:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801717a:	b10b      	cbz	r3, 8017180 <__sflush_r+0x48>
 801717c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801717e:	1ac0      	subs	r0, r0, r3
 8017180:	2300      	movs	r3, #0
 8017182:	4602      	mov	r2, r0
 8017184:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017186:	6a21      	ldr	r1, [r4, #32]
 8017188:	4628      	mov	r0, r5
 801718a:	47b0      	blx	r6
 801718c:	1c43      	adds	r3, r0, #1
 801718e:	89a3      	ldrh	r3, [r4, #12]
 8017190:	d106      	bne.n	80171a0 <__sflush_r+0x68>
 8017192:	6829      	ldr	r1, [r5, #0]
 8017194:	291d      	cmp	r1, #29
 8017196:	d848      	bhi.n	801722a <__sflush_r+0xf2>
 8017198:	4a29      	ldr	r2, [pc, #164]	; (8017240 <__sflush_r+0x108>)
 801719a:	40ca      	lsrs	r2, r1
 801719c:	07d6      	lsls	r6, r2, #31
 801719e:	d544      	bpl.n	801722a <__sflush_r+0xf2>
 80171a0:	2200      	movs	r2, #0
 80171a2:	6062      	str	r2, [r4, #4]
 80171a4:	04d9      	lsls	r1, r3, #19
 80171a6:	6922      	ldr	r2, [r4, #16]
 80171a8:	6022      	str	r2, [r4, #0]
 80171aa:	d504      	bpl.n	80171b6 <__sflush_r+0x7e>
 80171ac:	1c42      	adds	r2, r0, #1
 80171ae:	d101      	bne.n	80171b4 <__sflush_r+0x7c>
 80171b0:	682b      	ldr	r3, [r5, #0]
 80171b2:	b903      	cbnz	r3, 80171b6 <__sflush_r+0x7e>
 80171b4:	6560      	str	r0, [r4, #84]	; 0x54
 80171b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80171b8:	602f      	str	r7, [r5, #0]
 80171ba:	2900      	cmp	r1, #0
 80171bc:	d0c9      	beq.n	8017152 <__sflush_r+0x1a>
 80171be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80171c2:	4299      	cmp	r1, r3
 80171c4:	d002      	beq.n	80171cc <__sflush_r+0x94>
 80171c6:	4628      	mov	r0, r5
 80171c8:	f7ff f9f8 	bl	80165bc <_free_r>
 80171cc:	2000      	movs	r0, #0
 80171ce:	6360      	str	r0, [r4, #52]	; 0x34
 80171d0:	e7c0      	b.n	8017154 <__sflush_r+0x1c>
 80171d2:	2301      	movs	r3, #1
 80171d4:	4628      	mov	r0, r5
 80171d6:	47b0      	blx	r6
 80171d8:	1c41      	adds	r1, r0, #1
 80171da:	d1c8      	bne.n	801716e <__sflush_r+0x36>
 80171dc:	682b      	ldr	r3, [r5, #0]
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d0c5      	beq.n	801716e <__sflush_r+0x36>
 80171e2:	2b1d      	cmp	r3, #29
 80171e4:	d001      	beq.n	80171ea <__sflush_r+0xb2>
 80171e6:	2b16      	cmp	r3, #22
 80171e8:	d101      	bne.n	80171ee <__sflush_r+0xb6>
 80171ea:	602f      	str	r7, [r5, #0]
 80171ec:	e7b1      	b.n	8017152 <__sflush_r+0x1a>
 80171ee:	89a3      	ldrh	r3, [r4, #12]
 80171f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80171f4:	81a3      	strh	r3, [r4, #12]
 80171f6:	e7ad      	b.n	8017154 <__sflush_r+0x1c>
 80171f8:	690f      	ldr	r7, [r1, #16]
 80171fa:	2f00      	cmp	r7, #0
 80171fc:	d0a9      	beq.n	8017152 <__sflush_r+0x1a>
 80171fe:	0793      	lsls	r3, r2, #30
 8017200:	680e      	ldr	r6, [r1, #0]
 8017202:	bf08      	it	eq
 8017204:	694b      	ldreq	r3, [r1, #20]
 8017206:	600f      	str	r7, [r1, #0]
 8017208:	bf18      	it	ne
 801720a:	2300      	movne	r3, #0
 801720c:	eba6 0807 	sub.w	r8, r6, r7
 8017210:	608b      	str	r3, [r1, #8]
 8017212:	f1b8 0f00 	cmp.w	r8, #0
 8017216:	dd9c      	ble.n	8017152 <__sflush_r+0x1a>
 8017218:	4643      	mov	r3, r8
 801721a:	463a      	mov	r2, r7
 801721c:	6a21      	ldr	r1, [r4, #32]
 801721e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017220:	4628      	mov	r0, r5
 8017222:	47b0      	blx	r6
 8017224:	2800      	cmp	r0, #0
 8017226:	dc06      	bgt.n	8017236 <__sflush_r+0xfe>
 8017228:	89a3      	ldrh	r3, [r4, #12]
 801722a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801722e:	81a3      	strh	r3, [r4, #12]
 8017230:	f04f 30ff 	mov.w	r0, #4294967295
 8017234:	e78e      	b.n	8017154 <__sflush_r+0x1c>
 8017236:	4407      	add	r7, r0
 8017238:	eba8 0800 	sub.w	r8, r8, r0
 801723c:	e7e9      	b.n	8017212 <__sflush_r+0xda>
 801723e:	bf00      	nop
 8017240:	20400001 	.word	0x20400001

08017244 <_fflush_r>:
 8017244:	b538      	push	{r3, r4, r5, lr}
 8017246:	690b      	ldr	r3, [r1, #16]
 8017248:	4605      	mov	r5, r0
 801724a:	460c      	mov	r4, r1
 801724c:	b1db      	cbz	r3, 8017286 <_fflush_r+0x42>
 801724e:	b118      	cbz	r0, 8017258 <_fflush_r+0x14>
 8017250:	6983      	ldr	r3, [r0, #24]
 8017252:	b90b      	cbnz	r3, 8017258 <_fflush_r+0x14>
 8017254:	f7ff faf6 	bl	8016844 <__sinit>
 8017258:	4b0c      	ldr	r3, [pc, #48]	; (801728c <_fflush_r+0x48>)
 801725a:	429c      	cmp	r4, r3
 801725c:	d109      	bne.n	8017272 <_fflush_r+0x2e>
 801725e:	686c      	ldr	r4, [r5, #4]
 8017260:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017264:	b17b      	cbz	r3, 8017286 <_fflush_r+0x42>
 8017266:	4621      	mov	r1, r4
 8017268:	4628      	mov	r0, r5
 801726a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801726e:	f7ff bf63 	b.w	8017138 <__sflush_r>
 8017272:	4b07      	ldr	r3, [pc, #28]	; (8017290 <_fflush_r+0x4c>)
 8017274:	429c      	cmp	r4, r3
 8017276:	d101      	bne.n	801727c <_fflush_r+0x38>
 8017278:	68ac      	ldr	r4, [r5, #8]
 801727a:	e7f1      	b.n	8017260 <_fflush_r+0x1c>
 801727c:	4b05      	ldr	r3, [pc, #20]	; (8017294 <_fflush_r+0x50>)
 801727e:	429c      	cmp	r4, r3
 8017280:	bf08      	it	eq
 8017282:	68ec      	ldreq	r4, [r5, #12]
 8017284:	e7ec      	b.n	8017260 <_fflush_r+0x1c>
 8017286:	2000      	movs	r0, #0
 8017288:	bd38      	pop	{r3, r4, r5, pc}
 801728a:	bf00      	nop
 801728c:	08028d48 	.word	0x08028d48
 8017290:	08028d68 	.word	0x08028d68
 8017294:	08028d28 	.word	0x08028d28

08017298 <_lseek_r>:
 8017298:	b538      	push	{r3, r4, r5, lr}
 801729a:	4c07      	ldr	r4, [pc, #28]	; (80172b8 <_lseek_r+0x20>)
 801729c:	4605      	mov	r5, r0
 801729e:	4608      	mov	r0, r1
 80172a0:	4611      	mov	r1, r2
 80172a2:	2200      	movs	r2, #0
 80172a4:	6022      	str	r2, [r4, #0]
 80172a6:	461a      	mov	r2, r3
 80172a8:	f7ef fc4a 	bl	8006b40 <_lseek>
 80172ac:	1c43      	adds	r3, r0, #1
 80172ae:	d102      	bne.n	80172b6 <_lseek_r+0x1e>
 80172b0:	6823      	ldr	r3, [r4, #0]
 80172b2:	b103      	cbz	r3, 80172b6 <_lseek_r+0x1e>
 80172b4:	602b      	str	r3, [r5, #0]
 80172b6:	bd38      	pop	{r3, r4, r5, pc}
 80172b8:	20007b40 	.word	0x20007b40

080172bc <__swhatbuf_r>:
 80172bc:	b570      	push	{r4, r5, r6, lr}
 80172be:	460e      	mov	r6, r1
 80172c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172c4:	2900      	cmp	r1, #0
 80172c6:	b096      	sub	sp, #88	; 0x58
 80172c8:	4614      	mov	r4, r2
 80172ca:	461d      	mov	r5, r3
 80172cc:	da07      	bge.n	80172de <__swhatbuf_r+0x22>
 80172ce:	2300      	movs	r3, #0
 80172d0:	602b      	str	r3, [r5, #0]
 80172d2:	89b3      	ldrh	r3, [r6, #12]
 80172d4:	061a      	lsls	r2, r3, #24
 80172d6:	d410      	bmi.n	80172fa <__swhatbuf_r+0x3e>
 80172d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80172dc:	e00e      	b.n	80172fc <__swhatbuf_r+0x40>
 80172de:	466a      	mov	r2, sp
 80172e0:	f000 f862 	bl	80173a8 <_fstat_r>
 80172e4:	2800      	cmp	r0, #0
 80172e6:	dbf2      	blt.n	80172ce <__swhatbuf_r+0x12>
 80172e8:	9a01      	ldr	r2, [sp, #4]
 80172ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80172ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80172f2:	425a      	negs	r2, r3
 80172f4:	415a      	adcs	r2, r3
 80172f6:	602a      	str	r2, [r5, #0]
 80172f8:	e7ee      	b.n	80172d8 <__swhatbuf_r+0x1c>
 80172fa:	2340      	movs	r3, #64	; 0x40
 80172fc:	2000      	movs	r0, #0
 80172fe:	6023      	str	r3, [r4, #0]
 8017300:	b016      	add	sp, #88	; 0x58
 8017302:	bd70      	pop	{r4, r5, r6, pc}

08017304 <__smakebuf_r>:
 8017304:	898b      	ldrh	r3, [r1, #12]
 8017306:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017308:	079d      	lsls	r5, r3, #30
 801730a:	4606      	mov	r6, r0
 801730c:	460c      	mov	r4, r1
 801730e:	d507      	bpl.n	8017320 <__smakebuf_r+0x1c>
 8017310:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017314:	6023      	str	r3, [r4, #0]
 8017316:	6123      	str	r3, [r4, #16]
 8017318:	2301      	movs	r3, #1
 801731a:	6163      	str	r3, [r4, #20]
 801731c:	b002      	add	sp, #8
 801731e:	bd70      	pop	{r4, r5, r6, pc}
 8017320:	ab01      	add	r3, sp, #4
 8017322:	466a      	mov	r2, sp
 8017324:	f7ff ffca 	bl	80172bc <__swhatbuf_r>
 8017328:	9900      	ldr	r1, [sp, #0]
 801732a:	4605      	mov	r5, r0
 801732c:	4630      	mov	r0, r6
 801732e:	f7ff f993 	bl	8016658 <_malloc_r>
 8017332:	b948      	cbnz	r0, 8017348 <__smakebuf_r+0x44>
 8017334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017338:	059a      	lsls	r2, r3, #22
 801733a:	d4ef      	bmi.n	801731c <__smakebuf_r+0x18>
 801733c:	f023 0303 	bic.w	r3, r3, #3
 8017340:	f043 0302 	orr.w	r3, r3, #2
 8017344:	81a3      	strh	r3, [r4, #12]
 8017346:	e7e3      	b.n	8017310 <__smakebuf_r+0xc>
 8017348:	4b0d      	ldr	r3, [pc, #52]	; (8017380 <__smakebuf_r+0x7c>)
 801734a:	62b3      	str	r3, [r6, #40]	; 0x28
 801734c:	89a3      	ldrh	r3, [r4, #12]
 801734e:	6020      	str	r0, [r4, #0]
 8017350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017354:	81a3      	strh	r3, [r4, #12]
 8017356:	9b00      	ldr	r3, [sp, #0]
 8017358:	6163      	str	r3, [r4, #20]
 801735a:	9b01      	ldr	r3, [sp, #4]
 801735c:	6120      	str	r0, [r4, #16]
 801735e:	b15b      	cbz	r3, 8017378 <__smakebuf_r+0x74>
 8017360:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017364:	4630      	mov	r0, r6
 8017366:	f000 f831 	bl	80173cc <_isatty_r>
 801736a:	b128      	cbz	r0, 8017378 <__smakebuf_r+0x74>
 801736c:	89a3      	ldrh	r3, [r4, #12]
 801736e:	f023 0303 	bic.w	r3, r3, #3
 8017372:	f043 0301 	orr.w	r3, r3, #1
 8017376:	81a3      	strh	r3, [r4, #12]
 8017378:	89a3      	ldrh	r3, [r4, #12]
 801737a:	431d      	orrs	r5, r3
 801737c:	81a5      	strh	r5, [r4, #12]
 801737e:	e7cd      	b.n	801731c <__smakebuf_r+0x18>
 8017380:	0801680d 	.word	0x0801680d

08017384 <_read_r>:
 8017384:	b538      	push	{r3, r4, r5, lr}
 8017386:	4c07      	ldr	r4, [pc, #28]	; (80173a4 <_read_r+0x20>)
 8017388:	4605      	mov	r5, r0
 801738a:	4608      	mov	r0, r1
 801738c:	4611      	mov	r1, r2
 801738e:	2200      	movs	r2, #0
 8017390:	6022      	str	r2, [r4, #0]
 8017392:	461a      	mov	r2, r3
 8017394:	f7ef fb74 	bl	8006a80 <_read>
 8017398:	1c43      	adds	r3, r0, #1
 801739a:	d102      	bne.n	80173a2 <_read_r+0x1e>
 801739c:	6823      	ldr	r3, [r4, #0]
 801739e:	b103      	cbz	r3, 80173a2 <_read_r+0x1e>
 80173a0:	602b      	str	r3, [r5, #0]
 80173a2:	bd38      	pop	{r3, r4, r5, pc}
 80173a4:	20007b40 	.word	0x20007b40

080173a8 <_fstat_r>:
 80173a8:	b538      	push	{r3, r4, r5, lr}
 80173aa:	4c07      	ldr	r4, [pc, #28]	; (80173c8 <_fstat_r+0x20>)
 80173ac:	2300      	movs	r3, #0
 80173ae:	4605      	mov	r5, r0
 80173b0:	4608      	mov	r0, r1
 80173b2:	4611      	mov	r1, r2
 80173b4:	6023      	str	r3, [r4, #0]
 80173b6:	f7ef fba8 	bl	8006b0a <_fstat>
 80173ba:	1c43      	adds	r3, r0, #1
 80173bc:	d102      	bne.n	80173c4 <_fstat_r+0x1c>
 80173be:	6823      	ldr	r3, [r4, #0]
 80173c0:	b103      	cbz	r3, 80173c4 <_fstat_r+0x1c>
 80173c2:	602b      	str	r3, [r5, #0]
 80173c4:	bd38      	pop	{r3, r4, r5, pc}
 80173c6:	bf00      	nop
 80173c8:	20007b40 	.word	0x20007b40

080173cc <_isatty_r>:
 80173cc:	b538      	push	{r3, r4, r5, lr}
 80173ce:	4c06      	ldr	r4, [pc, #24]	; (80173e8 <_isatty_r+0x1c>)
 80173d0:	2300      	movs	r3, #0
 80173d2:	4605      	mov	r5, r0
 80173d4:	4608      	mov	r0, r1
 80173d6:	6023      	str	r3, [r4, #0]
 80173d8:	f7ef fba7 	bl	8006b2a <_isatty>
 80173dc:	1c43      	adds	r3, r0, #1
 80173de:	d102      	bne.n	80173e6 <_isatty_r+0x1a>
 80173e0:	6823      	ldr	r3, [r4, #0]
 80173e2:	b103      	cbz	r3, 80173e6 <_isatty_r+0x1a>
 80173e4:	602b      	str	r3, [r5, #0]
 80173e6:	bd38      	pop	{r3, r4, r5, pc}
 80173e8:	20007b40 	.word	0x20007b40

080173ec <_init>:
 80173ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173ee:	bf00      	nop
 80173f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80173f2:	bc08      	pop	{r3}
 80173f4:	469e      	mov	lr, r3
 80173f6:	4770      	bx	lr

080173f8 <_fini>:
 80173f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173fa:	bf00      	nop
 80173fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80173fe:	bc08      	pop	{r3}
 8017400:	469e      	mov	lr, r3
 8017402:	4770      	bx	lr
