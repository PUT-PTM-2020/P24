
usart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08002f34  08002f34  00012f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003000  08003000  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08003000  08003000  00013000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003008  08003008  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003008  08003008  00013008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800300c  0800300c  0001300c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08003010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000590  20000024  08003034  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  08003034  000205b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000073a4  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001463  00000000  00000000  000273f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006b0  00000000  00000000  00028860  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000608  00000000  00000000  00028f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f9ae  00000000  00000000  00029518  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005c9e  00000000  00000000  00048ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c0aa6  00000000  00000000  0004eb64  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010f60a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a7c  00000000  00000000  0010f688  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002f1c 	.word	0x08002f1c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08002f1c 	.word	0x08002f1c

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <getbits>:
	}while(0);

	return 0;
}
uint8_t getbits(char* header)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b08b      	sub	sp, #44	; 0x2c
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	for(int j=0;j<3;j++)
 80004f4:	2300      	movs	r3, #0
 80004f6:	627b      	str	r3, [r7, #36]	; 0x24
 80004f8:	e017      	b.n	800052a <getbits+0x3e>
	{
		if(!!((header[0] << j) & 0x80))
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	461a      	mov	r2, r3
 8000500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000502:	fa02 f303 	lsl.w	r3, r2, r3
 8000506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050a:	2b00      	cmp	r3, #0
 800050c:	d005      	beq.n	800051a <getbits+0x2e>
			bitversion[j] = '1';
 800050e:	4a5c      	ldr	r2, [pc, #368]	; (8000680 <getbits+0x194>)
 8000510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000512:	4413      	add	r3, r2
 8000514:	2231      	movs	r2, #49	; 0x31
 8000516:	701a      	strb	r2, [r3, #0]
 8000518:	e004      	b.n	8000524 <getbits+0x38>
		else
			bitversion[j] = '0';
 800051a:	4a59      	ldr	r2, [pc, #356]	; (8000680 <getbits+0x194>)
 800051c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800051e:	4413      	add	r3, r2
 8000520:	2230      	movs	r2, #48	; 0x30
 8000522:	701a      	strb	r2, [r3, #0]
	for(int j=0;j<3;j++)
 8000524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000526:	3301      	adds	r3, #1
 8000528:	627b      	str	r3, [r7, #36]	; 0x24
 800052a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800052c:	2b02      	cmp	r3, #2
 800052e:	dde4      	ble.n	80004fa <getbits+0xe>
	}
	int i=0;
 8000530:	2300      	movs	r3, #0
 8000532:	623b      	str	r3, [r7, #32]
	for(int j=3;j<8;j++)
 8000534:	2303      	movs	r3, #3
 8000536:	61fb      	str	r3, [r7, #28]
 8000538:	e01a      	b.n	8000570 <getbits+0x84>
	{
		if(!!((header[0] << j) & 0x80))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	461a      	mov	r2, r3
 8000540:	69fb      	ldr	r3, [r7, #28]
 8000542:	fa02 f303 	lsl.w	r3, r2, r3
 8000546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800054a:	2b00      	cmp	r3, #0
 800054c:	d005      	beq.n	800055a <getbits+0x6e>
			bitoperation[i] = '1';
 800054e:	4a4d      	ldr	r2, [pc, #308]	; (8000684 <getbits+0x198>)
 8000550:	6a3b      	ldr	r3, [r7, #32]
 8000552:	4413      	add	r3, r2
 8000554:	2231      	movs	r2, #49	; 0x31
 8000556:	701a      	strb	r2, [r3, #0]
 8000558:	e004      	b.n	8000564 <getbits+0x78>
		else
			bitoperation[i] = '0';
 800055a:	4a4a      	ldr	r2, [pc, #296]	; (8000684 <getbits+0x198>)
 800055c:	6a3b      	ldr	r3, [r7, #32]
 800055e:	4413      	add	r3, r2
 8000560:	2230      	movs	r2, #48	; 0x30
 8000562:	701a      	strb	r2, [r3, #0]
		i++;
 8000564:	6a3b      	ldr	r3, [r7, #32]
 8000566:	3301      	adds	r3, #1
 8000568:	623b      	str	r3, [r7, #32]
	for(int j=3;j<8;j++)
 800056a:	69fb      	ldr	r3, [r7, #28]
 800056c:	3301      	adds	r3, #1
 800056e:	61fb      	str	r3, [r7, #28]
 8000570:	69fb      	ldr	r3, [r7, #28]
 8000572:	2b07      	cmp	r3, #7
 8000574:	dde1      	ble.n	800053a <getbits+0x4e>
	}
	for(int j=0;j<8;j++)
 8000576:	2300      	movs	r3, #0
 8000578:	61bb      	str	r3, [r7, #24]
 800057a:	e012      	b.n	80005a2 <getbits+0xb6>
	{
		if(!!((header[1] << j) & 0x80))
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	3301      	adds	r3, #1
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	461a      	mov	r2, r3
 8000584:	69bb      	ldr	r3, [r7, #24]
 8000586:	fa02 f303 	lsl.w	r3, r2, r3
 800058a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800058e:	2b00      	cmp	r3, #0
 8000590:	d004      	beq.n	800059c <getbits+0xb0>
			bitid[j] = '1';
 8000592:	4a3d      	ldr	r2, [pc, #244]	; (8000688 <getbits+0x19c>)
 8000594:	69bb      	ldr	r3, [r7, #24]
 8000596:	4413      	add	r3, r2
 8000598:	2231      	movs	r2, #49	; 0x31
 800059a:	701a      	strb	r2, [r3, #0]
	for(int j=0;j<8;j++)
 800059c:	69bb      	ldr	r3, [r7, #24]
 800059e:	3301      	adds	r3, #1
 80005a0:	61bb      	str	r3, [r7, #24]
 80005a2:	69bb      	ldr	r3, [r7, #24]
 80005a4:	2b07      	cmp	r3, #7
 80005a6:	dde9      	ble.n	800057c <getbits+0x90>
	}
	for(int j=0;j<4;j++)
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	e018      	b.n	80005e0 <getbits+0xf4>
	{
		if(!!((header[2] << j) & 0x80))
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	3302      	adds	r3, #2
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	461a      	mov	r2, r3
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	fa02 f303 	lsl.w	r3, r2, r3
 80005bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d005      	beq.n	80005d0 <getbits+0xe4>
			bitanswer[j] = '1';
 80005c4:	4a31      	ldr	r2, [pc, #196]	; (800068c <getbits+0x1a0>)
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	4413      	add	r3, r2
 80005ca:	2231      	movs	r2, #49	; 0x31
 80005cc:	701a      	strb	r2, [r3, #0]
 80005ce:	e004      	b.n	80005da <getbits+0xee>
		else
			bitanswer[j] = '0';
 80005d0:	4a2e      	ldr	r2, [pc, #184]	; (800068c <getbits+0x1a0>)
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	4413      	add	r3, r2
 80005d6:	2230      	movs	r2, #48	; 0x30
 80005d8:	701a      	strb	r2, [r3, #0]
	for(int j=0;j<4;j++)
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	3301      	adds	r3, #1
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	2b03      	cmp	r3, #3
 80005e4:	dde3      	ble.n	80005ae <getbits+0xc2>
	}
	i = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	623b      	str	r3, [r7, #32]
	for(int j=4;j<8;j++)
 80005ea:	2304      	movs	r3, #4
 80005ec:	613b      	str	r3, [r7, #16]
 80005ee:	e01b      	b.n	8000628 <getbits+0x13c>
	{
		if(!!((header[2] << j) & 0x80))
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	3302      	adds	r3, #2
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	461a      	mov	r2, r3
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	fa02 f303 	lsl.w	r3, r2, r3
 80005fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000602:	2b00      	cmp	r3, #0
 8000604:	d005      	beq.n	8000612 <getbits+0x126>
			bitmsg_size[i] = '1';
 8000606:	4a22      	ldr	r2, [pc, #136]	; (8000690 <getbits+0x1a4>)
 8000608:	6a3b      	ldr	r3, [r7, #32]
 800060a:	4413      	add	r3, r2
 800060c:	2231      	movs	r2, #49	; 0x31
 800060e:	701a      	strb	r2, [r3, #0]
 8000610:	e004      	b.n	800061c <getbits+0x130>
		else
			bitmsg_size[i] = '0';
 8000612:	4a1f      	ldr	r2, [pc, #124]	; (8000690 <getbits+0x1a4>)
 8000614:	6a3b      	ldr	r3, [r7, #32]
 8000616:	4413      	add	r3, r2
 8000618:	2230      	movs	r2, #48	; 0x30
 800061a:	701a      	strb	r2, [r3, #0]
		i++;
 800061c:	6a3b      	ldr	r3, [r7, #32]
 800061e:	3301      	adds	r3, #1
 8000620:	623b      	str	r3, [r7, #32]
	for(int j=4;j<8;j++)
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	3301      	adds	r3, #1
 8000626:	613b      	str	r3, [r7, #16]
 8000628:	693b      	ldr	r3, [r7, #16]
 800062a:	2b07      	cmp	r3, #7
 800062c:	dde0      	ble.n	80005f0 <getbits+0x104>
	}
	for(int j=0;j<6;j++)
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	e01b      	b.n	800066c <getbits+0x180>
	{
		if(!!((header[3] << j) & 0x80))
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	3303      	adds	r3, #3
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	461a      	mov	r2, r3
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	fa02 f303 	lsl.w	r3, r2, r3
 8000642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000646:	2b00      	cmp	r3, #0
 8000648:	d005      	beq.n	8000656 <getbits+0x16a>
			bitmsg_size[i] = '1';
 800064a:	4a11      	ldr	r2, [pc, #68]	; (8000690 <getbits+0x1a4>)
 800064c:	6a3b      	ldr	r3, [r7, #32]
 800064e:	4413      	add	r3, r2
 8000650:	2231      	movs	r2, #49	; 0x31
 8000652:	701a      	strb	r2, [r3, #0]
 8000654:	e004      	b.n	8000660 <getbits+0x174>
		else
			bitmsg_size[i] = '0';
 8000656:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <getbits+0x1a4>)
 8000658:	6a3b      	ldr	r3, [r7, #32]
 800065a:	4413      	add	r3, r2
 800065c:	2230      	movs	r2, #48	; 0x30
 800065e:	701a      	strb	r2, [r3, #0]
		i++;
 8000660:	6a3b      	ldr	r3, [r7, #32]
 8000662:	3301      	adds	r3, #1
 8000664:	623b      	str	r3, [r7, #32]
	for(int j=0;j<6;j++)
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	3301      	adds	r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	2b05      	cmp	r3, #5
 8000670:	dde0      	ble.n	8000634 <getbits+0x148>
	}

}
 8000672:	bf00      	nop
 8000674:	4618      	mov	r0, r3
 8000676:	372c      	adds	r7, #44	; 0x2c
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	2000058c 	.word	0x2000058c
 8000684:	20000590 	.word	0x20000590
 8000688:	2000051c 	.word	0x2000051c
 800068c:	20000524 	.word	0x20000524
 8000690:	200005a4 	.word	0x200005a4

08000694 <prepare_response>:
	}


}
void prepare_response()
{
 8000694:	b480      	push	{r7}
 8000696:	b08b      	sub	sp, #44	; 0x2c
 8000698:	af00      	add	r7, sp, #0
	char firstbyte=0;
 800069a:	2300      	movs	r3, #0
 800069c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	char secondbyte=0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	char thirdbyte=0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	char fourthbyte=0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	for(int i=0;i<3;i++)
 80006b2:	2300      	movs	r3, #0
 80006b4:	623b      	str	r3, [r7, #32]
 80006b6:	e015      	b.n	80006e4 <prepare_response+0x50>
	{
		if( bitversion[i]=='1') firstbyte |= 1 << (7-i);
 80006b8:	4a6e      	ldr	r2, [pc, #440]	; (8000874 <prepare_response+0x1e0>)
 80006ba:	6a3b      	ldr	r3, [r7, #32]
 80006bc:	4413      	add	r3, r2
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b31      	cmp	r3, #49	; 0x31
 80006c2:	d10c      	bne.n	80006de <prepare_response+0x4a>
 80006c4:	6a3b      	ldr	r3, [r7, #32]
 80006c6:	f1c3 0307 	rsb	r3, r3, #7
 80006ca:	2201      	movs	r2, #1
 80006cc:	fa02 f303 	lsl.w	r3, r2, r3
 80006d0:	b25a      	sxtb	r2, r3
 80006d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80006d6:	4313      	orrs	r3, r2
 80006d8:	b25b      	sxtb	r3, r3
 80006da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(int i=0;i<3;i++)
 80006de:	6a3b      	ldr	r3, [r7, #32]
 80006e0:	3301      	adds	r3, #1
 80006e2:	623b      	str	r3, [r7, #32]
 80006e4:	6a3b      	ldr	r3, [r7, #32]
 80006e6:	2b02      	cmp	r3, #2
 80006e8:	dde6      	ble.n	80006b8 <prepare_response+0x24>
	}
	int i=0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
	for(int j=3;j<8;j++)
 80006ee:	2303      	movs	r3, #3
 80006f0:	61bb      	str	r3, [r7, #24]
 80006f2:	e018      	b.n	8000726 <prepare_response+0x92>
	{
		if(bitoperation[i]=='1') firstbyte |= 1 << (7-j);
 80006f4:	4a60      	ldr	r2, [pc, #384]	; (8000878 <prepare_response+0x1e4>)
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	4413      	add	r3, r2
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b31      	cmp	r3, #49	; 0x31
 80006fe:	d10c      	bne.n	800071a <prepare_response+0x86>
 8000700:	69bb      	ldr	r3, [r7, #24]
 8000702:	f1c3 0307 	rsb	r3, r3, #7
 8000706:	2201      	movs	r2, #1
 8000708:	fa02 f303 	lsl.w	r3, r2, r3
 800070c:	b25a      	sxtb	r2, r3
 800070e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000712:	4313      	orrs	r3, r2
 8000714:	b25b      	sxtb	r3, r3
 8000716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		i++;
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	3301      	adds	r3, #1
 800071e:	61fb      	str	r3, [r7, #28]
	for(int j=3;j<8;j++)
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	3301      	adds	r3, #1
 8000724:	61bb      	str	r3, [r7, #24]
 8000726:	69bb      	ldr	r3, [r7, #24]
 8000728:	2b07      	cmp	r3, #7
 800072a:	dde3      	ble.n	80006f4 <prepare_response+0x60>
	}
	for(int j=0;j<8;j++)
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	e015      	b.n	800075e <prepare_response+0xca>
		if(bitid[j] == '1') secondbyte |= 1 << (7-j);
 8000732:	4a52      	ldr	r2, [pc, #328]	; (800087c <prepare_response+0x1e8>)
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	4413      	add	r3, r2
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b31      	cmp	r3, #49	; 0x31
 800073c:	d10c      	bne.n	8000758 <prepare_response+0xc4>
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	f1c3 0307 	rsb	r3, r3, #7
 8000744:	2201      	movs	r2, #1
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	b25a      	sxtb	r2, r3
 800074c:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8000750:	4313      	orrs	r3, r2
 8000752:	b25b      	sxtb	r3, r3
 8000754:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	for(int j=0;j<8;j++)
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	3301      	adds	r3, #1
 800075c:	617b      	str	r3, [r7, #20]
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	2b07      	cmp	r3, #7
 8000762:	dde6      	ble.n	8000732 <prepare_response+0x9e>

	for(int j=0;j<4;j++)
 8000764:	2300      	movs	r3, #0
 8000766:	613b      	str	r3, [r7, #16]
 8000768:	e015      	b.n	8000796 <prepare_response+0x102>
		if(bitanswer[j] == '1') thirdbyte |= 1 << (7-j);
 800076a:	4a45      	ldr	r2, [pc, #276]	; (8000880 <prepare_response+0x1ec>)
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	4413      	add	r3, r2
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b31      	cmp	r3, #49	; 0x31
 8000774:	d10c      	bne.n	8000790 <prepare_response+0xfc>
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	f1c3 0307 	rsb	r3, r3, #7
 800077c:	2201      	movs	r2, #1
 800077e:	fa02 f303 	lsl.w	r3, r2, r3
 8000782:	b25a      	sxtb	r2, r3
 8000784:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8000788:	4313      	orrs	r3, r2
 800078a:	b25b      	sxtb	r3, r3
 800078c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	for(int j=0;j<4;j++)
 8000790:	693b      	ldr	r3, [r7, #16]
 8000792:	3301      	adds	r3, #1
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	693b      	ldr	r3, [r7, #16]
 8000798:	2b03      	cmp	r3, #3
 800079a:	dde6      	ble.n	800076a <prepare_response+0xd6>

	i = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]

	for(int j=4;j<8;j++)
 80007a0:	2304      	movs	r3, #4
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	e018      	b.n	80007d8 <prepare_response+0x144>
	{
		if(bitmsg_size[i] == '1') thirdbyte |= 1 << (7-j);
 80007a6:	4a37      	ldr	r2, [pc, #220]	; (8000884 <prepare_response+0x1f0>)
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	4413      	add	r3, r2
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b31      	cmp	r3, #49	; 0x31
 80007b0:	d10c      	bne.n	80007cc <prepare_response+0x138>
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	f1c3 0307 	rsb	r3, r3, #7
 80007b8:	2201      	movs	r2, #1
 80007ba:	fa02 f303 	lsl.w	r3, r2, r3
 80007be:	b25a      	sxtb	r2, r3
 80007c0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80007c4:	4313      	orrs	r3, r2
 80007c6:	b25b      	sxtb	r3, r3
 80007c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			i++;
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	3301      	adds	r3, #1
 80007d0:	61fb      	str	r3, [r7, #28]
	for(int j=4;j<8;j++)
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	3301      	adds	r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	2b07      	cmp	r3, #7
 80007dc:	dde3      	ble.n	80007a6 <prepare_response+0x112>
	}
	for(int j=0;j<6;j++)
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	e018      	b.n	8000816 <prepare_response+0x182>
	{
		if(bitmsg_size[i] == '1') fourthbyte |=1 << (7-j);
 80007e4:	4a27      	ldr	r2, [pc, #156]	; (8000884 <prepare_response+0x1f0>)
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	4413      	add	r3, r2
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b31      	cmp	r3, #49	; 0x31
 80007ee:	d10c      	bne.n	800080a <prepare_response+0x176>
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	f1c3 0307 	rsb	r3, r3, #7
 80007f6:	2201      	movs	r2, #1
 80007f8:	fa02 f303 	lsl.w	r3, r2, r3
 80007fc:	b25a      	sxtb	r2, r3
 80007fe:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8000802:	4313      	orrs	r3, r2
 8000804:	b25b      	sxtb	r3, r3
 8000806:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		i++;
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	3301      	adds	r3, #1
 800080e:	61fb      	str	r3, [r7, #28]
	for(int j=0;j<6;j++)
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	3301      	adds	r3, #1
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	2b05      	cmp	r3, #5
 800081a:	dde3      	ble.n	80007e4 <prepare_response+0x150>
	}
	for(int j=6;j<8;j++)
 800081c:	2306      	movs	r3, #6
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	e00f      	b.n	8000842 <prepare_response+0x1ae>
	{
		fourthbyte |= 1 << (7-j);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f1c3 0307 	rsb	r3, r3, #7
 8000828:	2201      	movs	r2, #1
 800082a:	fa02 f303 	lsl.w	r3, r2, r3
 800082e:	b25a      	sxtb	r2, r3
 8000830:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 8000834:	4313      	orrs	r3, r2
 8000836:	b25b      	sxtb	r3, r3
 8000838:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	for(int j=6;j<8;j++)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3301      	adds	r3, #1
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b07      	cmp	r3, #7
 8000846:	ddec      	ble.n	8000822 <prepare_response+0x18e>
	}
	response[0] = firstbyte;
 8000848:	4a0f      	ldr	r2, [pc, #60]	; (8000888 <prepare_response+0x1f4>)
 800084a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800084e:	7013      	strb	r3, [r2, #0]
	response[1] = secondbyte;
 8000850:	4a0d      	ldr	r2, [pc, #52]	; (8000888 <prepare_response+0x1f4>)
 8000852:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000856:	7053      	strb	r3, [r2, #1]
	response[2] = thirdbyte;
 8000858:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <prepare_response+0x1f4>)
 800085a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800085e:	7093      	strb	r3, [r2, #2]
	response[3] = fourthbyte;
 8000860:	4a09      	ldr	r2, [pc, #36]	; (8000888 <prepare_response+0x1f4>)
 8000862:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000866:	70d3      	strb	r3, [r2, #3]
}
 8000868:	bf00      	nop
 800086a:	372c      	adds	r7, #44	; 0x2c
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	2000058c 	.word	0x2000058c
 8000878:	20000590 	.word	0x20000590
 800087c:	2000051c 	.word	0x2000051c
 8000880:	20000524 	.word	0x20000524
 8000884:	200005a4 	.word	0x200005a4
 8000888:	20000040 	.word	0x20000040

0800088c <check_size>:
int check_size()
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
	for(int i=0;i<15;i++)
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	e00b      	b.n	80008b0 <check_size+0x24>
		if(msg_buffer[i]=='\0')
 8000898:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <check_size+0x38>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4413      	add	r3, r2
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d101      	bne.n	80008aa <check_size+0x1e>
			return 1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	e006      	b.n	80008b8 <check_size+0x2c>
	for(int i=0;i<15;i++)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3301      	adds	r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b0e      	cmp	r3, #14
 80008b4:	ddf0      	ble.n	8000898 <check_size+0xc>
	return 0;
 80008b6:	2300      	movs	r3, #0
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	200000e8 	.word	0x200000e8

080008c8 <process_data>:
uint16_t process_data()
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0

		memcpy(header,msg_buffer+23,4);
 80008ce:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <process_data+0x7c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	461a      	mov	r2, r3
 80008d4:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <process_data+0x80>)
 80008d6:	601a      	str	r2, [r3, #0]
		getbits(header);
 80008d8:	481b      	ldr	r0, [pc, #108]	; (8000948 <process_data+0x80>)
 80008da:	f7ff fe07 	bl	80004ec <getbits>
		//if(!check_header())
		//{

			prepare_response();
 80008de:	f7ff fed9 	bl	8000694 <prepare_response>
			memset(esp_recv_buffer, '\0',100);
 80008e2:	2264      	movs	r2, #100	; 0x64
 80008e4:	2100      	movs	r1, #0
 80008e6:	4819      	ldr	r0, [pc, #100]	; (800094c <process_data+0x84>)
 80008e8:	f002 fb10 	bl	8002f0c <memset>
			HAL_UART_Transmit(&huart3, send_command,strlen(send_command),100);
 80008ec:	4818      	ldr	r0, [pc, #96]	; (8000950 <process_data+0x88>)
 80008ee:	f7ff fc75 	bl	80001dc <strlen>
 80008f2:	4603      	mov	r3, r0
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	2364      	movs	r3, #100	; 0x64
 80008f8:	4915      	ldr	r1, [pc, #84]	; (8000950 <process_data+0x88>)
 80008fa:	4816      	ldr	r0, [pc, #88]	; (8000954 <process_data+0x8c>)
 80008fc:	f001 fb9d 	bl	800203a <HAL_UART_Transmit>
			memset(esp_recv_buffer, '\0',100);
 8000900:	2264      	movs	r2, #100	; 0x64
 8000902:	2100      	movs	r1, #0
 8000904:	4811      	ldr	r0, [pc, #68]	; (800094c <process_data+0x84>)
 8000906:	f002 fb01 	bl	8002f0c <memset>
			HAL_Delay(200);
 800090a:	20c8      	movs	r0, #200	; 0xc8
 800090c:	f000 fbc2 	bl	8001094 <HAL_Delay>
			HAL_UART_Transmit(&huart3, response, response_size,100);
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <process_data+0x90>)
 8000912:	881a      	ldrh	r2, [r3, #0]
 8000914:	2364      	movs	r3, #100	; 0x64
 8000916:	4911      	ldr	r1, [pc, #68]	; (800095c <process_data+0x94>)
 8000918:	480e      	ldr	r0, [pc, #56]	; (8000954 <process_data+0x8c>)
 800091a:	f001 fb8e 	bl	800203a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, "\r\n", 2,100);
 800091e:	2364      	movs	r3, #100	; 0x64
 8000920:	2202      	movs	r2, #2
 8000922:	490f      	ldr	r1, [pc, #60]	; (8000960 <process_data+0x98>)
 8000924:	480b      	ldr	r0, [pc, #44]	; (8000954 <process_data+0x8c>)
 8000926:	f001 fb88 	bl	800203a <HAL_UART_Transmit>
			int x =0;
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
		//else
		//{

		//}

			memset(msg_buffer, '\0',30);
 800092e:	221e      	movs	r2, #30
 8000930:	2100      	movs	r1, #0
 8000932:	480c      	ldr	r0, [pc, #48]	; (8000964 <process_data+0x9c>)
 8000934:	f002 faea 	bl	8002f0c <memset>

}
 8000938:	bf00      	nop
 800093a:	4618      	mov	r0, r3
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200000ff 	.word	0x200000ff
 8000948:	200005a0 	.word	0x200005a0
 800094c:	20000528 	.word	0x20000528
 8000950:	20000004 	.word	0x20000004
 8000954:	200000a8 	.word	0x200000a8
 8000958:	20000000 	.word	0x20000000
 800095c:	20000040 	.word	0x20000040
 8000960:	08002f50 	.word	0x08002f50
 8000964:	200000e8 	.word	0x200000e8

08000968 <configure_esp>:
uint8_t configure_esp()
 {
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0

 	HAL_Delay(1000);
 800096c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000970:	f000 fb90 	bl	8001094 <HAL_Delay>
 	if(!send_at_comm( "AT+CWMODE=1\r\n",2000))
 8000974:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000978:	4820      	ldr	r0, [pc, #128]	; (80009fc <configure_esp+0x94>)
 800097a:	f000 f849 	bl	8000a10 <send_at_comm>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d101      	bne.n	8000988 <configure_esp+0x20>
 		return 0;
 8000984:	2300      	movs	r3, #0
 8000986:	e037      	b.n	80009f8 <configure_esp+0x90>
 	HAL_Delay(100);
 8000988:	2064      	movs	r0, #100	; 0x64
 800098a:	f000 fb83 	bl	8001094 <HAL_Delay>
 	if(!send_at_comm( "AT+CIPMUX=1\r\n",2000))
 800098e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000992:	481b      	ldr	r0, [pc, #108]	; (8000a00 <configure_esp+0x98>)
 8000994:	f000 f83c 	bl	8000a10 <send_at_comm>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d101      	bne.n	80009a2 <configure_esp+0x3a>
 		return 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	e02a      	b.n	80009f8 <configure_esp+0x90>
 	HAL_Delay(100);
 80009a2:	2064      	movs	r0, #100	; 0x64
 80009a4:	f000 fb76 	bl	8001094 <HAL_Delay>
 	if(!send_at_comm( "AT+CIPSERVER=1,80\r\n",2000))
 80009a8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80009ac:	4815      	ldr	r0, [pc, #84]	; (8000a04 <configure_esp+0x9c>)
 80009ae:	f000 f82f 	bl	8000a10 <send_at_comm>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d101      	bne.n	80009bc <configure_esp+0x54>
 		return 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	e01d      	b.n	80009f8 <configure_esp+0x90>
 	HAL_Delay(100);
 80009bc:	2064      	movs	r0, #100	; 0x64
 80009be:	f000 fb69 	bl	8001094 <HAL_Delay>
 	if(!send_at_comm("AT+CWJAP=\"HUAWEI-2.4G-zJ52\",\"q95R2T9c\"",5000))
 80009c2:	f241 3188 	movw	r1, #5000	; 0x1388
 80009c6:	4810      	ldr	r0, [pc, #64]	; (8000a08 <configure_esp+0xa0>)
 80009c8:	f000 f822 	bl	8000a10 <send_at_comm>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d101      	bne.n	80009d6 <configure_esp+0x6e>
 	 	 	return 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	e010      	b.n	80009f8 <configure_esp+0x90>
 	 	HAL_Delay(100);
 80009d6:	2064      	movs	r0, #100	; 0x64
 80009d8:	f000 fb5c 	bl	8001094 <HAL_Delay>
 	 	if(!send_at_comm( "AT+CIPSTATUS\r\n",5000))
 80009dc:	f241 3188 	movw	r1, #5000	; 0x1388
 80009e0:	480a      	ldr	r0, [pc, #40]	; (8000a0c <configure_esp+0xa4>)
 80009e2:	f000 f815 	bl	8000a10 <send_at_comm>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d101      	bne.n	80009f0 <configure_esp+0x88>
 	 	 		return 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	e003      	b.n	80009f8 <configure_esp+0x90>
 	 	 	HAL_Delay(100);
 80009f0:	2064      	movs	r0, #100	; 0x64
 80009f2:	f000 fb4f 	bl	8001094 <HAL_Delay>

 	return 1;
 80009f6:	2301      	movs	r3, #1
 }
 80009f8:	4618      	mov	r0, r3
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	08002f54 	.word	0x08002f54
 8000a00:	08002f64 	.word	0x08002f64
 8000a04:	08002f74 	.word	0x08002f74
 8000a08:	08002f88 	.word	0x08002f88
 8000a0c:	08002fb0 	.word	0x08002fb0

08000a10 <send_at_comm>:
uint8_t send_at_comm( char * at_command, uint16_t timeout)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b09c      	sub	sp, #112	; 0x70
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	460b      	mov	r3, r1
 8000a1a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart3, at_command, strlen(at_command),1000);
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f7ff fbdd 	bl	80001dc <strlen>
 8000a22:	4603      	mov	r3, r0
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	4844      	ldr	r0, [pc, #272]	; (8000b40 <send_at_comm+0x130>)
 8000a2e:	f001 fb04 	bl	800203a <HAL_UART_Transmit>
	if(timeout>2000)
 8000a32:	887b      	ldrh	r3, [r7, #2]
 8000a34:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000a38:	d905      	bls.n	8000a46 <send_at_comm+0x36>
	{
		HAL_Delay(15000);
 8000a3a:	f643 2098 	movw	r0, #15000	; 0x3a98
 8000a3e:	f000 fb29 	bl	8001094 <HAL_Delay>
		return 1;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e078      	b.n	8000b38 <send_at_comm+0x128>
	}
	HAL_UART_Receive(&huart3, &esp_recv_buffer, 100,timeout);
 8000a46:	887b      	ldrh	r3, [r7, #2]
 8000a48:	2264      	movs	r2, #100	; 0x64
 8000a4a:	493e      	ldr	r1, [pc, #248]	; (8000b44 <send_at_comm+0x134>)
 8000a4c:	483c      	ldr	r0, [pc, #240]	; (8000b40 <send_at_comm+0x130>)
 8000a4e:	f001 fb8d 	bl	800216c <HAL_UART_Receive>

	char line[100];
	memset(line, '\0',50);
 8000a52:	f107 0308 	add.w	r3, r7, #8
 8000a56:	2232      	movs	r2, #50	; 0x32
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f002 fa56 	bl	8002f0c <memset>
	uint16_t j=0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	for(uint16_t i=0;i<1024;i++)
 8000a66:	2300      	movs	r3, #0
 8000a68:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8000a6c:	e05e      	b.n	8000b2c <send_at_comm+0x11c>
	{
		line[j]=esp_recv_buffer[i];
 8000a6e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8000a72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000a76:	4933      	ldr	r1, [pc, #204]	; (8000b44 <send_at_comm+0x134>)
 8000a78:	5c8a      	ldrb	r2, [r1, r2]
 8000a7a:	b2d2      	uxtb	r2, r2
 8000a7c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000a80:	440b      	add	r3, r1
 8000a82:	f803 2c68 	strb.w	r2, [r3, #-104]

		if(!strcmp(line,"OK\r\n")||!strcmp(line,"no change\r\n")||!strcmp(line,"STATUS:2\r\n"))
 8000a86:	f107 0308 	add.w	r3, r7, #8
 8000a8a:	492f      	ldr	r1, [pc, #188]	; (8000b48 <send_at_comm+0x138>)
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fb9b 	bl	80001c8 <strcmp>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d011      	beq.n	8000abc <send_at_comm+0xac>
 8000a98:	f107 0308 	add.w	r3, r7, #8
 8000a9c:	492b      	ldr	r1, [pc, #172]	; (8000b4c <send_at_comm+0x13c>)
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fb92 	bl	80001c8 <strcmp>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d008      	beq.n	8000abc <send_at_comm+0xac>
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	4928      	ldr	r1, [pc, #160]	; (8000b50 <send_at_comm+0x140>)
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fb89 	bl	80001c8 <strcmp>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d10e      	bne.n	8000ada <send_at_comm+0xca>
		{
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000abc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac0:	4824      	ldr	r0, [pc, #144]	; (8000b54 <send_at_comm+0x144>)
 8000ac2:	f000 fdf0 	bl	80016a6 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8000ac6:	20c8      	movs	r0, #200	; 0xc8
 8000ac8:	f000 fae4 	bl	8001094 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000acc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ad0:	4820      	ldr	r0, [pc, #128]	; (8000b54 <send_at_comm+0x144>)
 8000ad2:	f000 fde8 	bl	80016a6 <HAL_GPIO_TogglePin>
			return 1;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e02e      	b.n	8000b38 <send_at_comm+0x128>
		}

		if(!strcmp(line,"ERROR\r\n"))
 8000ada:	f107 0308 	add.w	r3, r7, #8
 8000ade:	491e      	ldr	r1, [pc, #120]	; (8000b58 <send_at_comm+0x148>)
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fb71 	bl	80001c8 <strcmp>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d101      	bne.n	8000af0 <send_at_comm+0xe0>
			return 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	e023      	b.n	8000b38 <send_at_comm+0x128>

		if(line[j]=='\n')
 8000af0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000af4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000af8:	4413      	add	r3, r2
 8000afa:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000afe:	2b0a      	cmp	r3, #10
 8000b00:	d10a      	bne.n	8000b18 <send_at_comm+0x108>
		{
			j=0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
			memset(line, '\0',50);
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	2232      	movs	r2, #50	; 0x32
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f002 f9fb 	bl	8002f0c <memset>
 8000b16:	e004      	b.n	8000b22 <send_at_comm+0x112>
		}

		else
			j++;
 8000b18:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	for(uint16_t i=0;i<1024;i++)
 8000b22:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8000b26:	3301      	adds	r3, #1
 8000b28:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8000b2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8000b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b34:	d39b      	bcc.n	8000a6e <send_at_comm+0x5e>
	}
	return 0;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3770      	adds	r7, #112	; 0x70
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200000a8 	.word	0x200000a8
 8000b44:	20000528 	.word	0x20000528
 8000b48:	08002fc0 	.word	0x08002fc0
 8000b4c:	08002fc8 	.word	0x08002fc8
 8000b50:	08002fd4 	.word	0x08002fd4
 8000b54:	40020c00 	.word	0x40020c00
 8000b58:	08002fe0 	.word	0x08002fe0

08000b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b62:	f000 fa25 	bl	8000fb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b66:	f000 f82f 	bl	8000bc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6a:	f000 f8c1 	bl	8000cf0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b6e:	f000 f895 	bl	8000c9c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  if(configure_esp())
 8000b72:	f7ff fef9 	bl	8000968 <configure_esp>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d005      	beq.n	8000b88 <main+0x2c>
	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000b7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b80:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <main+0x5c>)
 8000b82:	f000 fd90 	bl	80016a6 <HAL_GPIO_TogglePin>
 8000b86:	e004      	b.n	8000b92 <main+0x36>
 else
	 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000b88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b8c:	480a      	ldr	r0, [pc, #40]	; (8000bb8 <main+0x5c>)
 8000b8e:	f000 fd8a 	bl	80016a6 <HAL_GPIO_TogglePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int x=0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
  while (1)
  {

	  HAL_UART_Receive(&huart3, msg_buffer, msg_buffer_size,200);
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <main+0x60>)
 8000b98:	881a      	ldrh	r2, [r3, #0]
 8000b9a:	23c8      	movs	r3, #200	; 0xc8
 8000b9c:	4908      	ldr	r1, [pc, #32]	; (8000bc0 <main+0x64>)
 8000b9e:	4809      	ldr	r0, [pc, #36]	; (8000bc4 <main+0x68>)
 8000ba0:	f001 fae4 	bl	800216c <HAL_UART_Receive>
	  x =check_size();
 8000ba4:	f7ff fe72 	bl	800088c <check_size>
 8000ba8:	6078      	str	r0, [r7, #4]
	  if(!x)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d1f2      	bne.n	8000b96 <main+0x3a>
		  process_data();
 8000bb0:	f7ff fe8a 	bl	80008c8 <process_data>
	  HAL_UART_Receive(&huart3, msg_buffer, msg_buffer_size,200);
 8000bb4:	e7ef      	b.n	8000b96 <main+0x3a>
 8000bb6:	bf00      	nop
 8000bb8:	40020c00 	.word	0x40020c00
 8000bbc:	20000016 	.word	0x20000016
 8000bc0:	200000e8 	.word	0x200000e8
 8000bc4:	200000a8 	.word	0x200000a8

08000bc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b094      	sub	sp, #80	; 0x50
 8000bcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bce:	f107 0320 	add.w	r3, r7, #32
 8000bd2:	2230      	movs	r2, #48	; 0x30
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f002 f998 	bl	8002f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bec:	2300      	movs	r3, #0
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	4b28      	ldr	r3, [pc, #160]	; (8000c94 <SystemClock_Config+0xcc>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	4a27      	ldr	r2, [pc, #156]	; (8000c94 <SystemClock_Config+0xcc>)
 8000bf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfc:	4b25      	ldr	r3, [pc, #148]	; (8000c94 <SystemClock_Config+0xcc>)
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c08:	2300      	movs	r3, #0
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	4b22      	ldr	r3, [pc, #136]	; (8000c98 <SystemClock_Config+0xd0>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a21      	ldr	r2, [pc, #132]	; (8000c98 <SystemClock_Config+0xd0>)
 8000c12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <SystemClock_Config+0xd0>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c24:	2301      	movs	r3, #1
 8000c26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c38:	2304      	movs	r3, #4
 8000c3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c3c:	23a8      	movs	r3, #168	; 0xa8
 8000c3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c40:	2302      	movs	r3, #2
 8000c42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c44:	2304      	movs	r3, #4
 8000c46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c48:	f107 0320 	add.w	r3, r7, #32
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f000 fd45 	bl	80016dc <HAL_RCC_OscConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c58:	f000 f8b2 	bl	8000dc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c60:	2302      	movs	r3, #2
 8000c62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c74:	f107 030c 	add.w	r3, r7, #12
 8000c78:	2105      	movs	r1, #5
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 ff9e 	bl	8001bbc <HAL_RCC_ClockConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c86:	f000 f89b 	bl	8000dc0 <Error_Handler>
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	3750      	adds	r7, #80	; 0x50
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40007000 	.word	0x40007000

08000c9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_USART3_UART_Init+0x4c>)
 8000ca2:	4a12      	ldr	r2, [pc, #72]	; (8000cec <MX_USART3_UART_Init+0x50>)
 8000ca4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <MX_USART3_UART_Init+0x4c>)
 8000ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_USART3_UART_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_USART3_UART_Init+0x4c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <MX_USART3_UART_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_USART3_UART_Init+0x4c>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <MX_USART3_UART_Init+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_USART3_UART_Init+0x4c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_USART3_UART_Init+0x4c>)
 8000cd4:	f001 f964 	bl	8001fa0 <HAL_UART_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cde:	f000 f86f 	bl	8000dc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200000a8 	.word	0x200000a8
 8000cec:	40004800 	.word	0x40004800

08000cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf6:	f107 030c 	add.w	r3, r7, #12
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
 8000d04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <MX_GPIO_Init+0xc4>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a29      	ldr	r2, [pc, #164]	; (8000db4 <MX_GPIO_Init+0xc4>)
 8000d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b27      	ldr	r3, [pc, #156]	; (8000db4 <MX_GPIO_Init+0xc4>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <MX_GPIO_Init+0xc4>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a22      	ldr	r2, [pc, #136]	; (8000db4 <MX_GPIO_Init+0xc4>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <MX_GPIO_Init+0xc4>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <MX_GPIO_Init+0xc4>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a1b      	ldr	r2, [pc, #108]	; (8000db4 <MX_GPIO_Init+0xc4>)
 8000d48:	f043 0308 	orr.w	r3, r3, #8
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <MX_GPIO_Init+0xc4>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0308 	and.w	r3, r3, #8
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000d60:	4815      	ldr	r0, [pc, #84]	; (8000db8 <MX_GPIO_Init+0xc8>)
 8000d62:	f000 fc87 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_SET);
 8000d66:	2201      	movs	r2, #1
 8000d68:	2118      	movs	r1, #24
 8000d6a:	4814      	ldr	r0, [pc, #80]	; (8000dbc <MX_GPIO_Init+0xcc>)
 8000d6c:	f000 fc82 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d70:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d76:	2301      	movs	r3, #1
 8000d78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	4619      	mov	r1, r3
 8000d88:	480b      	ldr	r0, [pc, #44]	; (8000db8 <MX_GPIO_Init+0xc8>)
 8000d8a:	f000 fad9 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000d8e:	2318      	movs	r3, #24
 8000d90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d92:	2301      	movs	r3, #1
 8000d94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	4619      	mov	r1, r3
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <MX_GPIO_Init+0xcc>)
 8000da6:	f000 facb 	bl	8001340 <HAL_GPIO_Init>

}
 8000daa:	bf00      	nop
 8000dac:	3720      	adds	r7, #32
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020c00 	.word	0x40020c00
 8000dbc:	40020400 	.word	0x40020400

08000dc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
	...

08000dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <HAL_MspInit+0x4c>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	4a0f      	ldr	r2, [pc, #60]	; (8000e1c <HAL_MspInit+0x4c>)
 8000de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de4:	6453      	str	r3, [r2, #68]	; 0x44
 8000de6:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <HAL_MspInit+0x4c>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	603b      	str	r3, [r7, #0]
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <HAL_MspInit+0x4c>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <HAL_MspInit+0x4c>)
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e00:	6413      	str	r3, [r2, #64]	; 0x40
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_MspInit+0x4c>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800

08000e20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a1d      	ldr	r2, [pc, #116]	; (8000eb4 <HAL_UART_MspInit+0x94>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d134      	bne.n	8000eac <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e4a:	4a1b      	ldr	r2, [pc, #108]	; (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e50:	6413      	str	r3, [r2, #64]	; 0x40
 8000e52:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e68:	f043 0302 	orr.w	r3, r3, #2
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b12      	ldr	r3, [pc, #72]	; (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0302 	and.w	r3, r3, #2
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e8c:	2307      	movs	r3, #7
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4619      	mov	r1, r3
 8000e96:	4809      	ldr	r0, [pc, #36]	; (8000ebc <HAL_UART_MspInit+0x9c>)
 8000e98:	f000 fa52 	bl	8001340 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2027      	movs	r0, #39	; 0x27
 8000ea2:	f000 f9f4 	bl	800128e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ea6:	2027      	movs	r0, #39	; 0x27
 8000ea8:	f000 fa0d 	bl	80012c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eac:	bf00      	nop
 8000eae:	3728      	adds	r7, #40	; 0x28
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40004800 	.word	0x40004800
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020400 	.word	0x40020400

08000ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <MemManage_Handler+0x4>

08000eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f14:	f000 f89e 	bl	8001054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <USART3_IRQHandler+0x10>)
 8000f22:	f001 f9c9 	bl	80022b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200000a8 	.word	0x200000a8

08000f30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <SystemInit+0x28>)
 8000f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f3a:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <SystemInit+0x28>)
 8000f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <SystemInit+0x28>)
 8000f46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f4a:	609a      	str	r2, [r3, #8]
#endif
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f62:	e003      	b.n	8000f6c <LoopCopyDataInit>

08000f64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f6a:	3104      	adds	r1, #4

08000f6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f6c:	480b      	ldr	r0, [pc, #44]	; (8000f9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f74:	d3f6      	bcc.n	8000f64 <CopyDataInit>
  ldr  r2, =_sbss
 8000f76:	4a0b      	ldr	r2, [pc, #44]	; (8000fa4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f78:	e002      	b.n	8000f80 <LoopFillZerobss>

08000f7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f7c:	f842 3b04 	str.w	r3, [r2], #4

08000f80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f84:	d3f9      	bcc.n	8000f7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f86:	f7ff ffd3 	bl	8000f30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f8a:	f001 ff9b 	bl	8002ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8e:	f7ff fde5 	bl	8000b5c <main>
  bx  lr    
 8000f92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f94:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f98:	08003010 	.word	0x08003010
  ldr  r0, =_sdata
 8000f9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fa0:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 8000fa4:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 8000fa8:	200005b4 	.word	0x200005b4

08000fac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fac:	e7fe      	b.n	8000fac <ADC_IRQHandler>
	...

08000fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <HAL_Init+0x40>)
 8000fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <HAL_Init+0x40>)
 8000fc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <HAL_Init+0x40>)
 8000fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd8:	2003      	movs	r0, #3
 8000fda:	f000 f94d 	bl	8001278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fde:	2000      	movs	r0, #0
 8000fe0:	f000 f808 	bl	8000ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe4:	f7ff fef4 	bl	8000dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40023c00 	.word	0x40023c00

08000ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_InitTick+0x54>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_InitTick+0x58>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100a:	fbb3 f3f1 	udiv	r3, r3, r1
 800100e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f965 	bl	80012e2 <HAL_SYSTICK_Config>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e00e      	b.n	8001040 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d80a      	bhi.n	800103e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001028:	2200      	movs	r2, #0
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f000 f92d 	bl	800128e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001034:	4a06      	ldr	r2, [pc, #24]	; (8001050 <HAL_InitTick+0x5c>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	e000      	b.n	8001040 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000018 	.word	0x20000018
 800104c:	20000020 	.word	0x20000020
 8001050:	2000001c 	.word	0x2000001c

08001054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x20>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x24>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4413      	add	r3, r2
 8001064:	4a04      	ldr	r2, [pc, #16]	; (8001078 <HAL_IncTick+0x24>)
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000020 	.word	0x20000020
 8001078:	200005b0 	.word	0x200005b0

0800107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <HAL_GetTick+0x14>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	200005b0 	.word	0x200005b0

08001094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800109c:	f7ff ffee 	bl	800107c <HAL_GetTick>
 80010a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ac:	d005      	beq.n	80010ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_Delay+0x40>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ba:	bf00      	nop
 80010bc:	f7ff ffde 	bl	800107c <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d8f7      	bhi.n	80010bc <HAL_Delay+0x28>
  {
  }
}
 80010cc:	bf00      	nop
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000020 	.word	0x20000020

080010d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <__NVIC_SetPriorityGrouping+0x44>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f4:	4013      	ands	r3, r2
 80010f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110a:	4a04      	ldr	r2, [pc, #16]	; (800111c <__NVIC_SetPriorityGrouping+0x44>)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	60d3      	str	r3, [r2, #12]
}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001124:	4b04      	ldr	r3, [pc, #16]	; (8001138 <__NVIC_GetPriorityGrouping+0x18>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	f003 0307 	and.w	r3, r3, #7
}
 800112e:	4618      	mov	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	2b00      	cmp	r3, #0
 800114c:	db0b      	blt.n	8001166 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	f003 021f 	and.w	r2, r3, #31
 8001154:	4907      	ldr	r1, [pc, #28]	; (8001174 <__NVIC_EnableIRQ+0x38>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	095b      	lsrs	r3, r3, #5
 800115c:	2001      	movs	r0, #1
 800115e:	fa00 f202 	lsl.w	r2, r0, r2
 8001162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000e100 	.word	0xe000e100

08001178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	2b00      	cmp	r3, #0
 800118a:	db0a      	blt.n	80011a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	b2da      	uxtb	r2, r3
 8001190:	490c      	ldr	r1, [pc, #48]	; (80011c4 <__NVIC_SetPriority+0x4c>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	0112      	lsls	r2, r2, #4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	440b      	add	r3, r1
 800119c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a0:	e00a      	b.n	80011b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4908      	ldr	r1, [pc, #32]	; (80011c8 <__NVIC_SetPriority+0x50>)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	3b04      	subs	r3, #4
 80011b0:	0112      	lsls	r2, r2, #4
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	440b      	add	r3, r1
 80011b6:	761a      	strb	r2, [r3, #24]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000e100 	.word	0xe000e100
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f1c3 0307 	rsb	r3, r3, #7
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	bf28      	it	cs
 80011ea:	2304      	movcs	r3, #4
 80011ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3304      	adds	r3, #4
 80011f2:	2b06      	cmp	r3, #6
 80011f4:	d902      	bls.n	80011fc <NVIC_EncodePriority+0x30>
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3b03      	subs	r3, #3
 80011fa:	e000      	b.n	80011fe <NVIC_EncodePriority+0x32>
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	f04f 32ff 	mov.w	r2, #4294967295
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43da      	mvns	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	401a      	ands	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001214:	f04f 31ff 	mov.w	r1, #4294967295
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	43d9      	mvns	r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	4313      	orrs	r3, r2
         );
}
 8001226:	4618      	mov	r0, r3
 8001228:	3724      	adds	r7, #36	; 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001244:	d301      	bcc.n	800124a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001246:	2301      	movs	r3, #1
 8001248:	e00f      	b.n	800126a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124a:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <SysTick_Config+0x40>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001252:	210f      	movs	r1, #15
 8001254:	f04f 30ff 	mov.w	r0, #4294967295
 8001258:	f7ff ff8e 	bl	8001178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <SysTick_Config+0x40>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001262:	4b04      	ldr	r3, [pc, #16]	; (8001274 <SysTick_Config+0x40>)
 8001264:	2207      	movs	r2, #7
 8001266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	e000e010 	.word	0xe000e010

08001278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ff29 	bl	80010d8 <__NVIC_SetPriorityGrouping>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128e:	b580      	push	{r7, lr}
 8001290:	b086      	sub	sp, #24
 8001292:	af00      	add	r7, sp, #0
 8001294:	4603      	mov	r3, r0
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a0:	f7ff ff3e 	bl	8001120 <__NVIC_GetPriorityGrouping>
 80012a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	68b9      	ldr	r1, [r7, #8]
 80012aa:	6978      	ldr	r0, [r7, #20]
 80012ac:	f7ff ff8e 	bl	80011cc <NVIC_EncodePriority>
 80012b0:	4602      	mov	r2, r0
 80012b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff5d 	bl	8001178 <__NVIC_SetPriority>
}
 80012be:	bf00      	nop
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff31 	bl	800113c <__NVIC_EnableIRQ>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff ffa2 	bl	8001234 <SysTick_Config>
 80012f0:	4603      	mov	r3, r0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d004      	beq.n	8001318 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2280      	movs	r2, #128	; 0x80
 8001312:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e00c      	b.n	8001332 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2205      	movs	r2, #5
 800131c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 0201 	bic.w	r2, r2, #1
 800132e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001340:	b480      	push	{r7}
 8001342:	b089      	sub	sp, #36	; 0x24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001352:	2300      	movs	r3, #0
 8001354:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
 800135a:	e16b      	b.n	8001634 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800135c:	2201      	movs	r2, #1
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	4013      	ands	r3, r2
 800136e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	429a      	cmp	r2, r3
 8001376:	f040 815a 	bne.w	800162e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d00b      	beq.n	800139a <HAL_GPIO_Init+0x5a>
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d007      	beq.n	800139a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800138e:	2b11      	cmp	r3, #17
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b12      	cmp	r3, #18
 8001398:	d130      	bne.n	80013fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	2203      	movs	r2, #3
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d0:	2201      	movs	r2, #1
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	091b      	lsrs	r3, r3, #4
 80013e6:	f003 0201 	and.w	r2, r3, #1
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	2203      	movs	r2, #3
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4313      	orrs	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b02      	cmp	r3, #2
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0xfc>
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b12      	cmp	r3, #18
 800143a:	d123      	bne.n	8001484 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	08da      	lsrs	r2, r3, #3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3208      	adds	r2, #8
 8001444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	220f      	movs	r2, #15
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	691a      	ldr	r2, [r3, #16]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	08da      	lsrs	r2, r3, #3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3208      	adds	r2, #8
 800147e:	69b9      	ldr	r1, [r7, #24]
 8001480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	2203      	movs	r2, #3
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0203 	and.w	r2, r3, #3
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 80b4 	beq.w	800162e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	4b5f      	ldr	r3, [pc, #380]	; (8001648 <HAL_GPIO_Init+0x308>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	4a5e      	ldr	r2, [pc, #376]	; (8001648 <HAL_GPIO_Init+0x308>)
 80014d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d4:	6453      	str	r3, [r2, #68]	; 0x44
 80014d6:	4b5c      	ldr	r3, [pc, #368]	; (8001648 <HAL_GPIO_Init+0x308>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014e2:	4a5a      	ldr	r2, [pc, #360]	; (800164c <HAL_GPIO_Init+0x30c>)
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	089b      	lsrs	r3, r3, #2
 80014e8:	3302      	adds	r3, #2
 80014ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f003 0303 	and.w	r3, r3, #3
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	220f      	movs	r2, #15
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a51      	ldr	r2, [pc, #324]	; (8001650 <HAL_GPIO_Init+0x310>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d02b      	beq.n	8001566 <HAL_GPIO_Init+0x226>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a50      	ldr	r2, [pc, #320]	; (8001654 <HAL_GPIO_Init+0x314>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d025      	beq.n	8001562 <HAL_GPIO_Init+0x222>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a4f      	ldr	r2, [pc, #316]	; (8001658 <HAL_GPIO_Init+0x318>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d01f      	beq.n	800155e <HAL_GPIO_Init+0x21e>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a4e      	ldr	r2, [pc, #312]	; (800165c <HAL_GPIO_Init+0x31c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d019      	beq.n	800155a <HAL_GPIO_Init+0x21a>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a4d      	ldr	r2, [pc, #308]	; (8001660 <HAL_GPIO_Init+0x320>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d013      	beq.n	8001556 <HAL_GPIO_Init+0x216>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a4c      	ldr	r2, [pc, #304]	; (8001664 <HAL_GPIO_Init+0x324>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d00d      	beq.n	8001552 <HAL_GPIO_Init+0x212>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a4b      	ldr	r2, [pc, #300]	; (8001668 <HAL_GPIO_Init+0x328>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d007      	beq.n	800154e <HAL_GPIO_Init+0x20e>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a4a      	ldr	r2, [pc, #296]	; (800166c <HAL_GPIO_Init+0x32c>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d101      	bne.n	800154a <HAL_GPIO_Init+0x20a>
 8001546:	2307      	movs	r3, #7
 8001548:	e00e      	b.n	8001568 <HAL_GPIO_Init+0x228>
 800154a:	2308      	movs	r3, #8
 800154c:	e00c      	b.n	8001568 <HAL_GPIO_Init+0x228>
 800154e:	2306      	movs	r3, #6
 8001550:	e00a      	b.n	8001568 <HAL_GPIO_Init+0x228>
 8001552:	2305      	movs	r3, #5
 8001554:	e008      	b.n	8001568 <HAL_GPIO_Init+0x228>
 8001556:	2304      	movs	r3, #4
 8001558:	e006      	b.n	8001568 <HAL_GPIO_Init+0x228>
 800155a:	2303      	movs	r3, #3
 800155c:	e004      	b.n	8001568 <HAL_GPIO_Init+0x228>
 800155e:	2302      	movs	r3, #2
 8001560:	e002      	b.n	8001568 <HAL_GPIO_Init+0x228>
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <HAL_GPIO_Init+0x228>
 8001566:	2300      	movs	r3, #0
 8001568:	69fa      	ldr	r2, [r7, #28]
 800156a:	f002 0203 	and.w	r2, r2, #3
 800156e:	0092      	lsls	r2, r2, #2
 8001570:	4093      	lsls	r3, r2
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001578:	4934      	ldr	r1, [pc, #208]	; (800164c <HAL_GPIO_Init+0x30c>)
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	089b      	lsrs	r3, r3, #2
 800157e:	3302      	adds	r3, #2
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001586:	4b3a      	ldr	r3, [pc, #232]	; (8001670 <HAL_GPIO_Init+0x330>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015aa:	4a31      	ldr	r2, [pc, #196]	; (8001670 <HAL_GPIO_Init+0x330>)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015b0:	4b2f      	ldr	r3, [pc, #188]	; (8001670 <HAL_GPIO_Init+0x330>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015d4:	4a26      	ldr	r2, [pc, #152]	; (8001670 <HAL_GPIO_Init+0x330>)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015da:	4b25      	ldr	r3, [pc, #148]	; (8001670 <HAL_GPIO_Init+0x330>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	43db      	mvns	r3, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4013      	ands	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015fe:	4a1c      	ldr	r2, [pc, #112]	; (8001670 <HAL_GPIO_Init+0x330>)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001604:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <HAL_GPIO_Init+0x330>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001628:	4a11      	ldr	r2, [pc, #68]	; (8001670 <HAL_GPIO_Init+0x330>)
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3301      	adds	r3, #1
 8001632:	61fb      	str	r3, [r7, #28]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	2b0f      	cmp	r3, #15
 8001638:	f67f ae90 	bls.w	800135c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800163c:	bf00      	nop
 800163e:	3724      	adds	r7, #36	; 0x24
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	40023800 	.word	0x40023800
 800164c:	40013800 	.word	0x40013800
 8001650:	40020000 	.word	0x40020000
 8001654:	40020400 	.word	0x40020400
 8001658:	40020800 	.word	0x40020800
 800165c:	40020c00 	.word	0x40020c00
 8001660:	40021000 	.word	0x40021000
 8001664:	40021400 	.word	0x40021400
 8001668:	40021800 	.word	0x40021800
 800166c:	40021c00 	.word	0x40021c00
 8001670:	40013c00 	.word	0x40013c00

08001674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	807b      	strh	r3, [r7, #2]
 8001680:	4613      	mov	r3, r2
 8001682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001684:	787b      	ldrb	r3, [r7, #1]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800168a:	887a      	ldrh	r2, [r7, #2]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001690:	e003      	b.n	800169a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001692:	887b      	ldrh	r3, [r7, #2]
 8001694:	041a      	lsls	r2, r3, #16
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	619a      	str	r2, [r3, #24]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	460b      	mov	r3, r1
 80016b0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695a      	ldr	r2, [r3, #20]
 80016b6:	887b      	ldrh	r3, [r7, #2]
 80016b8:	401a      	ands	r2, r3
 80016ba:	887b      	ldrh	r3, [r7, #2]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d104      	bne.n	80016ca <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80016c0:	887b      	ldrh	r3, [r7, #2]
 80016c2:	041a      	lsls	r2, r3, #16
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80016c8:	e002      	b.n	80016d0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	619a      	str	r2, [r3, #24]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e25b      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d075      	beq.n	80017e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016fa:	4ba3      	ldr	r3, [pc, #652]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f003 030c 	and.w	r3, r3, #12
 8001702:	2b04      	cmp	r3, #4
 8001704:	d00c      	beq.n	8001720 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001706:	4ba0      	ldr	r3, [pc, #640]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800170e:	2b08      	cmp	r3, #8
 8001710:	d112      	bne.n	8001738 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001712:	4b9d      	ldr	r3, [pc, #628]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800171a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800171e:	d10b      	bne.n	8001738 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001720:	4b99      	ldr	r3, [pc, #612]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d05b      	beq.n	80017e4 <HAL_RCC_OscConfig+0x108>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d157      	bne.n	80017e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e236      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001740:	d106      	bne.n	8001750 <HAL_RCC_OscConfig+0x74>
 8001742:	4b91      	ldr	r3, [pc, #580]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a90      	ldr	r2, [pc, #576]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	e01d      	b.n	800178c <HAL_RCC_OscConfig+0xb0>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001758:	d10c      	bne.n	8001774 <HAL_RCC_OscConfig+0x98>
 800175a:	4b8b      	ldr	r3, [pc, #556]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a8a      	ldr	r2, [pc, #552]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	4b88      	ldr	r3, [pc, #544]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a87      	ldr	r2, [pc, #540]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800176c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	e00b      	b.n	800178c <HAL_RCC_OscConfig+0xb0>
 8001774:	4b84      	ldr	r3, [pc, #528]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a83      	ldr	r2, [pc, #524]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800177a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	4b81      	ldr	r3, [pc, #516]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a80      	ldr	r2, [pc, #512]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d013      	beq.n	80017bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff fc72 	bl	800107c <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800179c:	f7ff fc6e 	bl	800107c <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b64      	cmp	r3, #100	; 0x64
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e1fb      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ae:	4b76      	ldr	r3, [pc, #472]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0xc0>
 80017ba:	e014      	b.n	80017e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff fc5e 	bl	800107c <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017c4:	f7ff fc5a 	bl	800107c <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	; 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e1e7      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d6:	4b6c      	ldr	r3, [pc, #432]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0xe8>
 80017e2:	e000      	b.n	80017e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d063      	beq.n	80018ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017f2:	4b65      	ldr	r3, [pc, #404]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 030c 	and.w	r3, r3, #12
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00b      	beq.n	8001816 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017fe:	4b62      	ldr	r3, [pc, #392]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001806:	2b08      	cmp	r3, #8
 8001808:	d11c      	bne.n	8001844 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800180a:	4b5f      	ldr	r3, [pc, #380]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d116      	bne.n	8001844 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001816:	4b5c      	ldr	r3, [pc, #368]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d005      	beq.n	800182e <HAL_RCC_OscConfig+0x152>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d001      	beq.n	800182e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e1bb      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182e:	4b56      	ldr	r3, [pc, #344]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	4952      	ldr	r1, [pc, #328]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800183e:	4313      	orrs	r3, r2
 8001840:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001842:	e03a      	b.n	80018ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d020      	beq.n	800188e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800184c:	4b4f      	ldr	r3, [pc, #316]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 800184e:	2201      	movs	r2, #1
 8001850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001852:	f7ff fc13 	bl	800107c <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800185a:	f7ff fc0f 	bl	800107c <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e19c      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186c:	4b46      	ldr	r3, [pc, #280]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001878:	4b43      	ldr	r3, [pc, #268]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	691b      	ldr	r3, [r3, #16]
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4940      	ldr	r1, [pc, #256]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001888:	4313      	orrs	r3, r2
 800188a:	600b      	str	r3, [r1, #0]
 800188c:	e015      	b.n	80018ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800188e:	4b3f      	ldr	r3, [pc, #252]	; (800198c <HAL_RCC_OscConfig+0x2b0>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001894:	f7ff fbf2 	bl	800107c <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800189c:	f7ff fbee 	bl	800107c <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e17b      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ae:	4b36      	ldr	r3, [pc, #216]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d030      	beq.n	8001928 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d016      	beq.n	80018fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ce:	4b30      	ldr	r3, [pc, #192]	; (8001990 <HAL_RCC_OscConfig+0x2b4>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d4:	f7ff fbd2 	bl	800107c <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018dc:	f7ff fbce 	bl	800107c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e15b      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ee:	4b26      	ldr	r3, [pc, #152]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 80018f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0x200>
 80018fa:	e015      	b.n	8001928 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018fc:	4b24      	ldr	r3, [pc, #144]	; (8001990 <HAL_RCC_OscConfig+0x2b4>)
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001902:	f7ff fbbb 	bl	800107c <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800190a:	f7ff fbb7 	bl	800107c <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e144      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800191e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1f0      	bne.n	800190a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 80a0 	beq.w	8001a76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001936:	2300      	movs	r3, #0
 8001938:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800193a:	4b13      	ldr	r3, [pc, #76]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10f      	bne.n	8001966 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001954:	6413      	str	r3, [r2, #64]	; 0x40
 8001956:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <HAL_RCC_OscConfig+0x2ac>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001962:	2301      	movs	r3, #1
 8001964:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_RCC_OscConfig+0x2b8>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196e:	2b00      	cmp	r3, #0
 8001970:	d121      	bne.n	80019b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <HAL_RCC_OscConfig+0x2b8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a07      	ldr	r2, [pc, #28]	; (8001994 <HAL_RCC_OscConfig+0x2b8>)
 8001978:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800197e:	f7ff fb7d 	bl	800107c <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001984:	e011      	b.n	80019aa <HAL_RCC_OscConfig+0x2ce>
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	42470000 	.word	0x42470000
 8001990:	42470e80 	.word	0x42470e80
 8001994:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001998:	f7ff fb70 	bl	800107c <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e0fd      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019aa:	4b81      	ldr	r3, [pc, #516]	; (8001bb0 <HAL_RCC_OscConfig+0x4d4>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d106      	bne.n	80019cc <HAL_RCC_OscConfig+0x2f0>
 80019be:	4b7d      	ldr	r3, [pc, #500]	; (8001bb4 <HAL_RCC_OscConfig+0x4d8>)
 80019c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c2:	4a7c      	ldr	r2, [pc, #496]	; (8001bb4 <HAL_RCC_OscConfig+0x4d8>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6713      	str	r3, [r2, #112]	; 0x70
 80019ca:	e01c      	b.n	8001a06 <HAL_RCC_OscConfig+0x32a>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	2b05      	cmp	r3, #5
 80019d2:	d10c      	bne.n	80019ee <HAL_RCC_OscConfig+0x312>
 80019d4:	4b77      	ldr	r3, [pc, #476]	; (8001bb4 <HAL_RCC_OscConfig+0x4d8>)
 80019d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d8:	4a76      	ldr	r2, [pc, #472]	; (8001bb4 <HAL_RCC_OscConfig+0x4d8>)
 80019da:	f043 0304 	orr.w	r3, r3, #4
 80019de:	6713      	str	r3, [r2, #112]	; 0x70
 80019e0:	4b74      	ldr	r3, [pc, #464]	; (8001bb4 <HAL_RCC_OscConfig+0x4d8>)
 80019e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e4:	4a73      	ldr	r2, [pc, #460]	; (8001bb4 <HAL_RCC_OscConfig+0x4d8>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6713      	str	r3, [r2, #112]	; 0x70
 80019ec:	e00b      	b.n	8001a06 <HAL_RCC_OscConfig+0x32a>
 80019ee:	4b71      	ldr	r3, [pc, #452]	; (8001bb4 <HAL_RCC_OscConfig+0x4d8>)
 80019f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f2:	4a70      	ldr	r2, [pc, #448]	; (8001bb4 <HAL_RCC_OscConfig+0x4d8>)
 80019f4:	f023 0301 	bic.w	r3, r3, #1
 80019f8:	6713      	str	r3, [r2, #112]	; 0x70
 80019fa:	4b6e      	ldr	r3, [pc, #440]	; (8001bb4 <HAL_RCC_OscConfig+0x4d8>)
 80019fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fe:	4a6d      	ldr	r2, [pc, #436]	; (8001bb4 <HAL_RCC_OscConfig+0x4d8>)
 8001a00:	f023 0304 	bic.w	r3, r3, #4
 8001a04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d015      	beq.n	8001a3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0e:	f7ff fb35 	bl	800107c <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a14:	e00a      	b.n	8001a2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a16:	f7ff fb31 	bl	800107c <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e0bc      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a2c:	4b61      	ldr	r3, [pc, #388]	; (8001bb4 <HAL_RCC_OscConfig+0x4d8>)
 8001a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0ee      	beq.n	8001a16 <HAL_RCC_OscConfig+0x33a>
 8001a38:	e014      	b.n	8001a64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3a:	f7ff fb1f 	bl	800107c <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a40:	e00a      	b.n	8001a58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a42:	f7ff fb1b 	bl	800107c <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e0a6      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a58:	4b56      	ldr	r3, [pc, #344]	; (8001bb4 <HAL_RCC_OscConfig+0x4d8>)
 8001a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1ee      	bne.n	8001a42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a64:	7dfb      	ldrb	r3, [r7, #23]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d105      	bne.n	8001a76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a6a:	4b52      	ldr	r3, [pc, #328]	; (8001bb4 <HAL_RCC_OscConfig+0x4d8>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	4a51      	ldr	r2, [pc, #324]	; (8001bb4 <HAL_RCC_OscConfig+0x4d8>)
 8001a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 8092 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a80:	4b4c      	ldr	r3, [pc, #304]	; (8001bb4 <HAL_RCC_OscConfig+0x4d8>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d05c      	beq.n	8001b46 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d141      	bne.n	8001b18 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a94:	4b48      	ldr	r3, [pc, #288]	; (8001bb8 <HAL_RCC_OscConfig+0x4dc>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9a:	f7ff faef 	bl	800107c <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa2:	f7ff faeb 	bl	800107c <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e078      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab4:	4b3f      	ldr	r3, [pc, #252]	; (8001bb4 <HAL_RCC_OscConfig+0x4d8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1f0      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69da      	ldr	r2, [r3, #28]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ace:	019b      	lsls	r3, r3, #6
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad6:	085b      	lsrs	r3, r3, #1
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	041b      	lsls	r3, r3, #16
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae2:	061b      	lsls	r3, r3, #24
 8001ae4:	4933      	ldr	r1, [pc, #204]	; (8001bb4 <HAL_RCC_OscConfig+0x4d8>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aea:	4b33      	ldr	r3, [pc, #204]	; (8001bb8 <HAL_RCC_OscConfig+0x4dc>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7ff fac4 	bl	800107c <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af8:	f7ff fac0 	bl	800107c <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e04d      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0a:	4b2a      	ldr	r3, [pc, #168]	; (8001bb4 <HAL_RCC_OscConfig+0x4d8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0x41c>
 8001b16:	e045      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b18:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <HAL_RCC_OscConfig+0x4dc>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1e:	f7ff faad 	bl	800107c <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b26:	f7ff faa9 	bl	800107c <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e036      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b38:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <HAL_RCC_OscConfig+0x4d8>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f0      	bne.n	8001b26 <HAL_RCC_OscConfig+0x44a>
 8001b44:	e02e      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e029      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b52:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_RCC_OscConfig+0x4d8>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d11c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d115      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d10d      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d106      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40007000 	.word	0x40007000
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	42470060 	.word	0x42470060

08001bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0cc      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd0:	4b68      	ldr	r3, [pc, #416]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 030f 	and.w	r3, r3, #15
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d90c      	bls.n	8001bf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bde:	4b65      	ldr	r3, [pc, #404]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be6:	4b63      	ldr	r3, [pc, #396]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e0b8      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d020      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c10:	4b59      	ldr	r3, [pc, #356]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	4a58      	ldr	r2, [pc, #352]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c28:	4b53      	ldr	r3, [pc, #332]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	4a52      	ldr	r2, [pc, #328]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c34:	4b50      	ldr	r3, [pc, #320]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	494d      	ldr	r1, [pc, #308]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d044      	beq.n	8001cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5a:	4b47      	ldr	r3, [pc, #284]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d119      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e07f      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d003      	beq.n	8001c7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	d107      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c7a:	4b3f      	ldr	r3, [pc, #252]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d109      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e06f      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8a:	4b3b      	ldr	r3, [pc, #236]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e067      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c9a:	4b37      	ldr	r3, [pc, #220]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f023 0203 	bic.w	r2, r3, #3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	4934      	ldr	r1, [pc, #208]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cac:	f7ff f9e6 	bl	800107c <HAL_GetTick>
 8001cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb2:	e00a      	b.n	8001cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb4:	f7ff f9e2 	bl	800107c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e04f      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cca:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 020c 	and.w	r2, r3, #12
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d1eb      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cdc:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d20c      	bcs.n	8001d04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cea:	4b22      	ldr	r3, [pc, #136]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf2:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e032      	b.n	8001d6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0304 	and.w	r3, r3, #4
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d008      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	4916      	ldr	r1, [pc, #88]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d009      	beq.n	8001d42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d2e:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	490e      	ldr	r1, [pc, #56]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d42:	f000 f821 	bl	8001d88 <HAL_RCC_GetSysClockFreq>
 8001d46:	4601      	mov	r1, r0
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <HAL_RCC_ClockConfig+0x1c0>)
 8001d54:	5cd3      	ldrb	r3, [r2, r3]
 8001d56:	fa21 f303 	lsr.w	r3, r1, r3
 8001d5a:	4a09      	ldr	r2, [pc, #36]	; (8001d80 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_RCC_ClockConfig+0x1c8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff f946 	bl	8000ff4 <HAL_InitTick>

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40023c00 	.word	0x40023c00
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	08002fe8 	.word	0x08002fe8
 8001d80:	20000018 	.word	0x20000018
 8001d84:	2000001c 	.word	0x2000001c

08001d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	2300      	movs	r3, #0
 8001d98:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d9e:	4b63      	ldr	r3, [pc, #396]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d007      	beq.n	8001dba <HAL_RCC_GetSysClockFreq+0x32>
 8001daa:	2b08      	cmp	r3, #8
 8001dac:	d008      	beq.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x38>
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f040 80b4 	bne.w	8001f1c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001db4:	4b5e      	ldr	r3, [pc, #376]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001db6:	60bb      	str	r3, [r7, #8]
       break;
 8001db8:	e0b3      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dba:	4b5e      	ldr	r3, [pc, #376]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001dbc:	60bb      	str	r3, [r7, #8]
      break;
 8001dbe:	e0b0      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dc0:	4b5a      	ldr	r3, [pc, #360]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dc8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dca:	4b58      	ldr	r3, [pc, #352]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d04a      	beq.n	8001e6c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd6:	4b55      	ldr	r3, [pc, #340]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	099b      	lsrs	r3, r3, #6
 8001ddc:	f04f 0400 	mov.w	r4, #0
 8001de0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	ea03 0501 	and.w	r5, r3, r1
 8001dec:	ea04 0602 	and.w	r6, r4, r2
 8001df0:	4629      	mov	r1, r5
 8001df2:	4632      	mov	r2, r6
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	f04f 0400 	mov.w	r4, #0
 8001dfc:	0154      	lsls	r4, r2, #5
 8001dfe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e02:	014b      	lsls	r3, r1, #5
 8001e04:	4619      	mov	r1, r3
 8001e06:	4622      	mov	r2, r4
 8001e08:	1b49      	subs	r1, r1, r5
 8001e0a:	eb62 0206 	sbc.w	r2, r2, r6
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	f04f 0400 	mov.w	r4, #0
 8001e16:	0194      	lsls	r4, r2, #6
 8001e18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e1c:	018b      	lsls	r3, r1, #6
 8001e1e:	1a5b      	subs	r3, r3, r1
 8001e20:	eb64 0402 	sbc.w	r4, r4, r2
 8001e24:	f04f 0100 	mov.w	r1, #0
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	00e2      	lsls	r2, r4, #3
 8001e2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e32:	00d9      	lsls	r1, r3, #3
 8001e34:	460b      	mov	r3, r1
 8001e36:	4614      	mov	r4, r2
 8001e38:	195b      	adds	r3, r3, r5
 8001e3a:	eb44 0406 	adc.w	r4, r4, r6
 8001e3e:	f04f 0100 	mov.w	r1, #0
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	0262      	lsls	r2, r4, #9
 8001e48:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001e4c:	0259      	lsls	r1, r3, #9
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4614      	mov	r4, r2
 8001e52:	4618      	mov	r0, r3
 8001e54:	4621      	mov	r1, r4
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f04f 0400 	mov.w	r4, #0
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4623      	mov	r3, r4
 8001e60:	f7fe f9c4 	bl	80001ec <__aeabi_uldivmod>
 8001e64:	4603      	mov	r3, r0
 8001e66:	460c      	mov	r4, r1
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	e049      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e6c:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	099b      	lsrs	r3, r3, #6
 8001e72:	f04f 0400 	mov.w	r4, #0
 8001e76:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	ea03 0501 	and.w	r5, r3, r1
 8001e82:	ea04 0602 	and.w	r6, r4, r2
 8001e86:	4629      	mov	r1, r5
 8001e88:	4632      	mov	r2, r6
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	f04f 0400 	mov.w	r4, #0
 8001e92:	0154      	lsls	r4, r2, #5
 8001e94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e98:	014b      	lsls	r3, r1, #5
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4622      	mov	r2, r4
 8001e9e:	1b49      	subs	r1, r1, r5
 8001ea0:	eb62 0206 	sbc.w	r2, r2, r6
 8001ea4:	f04f 0300 	mov.w	r3, #0
 8001ea8:	f04f 0400 	mov.w	r4, #0
 8001eac:	0194      	lsls	r4, r2, #6
 8001eae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001eb2:	018b      	lsls	r3, r1, #6
 8001eb4:	1a5b      	subs	r3, r3, r1
 8001eb6:	eb64 0402 	sbc.w	r4, r4, r2
 8001eba:	f04f 0100 	mov.w	r1, #0
 8001ebe:	f04f 0200 	mov.w	r2, #0
 8001ec2:	00e2      	lsls	r2, r4, #3
 8001ec4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ec8:	00d9      	lsls	r1, r3, #3
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4614      	mov	r4, r2
 8001ece:	195b      	adds	r3, r3, r5
 8001ed0:	eb44 0406 	adc.w	r4, r4, r6
 8001ed4:	f04f 0100 	mov.w	r1, #0
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	02a2      	lsls	r2, r4, #10
 8001ede:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001ee2:	0299      	lsls	r1, r3, #10
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4614      	mov	r4, r2
 8001ee8:	4618      	mov	r0, r3
 8001eea:	4621      	mov	r1, r4
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f04f 0400 	mov.w	r4, #0
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4623      	mov	r3, r4
 8001ef6:	f7fe f979 	bl	80001ec <__aeabi_uldivmod>
 8001efa:	4603      	mov	r3, r0
 8001efc:	460c      	mov	r4, r1
 8001efe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f00:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	0c1b      	lsrs	r3, r3, #16
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f18:	60bb      	str	r3, [r7, #8]
      break;
 8001f1a:	e002      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f1e:	60bb      	str	r3, [r7, #8]
      break;
 8001f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f22:	68bb      	ldr	r3, [r7, #8]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	00f42400 	.word	0x00f42400
 8001f34:	007a1200 	.word	0x007a1200

08001f38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	20000018 	.word	0x20000018

08001f50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f54:	f7ff fff0 	bl	8001f38 <HAL_RCC_GetHCLKFreq>
 8001f58:	4601      	mov	r1, r0
 8001f5a:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	0a9b      	lsrs	r3, r3, #10
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	4a03      	ldr	r2, [pc, #12]	; (8001f74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f66:	5cd3      	ldrb	r3, [r2, r3]
 8001f68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40023800 	.word	0x40023800
 8001f74:	08002ff8 	.word	0x08002ff8

08001f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f7c:	f7ff ffdc 	bl	8001f38 <HAL_RCC_GetHCLKFreq>
 8001f80:	4601      	mov	r1, r0
 8001f82:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	0b5b      	lsrs	r3, r3, #13
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	4a03      	ldr	r2, [pc, #12]	; (8001f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f8e:	5cd3      	ldrb	r3, [r2, r3]
 8001f90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	08002ff8 	.word	0x08002ff8

08001fa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e03f      	b.n	8002032 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d106      	bne.n	8001fcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7fe ff2a 	bl	8000e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2224      	movs	r2, #36	; 0x24
 8001fd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fe2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 fbf1 	bl	80027cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ff8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002008:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002018:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2220      	movs	r2, #32
 8002024:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2220      	movs	r2, #32
 800202c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b088      	sub	sp, #32
 800203e:	af02      	add	r7, sp, #8
 8002040:	60f8      	str	r0, [r7, #12]
 8002042:	60b9      	str	r1, [r7, #8]
 8002044:	603b      	str	r3, [r7, #0]
 8002046:	4613      	mov	r3, r2
 8002048:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b20      	cmp	r3, #32
 8002058:	f040 8083 	bne.w	8002162 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <HAL_UART_Transmit+0x2e>
 8002062:	88fb      	ldrh	r3, [r7, #6]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e07b      	b.n	8002164 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002072:	2b01      	cmp	r3, #1
 8002074:	d101      	bne.n	800207a <HAL_UART_Transmit+0x40>
 8002076:	2302      	movs	r3, #2
 8002078:	e074      	b.n	8002164 <HAL_UART_Transmit+0x12a>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2221      	movs	r2, #33	; 0x21
 800208c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002090:	f7fe fff4 	bl	800107c <HAL_GetTick>
 8002094:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	88fa      	ldrh	r2, [r7, #6]
 800209a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	88fa      	ldrh	r2, [r7, #6]
 80020a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80020aa:	e042      	b.n	8002132 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020c2:	d122      	bne.n	800210a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	2200      	movs	r2, #0
 80020cc:	2180      	movs	r1, #128	; 0x80
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 fa10 	bl	80024f4 <UART_WaitOnFlagUntilTimeout>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e042      	b.n	8002164 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020f0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d103      	bne.n	8002102 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	3302      	adds	r3, #2
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	e017      	b.n	8002132 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	3301      	adds	r3, #1
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	e013      	b.n	8002132 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2200      	movs	r2, #0
 8002112:	2180      	movs	r1, #128	; 0x80
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 f9ed 	bl	80024f4 <UART_WaitOnFlagUntilTimeout>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e01f      	b.n	8002164 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	60ba      	str	r2, [r7, #8]
 800212a:	781a      	ldrb	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002136:	b29b      	uxth	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1b7      	bne.n	80020ac <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	2200      	movs	r2, #0
 8002144:	2140      	movs	r1, #64	; 0x40
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 f9d4 	bl	80024f4 <UART_WaitOnFlagUntilTimeout>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e006      	b.n	8002164 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2220      	movs	r2, #32
 800215a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	e000      	b.n	8002164 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002162:	2302      	movs	r3, #2
  }
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b088      	sub	sp, #32
 8002170:	af02      	add	r7, sp, #8
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	603b      	str	r3, [r7, #0]
 8002178:	4613      	mov	r3, r2
 800217a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b20      	cmp	r3, #32
 800218a:	f040 8090 	bne.w	80022ae <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <HAL_UART_Receive+0x2e>
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e088      	b.n	80022b0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_UART_Receive+0x40>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e081      	b.n	80022b0 <HAL_UART_Receive+0x144>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2222      	movs	r2, #34	; 0x22
 80021be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80021c2:	f7fe ff5b 	bl	800107c <HAL_GetTick>
 80021c6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	88fa      	ldrh	r2, [r7, #6]
 80021cc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	88fa      	ldrh	r2, [r7, #6]
 80021d2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80021dc:	e05c      	b.n	8002298 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	3b01      	subs	r3, #1
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f4:	d12b      	bne.n	800224e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2200      	movs	r2, #0
 80021fe:	2120      	movs	r1, #32
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 f977 	bl	80024f4 <UART_WaitOnFlagUntilTimeout>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e04f      	b.n	80022b0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d10c      	bne.n	8002236 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	b29b      	uxth	r3, r3
 8002224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002228:	b29a      	uxth	r2, r3
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	3302      	adds	r3, #2
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	e030      	b.n	8002298 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	b29b      	uxth	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	b29a      	uxth	r2, r3
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	3301      	adds	r3, #1
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	e024      	b.n	8002298 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	2200      	movs	r2, #0
 8002256:	2120      	movs	r1, #32
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 f94b 	bl	80024f4 <UART_WaitOnFlagUntilTimeout>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e023      	b.n	80022b0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d108      	bne.n	8002282 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6859      	ldr	r1, [r3, #4]
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	1c5a      	adds	r2, r3, #1
 800227a:	60ba      	str	r2, [r7, #8]
 800227c:	b2ca      	uxtb	r2, r1
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	e00a      	b.n	8002298 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	b2da      	uxtb	r2, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	1c59      	adds	r1, r3, #1
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800229c:	b29b      	uxth	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d19d      	bne.n	80021de <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2220      	movs	r2, #32
 80022a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	e000      	b.n	80022b0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80022ae:	2302      	movs	r3, #2
  }
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10d      	bne.n	800230a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	f003 0320 	and.w	r3, r3, #32
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d008      	beq.n	800230a <HAL_UART_IRQHandler+0x52>
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	f003 0320 	and.w	r3, r3, #32
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f9e0 	bl	80026c8 <UART_Receive_IT>
      return;
 8002308:	e0d1      	b.n	80024ae <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80b0 	beq.w	8002472 <HAL_UART_IRQHandler+0x1ba>
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d105      	bne.n	8002328 <HAL_UART_IRQHandler+0x70>
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 80a5 	beq.w	8002472 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00a      	beq.n	8002348 <HAL_UART_IRQHandler+0x90>
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002340:	f043 0201 	orr.w	r2, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <HAL_UART_IRQHandler+0xb0>
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002360:	f043 0202 	orr.w	r2, r3, #2
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00a      	beq.n	8002388 <HAL_UART_IRQHandler+0xd0>
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002380:	f043 0204 	orr.w	r2, r3, #4
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00f      	beq.n	80023b2 <HAL_UART_IRQHandler+0xfa>
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	f003 0320 	and.w	r3, r3, #32
 8002398:	2b00      	cmp	r3, #0
 800239a:	d104      	bne.n	80023a6 <HAL_UART_IRQHandler+0xee>
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d005      	beq.n	80023b2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023aa:	f043 0208 	orr.w	r2, r3, #8
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d078      	beq.n	80024ac <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	f003 0320 	and.w	r3, r3, #32
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <HAL_UART_IRQHandler+0x11c>
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	f003 0320 	and.w	r3, r3, #32
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f97a 	bl	80026c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023de:	2b40      	cmp	r3, #64	; 0x40
 80023e0:	bf0c      	ite	eq
 80023e2:	2301      	moveq	r3, #1
 80023e4:	2300      	movne	r3, #0
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d102      	bne.n	80023fc <HAL_UART_IRQHandler+0x144>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d031      	beq.n	8002460 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f8c3 	bl	8002588 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240c:	2b40      	cmp	r3, #64	; 0x40
 800240e:	d123      	bne.n	8002458 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800241e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002424:	2b00      	cmp	r3, #0
 8002426:	d013      	beq.n	8002450 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242c:	4a21      	ldr	r2, [pc, #132]	; (80024b4 <HAL_UART_IRQHandler+0x1fc>)
 800242e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe ff60 	bl	80012fa <HAL_DMA_Abort_IT>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d016      	beq.n	800246e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800244a:	4610      	mov	r0, r2
 800244c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800244e:	e00e      	b.n	800246e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f845 	bl	80024e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002456:	e00a      	b.n	800246e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f841 	bl	80024e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800245e:	e006      	b.n	800246e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f83d 	bl	80024e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800246c:	e01e      	b.n	80024ac <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800246e:	bf00      	nop
    return;
 8002470:	e01c      	b.n	80024ac <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_UART_IRQHandler+0x1d6>
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f8b0 	bl	80025ec <UART_Transmit_IT>
    return;
 800248c:	e00f      	b.n	80024ae <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00a      	beq.n	80024ae <HAL_UART_IRQHandler+0x1f6>
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d005      	beq.n	80024ae <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f8f8 	bl	8002698 <UART_EndTransmit_IT>
    return;
 80024a8:	bf00      	nop
 80024aa:	e000      	b.n	80024ae <HAL_UART_IRQHandler+0x1f6>
    return;
 80024ac:	bf00      	nop
  }
}
 80024ae:	3720      	adds	r7, #32
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	080025c5 	.word	0x080025c5

080024b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	603b      	str	r3, [r7, #0]
 8002500:	4613      	mov	r3, r2
 8002502:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002504:	e02c      	b.n	8002560 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d028      	beq.n	8002560 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d007      	beq.n	8002524 <UART_WaitOnFlagUntilTimeout+0x30>
 8002514:	f7fe fdb2 	bl	800107c <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	429a      	cmp	r2, r3
 8002522:	d21d      	bcs.n	8002560 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002532:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695a      	ldr	r2, [r3, #20]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0201 	bic.w	r2, r2, #1
 8002542:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2220      	movs	r2, #32
 8002548:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e00f      	b.n	8002580 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	4013      	ands	r3, r2
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	429a      	cmp	r2, r3
 800256e:	bf0c      	ite	eq
 8002570:	2301      	moveq	r3, #1
 8002572:	2300      	movne	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	461a      	mov	r2, r3
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	429a      	cmp	r2, r3
 800257c:	d0c3      	beq.n	8002506 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68da      	ldr	r2, [r3, #12]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800259e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695a      	ldr	r2, [r3, #20]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0201 	bic.w	r2, r2, #1
 80025ae:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2220      	movs	r2, #32
 80025b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f7ff ff7e 	bl	80024e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025e4:	bf00      	nop
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b21      	cmp	r3, #33	; 0x21
 80025fe:	d144      	bne.n	800268a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002608:	d11a      	bne.n	8002640 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	881b      	ldrh	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800261e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d105      	bne.n	8002634 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	1c9a      	adds	r2, r3, #2
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	621a      	str	r2, [r3, #32]
 8002632:	e00e      	b.n	8002652 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	621a      	str	r2, [r3, #32]
 800263e:	e008      	b.n	8002652 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	1c59      	adds	r1, r3, #1
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6211      	str	r1, [r2, #32]
 800264a:	781a      	ldrb	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002656:	b29b      	uxth	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	b29b      	uxth	r3, r3
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	4619      	mov	r1, r3
 8002660:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10f      	bne.n	8002686 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002674:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68da      	ldr	r2, [r3, #12]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002684:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	e000      	b.n	800268c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800268a:	2302      	movs	r3, #2
  }
}
 800268c:	4618      	mov	r0, r3
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff fefd 	bl	80024b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	2b22      	cmp	r3, #34	; 0x22
 80026da:	d171      	bne.n	80027c0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e4:	d123      	bne.n	800272e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ea:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10e      	bne.n	8002712 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270a:	1c9a      	adds	r2, r3, #2
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	629a      	str	r2, [r3, #40]	; 0x28
 8002710:	e029      	b.n	8002766 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	b29b      	uxth	r3, r3
 800271a:	b2db      	uxtb	r3, r3
 800271c:	b29a      	uxth	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	629a      	str	r2, [r3, #40]	; 0x28
 800272c:	e01b      	b.n	8002766 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10a      	bne.n	800274c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6858      	ldr	r0, [r3, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002740:	1c59      	adds	r1, r3, #1
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6291      	str	r1, [r2, #40]	; 0x28
 8002746:	b2c2      	uxtb	r2, r0
 8002748:	701a      	strb	r2, [r3, #0]
 800274a:	e00c      	b.n	8002766 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	b2da      	uxtb	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002758:	1c58      	adds	r0, r3, #1
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	6288      	str	r0, [r1, #40]	; 0x28
 800275e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800276a:	b29b      	uxth	r3, r3
 800276c:	3b01      	subs	r3, #1
 800276e:	b29b      	uxth	r3, r3
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	4619      	mov	r1, r3
 8002774:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002776:	2b00      	cmp	r3, #0
 8002778:	d120      	bne.n	80027bc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0220 	bic.w	r2, r2, #32
 8002788:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68da      	ldr	r2, [r3, #12]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002798:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695a      	ldr	r2, [r3, #20]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0201 	bic.w	r2, r2, #1
 80027a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f7ff fe8a 	bl	80024cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	e002      	b.n	80027c2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	e000      	b.n	80027c2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80027c0:	2302      	movs	r3, #2
  }
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027d0:	b085      	sub	sp, #20
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	4313      	orrs	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800280e:	f023 030c 	bic.w	r3, r3, #12
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	68f9      	ldr	r1, [r7, #12]
 8002818:	430b      	orrs	r3, r1
 800281a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	430a      	orrs	r2, r1
 8002830:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800283a:	f040 818b 	bne.w	8002b54 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4ac1      	ldr	r2, [pc, #772]	; (8002b48 <UART_SetConfig+0x37c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d005      	beq.n	8002854 <UART_SetConfig+0x88>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4abf      	ldr	r2, [pc, #764]	; (8002b4c <UART_SetConfig+0x380>)
 800284e:	4293      	cmp	r3, r2
 8002850:	f040 80bd 	bne.w	80029ce <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002854:	f7ff fb90 	bl	8001f78 <HAL_RCC_GetPCLK2Freq>
 8002858:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	461d      	mov	r5, r3
 800285e:	f04f 0600 	mov.w	r6, #0
 8002862:	46a8      	mov	r8, r5
 8002864:	46b1      	mov	r9, r6
 8002866:	eb18 0308 	adds.w	r3, r8, r8
 800286a:	eb49 0409 	adc.w	r4, r9, r9
 800286e:	4698      	mov	r8, r3
 8002870:	46a1      	mov	r9, r4
 8002872:	eb18 0805 	adds.w	r8, r8, r5
 8002876:	eb49 0906 	adc.w	r9, r9, r6
 800287a:	f04f 0100 	mov.w	r1, #0
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002886:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800288a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800288e:	4688      	mov	r8, r1
 8002890:	4691      	mov	r9, r2
 8002892:	eb18 0005 	adds.w	r0, r8, r5
 8002896:	eb49 0106 	adc.w	r1, r9, r6
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	461d      	mov	r5, r3
 80028a0:	f04f 0600 	mov.w	r6, #0
 80028a4:	196b      	adds	r3, r5, r5
 80028a6:	eb46 0406 	adc.w	r4, r6, r6
 80028aa:	461a      	mov	r2, r3
 80028ac:	4623      	mov	r3, r4
 80028ae:	f7fd fc9d 	bl	80001ec <__aeabi_uldivmod>
 80028b2:	4603      	mov	r3, r0
 80028b4:	460c      	mov	r4, r1
 80028b6:	461a      	mov	r2, r3
 80028b8:	4ba5      	ldr	r3, [pc, #660]	; (8002b50 <UART_SetConfig+0x384>)
 80028ba:	fba3 2302 	umull	r2, r3, r3, r2
 80028be:	095b      	lsrs	r3, r3, #5
 80028c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	461d      	mov	r5, r3
 80028c8:	f04f 0600 	mov.w	r6, #0
 80028cc:	46a9      	mov	r9, r5
 80028ce:	46b2      	mov	sl, r6
 80028d0:	eb19 0309 	adds.w	r3, r9, r9
 80028d4:	eb4a 040a 	adc.w	r4, sl, sl
 80028d8:	4699      	mov	r9, r3
 80028da:	46a2      	mov	sl, r4
 80028dc:	eb19 0905 	adds.w	r9, r9, r5
 80028e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80028e4:	f04f 0100 	mov.w	r1, #0
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80028f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80028f8:	4689      	mov	r9, r1
 80028fa:	4692      	mov	sl, r2
 80028fc:	eb19 0005 	adds.w	r0, r9, r5
 8002900:	eb4a 0106 	adc.w	r1, sl, r6
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	461d      	mov	r5, r3
 800290a:	f04f 0600 	mov.w	r6, #0
 800290e:	196b      	adds	r3, r5, r5
 8002910:	eb46 0406 	adc.w	r4, r6, r6
 8002914:	461a      	mov	r2, r3
 8002916:	4623      	mov	r3, r4
 8002918:	f7fd fc68 	bl	80001ec <__aeabi_uldivmod>
 800291c:	4603      	mov	r3, r0
 800291e:	460c      	mov	r4, r1
 8002920:	461a      	mov	r2, r3
 8002922:	4b8b      	ldr	r3, [pc, #556]	; (8002b50 <UART_SetConfig+0x384>)
 8002924:	fba3 1302 	umull	r1, r3, r3, r2
 8002928:	095b      	lsrs	r3, r3, #5
 800292a:	2164      	movs	r1, #100	; 0x64
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	3332      	adds	r3, #50	; 0x32
 8002936:	4a86      	ldr	r2, [pc, #536]	; (8002b50 <UART_SetConfig+0x384>)
 8002938:	fba2 2303 	umull	r2, r3, r2, r3
 800293c:	095b      	lsrs	r3, r3, #5
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002944:	4498      	add	r8, r3
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	461d      	mov	r5, r3
 800294a:	f04f 0600 	mov.w	r6, #0
 800294e:	46a9      	mov	r9, r5
 8002950:	46b2      	mov	sl, r6
 8002952:	eb19 0309 	adds.w	r3, r9, r9
 8002956:	eb4a 040a 	adc.w	r4, sl, sl
 800295a:	4699      	mov	r9, r3
 800295c:	46a2      	mov	sl, r4
 800295e:	eb19 0905 	adds.w	r9, r9, r5
 8002962:	eb4a 0a06 	adc.w	sl, sl, r6
 8002966:	f04f 0100 	mov.w	r1, #0
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002972:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002976:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800297a:	4689      	mov	r9, r1
 800297c:	4692      	mov	sl, r2
 800297e:	eb19 0005 	adds.w	r0, r9, r5
 8002982:	eb4a 0106 	adc.w	r1, sl, r6
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	461d      	mov	r5, r3
 800298c:	f04f 0600 	mov.w	r6, #0
 8002990:	196b      	adds	r3, r5, r5
 8002992:	eb46 0406 	adc.w	r4, r6, r6
 8002996:	461a      	mov	r2, r3
 8002998:	4623      	mov	r3, r4
 800299a:	f7fd fc27 	bl	80001ec <__aeabi_uldivmod>
 800299e:	4603      	mov	r3, r0
 80029a0:	460c      	mov	r4, r1
 80029a2:	461a      	mov	r2, r3
 80029a4:	4b6a      	ldr	r3, [pc, #424]	; (8002b50 <UART_SetConfig+0x384>)
 80029a6:	fba3 1302 	umull	r1, r3, r3, r2
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	2164      	movs	r1, #100	; 0x64
 80029ae:	fb01 f303 	mul.w	r3, r1, r3
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	3332      	adds	r3, #50	; 0x32
 80029b8:	4a65      	ldr	r2, [pc, #404]	; (8002b50 <UART_SetConfig+0x384>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	f003 0207 	and.w	r2, r3, #7
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4442      	add	r2, r8
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	e26f      	b.n	8002eae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029ce:	f7ff fabf 	bl	8001f50 <HAL_RCC_GetPCLK1Freq>
 80029d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	461d      	mov	r5, r3
 80029d8:	f04f 0600 	mov.w	r6, #0
 80029dc:	46a8      	mov	r8, r5
 80029de:	46b1      	mov	r9, r6
 80029e0:	eb18 0308 	adds.w	r3, r8, r8
 80029e4:	eb49 0409 	adc.w	r4, r9, r9
 80029e8:	4698      	mov	r8, r3
 80029ea:	46a1      	mov	r9, r4
 80029ec:	eb18 0805 	adds.w	r8, r8, r5
 80029f0:	eb49 0906 	adc.w	r9, r9, r6
 80029f4:	f04f 0100 	mov.w	r1, #0
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a00:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a04:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a08:	4688      	mov	r8, r1
 8002a0a:	4691      	mov	r9, r2
 8002a0c:	eb18 0005 	adds.w	r0, r8, r5
 8002a10:	eb49 0106 	adc.w	r1, r9, r6
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	461d      	mov	r5, r3
 8002a1a:	f04f 0600 	mov.w	r6, #0
 8002a1e:	196b      	adds	r3, r5, r5
 8002a20:	eb46 0406 	adc.w	r4, r6, r6
 8002a24:	461a      	mov	r2, r3
 8002a26:	4623      	mov	r3, r4
 8002a28:	f7fd fbe0 	bl	80001ec <__aeabi_uldivmod>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	460c      	mov	r4, r1
 8002a30:	461a      	mov	r2, r3
 8002a32:	4b47      	ldr	r3, [pc, #284]	; (8002b50 <UART_SetConfig+0x384>)
 8002a34:	fba3 2302 	umull	r2, r3, r3, r2
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	461d      	mov	r5, r3
 8002a42:	f04f 0600 	mov.w	r6, #0
 8002a46:	46a9      	mov	r9, r5
 8002a48:	46b2      	mov	sl, r6
 8002a4a:	eb19 0309 	adds.w	r3, r9, r9
 8002a4e:	eb4a 040a 	adc.w	r4, sl, sl
 8002a52:	4699      	mov	r9, r3
 8002a54:	46a2      	mov	sl, r4
 8002a56:	eb19 0905 	adds.w	r9, r9, r5
 8002a5a:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a5e:	f04f 0100 	mov.w	r1, #0
 8002a62:	f04f 0200 	mov.w	r2, #0
 8002a66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a72:	4689      	mov	r9, r1
 8002a74:	4692      	mov	sl, r2
 8002a76:	eb19 0005 	adds.w	r0, r9, r5
 8002a7a:	eb4a 0106 	adc.w	r1, sl, r6
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	461d      	mov	r5, r3
 8002a84:	f04f 0600 	mov.w	r6, #0
 8002a88:	196b      	adds	r3, r5, r5
 8002a8a:	eb46 0406 	adc.w	r4, r6, r6
 8002a8e:	461a      	mov	r2, r3
 8002a90:	4623      	mov	r3, r4
 8002a92:	f7fd fbab 	bl	80001ec <__aeabi_uldivmod>
 8002a96:	4603      	mov	r3, r0
 8002a98:	460c      	mov	r4, r1
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4b2c      	ldr	r3, [pc, #176]	; (8002b50 <UART_SetConfig+0x384>)
 8002a9e:	fba3 1302 	umull	r1, r3, r3, r2
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	2164      	movs	r1, #100	; 0x64
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	3332      	adds	r3, #50	; 0x32
 8002ab0:	4a27      	ldr	r2, [pc, #156]	; (8002b50 <UART_SetConfig+0x384>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	095b      	lsrs	r3, r3, #5
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002abe:	4498      	add	r8, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	461d      	mov	r5, r3
 8002ac4:	f04f 0600 	mov.w	r6, #0
 8002ac8:	46a9      	mov	r9, r5
 8002aca:	46b2      	mov	sl, r6
 8002acc:	eb19 0309 	adds.w	r3, r9, r9
 8002ad0:	eb4a 040a 	adc.w	r4, sl, sl
 8002ad4:	4699      	mov	r9, r3
 8002ad6:	46a2      	mov	sl, r4
 8002ad8:	eb19 0905 	adds.w	r9, r9, r5
 8002adc:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ae0:	f04f 0100 	mov.w	r1, #0
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002aec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002af0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002af4:	4689      	mov	r9, r1
 8002af6:	4692      	mov	sl, r2
 8002af8:	eb19 0005 	adds.w	r0, r9, r5
 8002afc:	eb4a 0106 	adc.w	r1, sl, r6
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	461d      	mov	r5, r3
 8002b06:	f04f 0600 	mov.w	r6, #0
 8002b0a:	196b      	adds	r3, r5, r5
 8002b0c:	eb46 0406 	adc.w	r4, r6, r6
 8002b10:	461a      	mov	r2, r3
 8002b12:	4623      	mov	r3, r4
 8002b14:	f7fd fb6a 	bl	80001ec <__aeabi_uldivmod>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	460c      	mov	r4, r1
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <UART_SetConfig+0x384>)
 8002b20:	fba3 1302 	umull	r1, r3, r3, r2
 8002b24:	095b      	lsrs	r3, r3, #5
 8002b26:	2164      	movs	r1, #100	; 0x64
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	3332      	adds	r3, #50	; 0x32
 8002b32:	4a07      	ldr	r2, [pc, #28]	; (8002b50 <UART_SetConfig+0x384>)
 8002b34:	fba2 2303 	umull	r2, r3, r2, r3
 8002b38:	095b      	lsrs	r3, r3, #5
 8002b3a:	f003 0207 	and.w	r2, r3, #7
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4442      	add	r2, r8
 8002b44:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002b46:	e1b2      	b.n	8002eae <UART_SetConfig+0x6e2>
 8002b48:	40011000 	.word	0x40011000
 8002b4c:	40011400 	.word	0x40011400
 8002b50:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4ad7      	ldr	r2, [pc, #860]	; (8002eb8 <UART_SetConfig+0x6ec>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d005      	beq.n	8002b6a <UART_SetConfig+0x39e>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4ad6      	ldr	r2, [pc, #856]	; (8002ebc <UART_SetConfig+0x6f0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	f040 80d1 	bne.w	8002d0c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b6a:	f7ff fa05 	bl	8001f78 <HAL_RCC_GetPCLK2Freq>
 8002b6e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	469a      	mov	sl, r3
 8002b74:	f04f 0b00 	mov.w	fp, #0
 8002b78:	46d0      	mov	r8, sl
 8002b7a:	46d9      	mov	r9, fp
 8002b7c:	eb18 0308 	adds.w	r3, r8, r8
 8002b80:	eb49 0409 	adc.w	r4, r9, r9
 8002b84:	4698      	mov	r8, r3
 8002b86:	46a1      	mov	r9, r4
 8002b88:	eb18 080a 	adds.w	r8, r8, sl
 8002b8c:	eb49 090b 	adc.w	r9, r9, fp
 8002b90:	f04f 0100 	mov.w	r1, #0
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b9c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002ba0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ba4:	4688      	mov	r8, r1
 8002ba6:	4691      	mov	r9, r2
 8002ba8:	eb1a 0508 	adds.w	r5, sl, r8
 8002bac:	eb4b 0609 	adc.w	r6, fp, r9
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	f04f 0400 	mov.w	r4, #0
 8002bc2:	0094      	lsls	r4, r2, #2
 8002bc4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bc8:	008b      	lsls	r3, r1, #2
 8002bca:	461a      	mov	r2, r3
 8002bcc:	4623      	mov	r3, r4
 8002bce:	4628      	mov	r0, r5
 8002bd0:	4631      	mov	r1, r6
 8002bd2:	f7fd fb0b 	bl	80001ec <__aeabi_uldivmod>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	460c      	mov	r4, r1
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4bb8      	ldr	r3, [pc, #736]	; (8002ec0 <UART_SetConfig+0x6f4>)
 8002bde:	fba3 2302 	umull	r2, r3, r3, r2
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	469b      	mov	fp, r3
 8002bec:	f04f 0c00 	mov.w	ip, #0
 8002bf0:	46d9      	mov	r9, fp
 8002bf2:	46e2      	mov	sl, ip
 8002bf4:	eb19 0309 	adds.w	r3, r9, r9
 8002bf8:	eb4a 040a 	adc.w	r4, sl, sl
 8002bfc:	4699      	mov	r9, r3
 8002bfe:	46a2      	mov	sl, r4
 8002c00:	eb19 090b 	adds.w	r9, r9, fp
 8002c04:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c08:	f04f 0100 	mov.w	r1, #0
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c1c:	4689      	mov	r9, r1
 8002c1e:	4692      	mov	sl, r2
 8002c20:	eb1b 0509 	adds.w	r5, fp, r9
 8002c24:	eb4c 060a 	adc.w	r6, ip, sl
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	f04f 0400 	mov.w	r4, #0
 8002c3a:	0094      	lsls	r4, r2, #2
 8002c3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c40:	008b      	lsls	r3, r1, #2
 8002c42:	461a      	mov	r2, r3
 8002c44:	4623      	mov	r3, r4
 8002c46:	4628      	mov	r0, r5
 8002c48:	4631      	mov	r1, r6
 8002c4a:	f7fd facf 	bl	80001ec <__aeabi_uldivmod>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	460c      	mov	r4, r1
 8002c52:	461a      	mov	r2, r3
 8002c54:	4b9a      	ldr	r3, [pc, #616]	; (8002ec0 <UART_SetConfig+0x6f4>)
 8002c56:	fba3 1302 	umull	r1, r3, r3, r2
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	2164      	movs	r1, #100	; 0x64
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	3332      	adds	r3, #50	; 0x32
 8002c68:	4a95      	ldr	r2, [pc, #596]	; (8002ec0 <UART_SetConfig+0x6f4>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c74:	4498      	add	r8, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	469b      	mov	fp, r3
 8002c7a:	f04f 0c00 	mov.w	ip, #0
 8002c7e:	46d9      	mov	r9, fp
 8002c80:	46e2      	mov	sl, ip
 8002c82:	eb19 0309 	adds.w	r3, r9, r9
 8002c86:	eb4a 040a 	adc.w	r4, sl, sl
 8002c8a:	4699      	mov	r9, r3
 8002c8c:	46a2      	mov	sl, r4
 8002c8e:	eb19 090b 	adds.w	r9, r9, fp
 8002c92:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002c96:	f04f 0100 	mov.w	r1, #0
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ca2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ca6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002caa:	4689      	mov	r9, r1
 8002cac:	4692      	mov	sl, r2
 8002cae:	eb1b 0509 	adds.w	r5, fp, r9
 8002cb2:	eb4c 060a 	adc.w	r6, ip, sl
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	4619      	mov	r1, r3
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	f04f 0400 	mov.w	r4, #0
 8002cc8:	0094      	lsls	r4, r2, #2
 8002cca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002cce:	008b      	lsls	r3, r1, #2
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4623      	mov	r3, r4
 8002cd4:	4628      	mov	r0, r5
 8002cd6:	4631      	mov	r1, r6
 8002cd8:	f7fd fa88 	bl	80001ec <__aeabi_uldivmod>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	460c      	mov	r4, r1
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b77      	ldr	r3, [pc, #476]	; (8002ec0 <UART_SetConfig+0x6f4>)
 8002ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ce8:	095b      	lsrs	r3, r3, #5
 8002cea:	2164      	movs	r1, #100	; 0x64
 8002cec:	fb01 f303 	mul.w	r3, r1, r3
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	3332      	adds	r3, #50	; 0x32
 8002cf6:	4a72      	ldr	r2, [pc, #456]	; (8002ec0 <UART_SetConfig+0x6f4>)
 8002cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfc:	095b      	lsrs	r3, r3, #5
 8002cfe:	f003 020f 	and.w	r2, r3, #15
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4442      	add	r2, r8
 8002d08:	609a      	str	r2, [r3, #8]
 8002d0a:	e0d0      	b.n	8002eae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d0c:	f7ff f920 	bl	8001f50 <HAL_RCC_GetPCLK1Freq>
 8002d10:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	469a      	mov	sl, r3
 8002d16:	f04f 0b00 	mov.w	fp, #0
 8002d1a:	46d0      	mov	r8, sl
 8002d1c:	46d9      	mov	r9, fp
 8002d1e:	eb18 0308 	adds.w	r3, r8, r8
 8002d22:	eb49 0409 	adc.w	r4, r9, r9
 8002d26:	4698      	mov	r8, r3
 8002d28:	46a1      	mov	r9, r4
 8002d2a:	eb18 080a 	adds.w	r8, r8, sl
 8002d2e:	eb49 090b 	adc.w	r9, r9, fp
 8002d32:	f04f 0100 	mov.w	r1, #0
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d46:	4688      	mov	r8, r1
 8002d48:	4691      	mov	r9, r2
 8002d4a:	eb1a 0508 	adds.w	r5, sl, r8
 8002d4e:	eb4b 0609 	adc.w	r6, fp, r9
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	4619      	mov	r1, r3
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	f04f 0400 	mov.w	r4, #0
 8002d64:	0094      	lsls	r4, r2, #2
 8002d66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d6a:	008b      	lsls	r3, r1, #2
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4623      	mov	r3, r4
 8002d70:	4628      	mov	r0, r5
 8002d72:	4631      	mov	r1, r6
 8002d74:	f7fd fa3a 	bl	80001ec <__aeabi_uldivmod>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	460c      	mov	r4, r1
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4b50      	ldr	r3, [pc, #320]	; (8002ec0 <UART_SetConfig+0x6f4>)
 8002d80:	fba3 2302 	umull	r2, r3, r3, r2
 8002d84:	095b      	lsrs	r3, r3, #5
 8002d86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	469b      	mov	fp, r3
 8002d8e:	f04f 0c00 	mov.w	ip, #0
 8002d92:	46d9      	mov	r9, fp
 8002d94:	46e2      	mov	sl, ip
 8002d96:	eb19 0309 	adds.w	r3, r9, r9
 8002d9a:	eb4a 040a 	adc.w	r4, sl, sl
 8002d9e:	4699      	mov	r9, r3
 8002da0:	46a2      	mov	sl, r4
 8002da2:	eb19 090b 	adds.w	r9, r9, fp
 8002da6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002daa:	f04f 0100 	mov.w	r1, #0
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002db6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002dba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002dbe:	4689      	mov	r9, r1
 8002dc0:	4692      	mov	sl, r2
 8002dc2:	eb1b 0509 	adds.w	r5, fp, r9
 8002dc6:	eb4c 060a 	adc.w	r6, ip, sl
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	4619      	mov	r1, r3
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	f04f 0400 	mov.w	r4, #0
 8002ddc:	0094      	lsls	r4, r2, #2
 8002dde:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002de2:	008b      	lsls	r3, r1, #2
 8002de4:	461a      	mov	r2, r3
 8002de6:	4623      	mov	r3, r4
 8002de8:	4628      	mov	r0, r5
 8002dea:	4631      	mov	r1, r6
 8002dec:	f7fd f9fe 	bl	80001ec <__aeabi_uldivmod>
 8002df0:	4603      	mov	r3, r0
 8002df2:	460c      	mov	r4, r1
 8002df4:	461a      	mov	r2, r3
 8002df6:	4b32      	ldr	r3, [pc, #200]	; (8002ec0 <UART_SetConfig+0x6f4>)
 8002df8:	fba3 1302 	umull	r1, r3, r3, r2
 8002dfc:	095b      	lsrs	r3, r3, #5
 8002dfe:	2164      	movs	r1, #100	; 0x64
 8002e00:	fb01 f303 	mul.w	r3, r1, r3
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	3332      	adds	r3, #50	; 0x32
 8002e0a:	4a2d      	ldr	r2, [pc, #180]	; (8002ec0 <UART_SetConfig+0x6f4>)
 8002e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e10:	095b      	lsrs	r3, r3, #5
 8002e12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e16:	4498      	add	r8, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	469b      	mov	fp, r3
 8002e1c:	f04f 0c00 	mov.w	ip, #0
 8002e20:	46d9      	mov	r9, fp
 8002e22:	46e2      	mov	sl, ip
 8002e24:	eb19 0309 	adds.w	r3, r9, r9
 8002e28:	eb4a 040a 	adc.w	r4, sl, sl
 8002e2c:	4699      	mov	r9, r3
 8002e2e:	46a2      	mov	sl, r4
 8002e30:	eb19 090b 	adds.w	r9, r9, fp
 8002e34:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e38:	f04f 0100 	mov.w	r1, #0
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e4c:	4689      	mov	r9, r1
 8002e4e:	4692      	mov	sl, r2
 8002e50:	eb1b 0509 	adds.w	r5, fp, r9
 8002e54:	eb4c 060a 	adc.w	r6, ip, sl
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	f04f 0400 	mov.w	r4, #0
 8002e6a:	0094      	lsls	r4, r2, #2
 8002e6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e70:	008b      	lsls	r3, r1, #2
 8002e72:	461a      	mov	r2, r3
 8002e74:	4623      	mov	r3, r4
 8002e76:	4628      	mov	r0, r5
 8002e78:	4631      	mov	r1, r6
 8002e7a:	f7fd f9b7 	bl	80001ec <__aeabi_uldivmod>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	460c      	mov	r4, r1
 8002e82:	461a      	mov	r2, r3
 8002e84:	4b0e      	ldr	r3, [pc, #56]	; (8002ec0 <UART_SetConfig+0x6f4>)
 8002e86:	fba3 1302 	umull	r1, r3, r3, r2
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	2164      	movs	r1, #100	; 0x64
 8002e8e:	fb01 f303 	mul.w	r3, r1, r3
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	3332      	adds	r3, #50	; 0x32
 8002e98:	4a09      	ldr	r2, [pc, #36]	; (8002ec0 <UART_SetConfig+0x6f4>)
 8002e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9e:	095b      	lsrs	r3, r3, #5
 8002ea0:	f003 020f 	and.w	r2, r3, #15
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4442      	add	r2, r8
 8002eaa:	609a      	str	r2, [r3, #8]
}
 8002eac:	e7ff      	b.n	8002eae <UART_SetConfig+0x6e2>
 8002eae:	bf00      	nop
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eb8:	40011000 	.word	0x40011000
 8002ebc:	40011400 	.word	0x40011400
 8002ec0:	51eb851f 	.word	0x51eb851f

08002ec4 <__libc_init_array>:
 8002ec4:	b570      	push	{r4, r5, r6, lr}
 8002ec6:	4e0d      	ldr	r6, [pc, #52]	; (8002efc <__libc_init_array+0x38>)
 8002ec8:	4c0d      	ldr	r4, [pc, #52]	; (8002f00 <__libc_init_array+0x3c>)
 8002eca:	1ba4      	subs	r4, r4, r6
 8002ecc:	10a4      	asrs	r4, r4, #2
 8002ece:	2500      	movs	r5, #0
 8002ed0:	42a5      	cmp	r5, r4
 8002ed2:	d109      	bne.n	8002ee8 <__libc_init_array+0x24>
 8002ed4:	4e0b      	ldr	r6, [pc, #44]	; (8002f04 <__libc_init_array+0x40>)
 8002ed6:	4c0c      	ldr	r4, [pc, #48]	; (8002f08 <__libc_init_array+0x44>)
 8002ed8:	f000 f820 	bl	8002f1c <_init>
 8002edc:	1ba4      	subs	r4, r4, r6
 8002ede:	10a4      	asrs	r4, r4, #2
 8002ee0:	2500      	movs	r5, #0
 8002ee2:	42a5      	cmp	r5, r4
 8002ee4:	d105      	bne.n	8002ef2 <__libc_init_array+0x2e>
 8002ee6:	bd70      	pop	{r4, r5, r6, pc}
 8002ee8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002eec:	4798      	blx	r3
 8002eee:	3501      	adds	r5, #1
 8002ef0:	e7ee      	b.n	8002ed0 <__libc_init_array+0xc>
 8002ef2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ef6:	4798      	blx	r3
 8002ef8:	3501      	adds	r5, #1
 8002efa:	e7f2      	b.n	8002ee2 <__libc_init_array+0x1e>
 8002efc:	08003008 	.word	0x08003008
 8002f00:	08003008 	.word	0x08003008
 8002f04:	08003008 	.word	0x08003008
 8002f08:	0800300c 	.word	0x0800300c

08002f0c <memset>:
 8002f0c:	4402      	add	r2, r0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d100      	bne.n	8002f16 <memset+0xa>
 8002f14:	4770      	bx	lr
 8002f16:	f803 1b01 	strb.w	r1, [r3], #1
 8002f1a:	e7f9      	b.n	8002f10 <memset+0x4>

08002f1c <_init>:
 8002f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1e:	bf00      	nop
 8002f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f22:	bc08      	pop	{r3}
 8002f24:	469e      	mov	lr, r3
 8002f26:	4770      	bx	lr

08002f28 <_fini>:
 8002f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f2a:	bf00      	nop
 8002f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f2e:	bc08      	pop	{r3}
 8002f30:	469e      	mov	lr, r3
 8002f32:	4770      	bx	lr
